/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_v1 "k8s.io/kubernetes/pkg/apis/meta/v1"
	pkg5_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_v1.Time
		var v2 pkg5_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg4_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			yyq2[14] = x.ClusterName != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSlicev1_OwnerReference(([]pkg2_v1.OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSlicev1_OwnerReference(([]pkg2_v1.OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[14] {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_v1.Time{}
			} else {
				yyv62 := &x.CreationTimestamp
				yym63 := z.DecBinary()
				_ = yym63
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv62) {
				} else if yym63 {
					z.DecBinaryUnmarshal(yyv62)
				} else if !yym63 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv62)
				} else {
					z.DecFallback(yyv62, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_v1.Time)
				}
				yym65 := z.DecBinary()
				_ = yym65
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym65 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym65 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym67 := z.DecBinary()
				_ = yym67
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv68 := &x.Labels
				yym69 := z.DecBinary()
				_ = yym69
				if false {
				} else {
					z.F.DecMapStringStringX(yyv68, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv70 := &x.Annotations
				yym71 := z.DecBinary()
				_ = yym71
				if false {
				} else {
					z.F.DecMapStringStringX(yyv70, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv72 := &x.OwnerReferences
				yym73 := z.DecBinary()
				_ = yym73
				if false {
				} else {
					h.decSlicev1_OwnerReference((*[]pkg2_v1.OwnerReference)(yyv72), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv74 := &x.Finalizers
				yym75 := z.DecBinary()
				_ = yym75
				if false {
				} else {
					z.F.DecSliceStringX(yyv74, false, d)
				}
			}
		case "clusterName":
			if r.TryDecodeAsNil() {
				x.ClusterName = ""
			} else {
				x.ClusterName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj77 int
	var yyb77 bool
	var yyhl77 bool = l >= 0
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_v1.Time{}
	} else {
		yyv85 := &x.CreationTimestamp
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv85) {
		} else if yym86 {
			z.DecBinaryUnmarshal(yyv85)
		} else if !yym86 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv85)
		} else {
			z.DecFallback(yyv85, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_v1.Time)
		}
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym88 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym88 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv91 := &x.Labels
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			z.F.DecMapStringStringX(yyv91, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv93 := &x.Annotations
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecMapStringStringX(yyv93, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv95 := &x.OwnerReferences
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			h.decSlicev1_OwnerReference((*[]pkg2_v1.OwnerReference)(yyv95), d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv97 := &x.Finalizers
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			z.F.DecSliceStringX(yyv97, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterName = ""
	} else {
		x.ClusterName = string(r.DecodeString())
	}
	for {
		yyj77++
		if yyhl77 {
			yyb77 = yyj77 > l
		} else {
			yyb77 = r.CheckBreak()
		}
		if yyb77 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj77-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym100 := z.EncBinary()
		_ = yym100
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep101 := !z.EncBinary()
			yy2arr101 := z.EncBasicHandle().StructToArray
			var yyq101 [24]bool
			_, _, _ = yysep101, yyq101, yy2arr101
			const yyr101 bool = false
			yyq101[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq101[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq101[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq101[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq101[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq101[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq101[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq101[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq101[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq101[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq101[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq101[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq101[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq101[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq101[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq101[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq101[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq101[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq101[19] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq101[20] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq101[21] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq101[22] = x.VolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq101[23] = x.VolumeSource.PhotonPersistentDisk != nil && x.PhotonPersistentDisk != nil
			var yynn101 int
			if yyr101 || yy2arr101 {
				r.EncodeArrayStart(24)
			} else {
				yynn101 = 1
				for _, b := range yyq101 {
					if b {
						yynn101++
					}
				}
				r.EncodeMapStart(yynn101)
				yynn101 = 0
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym103 := z.EncBinary()
				_ = yym103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym104 := z.EncBinary()
				_ = yym104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn105 bool
			if x.VolumeSource.HostPath == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr101 || yy2arr101 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr101 || yy2arr101 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr101 || yy2arr101 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr101 || yy2arr101 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.GitRepo == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr101 || yy2arr101 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.Secret == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr101 || yy2arr101 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.NFS == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr101 || yy2arr101 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.ISCSI == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr101 || yy2arr101 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr101 || yy2arr101 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr101 || yy2arr101 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.RBD == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr101 || yy2arr101 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr101 || yy2arr101 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.Cinder == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr101 || yy2arr101 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.CephFS == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr101 || yy2arr101 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.Flocker == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr101 || yy2arr101 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr101 || yy2arr101 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.FC == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr101 || yy2arr101 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.AzureFile == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr101 || yy2arr101 {
				if yyn122 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr101 || yy2arr101 {
				if yyn123 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[19] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr101 || yy2arr101 {
				if yyn124 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[20] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.Quobyte == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr101 || yy2arr101 {
				if yyn125 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[21] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn126 bool
			if x.VolumeSource.AzureDisk == nil {
				yyn126 = true
				goto LABEL126
			}
		LABEL126:
			if yyr101 || yy2arr101 {
				if yyn126 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[22] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn126 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn127 bool
			if x.VolumeSource.PhotonPersistentDisk == nil {
				yyn127 = true
				goto LABEL127
			}
		LABEL127:
			if yyr101 || yy2arr101 {
				if yyn127 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[23] {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn127 {
						r.EncodeNil()
					} else {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym128 := z.DecBinary()
	_ = yym128
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct129 := r.ContainerType()
		if yyct129 == codecSelferValueTypeMap1234 {
			yyl129 := r.ReadMapStart()
			if yyl129 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl129, d)
			}
		} else if yyct129 == codecSelferValueTypeArray1234 {
			yyl129 := r.ReadArrayStart()
			if yyl129 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl129, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys130Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys130Slc
	var yyhl130 bool = l >= 0
	for yyj130 := 0; ; yyj130++ {
		if yyhl130 {
			if yyj130 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys130Slc = r.DecodeBytes(yys130Slc, true, true)
		yys130 := string(yys130Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys130 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.VolumeSource.AzureDisk == nil {
				x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if x.VolumeSource.PhotonPersistentDisk == nil {
				x.VolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys130)
		} // end switch yys130
	} // end for yyj130
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj155 int
	var yyb155 bool
	var yyhl155 bool = l >= 0
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureDisk == nil {
		x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PhotonPersistentDisk == nil {
		x.VolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	for {
		yyj155++
		if yyhl155 {
			yyb155 = yyj155 > l
		} else {
			yyb155 = r.CheckBreak()
		}
		if yyb155 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj155-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym180 := z.EncBinary()
		_ = yym180
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep181 := !z.EncBinary()
			yy2arr181 := z.EncBasicHandle().StructToArray
			var yyq181 [23]bool
			_, _, _ = yysep181, yyq181, yy2arr181
			const yyr181 bool = false
			yyq181[0] = x.HostPath != nil
			yyq181[1] = x.EmptyDir != nil
			yyq181[2] = x.GCEPersistentDisk != nil
			yyq181[3] = x.AWSElasticBlockStore != nil
			yyq181[4] = x.GitRepo != nil
			yyq181[5] = x.Secret != nil
			yyq181[6] = x.NFS != nil
			yyq181[7] = x.ISCSI != nil
			yyq181[8] = x.Glusterfs != nil
			yyq181[9] = x.PersistentVolumeClaim != nil
			yyq181[10] = x.RBD != nil
			yyq181[11] = x.FlexVolume != nil
			yyq181[12] = x.Cinder != nil
			yyq181[13] = x.CephFS != nil
			yyq181[14] = x.Flocker != nil
			yyq181[15] = x.DownwardAPI != nil
			yyq181[16] = x.FC != nil
			yyq181[17] = x.AzureFile != nil
			yyq181[18] = x.ConfigMap != nil
			yyq181[19] = x.VsphereVolume != nil
			yyq181[20] = x.Quobyte != nil
			yyq181[21] = x.AzureDisk != nil
			yyq181[22] = x.PhotonPersistentDisk != nil
			var yynn181 int
			if yyr181 || yy2arr181 {
				r.EncodeArrayStart(23)
			} else {
				yynn181 = 0
				for _, b := range yyq181 {
					if b {
						yynn181++
					}
				}
				r.EncodeMapStart(yynn181)
				yynn181 = 0
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[18] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[19] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[20] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[21] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[22] {
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym205 := z.DecBinary()
	_ = yym205
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct206 := r.ContainerType()
		if yyct206 == codecSelferValueTypeMap1234 {
			yyl206 := r.ReadMapStart()
			if yyl206 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl206, d)
			}
		} else if yyct206 == codecSelferValueTypeArray1234 {
			yyl206 := r.ReadArrayStart()
			if yyl206 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl206, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys207Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys207Slc
	var yyhl207 bool = l >= 0
	for yyj207 := 0; ; yyj207++ {
		if yyhl207 {
			if yyj207 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys207Slc = r.DecodeBytes(yys207Slc, true, true)
		yys207 := string(yys207Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys207 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys207)
		} // end switch yys207
	} // end for yyj207
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj231 int
	var yyb231 bool
	var yyhl231 bool = l >= 0
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	for {
		yyj231++
		if yyhl231 {
			yyb231 = yyj231 > l
		} else {
			yyb231 = r.CheckBreak()
		}
		if yyb231 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj231-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym255 := z.EncBinary()
		_ = yym255
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep256 := !z.EncBinary()
			yy2arr256 := z.EncBasicHandle().StructToArray
			var yyq256 [2]bool
			_, _, _ = yysep256, yyq256, yy2arr256
			const yyr256 bool = false
			yyq256[1] = x.ReadOnly != false
			var yynn256 int
			if yyr256 || yy2arr256 {
				r.EncodeArrayStart(2)
			} else {
				yynn256 = 1
				for _, b := range yyq256 {
					if b {
						yynn256++
					}
				}
				r.EncodeMapStart(yynn256)
				yynn256 = 0
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym258 := z.EncBinary()
				_ = yym258
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym259 := z.EncBinary()
				_ = yym259
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[1] {
					yym261 := z.EncBinary()
					_ = yym261
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq256[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym262 := z.EncBinary()
					_ = yym262
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym263 := z.DecBinary()
	_ = yym263
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct264 := r.ContainerType()
		if yyct264 == codecSelferValueTypeMap1234 {
			yyl264 := r.ReadMapStart()
			if yyl264 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl264, d)
			}
		} else if yyct264 == codecSelferValueTypeArray1234 {
			yyl264 := r.ReadArrayStart()
			if yyl264 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl264, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys265Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys265Slc
	var yyhl265 bool = l >= 0
	for yyj265 := 0; ; yyj265++ {
		if yyhl265 {
			if yyj265 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys265Slc = r.DecodeBytes(yys265Slc, true, true)
		yys265 := string(yys265Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys265 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys265)
		} // end switch yys265
	} // end for yyj265
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj268 int
	var yyb268 bool
	var yyhl268 bool = l >= 0
	yyj268++
	if yyhl268 {
		yyb268 = yyj268 > l
	} else {
		yyb268 = r.CheckBreak()
	}
	if yyb268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj268++
	if yyhl268 {
		yyb268 = yyj268 > l
	} else {
		yyb268 = r.CheckBreak()
	}
	if yyb268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj268++
		if yyhl268 {
			yyb268 = yyj268 > l
		} else {
			yyb268 = r.CheckBreak()
		}
		if yyb268 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj268-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym271 := z.EncBinary()
		_ = yym271
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep272 := !z.EncBinary()
			yy2arr272 := z.EncBasicHandle().StructToArray
			var yyq272 [17]bool
			_, _, _ = yysep272, yyq272, yy2arr272
			const yyr272 bool = false
			yyq272[0] = x.GCEPersistentDisk != nil
			yyq272[1] = x.AWSElasticBlockStore != nil
			yyq272[2] = x.HostPath != nil
			yyq272[3] = x.Glusterfs != nil
			yyq272[4] = x.NFS != nil
			yyq272[5] = x.RBD != nil
			yyq272[6] = x.ISCSI != nil
			yyq272[7] = x.Cinder != nil
			yyq272[8] = x.CephFS != nil
			yyq272[9] = x.FC != nil
			yyq272[10] = x.Flocker != nil
			yyq272[11] = x.FlexVolume != nil
			yyq272[12] = x.AzureFile != nil
			yyq272[13] = x.VsphereVolume != nil
			yyq272[14] = x.Quobyte != nil
			yyq272[15] = x.AzureDisk != nil
			yyq272[16] = x.PhotonPersistentDisk != nil
			var yynn272 int
			if yyr272 || yy2arr272 {
				r.EncodeArrayStart(17)
			} else {
				yynn272 = 0
				for _, b := range yyq272 {
					if b {
						yynn272++
					}
				}
				r.EncodeMapStart(yynn272)
				yynn272 = 0
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[13] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[14] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[15] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[16] {
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym290 := z.DecBinary()
	_ = yym290
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct291 := r.ContainerType()
		if yyct291 == codecSelferValueTypeMap1234 {
			yyl291 := r.ReadMapStart()
			if yyl291 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl291, d)
			}
		} else if yyct291 == codecSelferValueTypeArray1234 {
			yyl291 := r.ReadArrayStart()
			if yyl291 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl291, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys292Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys292Slc
	var yyhl292 bool = l >= 0
	for yyj292 := 0; ; yyj292++ {
		if yyhl292 {
			if yyj292 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys292Slc = r.DecodeBytes(yys292Slc, true, true)
		yys292 := string(yys292Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys292 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys292)
		} // end switch yys292
	} // end for yyj292
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj310 int
	var yyb310 bool
	var yyhl310 bool = l >= 0
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj310++
	if yyhl310 {
		yyb310 = yyj310 > l
	} else {
		yyb310 = r.CheckBreak()
	}
	if yyb310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	for {
		yyj310++
		if yyhl310 {
			yyb310 = yyj310 > l
		} else {
			yyb310 = r.CheckBreak()
		}
		if yyb310 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj310-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym328 := z.EncBinary()
		_ = yym328
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep329 := !z.EncBinary()
			yy2arr329 := z.EncBasicHandle().StructToArray
			var yyq329 [5]bool
			_, _, _ = yysep329, yyq329, yy2arr329
			const yyr329 bool = false
			yyq329[0] = x.Kind != ""
			yyq329[1] = x.APIVersion != ""
			yyq329[2] = true
			yyq329[3] = true
			yyq329[4] = true
			var yynn329 int
			if yyr329 || yy2arr329 {
				r.EncodeArrayStart(5)
			} else {
				yynn329 = 0
				for _, b := range yyq329 {
					if b {
						yynn329++
					}
				}
				r.EncodeMapStart(yynn329)
				yynn329 = 0
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[0] {
					yym331 := z.EncBinary()
					_ = yym331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq329[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym332 := z.EncBinary()
					_ = yym332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[1] {
					yym334 := z.EncBinary()
					_ = yym334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq329[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym335 := z.EncBinary()
					_ = yym335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[2] {
					yy337 := &x.ObjectMeta
					yy337.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq329[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy338 := &x.ObjectMeta
					yy338.CodecEncodeSelf(e)
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[3] {
					yy340 := &x.Spec
					yy340.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq329[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy341 := &x.Spec
					yy341.CodecEncodeSelf(e)
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[4] {
					yy343 := &x.Status
					yy343.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq329[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy344 := &x.Status
					yy344.CodecEncodeSelf(e)
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym345 := z.DecBinary()
	_ = yym345
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct346 := r.ContainerType()
		if yyct346 == codecSelferValueTypeMap1234 {
			yyl346 := r.ReadMapStart()
			if yyl346 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl346, d)
			}
		} else if yyct346 == codecSelferValueTypeArray1234 {
			yyl346 := r.ReadArrayStart()
			if yyl346 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl346, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys347Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys347Slc
	var yyhl347 bool = l >= 0
	for yyj347 := 0; ; yyj347++ {
		if yyhl347 {
			if yyj347 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys347Slc = r.DecodeBytes(yys347Slc, true, true)
		yys347 := string(yys347Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys347 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv350 := &x.ObjectMeta
				yyv350.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv351 := &x.Spec
				yyv351.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv352 := &x.Status
				yyv352.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys347)
		} // end switch yys347
	} // end for yyj347
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj353 int
	var yyb353 bool
	var yyhl353 bool = l >= 0
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv356 := &x.ObjectMeta
		yyv356.CodecDecodeSelf(d)
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv357 := &x.Spec
		yyv357.CodecDecodeSelf(d)
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv358 := &x.Status
		yyv358.CodecDecodeSelf(d)
	}
	for {
		yyj353++
		if yyhl353 {
			yyb353 = yyj353 > l
		} else {
			yyb353 = r.CheckBreak()
		}
		if yyb353 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj353-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym359 := z.EncBinary()
		_ = yym359
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep360 := !z.EncBinary()
			yy2arr360 := z.EncBasicHandle().StructToArray
			var yyq360 [21]bool
			_, _, _ = yysep360, yyq360, yy2arr360
			const yyr360 bool = false
			yyq360[0] = len(x.Capacity) != 0
			yyq360[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq360[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq360[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq360[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq360[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq360[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq360[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq360[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq360[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq360[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq360[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq360[12] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq360[13] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq360[14] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq360[15] = x.PersistentVolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq360[16] = x.PersistentVolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq360[17] = x.PersistentVolumeSource.PhotonPersistentDisk != nil && x.PhotonPersistentDisk != nil
			yyq360[18] = len(x.AccessModes) != 0
			yyq360[19] = x.ClaimRef != nil
			yyq360[20] = x.PersistentVolumeReclaimPolicy != ""
			var yynn360 int
			if yyr360 || yy2arr360 {
				r.EncodeArrayStart(21)
			} else {
				yynn360 = 0
				for _, b := range yyq360 {
					if b {
						yynn360++
					}
				}
				r.EncodeMapStart(yynn360)
				yynn360 = 0
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq360[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn362 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn362 = true
				goto LABEL362
			}
		LABEL362:
			if yyr360 || yy2arr360 {
				if yyn362 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn362 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn363 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn363 = true
				goto LABEL363
			}
		LABEL363:
			if yyr360 || yy2arr360 {
				if yyn363 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn363 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn364 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn364 = true
				goto LABEL364
			}
		LABEL364:
			if yyr360 || yy2arr360 {
				if yyn364 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn364 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn365 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn365 = true
				goto LABEL365
			}
		LABEL365:
			if yyr360 || yy2arr360 {
				if yyn365 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn365 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn366 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn366 = true
				goto LABEL366
			}
		LABEL366:
			if yyr360 || yy2arr360 {
				if yyn366 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn366 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn367 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn367 = true
				goto LABEL367
			}
		LABEL367:
			if yyr360 || yy2arr360 {
				if yyn367 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn367 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn368 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn368 = true
				goto LABEL368
			}
		LABEL368:
			if yyr360 || yy2arr360 {
				if yyn368 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn368 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn369 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn369 = true
				goto LABEL369
			}
		LABEL369:
			if yyr360 || yy2arr360 {
				if yyn369 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn369 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn370 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn370 = true
				goto LABEL370
			}
		LABEL370:
			if yyr360 || yy2arr360 {
				if yyn370 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn370 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn371 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn371 = true
				goto LABEL371
			}
		LABEL371:
			if yyr360 || yy2arr360 {
				if yyn371 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn371 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn372 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn372 = true
				goto LABEL372
			}
		LABEL372:
			if yyr360 || yy2arr360 {
				if yyn372 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn372 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn373 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn373 = true
				goto LABEL373
			}
		LABEL373:
			if yyr360 || yy2arr360 {
				if yyn373 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn373 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn374 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn374 = true
				goto LABEL374
			}
		LABEL374:
			if yyr360 || yy2arr360 {
				if yyn374 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[13] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn374 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn375 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn375 = true
				goto LABEL375
			}
		LABEL375:
			if yyr360 || yy2arr360 {
				if yyn375 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[14] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn375 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn376 bool
			if x.PersistentVolumeSource.Quobyte == nil {
				yyn376 = true
				goto LABEL376
			}
		LABEL376:
			if yyr360 || yy2arr360 {
				if yyn376 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[15] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn376 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn377 bool
			if x.PersistentVolumeSource.AzureDisk == nil {
				yyn377 = true
				goto LABEL377
			}
		LABEL377:
			if yyr360 || yy2arr360 {
				if yyn377 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[16] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn377 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn378 bool
			if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
				yyn378 = true
				goto LABEL378
			}
		LABEL378:
			if yyr360 || yy2arr360 {
				if yyn378 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[17] {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn378 {
						r.EncodeNil()
					} else {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[18] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym380 := z.EncBinary()
						_ = yym380
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq360[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym381 := z.EncBinary()
						_ = yym381
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[19] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq360[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[20] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq360[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym384 := z.DecBinary()
	_ = yym384
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct385 := r.ContainerType()
		if yyct385 == codecSelferValueTypeMap1234 {
			yyl385 := r.ReadMapStart()
			if yyl385 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl385, d)
			}
		} else if yyct385 == codecSelferValueTypeArray1234 {
			yyl385 := r.ReadArrayStart()
			if yyl385 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl385, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys386Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys386Slc
	var yyhl386 bool = l >= 0
	for yyj386 := 0; ; yyj386++ {
		if yyhl386 {
			if yyj386 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys386Slc = r.DecodeBytes(yys386Slc, true, true)
		yys386 := string(yys386Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys386 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv387 := &x.Capacity
				yyv387.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.PersistentVolumeSource.Quobyte == nil {
				x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.PersistentVolumeSource.AzureDisk == nil {
				x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
				x.PersistentVolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv405 := &x.AccessModes
				yym406 := z.DecBinary()
				_ = yym406
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv405), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys386)
		} // end switch yys386
	} // end for yyj386
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj409 int
	var yyb409 bool
	var yyhl409 bool = l >= 0
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv410 := &x.Capacity
		yyv410.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Quobyte == nil {
		x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureDisk == nil {
		x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
		x.PersistentVolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv428 := &x.AccessModes
		yym429 := z.DecBinary()
		_ = yym429
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv428), d)
		}
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj409++
		if yyhl409 {
			yyb409 = yyj409 > l
		} else {
			yyb409 = r.CheckBreak()
		}
		if yyb409 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj409-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym432 := z.EncBinary()
	_ = yym432
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym433 := z.DecBinary()
	_ = yym433
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym434 := z.EncBinary()
		_ = yym434
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep435 := !z.EncBinary()
			yy2arr435 := z.EncBasicHandle().StructToArray
			var yyq435 [3]bool
			_, _, _ = yysep435, yyq435, yy2arr435
			const yyr435 bool = false
			yyq435[0] = x.Phase != ""
			yyq435[1] = x.Message != ""
			yyq435[2] = x.Reason != ""
			var yynn435 int
			if yyr435 || yy2arr435 {
				r.EncodeArrayStart(3)
			} else {
				yynn435 = 0
				for _, b := range yyq435 {
					if b {
						yynn435++
					}
				}
				r.EncodeMapStart(yynn435)
				yynn435 = 0
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq435[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq435[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq435[1] {
					yym438 := z.EncBinary()
					_ = yym438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq435[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym439 := z.EncBinary()
					_ = yym439
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq435[2] {
					yym441 := z.EncBinary()
					_ = yym441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq435[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym442 := z.EncBinary()
					_ = yym442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym443 := z.DecBinary()
	_ = yym443
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct444 := r.ContainerType()
		if yyct444 == codecSelferValueTypeMap1234 {
			yyl444 := r.ReadMapStart()
			if yyl444 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl444, d)
			}
		} else if yyct444 == codecSelferValueTypeArray1234 {
			yyl444 := r.ReadArrayStart()
			if yyl444 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl444, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys445Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys445Slc
	var yyhl445 bool = l >= 0
	for yyj445 := 0; ; yyj445++ {
		if yyhl445 {
			if yyj445 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys445Slc = r.DecodeBytes(yys445Slc, true, true)
		yys445 := string(yys445Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys445 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys445)
		} // end switch yys445
	} // end for yyj445
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj449 int
	var yyb449 bool
	var yyhl449 bool = l >= 0
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj449++
		if yyhl449 {
			yyb449 = yyj449 > l
		} else {
			yyb449 = r.CheckBreak()
		}
		if yyb449 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj449-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym453 := z.EncBinary()
		_ = yym453
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep454 := !z.EncBinary()
			yy2arr454 := z.EncBasicHandle().StructToArray
			var yyq454 [4]bool
			_, _, _ = yysep454, yyq454, yy2arr454
			const yyr454 bool = false
			yyq454[0] = x.Kind != ""
			yyq454[1] = x.APIVersion != ""
			yyq454[2] = true
			var yynn454 int
			if yyr454 || yy2arr454 {
				r.EncodeArrayStart(4)
			} else {
				yynn454 = 1
				for _, b := range yyq454 {
					if b {
						yynn454++
					}
				}
				r.EncodeMapStart(yynn454)
				yynn454 = 0
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq454[0] {
					yym456 := z.EncBinary()
					_ = yym456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq454[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym457 := z.EncBinary()
					_ = yym457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq454[1] {
					yym459 := z.EncBinary()
					_ = yym459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq454[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq454[2] {
					yy462 := &x.ListMeta
					yym463 := z.EncBinary()
					_ = yym463
					if false {
					} else if z.HasExtensions() && z.EncExt(yy462) {
					} else {
						z.EncFallback(yy462)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq454[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy464 := &x.ListMeta
					yym465 := z.EncBinary()
					_ = yym465
					if false {
					} else if z.HasExtensions() && z.EncExt(yy464) {
					} else {
						z.EncFallback(yy464)
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym467 := z.EncBinary()
					_ = yym467
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym468 := z.EncBinary()
					_ = yym468
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym469 := z.DecBinary()
	_ = yym469
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct470 := r.ContainerType()
		if yyct470 == codecSelferValueTypeMap1234 {
			yyl470 := r.ReadMapStart()
			if yyl470 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl470, d)
			}
		} else if yyct470 == codecSelferValueTypeArray1234 {
			yyl470 := r.ReadArrayStart()
			if yyl470 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl470, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys471Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys471Slc
	var yyhl471 bool = l >= 0
	for yyj471 := 0; ; yyj471++ {
		if yyhl471 {
			if yyj471 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys471Slc = r.DecodeBytes(yys471Slc, true, true)
		yys471 := string(yys471Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys471 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv474 := &x.ListMeta
				yym475 := z.DecBinary()
				_ = yym475
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv474) {
				} else {
					z.DecFallback(yyv474, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv476 := &x.Items
				yym477 := z.DecBinary()
				_ = yym477
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv476), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys471)
		} // end switch yys471
	} // end for yyj471
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj478 int
	var yyb478 bool
	var yyhl478 bool = l >= 0
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv481 := &x.ListMeta
		yym482 := z.DecBinary()
		_ = yym482
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv481) {
		} else {
			z.DecFallback(yyv481, false)
		}
	}
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv483 := &x.Items
		yym484 := z.DecBinary()
		_ = yym484
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv483), d)
		}
	}
	for {
		yyj478++
		if yyhl478 {
			yyb478 = yyj478 > l
		} else {
			yyb478 = r.CheckBreak()
		}
		if yyb478 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj478-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym485 := z.EncBinary()
		_ = yym485
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep486 := !z.EncBinary()
			yy2arr486 := z.EncBasicHandle().StructToArray
			var yyq486 [5]bool
			_, _, _ = yysep486, yyq486, yy2arr486
			const yyr486 bool = false
			yyq486[0] = x.Kind != ""
			yyq486[1] = x.APIVersion != ""
			yyq486[2] = true
			yyq486[3] = true
			yyq486[4] = true
			var yynn486 int
			if yyr486 || yy2arr486 {
				r.EncodeArrayStart(5)
			} else {
				yynn486 = 0
				for _, b := range yyq486 {
					if b {
						yynn486++
					}
				}
				r.EncodeMapStart(yynn486)
				yynn486 = 0
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[0] {
					yym488 := z.EncBinary()
					_ = yym488
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq486[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym489 := z.EncBinary()
					_ = yym489
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[1] {
					yym491 := z.EncBinary()
					_ = yym491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq486[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym492 := z.EncBinary()
					_ = yym492
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[2] {
					yy494 := &x.ObjectMeta
					yy494.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq486[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy495 := &x.ObjectMeta
					yy495.CodecEncodeSelf(e)
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[3] {
					yy497 := &x.Spec
					yy497.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq486[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy498 := &x.Spec
					yy498.CodecEncodeSelf(e)
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[4] {
					yy500 := &x.Status
					yy500.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq486[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy501 := &x.Status
					yy501.CodecEncodeSelf(e)
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym502 := z.DecBinary()
	_ = yym502
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct503 := r.ContainerType()
		if yyct503 == codecSelferValueTypeMap1234 {
			yyl503 := r.ReadMapStart()
			if yyl503 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl503, d)
			}
		} else if yyct503 == codecSelferValueTypeArray1234 {
			yyl503 := r.ReadArrayStart()
			if yyl503 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl503, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys504Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys504Slc
	var yyhl504 bool = l >= 0
	for yyj504 := 0; ; yyj504++ {
		if yyhl504 {
			if yyj504 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys504Slc = r.DecodeBytes(yys504Slc, true, true)
		yys504 := string(yys504Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys504 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv507 := &x.ObjectMeta
				yyv507.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv508 := &x.Spec
				yyv508.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv509 := &x.Status
				yyv509.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys504)
		} // end switch yys504
	} // end for yyj504
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj510 int
	var yyb510 bool
	var yyhl510 bool = l >= 0
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv513 := &x.ObjectMeta
		yyv513.CodecDecodeSelf(d)
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv514 := &x.Spec
		yyv514.CodecDecodeSelf(d)
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv515 := &x.Status
		yyv515.CodecDecodeSelf(d)
	}
	for {
		yyj510++
		if yyhl510 {
			yyb510 = yyj510 > l
		} else {
			yyb510 = r.CheckBreak()
		}
		if yyb510 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj510-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym516 := z.EncBinary()
		_ = yym516
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep517 := !z.EncBinary()
			yy2arr517 := z.EncBasicHandle().StructToArray
			var yyq517 [4]bool
			_, _, _ = yysep517, yyq517, yy2arr517
			const yyr517 bool = false
			yyq517[0] = x.Kind != ""
			yyq517[1] = x.APIVersion != ""
			yyq517[2] = true
			var yynn517 int
			if yyr517 || yy2arr517 {
				r.EncodeArrayStart(4)
			} else {
				yynn517 = 1
				for _, b := range yyq517 {
					if b {
						yynn517++
					}
				}
				r.EncodeMapStart(yynn517)
				yynn517 = 0
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq517[0] {
					yym519 := z.EncBinary()
					_ = yym519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq517[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym520 := z.EncBinary()
					_ = yym520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq517[1] {
					yym522 := z.EncBinary()
					_ = yym522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq517[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym523 := z.EncBinary()
					_ = yym523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq517[2] {
					yy525 := &x.ListMeta
					yym526 := z.EncBinary()
					_ = yym526
					if false {
					} else if z.HasExtensions() && z.EncExt(yy525) {
					} else {
						z.EncFallback(yy525)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq517[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy527 := &x.ListMeta
					yym528 := z.EncBinary()
					_ = yym528
					if false {
					} else if z.HasExtensions() && z.EncExt(yy527) {
					} else {
						z.EncFallback(yy527)
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym530 := z.EncBinary()
					_ = yym530
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym531 := z.EncBinary()
					_ = yym531
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym532 := z.DecBinary()
	_ = yym532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct533 := r.ContainerType()
		if yyct533 == codecSelferValueTypeMap1234 {
			yyl533 := r.ReadMapStart()
			if yyl533 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl533, d)
			}
		} else if yyct533 == codecSelferValueTypeArray1234 {
			yyl533 := r.ReadArrayStart()
			if yyl533 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl533, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys534Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys534Slc
	var yyhl534 bool = l >= 0
	for yyj534 := 0; ; yyj534++ {
		if yyhl534 {
			if yyj534 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys534Slc = r.DecodeBytes(yys534Slc, true, true)
		yys534 := string(yys534Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys534 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv537 := &x.ListMeta
				yym538 := z.DecBinary()
				_ = yym538
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv537) {
				} else {
					z.DecFallback(yyv537, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv539 := &x.Items
				yym540 := z.DecBinary()
				_ = yym540
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv539), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys534)
		} // end switch yys534
	} // end for yyj534
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj541 int
	var yyb541 bool
	var yyhl541 bool = l >= 0
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv544 := &x.ListMeta
		yym545 := z.DecBinary()
		_ = yym545
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv544) {
		} else {
			z.DecFallback(yyv544, false)
		}
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv546 := &x.Items
		yym547 := z.DecBinary()
		_ = yym547
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv546), d)
		}
	}
	for {
		yyj541++
		if yyhl541 {
			yyb541 = yyj541 > l
		} else {
			yyb541 = r.CheckBreak()
		}
		if yyb541 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj541-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym548 := z.EncBinary()
		_ = yym548
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep549 := !z.EncBinary()
			yy2arr549 := z.EncBasicHandle().StructToArray
			var yyq549 [4]bool
			_, _, _ = yysep549, yyq549, yy2arr549
			const yyr549 bool = false
			yyq549[0] = len(x.AccessModes) != 0
			yyq549[1] = x.Selector != nil
			yyq549[2] = true
			yyq549[3] = x.VolumeName != ""
			var yynn549 int
			if yyr549 || yy2arr549 {
				r.EncodeArrayStart(4)
			} else {
				yynn549 = 0
				for _, b := range yyq549 {
					if b {
						yynn549++
					}
				}
				r.EncodeMapStart(yynn549)
				yynn549 = 0
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym551 := z.EncBinary()
						_ = yym551
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq549[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym552 := z.EncBinary()
						_ = yym552
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym554 := z.EncBinary()
						_ = yym554
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq549[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym555 := z.EncBinary()
						_ = yym555
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[2] {
					yy557 := &x.Resources
					yy557.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq549[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy558 := &x.Resources
					yy558.CodecEncodeSelf(e)
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[3] {
					yym560 := z.EncBinary()
					_ = yym560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq549[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym561 := z.EncBinary()
					_ = yym561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym562 := z.DecBinary()
	_ = yym562
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct563 := r.ContainerType()
		if yyct563 == codecSelferValueTypeMap1234 {
			yyl563 := r.ReadMapStart()
			if yyl563 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl563, d)
			}
		} else if yyct563 == codecSelferValueTypeArray1234 {
			yyl563 := r.ReadArrayStart()
			if yyl563 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl563, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys564Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys564Slc
	var yyhl564 bool = l >= 0
	for yyj564 := 0; ; yyj564++ {
		if yyhl564 {
			if yyj564 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys564Slc = r.DecodeBytes(yys564Slc, true, true)
		yys564 := string(yys564Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys564 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv565 := &x.AccessModes
				yym566 := z.DecBinary()
				_ = yym566
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv565), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_v1.LabelSelector)
				}
				yym568 := z.DecBinary()
				_ = yym568
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv569 := &x.Resources
				yyv569.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys564)
		} // end switch yys564
	} // end for yyj564
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj571 int
	var yyb571 bool
	var yyhl571 bool = l >= 0
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv572 := &x.AccessModes
		yym573 := z.DecBinary()
		_ = yym573
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv572), d)
		}
	}
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_v1.LabelSelector)
		}
		yym575 := z.DecBinary()
		_ = yym575
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv576 := &x.Resources
		yyv576.CodecDecodeSelf(d)
	}
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj571++
		if yyhl571 {
			yyb571 = yyj571 > l
		} else {
			yyb571 = r.CheckBreak()
		}
		if yyb571 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj571-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym578 := z.EncBinary()
		_ = yym578
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep579 := !z.EncBinary()
			yy2arr579 := z.EncBasicHandle().StructToArray
			var yyq579 [3]bool
			_, _, _ = yysep579, yyq579, yy2arr579
			const yyr579 bool = false
			yyq579[0] = x.Phase != ""
			yyq579[1] = len(x.AccessModes) != 0
			yyq579[2] = len(x.Capacity) != 0
			var yynn579 int
			if yyr579 || yy2arr579 {
				r.EncodeArrayStart(3)
			} else {
				yynn579 = 0
				for _, b := range yyq579 {
					if b {
						yynn579++
					}
				}
				r.EncodeMapStart(yynn579)
				yynn579 = 0
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq579[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq579[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq579[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym582 := z.EncBinary()
						_ = yym582
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq579[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym583 := z.EncBinary()
						_ = yym583
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq579[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq579[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym585 := z.DecBinary()
	_ = yym585
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct586 := r.ContainerType()
		if yyct586 == codecSelferValueTypeMap1234 {
			yyl586 := r.ReadMapStart()
			if yyl586 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl586, d)
			}
		} else if yyct586 == codecSelferValueTypeArray1234 {
			yyl586 := r.ReadArrayStart()
			if yyl586 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl586, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys587Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys587Slc
	var yyhl587 bool = l >= 0
	for yyj587 := 0; ; yyj587++ {
		if yyhl587 {
			if yyj587 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys587Slc = r.DecodeBytes(yys587Slc, true, true)
		yys587 := string(yys587Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys587 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv589 := &x.AccessModes
				yym590 := z.DecBinary()
				_ = yym590
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv589), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv591 := &x.Capacity
				yyv591.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys587)
		} // end switch yys587
	} // end for yyj587
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj592 int
	var yyb592 bool
	var yyhl592 bool = l >= 0
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv594 := &x.AccessModes
		yym595 := z.DecBinary()
		_ = yym595
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv594), d)
		}
	}
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv596 := &x.Capacity
		yyv596.CodecDecodeSelf(d)
	}
	for {
		yyj592++
		if yyhl592 {
			yyb592 = yyj592 > l
		} else {
			yyb592 = r.CheckBreak()
		}
		if yyb592 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj592-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym597 := z.EncBinary()
	_ = yym597
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym598 := z.DecBinary()
	_ = yym598
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym599 := z.EncBinary()
	_ = yym599
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym600 := z.DecBinary()
	_ = yym600
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym601 := z.EncBinary()
	_ = yym601
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym602 := z.DecBinary()
	_ = yym602
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym603 := z.EncBinary()
		_ = yym603
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep604 := !z.EncBinary()
			yy2arr604 := z.EncBasicHandle().StructToArray
			var yyq604 [1]bool
			_, _, _ = yysep604, yyq604, yy2arr604
			const yyr604 bool = false
			var yynn604 int
			if yyr604 || yy2arr604 {
				r.EncodeArrayStart(1)
			} else {
				yynn604 = 1
				for _, b := range yyq604 {
					if b {
						yynn604++
					}
				}
				r.EncodeMapStart(yynn604)
				yynn604 = 0
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym606 := z.EncBinary()
				_ = yym606
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym607 := z.EncBinary()
				_ = yym607
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym608 := z.DecBinary()
	_ = yym608
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct609 := r.ContainerType()
		if yyct609 == codecSelferValueTypeMap1234 {
			yyl609 := r.ReadMapStart()
			if yyl609 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl609, d)
			}
		} else if yyct609 == codecSelferValueTypeArray1234 {
			yyl609 := r.ReadArrayStart()
			if yyl609 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl609, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys610Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys610Slc
	var yyhl610 bool = l >= 0
	for yyj610 := 0; ; yyj610++ {
		if yyhl610 {
			if yyj610 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys610Slc = r.DecodeBytes(yys610Slc, true, true)
		yys610 := string(yys610Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys610 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys610)
		} // end switch yys610
	} // end for yyj610
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj612 int
	var yyb612 bool
	var yyhl612 bool = l >= 0
	yyj612++
	if yyhl612 {
		yyb612 = yyj612 > l
	} else {
		yyb612 = r.CheckBreak()
	}
	if yyb612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj612++
		if yyhl612 {
			yyb612 = yyj612 > l
		} else {
			yyb612 = r.CheckBreak()
		}
		if yyb612 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj612-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym614 := z.EncBinary()
		_ = yym614
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep615 := !z.EncBinary()
			yy2arr615 := z.EncBasicHandle().StructToArray
			var yyq615 [1]bool
			_, _, _ = yysep615, yyq615, yy2arr615
			const yyr615 bool = false
			yyq615[0] = x.Medium != ""
			var yynn615 int
			if yyr615 || yy2arr615 {
				r.EncodeArrayStart(1)
			} else {
				yynn615 = 0
				for _, b := range yyq615 {
					if b {
						yynn615++
					}
				}
				r.EncodeMapStart(yynn615)
				yynn615 = 0
			}
			if yyr615 || yy2arr615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq615[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq615[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr615 || yy2arr615 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym617 := z.DecBinary()
	_ = yym617
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct618 := r.ContainerType()
		if yyct618 == codecSelferValueTypeMap1234 {
			yyl618 := r.ReadMapStart()
			if yyl618 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl618, d)
			}
		} else if yyct618 == codecSelferValueTypeArray1234 {
			yyl618 := r.ReadArrayStart()
			if yyl618 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl618, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys619Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys619Slc
	var yyhl619 bool = l >= 0
	for yyj619 := 0; ; yyj619++ {
		if yyhl619 {
			if yyj619 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys619Slc = r.DecodeBytes(yys619Slc, true, true)
		yys619 := string(yys619Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys619 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys619)
		} // end switch yys619
	} // end for yyj619
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj621 int
	var yyb621 bool
	var yyhl621 bool = l >= 0
	yyj621++
	if yyhl621 {
		yyb621 = yyj621 > l
	} else {
		yyb621 = r.CheckBreak()
	}
	if yyb621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj621++
		if yyhl621 {
			yyb621 = yyj621 > l
		} else {
			yyb621 = r.CheckBreak()
		}
		if yyb621 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj621-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym623 := z.EncBinary()
		_ = yym623
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep624 := !z.EncBinary()
			yy2arr624 := z.EncBasicHandle().StructToArray
			var yyq624 [3]bool
			_, _, _ = yysep624, yyq624, yy2arr624
			const yyr624 bool = false
			yyq624[2] = x.ReadOnly != false
			var yynn624 int
			if yyr624 || yy2arr624 {
				r.EncodeArrayStart(3)
			} else {
				yynn624 = 2
				for _, b := range yyq624 {
					if b {
						yynn624++
					}
				}
				r.EncodeMapStart(yynn624)
				yynn624 = 0
			}
			if yyr624 || yy2arr624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym626 := z.EncBinary()
				_ = yym626
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym627 := z.EncBinary()
				_ = yym627
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr624 || yy2arr624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym629 := z.EncBinary()
				_ = yym629
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym630 := z.EncBinary()
				_ = yym630
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr624 || yy2arr624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq624[2] {
					yym632 := z.EncBinary()
					_ = yym632
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq624[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym633 := z.EncBinary()
					_ = yym633
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr624 || yy2arr624 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym634 := z.DecBinary()
	_ = yym634
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct635 := r.ContainerType()
		if yyct635 == codecSelferValueTypeMap1234 {
			yyl635 := r.ReadMapStart()
			if yyl635 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl635, d)
			}
		} else if yyct635 == codecSelferValueTypeArray1234 {
			yyl635 := r.ReadArrayStart()
			if yyl635 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl635, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys636Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys636Slc
	var yyhl636 bool = l >= 0
	for yyj636 := 0; ; yyj636++ {
		if yyhl636 {
			if yyj636 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys636Slc = r.DecodeBytes(yys636Slc, true, true)
		yys636 := string(yys636Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys636 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys636)
		} // end switch yys636
	} // end for yyj636
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj640 int
	var yyb640 bool
	var yyhl640 bool = l >= 0
	yyj640++
	if yyhl640 {
		yyb640 = yyj640 > l
	} else {
		yyb640 = r.CheckBreak()
	}
	if yyb640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj640++
	if yyhl640 {
		yyb640 = yyj640 > l
	} else {
		yyb640 = r.CheckBreak()
	}
	if yyb640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj640++
	if yyhl640 {
		yyb640 = yyj640 > l
	} else {
		yyb640 = r.CheckBreak()
	}
	if yyb640 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj640++
		if yyhl640 {
			yyb640 = yyj640 > l
		} else {
			yyb640 = r.CheckBreak()
		}
		if yyb640 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj640-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym644 := z.EncBinary()
		_ = yym644
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep645 := !z.EncBinary()
			yy2arr645 := z.EncBasicHandle().StructToArray
			var yyq645 [8]bool
			_, _, _ = yysep645, yyq645, yy2arr645
			const yyr645 bool = false
			yyq645[2] = x.FSType != ""
			yyq645[3] = x.RBDPool != ""
			yyq645[4] = x.RadosUser != ""
			yyq645[5] = x.Keyring != ""
			yyq645[6] = x.SecretRef != nil
			yyq645[7] = x.ReadOnly != false
			var yynn645 int
			if yyr645 || yy2arr645 {
				r.EncodeArrayStart(8)
			} else {
				yynn645 = 2
				for _, b := range yyq645 {
					if b {
						yynn645++
					}
				}
				r.EncodeMapStart(yynn645)
				yynn645 = 0
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym647 := z.EncBinary()
					_ = yym647
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym650 := z.EncBinary()
				_ = yym650
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym651 := z.EncBinary()
				_ = yym651
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[2] {
					yym653 := z.EncBinary()
					_ = yym653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq645[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym654 := z.EncBinary()
					_ = yym654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[3] {
					yym656 := z.EncBinary()
					_ = yym656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq645[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym657 := z.EncBinary()
					_ = yym657
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[4] {
					yym659 := z.EncBinary()
					_ = yym659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq645[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym660 := z.EncBinary()
					_ = yym660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[5] {
					yym662 := z.EncBinary()
					_ = yym662
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq645[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq645[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq645[7] {
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq645[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym667 := z.EncBinary()
					_ = yym667
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr645 || yy2arr645 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym668 := z.DecBinary()
	_ = yym668
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct669 := r.ContainerType()
		if yyct669 == codecSelferValueTypeMap1234 {
			yyl669 := r.ReadMapStart()
			if yyl669 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl669, d)
			}
		} else if yyct669 == codecSelferValueTypeArray1234 {
			yyl669 := r.ReadArrayStart()
			if yyl669 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl669, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys670Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys670Slc
	var yyhl670 bool = l >= 0
	for yyj670 := 0; ; yyj670++ {
		if yyhl670 {
			if yyj670 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys670Slc = r.DecodeBytes(yys670Slc, true, true)
		yys670 := string(yys670Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys670 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv671 := &x.CephMonitors
				yym672 := z.DecBinary()
				_ = yym672
				if false {
				} else {
					z.F.DecSliceStringX(yyv671, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys670)
		} // end switch yys670
	} // end for yyj670
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj680 int
	var yyb680 bool
	var yyhl680 bool = l >= 0
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv681 := &x.CephMonitors
		yym682 := z.DecBinary()
		_ = yym682
		if false {
		} else {
			z.F.DecSliceStringX(yyv681, false, d)
		}
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj680++
	if yyhl680 {
		yyb680 = yyj680 > l
	} else {
		yyb680 = r.CheckBreak()
	}
	if yyb680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj680++
		if yyhl680 {
			yyb680 = yyj680 > l
		} else {
			yyb680 = r.CheckBreak()
		}
		if yyb680 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj680-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym690 := z.EncBinary()
		_ = yym690
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep691 := !z.EncBinary()
			yy2arr691 := z.EncBasicHandle().StructToArray
			var yyq691 [3]bool
			_, _, _ = yysep691, yyq691, yy2arr691
			const yyr691 bool = false
			yyq691[1] = x.FSType != ""
			yyq691[2] = x.ReadOnly != false
			var yynn691 int
			if yyr691 || yy2arr691 {
				r.EncodeArrayStart(3)
			} else {
				yynn691 = 1
				for _, b := range yyq691 {
					if b {
						yynn691++
					}
				}
				r.EncodeMapStart(yynn691)
				yynn691 = 0
			}
			if yyr691 || yy2arr691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym693 := z.EncBinary()
				_ = yym693
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym694 := z.EncBinary()
				_ = yym694
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr691 || yy2arr691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq691[1] {
					yym696 := z.EncBinary()
					_ = yym696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq691[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym697 := z.EncBinary()
					_ = yym697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr691 || yy2arr691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq691[2] {
					yym699 := z.EncBinary()
					_ = yym699
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq691[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym700 := z.EncBinary()
					_ = yym700
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr691 || yy2arr691 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym701 := z.DecBinary()
	_ = yym701
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct702 := r.ContainerType()
		if yyct702 == codecSelferValueTypeMap1234 {
			yyl702 := r.ReadMapStart()
			if yyl702 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl702, d)
			}
		} else if yyct702 == codecSelferValueTypeArray1234 {
			yyl702 := r.ReadArrayStart()
			if yyl702 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl702, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys703Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys703Slc
	var yyhl703 bool = l >= 0
	for yyj703 := 0; ; yyj703++ {
		if yyhl703 {
			if yyj703 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys703Slc = r.DecodeBytes(yys703Slc, true, true)
		yys703 := string(yys703Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys703 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys703)
		} // end switch yys703
	} // end for yyj703
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj707 int
	var yyb707 bool
	var yyhl707 bool = l >= 0
	yyj707++
	if yyhl707 {
		yyb707 = yyj707 > l
	} else {
		yyb707 = r.CheckBreak()
	}
	if yyb707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj707++
	if yyhl707 {
		yyb707 = yyj707 > l
	} else {
		yyb707 = r.CheckBreak()
	}
	if yyb707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj707++
	if yyhl707 {
		yyb707 = yyj707 > l
	} else {
		yyb707 = r.CheckBreak()
	}
	if yyb707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj707++
		if yyhl707 {
			yyb707 = yyj707 > l
		} else {
			yyb707 = r.CheckBreak()
		}
		if yyb707 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj707-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym711 := z.EncBinary()
		_ = yym711
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep712 := !z.EncBinary()
			yy2arr712 := z.EncBasicHandle().StructToArray
			var yyq712 [6]bool
			_, _, _ = yysep712, yyq712, yy2arr712
			const yyr712 bool = false
			yyq712[1] = x.Path != ""
			yyq712[2] = x.User != ""
			yyq712[3] = x.SecretFile != ""
			yyq712[4] = x.SecretRef != nil
			yyq712[5] = x.ReadOnly != false
			var yynn712 int
			if yyr712 || yy2arr712 {
				r.EncodeArrayStart(6)
			} else {
				yynn712 = 1
				for _, b := range yyq712 {
					if b {
						yynn712++
					}
				}
				r.EncodeMapStart(yynn712)
				yynn712 = 0
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym714 := z.EncBinary()
					_ = yym714
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym715 := z.EncBinary()
					_ = yym715
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[1] {
					yym717 := z.EncBinary()
					_ = yym717
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq712[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym718 := z.EncBinary()
					_ = yym718
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[2] {
					yym720 := z.EncBinary()
					_ = yym720
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq712[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym721 := z.EncBinary()
					_ = yym721
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[3] {
					yym723 := z.EncBinary()
					_ = yym723
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq712[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym724 := z.EncBinary()
					_ = yym724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq712[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[5] {
					yym727 := z.EncBinary()
					_ = yym727
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq712[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym728 := z.EncBinary()
					_ = yym728
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym729 := z.DecBinary()
	_ = yym729
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct730 := r.ContainerType()
		if yyct730 == codecSelferValueTypeMap1234 {
			yyl730 := r.ReadMapStart()
			if yyl730 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl730, d)
			}
		} else if yyct730 == codecSelferValueTypeArray1234 {
			yyl730 := r.ReadArrayStart()
			if yyl730 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl730, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys731Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys731Slc
	var yyhl731 bool = l >= 0
	for yyj731 := 0; ; yyj731++ {
		if yyhl731 {
			if yyj731 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys731Slc = r.DecodeBytes(yys731Slc, true, true)
		yys731 := string(yys731Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys731 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv732 := &x.Monitors
				yym733 := z.DecBinary()
				_ = yym733
				if false {
				} else {
					z.F.DecSliceStringX(yyv732, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys731)
		} // end switch yys731
	} // end for yyj731
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj739 int
	var yyb739 bool
	var yyhl739 bool = l >= 0
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv740 := &x.Monitors
		yym741 := z.DecBinary()
		_ = yym741
		if false {
		} else {
			z.F.DecSliceStringX(yyv740, false, d)
		}
	}
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj739++
		if yyhl739 {
			yyb739 = yyj739 > l
		} else {
			yyb739 = r.CheckBreak()
		}
		if yyb739 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj739-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym747 := z.EncBinary()
		_ = yym747
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep748 := !z.EncBinary()
			yy2arr748 := z.EncBasicHandle().StructToArray
			var yyq748 [2]bool
			_, _, _ = yysep748, yyq748, yy2arr748
			const yyr748 bool = false
			yyq748[0] = x.DatasetName != ""
			yyq748[1] = x.DatasetUUID != ""
			var yynn748 int
			if yyr748 || yy2arr748 {
				r.EncodeArrayStart(2)
			} else {
				yynn748 = 0
				for _, b := range yyq748 {
					if b {
						yynn748++
					}
				}
				r.EncodeMapStart(yynn748)
				yynn748 = 0
			}
			if yyr748 || yy2arr748 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq748[0] {
					yym750 := z.EncBinary()
					_ = yym750
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq748[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym751 := z.EncBinary()
					_ = yym751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
					}
				}
			}
			if yyr748 || yy2arr748 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq748[1] {
					yym753 := z.EncBinary()
					_ = yym753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetUUID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq748[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("datasetUUID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym754 := z.EncBinary()
					_ = yym754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetUUID))
					}
				}
			}
			if yyr748 || yy2arr748 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym755 := z.DecBinary()
	_ = yym755
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct756 := r.ContainerType()
		if yyct756 == codecSelferValueTypeMap1234 {
			yyl756 := r.ReadMapStart()
			if yyl756 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl756, d)
			}
		} else if yyct756 == codecSelferValueTypeArray1234 {
			yyl756 := r.ReadArrayStart()
			if yyl756 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl756, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys757Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys757Slc
	var yyhl757 bool = l >= 0
	for yyj757 := 0; ; yyj757++ {
		if yyhl757 {
			if yyj757 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys757Slc = r.DecodeBytes(yys757Slc, true, true)
		yys757 := string(yys757Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys757 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		case "datasetUUID":
			if r.TryDecodeAsNil() {
				x.DatasetUUID = ""
			} else {
				x.DatasetUUID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys757)
		} // end switch yys757
	} // end for yyj757
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj760 int
	var yyb760 bool
	var yyhl760 bool = l >= 0
	yyj760++
	if yyhl760 {
		yyb760 = yyj760 > l
	} else {
		yyb760 = r.CheckBreak()
	}
	if yyb760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	yyj760++
	if yyhl760 {
		yyb760 = yyj760 > l
	} else {
		yyb760 = r.CheckBreak()
	}
	if yyb760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetUUID = ""
	} else {
		x.DatasetUUID = string(r.DecodeString())
	}
	for {
		yyj760++
		if yyhl760 {
			yyb760 = yyj760 > l
		} else {
			yyb760 = r.CheckBreak()
		}
		if yyb760 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj760-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym763 := z.EncBinary()
	_ = yym763
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym764 := z.DecBinary()
	_ = yym764
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym765 := z.EncBinary()
	_ = yym765
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym766 := z.DecBinary()
	_ = yym766
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym767 := z.EncBinary()
		_ = yym767
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep768 := !z.EncBinary()
			yy2arr768 := z.EncBasicHandle().StructToArray
			var yyq768 [4]bool
			_, _, _ = yysep768, yyq768, yy2arr768
			const yyr768 bool = false
			yyq768[1] = x.FSType != ""
			yyq768[2] = x.Partition != 0
			yyq768[3] = x.ReadOnly != false
			var yynn768 int
			if yyr768 || yy2arr768 {
				r.EncodeArrayStart(4)
			} else {
				yynn768 = 1
				for _, b := range yyq768 {
					if b {
						yynn768++
					}
				}
				r.EncodeMapStart(yynn768)
				yynn768 = 0
			}
			if yyr768 || yy2arr768 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym770 := z.EncBinary()
				_ = yym770
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym771 := z.EncBinary()
				_ = yym771
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr768 || yy2arr768 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq768[1] {
					yym773 := z.EncBinary()
					_ = yym773
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq768[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym774 := z.EncBinary()
					_ = yym774
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr768 || yy2arr768 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq768[2] {
					yym776 := z.EncBinary()
					_ = yym776
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq768[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym777 := z.EncBinary()
					_ = yym777
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr768 || yy2arr768 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq768[3] {
					yym779 := z.EncBinary()
					_ = yym779
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq768[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym780 := z.EncBinary()
					_ = yym780
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr768 || yy2arr768 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym781 := z.DecBinary()
	_ = yym781
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct782 := r.ContainerType()
		if yyct782 == codecSelferValueTypeMap1234 {
			yyl782 := r.ReadMapStart()
			if yyl782 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl782, d)
			}
		} else if yyct782 == codecSelferValueTypeArray1234 {
			yyl782 := r.ReadArrayStart()
			if yyl782 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl782, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys783Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys783Slc
	var yyhl783 bool = l >= 0
	for yyj783 := 0; ; yyj783++ {
		if yyhl783 {
			if yyj783 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys783Slc = r.DecodeBytes(yys783Slc, true, true)
		yys783 := string(yys783Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys783 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys783)
		} // end switch yys783
	} // end for yyj783
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj788 int
	var yyb788 bool
	var yyhl788 bool = l >= 0
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj788++
		if yyhl788 {
			yyb788 = yyj788 > l
		} else {
			yyb788 = r.CheckBreak()
		}
		if yyb788 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj788-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *QuobyteVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym793 := z.EncBinary()
		_ = yym793
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep794 := !z.EncBinary()
			yy2arr794 := z.EncBasicHandle().StructToArray
			var yyq794 [5]bool
			_, _, _ = yysep794, yyq794, yy2arr794
			const yyr794 bool = false
			yyq794[2] = x.ReadOnly != false
			yyq794[3] = x.User != ""
			yyq794[4] = x.Group != ""
			var yynn794 int
			if yyr794 || yy2arr794 {
				r.EncodeArrayStart(5)
			} else {
				yynn794 = 2
				for _, b := range yyq794 {
					if b {
						yynn794++
					}
				}
				r.EncodeMapStart(yynn794)
				yynn794 = 0
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym796 := z.EncBinary()
				_ = yym796
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("registry"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym797 := z.EncBinary()
				_ = yym797
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym799 := z.EncBinary()
				_ = yym799
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volume"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym800 := z.EncBinary()
				_ = yym800
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq794[2] {
					yym802 := z.EncBinary()
					_ = yym802
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq794[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym803 := z.EncBinary()
					_ = yym803
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq794[3] {
					yym805 := z.EncBinary()
					_ = yym805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq794[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym806 := z.EncBinary()
					_ = yym806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq794[4] {
					yym808 := z.EncBinary()
					_ = yym808
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq794[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym809 := z.EncBinary()
					_ = yym809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				}
			}
			if yyr794 || yy2arr794 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *QuobyteVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym810 := z.DecBinary()
	_ = yym810
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct811 := r.ContainerType()
		if yyct811 == codecSelferValueTypeMap1234 {
			yyl811 := r.ReadMapStart()
			if yyl811 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl811, d)
			}
		} else if yyct811 == codecSelferValueTypeArray1234 {
			yyl811 := r.ReadArrayStart()
			if yyl811 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl811, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys812Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys812Slc
	var yyhl812 bool = l >= 0
	for yyj812 := 0; ; yyj812++ {
		if yyhl812 {
			if yyj812 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys812Slc = r.DecodeBytes(yys812Slc, true, true)
		yys812 := string(yys812Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys812 {
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = string(r.DecodeString())
			}
		case "volume":
			if r.TryDecodeAsNil() {
				x.Volume = ""
			} else {
				x.Volume = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				x.Group = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys812)
		} // end switch yys812
	} // end for yyj812
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj818 int
	var yyb818 bool
	var yyhl818 bool = l >= 0
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = string(r.DecodeString())
	}
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volume = ""
	} else {
		x.Volume = string(r.DecodeString())
	}
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		x.Group = string(r.DecodeString())
	}
	for {
		yyj818++
		if yyhl818 {
			yyb818 = yyj818 > l
		} else {
			yyb818 = r.CheckBreak()
		}
		if yyb818 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj818-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym824 := z.EncBinary()
		_ = yym824
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep825 := !z.EncBinary()
			yy2arr825 := z.EncBasicHandle().StructToArray
			var yyq825 [5]bool
			_, _, _ = yysep825, yyq825, yy2arr825
			const yyr825 bool = false
			yyq825[1] = x.FSType != ""
			yyq825[2] = x.SecretRef != nil
			yyq825[3] = x.ReadOnly != false
			yyq825[4] = len(x.Options) != 0
			var yynn825 int
			if yyr825 || yy2arr825 {
				r.EncodeArrayStart(5)
			} else {
				yynn825 = 1
				for _, b := range yyq825 {
					if b {
						yynn825++
					}
				}
				r.EncodeMapStart(yynn825)
				yynn825 = 0
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym827 := z.EncBinary()
				_ = yym827
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym828 := z.EncBinary()
				_ = yym828
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq825[1] {
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq825[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym831 := z.EncBinary()
					_ = yym831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq825[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq825[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq825[3] {
					yym834 := z.EncBinary()
					_ = yym834
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq825[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym835 := z.EncBinary()
					_ = yym835
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq825[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym837 := z.EncBinary()
						_ = yym837
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq825[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym838 := z.EncBinary()
						_ = yym838
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym839 := z.DecBinary()
	_ = yym839
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct840 := r.ContainerType()
		if yyct840 == codecSelferValueTypeMap1234 {
			yyl840 := r.ReadMapStart()
			if yyl840 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl840, d)
			}
		} else if yyct840 == codecSelferValueTypeArray1234 {
			yyl840 := r.ReadArrayStart()
			if yyl840 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl840, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys841Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys841Slc
	var yyhl841 bool = l >= 0
	for yyj841 := 0; ; yyj841++ {
		if yyhl841 {
			if yyj841 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys841Slc = r.DecodeBytes(yys841Slc, true, true)
		yys841 := string(yys841Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys841 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv846 := &x.Options
				yym847 := z.DecBinary()
				_ = yym847
				if false {
				} else {
					z.F.DecMapStringStringX(yyv846, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys841)
		} // end switch yys841
	} // end for yyj841
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj848 int
	var yyb848 bool
	var yyhl848 bool = l >= 0
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv853 := &x.Options
		yym854 := z.DecBinary()
		_ = yym854
		if false {
		} else {
			z.F.DecMapStringStringX(yyv853, false, d)
		}
	}
	for {
		yyj848++
		if yyhl848 {
			yyb848 = yyj848 > l
		} else {
			yyb848 = r.CheckBreak()
		}
		if yyb848 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj848-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym855 := z.EncBinary()
		_ = yym855
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep856 := !z.EncBinary()
			yy2arr856 := z.EncBasicHandle().StructToArray
			var yyq856 [4]bool
			_, _, _ = yysep856, yyq856, yy2arr856
			const yyr856 bool = false
			yyq856[1] = x.FSType != ""
			yyq856[2] = x.Partition != 0
			yyq856[3] = x.ReadOnly != false
			var yynn856 int
			if yyr856 || yy2arr856 {
				r.EncodeArrayStart(4)
			} else {
				yynn856 = 1
				for _, b := range yyq856 {
					if b {
						yynn856++
					}
				}
				r.EncodeMapStart(yynn856)
				yynn856 = 0
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym858 := z.EncBinary()
				_ = yym858
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym859 := z.EncBinary()
				_ = yym859
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq856[1] {
					yym861 := z.EncBinary()
					_ = yym861
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq856[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym862 := z.EncBinary()
					_ = yym862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq856[2] {
					yym864 := z.EncBinary()
					_ = yym864
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq856[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym865 := z.EncBinary()
					_ = yym865
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq856[3] {
					yym867 := z.EncBinary()
					_ = yym867
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq856[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym868 := z.EncBinary()
					_ = yym868
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym869 := z.DecBinary()
	_ = yym869
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct870 := r.ContainerType()
		if yyct870 == codecSelferValueTypeMap1234 {
			yyl870 := r.ReadMapStart()
			if yyl870 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl870, d)
			}
		} else if yyct870 == codecSelferValueTypeArray1234 {
			yyl870 := r.ReadArrayStart()
			if yyl870 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl870, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys871Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys871Slc
	var yyhl871 bool = l >= 0
	for yyj871 := 0; ; yyj871++ {
		if yyhl871 {
			if yyj871 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys871Slc = r.DecodeBytes(yys871Slc, true, true)
		yys871 := string(yys871Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys871 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys871)
		} // end switch yys871
	} // end for yyj871
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj876 int
	var yyb876 bool
	var yyhl876 bool = l >= 0
	yyj876++
	if yyhl876 {
		yyb876 = yyj876 > l
	} else {
		yyb876 = r.CheckBreak()
	}
	if yyb876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj876++
	if yyhl876 {
		yyb876 = yyj876 > l
	} else {
		yyb876 = r.CheckBreak()
	}
	if yyb876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj876++
	if yyhl876 {
		yyb876 = yyj876 > l
	} else {
		yyb876 = r.CheckBreak()
	}
	if yyb876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj876++
	if yyhl876 {
		yyb876 = yyj876 > l
	} else {
		yyb876 = r.CheckBreak()
	}
	if yyb876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj876++
		if yyhl876 {
			yyb876 = yyj876 > l
		} else {
			yyb876 = r.CheckBreak()
		}
		if yyb876 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj876-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym881 := z.EncBinary()
		_ = yym881
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep882 := !z.EncBinary()
			yy2arr882 := z.EncBasicHandle().StructToArray
			var yyq882 [3]bool
			_, _, _ = yysep882, yyq882, yy2arr882
			const yyr882 bool = false
			yyq882[1] = x.Revision != ""
			yyq882[2] = x.Directory != ""
			var yynn882 int
			if yyr882 || yy2arr882 {
				r.EncodeArrayStart(3)
			} else {
				yynn882 = 1
				for _, b := range yyq882 {
					if b {
						yynn882++
					}
				}
				r.EncodeMapStart(yynn882)
				yynn882 = 0
			}
			if yyr882 || yy2arr882 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym884 := z.EncBinary()
				_ = yym884
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym885 := z.EncBinary()
				_ = yym885
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr882 || yy2arr882 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq882[1] {
					yym887 := z.EncBinary()
					_ = yym887
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq882[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym888 := z.EncBinary()
					_ = yym888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr882 || yy2arr882 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq882[2] {
					yym890 := z.EncBinary()
					_ = yym890
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq882[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym891 := z.EncBinary()
					_ = yym891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr882 || yy2arr882 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym892 := z.DecBinary()
	_ = yym892
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct893 := r.ContainerType()
		if yyct893 == codecSelferValueTypeMap1234 {
			yyl893 := r.ReadMapStart()
			if yyl893 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl893, d)
			}
		} else if yyct893 == codecSelferValueTypeArray1234 {
			yyl893 := r.ReadArrayStart()
			if yyl893 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl893, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys894Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys894Slc
	var yyhl894 bool = l >= 0
	for yyj894 := 0; ; yyj894++ {
		if yyhl894 {
			if yyj894 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys894Slc = r.DecodeBytes(yys894Slc, true, true)
		yys894 := string(yys894Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys894 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys894)
		} // end switch yys894
	} // end for yyj894
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj898 int
	var yyb898 bool
	var yyhl898 bool = l >= 0
	yyj898++
	if yyhl898 {
		yyb898 = yyj898 > l
	} else {
		yyb898 = r.CheckBreak()
	}
	if yyb898 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj898++
	if yyhl898 {
		yyb898 = yyj898 > l
	} else {
		yyb898 = r.CheckBreak()
	}
	if yyb898 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj898++
	if yyhl898 {
		yyb898 = yyj898 > l
	} else {
		yyb898 = r.CheckBreak()
	}
	if yyb898 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj898++
		if yyhl898 {
			yyb898 = yyj898 > l
		} else {
			yyb898 = r.CheckBreak()
		}
		if yyb898 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj898-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym902 := z.EncBinary()
		_ = yym902
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep903 := !z.EncBinary()
			yy2arr903 := z.EncBasicHandle().StructToArray
			var yyq903 [3]bool
			_, _, _ = yysep903, yyq903, yy2arr903
			const yyr903 bool = false
			yyq903[0] = x.SecretName != ""
			yyq903[1] = len(x.Items) != 0
			yyq903[2] = x.DefaultMode != nil
			var yynn903 int
			if yyr903 || yy2arr903 {
				r.EncodeArrayStart(3)
			} else {
				yynn903 = 0
				for _, b := range yyq903 {
					if b {
						yynn903++
					}
				}
				r.EncodeMapStart(yynn903)
				yynn903 = 0
			}
			if yyr903 || yy2arr903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq903[0] {
					yym905 := z.EncBinary()
					_ = yym905
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq903[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym906 := z.EncBinary()
					_ = yym906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr903 || yy2arr903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq903[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym908 := z.EncBinary()
						_ = yym908
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq903[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym909 := z.EncBinary()
						_ = yym909
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr903 || yy2arr903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq903[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy911 := *x.DefaultMode
						yym912 := z.EncBinary()
						_ = yym912
						if false {
						} else {
							r.EncodeInt(int64(yy911))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq903[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy913 := *x.DefaultMode
						yym914 := z.EncBinary()
						_ = yym914
						if false {
						} else {
							r.EncodeInt(int64(yy913))
						}
					}
				}
			}
			if yyr903 || yy2arr903 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym915 := z.DecBinary()
	_ = yym915
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct916 := r.ContainerType()
		if yyct916 == codecSelferValueTypeMap1234 {
			yyl916 := r.ReadMapStart()
			if yyl916 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl916, d)
			}
		} else if yyct916 == codecSelferValueTypeArray1234 {
			yyl916 := r.ReadArrayStart()
			if yyl916 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl916, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys917Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys917Slc
	var yyhl917 bool = l >= 0
	for yyj917 := 0; ; yyj917++ {
		if yyhl917 {
			if yyj917 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys917Slc = r.DecodeBytes(yys917Slc, true, true)
		yys917 := string(yys917Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys917 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv919 := &x.Items
				yym920 := z.DecBinary()
				_ = yym920
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv919), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym922 := z.DecBinary()
				_ = yym922
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys917)
		} // end switch yys917
	} // end for yyj917
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj923 int
	var yyb923 bool
	var yyhl923 bool = l >= 0
	yyj923++
	if yyhl923 {
		yyb923 = yyj923 > l
	} else {
		yyb923 = r.CheckBreak()
	}
	if yyb923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj923++
	if yyhl923 {
		yyb923 = yyj923 > l
	} else {
		yyb923 = r.CheckBreak()
	}
	if yyb923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv925 := &x.Items
		yym926 := z.DecBinary()
		_ = yym926
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv925), d)
		}
	}
	yyj923++
	if yyhl923 {
		yyb923 = yyj923 > l
	} else {
		yyb923 = r.CheckBreak()
	}
	if yyb923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym928 := z.DecBinary()
		_ = yym928
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj923++
		if yyhl923 {
			yyb923 = yyj923 > l
		} else {
			yyb923 = r.CheckBreak()
		}
		if yyb923 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj923-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym929 := z.EncBinary()
		_ = yym929
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep930 := !z.EncBinary()
			yy2arr930 := z.EncBasicHandle().StructToArray
			var yyq930 [3]bool
			_, _, _ = yysep930, yyq930, yy2arr930
			const yyr930 bool = false
			yyq930[2] = x.ReadOnly != false
			var yynn930 int
			if yyr930 || yy2arr930 {
				r.EncodeArrayStart(3)
			} else {
				yynn930 = 2
				for _, b := range yyq930 {
					if b {
						yynn930++
					}
				}
				r.EncodeMapStart(yynn930)
				yynn930 = 0
			}
			if yyr930 || yy2arr930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym932 := z.EncBinary()
				_ = yym932
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym933 := z.EncBinary()
				_ = yym933
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr930 || yy2arr930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym935 := z.EncBinary()
				_ = yym935
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym936 := z.EncBinary()
				_ = yym936
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr930 || yy2arr930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq930[2] {
					yym938 := z.EncBinary()
					_ = yym938
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq930[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym939 := z.EncBinary()
					_ = yym939
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr930 || yy2arr930 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym940 := z.DecBinary()
	_ = yym940
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct941 := r.ContainerType()
		if yyct941 == codecSelferValueTypeMap1234 {
			yyl941 := r.ReadMapStart()
			if yyl941 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl941, d)
			}
		} else if yyct941 == codecSelferValueTypeArray1234 {
			yyl941 := r.ReadArrayStart()
			if yyl941 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl941, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys942Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys942Slc
	var yyhl942 bool = l >= 0
	for yyj942 := 0; ; yyj942++ {
		if yyhl942 {
			if yyj942 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys942Slc = r.DecodeBytes(yys942Slc, true, true)
		yys942 := string(yys942Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys942 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys942)
		} // end switch yys942
	} // end for yyj942
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj946 int
	var yyb946 bool
	var yyhl946 bool = l >= 0
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj946++
		if yyhl946 {
			yyb946 = yyj946 > l
		} else {
			yyb946 = r.CheckBreak()
		}
		if yyb946 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj946-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym950 := z.EncBinary()
		_ = yym950
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep951 := !z.EncBinary()
			yy2arr951 := z.EncBasicHandle().StructToArray
			var yyq951 [6]bool
			_, _, _ = yysep951, yyq951, yy2arr951
			const yyr951 bool = false
			yyq951[3] = x.ISCSIInterface != ""
			yyq951[4] = x.FSType != ""
			yyq951[5] = x.ReadOnly != false
			var yynn951 int
			if yyr951 || yy2arr951 {
				r.EncodeArrayStart(6)
			} else {
				yynn951 = 3
				for _, b := range yyq951 {
					if b {
						yynn951++
					}
				}
				r.EncodeMapStart(yynn951)
				yynn951 = 0
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym953 := z.EncBinary()
				_ = yym953
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym954 := z.EncBinary()
				_ = yym954
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym956 := z.EncBinary()
				_ = yym956
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym957 := z.EncBinary()
				_ = yym957
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym959 := z.EncBinary()
				_ = yym959
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym960 := z.EncBinary()
				_ = yym960
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq951[3] {
					yym962 := z.EncBinary()
					_ = yym962
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq951[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym963 := z.EncBinary()
					_ = yym963
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq951[4] {
					yym965 := z.EncBinary()
					_ = yym965
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq951[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym966 := z.EncBinary()
					_ = yym966
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq951[5] {
					yym968 := z.EncBinary()
					_ = yym968
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq951[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym969 := z.EncBinary()
					_ = yym969
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym970 := z.DecBinary()
	_ = yym970
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct971 := r.ContainerType()
		if yyct971 == codecSelferValueTypeMap1234 {
			yyl971 := r.ReadMapStart()
			if yyl971 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl971, d)
			}
		} else if yyct971 == codecSelferValueTypeArray1234 {
			yyl971 := r.ReadArrayStart()
			if yyl971 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl971, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys972Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys972Slc
	var yyhl972 bool = l >= 0
	for yyj972 := 0; ; yyj972++ {
		if yyhl972 {
			if yyj972 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys972Slc = r.DecodeBytes(yys972Slc, true, true)
		yys972 := string(yys972Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys972 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys972)
		} // end switch yys972
	} // end for yyj972
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj979 int
	var yyb979 bool
	var yyhl979 bool = l >= 0
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj979++
		if yyhl979 {
			yyb979 = yyj979 > l
		} else {
			yyb979 = r.CheckBreak()
		}
		if yyb979 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj979-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym986 := z.EncBinary()
		_ = yym986
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep987 := !z.EncBinary()
			yy2arr987 := z.EncBasicHandle().StructToArray
			var yyq987 [4]bool
			_, _, _ = yysep987, yyq987, yy2arr987
			const yyr987 bool = false
			yyq987[2] = x.FSType != ""
			yyq987[3] = x.ReadOnly != false
			var yynn987 int
			if yyr987 || yy2arr987 {
				r.EncodeArrayStart(4)
			} else {
				yynn987 = 2
				for _, b := range yyq987 {
					if b {
						yynn987++
					}
				}
				r.EncodeMapStart(yynn987)
				yynn987 = 0
			}
			if yyr987 || yy2arr987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym989 := z.EncBinary()
					_ = yym989
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym990 := z.EncBinary()
					_ = yym990
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr987 || yy2arr987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy992 := *x.Lun
					yym993 := z.EncBinary()
					_ = yym993
					if false {
					} else {
						r.EncodeInt(int64(yy992))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy994 := *x.Lun
					yym995 := z.EncBinary()
					_ = yym995
					if false {
					} else {
						r.EncodeInt(int64(yy994))
					}
				}
			}
			if yyr987 || yy2arr987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq987[2] {
					yym997 := z.EncBinary()
					_ = yym997
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq987[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym998 := z.EncBinary()
					_ = yym998
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr987 || yy2arr987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq987[3] {
					yym1000 := z.EncBinary()
					_ = yym1000
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq987[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1001 := z.EncBinary()
					_ = yym1001
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr987 || yy2arr987 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1002 := z.DecBinary()
	_ = yym1002
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1003 := r.ContainerType()
		if yyct1003 == codecSelferValueTypeMap1234 {
			yyl1003 := r.ReadMapStart()
			if yyl1003 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1003, d)
			}
		} else if yyct1003 == codecSelferValueTypeArray1234 {
			yyl1003 := r.ReadArrayStart()
			if yyl1003 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1003, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1004Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1004Slc
	var yyhl1004 bool = l >= 0
	for yyj1004 := 0; ; yyj1004++ {
		if yyhl1004 {
			if yyj1004 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1004Slc = r.DecodeBytes(yys1004Slc, true, true)
		yys1004 := string(yys1004Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1004 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv1005 := &x.TargetWWNs
				yym1006 := z.DecBinary()
				_ = yym1006
				if false {
				} else {
					z.F.DecSliceStringX(yyv1005, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym1008 := z.DecBinary()
				_ = yym1008
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1004)
		} // end switch yys1004
	} // end for yyj1004
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1011 int
	var yyb1011 bool
	var yyhl1011 bool = l >= 0
	yyj1011++
	if yyhl1011 {
		yyb1011 = yyj1011 > l
	} else {
		yyb1011 = r.CheckBreak()
	}
	if yyb1011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv1012 := &x.TargetWWNs
		yym1013 := z.DecBinary()
		_ = yym1013
		if false {
		} else {
			z.F.DecSliceStringX(yyv1012, false, d)
		}
	}
	yyj1011++
	if yyhl1011 {
		yyb1011 = yyj1011 > l
	} else {
		yyb1011 = r.CheckBreak()
	}
	if yyb1011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym1015 := z.DecBinary()
		_ = yym1015
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj1011++
	if yyhl1011 {
		yyb1011 = yyj1011 > l
	} else {
		yyb1011 = r.CheckBreak()
	}
	if yyb1011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj1011++
	if yyhl1011 {
		yyb1011 = yyj1011 > l
	} else {
		yyb1011 = r.CheckBreak()
	}
	if yyb1011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1011++
		if yyhl1011 {
			yyb1011 = yyj1011 > l
		} else {
			yyb1011 = r.CheckBreak()
		}
		if yyb1011 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1011-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1018 := z.EncBinary()
		_ = yym1018
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1019 := !z.EncBinary()
			yy2arr1019 := z.EncBasicHandle().StructToArray
			var yyq1019 [3]bool
			_, _, _ = yysep1019, yyq1019, yy2arr1019
			const yyr1019 bool = false
			yyq1019[2] = x.ReadOnly != false
			var yynn1019 int
			if yyr1019 || yy2arr1019 {
				r.EncodeArrayStart(3)
			} else {
				yynn1019 = 2
				for _, b := range yyq1019 {
					if b {
						yynn1019++
					}
				}
				r.EncodeMapStart(yynn1019)
				yynn1019 = 0
			}
			if yyr1019 || yy2arr1019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1021 := z.EncBinary()
				_ = yym1021
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1022 := z.EncBinary()
				_ = yym1022
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr1019 || yy2arr1019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1024 := z.EncBinary()
				_ = yym1024
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1025 := z.EncBinary()
				_ = yym1025
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr1019 || yy2arr1019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1019[2] {
					yym1027 := z.EncBinary()
					_ = yym1027
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1019[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1028 := z.EncBinary()
					_ = yym1028
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1019 || yy2arr1019 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1029 := z.DecBinary()
	_ = yym1029
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1030 := r.ContainerType()
		if yyct1030 == codecSelferValueTypeMap1234 {
			yyl1030 := r.ReadMapStart()
			if yyl1030 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1030, d)
			}
		} else if yyct1030 == codecSelferValueTypeArray1234 {
			yyl1030 := r.ReadArrayStart()
			if yyl1030 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1030, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1031Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1031Slc
	var yyhl1031 bool = l >= 0
	for yyj1031 := 0; ; yyj1031++ {
		if yyhl1031 {
			if yyj1031 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1031Slc = r.DecodeBytes(yys1031Slc, true, true)
		yys1031 := string(yys1031Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1031 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1031)
		} // end switch yys1031
	} // end for yyj1031
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1035 int
	var yyb1035 bool
	var yyhl1035 bool = l >= 0
	yyj1035++
	if yyhl1035 {
		yyb1035 = yyj1035 > l
	} else {
		yyb1035 = r.CheckBreak()
	}
	if yyb1035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1035++
	if yyhl1035 {
		yyb1035 = yyj1035 > l
	} else {
		yyb1035 = r.CheckBreak()
	}
	if yyb1035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1035++
	if yyhl1035 {
		yyb1035 = yyj1035 > l
	} else {
		yyb1035 = r.CheckBreak()
	}
	if yyb1035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1035++
		if yyhl1035 {
			yyb1035 = yyj1035 > l
		} else {
			yyb1035 = r.CheckBreak()
		}
		if yyb1035 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1035-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1039 := z.EncBinary()
		_ = yym1039
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1040 := !z.EncBinary()
			yy2arr1040 := z.EncBasicHandle().StructToArray
			var yyq1040 [2]bool
			_, _, _ = yysep1040, yyq1040, yy2arr1040
			const yyr1040 bool = false
			yyq1040[1] = x.FSType != ""
			var yynn1040 int
			if yyr1040 || yy2arr1040 {
				r.EncodeArrayStart(2)
			} else {
				yynn1040 = 1
				for _, b := range yyq1040 {
					if b {
						yynn1040++
					}
				}
				r.EncodeMapStart(yynn1040)
				yynn1040 = 0
			}
			if yyr1040 || yy2arr1040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1042 := z.EncBinary()
				_ = yym1042
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1043 := z.EncBinary()
				_ = yym1043
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1040 || yy2arr1040 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1040[1] {
					yym1045 := z.EncBinary()
					_ = yym1045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1040[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1046 := z.EncBinary()
					_ = yym1046
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1040 || yy2arr1040 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1047 := z.DecBinary()
	_ = yym1047
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1048 := r.ContainerType()
		if yyct1048 == codecSelferValueTypeMap1234 {
			yyl1048 := r.ReadMapStart()
			if yyl1048 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1048, d)
			}
		} else if yyct1048 == codecSelferValueTypeArray1234 {
			yyl1048 := r.ReadArrayStart()
			if yyl1048 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1048, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1049Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1049Slc
	var yyhl1049 bool = l >= 0
	for yyj1049 := 0; ; yyj1049++ {
		if yyhl1049 {
			if yyj1049 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1049Slc = r.DecodeBytes(yys1049Slc, true, true)
		yys1049 := string(yys1049Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1049 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1049)
		} // end switch yys1049
	} // end for yyj1049
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1052 int
	var yyb1052 bool
	var yyhl1052 bool = l >= 0
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1052++
		if yyhl1052 {
			yyb1052 = yyj1052 > l
		} else {
			yyb1052 = r.CheckBreak()
		}
		if yyb1052 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1052-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PhotonPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1055 := z.EncBinary()
		_ = yym1055
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1056 := !z.EncBinary()
			yy2arr1056 := z.EncBasicHandle().StructToArray
			var yyq1056 [2]bool
			_, _, _ = yysep1056, yyq1056, yy2arr1056
			const yyr1056 bool = false
			yyq1056[1] = x.FSType != ""
			var yynn1056 int
			if yyr1056 || yy2arr1056 {
				r.EncodeArrayStart(2)
			} else {
				yynn1056 = 1
				for _, b := range yyq1056 {
					if b {
						yynn1056++
					}
				}
				r.EncodeMapStart(yynn1056)
				yynn1056 = 0
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1058 := z.EncBinary()
				_ = yym1058
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PdID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1059 := z.EncBinary()
				_ = yym1059
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PdID))
				}
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1056[1] {
					yym1061 := z.EncBinary()
					_ = yym1061
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1056[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1062 := z.EncBinary()
					_ = yym1062
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PhotonPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1063 := z.DecBinary()
	_ = yym1063
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1064 := r.ContainerType()
		if yyct1064 == codecSelferValueTypeMap1234 {
			yyl1064 := r.ReadMapStart()
			if yyl1064 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1064, d)
			}
		} else if yyct1064 == codecSelferValueTypeArray1234 {
			yyl1064 := r.ReadArrayStart()
			if yyl1064 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1064, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PhotonPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1065Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1065Slc
	var yyhl1065 bool = l >= 0
	for yyj1065 := 0; ; yyj1065++ {
		if yyhl1065 {
			if yyj1065 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1065Slc = r.DecodeBytes(yys1065Slc, true, true)
		yys1065 := string(yys1065Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1065 {
		case "pdID":
			if r.TryDecodeAsNil() {
				x.PdID = ""
			} else {
				x.PdID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1065)
		} // end switch yys1065
	} // end for yyj1065
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PhotonPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1068 int
	var yyb1068 bool
	var yyhl1068 bool = l >= 0
	yyj1068++
	if yyhl1068 {
		yyb1068 = yyj1068 > l
	} else {
		yyb1068 = r.CheckBreak()
	}
	if yyb1068 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PdID = ""
	} else {
		x.PdID = string(r.DecodeString())
	}
	yyj1068++
	if yyhl1068 {
		yyb1068 = yyj1068 > l
	} else {
		yyb1068 = r.CheckBreak()
	}
	if yyb1068 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1068++
		if yyhl1068 {
			yyb1068 = yyj1068 > l
		} else {
			yyb1068 = r.CheckBreak()
		}
		if yyb1068 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1068-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x AzureDataDiskCachingMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1071 := z.EncBinary()
	_ = yym1071
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *AzureDataDiskCachingMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1072 := z.DecBinary()
	_ = yym1072
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AzureDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1073 := z.EncBinary()
		_ = yym1073
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1074 := !z.EncBinary()
			yy2arr1074 := z.EncBasicHandle().StructToArray
			var yyq1074 [5]bool
			_, _, _ = yysep1074, yyq1074, yy2arr1074
			const yyr1074 bool = false
			yyq1074[2] = x.CachingMode != nil
			yyq1074[3] = x.FSType != nil
			yyq1074[4] = x.ReadOnly != nil
			var yynn1074 int
			if yyr1074 || yy2arr1074 {
				r.EncodeArrayStart(5)
			} else {
				yynn1074 = 2
				for _, b := range yyq1074 {
					if b {
						yynn1074++
					}
				}
				r.EncodeMapStart(yynn1074)
				yynn1074 = 0
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1076 := z.EncBinary()
				_ = yym1076
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1077 := z.EncBinary()
				_ = yym1077
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1079 := z.EncBinary()
				_ = yym1079
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskURI"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1080 := z.EncBinary()
				_ = yym1080
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1074[2] {
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1082 := *x.CachingMode
						yy1082.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1074[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cachingMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1083 := *x.CachingMode
						yy1083.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1074[3] {
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1085 := *x.FSType
						yym1086 := z.EncBinary()
						_ = yym1086
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1085))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1074[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1087 := *x.FSType
						yym1088 := z.EncBinary()
						_ = yym1088
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1087))
						}
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1074[4] {
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1090 := *x.ReadOnly
						yym1091 := z.EncBinary()
						_ = yym1091
						if false {
						} else {
							r.EncodeBool(bool(yy1090))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1074[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1092 := *x.ReadOnly
						yym1093 := z.EncBinary()
						_ = yym1093
						if false {
						} else {
							r.EncodeBool(bool(yy1092))
						}
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1094 := z.DecBinary()
	_ = yym1094
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1095 := r.ContainerType()
		if yyct1095 == codecSelferValueTypeMap1234 {
			yyl1095 := r.ReadMapStart()
			if yyl1095 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1095, d)
			}
		} else if yyct1095 == codecSelferValueTypeArray1234 {
			yyl1095 := r.ReadArrayStart()
			if yyl1095 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1095, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1096Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1096Slc
	var yyhl1096 bool = l >= 0
	for yyj1096 := 0; ; yyj1096++ {
		if yyhl1096 {
			if yyj1096 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1096Slc = r.DecodeBytes(yys1096Slc, true, true)
		yys1096 := string(yys1096Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1096 {
		case "diskName":
			if r.TryDecodeAsNil() {
				x.DiskName = ""
			} else {
				x.DiskName = string(r.DecodeString())
			}
		case "diskURI":
			if r.TryDecodeAsNil() {
				x.DataDiskURI = ""
			} else {
				x.DataDiskURI = string(r.DecodeString())
			}
		case "cachingMode":
			if r.TryDecodeAsNil() {
				if x.CachingMode != nil {
					x.CachingMode = nil
				}
			} else {
				if x.CachingMode == nil {
					x.CachingMode = new(AzureDataDiskCachingMode)
				}
				x.CachingMode.CodecDecodeSelf(d)
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				if x.FSType != nil {
					x.FSType = nil
				}
			} else {
				if x.FSType == nil {
					x.FSType = new(string)
				}
				yym1101 := z.DecBinary()
				_ = yym1101
				if false {
				} else {
					*((*string)(x.FSType)) = r.DecodeString()
				}
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				if x.ReadOnly != nil {
					x.ReadOnly = nil
				}
			} else {
				if x.ReadOnly == nil {
					x.ReadOnly = new(bool)
				}
				yym1103 := z.DecBinary()
				_ = yym1103
				if false {
				} else {
					*((*bool)(x.ReadOnly)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1096)
		} // end switch yys1096
	} // end for yyj1096
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1104 int
	var yyb1104 bool
	var yyhl1104 bool = l >= 0
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DiskName = ""
	} else {
		x.DiskName = string(r.DecodeString())
	}
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DataDiskURI = ""
	} else {
		x.DataDiskURI = string(r.DecodeString())
	}
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CachingMode != nil {
			x.CachingMode = nil
		}
	} else {
		if x.CachingMode == nil {
			x.CachingMode = new(AzureDataDiskCachingMode)
		}
		x.CachingMode.CodecDecodeSelf(d)
	}
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSType != nil {
			x.FSType = nil
		}
	} else {
		if x.FSType == nil {
			x.FSType = new(string)
		}
		yym1109 := z.DecBinary()
		_ = yym1109
		if false {
		} else {
			*((*string)(x.FSType)) = r.DecodeString()
		}
	}
	yyj1104++
	if yyhl1104 {
		yyb1104 = yyj1104 > l
	} else {
		yyb1104 = r.CheckBreak()
	}
	if yyb1104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnly != nil {
			x.ReadOnly = nil
		}
	} else {
		if x.ReadOnly == nil {
			x.ReadOnly = new(bool)
		}
		yym1111 := z.DecBinary()
		_ = yym1111
		if false {
		} else {
			*((*bool)(x.ReadOnly)) = r.DecodeBool()
		}
	}
	for {
		yyj1104++
		if yyhl1104 {
			yyb1104 = yyj1104 > l
		} else {
			yyb1104 = r.CheckBreak()
		}
		if yyb1104 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1104-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1112 := z.EncBinary()
		_ = yym1112
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1113 := !z.EncBinary()
			yy2arr1113 := z.EncBasicHandle().StructToArray
			var yyq1113 [3]bool
			_, _, _ = yysep1113, yyq1113, yy2arr1113
			const yyr1113 bool = false
			yyq1113[0] = x.Name != ""
			yyq1113[1] = len(x.Items) != 0
			yyq1113[2] = x.DefaultMode != nil
			var yynn1113 int
			if yyr1113 || yy2arr1113 {
				r.EncodeArrayStart(3)
			} else {
				yynn1113 = 0
				for _, b := range yyq1113 {
					if b {
						yynn1113++
					}
				}
				r.EncodeMapStart(yynn1113)
				yynn1113 = 0
			}
			if yyr1113 || yy2arr1113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1113[0] {
					yym1115 := z.EncBinary()
					_ = yym1115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1113[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1116 := z.EncBinary()
					_ = yym1116
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1113 || yy2arr1113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1113[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1118 := z.EncBinary()
						_ = yym1118
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1113[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1119 := z.EncBinary()
						_ = yym1119
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1113 || yy2arr1113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1113[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1121 := *x.DefaultMode
						yym1122 := z.EncBinary()
						_ = yym1122
						if false {
						} else {
							r.EncodeInt(int64(yy1121))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1113[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1123 := *x.DefaultMode
						yym1124 := z.EncBinary()
						_ = yym1124
						if false {
						} else {
							r.EncodeInt(int64(yy1123))
						}
					}
				}
			}
			if yyr1113 || yy2arr1113 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1125 := z.DecBinary()
	_ = yym1125
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1126 := r.ContainerType()
		if yyct1126 == codecSelferValueTypeMap1234 {
			yyl1126 := r.ReadMapStart()
			if yyl1126 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1126, d)
			}
		} else if yyct1126 == codecSelferValueTypeArray1234 {
			yyl1126 := r.ReadArrayStart()
			if yyl1126 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1126, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1127Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1127Slc
	var yyhl1127 bool = l >= 0
	for yyj1127 := 0; ; yyj1127++ {
		if yyhl1127 {
			if yyj1127 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1127Slc = r.DecodeBytes(yys1127Slc, true, true)
		yys1127 := string(yys1127Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1127 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1129 := &x.Items
				yym1130 := z.DecBinary()
				_ = yym1130
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1129), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1132 := z.DecBinary()
				_ = yym1132
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1127)
		} // end switch yys1127
	} // end for yyj1127
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1133 int
	var yyb1133 bool
	var yyhl1133 bool = l >= 0
	yyj1133++
	if yyhl1133 {
		yyb1133 = yyj1133 > l
	} else {
		yyb1133 = r.CheckBreak()
	}
	if yyb1133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1133++
	if yyhl1133 {
		yyb1133 = yyj1133 > l
	} else {
		yyb1133 = r.CheckBreak()
	}
	if yyb1133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1135 := &x.Items
		yym1136 := z.DecBinary()
		_ = yym1136
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1135), d)
		}
	}
	yyj1133++
	if yyhl1133 {
		yyb1133 = yyj1133 > l
	} else {
		yyb1133 = r.CheckBreak()
	}
	if yyb1133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1138 := z.DecBinary()
		_ = yym1138
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1133++
		if yyhl1133 {
			yyb1133 = yyj1133 > l
		} else {
			yyb1133 = r.CheckBreak()
		}
		if yyb1133 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1133-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1139 := z.EncBinary()
		_ = yym1139
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1140 := !z.EncBinary()
			yy2arr1140 := z.EncBasicHandle().StructToArray
			var yyq1140 [3]bool
			_, _, _ = yysep1140, yyq1140, yy2arr1140
			const yyr1140 bool = false
			yyq1140[2] = x.Mode != nil
			var yynn1140 int
			if yyr1140 || yy2arr1140 {
				r.EncodeArrayStart(3)
			} else {
				yynn1140 = 2
				for _, b := range yyq1140 {
					if b {
						yynn1140++
					}
				}
				r.EncodeMapStart(yynn1140)
				yynn1140 = 0
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1142 := z.EncBinary()
				_ = yym1142
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1143 := z.EncBinary()
				_ = yym1143
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1145 := z.EncBinary()
				_ = yym1145
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1146 := z.EncBinary()
				_ = yym1146
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1140[2] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1148 := *x.Mode
						yym1149 := z.EncBinary()
						_ = yym1149
						if false {
						} else {
							r.EncodeInt(int64(yy1148))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1140[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1150 := *x.Mode
						yym1151 := z.EncBinary()
						_ = yym1151
						if false {
						} else {
							r.EncodeInt(int64(yy1150))
						}
					}
				}
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1152 := z.DecBinary()
	_ = yym1152
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1153 := r.ContainerType()
		if yyct1153 == codecSelferValueTypeMap1234 {
			yyl1153 := r.ReadMapStart()
			if yyl1153 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1153, d)
			}
		} else if yyct1153 == codecSelferValueTypeArray1234 {
			yyl1153 := r.ReadArrayStart()
			if yyl1153 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1153, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1154Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1154Slc
	var yyhl1154 bool = l >= 0
	for yyj1154 := 0; ; yyj1154++ {
		if yyhl1154 {
			if yyj1154 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1154Slc = r.DecodeBytes(yys1154Slc, true, true)
		yys1154 := string(yys1154Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1154 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1158 := z.DecBinary()
				_ = yym1158
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1154)
		} // end switch yys1154
	} // end for yyj1154
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1159 int
	var yyb1159 bool
	var yyhl1159 bool = l >= 0
	yyj1159++
	if yyhl1159 {
		yyb1159 = yyj1159 > l
	} else {
		yyb1159 = r.CheckBreak()
	}
	if yyb1159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1159++
	if yyhl1159 {
		yyb1159 = yyj1159 > l
	} else {
		yyb1159 = r.CheckBreak()
	}
	if yyb1159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1159++
	if yyhl1159 {
		yyb1159 = yyj1159 > l
	} else {
		yyb1159 = r.CheckBreak()
	}
	if yyb1159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1163 := z.DecBinary()
		_ = yym1163
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1159++
		if yyhl1159 {
			yyb1159 = yyj1159 > l
		} else {
			yyb1159 = r.CheckBreak()
		}
		if yyb1159 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1159-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1164 := z.EncBinary()
		_ = yym1164
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1165 := !z.EncBinary()
			yy2arr1165 := z.EncBasicHandle().StructToArray
			var yyq1165 [5]bool
			_, _, _ = yysep1165, yyq1165, yy2arr1165
			const yyr1165 bool = false
			yyq1165[0] = x.Name != ""
			yyq1165[1] = x.HostPort != 0
			yyq1165[3] = x.Protocol != ""
			yyq1165[4] = x.HostIP != ""
			var yynn1165 int
			if yyr1165 || yy2arr1165 {
				r.EncodeArrayStart(5)
			} else {
				yynn1165 = 1
				for _, b := range yyq1165 {
					if b {
						yynn1165++
					}
				}
				r.EncodeMapStart(yynn1165)
				yynn1165 = 0
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[0] {
					yym1167 := z.EncBinary()
					_ = yym1167
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1165[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1168 := z.EncBinary()
					_ = yym1168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[1] {
					yym1170 := z.EncBinary()
					_ = yym1170
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1165[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1171 := z.EncBinary()
					_ = yym1171
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1173 := z.EncBinary()
				_ = yym1173
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1174 := z.EncBinary()
				_ = yym1174
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1165[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[4] {
					yym1177 := z.EncBinary()
					_ = yym1177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1165[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1178 := z.EncBinary()
					_ = yym1178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1179 := z.DecBinary()
	_ = yym1179
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1180 := r.ContainerType()
		if yyct1180 == codecSelferValueTypeMap1234 {
			yyl1180 := r.ReadMapStart()
			if yyl1180 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1180, d)
			}
		} else if yyct1180 == codecSelferValueTypeArray1234 {
			yyl1180 := r.ReadArrayStart()
			if yyl1180 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1180, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1181Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1181Slc
	var yyhl1181 bool = l >= 0
	for yyj1181 := 0; ; yyj1181++ {
		if yyhl1181 {
			if yyj1181 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1181Slc = r.DecodeBytes(yys1181Slc, true, true)
		yys1181 := string(yys1181Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1181 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1181)
		} // end switch yys1181
	} // end for yyj1181
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1187 int
	var yyb1187 bool
	var yyhl1187 bool = l >= 0
	yyj1187++
	if yyhl1187 {
		yyb1187 = yyj1187 > l
	} else {
		yyb1187 = r.CheckBreak()
	}
	if yyb1187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1187++
	if yyhl1187 {
		yyb1187 = yyj1187 > l
	} else {
		yyb1187 = r.CheckBreak()
	}
	if yyb1187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1187++
	if yyhl1187 {
		yyb1187 = yyj1187 > l
	} else {
		yyb1187 = r.CheckBreak()
	}
	if yyb1187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1187++
	if yyhl1187 {
		yyb1187 = yyj1187 > l
	} else {
		yyb1187 = r.CheckBreak()
	}
	if yyb1187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1187++
	if yyhl1187 {
		yyb1187 = yyj1187 > l
	} else {
		yyb1187 = r.CheckBreak()
	}
	if yyb1187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1187++
		if yyhl1187 {
			yyb1187 = yyj1187 > l
		} else {
			yyb1187 = r.CheckBreak()
		}
		if yyb1187 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1187-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1193 := z.EncBinary()
		_ = yym1193
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1194 := !z.EncBinary()
			yy2arr1194 := z.EncBasicHandle().StructToArray
			var yyq1194 [4]bool
			_, _, _ = yysep1194, yyq1194, yy2arr1194
			const yyr1194 bool = false
			yyq1194[1] = x.ReadOnly != false
			yyq1194[3] = x.SubPath != ""
			var yynn1194 int
			if yyr1194 || yy2arr1194 {
				r.EncodeArrayStart(4)
			} else {
				yynn1194 = 2
				for _, b := range yyq1194 {
					if b {
						yynn1194++
					}
				}
				r.EncodeMapStart(yynn1194)
				yynn1194 = 0
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1196 := z.EncBinary()
				_ = yym1196
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1197 := z.EncBinary()
				_ = yym1197
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1194[1] {
					yym1199 := z.EncBinary()
					_ = yym1199
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1194[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1200 := z.EncBinary()
					_ = yym1200
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1202 := z.EncBinary()
				_ = yym1202
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1203 := z.EncBinary()
				_ = yym1203
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1194[3] {
					yym1205 := z.EncBinary()
					_ = yym1205
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1194[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1206 := z.EncBinary()
					_ = yym1206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1194 || yy2arr1194 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1207 := z.DecBinary()
	_ = yym1207
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1208 := r.ContainerType()
		if yyct1208 == codecSelferValueTypeMap1234 {
			yyl1208 := r.ReadMapStart()
			if yyl1208 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1208, d)
			}
		} else if yyct1208 == codecSelferValueTypeArray1234 {
			yyl1208 := r.ReadArrayStart()
			if yyl1208 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1208, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1209Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1209Slc
	var yyhl1209 bool = l >= 0
	for yyj1209 := 0; ; yyj1209++ {
		if yyhl1209 {
			if yyj1209 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1209Slc = r.DecodeBytes(yys1209Slc, true, true)
		yys1209 := string(yys1209Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1209 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1209)
		} // end switch yys1209
	} // end for yyj1209
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1214 int
	var yyb1214 bool
	var yyhl1214 bool = l >= 0
	yyj1214++
	if yyhl1214 {
		yyb1214 = yyj1214 > l
	} else {
		yyb1214 = r.CheckBreak()
	}
	if yyb1214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1214++
	if yyhl1214 {
		yyb1214 = yyj1214 > l
	} else {
		yyb1214 = r.CheckBreak()
	}
	if yyb1214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1214++
	if yyhl1214 {
		yyb1214 = yyj1214 > l
	} else {
		yyb1214 = r.CheckBreak()
	}
	if yyb1214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1214++
	if yyhl1214 {
		yyb1214 = yyj1214 > l
	} else {
		yyb1214 = r.CheckBreak()
	}
	if yyb1214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1214++
		if yyhl1214 {
			yyb1214 = yyj1214 > l
		} else {
			yyb1214 = r.CheckBreak()
		}
		if yyb1214 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1214-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1219 := z.EncBinary()
		_ = yym1219
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1220 := !z.EncBinary()
			yy2arr1220 := z.EncBasicHandle().StructToArray
			var yyq1220 [3]bool
			_, _, _ = yysep1220, yyq1220, yy2arr1220
			const yyr1220 bool = false
			yyq1220[1] = x.Value != ""
			yyq1220[2] = x.ValueFrom != nil
			var yynn1220 int
			if yyr1220 || yy2arr1220 {
				r.EncodeArrayStart(3)
			} else {
				yynn1220 = 1
				for _, b := range yyq1220 {
					if b {
						yynn1220++
					}
				}
				r.EncodeMapStart(yynn1220)
				yynn1220 = 0
			}
			if yyr1220 || yy2arr1220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1222 := z.EncBinary()
				_ = yym1222
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1223 := z.EncBinary()
				_ = yym1223
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1220 || yy2arr1220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1220[1] {
					yym1225 := z.EncBinary()
					_ = yym1225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1220[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1226 := z.EncBinary()
					_ = yym1226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1220 || yy2arr1220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1220[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1220[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1220 || yy2arr1220 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1228 := z.DecBinary()
	_ = yym1228
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1229 := r.ContainerType()
		if yyct1229 == codecSelferValueTypeMap1234 {
			yyl1229 := r.ReadMapStart()
			if yyl1229 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1229, d)
			}
		} else if yyct1229 == codecSelferValueTypeArray1234 {
			yyl1229 := r.ReadArrayStart()
			if yyl1229 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1229, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1230Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1230Slc
	var yyhl1230 bool = l >= 0
	for yyj1230 := 0; ; yyj1230++ {
		if yyhl1230 {
			if yyj1230 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1230Slc = r.DecodeBytes(yys1230Slc, true, true)
		yys1230 := string(yys1230Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1230 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1230)
		} // end switch yys1230
	} // end for yyj1230
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1234 int
	var yyb1234 bool
	var yyhl1234 bool = l >= 0
	yyj1234++
	if yyhl1234 {
		yyb1234 = yyj1234 > l
	} else {
		yyb1234 = r.CheckBreak()
	}
	if yyb1234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1234++
	if yyhl1234 {
		yyb1234 = yyj1234 > l
	} else {
		yyb1234 = r.CheckBreak()
	}
	if yyb1234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1234++
	if yyhl1234 {
		yyb1234 = yyj1234 > l
	} else {
		yyb1234 = r.CheckBreak()
	}
	if yyb1234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1234++
		if yyhl1234 {
			yyb1234 = yyj1234 > l
		} else {
			yyb1234 = r.CheckBreak()
		}
		if yyb1234 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1234-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1238 := z.EncBinary()
		_ = yym1238
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1239 := !z.EncBinary()
			yy2arr1239 := z.EncBasicHandle().StructToArray
			var yyq1239 [4]bool
			_, _, _ = yysep1239, yyq1239, yy2arr1239
			const yyr1239 bool = false
			yyq1239[0] = x.FieldRef != nil
			yyq1239[1] = x.ResourceFieldRef != nil
			yyq1239[2] = x.ConfigMapKeyRef != nil
			yyq1239[3] = x.SecretKeyRef != nil
			var yynn1239 int
			if yyr1239 || yy2arr1239 {
				r.EncodeArrayStart(4)
			} else {
				yynn1239 = 0
				for _, b := range yyq1239 {
					if b {
						yynn1239++
					}
				}
				r.EncodeMapStart(yynn1239)
				yynn1239 = 0
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1239[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1239[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1239[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1239[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1244 := z.DecBinary()
	_ = yym1244
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1245 := r.ContainerType()
		if yyct1245 == codecSelferValueTypeMap1234 {
			yyl1245 := r.ReadMapStart()
			if yyl1245 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1245, d)
			}
		} else if yyct1245 == codecSelferValueTypeArray1234 {
			yyl1245 := r.ReadArrayStart()
			if yyl1245 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1245, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1246Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1246Slc
	var yyhl1246 bool = l >= 0
	for yyj1246 := 0; ; yyj1246++ {
		if yyhl1246 {
			if yyj1246 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1246Slc = r.DecodeBytes(yys1246Slc, true, true)
		yys1246 := string(yys1246Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1246 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1246)
		} // end switch yys1246
	} // end for yyj1246
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1251 int
	var yyb1251 bool
	var yyhl1251 bool = l >= 0
	yyj1251++
	if yyhl1251 {
		yyb1251 = yyj1251 > l
	} else {
		yyb1251 = r.CheckBreak()
	}
	if yyb1251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1251++
	if yyhl1251 {
		yyb1251 = yyj1251 > l
	} else {
		yyb1251 = r.CheckBreak()
	}
	if yyb1251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1251++
	if yyhl1251 {
		yyb1251 = yyj1251 > l
	} else {
		yyb1251 = r.CheckBreak()
	}
	if yyb1251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1251++
	if yyhl1251 {
		yyb1251 = yyj1251 > l
	} else {
		yyb1251 = r.CheckBreak()
	}
	if yyb1251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1251++
		if yyhl1251 {
			yyb1251 = yyj1251 > l
		} else {
			yyb1251 = r.CheckBreak()
		}
		if yyb1251 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1251-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1256 := z.EncBinary()
		_ = yym1256
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1257 := !z.EncBinary()
			yy2arr1257 := z.EncBasicHandle().StructToArray
			var yyq1257 [2]bool
			_, _, _ = yysep1257, yyq1257, yy2arr1257
			const yyr1257 bool = false
			yyq1257[0] = x.APIVersion != ""
			var yynn1257 int
			if yyr1257 || yy2arr1257 {
				r.EncodeArrayStart(2)
			} else {
				yynn1257 = 1
				for _, b := range yyq1257 {
					if b {
						yynn1257++
					}
				}
				r.EncodeMapStart(yynn1257)
				yynn1257 = 0
			}
			if yyr1257 || yy2arr1257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1257[0] {
					yym1259 := z.EncBinary()
					_ = yym1259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1257[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1260 := z.EncBinary()
					_ = yym1260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1257 || yy2arr1257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1262 := z.EncBinary()
				_ = yym1262
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1263 := z.EncBinary()
				_ = yym1263
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1257 || yy2arr1257 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1264 := z.DecBinary()
	_ = yym1264
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1265 := r.ContainerType()
		if yyct1265 == codecSelferValueTypeMap1234 {
			yyl1265 := r.ReadMapStart()
			if yyl1265 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1265, d)
			}
		} else if yyct1265 == codecSelferValueTypeArray1234 {
			yyl1265 := r.ReadArrayStart()
			if yyl1265 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1265, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1266Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1266Slc
	var yyhl1266 bool = l >= 0
	for yyj1266 := 0; ; yyj1266++ {
		if yyhl1266 {
			if yyj1266 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1266Slc = r.DecodeBytes(yys1266Slc, true, true)
		yys1266 := string(yys1266Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1266 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1266)
		} // end switch yys1266
	} // end for yyj1266
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1269 int
	var yyb1269 bool
	var yyhl1269 bool = l >= 0
	yyj1269++
	if yyhl1269 {
		yyb1269 = yyj1269 > l
	} else {
		yyb1269 = r.CheckBreak()
	}
	if yyb1269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1269++
	if yyhl1269 {
		yyb1269 = yyj1269 > l
	} else {
		yyb1269 = r.CheckBreak()
	}
	if yyb1269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1269++
		if yyhl1269 {
			yyb1269 = yyj1269 > l
		} else {
			yyb1269 = r.CheckBreak()
		}
		if yyb1269 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1269-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1272 := z.EncBinary()
		_ = yym1272
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1273 := !z.EncBinary()
			yy2arr1273 := z.EncBasicHandle().StructToArray
			var yyq1273 [3]bool
			_, _, _ = yysep1273, yyq1273, yy2arr1273
			const yyr1273 bool = false
			yyq1273[0] = x.ContainerName != ""
			yyq1273[2] = true
			var yynn1273 int
			if yyr1273 || yy2arr1273 {
				r.EncodeArrayStart(3)
			} else {
				yynn1273 = 1
				for _, b := range yyq1273 {
					if b {
						yynn1273++
					}
				}
				r.EncodeMapStart(yynn1273)
				yynn1273 = 0
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1273[0] {
					yym1275 := z.EncBinary()
					_ = yym1275
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1273[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1276 := z.EncBinary()
					_ = yym1276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1278 := z.EncBinary()
				_ = yym1278
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1279 := z.EncBinary()
				_ = yym1279
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1273[2] {
					yy1281 := &x.Divisor
					yym1282 := z.EncBinary()
					_ = yym1282
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1281) {
					} else if !yym1282 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1281)
					} else {
						z.EncFallback(yy1281)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1273[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1283 := &x.Divisor
					yym1284 := z.EncBinary()
					_ = yym1284
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1283) {
					} else if !yym1284 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1283)
					} else {
						z.EncFallback(yy1283)
					}
				}
			}
			if yyr1273 || yy2arr1273 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1285 := z.DecBinary()
	_ = yym1285
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1286 := r.ContainerType()
		if yyct1286 == codecSelferValueTypeMap1234 {
			yyl1286 := r.ReadMapStart()
			if yyl1286 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1286, d)
			}
		} else if yyct1286 == codecSelferValueTypeArray1234 {
			yyl1286 := r.ReadArrayStart()
			if yyl1286 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1286, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1287Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1287Slc
	var yyhl1287 bool = l >= 0
	for yyj1287 := 0; ; yyj1287++ {
		if yyhl1287 {
			if yyj1287 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1287Slc = r.DecodeBytes(yys1287Slc, true, true)
		yys1287 := string(yys1287Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1287 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1290 := &x.Divisor
				yym1291 := z.DecBinary()
				_ = yym1291
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1290) {
				} else if !yym1291 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1290)
				} else {
					z.DecFallback(yyv1290, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1287)
		} // end switch yys1287
	} // end for yyj1287
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1292 int
	var yyb1292 bool
	var yyhl1292 bool = l >= 0
	yyj1292++
	if yyhl1292 {
		yyb1292 = yyj1292 > l
	} else {
		yyb1292 = r.CheckBreak()
	}
	if yyb1292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1292++
	if yyhl1292 {
		yyb1292 = yyj1292 > l
	} else {
		yyb1292 = r.CheckBreak()
	}
	if yyb1292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1292++
	if yyhl1292 {
		yyb1292 = yyj1292 > l
	} else {
		yyb1292 = r.CheckBreak()
	}
	if yyb1292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1295 := &x.Divisor
		yym1296 := z.DecBinary()
		_ = yym1296
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1295) {
		} else if !yym1296 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1295)
		} else {
			z.DecFallback(yyv1295, false)
		}
	}
	for {
		yyj1292++
		if yyhl1292 {
			yyb1292 = yyj1292 > l
		} else {
			yyb1292 = r.CheckBreak()
		}
		if yyb1292 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1292-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1297 := z.EncBinary()
		_ = yym1297
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1298 := !z.EncBinary()
			yy2arr1298 := z.EncBasicHandle().StructToArray
			var yyq1298 [2]bool
			_, _, _ = yysep1298, yyq1298, yy2arr1298
			const yyr1298 bool = false
			yyq1298[0] = x.Name != ""
			var yynn1298 int
			if yyr1298 || yy2arr1298 {
				r.EncodeArrayStart(2)
			} else {
				yynn1298 = 1
				for _, b := range yyq1298 {
					if b {
						yynn1298++
					}
				}
				r.EncodeMapStart(yynn1298)
				yynn1298 = 0
			}
			if yyr1298 || yy2arr1298 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1298[0] {
					yym1300 := z.EncBinary()
					_ = yym1300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1298[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1301 := z.EncBinary()
					_ = yym1301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1298 || yy2arr1298 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1303 := z.EncBinary()
				_ = yym1303
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1304 := z.EncBinary()
				_ = yym1304
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1298 || yy2arr1298 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1305 := z.DecBinary()
	_ = yym1305
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1306 := r.ContainerType()
		if yyct1306 == codecSelferValueTypeMap1234 {
			yyl1306 := r.ReadMapStart()
			if yyl1306 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1306, d)
			}
		} else if yyct1306 == codecSelferValueTypeArray1234 {
			yyl1306 := r.ReadArrayStart()
			if yyl1306 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1306, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1307Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1307Slc
	var yyhl1307 bool = l >= 0
	for yyj1307 := 0; ; yyj1307++ {
		if yyhl1307 {
			if yyj1307 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1307Slc = r.DecodeBytes(yys1307Slc, true, true)
		yys1307 := string(yys1307Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1307 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1307)
		} // end switch yys1307
	} // end for yyj1307
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1310 int
	var yyb1310 bool
	var yyhl1310 bool = l >= 0
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1310++
		if yyhl1310 {
			yyb1310 = yyj1310 > l
		} else {
			yyb1310 = r.CheckBreak()
		}
		if yyb1310 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1310-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1313 := z.EncBinary()
		_ = yym1313
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1314 := !z.EncBinary()
			yy2arr1314 := z.EncBasicHandle().StructToArray
			var yyq1314 [2]bool
			_, _, _ = yysep1314, yyq1314, yy2arr1314
			const yyr1314 bool = false
			yyq1314[0] = x.Name != ""
			var yynn1314 int
			if yyr1314 || yy2arr1314 {
				r.EncodeArrayStart(2)
			} else {
				yynn1314 = 1
				for _, b := range yyq1314 {
					if b {
						yynn1314++
					}
				}
				r.EncodeMapStart(yynn1314)
				yynn1314 = 0
			}
			if yyr1314 || yy2arr1314 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1314[0] {
					yym1316 := z.EncBinary()
					_ = yym1316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1314[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1317 := z.EncBinary()
					_ = yym1317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1314 || yy2arr1314 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1319 := z.EncBinary()
				_ = yym1319
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1320 := z.EncBinary()
				_ = yym1320
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1314 || yy2arr1314 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1321 := z.DecBinary()
	_ = yym1321
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1322 := r.ContainerType()
		if yyct1322 == codecSelferValueTypeMap1234 {
			yyl1322 := r.ReadMapStart()
			if yyl1322 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1322, d)
			}
		} else if yyct1322 == codecSelferValueTypeArray1234 {
			yyl1322 := r.ReadArrayStart()
			if yyl1322 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1322, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1323Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1323Slc
	var yyhl1323 bool = l >= 0
	for yyj1323 := 0; ; yyj1323++ {
		if yyhl1323 {
			if yyj1323 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1323Slc = r.DecodeBytes(yys1323Slc, true, true)
		yys1323 := string(yys1323Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1323 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1323)
		} // end switch yys1323
	} // end for yyj1323
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1326 int
	var yyb1326 bool
	var yyhl1326 bool = l >= 0
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1326++
	if yyhl1326 {
		yyb1326 = yyj1326 > l
	} else {
		yyb1326 = r.CheckBreak()
	}
	if yyb1326 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1326++
		if yyhl1326 {
			yyb1326 = yyj1326 > l
		} else {
			yyb1326 = r.CheckBreak()
		}
		if yyb1326 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1326-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1329 := z.EncBinary()
		_ = yym1329
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1330 := !z.EncBinary()
			yy2arr1330 := z.EncBasicHandle().StructToArray
			var yyq1330 [2]bool
			_, _, _ = yysep1330, yyq1330, yy2arr1330
			const yyr1330 bool = false
			var yynn1330 int
			if yyr1330 || yy2arr1330 {
				r.EncodeArrayStart(2)
			} else {
				yynn1330 = 2
				for _, b := range yyq1330 {
					if b {
						yynn1330++
					}
				}
				r.EncodeMapStart(yynn1330)
				yynn1330 = 0
			}
			if yyr1330 || yy2arr1330 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1332 := z.EncBinary()
				_ = yym1332
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1333 := z.EncBinary()
				_ = yym1333
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1330 || yy2arr1330 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1335 := z.EncBinary()
				_ = yym1335
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1336 := z.EncBinary()
				_ = yym1336
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1330 || yy2arr1330 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1337 := z.DecBinary()
	_ = yym1337
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1338 := r.ContainerType()
		if yyct1338 == codecSelferValueTypeMap1234 {
			yyl1338 := r.ReadMapStart()
			if yyl1338 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1338, d)
			}
		} else if yyct1338 == codecSelferValueTypeArray1234 {
			yyl1338 := r.ReadArrayStart()
			if yyl1338 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1338, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1339Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1339Slc
	var yyhl1339 bool = l >= 0
	for yyj1339 := 0; ; yyj1339++ {
		if yyhl1339 {
			if yyj1339 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1339Slc = r.DecodeBytes(yys1339Slc, true, true)
		yys1339 := string(yys1339Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1339 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1339)
		} // end switch yys1339
	} // end for yyj1339
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1342 int
	var yyb1342 bool
	var yyhl1342 bool = l >= 0
	yyj1342++
	if yyhl1342 {
		yyb1342 = yyj1342 > l
	} else {
		yyb1342 = r.CheckBreak()
	}
	if yyb1342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1342++
	if yyhl1342 {
		yyb1342 = yyj1342 > l
	} else {
		yyb1342 = r.CheckBreak()
	}
	if yyb1342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1342++
		if yyhl1342 {
			yyb1342 = yyj1342 > l
		} else {
			yyb1342 = r.CheckBreak()
		}
		if yyb1342 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1342-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1345 := z.EncBinary()
		_ = yym1345
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1346 := !z.EncBinary()
			yy2arr1346 := z.EncBasicHandle().StructToArray
			var yyq1346 [5]bool
			_, _, _ = yysep1346, yyq1346, yy2arr1346
			const yyr1346 bool = false
			yyq1346[0] = x.Path != ""
			yyq1346[2] = x.Host != ""
			yyq1346[3] = x.Scheme != ""
			yyq1346[4] = len(x.HTTPHeaders) != 0
			var yynn1346 int
			if yyr1346 || yy2arr1346 {
				r.EncodeArrayStart(5)
			} else {
				yynn1346 = 1
				for _, b := range yyq1346 {
					if b {
						yynn1346++
					}
				}
				r.EncodeMapStart(yynn1346)
				yynn1346 = 0
			}
			if yyr1346 || yy2arr1346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1346[0] {
					yym1348 := z.EncBinary()
					_ = yym1348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1346[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1349 := z.EncBinary()
					_ = yym1349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1346 || yy2arr1346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1351 := &x.Port
				yym1352 := z.EncBinary()
				_ = yym1352
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1351) {
				} else if !yym1352 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1351)
				} else {
					z.EncFallback(yy1351)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1353 := &x.Port
				yym1354 := z.EncBinary()
				_ = yym1354
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1353) {
				} else if !yym1354 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1353)
				} else {
					z.EncFallback(yy1353)
				}
			}
			if yyr1346 || yy2arr1346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1346[2] {
					yym1356 := z.EncBinary()
					_ = yym1356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1346[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1357 := z.EncBinary()
					_ = yym1357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1346 || yy2arr1346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1346[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1346[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1346 || yy2arr1346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1346[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1360 := z.EncBinary()
						_ = yym1360
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1346[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1361 := z.EncBinary()
						_ = yym1361
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1346 || yy2arr1346 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1362 := z.DecBinary()
	_ = yym1362
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1363 := r.ContainerType()
		if yyct1363 == codecSelferValueTypeMap1234 {
			yyl1363 := r.ReadMapStart()
			if yyl1363 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1363, d)
			}
		} else if yyct1363 == codecSelferValueTypeArray1234 {
			yyl1363 := r.ReadArrayStart()
			if yyl1363 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1363, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1364Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1364Slc
	var yyhl1364 bool = l >= 0
	for yyj1364 := 0; ; yyj1364++ {
		if yyhl1364 {
			if yyj1364 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1364Slc = r.DecodeBytes(yys1364Slc, true, true)
		yys1364 := string(yys1364Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1364 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1366 := &x.Port
				yym1367 := z.DecBinary()
				_ = yym1367
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1366) {
				} else if !yym1367 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1366)
				} else {
					z.DecFallback(yyv1366, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1370 := &x.HTTPHeaders
				yym1371 := z.DecBinary()
				_ = yym1371
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1370), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1364)
		} // end switch yys1364
	} // end for yyj1364
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1372 int
	var yyb1372 bool
	var yyhl1372 bool = l >= 0
	yyj1372++
	if yyhl1372 {
		yyb1372 = yyj1372 > l
	} else {
		yyb1372 = r.CheckBreak()
	}
	if yyb1372 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1372++
	if yyhl1372 {
		yyb1372 = yyj1372 > l
	} else {
		yyb1372 = r.CheckBreak()
	}
	if yyb1372 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1374 := &x.Port
		yym1375 := z.DecBinary()
		_ = yym1375
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1374) {
		} else if !yym1375 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1374)
		} else {
			z.DecFallback(yyv1374, false)
		}
	}
	yyj1372++
	if yyhl1372 {
		yyb1372 = yyj1372 > l
	} else {
		yyb1372 = r.CheckBreak()
	}
	if yyb1372 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1372++
	if yyhl1372 {
		yyb1372 = yyj1372 > l
	} else {
		yyb1372 = r.CheckBreak()
	}
	if yyb1372 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1372++
	if yyhl1372 {
		yyb1372 = yyj1372 > l
	} else {
		yyb1372 = r.CheckBreak()
	}
	if yyb1372 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1378 := &x.HTTPHeaders
		yym1379 := z.DecBinary()
		_ = yym1379
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1378), d)
		}
	}
	for {
		yyj1372++
		if yyhl1372 {
			yyb1372 = yyj1372 > l
		} else {
			yyb1372 = r.CheckBreak()
		}
		if yyb1372 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1372-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1380 := z.EncBinary()
	_ = yym1380
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1381 := z.DecBinary()
	_ = yym1381
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1382 := z.EncBinary()
		_ = yym1382
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1383 := !z.EncBinary()
			yy2arr1383 := z.EncBasicHandle().StructToArray
			var yyq1383 [1]bool
			_, _, _ = yysep1383, yyq1383, yy2arr1383
			const yyr1383 bool = false
			var yynn1383 int
			if yyr1383 || yy2arr1383 {
				r.EncodeArrayStart(1)
			} else {
				yynn1383 = 1
				for _, b := range yyq1383 {
					if b {
						yynn1383++
					}
				}
				r.EncodeMapStart(yynn1383)
				yynn1383 = 0
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1385 := &x.Port
				yym1386 := z.EncBinary()
				_ = yym1386
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1385) {
				} else if !yym1386 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1385)
				} else {
					z.EncFallback(yy1385)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1387 := &x.Port
				yym1388 := z.EncBinary()
				_ = yym1388
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1387) {
				} else if !yym1388 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1387)
				} else {
					z.EncFallback(yy1387)
				}
			}
			if yyr1383 || yy2arr1383 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1389 := z.DecBinary()
	_ = yym1389
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1390 := r.ContainerType()
		if yyct1390 == codecSelferValueTypeMap1234 {
			yyl1390 := r.ReadMapStart()
			if yyl1390 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1390, d)
			}
		} else if yyct1390 == codecSelferValueTypeArray1234 {
			yyl1390 := r.ReadArrayStart()
			if yyl1390 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1390, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1391Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1391Slc
	var yyhl1391 bool = l >= 0
	for yyj1391 := 0; ; yyj1391++ {
		if yyhl1391 {
			if yyj1391 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1391Slc = r.DecodeBytes(yys1391Slc, true, true)
		yys1391 := string(yys1391Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1391 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1392 := &x.Port
				yym1393 := z.DecBinary()
				_ = yym1393
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1392) {
				} else if !yym1393 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1392)
				} else {
					z.DecFallback(yyv1392, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1391)
		} // end switch yys1391
	} // end for yyj1391
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1394 int
	var yyb1394 bool
	var yyhl1394 bool = l >= 0
	yyj1394++
	if yyhl1394 {
		yyb1394 = yyj1394 > l
	} else {
		yyb1394 = r.CheckBreak()
	}
	if yyb1394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1395 := &x.Port
		yym1396 := z.DecBinary()
		_ = yym1396
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1395) {
		} else if !yym1396 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1395)
		} else {
			z.DecFallback(yyv1395, false)
		}
	}
	for {
		yyj1394++
		if yyhl1394 {
			yyb1394 = yyj1394 > l
		} else {
			yyb1394 = r.CheckBreak()
		}
		if yyb1394 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1394-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1397 := z.EncBinary()
		_ = yym1397
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1398 := !z.EncBinary()
			yy2arr1398 := z.EncBasicHandle().StructToArray
			var yyq1398 [1]bool
			_, _, _ = yysep1398, yyq1398, yy2arr1398
			const yyr1398 bool = false
			yyq1398[0] = len(x.Command) != 0
			var yynn1398 int
			if yyr1398 || yy2arr1398 {
				r.EncodeArrayStart(1)
			} else {
				yynn1398 = 0
				for _, b := range yyq1398 {
					if b {
						yynn1398++
					}
				}
				r.EncodeMapStart(yynn1398)
				yynn1398 = 0
			}
			if yyr1398 || yy2arr1398 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1398[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1400 := z.EncBinary()
						_ = yym1400
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1398[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1401 := z.EncBinary()
						_ = yym1401
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1398 || yy2arr1398 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1402 := z.DecBinary()
	_ = yym1402
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1403 := r.ContainerType()
		if yyct1403 == codecSelferValueTypeMap1234 {
			yyl1403 := r.ReadMapStart()
			if yyl1403 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1403, d)
			}
		} else if yyct1403 == codecSelferValueTypeArray1234 {
			yyl1403 := r.ReadArrayStart()
			if yyl1403 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1403, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1404Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1404Slc
	var yyhl1404 bool = l >= 0
	for yyj1404 := 0; ; yyj1404++ {
		if yyhl1404 {
			if yyj1404 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1404Slc = r.DecodeBytes(yys1404Slc, true, true)
		yys1404 := string(yys1404Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1404 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1405 := &x.Command
				yym1406 := z.DecBinary()
				_ = yym1406
				if false {
				} else {
					z.F.DecSliceStringX(yyv1405, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1404)
		} // end switch yys1404
	} // end for yyj1404
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1407 int
	var yyb1407 bool
	var yyhl1407 bool = l >= 0
	yyj1407++
	if yyhl1407 {
		yyb1407 = yyj1407 > l
	} else {
		yyb1407 = r.CheckBreak()
	}
	if yyb1407 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1408 := &x.Command
		yym1409 := z.DecBinary()
		_ = yym1409
		if false {
		} else {
			z.F.DecSliceStringX(yyv1408, false, d)
		}
	}
	for {
		yyj1407++
		if yyhl1407 {
			yyb1407 = yyj1407 > l
		} else {
			yyb1407 = r.CheckBreak()
		}
		if yyb1407 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1407-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1410 := z.EncBinary()
		_ = yym1410
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1411 := !z.EncBinary()
			yy2arr1411 := z.EncBasicHandle().StructToArray
			var yyq1411 [8]bool
			_, _, _ = yysep1411, yyq1411, yy2arr1411
			const yyr1411 bool = false
			yyq1411[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1411[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1411[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1411[3] = x.InitialDelaySeconds != 0
			yyq1411[4] = x.TimeoutSeconds != 0
			yyq1411[5] = x.PeriodSeconds != 0
			yyq1411[6] = x.SuccessThreshold != 0
			yyq1411[7] = x.FailureThreshold != 0
			var yynn1411 int
			if yyr1411 || yy2arr1411 {
				r.EncodeArrayStart(8)
			} else {
				yynn1411 = 0
				for _, b := range yyq1411 {
					if b {
						yynn1411++
					}
				}
				r.EncodeMapStart(yynn1411)
				yynn1411 = 0
			}
			var yyn1412 bool
			if x.Handler.Exec == nil {
				yyn1412 = true
				goto LABEL1412
			}
		LABEL1412:
			if yyr1411 || yy2arr1411 {
				if yyn1412 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1411[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1411[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1412 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1413 bool
			if x.Handler.HTTPGet == nil {
				yyn1413 = true
				goto LABEL1413
			}
		LABEL1413:
			if yyr1411 || yy2arr1411 {
				if yyn1413 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1411[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1411[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1413 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1414 bool
			if x.Handler.TCPSocket == nil {
				yyn1414 = true
				goto LABEL1414
			}
		LABEL1414:
			if yyr1411 || yy2arr1411 {
				if yyn1414 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1411[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1411[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1414 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1411 || yy2arr1411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1411[3] {
					yym1416 := z.EncBinary()
					_ = yym1416
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1411[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1417 := z.EncBinary()
					_ = yym1417
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1411 || yy2arr1411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1411[4] {
					yym1419 := z.EncBinary()
					_ = yym1419
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1411[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1420 := z.EncBinary()
					_ = yym1420
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1411 || yy2arr1411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1411[5] {
					yym1422 := z.EncBinary()
					_ = yym1422
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1411[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1423 := z.EncBinary()
					_ = yym1423
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1411 || yy2arr1411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1411[6] {
					yym1425 := z.EncBinary()
					_ = yym1425
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1411[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1426 := z.EncBinary()
					_ = yym1426
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1411 || yy2arr1411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1411[7] {
					yym1428 := z.EncBinary()
					_ = yym1428
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1411[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1429 := z.EncBinary()
					_ = yym1429
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1411 || yy2arr1411 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1430 := z.DecBinary()
	_ = yym1430
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1431 := r.ContainerType()
		if yyct1431 == codecSelferValueTypeMap1234 {
			yyl1431 := r.ReadMapStart()
			if yyl1431 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1431, d)
			}
		} else if yyct1431 == codecSelferValueTypeArray1234 {
			yyl1431 := r.ReadArrayStart()
			if yyl1431 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1431, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1432Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1432Slc
	var yyhl1432 bool = l >= 0
	for yyj1432 := 0; ; yyj1432++ {
		if yyhl1432 {
			if yyj1432 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1432Slc = r.DecodeBytes(yys1432Slc, true, true)
		yys1432 := string(yys1432Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1432 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1432)
		} // end switch yys1432
	} // end for yyj1432
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1441 int
	var yyb1441 bool
	var yyhl1441 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1441++
		if yyhl1441 {
			yyb1441 = yyj1441 > l
		} else {
			yyb1441 = r.CheckBreak()
		}
		if yyb1441 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1441-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1450 := z.EncBinary()
	_ = yym1450
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1451 := z.DecBinary()
	_ = yym1451
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x TerminationMessagePolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1452 := z.EncBinary()
	_ = yym1452
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TerminationMessagePolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1453 := z.DecBinary()
	_ = yym1453
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1454 := z.EncBinary()
	_ = yym1454
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1455 := z.DecBinary()
	_ = yym1455
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1456 := z.EncBinary()
		_ = yym1456
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1457 := !z.EncBinary()
			yy2arr1457 := z.EncBasicHandle().StructToArray
			var yyq1457 [2]bool
			_, _, _ = yysep1457, yyq1457, yy2arr1457
			const yyr1457 bool = false
			yyq1457[0] = len(x.Add) != 0
			yyq1457[1] = len(x.Drop) != 0
			var yynn1457 int
			if yyr1457 || yy2arr1457 {
				r.EncodeArrayStart(2)
			} else {
				yynn1457 = 0
				for _, b := range yyq1457 {
					if b {
						yynn1457++
					}
				}
				r.EncodeMapStart(yynn1457)
				yynn1457 = 0
			}
			if yyr1457 || yy2arr1457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1457[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1459 := z.EncBinary()
						_ = yym1459
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1457[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1460 := z.EncBinary()
						_ = yym1460
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1457 || yy2arr1457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1457[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1462 := z.EncBinary()
						_ = yym1462
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1457[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1463 := z.EncBinary()
						_ = yym1463
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1457 || yy2arr1457 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1464 := z.DecBinary()
	_ = yym1464
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1465 := r.ContainerType()
		if yyct1465 == codecSelferValueTypeMap1234 {
			yyl1465 := r.ReadMapStart()
			if yyl1465 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1465, d)
			}
		} else if yyct1465 == codecSelferValueTypeArray1234 {
			yyl1465 := r.ReadArrayStart()
			if yyl1465 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1465, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1466Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1466Slc
	var yyhl1466 bool = l >= 0
	for yyj1466 := 0; ; yyj1466++ {
		if yyhl1466 {
			if yyj1466 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1466Slc = r.DecodeBytes(yys1466Slc, true, true)
		yys1466 := string(yys1466Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1466 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1467 := &x.Add
				yym1468 := z.DecBinary()
				_ = yym1468
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1467), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1469 := &x.Drop
				yym1470 := z.DecBinary()
				_ = yym1470
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1469), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1466)
		} // end switch yys1466
	} // end for yyj1466
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1471 int
	var yyb1471 bool
	var yyhl1471 bool = l >= 0
	yyj1471++
	if yyhl1471 {
		yyb1471 = yyj1471 > l
	} else {
		yyb1471 = r.CheckBreak()
	}
	if yyb1471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1472 := &x.Add
		yym1473 := z.DecBinary()
		_ = yym1473
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1472), d)
		}
	}
	yyj1471++
	if yyhl1471 {
		yyb1471 = yyj1471 > l
	} else {
		yyb1471 = r.CheckBreak()
	}
	if yyb1471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1474 := &x.Drop
		yym1475 := z.DecBinary()
		_ = yym1475
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1474), d)
		}
	}
	for {
		yyj1471++
		if yyhl1471 {
			yyb1471 = yyj1471 > l
		} else {
			yyb1471 = r.CheckBreak()
		}
		if yyb1471 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1471-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1476 := z.EncBinary()
		_ = yym1476
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1477 := !z.EncBinary()
			yy2arr1477 := z.EncBasicHandle().StructToArray
			var yyq1477 [2]bool
			_, _, _ = yysep1477, yyq1477, yy2arr1477
			const yyr1477 bool = false
			yyq1477[0] = len(x.Limits) != 0
			yyq1477[1] = len(x.Requests) != 0
			var yynn1477 int
			if yyr1477 || yy2arr1477 {
				r.EncodeArrayStart(2)
			} else {
				yynn1477 = 0
				for _, b := range yyq1477 {
					if b {
						yynn1477++
					}
				}
				r.EncodeMapStart(yynn1477)
				yynn1477 = 0
			}
			if yyr1477 || yy2arr1477 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1477[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1477[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1477 || yy2arr1477 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1477[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1477[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1477 || yy2arr1477 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1480 := z.DecBinary()
	_ = yym1480
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1481 := r.ContainerType()
		if yyct1481 == codecSelferValueTypeMap1234 {
			yyl1481 := r.ReadMapStart()
			if yyl1481 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1481, d)
			}
		} else if yyct1481 == codecSelferValueTypeArray1234 {
			yyl1481 := r.ReadArrayStart()
			if yyl1481 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1481, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1482Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1482Slc
	var yyhl1482 bool = l >= 0
	for yyj1482 := 0; ; yyj1482++ {
		if yyhl1482 {
			if yyj1482 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1482Slc = r.DecodeBytes(yys1482Slc, true, true)
		yys1482 := string(yys1482Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1482 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1483 := &x.Limits
				yyv1483.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1484 := &x.Requests
				yyv1484.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1482)
		} // end switch yys1482
	} // end for yyj1482
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1485 int
	var yyb1485 bool
	var yyhl1485 bool = l >= 0
	yyj1485++
	if yyhl1485 {
		yyb1485 = yyj1485 > l
	} else {
		yyb1485 = r.CheckBreak()
	}
	if yyb1485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1486 := &x.Limits
		yyv1486.CodecDecodeSelf(d)
	}
	yyj1485++
	if yyhl1485 {
		yyb1485 = yyj1485 > l
	} else {
		yyb1485 = r.CheckBreak()
	}
	if yyb1485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1487 := &x.Requests
		yyv1487.CodecDecodeSelf(d)
	}
	for {
		yyj1485++
		if yyhl1485 {
			yyb1485 = yyj1485 > l
		} else {
			yyb1485 = r.CheckBreak()
		}
		if yyb1485 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1485-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1488 := z.EncBinary()
		_ = yym1488
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1489 := !z.EncBinary()
			yy2arr1489 := z.EncBasicHandle().StructToArray
			var yyq1489 [19]bool
			_, _, _ = yysep1489, yyq1489, yy2arr1489
			const yyr1489 bool = false
			yyq1489[1] = x.Image != ""
			yyq1489[2] = len(x.Command) != 0
			yyq1489[3] = len(x.Args) != 0
			yyq1489[4] = x.WorkingDir != ""
			yyq1489[5] = len(x.Ports) != 0
			yyq1489[6] = len(x.Env) != 0
			yyq1489[7] = true
			yyq1489[8] = len(x.VolumeMounts) != 0
			yyq1489[9] = x.LivenessProbe != nil
			yyq1489[10] = x.ReadinessProbe != nil
			yyq1489[11] = x.Lifecycle != nil
			yyq1489[12] = x.TerminationMessagePath != ""
			yyq1489[13] = x.TerminationMessagePolicy != ""
			yyq1489[14] = x.ImagePullPolicy != ""
			yyq1489[15] = x.SecurityContext != nil
			yyq1489[16] = x.Stdin != false
			yyq1489[17] = x.StdinOnce != false
			yyq1489[18] = x.TTY != false
			var yynn1489 int
			if yyr1489 || yy2arr1489 {
				r.EncodeArrayStart(19)
			} else {
				yynn1489 = 1
				for _, b := range yyq1489 {
					if b {
						yynn1489++
					}
				}
				r.EncodeMapStart(yynn1489)
				yynn1489 = 0
			}
			if yyr1489 || yy2arr1489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1491 := z.EncBinary()
				_ = yym1491
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1492 := z.EncBinary()
				_ = yym1492
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1489 || yy2arr1489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1489[1] {
					yym1494 := z.EncBinary()
					_ = yym1494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1489[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1495 := z.EncBinary()
					_ = yym1495
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1489 || yy2arr1489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1489[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1497 := z.EncBinary()
						_ = yym1497
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1489[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1498 := z.EncBinary()
						_ = yym1498
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1489 || yy2arr1489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1489[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1500 := z.EncBinary()
						_ = yym1500
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1489[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1501 := z.EncBinary()
						_ = yym1501
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1489 || yy2arr1489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1489[4] {
					yym1503 := z.EncBinary()
					_ = yym1503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1489[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1504 := z.EncBinary()
					_ = yym1504
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1489 || yy2arr1489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1489[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1506 := z.EncBinary()
						_ = yym1506
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1489[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1507 := z.EncBinary()
						_ = yym1507
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1489 || yy2arr1489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1489[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1509 := z.EncBinary()
						_ = yym1509
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1489[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1510 := z.EncBinary()
						_ = yym1510
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1489 || yy2arr1489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1489[7] {
					yy1512 := &x.Resources
					yy1512.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1489[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1513 := &x.Resources
					yy1513.CodecEncodeSelf(e)
				}
			}
			if yyr1489 || yy2arr1489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1489[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1515 := z.EncBinary()
						_ = yym1515
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1489[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1516 := z.EncBinary()
						_ = yym1516
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1489 || yy2arr1489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1489[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1489[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1489 || yy2arr1489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1489[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1489[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1489 || yy2arr1489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1489[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1489[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1489 || yy2arr1489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1489[12] {
					yym1521 := z.EncBinary()
					_ = yym1521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1489[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1522 := z.EncBinary()
					_ = yym1522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1489 || yy2arr1489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1489[13] {
					x.TerminationMessagePolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1489[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.TerminationMessagePolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1489 || yy2arr1489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1489[14] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1489[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1489 || yy2arr1489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1489[15] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1489[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1489 || yy2arr1489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1489[16] {
					yym1527 := z.EncBinary()
					_ = yym1527
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1489[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1528 := z.EncBinary()
					_ = yym1528
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1489 || yy2arr1489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1489[17] {
					yym1530 := z.EncBinary()
					_ = yym1530
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1489[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1531 := z.EncBinary()
					_ = yym1531
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1489 || yy2arr1489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1489[18] {
					yym1533 := z.EncBinary()
					_ = yym1533
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1489[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1534 := z.EncBinary()
					_ = yym1534
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1489 || yy2arr1489 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1535 := z.DecBinary()
	_ = yym1535
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1536 := r.ContainerType()
		if yyct1536 == codecSelferValueTypeMap1234 {
			yyl1536 := r.ReadMapStart()
			if yyl1536 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1536, d)
			}
		} else if yyct1536 == codecSelferValueTypeArray1234 {
			yyl1536 := r.ReadArrayStart()
			if yyl1536 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1536, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1537Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1537Slc
	var yyhl1537 bool = l >= 0
	for yyj1537 := 0; ; yyj1537++ {
		if yyhl1537 {
			if yyj1537 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1537Slc = r.DecodeBytes(yys1537Slc, true, true)
		yys1537 := string(yys1537Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1537 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1540 := &x.Command
				yym1541 := z.DecBinary()
				_ = yym1541
				if false {
				} else {
					z.F.DecSliceStringX(yyv1540, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1542 := &x.Args
				yym1543 := z.DecBinary()
				_ = yym1543
				if false {
				} else {
					z.F.DecSliceStringX(yyv1542, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1545 := &x.Ports
				yym1546 := z.DecBinary()
				_ = yym1546
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1545), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1547 := &x.Env
				yym1548 := z.DecBinary()
				_ = yym1548
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1547), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1549 := &x.Resources
				yyv1549.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1550 := &x.VolumeMounts
				yym1551 := z.DecBinary()
				_ = yym1551
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1550), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "terminationMessagePolicy":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePolicy = ""
			} else {
				x.TerminationMessagePolicy = TerminationMessagePolicy(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1537)
		} // end switch yys1537
	} // end for yyj1537
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1562 int
	var yyb1562 bool
	var yyhl1562 bool = l >= 0
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1565 := &x.Command
		yym1566 := z.DecBinary()
		_ = yym1566
		if false {
		} else {
			z.F.DecSliceStringX(yyv1565, false, d)
		}
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1567 := &x.Args
		yym1568 := z.DecBinary()
		_ = yym1568
		if false {
		} else {
			z.F.DecSliceStringX(yyv1567, false, d)
		}
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1570 := &x.Ports
		yym1571 := z.DecBinary()
		_ = yym1571
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1570), d)
		}
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1572 := &x.Env
		yym1573 := z.DecBinary()
		_ = yym1573
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1572), d)
		}
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1574 := &x.Resources
		yyv1574.CodecDecodeSelf(d)
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1575 := &x.VolumeMounts
		yym1576 := z.DecBinary()
		_ = yym1576
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1575), d)
		}
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePolicy = ""
	} else {
		x.TerminationMessagePolicy = TerminationMessagePolicy(r.DecodeString())
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1562++
		if yyhl1562 {
			yyb1562 = yyj1562 > l
		} else {
			yyb1562 = r.CheckBreak()
		}
		if yyb1562 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1562-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1587 := z.EncBinary()
		_ = yym1587
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1588 := !z.EncBinary()
			yy2arr1588 := z.EncBasicHandle().StructToArray
			var yyq1588 [3]bool
			_, _, _ = yysep1588, yyq1588, yy2arr1588
			const yyr1588 bool = false
			yyq1588[0] = x.Exec != nil
			yyq1588[1] = x.HTTPGet != nil
			yyq1588[2] = x.TCPSocket != nil
			var yynn1588 int
			if yyr1588 || yy2arr1588 {
				r.EncodeArrayStart(3)
			} else {
				yynn1588 = 0
				for _, b := range yyq1588 {
					if b {
						yynn1588++
					}
				}
				r.EncodeMapStart(yynn1588)
				yynn1588 = 0
			}
			if yyr1588 || yy2arr1588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1588[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1588[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1588 || yy2arr1588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1588[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1588[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1588 || yy2arr1588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1588[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1588[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1588 || yy2arr1588 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1592 := z.DecBinary()
	_ = yym1592
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1593 := r.ContainerType()
		if yyct1593 == codecSelferValueTypeMap1234 {
			yyl1593 := r.ReadMapStart()
			if yyl1593 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1593, d)
			}
		} else if yyct1593 == codecSelferValueTypeArray1234 {
			yyl1593 := r.ReadArrayStart()
			if yyl1593 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1593, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1594Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1594Slc
	var yyhl1594 bool = l >= 0
	for yyj1594 := 0; ; yyj1594++ {
		if yyhl1594 {
			if yyj1594 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1594Slc = r.DecodeBytes(yys1594Slc, true, true)
		yys1594 := string(yys1594Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1594 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1594)
		} // end switch yys1594
	} // end for yyj1594
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1598 int
	var yyb1598 bool
	var yyhl1598 bool = l >= 0
	yyj1598++
	if yyhl1598 {
		yyb1598 = yyj1598 > l
	} else {
		yyb1598 = r.CheckBreak()
	}
	if yyb1598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1598++
	if yyhl1598 {
		yyb1598 = yyj1598 > l
	} else {
		yyb1598 = r.CheckBreak()
	}
	if yyb1598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1598++
	if yyhl1598 {
		yyb1598 = yyj1598 > l
	} else {
		yyb1598 = r.CheckBreak()
	}
	if yyb1598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1598++
		if yyhl1598 {
			yyb1598 = yyj1598 > l
		} else {
			yyb1598 = r.CheckBreak()
		}
		if yyb1598 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1598-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1602 := z.EncBinary()
		_ = yym1602
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1603 := !z.EncBinary()
			yy2arr1603 := z.EncBasicHandle().StructToArray
			var yyq1603 [2]bool
			_, _, _ = yysep1603, yyq1603, yy2arr1603
			const yyr1603 bool = false
			yyq1603[0] = x.PostStart != nil
			yyq1603[1] = x.PreStop != nil
			var yynn1603 int
			if yyr1603 || yy2arr1603 {
				r.EncodeArrayStart(2)
			} else {
				yynn1603 = 0
				for _, b := range yyq1603 {
					if b {
						yynn1603++
					}
				}
				r.EncodeMapStart(yynn1603)
				yynn1603 = 0
			}
			if yyr1603 || yy2arr1603 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1603[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1603[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1603 || yy2arr1603 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1603[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1603[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1603 || yy2arr1603 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1606 := z.DecBinary()
	_ = yym1606
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1607 := r.ContainerType()
		if yyct1607 == codecSelferValueTypeMap1234 {
			yyl1607 := r.ReadMapStart()
			if yyl1607 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1607, d)
			}
		} else if yyct1607 == codecSelferValueTypeArray1234 {
			yyl1607 := r.ReadArrayStart()
			if yyl1607 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1607, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1608Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1608Slc
	var yyhl1608 bool = l >= 0
	for yyj1608 := 0; ; yyj1608++ {
		if yyhl1608 {
			if yyj1608 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1608Slc = r.DecodeBytes(yys1608Slc, true, true)
		yys1608 := string(yys1608Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1608 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1608)
		} // end switch yys1608
	} // end for yyj1608
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1611 int
	var yyb1611 bool
	var yyhl1611 bool = l >= 0
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1611++
		if yyhl1611 {
			yyb1611 = yyj1611 > l
		} else {
			yyb1611 = r.CheckBreak()
		}
		if yyb1611 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1611-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1614 := z.EncBinary()
	_ = yym1614
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1615 := z.DecBinary()
	_ = yym1615
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1616 := z.EncBinary()
		_ = yym1616
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1617 := !z.EncBinary()
			yy2arr1617 := z.EncBasicHandle().StructToArray
			var yyq1617 [2]bool
			_, _, _ = yysep1617, yyq1617, yy2arr1617
			const yyr1617 bool = false
			yyq1617[0] = x.Reason != ""
			yyq1617[1] = x.Message != ""
			var yynn1617 int
			if yyr1617 || yy2arr1617 {
				r.EncodeArrayStart(2)
			} else {
				yynn1617 = 0
				for _, b := range yyq1617 {
					if b {
						yynn1617++
					}
				}
				r.EncodeMapStart(yynn1617)
				yynn1617 = 0
			}
			if yyr1617 || yy2arr1617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1617[0] {
					yym1619 := z.EncBinary()
					_ = yym1619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1617[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1620 := z.EncBinary()
					_ = yym1620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1617 || yy2arr1617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1617[1] {
					yym1622 := z.EncBinary()
					_ = yym1622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1617[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1623 := z.EncBinary()
					_ = yym1623
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1617 || yy2arr1617 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1624 := z.DecBinary()
	_ = yym1624
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1625 := r.ContainerType()
		if yyct1625 == codecSelferValueTypeMap1234 {
			yyl1625 := r.ReadMapStart()
			if yyl1625 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1625, d)
			}
		} else if yyct1625 == codecSelferValueTypeArray1234 {
			yyl1625 := r.ReadArrayStart()
			if yyl1625 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1625, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1626Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1626Slc
	var yyhl1626 bool = l >= 0
	for yyj1626 := 0; ; yyj1626++ {
		if yyhl1626 {
			if yyj1626 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1626Slc = r.DecodeBytes(yys1626Slc, true, true)
		yys1626 := string(yys1626Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1626 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1626)
		} // end switch yys1626
	} // end for yyj1626
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1629 int
	var yyb1629 bool
	var yyhl1629 bool = l >= 0
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1629++
		if yyhl1629 {
			yyb1629 = yyj1629 > l
		} else {
			yyb1629 = r.CheckBreak()
		}
		if yyb1629 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1629-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1632 := z.EncBinary()
		_ = yym1632
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1633 := !z.EncBinary()
			yy2arr1633 := z.EncBasicHandle().StructToArray
			var yyq1633 [1]bool
			_, _, _ = yysep1633, yyq1633, yy2arr1633
			const yyr1633 bool = false
			yyq1633[0] = true
			var yynn1633 int
			if yyr1633 || yy2arr1633 {
				r.EncodeArrayStart(1)
			} else {
				yynn1633 = 0
				for _, b := range yyq1633 {
					if b {
						yynn1633++
					}
				}
				r.EncodeMapStart(yynn1633)
				yynn1633 = 0
			}
			if yyr1633 || yy2arr1633 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1633[0] {
					yy1635 := &x.StartedAt
					yym1636 := z.EncBinary()
					_ = yym1636
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1635) {
					} else if yym1636 {
						z.EncBinaryMarshal(yy1635)
					} else if !yym1636 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1635)
					} else {
						z.EncFallback(yy1635)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1633[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1637 := &x.StartedAt
					yym1638 := z.EncBinary()
					_ = yym1638
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1637) {
					} else if yym1638 {
						z.EncBinaryMarshal(yy1637)
					} else if !yym1638 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1637)
					} else {
						z.EncFallback(yy1637)
					}
				}
			}
			if yyr1633 || yy2arr1633 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1639 := z.DecBinary()
	_ = yym1639
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1640 := r.ContainerType()
		if yyct1640 == codecSelferValueTypeMap1234 {
			yyl1640 := r.ReadMapStart()
			if yyl1640 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1640, d)
			}
		} else if yyct1640 == codecSelferValueTypeArray1234 {
			yyl1640 := r.ReadArrayStart()
			if yyl1640 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1640, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1641Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1641Slc
	var yyhl1641 bool = l >= 0
	for yyj1641 := 0; ; yyj1641++ {
		if yyhl1641 {
			if yyj1641 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1641Slc = r.DecodeBytes(yys1641Slc, true, true)
		yys1641 := string(yys1641Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1641 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_v1.Time{}
			} else {
				yyv1642 := &x.StartedAt
				yym1643 := z.DecBinary()
				_ = yym1643
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1642) {
				} else if yym1643 {
					z.DecBinaryUnmarshal(yyv1642)
				} else if !yym1643 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1642)
				} else {
					z.DecFallback(yyv1642, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1641)
		} // end switch yys1641
	} // end for yyj1641
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1644 int
	var yyb1644 bool
	var yyhl1644 bool = l >= 0
	yyj1644++
	if yyhl1644 {
		yyb1644 = yyj1644 > l
	} else {
		yyb1644 = r.CheckBreak()
	}
	if yyb1644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_v1.Time{}
	} else {
		yyv1645 := &x.StartedAt
		yym1646 := z.DecBinary()
		_ = yym1646
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1645) {
		} else if yym1646 {
			z.DecBinaryUnmarshal(yyv1645)
		} else if !yym1646 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1645)
		} else {
			z.DecFallback(yyv1645, false)
		}
	}
	for {
		yyj1644++
		if yyhl1644 {
			yyb1644 = yyj1644 > l
		} else {
			yyb1644 = r.CheckBreak()
		}
		if yyb1644 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1644-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1647 := z.EncBinary()
		_ = yym1647
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1648 := !z.EncBinary()
			yy2arr1648 := z.EncBasicHandle().StructToArray
			var yyq1648 [7]bool
			_, _, _ = yysep1648, yyq1648, yy2arr1648
			const yyr1648 bool = false
			yyq1648[1] = x.Signal != 0
			yyq1648[2] = x.Reason != ""
			yyq1648[3] = x.Message != ""
			yyq1648[4] = true
			yyq1648[5] = true
			yyq1648[6] = x.ContainerID != ""
			var yynn1648 int
			if yyr1648 || yy2arr1648 {
				r.EncodeArrayStart(7)
			} else {
				yynn1648 = 1
				for _, b := range yyq1648 {
					if b {
						yynn1648++
					}
				}
				r.EncodeMapStart(yynn1648)
				yynn1648 = 0
			}
			if yyr1648 || yy2arr1648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1650 := z.EncBinary()
				_ = yym1650
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1651 := z.EncBinary()
				_ = yym1651
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1648 || yy2arr1648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1648[1] {
					yym1653 := z.EncBinary()
					_ = yym1653
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1648[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1654 := z.EncBinary()
					_ = yym1654
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1648 || yy2arr1648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1648[2] {
					yym1656 := z.EncBinary()
					_ = yym1656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1648[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1657 := z.EncBinary()
					_ = yym1657
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1648 || yy2arr1648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1648[3] {
					yym1659 := z.EncBinary()
					_ = yym1659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1648[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1660 := z.EncBinary()
					_ = yym1660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1648 || yy2arr1648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1648[4] {
					yy1662 := &x.StartedAt
					yym1663 := z.EncBinary()
					_ = yym1663
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1662) {
					} else if yym1663 {
						z.EncBinaryMarshal(yy1662)
					} else if !yym1663 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1662)
					} else {
						z.EncFallback(yy1662)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1648[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1664 := &x.StartedAt
					yym1665 := z.EncBinary()
					_ = yym1665
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1664) {
					} else if yym1665 {
						z.EncBinaryMarshal(yy1664)
					} else if !yym1665 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1664)
					} else {
						z.EncFallback(yy1664)
					}
				}
			}
			if yyr1648 || yy2arr1648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1648[5] {
					yy1667 := &x.FinishedAt
					yym1668 := z.EncBinary()
					_ = yym1668
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1667) {
					} else if yym1668 {
						z.EncBinaryMarshal(yy1667)
					} else if !yym1668 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1667)
					} else {
						z.EncFallback(yy1667)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1648[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1669 := &x.FinishedAt
					yym1670 := z.EncBinary()
					_ = yym1670
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1669) {
					} else if yym1670 {
						z.EncBinaryMarshal(yy1669)
					} else if !yym1670 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1669)
					} else {
						z.EncFallback(yy1669)
					}
				}
			}
			if yyr1648 || yy2arr1648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1648[6] {
					yym1672 := z.EncBinary()
					_ = yym1672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1648[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1673 := z.EncBinary()
					_ = yym1673
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1648 || yy2arr1648 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1674 := z.DecBinary()
	_ = yym1674
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1675 := r.ContainerType()
		if yyct1675 == codecSelferValueTypeMap1234 {
			yyl1675 := r.ReadMapStart()
			if yyl1675 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1675, d)
			}
		} else if yyct1675 == codecSelferValueTypeArray1234 {
			yyl1675 := r.ReadArrayStart()
			if yyl1675 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1675, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1676Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1676Slc
	var yyhl1676 bool = l >= 0
	for yyj1676 := 0; ; yyj1676++ {
		if yyhl1676 {
			if yyj1676 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1676Slc = r.DecodeBytes(yys1676Slc, true, true)
		yys1676 := string(yys1676Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1676 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_v1.Time{}
			} else {
				yyv1681 := &x.StartedAt
				yym1682 := z.DecBinary()
				_ = yym1682
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1681) {
				} else if yym1682 {
					z.DecBinaryUnmarshal(yyv1681)
				} else if !yym1682 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1681)
				} else {
					z.DecFallback(yyv1681, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_v1.Time{}
			} else {
				yyv1683 := &x.FinishedAt
				yym1684 := z.DecBinary()
				_ = yym1684
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1683) {
				} else if yym1684 {
					z.DecBinaryUnmarshal(yyv1683)
				} else if !yym1684 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1683)
				} else {
					z.DecFallback(yyv1683, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1676)
		} // end switch yys1676
	} // end for yyj1676
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1686 int
	var yyb1686 bool
	var yyhl1686 bool = l >= 0
	yyj1686++
	if yyhl1686 {
		yyb1686 = yyj1686 > l
	} else {
		yyb1686 = r.CheckBreak()
	}
	if yyb1686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1686++
	if yyhl1686 {
		yyb1686 = yyj1686 > l
	} else {
		yyb1686 = r.CheckBreak()
	}
	if yyb1686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1686++
	if yyhl1686 {
		yyb1686 = yyj1686 > l
	} else {
		yyb1686 = r.CheckBreak()
	}
	if yyb1686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1686++
	if yyhl1686 {
		yyb1686 = yyj1686 > l
	} else {
		yyb1686 = r.CheckBreak()
	}
	if yyb1686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1686++
	if yyhl1686 {
		yyb1686 = yyj1686 > l
	} else {
		yyb1686 = r.CheckBreak()
	}
	if yyb1686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_v1.Time{}
	} else {
		yyv1691 := &x.StartedAt
		yym1692 := z.DecBinary()
		_ = yym1692
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1691) {
		} else if yym1692 {
			z.DecBinaryUnmarshal(yyv1691)
		} else if !yym1692 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1691)
		} else {
			z.DecFallback(yyv1691, false)
		}
	}
	yyj1686++
	if yyhl1686 {
		yyb1686 = yyj1686 > l
	} else {
		yyb1686 = r.CheckBreak()
	}
	if yyb1686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_v1.Time{}
	} else {
		yyv1693 := &x.FinishedAt
		yym1694 := z.DecBinary()
		_ = yym1694
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1693) {
		} else if yym1694 {
			z.DecBinaryUnmarshal(yyv1693)
		} else if !yym1694 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1693)
		} else {
			z.DecFallback(yyv1693, false)
		}
	}
	yyj1686++
	if yyhl1686 {
		yyb1686 = yyj1686 > l
	} else {
		yyb1686 = r.CheckBreak()
	}
	if yyb1686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1686++
		if yyhl1686 {
			yyb1686 = yyj1686 > l
		} else {
			yyb1686 = r.CheckBreak()
		}
		if yyb1686 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1686-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1696 := z.EncBinary()
		_ = yym1696
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1697 := !z.EncBinary()
			yy2arr1697 := z.EncBasicHandle().StructToArray
			var yyq1697 [3]bool
			_, _, _ = yysep1697, yyq1697, yy2arr1697
			const yyr1697 bool = false
			yyq1697[0] = x.Waiting != nil
			yyq1697[1] = x.Running != nil
			yyq1697[2] = x.Terminated != nil
			var yynn1697 int
			if yyr1697 || yy2arr1697 {
				r.EncodeArrayStart(3)
			} else {
				yynn1697 = 0
				for _, b := range yyq1697 {
					if b {
						yynn1697++
					}
				}
				r.EncodeMapStart(yynn1697)
				yynn1697 = 0
			}
			if yyr1697 || yy2arr1697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1697[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1697[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1697 || yy2arr1697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1697[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1697[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1697 || yy2arr1697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1697[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1697[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1697 || yy2arr1697 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1701 := z.DecBinary()
	_ = yym1701
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1702 := r.ContainerType()
		if yyct1702 == codecSelferValueTypeMap1234 {
			yyl1702 := r.ReadMapStart()
			if yyl1702 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1702, d)
			}
		} else if yyct1702 == codecSelferValueTypeArray1234 {
			yyl1702 := r.ReadArrayStart()
			if yyl1702 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1702, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1703Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1703Slc
	var yyhl1703 bool = l >= 0
	for yyj1703 := 0; ; yyj1703++ {
		if yyhl1703 {
			if yyj1703 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1703Slc = r.DecodeBytes(yys1703Slc, true, true)
		yys1703 := string(yys1703Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1703 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1703)
		} // end switch yys1703
	} // end for yyj1703
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1707 int
	var yyb1707 bool
	var yyhl1707 bool = l >= 0
	yyj1707++
	if yyhl1707 {
		yyb1707 = yyj1707 > l
	} else {
		yyb1707 = r.CheckBreak()
	}
	if yyb1707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1707++
	if yyhl1707 {
		yyb1707 = yyj1707 > l
	} else {
		yyb1707 = r.CheckBreak()
	}
	if yyb1707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1707++
	if yyhl1707 {
		yyb1707 = yyj1707 > l
	} else {
		yyb1707 = r.CheckBreak()
	}
	if yyb1707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1707++
		if yyhl1707 {
			yyb1707 = yyj1707 > l
		} else {
			yyb1707 = r.CheckBreak()
		}
		if yyb1707 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1707-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1711 := z.EncBinary()
		_ = yym1711
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1712 := !z.EncBinary()
			yy2arr1712 := z.EncBasicHandle().StructToArray
			var yyq1712 [8]bool
			_, _, _ = yysep1712, yyq1712, yy2arr1712
			const yyr1712 bool = false
			yyq1712[1] = true
			yyq1712[2] = true
			yyq1712[7] = x.ContainerID != ""
			var yynn1712 int
			if yyr1712 || yy2arr1712 {
				r.EncodeArrayStart(8)
			} else {
				yynn1712 = 5
				for _, b := range yyq1712 {
					if b {
						yynn1712++
					}
				}
				r.EncodeMapStart(yynn1712)
				yynn1712 = 0
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1714 := z.EncBinary()
				_ = yym1714
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1715 := z.EncBinary()
				_ = yym1715
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1712[1] {
					yy1717 := &x.State
					yy1717.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1712[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1718 := &x.State
					yy1718.CodecEncodeSelf(e)
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1712[2] {
					yy1720 := &x.LastTerminationState
					yy1720.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1712[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1721 := &x.LastTerminationState
					yy1721.CodecEncodeSelf(e)
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1723 := z.EncBinary()
				_ = yym1723
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1724 := z.EncBinary()
				_ = yym1724
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1726 := z.EncBinary()
				_ = yym1726
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1727 := z.EncBinary()
				_ = yym1727
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1729 := z.EncBinary()
				_ = yym1729
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1730 := z.EncBinary()
				_ = yym1730
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1732 := z.EncBinary()
				_ = yym1732
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1733 := z.EncBinary()
				_ = yym1733
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1712[7] {
					yym1735 := z.EncBinary()
					_ = yym1735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1712[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1736 := z.EncBinary()
					_ = yym1736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1712 || yy2arr1712 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1737 := z.DecBinary()
	_ = yym1737
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1738 := r.ContainerType()
		if yyct1738 == codecSelferValueTypeMap1234 {
			yyl1738 := r.ReadMapStart()
			if yyl1738 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1738, d)
			}
		} else if yyct1738 == codecSelferValueTypeArray1234 {
			yyl1738 := r.ReadArrayStart()
			if yyl1738 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1738, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1739Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1739Slc
	var yyhl1739 bool = l >= 0
	for yyj1739 := 0; ; yyj1739++ {
		if yyhl1739 {
			if yyj1739 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1739Slc = r.DecodeBytes(yys1739Slc, true, true)
		yys1739 := string(yys1739Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1739 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1741 := &x.State
				yyv1741.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1742 := &x.LastTerminationState
				yyv1742.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1739)
		} // end switch yys1739
	} // end for yyj1739
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1748 int
	var yyb1748 bool
	var yyhl1748 bool = l >= 0
	yyj1748++
	if yyhl1748 {
		yyb1748 = yyj1748 > l
	} else {
		yyb1748 = r.CheckBreak()
	}
	if yyb1748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1748++
	if yyhl1748 {
		yyb1748 = yyj1748 > l
	} else {
		yyb1748 = r.CheckBreak()
	}
	if yyb1748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1750 := &x.State
		yyv1750.CodecDecodeSelf(d)
	}
	yyj1748++
	if yyhl1748 {
		yyb1748 = yyj1748 > l
	} else {
		yyb1748 = r.CheckBreak()
	}
	if yyb1748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1751 := &x.LastTerminationState
		yyv1751.CodecDecodeSelf(d)
	}
	yyj1748++
	if yyhl1748 {
		yyb1748 = yyj1748 > l
	} else {
		yyb1748 = r.CheckBreak()
	}
	if yyb1748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1748++
	if yyhl1748 {
		yyb1748 = yyj1748 > l
	} else {
		yyb1748 = r.CheckBreak()
	}
	if yyb1748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1748++
	if yyhl1748 {
		yyb1748 = yyj1748 > l
	} else {
		yyb1748 = r.CheckBreak()
	}
	if yyb1748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1748++
	if yyhl1748 {
		yyb1748 = yyj1748 > l
	} else {
		yyb1748 = r.CheckBreak()
	}
	if yyb1748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1748++
	if yyhl1748 {
		yyb1748 = yyj1748 > l
	} else {
		yyb1748 = r.CheckBreak()
	}
	if yyb1748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1748++
		if yyhl1748 {
			yyb1748 = yyj1748 > l
		} else {
			yyb1748 = r.CheckBreak()
		}
		if yyb1748 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1748-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1757 := z.EncBinary()
	_ = yym1757
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1758 := z.DecBinary()
	_ = yym1758
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1759 := z.EncBinary()
	_ = yym1759
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1760 := z.DecBinary()
	_ = yym1760
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1761 := z.EncBinary()
		_ = yym1761
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1762 := !z.EncBinary()
			yy2arr1762 := z.EncBasicHandle().StructToArray
			var yyq1762 [6]bool
			_, _, _ = yysep1762, yyq1762, yy2arr1762
			const yyr1762 bool = false
			yyq1762[2] = true
			yyq1762[3] = true
			yyq1762[4] = x.Reason != ""
			yyq1762[5] = x.Message != ""
			var yynn1762 int
			if yyr1762 || yy2arr1762 {
				r.EncodeArrayStart(6)
			} else {
				yynn1762 = 2
				for _, b := range yyq1762 {
					if b {
						yynn1762++
					}
				}
				r.EncodeMapStart(yynn1762)
				yynn1762 = 0
			}
			if yyr1762 || yy2arr1762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1762 || yy2arr1762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1762 || yy2arr1762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1762[2] {
					yy1766 := &x.LastProbeTime
					yym1767 := z.EncBinary()
					_ = yym1767
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1766) {
					} else if yym1767 {
						z.EncBinaryMarshal(yy1766)
					} else if !yym1767 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1766)
					} else {
						z.EncFallback(yy1766)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1762[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1768 := &x.LastProbeTime
					yym1769 := z.EncBinary()
					_ = yym1769
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1768) {
					} else if yym1769 {
						z.EncBinaryMarshal(yy1768)
					} else if !yym1769 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1768)
					} else {
						z.EncFallback(yy1768)
					}
				}
			}
			if yyr1762 || yy2arr1762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1762[3] {
					yy1771 := &x.LastTransitionTime
					yym1772 := z.EncBinary()
					_ = yym1772
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1771) {
					} else if yym1772 {
						z.EncBinaryMarshal(yy1771)
					} else if !yym1772 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1771)
					} else {
						z.EncFallback(yy1771)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1762[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1773 := &x.LastTransitionTime
					yym1774 := z.EncBinary()
					_ = yym1774
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1773) {
					} else if yym1774 {
						z.EncBinaryMarshal(yy1773)
					} else if !yym1774 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1773)
					} else {
						z.EncFallback(yy1773)
					}
				}
			}
			if yyr1762 || yy2arr1762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1762[4] {
					yym1776 := z.EncBinary()
					_ = yym1776
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1762[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1777 := z.EncBinary()
					_ = yym1777
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1762 || yy2arr1762 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1762[5] {
					yym1779 := z.EncBinary()
					_ = yym1779
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1762[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1780 := z.EncBinary()
					_ = yym1780
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1762 || yy2arr1762 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1781 := z.DecBinary()
	_ = yym1781
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1782 := r.ContainerType()
		if yyct1782 == codecSelferValueTypeMap1234 {
			yyl1782 := r.ReadMapStart()
			if yyl1782 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1782, d)
			}
		} else if yyct1782 == codecSelferValueTypeArray1234 {
			yyl1782 := r.ReadArrayStart()
			if yyl1782 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1782, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1783Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1783Slc
	var yyhl1783 bool = l >= 0
	for yyj1783 := 0; ; yyj1783++ {
		if yyhl1783 {
			if yyj1783 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1783Slc = r.DecodeBytes(yys1783Slc, true, true)
		yys1783 := string(yys1783Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1783 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_v1.Time{}
			} else {
				yyv1786 := &x.LastProbeTime
				yym1787 := z.DecBinary()
				_ = yym1787
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1786) {
				} else if yym1787 {
					z.DecBinaryUnmarshal(yyv1786)
				} else if !yym1787 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1786)
				} else {
					z.DecFallback(yyv1786, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_v1.Time{}
			} else {
				yyv1788 := &x.LastTransitionTime
				yym1789 := z.DecBinary()
				_ = yym1789
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1788) {
				} else if yym1789 {
					z.DecBinaryUnmarshal(yyv1788)
				} else if !yym1789 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1788)
				} else {
					z.DecFallback(yyv1788, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1783)
		} // end switch yys1783
	} // end for yyj1783
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1792 int
	var yyb1792 bool
	var yyhl1792 bool = l >= 0
	yyj1792++
	if yyhl1792 {
		yyb1792 = yyj1792 > l
	} else {
		yyb1792 = r.CheckBreak()
	}
	if yyb1792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1792++
	if yyhl1792 {
		yyb1792 = yyj1792 > l
	} else {
		yyb1792 = r.CheckBreak()
	}
	if yyb1792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1792++
	if yyhl1792 {
		yyb1792 = yyj1792 > l
	} else {
		yyb1792 = r.CheckBreak()
	}
	if yyb1792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_v1.Time{}
	} else {
		yyv1795 := &x.LastProbeTime
		yym1796 := z.DecBinary()
		_ = yym1796
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1795) {
		} else if yym1796 {
			z.DecBinaryUnmarshal(yyv1795)
		} else if !yym1796 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1795)
		} else {
			z.DecFallback(yyv1795, false)
		}
	}
	yyj1792++
	if yyhl1792 {
		yyb1792 = yyj1792 > l
	} else {
		yyb1792 = r.CheckBreak()
	}
	if yyb1792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_v1.Time{}
	} else {
		yyv1797 := &x.LastTransitionTime
		yym1798 := z.DecBinary()
		_ = yym1798
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1797) {
		} else if yym1798 {
			z.DecBinaryUnmarshal(yyv1797)
		} else if !yym1798 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1797)
		} else {
			z.DecFallback(yyv1797, false)
		}
	}
	yyj1792++
	if yyhl1792 {
		yyb1792 = yyj1792 > l
	} else {
		yyb1792 = r.CheckBreak()
	}
	if yyb1792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1792++
	if yyhl1792 {
		yyb1792 = yyj1792 > l
	} else {
		yyb1792 = r.CheckBreak()
	}
	if yyb1792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1792++
		if yyhl1792 {
			yyb1792 = yyj1792 > l
		} else {
			yyb1792 = r.CheckBreak()
		}
		if yyb1792 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1792-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1801 := z.EncBinary()
	_ = yym1801
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1802 := z.DecBinary()
	_ = yym1802
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1803 := z.EncBinary()
	_ = yym1803
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1804 := z.DecBinary()
	_ = yym1804
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1805 := z.EncBinary()
		_ = yym1805
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1806 := !z.EncBinary()
			yy2arr1806 := z.EncBasicHandle().StructToArray
			var yyq1806 [1]bool
			_, _, _ = yysep1806, yyq1806, yy2arr1806
			const yyr1806 bool = false
			var yynn1806 int
			if yyr1806 || yy2arr1806 {
				r.EncodeArrayStart(1)
			} else {
				yynn1806 = 1
				for _, b := range yyq1806 {
					if b {
						yynn1806++
					}
				}
				r.EncodeMapStart(yynn1806)
				yynn1806 = 0
			}
			if yyr1806 || yy2arr1806 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1808 := z.EncBinary()
					_ = yym1808
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1809 := z.EncBinary()
					_ = yym1809
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1806 || yy2arr1806 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1810 := z.DecBinary()
	_ = yym1810
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1811 := r.ContainerType()
		if yyct1811 == codecSelferValueTypeMap1234 {
			yyl1811 := r.ReadMapStart()
			if yyl1811 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1811, d)
			}
		} else if yyct1811 == codecSelferValueTypeArray1234 {
			yyl1811 := r.ReadArrayStart()
			if yyl1811 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1811, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1812Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1812Slc
	var yyhl1812 bool = l >= 0
	for yyj1812 := 0; ; yyj1812++ {
		if yyhl1812 {
			if yyj1812 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1812Slc = r.DecodeBytes(yys1812Slc, true, true)
		yys1812 := string(yys1812Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1812 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1813 := &x.NodeSelectorTerms
				yym1814 := z.DecBinary()
				_ = yym1814
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1813), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1812)
		} // end switch yys1812
	} // end for yyj1812
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1815 int
	var yyb1815 bool
	var yyhl1815 bool = l >= 0
	yyj1815++
	if yyhl1815 {
		yyb1815 = yyj1815 > l
	} else {
		yyb1815 = r.CheckBreak()
	}
	if yyb1815 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1816 := &x.NodeSelectorTerms
		yym1817 := z.DecBinary()
		_ = yym1817
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1816), d)
		}
	}
	for {
		yyj1815++
		if yyhl1815 {
			yyb1815 = yyj1815 > l
		} else {
			yyb1815 = r.CheckBreak()
		}
		if yyb1815 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1815-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1818 := z.EncBinary()
		_ = yym1818
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1819 := !z.EncBinary()
			yy2arr1819 := z.EncBasicHandle().StructToArray
			var yyq1819 [1]bool
			_, _, _ = yysep1819, yyq1819, yy2arr1819
			const yyr1819 bool = false
			var yynn1819 int
			if yyr1819 || yy2arr1819 {
				r.EncodeArrayStart(1)
			} else {
				yynn1819 = 1
				for _, b := range yyq1819 {
					if b {
						yynn1819++
					}
				}
				r.EncodeMapStart(yynn1819)
				yynn1819 = 0
			}
			if yyr1819 || yy2arr1819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1821 := z.EncBinary()
					_ = yym1821
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1822 := z.EncBinary()
					_ = yym1822
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1819 || yy2arr1819 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1823 := z.DecBinary()
	_ = yym1823
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1824 := r.ContainerType()
		if yyct1824 == codecSelferValueTypeMap1234 {
			yyl1824 := r.ReadMapStart()
			if yyl1824 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1824, d)
			}
		} else if yyct1824 == codecSelferValueTypeArray1234 {
			yyl1824 := r.ReadArrayStart()
			if yyl1824 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1824, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1825Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1825Slc
	var yyhl1825 bool = l >= 0
	for yyj1825 := 0; ; yyj1825++ {
		if yyhl1825 {
			if yyj1825 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1825Slc = r.DecodeBytes(yys1825Slc, true, true)
		yys1825 := string(yys1825Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1825 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1826 := &x.MatchExpressions
				yym1827 := z.DecBinary()
				_ = yym1827
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1826), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1825)
		} // end switch yys1825
	} // end for yyj1825
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1828 int
	var yyb1828 bool
	var yyhl1828 bool = l >= 0
	yyj1828++
	if yyhl1828 {
		yyb1828 = yyj1828 > l
	} else {
		yyb1828 = r.CheckBreak()
	}
	if yyb1828 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1829 := &x.MatchExpressions
		yym1830 := z.DecBinary()
		_ = yym1830
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1829), d)
		}
	}
	for {
		yyj1828++
		if yyhl1828 {
			yyb1828 = yyj1828 > l
		} else {
			yyb1828 = r.CheckBreak()
		}
		if yyb1828 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1828-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1831 := z.EncBinary()
		_ = yym1831
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1832 := !z.EncBinary()
			yy2arr1832 := z.EncBasicHandle().StructToArray
			var yyq1832 [3]bool
			_, _, _ = yysep1832, yyq1832, yy2arr1832
			const yyr1832 bool = false
			yyq1832[2] = len(x.Values) != 0
			var yynn1832 int
			if yyr1832 || yy2arr1832 {
				r.EncodeArrayStart(3)
			} else {
				yynn1832 = 2
				for _, b := range yyq1832 {
					if b {
						yynn1832++
					}
				}
				r.EncodeMapStart(yynn1832)
				yynn1832 = 0
			}
			if yyr1832 || yy2arr1832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1834 := z.EncBinary()
				_ = yym1834
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1835 := z.EncBinary()
				_ = yym1835
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1832 || yy2arr1832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1832 || yy2arr1832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1832[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1838 := z.EncBinary()
						_ = yym1838
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1832[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1839 := z.EncBinary()
						_ = yym1839
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1832 || yy2arr1832 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1840 := z.DecBinary()
	_ = yym1840
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1841 := r.ContainerType()
		if yyct1841 == codecSelferValueTypeMap1234 {
			yyl1841 := r.ReadMapStart()
			if yyl1841 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1841, d)
			}
		} else if yyct1841 == codecSelferValueTypeArray1234 {
			yyl1841 := r.ReadArrayStart()
			if yyl1841 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1841, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1842Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1842Slc
	var yyhl1842 bool = l >= 0
	for yyj1842 := 0; ; yyj1842++ {
		if yyhl1842 {
			if yyj1842 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1842Slc = r.DecodeBytes(yys1842Slc, true, true)
		yys1842 := string(yys1842Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1842 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1845 := &x.Values
				yym1846 := z.DecBinary()
				_ = yym1846
				if false {
				} else {
					z.F.DecSliceStringX(yyv1845, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1842)
		} // end switch yys1842
	} // end for yyj1842
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1847 int
	var yyb1847 bool
	var yyhl1847 bool = l >= 0
	yyj1847++
	if yyhl1847 {
		yyb1847 = yyj1847 > l
	} else {
		yyb1847 = r.CheckBreak()
	}
	if yyb1847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1847++
	if yyhl1847 {
		yyb1847 = yyj1847 > l
	} else {
		yyb1847 = r.CheckBreak()
	}
	if yyb1847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1847++
	if yyhl1847 {
		yyb1847 = yyj1847 > l
	} else {
		yyb1847 = r.CheckBreak()
	}
	if yyb1847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1850 := &x.Values
		yym1851 := z.DecBinary()
		_ = yym1851
		if false {
		} else {
			z.F.DecSliceStringX(yyv1850, false, d)
		}
	}
	for {
		yyj1847++
		if yyhl1847 {
			yyb1847 = yyj1847 > l
		} else {
			yyb1847 = r.CheckBreak()
		}
		if yyb1847 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1847-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1852 := z.EncBinary()
	_ = yym1852
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1853 := z.DecBinary()
	_ = yym1853
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1854 := z.EncBinary()
		_ = yym1854
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1855 := !z.EncBinary()
			yy2arr1855 := z.EncBasicHandle().StructToArray
			var yyq1855 [3]bool
			_, _, _ = yysep1855, yyq1855, yy2arr1855
			const yyr1855 bool = false
			yyq1855[0] = x.NodeAffinity != nil
			yyq1855[1] = x.PodAffinity != nil
			yyq1855[2] = x.PodAntiAffinity != nil
			var yynn1855 int
			if yyr1855 || yy2arr1855 {
				r.EncodeArrayStart(3)
			} else {
				yynn1855 = 0
				for _, b := range yyq1855 {
					if b {
						yynn1855++
					}
				}
				r.EncodeMapStart(yynn1855)
				yynn1855 = 0
			}
			if yyr1855 || yy2arr1855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1855[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1855[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1855 || yy2arr1855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1855[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1855[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1855 || yy2arr1855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1855[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1855[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1855 || yy2arr1855 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1859 := z.DecBinary()
	_ = yym1859
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1860 := r.ContainerType()
		if yyct1860 == codecSelferValueTypeMap1234 {
			yyl1860 := r.ReadMapStart()
			if yyl1860 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1860, d)
			}
		} else if yyct1860 == codecSelferValueTypeArray1234 {
			yyl1860 := r.ReadArrayStart()
			if yyl1860 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1860, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1861Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1861Slc
	var yyhl1861 bool = l >= 0
	for yyj1861 := 0; ; yyj1861++ {
		if yyhl1861 {
			if yyj1861 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1861Slc = r.DecodeBytes(yys1861Slc, true, true)
		yys1861 := string(yys1861Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1861 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1861)
		} // end switch yys1861
	} // end for yyj1861
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1865 int
	var yyb1865 bool
	var yyhl1865 bool = l >= 0
	yyj1865++
	if yyhl1865 {
		yyb1865 = yyj1865 > l
	} else {
		yyb1865 = r.CheckBreak()
	}
	if yyb1865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1865++
	if yyhl1865 {
		yyb1865 = yyj1865 > l
	} else {
		yyb1865 = r.CheckBreak()
	}
	if yyb1865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1865++
	if yyhl1865 {
		yyb1865 = yyj1865 > l
	} else {
		yyb1865 = r.CheckBreak()
	}
	if yyb1865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1865++
		if yyhl1865 {
			yyb1865 = yyj1865 > l
		} else {
			yyb1865 = r.CheckBreak()
		}
		if yyb1865 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1865-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1869 := z.EncBinary()
		_ = yym1869
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1870 := !z.EncBinary()
			yy2arr1870 := z.EncBasicHandle().StructToArray
			var yyq1870 [2]bool
			_, _, _ = yysep1870, yyq1870, yy2arr1870
			const yyr1870 bool = false
			yyq1870[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1870[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1870 int
			if yyr1870 || yy2arr1870 {
				r.EncodeArrayStart(2)
			} else {
				yynn1870 = 0
				for _, b := range yyq1870 {
					if b {
						yynn1870++
					}
				}
				r.EncodeMapStart(yynn1870)
				yynn1870 = 0
			}
			if yyr1870 || yy2arr1870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1870[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1872 := z.EncBinary()
						_ = yym1872
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1870[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1873 := z.EncBinary()
						_ = yym1873
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1870 || yy2arr1870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1870[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1875 := z.EncBinary()
						_ = yym1875
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1870[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1876 := z.EncBinary()
						_ = yym1876
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1870 || yy2arr1870 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1877 := z.DecBinary()
	_ = yym1877
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1878 := r.ContainerType()
		if yyct1878 == codecSelferValueTypeMap1234 {
			yyl1878 := r.ReadMapStart()
			if yyl1878 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1878, d)
			}
		} else if yyct1878 == codecSelferValueTypeArray1234 {
			yyl1878 := r.ReadArrayStart()
			if yyl1878 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1878, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1879Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1879Slc
	var yyhl1879 bool = l >= 0
	for yyj1879 := 0; ; yyj1879++ {
		if yyhl1879 {
			if yyj1879 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1879Slc = r.DecodeBytes(yys1879Slc, true, true)
		yys1879 := string(yys1879Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1879 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1880 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1881 := z.DecBinary()
				_ = yym1881
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1880), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1882 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1883 := z.DecBinary()
				_ = yym1883
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1882), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1879)
		} // end switch yys1879
	} // end for yyj1879
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1884 int
	var yyb1884 bool
	var yyhl1884 bool = l >= 0
	yyj1884++
	if yyhl1884 {
		yyb1884 = yyj1884 > l
	} else {
		yyb1884 = r.CheckBreak()
	}
	if yyb1884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1885 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1886 := z.DecBinary()
		_ = yym1886
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1885), d)
		}
	}
	yyj1884++
	if yyhl1884 {
		yyb1884 = yyj1884 > l
	} else {
		yyb1884 = r.CheckBreak()
	}
	if yyb1884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1887 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1888 := z.DecBinary()
		_ = yym1888
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1887), d)
		}
	}
	for {
		yyj1884++
		if yyhl1884 {
			yyb1884 = yyj1884 > l
		} else {
			yyb1884 = r.CheckBreak()
		}
		if yyb1884 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1884-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1889 := z.EncBinary()
		_ = yym1889
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1890 := !z.EncBinary()
			yy2arr1890 := z.EncBasicHandle().StructToArray
			var yyq1890 [2]bool
			_, _, _ = yysep1890, yyq1890, yy2arr1890
			const yyr1890 bool = false
			yyq1890[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1890[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1890 int
			if yyr1890 || yy2arr1890 {
				r.EncodeArrayStart(2)
			} else {
				yynn1890 = 0
				for _, b := range yyq1890 {
					if b {
						yynn1890++
					}
				}
				r.EncodeMapStart(yynn1890)
				yynn1890 = 0
			}
			if yyr1890 || yy2arr1890 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1890[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1892 := z.EncBinary()
						_ = yym1892
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1890[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1893 := z.EncBinary()
						_ = yym1893
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1890 || yy2arr1890 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1890[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1895 := z.EncBinary()
						_ = yym1895
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1890[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1896 := z.EncBinary()
						_ = yym1896
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1890 || yy2arr1890 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1897 := z.DecBinary()
	_ = yym1897
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1898 := r.ContainerType()
		if yyct1898 == codecSelferValueTypeMap1234 {
			yyl1898 := r.ReadMapStart()
			if yyl1898 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1898, d)
			}
		} else if yyct1898 == codecSelferValueTypeArray1234 {
			yyl1898 := r.ReadArrayStart()
			if yyl1898 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1898, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1899Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1899Slc
	var yyhl1899 bool = l >= 0
	for yyj1899 := 0; ; yyj1899++ {
		if yyhl1899 {
			if yyj1899 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1899Slc = r.DecodeBytes(yys1899Slc, true, true)
		yys1899 := string(yys1899Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1899 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1900 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1901 := z.DecBinary()
				_ = yym1901
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1900), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1902 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1903 := z.DecBinary()
				_ = yym1903
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1902), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1899)
		} // end switch yys1899
	} // end for yyj1899
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1904 int
	var yyb1904 bool
	var yyhl1904 bool = l >= 0
	yyj1904++
	if yyhl1904 {
		yyb1904 = yyj1904 > l
	} else {
		yyb1904 = r.CheckBreak()
	}
	if yyb1904 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1905 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1906 := z.DecBinary()
		_ = yym1906
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1905), d)
		}
	}
	yyj1904++
	if yyhl1904 {
		yyb1904 = yyj1904 > l
	} else {
		yyb1904 = r.CheckBreak()
	}
	if yyb1904 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1907 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1908 := z.DecBinary()
		_ = yym1908
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1907), d)
		}
	}
	for {
		yyj1904++
		if yyhl1904 {
			yyb1904 = yyj1904 > l
		} else {
			yyb1904 = r.CheckBreak()
		}
		if yyb1904 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1904-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1909 := z.EncBinary()
		_ = yym1909
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1910 := !z.EncBinary()
			yy2arr1910 := z.EncBasicHandle().StructToArray
			var yyq1910 [2]bool
			_, _, _ = yysep1910, yyq1910, yy2arr1910
			const yyr1910 bool = false
			var yynn1910 int
			if yyr1910 || yy2arr1910 {
				r.EncodeArrayStart(2)
			} else {
				yynn1910 = 2
				for _, b := range yyq1910 {
					if b {
						yynn1910++
					}
				}
				r.EncodeMapStart(yynn1910)
				yynn1910 = 0
			}
			if yyr1910 || yy2arr1910 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1912 := z.EncBinary()
				_ = yym1912
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1913 := z.EncBinary()
				_ = yym1913
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1910 || yy2arr1910 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1915 := &x.PodAffinityTerm
				yy1915.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1916 := &x.PodAffinityTerm
				yy1916.CodecEncodeSelf(e)
			}
			if yyr1910 || yy2arr1910 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1917 := z.DecBinary()
	_ = yym1917
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1918 := r.ContainerType()
		if yyct1918 == codecSelferValueTypeMap1234 {
			yyl1918 := r.ReadMapStart()
			if yyl1918 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1918, d)
			}
		} else if yyct1918 == codecSelferValueTypeArray1234 {
			yyl1918 := r.ReadArrayStart()
			if yyl1918 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1918, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1919Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1919Slc
	var yyhl1919 bool = l >= 0
	for yyj1919 := 0; ; yyj1919++ {
		if yyhl1919 {
			if yyj1919 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1919Slc = r.DecodeBytes(yys1919Slc, true, true)
		yys1919 := string(yys1919Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1919 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1921 := &x.PodAffinityTerm
				yyv1921.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1919)
		} // end switch yys1919
	} // end for yyj1919
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1922 int
	var yyb1922 bool
	var yyhl1922 bool = l >= 0
	yyj1922++
	if yyhl1922 {
		yyb1922 = yyj1922 > l
	} else {
		yyb1922 = r.CheckBreak()
	}
	if yyb1922 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1922++
	if yyhl1922 {
		yyb1922 = yyj1922 > l
	} else {
		yyb1922 = r.CheckBreak()
	}
	if yyb1922 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1924 := &x.PodAffinityTerm
		yyv1924.CodecDecodeSelf(d)
	}
	for {
		yyj1922++
		if yyhl1922 {
			yyb1922 = yyj1922 > l
		} else {
			yyb1922 = r.CheckBreak()
		}
		if yyb1922 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1922-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1925 := z.EncBinary()
		_ = yym1925
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1926 := !z.EncBinary()
			yy2arr1926 := z.EncBasicHandle().StructToArray
			var yyq1926 [3]bool
			_, _, _ = yysep1926, yyq1926, yy2arr1926
			const yyr1926 bool = false
			yyq1926[0] = x.LabelSelector != nil
			yyq1926[2] = x.TopologyKey != ""
			var yynn1926 int
			if yyr1926 || yy2arr1926 {
				r.EncodeArrayStart(3)
			} else {
				yynn1926 = 1
				for _, b := range yyq1926 {
					if b {
						yynn1926++
					}
				}
				r.EncodeMapStart(yynn1926)
				yynn1926 = 0
			}
			if yyr1926 || yy2arr1926 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1926[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1928 := z.EncBinary()
						_ = yym1928
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1926[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1929 := z.EncBinary()
						_ = yym1929
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1926 || yy2arr1926 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1931 := z.EncBinary()
					_ = yym1931
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1932 := z.EncBinary()
					_ = yym1932
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1926 || yy2arr1926 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1926[2] {
					yym1934 := z.EncBinary()
					_ = yym1934
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1926[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1935 := z.EncBinary()
					_ = yym1935
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1926 || yy2arr1926 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1936 := z.DecBinary()
	_ = yym1936
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1937 := r.ContainerType()
		if yyct1937 == codecSelferValueTypeMap1234 {
			yyl1937 := r.ReadMapStart()
			if yyl1937 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1937, d)
			}
		} else if yyct1937 == codecSelferValueTypeArray1234 {
			yyl1937 := r.ReadArrayStart()
			if yyl1937 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1937, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1938Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1938Slc
	var yyhl1938 bool = l >= 0
	for yyj1938 := 0; ; yyj1938++ {
		if yyhl1938 {
			if yyj1938 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1938Slc = r.DecodeBytes(yys1938Slc, true, true)
		yys1938 := string(yys1938Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1938 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_v1.LabelSelector)
				}
				yym1940 := z.DecBinary()
				_ = yym1940
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1941 := &x.Namespaces
				yym1942 := z.DecBinary()
				_ = yym1942
				if false {
				} else {
					z.F.DecSliceStringX(yyv1941, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1938)
		} // end switch yys1938
	} // end for yyj1938
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1944 int
	var yyb1944 bool
	var yyhl1944 bool = l >= 0
	yyj1944++
	if yyhl1944 {
		yyb1944 = yyj1944 > l
	} else {
		yyb1944 = r.CheckBreak()
	}
	if yyb1944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_v1.LabelSelector)
		}
		yym1946 := z.DecBinary()
		_ = yym1946
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1944++
	if yyhl1944 {
		yyb1944 = yyj1944 > l
	} else {
		yyb1944 = r.CheckBreak()
	}
	if yyb1944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1947 := &x.Namespaces
		yym1948 := z.DecBinary()
		_ = yym1948
		if false {
		} else {
			z.F.DecSliceStringX(yyv1947, false, d)
		}
	}
	yyj1944++
	if yyhl1944 {
		yyb1944 = yyj1944 > l
	} else {
		yyb1944 = r.CheckBreak()
	}
	if yyb1944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1944++
		if yyhl1944 {
			yyb1944 = yyj1944 > l
		} else {
			yyb1944 = r.CheckBreak()
		}
		if yyb1944 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1944-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1950 := z.EncBinary()
		_ = yym1950
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1951 := !z.EncBinary()
			yy2arr1951 := z.EncBasicHandle().StructToArray
			var yyq1951 [2]bool
			_, _, _ = yysep1951, yyq1951, yy2arr1951
			const yyr1951 bool = false
			yyq1951[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1951[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1951 int
			if yyr1951 || yy2arr1951 {
				r.EncodeArrayStart(2)
			} else {
				yynn1951 = 0
				for _, b := range yyq1951 {
					if b {
						yynn1951++
					}
				}
				r.EncodeMapStart(yynn1951)
				yynn1951 = 0
			}
			if yyr1951 || yy2arr1951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1951[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1951[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1951 || yy2arr1951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1951[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1954 := z.EncBinary()
						_ = yym1954
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1951[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1955 := z.EncBinary()
						_ = yym1955
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1951 || yy2arr1951 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1956 := z.DecBinary()
	_ = yym1956
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1957 := r.ContainerType()
		if yyct1957 == codecSelferValueTypeMap1234 {
			yyl1957 := r.ReadMapStart()
			if yyl1957 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1957, d)
			}
		} else if yyct1957 == codecSelferValueTypeArray1234 {
			yyl1957 := r.ReadArrayStart()
			if yyl1957 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1957, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1958Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1958Slc
	var yyhl1958 bool = l >= 0
	for yyj1958 := 0; ; yyj1958++ {
		if yyhl1958 {
			if yyj1958 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1958Slc = r.DecodeBytes(yys1958Slc, true, true)
		yys1958 := string(yys1958Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1958 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1960 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1961 := z.DecBinary()
				_ = yym1961
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1960), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1958)
		} // end switch yys1958
	} // end for yyj1958
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1962 int
	var yyb1962 bool
	var yyhl1962 bool = l >= 0
	yyj1962++
	if yyhl1962 {
		yyb1962 = yyj1962 > l
	} else {
		yyb1962 = r.CheckBreak()
	}
	if yyb1962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1962++
	if yyhl1962 {
		yyb1962 = yyj1962 > l
	} else {
		yyb1962 = r.CheckBreak()
	}
	if yyb1962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1964 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1965 := z.DecBinary()
		_ = yym1965
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1964), d)
		}
	}
	for {
		yyj1962++
		if yyhl1962 {
			yyb1962 = yyj1962 > l
		} else {
			yyb1962 = r.CheckBreak()
		}
		if yyb1962 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1962-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1966 := z.EncBinary()
		_ = yym1966
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1967 := !z.EncBinary()
			yy2arr1967 := z.EncBasicHandle().StructToArray
			var yyq1967 [2]bool
			_, _, _ = yysep1967, yyq1967, yy2arr1967
			const yyr1967 bool = false
			var yynn1967 int
			if yyr1967 || yy2arr1967 {
				r.EncodeArrayStart(2)
			} else {
				yynn1967 = 2
				for _, b := range yyq1967 {
					if b {
						yynn1967++
					}
				}
				r.EncodeMapStart(yynn1967)
				yynn1967 = 0
			}
			if yyr1967 || yy2arr1967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1969 := z.EncBinary()
				_ = yym1969
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1970 := z.EncBinary()
				_ = yym1970
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1967 || yy2arr1967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1972 := &x.Preference
				yy1972.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1973 := &x.Preference
				yy1973.CodecEncodeSelf(e)
			}
			if yyr1967 || yy2arr1967 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1974 := z.DecBinary()
	_ = yym1974
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1975 := r.ContainerType()
		if yyct1975 == codecSelferValueTypeMap1234 {
			yyl1975 := r.ReadMapStart()
			if yyl1975 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1975, d)
			}
		} else if yyct1975 == codecSelferValueTypeArray1234 {
			yyl1975 := r.ReadArrayStart()
			if yyl1975 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1975, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1976Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1976Slc
	var yyhl1976 bool = l >= 0
	for yyj1976 := 0; ; yyj1976++ {
		if yyhl1976 {
			if yyj1976 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1976Slc = r.DecodeBytes(yys1976Slc, true, true)
		yys1976 := string(yys1976Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1976 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1978 := &x.Preference
				yyv1978.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1976)
		} // end switch yys1976
	} // end for yyj1976
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1979 int
	var yyb1979 bool
	var yyhl1979 bool = l >= 0
	yyj1979++
	if yyhl1979 {
		yyb1979 = yyj1979 > l
	} else {
		yyb1979 = r.CheckBreak()
	}
	if yyb1979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1979++
	if yyhl1979 {
		yyb1979 = yyj1979 > l
	} else {
		yyb1979 = r.CheckBreak()
	}
	if yyb1979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1981 := &x.Preference
		yyv1981.CodecDecodeSelf(d)
	}
	for {
		yyj1979++
		if yyhl1979 {
			yyb1979 = yyj1979 > l
		} else {
			yyb1979 = r.CheckBreak()
		}
		if yyb1979 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1979-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1982 := z.EncBinary()
		_ = yym1982
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1983 := !z.EncBinary()
			yy2arr1983 := z.EncBasicHandle().StructToArray
			var yyq1983 [3]bool
			_, _, _ = yysep1983, yyq1983, yy2arr1983
			const yyr1983 bool = false
			yyq1983[1] = x.Value != ""
			var yynn1983 int
			if yyr1983 || yy2arr1983 {
				r.EncodeArrayStart(3)
			} else {
				yynn1983 = 2
				for _, b := range yyq1983 {
					if b {
						yynn1983++
					}
				}
				r.EncodeMapStart(yynn1983)
				yynn1983 = 0
			}
			if yyr1983 || yy2arr1983 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1985 := z.EncBinary()
				_ = yym1985
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1986 := z.EncBinary()
				_ = yym1986
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1983 || yy2arr1983 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1983[1] {
					yym1988 := z.EncBinary()
					_ = yym1988
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1983[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1989 := z.EncBinary()
					_ = yym1989
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1983 || yy2arr1983 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr1983 || yy2arr1983 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1991 := z.DecBinary()
	_ = yym1991
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1992 := r.ContainerType()
		if yyct1992 == codecSelferValueTypeMap1234 {
			yyl1992 := r.ReadMapStart()
			if yyl1992 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1992, d)
			}
		} else if yyct1992 == codecSelferValueTypeArray1234 {
			yyl1992 := r.ReadArrayStart()
			if yyl1992 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1992, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1993Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1993Slc
	var yyhl1993 bool = l >= 0
	for yyj1993 := 0; ; yyj1993++ {
		if yyhl1993 {
			if yyj1993 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1993Slc = r.DecodeBytes(yys1993Slc, true, true)
		yys1993 := string(yys1993Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1993 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1993)
		} // end switch yys1993
	} // end for yyj1993
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1997 int
	var yyb1997 bool
	var yyhl1997 bool = l >= 0
	yyj1997++
	if yyhl1997 {
		yyb1997 = yyj1997 > l
	} else {
		yyb1997 = r.CheckBreak()
	}
	if yyb1997 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1997++
	if yyhl1997 {
		yyb1997 = yyj1997 > l
	} else {
		yyb1997 = r.CheckBreak()
	}
	if yyb1997 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1997++
	if yyhl1997 {
		yyb1997 = yyj1997 > l
	} else {
		yyb1997 = r.CheckBreak()
	}
	if yyb1997 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1997++
		if yyhl1997 {
			yyb1997 = yyj1997 > l
		} else {
			yyb1997 = r.CheckBreak()
		}
		if yyb1997 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1997-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2001 := z.EncBinary()
	_ = yym2001
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2002 := z.DecBinary()
	_ = yym2002
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2003 := z.EncBinary()
		_ = yym2003
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2004 := !z.EncBinary()
			yy2arr2004 := z.EncBasicHandle().StructToArray
			var yyq2004 [4]bool
			_, _, _ = yysep2004, yyq2004, yy2arr2004
			const yyr2004 bool = false
			yyq2004[0] = x.Key != ""
			yyq2004[1] = x.Operator != ""
			yyq2004[2] = x.Value != ""
			yyq2004[3] = x.Effect != ""
			var yynn2004 int
			if yyr2004 || yy2arr2004 {
				r.EncodeArrayStart(4)
			} else {
				yynn2004 = 0
				for _, b := range yyq2004 {
					if b {
						yynn2004++
					}
				}
				r.EncodeMapStart(yynn2004)
				yynn2004 = 0
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[0] {
					yym2006 := z.EncBinary()
					_ = yym2006
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2004[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2007 := z.EncBinary()
					_ = yym2007
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2004[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[2] {
					yym2010 := z.EncBinary()
					_ = yym2010
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2004[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2011 := z.EncBinary()
					_ = yym2011
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2004[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2004[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr2004 || yy2arr2004 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2013 := z.DecBinary()
	_ = yym2013
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2014 := r.ContainerType()
		if yyct2014 == codecSelferValueTypeMap1234 {
			yyl2014 := r.ReadMapStart()
			if yyl2014 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2014, d)
			}
		} else if yyct2014 == codecSelferValueTypeArray1234 {
			yyl2014 := r.ReadArrayStart()
			if yyl2014 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2014, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2015Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2015Slc
	var yyhl2015 bool = l >= 0
	for yyj2015 := 0; ; yyj2015++ {
		if yyhl2015 {
			if yyj2015 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2015Slc = r.DecodeBytes(yys2015Slc, true, true)
		yys2015 := string(yys2015Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2015 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2015)
		} // end switch yys2015
	} // end for yyj2015
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2020 int
	var yyb2020 bool
	var yyhl2020 bool = l >= 0
	yyj2020++
	if yyhl2020 {
		yyb2020 = yyj2020 > l
	} else {
		yyb2020 = r.CheckBreak()
	}
	if yyb2020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2020++
	if yyhl2020 {
		yyb2020 = yyj2020 > l
	} else {
		yyb2020 = r.CheckBreak()
	}
	if yyb2020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj2020++
	if yyhl2020 {
		yyb2020 = yyj2020 > l
	} else {
		yyb2020 = r.CheckBreak()
	}
	if yyb2020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2020++
	if yyhl2020 {
		yyb2020 = yyj2020 > l
	} else {
		yyb2020 = r.CheckBreak()
	}
	if yyb2020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2020++
		if yyhl2020 {
			yyb2020 = yyj2020 > l
		} else {
			yyb2020 = r.CheckBreak()
		}
		if yyb2020 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2020-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2025 := z.EncBinary()
	_ = yym2025
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2026 := z.DecBinary()
	_ = yym2026
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2027 := z.EncBinary()
		_ = yym2027
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2028 := !z.EncBinary()
			yy2arr2028 := z.EncBasicHandle().StructToArray
			var yyq2028 [18]bool
			_, _, _ = yysep2028, yyq2028, yy2arr2028
			const yyr2028 bool = false
			yyq2028[0] = len(x.Volumes) != 0
			yyq2028[2] = x.RestartPolicy != ""
			yyq2028[3] = x.TerminationGracePeriodSeconds != nil
			yyq2028[4] = x.ActiveDeadlineSeconds != nil
			yyq2028[5] = x.DNSPolicy != ""
			yyq2028[6] = len(x.NodeSelector) != 0
			yyq2028[7] = x.ServiceAccountName != ""
			yyq2028[8] = x.DeprecatedServiceAccount != ""
			yyq2028[9] = x.NodeName != ""
			yyq2028[10] = x.HostNetwork != false
			yyq2028[11] = x.HostPID != false
			yyq2028[12] = x.HostIPC != false
			yyq2028[13] = x.SecurityContext != nil
			yyq2028[14] = len(x.ImagePullSecrets) != 0
			yyq2028[15] = x.Hostname != ""
			yyq2028[16] = x.Subdomain != ""
			yyq2028[17] = x.Affinity != nil
			var yynn2028 int
			if yyr2028 || yy2arr2028 {
				r.EncodeArrayStart(18)
			} else {
				yynn2028 = 1
				for _, b := range yyq2028 {
					if b {
						yynn2028++
					}
				}
				r.EncodeMapStart(yynn2028)
				yynn2028 = 0
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym2030 := z.EncBinary()
						_ = yym2030
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2028[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym2031 := z.EncBinary()
						_ = yym2031
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2033 := z.EncBinary()
					_ = yym2033
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2034 := z.EncBinary()
					_ = yym2034
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2028[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2037 := *x.TerminationGracePeriodSeconds
						yym2038 := z.EncBinary()
						_ = yym2038
						if false {
						} else {
							r.EncodeInt(int64(yy2037))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2028[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2039 := *x.TerminationGracePeriodSeconds
						yym2040 := z.EncBinary()
						_ = yym2040
						if false {
						} else {
							r.EncodeInt(int64(yy2039))
						}
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2042 := *x.ActiveDeadlineSeconds
						yym2043 := z.EncBinary()
						_ = yym2043
						if false {
						} else {
							r.EncodeInt(int64(yy2042))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2028[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2044 := *x.ActiveDeadlineSeconds
						yym2045 := z.EncBinary()
						_ = yym2045
						if false {
						} else {
							r.EncodeInt(int64(yy2044))
						}
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2028[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2048 := z.EncBinary()
						_ = yym2048
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2028[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2049 := z.EncBinary()
						_ = yym2049
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[7] {
					yym2051 := z.EncBinary()
					_ = yym2051
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2028[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2052 := z.EncBinary()
					_ = yym2052
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[8] {
					yym2054 := z.EncBinary()
					_ = yym2054
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2028[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2055 := z.EncBinary()
					_ = yym2055
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[9] {
					yym2057 := z.EncBinary()
					_ = yym2057
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2028[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2058 := z.EncBinary()
					_ = yym2058
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[10] {
					yym2060 := z.EncBinary()
					_ = yym2060
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2028[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2061 := z.EncBinary()
					_ = yym2061
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[11] {
					yym2063 := z.EncBinary()
					_ = yym2063
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2028[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2064 := z.EncBinary()
					_ = yym2064
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[12] {
					yym2066 := z.EncBinary()
					_ = yym2066
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2028[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2067 := z.EncBinary()
					_ = yym2067
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2028[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2070 := z.EncBinary()
						_ = yym2070
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2028[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2071 := z.EncBinary()
						_ = yym2071
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[15] {
					yym2073 := z.EncBinary()
					_ = yym2073
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2028[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2074 := z.EncBinary()
					_ = yym2074
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[16] {
					yym2076 := z.EncBinary()
					_ = yym2076
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2028[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2077 := z.EncBinary()
					_ = yym2077
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[17] {
					if x.Affinity == nil {
						r.EncodeNil()
					} else {
						x.Affinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2028[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("affinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Affinity == nil {
						r.EncodeNil()
					} else {
						x.Affinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2079 := z.DecBinary()
	_ = yym2079
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2080 := r.ContainerType()
		if yyct2080 == codecSelferValueTypeMap1234 {
			yyl2080 := r.ReadMapStart()
			if yyl2080 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2080, d)
			}
		} else if yyct2080 == codecSelferValueTypeArray1234 {
			yyl2080 := r.ReadArrayStart()
			if yyl2080 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2080, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2081Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2081Slc
	var yyhl2081 bool = l >= 0
	for yyj2081 := 0; ; yyj2081++ {
		if yyhl2081 {
			if yyj2081 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2081Slc = r.DecodeBytes(yys2081Slc, true, true)
		yys2081 := string(yys2081Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2081 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv2082 := &x.Volumes
				yym2083 := z.DecBinary()
				_ = yym2083
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv2082), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv2084 := &x.Containers
				yym2085 := z.DecBinary()
				_ = yym2085
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv2084), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym2088 := z.DecBinary()
				_ = yym2088
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym2090 := z.DecBinary()
				_ = yym2090
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv2092 := &x.NodeSelector
				yym2093 := z.DecBinary()
				_ = yym2093
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2092, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2101 := &x.ImagePullSecrets
				yym2102 := z.DecBinary()
				_ = yym2102
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2101), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		case "affinity":
			if r.TryDecodeAsNil() {
				if x.Affinity != nil {
					x.Affinity = nil
				}
			} else {
				if x.Affinity == nil {
					x.Affinity = new(Affinity)
				}
				x.Affinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2081)
		} // end switch yys2081
	} // end for yyj2081
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2106 int
	var yyb2106 bool
	var yyhl2106 bool = l >= 0
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2107 := &x.Volumes
		yym2108 := z.DecBinary()
		_ = yym2108
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2107), d)
		}
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2109 := &x.Containers
		yym2110 := z.DecBinary()
		_ = yym2110
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2109), d)
		}
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2113 := z.DecBinary()
		_ = yym2113
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2115 := z.DecBinary()
		_ = yym2115
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2117 := &x.NodeSelector
		yym2118 := z.DecBinary()
		_ = yym2118
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2117, false, d)
		}
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2126 := &x.ImagePullSecrets
		yym2127 := z.DecBinary()
		_ = yym2127
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2126), d)
		}
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Affinity != nil {
			x.Affinity = nil
		}
	} else {
		if x.Affinity == nil {
			x.Affinity = new(Affinity)
		}
		x.Affinity.CodecDecodeSelf(d)
	}
	for {
		yyj2106++
		if yyhl2106 {
			yyb2106 = yyj2106 > l
		} else {
			yyb2106 = r.CheckBreak()
		}
		if yyb2106 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2106-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2131 := z.EncBinary()
		_ = yym2131
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2132 := !z.EncBinary()
			yy2arr2132 := z.EncBasicHandle().StructToArray
			var yyq2132 [5]bool
			_, _, _ = yysep2132, yyq2132, yy2arr2132
			const yyr2132 bool = false
			yyq2132[0] = x.SELinuxOptions != nil
			yyq2132[1] = x.RunAsUser != nil
			yyq2132[2] = x.RunAsNonRoot != nil
			yyq2132[3] = len(x.SupplementalGroups) != 0
			yyq2132[4] = x.FSGroup != nil
			var yynn2132 int
			if yyr2132 || yy2arr2132 {
				r.EncodeArrayStart(5)
			} else {
				yynn2132 = 0
				for _, b := range yyq2132 {
					if b {
						yynn2132++
					}
				}
				r.EncodeMapStart(yynn2132)
				yynn2132 = 0
			}
			if yyr2132 || yy2arr2132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2132[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2132[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2132 || yy2arr2132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2132[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2135 := *x.RunAsUser
						yym2136 := z.EncBinary()
						_ = yym2136
						if false {
						} else {
							r.EncodeInt(int64(yy2135))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2132[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2137 := *x.RunAsUser
						yym2138 := z.EncBinary()
						_ = yym2138
						if false {
						} else {
							r.EncodeInt(int64(yy2137))
						}
					}
				}
			}
			if yyr2132 || yy2arr2132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2132[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2140 := *x.RunAsNonRoot
						yym2141 := z.EncBinary()
						_ = yym2141
						if false {
						} else {
							r.EncodeBool(bool(yy2140))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2132[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2142 := *x.RunAsNonRoot
						yym2143 := z.EncBinary()
						_ = yym2143
						if false {
						} else {
							r.EncodeBool(bool(yy2142))
						}
					}
				}
			}
			if yyr2132 || yy2arr2132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2132[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2145 := z.EncBinary()
						_ = yym2145
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2132[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2146 := z.EncBinary()
						_ = yym2146
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2132 || yy2arr2132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2132[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2148 := *x.FSGroup
						yym2149 := z.EncBinary()
						_ = yym2149
						if false {
						} else {
							r.EncodeInt(int64(yy2148))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2132[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2150 := *x.FSGroup
						yym2151 := z.EncBinary()
						_ = yym2151
						if false {
						} else {
							r.EncodeInt(int64(yy2150))
						}
					}
				}
			}
			if yyr2132 || yy2arr2132 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2152 := z.DecBinary()
	_ = yym2152
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2153 := r.ContainerType()
		if yyct2153 == codecSelferValueTypeMap1234 {
			yyl2153 := r.ReadMapStart()
			if yyl2153 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2153, d)
			}
		} else if yyct2153 == codecSelferValueTypeArray1234 {
			yyl2153 := r.ReadArrayStart()
			if yyl2153 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2153, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2154Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2154Slc
	var yyhl2154 bool = l >= 0
	for yyj2154 := 0; ; yyj2154++ {
		if yyhl2154 {
			if yyj2154 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2154Slc = r.DecodeBytes(yys2154Slc, true, true)
		yys2154 := string(yys2154Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2154 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2157 := z.DecBinary()
				_ = yym2157
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2159 := z.DecBinary()
				_ = yym2159
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2160 := &x.SupplementalGroups
				yym2161 := z.DecBinary()
				_ = yym2161
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2160, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2163 := z.DecBinary()
				_ = yym2163
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2154)
		} // end switch yys2154
	} // end for yyj2154
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2164 int
	var yyb2164 bool
	var yyhl2164 bool = l >= 0
	yyj2164++
	if yyhl2164 {
		yyb2164 = yyj2164 > l
	} else {
		yyb2164 = r.CheckBreak()
	}
	if yyb2164 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2164++
	if yyhl2164 {
		yyb2164 = yyj2164 > l
	} else {
		yyb2164 = r.CheckBreak()
	}
	if yyb2164 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2167 := z.DecBinary()
		_ = yym2167
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2164++
	if yyhl2164 {
		yyb2164 = yyj2164 > l
	} else {
		yyb2164 = r.CheckBreak()
	}
	if yyb2164 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2169 := z.DecBinary()
		_ = yym2169
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2164++
	if yyhl2164 {
		yyb2164 = yyj2164 > l
	} else {
		yyb2164 = r.CheckBreak()
	}
	if yyb2164 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2170 := &x.SupplementalGroups
		yym2171 := z.DecBinary()
		_ = yym2171
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2170, false, d)
		}
	}
	yyj2164++
	if yyhl2164 {
		yyb2164 = yyj2164 > l
	} else {
		yyb2164 = r.CheckBreak()
	}
	if yyb2164 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2173 := z.DecBinary()
		_ = yym2173
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2164++
		if yyhl2164 {
			yyb2164 = yyj2164 > l
		} else {
			yyb2164 = r.CheckBreak()
		}
		if yyb2164 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2164-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodQOSClass) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2174 := z.EncBinary()
	_ = yym2174
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodQOSClass) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2175 := z.DecBinary()
	_ = yym2175
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2176 := z.EncBinary()
		_ = yym2176
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2177 := !z.EncBinary()
			yy2arr2177 := z.EncBasicHandle().StructToArray
			var yyq2177 [9]bool
			_, _, _ = yysep2177, yyq2177, yy2arr2177
			const yyr2177 bool = false
			yyq2177[0] = x.Phase != ""
			yyq2177[1] = len(x.Conditions) != 0
			yyq2177[2] = x.Message != ""
			yyq2177[3] = x.Reason != ""
			yyq2177[4] = x.HostIP != ""
			yyq2177[5] = x.PodIP != ""
			yyq2177[6] = x.StartTime != nil
			yyq2177[7] = len(x.ContainerStatuses) != 0
			yyq2177[8] = x.QOSClass != ""
			var yynn2177 int
			if yyr2177 || yy2arr2177 {
				r.EncodeArrayStart(9)
			} else {
				yynn2177 = 0
				for _, b := range yyq2177 {
					if b {
						yynn2177++
					}
				}
				r.EncodeMapStart(yynn2177)
				yynn2177 = 0
			}
			if yyr2177 || yy2arr2177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2177[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2177[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2177 || yy2arr2177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2177[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2180 := z.EncBinary()
						_ = yym2180
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2177[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2181 := z.EncBinary()
						_ = yym2181
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2177 || yy2arr2177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2177[2] {
					yym2183 := z.EncBinary()
					_ = yym2183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2177[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2184 := z.EncBinary()
					_ = yym2184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2177 || yy2arr2177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2177[3] {
					yym2186 := z.EncBinary()
					_ = yym2186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2177[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2187 := z.EncBinary()
					_ = yym2187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2177 || yy2arr2177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2177[4] {
					yym2189 := z.EncBinary()
					_ = yym2189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2177[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2190 := z.EncBinary()
					_ = yym2190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2177 || yy2arr2177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2177[5] {
					yym2192 := z.EncBinary()
					_ = yym2192
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2177[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2193 := z.EncBinary()
					_ = yym2193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2177 || yy2arr2177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2177[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2195 := z.EncBinary()
						_ = yym2195
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2195 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2195 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2177[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2196 := z.EncBinary()
						_ = yym2196
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2196 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2196 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2177 || yy2arr2177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2177[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2198 := z.EncBinary()
						_ = yym2198
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2177[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2199 := z.EncBinary()
						_ = yym2199
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2177 || yy2arr2177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2177[8] {
					x.QOSClass.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2177[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("qosClass"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.QOSClass.CodecEncodeSelf(e)
				}
			}
			if yyr2177 || yy2arr2177 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2201 := z.DecBinary()
	_ = yym2201
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2202 := r.ContainerType()
		if yyct2202 == codecSelferValueTypeMap1234 {
			yyl2202 := r.ReadMapStart()
			if yyl2202 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2202, d)
			}
		} else if yyct2202 == codecSelferValueTypeArray1234 {
			yyl2202 := r.ReadArrayStart()
			if yyl2202 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2202, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2203Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2203Slc
	var yyhl2203 bool = l >= 0
	for yyj2203 := 0; ; yyj2203++ {
		if yyhl2203 {
			if yyj2203 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2203Slc = r.DecodeBytes(yys2203Slc, true, true)
		yys2203 := string(yys2203Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2203 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2205 := &x.Conditions
				yym2206 := z.DecBinary()
				_ = yym2206
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2205), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_v1.Time)
				}
				yym2212 := z.DecBinary()
				_ = yym2212
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2212 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2212 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2213 := &x.ContainerStatuses
				yym2214 := z.DecBinary()
				_ = yym2214
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2213), d)
				}
			}
		case "qosClass":
			if r.TryDecodeAsNil() {
				x.QOSClass = ""
			} else {
				x.QOSClass = PodQOSClass(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2203)
		} // end switch yys2203
	} // end for yyj2203
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2216 int
	var yyb2216 bool
	var yyhl2216 bool = l >= 0
	yyj2216++
	if yyhl2216 {
		yyb2216 = yyj2216 > l
	} else {
		yyb2216 = r.CheckBreak()
	}
	if yyb2216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2216++
	if yyhl2216 {
		yyb2216 = yyj2216 > l
	} else {
		yyb2216 = r.CheckBreak()
	}
	if yyb2216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2218 := &x.Conditions
		yym2219 := z.DecBinary()
		_ = yym2219
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2218), d)
		}
	}
	yyj2216++
	if yyhl2216 {
		yyb2216 = yyj2216 > l
	} else {
		yyb2216 = r.CheckBreak()
	}
	if yyb2216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2216++
	if yyhl2216 {
		yyb2216 = yyj2216 > l
	} else {
		yyb2216 = r.CheckBreak()
	}
	if yyb2216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2216++
	if yyhl2216 {
		yyb2216 = yyj2216 > l
	} else {
		yyb2216 = r.CheckBreak()
	}
	if yyb2216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2216++
	if yyhl2216 {
		yyb2216 = yyj2216 > l
	} else {
		yyb2216 = r.CheckBreak()
	}
	if yyb2216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2216++
	if yyhl2216 {
		yyb2216 = yyj2216 > l
	} else {
		yyb2216 = r.CheckBreak()
	}
	if yyb2216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_v1.Time)
		}
		yym2225 := z.DecBinary()
		_ = yym2225
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2225 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2225 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2216++
	if yyhl2216 {
		yyb2216 = yyj2216 > l
	} else {
		yyb2216 = r.CheckBreak()
	}
	if yyb2216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2226 := &x.ContainerStatuses
		yym2227 := z.DecBinary()
		_ = yym2227
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2226), d)
		}
	}
	yyj2216++
	if yyhl2216 {
		yyb2216 = yyj2216 > l
	} else {
		yyb2216 = r.CheckBreak()
	}
	if yyb2216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.QOSClass = ""
	} else {
		x.QOSClass = PodQOSClass(r.DecodeString())
	}
	for {
		yyj2216++
		if yyhl2216 {
			yyb2216 = yyj2216 > l
		} else {
			yyb2216 = r.CheckBreak()
		}
		if yyb2216 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2216-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2229 := z.EncBinary()
		_ = yym2229
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2230 := !z.EncBinary()
			yy2arr2230 := z.EncBasicHandle().StructToArray
			var yyq2230 [4]bool
			_, _, _ = yysep2230, yyq2230, yy2arr2230
			const yyr2230 bool = false
			yyq2230[0] = x.Kind != ""
			yyq2230[1] = x.APIVersion != ""
			yyq2230[2] = true
			yyq2230[3] = true
			var yynn2230 int
			if yyr2230 || yy2arr2230 {
				r.EncodeArrayStart(4)
			} else {
				yynn2230 = 0
				for _, b := range yyq2230 {
					if b {
						yynn2230++
					}
				}
				r.EncodeMapStart(yynn2230)
				yynn2230 = 0
			}
			if yyr2230 || yy2arr2230 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2230[0] {
					yym2232 := z.EncBinary()
					_ = yym2232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2230[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2233 := z.EncBinary()
					_ = yym2233
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2230 || yy2arr2230 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2230[1] {
					yym2235 := z.EncBinary()
					_ = yym2235
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2230[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2236 := z.EncBinary()
					_ = yym2236
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2230 || yy2arr2230 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2230[2] {
					yy2238 := &x.ObjectMeta
					yy2238.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2230[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2239 := &x.ObjectMeta
					yy2239.CodecEncodeSelf(e)
				}
			}
			if yyr2230 || yy2arr2230 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2230[3] {
					yy2241 := &x.Status
					yy2241.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2230[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2242 := &x.Status
					yy2242.CodecEncodeSelf(e)
				}
			}
			if yyr2230 || yy2arr2230 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2243 := z.DecBinary()
	_ = yym2243
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2244 := r.ContainerType()
		if yyct2244 == codecSelferValueTypeMap1234 {
			yyl2244 := r.ReadMapStart()
			if yyl2244 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2244, d)
			}
		} else if yyct2244 == codecSelferValueTypeArray1234 {
			yyl2244 := r.ReadArrayStart()
			if yyl2244 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2244, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2245Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2245Slc
	var yyhl2245 bool = l >= 0
	for yyj2245 := 0; ; yyj2245++ {
		if yyhl2245 {
			if yyj2245 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2245Slc = r.DecodeBytes(yys2245Slc, true, true)
		yys2245 := string(yys2245Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2245 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2248 := &x.ObjectMeta
				yyv2248.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2249 := &x.Status
				yyv2249.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2245)
		} // end switch yys2245
	} // end for yyj2245
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2250 int
	var yyb2250 bool
	var yyhl2250 bool = l >= 0
	yyj2250++
	if yyhl2250 {
		yyb2250 = yyj2250 > l
	} else {
		yyb2250 = r.CheckBreak()
	}
	if yyb2250 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2250++
	if yyhl2250 {
		yyb2250 = yyj2250 > l
	} else {
		yyb2250 = r.CheckBreak()
	}
	if yyb2250 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2250++
	if yyhl2250 {
		yyb2250 = yyj2250 > l
	} else {
		yyb2250 = r.CheckBreak()
	}
	if yyb2250 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2253 := &x.ObjectMeta
		yyv2253.CodecDecodeSelf(d)
	}
	yyj2250++
	if yyhl2250 {
		yyb2250 = yyj2250 > l
	} else {
		yyb2250 = r.CheckBreak()
	}
	if yyb2250 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2254 := &x.Status
		yyv2254.CodecDecodeSelf(d)
	}
	for {
		yyj2250++
		if yyhl2250 {
			yyb2250 = yyj2250 > l
		} else {
			yyb2250 = r.CheckBreak()
		}
		if yyb2250 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2250-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2255 := z.EncBinary()
		_ = yym2255
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2256 := !z.EncBinary()
			yy2arr2256 := z.EncBasicHandle().StructToArray
			var yyq2256 [5]bool
			_, _, _ = yysep2256, yyq2256, yy2arr2256
			const yyr2256 bool = false
			yyq2256[0] = x.Kind != ""
			yyq2256[1] = x.APIVersion != ""
			yyq2256[2] = true
			yyq2256[3] = true
			yyq2256[4] = true
			var yynn2256 int
			if yyr2256 || yy2arr2256 {
				r.EncodeArrayStart(5)
			} else {
				yynn2256 = 0
				for _, b := range yyq2256 {
					if b {
						yynn2256++
					}
				}
				r.EncodeMapStart(yynn2256)
				yynn2256 = 0
			}
			if yyr2256 || yy2arr2256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2256[0] {
					yym2258 := z.EncBinary()
					_ = yym2258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2256[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2259 := z.EncBinary()
					_ = yym2259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2256 || yy2arr2256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2256[1] {
					yym2261 := z.EncBinary()
					_ = yym2261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2256[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2262 := z.EncBinary()
					_ = yym2262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2256 || yy2arr2256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2256[2] {
					yy2264 := &x.ObjectMeta
					yy2264.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2256[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2265 := &x.ObjectMeta
					yy2265.CodecEncodeSelf(e)
				}
			}
			if yyr2256 || yy2arr2256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2256[3] {
					yy2267 := &x.Spec
					yy2267.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2256[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2268 := &x.Spec
					yy2268.CodecEncodeSelf(e)
				}
			}
			if yyr2256 || yy2arr2256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2256[4] {
					yy2270 := &x.Status
					yy2270.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2256[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2271 := &x.Status
					yy2271.CodecEncodeSelf(e)
				}
			}
			if yyr2256 || yy2arr2256 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2272 := z.DecBinary()
	_ = yym2272
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2273 := r.ContainerType()
		if yyct2273 == codecSelferValueTypeMap1234 {
			yyl2273 := r.ReadMapStart()
			if yyl2273 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2273, d)
			}
		} else if yyct2273 == codecSelferValueTypeArray1234 {
			yyl2273 := r.ReadArrayStart()
			if yyl2273 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2273, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2274Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2274Slc
	var yyhl2274 bool = l >= 0
	for yyj2274 := 0; ; yyj2274++ {
		if yyhl2274 {
			if yyj2274 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2274Slc = r.DecodeBytes(yys2274Slc, true, true)
		yys2274 := string(yys2274Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2274 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2277 := &x.ObjectMeta
				yyv2277.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2278 := &x.Spec
				yyv2278.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2279 := &x.Status
				yyv2279.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2274)
		} // end switch yys2274
	} // end for yyj2274
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2280 int
	var yyb2280 bool
	var yyhl2280 bool = l >= 0
	yyj2280++
	if yyhl2280 {
		yyb2280 = yyj2280 > l
	} else {
		yyb2280 = r.CheckBreak()
	}
	if yyb2280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2280++
	if yyhl2280 {
		yyb2280 = yyj2280 > l
	} else {
		yyb2280 = r.CheckBreak()
	}
	if yyb2280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2280++
	if yyhl2280 {
		yyb2280 = yyj2280 > l
	} else {
		yyb2280 = r.CheckBreak()
	}
	if yyb2280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2283 := &x.ObjectMeta
		yyv2283.CodecDecodeSelf(d)
	}
	yyj2280++
	if yyhl2280 {
		yyb2280 = yyj2280 > l
	} else {
		yyb2280 = r.CheckBreak()
	}
	if yyb2280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2284 := &x.Spec
		yyv2284.CodecDecodeSelf(d)
	}
	yyj2280++
	if yyhl2280 {
		yyb2280 = yyj2280 > l
	} else {
		yyb2280 = r.CheckBreak()
	}
	if yyb2280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2285 := &x.Status
		yyv2285.CodecDecodeSelf(d)
	}
	for {
		yyj2280++
		if yyhl2280 {
			yyb2280 = yyj2280 > l
		} else {
			yyb2280 = r.CheckBreak()
		}
		if yyb2280 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2280-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2286 := z.EncBinary()
		_ = yym2286
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2287 := !z.EncBinary()
			yy2arr2287 := z.EncBasicHandle().StructToArray
			var yyq2287 [4]bool
			_, _, _ = yysep2287, yyq2287, yy2arr2287
			const yyr2287 bool = false
			yyq2287[0] = x.Kind != ""
			yyq2287[1] = x.APIVersion != ""
			yyq2287[2] = true
			var yynn2287 int
			if yyr2287 || yy2arr2287 {
				r.EncodeArrayStart(4)
			} else {
				yynn2287 = 1
				for _, b := range yyq2287 {
					if b {
						yynn2287++
					}
				}
				r.EncodeMapStart(yynn2287)
				yynn2287 = 0
			}
			if yyr2287 || yy2arr2287 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2287[0] {
					yym2289 := z.EncBinary()
					_ = yym2289
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2287[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2290 := z.EncBinary()
					_ = yym2290
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2287 || yy2arr2287 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2287[1] {
					yym2292 := z.EncBinary()
					_ = yym2292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2287[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2293 := z.EncBinary()
					_ = yym2293
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2287 || yy2arr2287 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2287[2] {
					yy2295 := &x.ListMeta
					yym2296 := z.EncBinary()
					_ = yym2296
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2295) {
					} else {
						z.EncFallback(yy2295)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2287[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2297 := &x.ListMeta
					yym2298 := z.EncBinary()
					_ = yym2298
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2297) {
					} else {
						z.EncFallback(yy2297)
					}
				}
			}
			if yyr2287 || yy2arr2287 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2300 := z.EncBinary()
					_ = yym2300
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2301 := z.EncBinary()
					_ = yym2301
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr2287 || yy2arr2287 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2302 := z.DecBinary()
	_ = yym2302
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2303 := r.ContainerType()
		if yyct2303 == codecSelferValueTypeMap1234 {
			yyl2303 := r.ReadMapStart()
			if yyl2303 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2303, d)
			}
		} else if yyct2303 == codecSelferValueTypeArray1234 {
			yyl2303 := r.ReadArrayStart()
			if yyl2303 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2303, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2304Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2304Slc
	var yyhl2304 bool = l >= 0
	for yyj2304 := 0; ; yyj2304++ {
		if yyhl2304 {
			if yyj2304 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2304Slc = r.DecodeBytes(yys2304Slc, true, true)
		yys2304 := string(yys2304Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2304 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv2307 := &x.ListMeta
				yym2308 := z.DecBinary()
				_ = yym2308
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2307) {
				} else {
					z.DecFallback(yyv2307, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2309 := &x.Items
				yym2310 := z.DecBinary()
				_ = yym2310
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv2309), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2304)
		} // end switch yys2304
	} // end for yyj2304
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2311 int
	var yyb2311 bool
	var yyhl2311 bool = l >= 0
	yyj2311++
	if yyhl2311 {
		yyb2311 = yyj2311 > l
	} else {
		yyb2311 = r.CheckBreak()
	}
	if yyb2311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2311++
	if yyhl2311 {
		yyb2311 = yyj2311 > l
	} else {
		yyb2311 = r.CheckBreak()
	}
	if yyb2311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2311++
	if yyhl2311 {
		yyb2311 = yyj2311 > l
	} else {
		yyb2311 = r.CheckBreak()
	}
	if yyb2311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv2314 := &x.ListMeta
		yym2315 := z.DecBinary()
		_ = yym2315
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2314) {
		} else {
			z.DecFallback(yyv2314, false)
		}
	}
	yyj2311++
	if yyhl2311 {
		yyb2311 = yyj2311 > l
	} else {
		yyb2311 = r.CheckBreak()
	}
	if yyb2311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2316 := &x.Items
		yym2317 := z.DecBinary()
		_ = yym2317
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv2316), d)
		}
	}
	for {
		yyj2311++
		if yyhl2311 {
			yyb2311 = yyj2311 > l
		} else {
			yyb2311 = r.CheckBreak()
		}
		if yyb2311 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2311-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2318 := z.EncBinary()
		_ = yym2318
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2319 := !z.EncBinary()
			yy2arr2319 := z.EncBasicHandle().StructToArray
			var yyq2319 [2]bool
			_, _, _ = yysep2319, yyq2319, yy2arr2319
			const yyr2319 bool = false
			yyq2319[0] = true
			yyq2319[1] = true
			var yynn2319 int
			if yyr2319 || yy2arr2319 {
				r.EncodeArrayStart(2)
			} else {
				yynn2319 = 0
				for _, b := range yyq2319 {
					if b {
						yynn2319++
					}
				}
				r.EncodeMapStart(yynn2319)
				yynn2319 = 0
			}
			if yyr2319 || yy2arr2319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2319[0] {
					yy2321 := &x.ObjectMeta
					yy2321.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2319[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2322 := &x.ObjectMeta
					yy2322.CodecEncodeSelf(e)
				}
			}
			if yyr2319 || yy2arr2319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2319[1] {
					yy2324 := &x.Spec
					yy2324.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2319[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2325 := &x.Spec
					yy2325.CodecEncodeSelf(e)
				}
			}
			if yyr2319 || yy2arr2319 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2326 := z.DecBinary()
	_ = yym2326
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2327 := r.ContainerType()
		if yyct2327 == codecSelferValueTypeMap1234 {
			yyl2327 := r.ReadMapStart()
			if yyl2327 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2327, d)
			}
		} else if yyct2327 == codecSelferValueTypeArray1234 {
			yyl2327 := r.ReadArrayStart()
			if yyl2327 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2327, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2328Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2328Slc
	var yyhl2328 bool = l >= 0
	for yyj2328 := 0; ; yyj2328++ {
		if yyhl2328 {
			if yyj2328 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2328Slc = r.DecodeBytes(yys2328Slc, true, true)
		yys2328 := string(yys2328Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2328 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2329 := &x.ObjectMeta
				yyv2329.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2330 := &x.Spec
				yyv2330.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2328)
		} // end switch yys2328
	} // end for yyj2328
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2331 int
	var yyb2331 bool
	var yyhl2331 bool = l >= 0
	yyj2331++
	if yyhl2331 {
		yyb2331 = yyj2331 > l
	} else {
		yyb2331 = r.CheckBreak()
	}
	if yyb2331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2332 := &x.ObjectMeta
		yyv2332.CodecDecodeSelf(d)
	}
	yyj2331++
	if yyhl2331 {
		yyb2331 = yyj2331 > l
	} else {
		yyb2331 = r.CheckBreak()
	}
	if yyb2331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2333 := &x.Spec
		yyv2333.CodecDecodeSelf(d)
	}
	for {
		yyj2331++
		if yyhl2331 {
			yyb2331 = yyj2331 > l
		} else {
			yyb2331 = r.CheckBreak()
		}
		if yyb2331 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2331-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2334 := z.EncBinary()
		_ = yym2334
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2335 := !z.EncBinary()
			yy2arr2335 := z.EncBasicHandle().StructToArray
			var yyq2335 [4]bool
			_, _, _ = yysep2335, yyq2335, yy2arr2335
			const yyr2335 bool = false
			yyq2335[0] = x.Kind != ""
			yyq2335[1] = x.APIVersion != ""
			yyq2335[2] = true
			yyq2335[3] = true
			var yynn2335 int
			if yyr2335 || yy2arr2335 {
				r.EncodeArrayStart(4)
			} else {
				yynn2335 = 0
				for _, b := range yyq2335 {
					if b {
						yynn2335++
					}
				}
				r.EncodeMapStart(yynn2335)
				yynn2335 = 0
			}
			if yyr2335 || yy2arr2335 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2335[0] {
					yym2337 := z.EncBinary()
					_ = yym2337
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2335[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2338 := z.EncBinary()
					_ = yym2338
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2335 || yy2arr2335 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2335[1] {
					yym2340 := z.EncBinary()
					_ = yym2340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2335[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2341 := z.EncBinary()
					_ = yym2341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2335 || yy2arr2335 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2335[2] {
					yy2343 := &x.ObjectMeta
					yy2343.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2335[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2344 := &x.ObjectMeta
					yy2344.CodecEncodeSelf(e)
				}
			}
			if yyr2335 || yy2arr2335 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2335[3] {
					yy2346 := &x.Template
					yy2346.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2335[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2347 := &x.Template
					yy2347.CodecEncodeSelf(e)
				}
			}
			if yyr2335 || yy2arr2335 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2348 := z.DecBinary()
	_ = yym2348
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2349 := r.ContainerType()
		if yyct2349 == codecSelferValueTypeMap1234 {
			yyl2349 := r.ReadMapStart()
			if yyl2349 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2349, d)
			}
		} else if yyct2349 == codecSelferValueTypeArray1234 {
			yyl2349 := r.ReadArrayStart()
			if yyl2349 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2349, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2350Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2350Slc
	var yyhl2350 bool = l >= 0
	for yyj2350 := 0; ; yyj2350++ {
		if yyhl2350 {
			if yyj2350 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2350Slc = r.DecodeBytes(yys2350Slc, true, true)
		yys2350 := string(yys2350Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2350 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2353 := &x.ObjectMeta
				yyv2353.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2354 := &x.Template
				yyv2354.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2350)
		} // end switch yys2350
	} // end for yyj2350
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2355 int
	var yyb2355 bool
	var yyhl2355 bool = l >= 0
	yyj2355++
	if yyhl2355 {
		yyb2355 = yyj2355 > l
	} else {
		yyb2355 = r.CheckBreak()
	}
	if yyb2355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2355++
	if yyhl2355 {
		yyb2355 = yyj2355 > l
	} else {
		yyb2355 = r.CheckBreak()
	}
	if yyb2355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2355++
	if yyhl2355 {
		yyb2355 = yyj2355 > l
	} else {
		yyb2355 = r.CheckBreak()
	}
	if yyb2355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2358 := &x.ObjectMeta
		yyv2358.CodecDecodeSelf(d)
	}
	yyj2355++
	if yyhl2355 {
		yyb2355 = yyj2355 > l
	} else {
		yyb2355 = r.CheckBreak()
	}
	if yyb2355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2359 := &x.Template
		yyv2359.CodecDecodeSelf(d)
	}
	for {
		yyj2355++
		if yyhl2355 {
			yyb2355 = yyj2355 > l
		} else {
			yyb2355 = r.CheckBreak()
		}
		if yyb2355 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2355-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2360 := z.EncBinary()
		_ = yym2360
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2361 := !z.EncBinary()
			yy2arr2361 := z.EncBasicHandle().StructToArray
			var yyq2361 [4]bool
			_, _, _ = yysep2361, yyq2361, yy2arr2361
			const yyr2361 bool = false
			yyq2361[0] = x.Kind != ""
			yyq2361[1] = x.APIVersion != ""
			yyq2361[2] = true
			var yynn2361 int
			if yyr2361 || yy2arr2361 {
				r.EncodeArrayStart(4)
			} else {
				yynn2361 = 1
				for _, b := range yyq2361 {
					if b {
						yynn2361++
					}
				}
				r.EncodeMapStart(yynn2361)
				yynn2361 = 0
			}
			if yyr2361 || yy2arr2361 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2361[0] {
					yym2363 := z.EncBinary()
					_ = yym2363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2361[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2364 := z.EncBinary()
					_ = yym2364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2361 || yy2arr2361 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2361[1] {
					yym2366 := z.EncBinary()
					_ = yym2366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2361[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2367 := z.EncBinary()
					_ = yym2367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2361 || yy2arr2361 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2361[2] {
					yy2369 := &x.ListMeta
					yym2370 := z.EncBinary()
					_ = yym2370
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2369) {
					} else {
						z.EncFallback(yy2369)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2361[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2371 := &x.ListMeta
					yym2372 := z.EncBinary()
					_ = yym2372
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2371) {
					} else {
						z.EncFallback(yy2371)
					}
				}
			}
			if yyr2361 || yy2arr2361 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2374 := z.EncBinary()
					_ = yym2374
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2375 := z.EncBinary()
					_ = yym2375
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2361 || yy2arr2361 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2376 := z.DecBinary()
	_ = yym2376
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2377 := r.ContainerType()
		if yyct2377 == codecSelferValueTypeMap1234 {
			yyl2377 := r.ReadMapStart()
			if yyl2377 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2377, d)
			}
		} else if yyct2377 == codecSelferValueTypeArray1234 {
			yyl2377 := r.ReadArrayStart()
			if yyl2377 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2377, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2378Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2378Slc
	var yyhl2378 bool = l >= 0
	for yyj2378 := 0; ; yyj2378++ {
		if yyhl2378 {
			if yyj2378 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2378Slc = r.DecodeBytes(yys2378Slc, true, true)
		yys2378 := string(yys2378Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2378 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv2381 := &x.ListMeta
				yym2382 := z.DecBinary()
				_ = yym2382
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2381) {
				} else {
					z.DecFallback(yyv2381, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2383 := &x.Items
				yym2384 := z.DecBinary()
				_ = yym2384
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2383), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2378)
		} // end switch yys2378
	} // end for yyj2378
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2385 int
	var yyb2385 bool
	var yyhl2385 bool = l >= 0
	yyj2385++
	if yyhl2385 {
		yyb2385 = yyj2385 > l
	} else {
		yyb2385 = r.CheckBreak()
	}
	if yyb2385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2385++
	if yyhl2385 {
		yyb2385 = yyj2385 > l
	} else {
		yyb2385 = r.CheckBreak()
	}
	if yyb2385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2385++
	if yyhl2385 {
		yyb2385 = yyj2385 > l
	} else {
		yyb2385 = r.CheckBreak()
	}
	if yyb2385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv2388 := &x.ListMeta
		yym2389 := z.DecBinary()
		_ = yym2389
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2388) {
		} else {
			z.DecFallback(yyv2388, false)
		}
	}
	yyj2385++
	if yyhl2385 {
		yyb2385 = yyj2385 > l
	} else {
		yyb2385 = r.CheckBreak()
	}
	if yyb2385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2390 := &x.Items
		yym2391 := z.DecBinary()
		_ = yym2391
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2390), d)
		}
	}
	for {
		yyj2385++
		if yyhl2385 {
			yyb2385 = yyj2385 > l
		} else {
			yyb2385 = r.CheckBreak()
		}
		if yyb2385 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2385-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2392 := z.EncBinary()
		_ = yym2392
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2393 := !z.EncBinary()
			yy2arr2393 := z.EncBasicHandle().StructToArray
			var yyq2393 [4]bool
			_, _, _ = yysep2393, yyq2393, yy2arr2393
			const yyr2393 bool = false
			yyq2393[0] = x.Replicas != nil
			yyq2393[1] = x.MinReadySeconds != 0
			yyq2393[2] = len(x.Selector) != 0
			yyq2393[3] = x.Template != nil
			var yynn2393 int
			if yyr2393 || yy2arr2393 {
				r.EncodeArrayStart(4)
			} else {
				yynn2393 = 0
				for _, b := range yyq2393 {
					if b {
						yynn2393++
					}
				}
				r.EncodeMapStart(yynn2393)
				yynn2393 = 0
			}
			if yyr2393 || yy2arr2393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2393[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2395 := *x.Replicas
						yym2396 := z.EncBinary()
						_ = yym2396
						if false {
						} else {
							r.EncodeInt(int64(yy2395))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2393[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2397 := *x.Replicas
						yym2398 := z.EncBinary()
						_ = yym2398
						if false {
						} else {
							r.EncodeInt(int64(yy2397))
						}
					}
				}
			}
			if yyr2393 || yy2arr2393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2393[1] {
					yym2400 := z.EncBinary()
					_ = yym2400
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2393[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2401 := z.EncBinary()
					_ = yym2401
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr2393 || yy2arr2393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2393[2] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2403 := z.EncBinary()
						_ = yym2403
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2393[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2404 := z.EncBinary()
						_ = yym2404
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2393 || yy2arr2393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2393[3] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2393[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2393 || yy2arr2393 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2406 := z.DecBinary()
	_ = yym2406
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2407 := r.ContainerType()
		if yyct2407 == codecSelferValueTypeMap1234 {
			yyl2407 := r.ReadMapStart()
			if yyl2407 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2407, d)
			}
		} else if yyct2407 == codecSelferValueTypeArray1234 {
			yyl2407 := r.ReadArrayStart()
			if yyl2407 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2407, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2408Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2408Slc
	var yyhl2408 bool = l >= 0
	for yyj2408 := 0; ; yyj2408++ {
		if yyhl2408 {
			if yyj2408 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2408Slc = r.DecodeBytes(yys2408Slc, true, true)
		yys2408 := string(yys2408Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2408 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym2410 := z.DecBinary()
				_ = yym2410
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2412 := &x.Selector
				yym2413 := z.DecBinary()
				_ = yym2413
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2412, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2408)
		} // end switch yys2408
	} // end for yyj2408
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2415 int
	var yyb2415 bool
	var yyhl2415 bool = l >= 0
	yyj2415++
	if yyhl2415 {
		yyb2415 = yyj2415 > l
	} else {
		yyb2415 = r.CheckBreak()
	}
	if yyb2415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym2417 := z.DecBinary()
		_ = yym2417
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj2415++
	if yyhl2415 {
		yyb2415 = yyj2415 > l
	} else {
		yyb2415 = r.CheckBreak()
	}
	if yyb2415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj2415++
	if yyhl2415 {
		yyb2415 = yyj2415 > l
	} else {
		yyb2415 = r.CheckBreak()
	}
	if yyb2415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2419 := &x.Selector
		yym2420 := z.DecBinary()
		_ = yym2420
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2419, false, d)
		}
	}
	yyj2415++
	if yyhl2415 {
		yyb2415 = yyj2415 > l
	} else {
		yyb2415 = r.CheckBreak()
	}
	if yyb2415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2415++
		if yyhl2415 {
			yyb2415 = yyj2415 > l
		} else {
			yyb2415 = r.CheckBreak()
		}
		if yyb2415 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2415-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2422 := z.EncBinary()
		_ = yym2422
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2423 := !z.EncBinary()
			yy2arr2423 := z.EncBasicHandle().StructToArray
			var yyq2423 [6]bool
			_, _, _ = yysep2423, yyq2423, yy2arr2423
			const yyr2423 bool = false
			yyq2423[1] = x.FullyLabeledReplicas != 0
			yyq2423[2] = x.ReadyReplicas != 0
			yyq2423[3] = x.AvailableReplicas != 0
			yyq2423[4] = x.ObservedGeneration != 0
			yyq2423[5] = len(x.Conditions) != 0
			var yynn2423 int
			if yyr2423 || yy2arr2423 {
				r.EncodeArrayStart(6)
			} else {
				yynn2423 = 1
				for _, b := range yyq2423 {
					if b {
						yynn2423++
					}
				}
				r.EncodeMapStart(yynn2423)
				yynn2423 = 0
			}
			if yyr2423 || yy2arr2423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2425 := z.EncBinary()
				_ = yym2425
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2426 := z.EncBinary()
				_ = yym2426
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2423 || yy2arr2423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2423[1] {
					yym2428 := z.EncBinary()
					_ = yym2428
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2423[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2429 := z.EncBinary()
					_ = yym2429
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2423 || yy2arr2423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2423[2] {
					yym2431 := z.EncBinary()
					_ = yym2431
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2423[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2432 := z.EncBinary()
					_ = yym2432
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr2423 || yy2arr2423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2423[3] {
					yym2434 := z.EncBinary()
					_ = yym2434
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2423[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2435 := z.EncBinary()
					_ = yym2435
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr2423 || yy2arr2423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2423[4] {
					yym2437 := z.EncBinary()
					_ = yym2437
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2423[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2438 := z.EncBinary()
					_ = yym2438
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2423 || yy2arr2423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2423[5] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2440 := z.EncBinary()
						_ = yym2440
						if false {
						} else {
							h.encSliceReplicationControllerCondition(([]ReplicationControllerCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2423[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2441 := z.EncBinary()
						_ = yym2441
						if false {
						} else {
							h.encSliceReplicationControllerCondition(([]ReplicationControllerCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2423 || yy2arr2423 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2442 := z.DecBinary()
	_ = yym2442
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2443 := r.ContainerType()
		if yyct2443 == codecSelferValueTypeMap1234 {
			yyl2443 := r.ReadMapStart()
			if yyl2443 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2443, d)
			}
		} else if yyct2443 == codecSelferValueTypeArray1234 {
			yyl2443 := r.ReadArrayStart()
			if yyl2443 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2443, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2444Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2444Slc
	var yyhl2444 bool = l >= 0
	for yyj2444 := 0; ; yyj2444++ {
		if yyhl2444 {
			if yyj2444 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2444Slc = r.DecodeBytes(yys2444Slc, true, true)
		yys2444 := string(yys2444Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2444 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2450 := &x.Conditions
				yym2451 := z.DecBinary()
				_ = yym2451
				if false {
				} else {
					h.decSliceReplicationControllerCondition((*[]ReplicationControllerCondition)(yyv2450), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2444)
		} // end switch yys2444
	} // end for yyj2444
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2452 int
	var yyb2452 bool
	var yyhl2452 bool = l >= 0
	yyj2452++
	if yyhl2452 {
		yyb2452 = yyj2452 > l
	} else {
		yyb2452 = r.CheckBreak()
	}
	if yyb2452 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2452++
	if yyhl2452 {
		yyb2452 = yyj2452 > l
	} else {
		yyb2452 = r.CheckBreak()
	}
	if yyb2452 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2452++
	if yyhl2452 {
		yyb2452 = yyj2452 > l
	} else {
		yyb2452 = r.CheckBreak()
	}
	if yyb2452 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj2452++
	if yyhl2452 {
		yyb2452 = yyj2452 > l
	} else {
		yyb2452 = r.CheckBreak()
	}
	if yyb2452 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj2452++
	if yyhl2452 {
		yyb2452 = yyj2452 > l
	} else {
		yyb2452 = r.CheckBreak()
	}
	if yyb2452 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj2452++
	if yyhl2452 {
		yyb2452 = yyj2452 > l
	} else {
		yyb2452 = r.CheckBreak()
	}
	if yyb2452 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2458 := &x.Conditions
		yym2459 := z.DecBinary()
		_ = yym2459
		if false {
		} else {
			h.decSliceReplicationControllerCondition((*[]ReplicationControllerCondition)(yyv2458), d)
		}
	}
	for {
		yyj2452++
		if yyhl2452 {
			yyb2452 = yyj2452 > l
		} else {
			yyb2452 = r.CheckBreak()
		}
		if yyb2452 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2452-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ReplicationControllerConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2460 := z.EncBinary()
	_ = yym2460
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ReplicationControllerConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2461 := z.DecBinary()
	_ = yym2461
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicationControllerCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2462 := z.EncBinary()
		_ = yym2462
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2463 := !z.EncBinary()
			yy2arr2463 := z.EncBasicHandle().StructToArray
			var yyq2463 [5]bool
			_, _, _ = yysep2463, yyq2463, yy2arr2463
			const yyr2463 bool = false
			yyq2463[2] = true
			yyq2463[3] = x.Reason != ""
			yyq2463[4] = x.Message != ""
			var yynn2463 int
			if yyr2463 || yy2arr2463 {
				r.EncodeArrayStart(5)
			} else {
				yynn2463 = 2
				for _, b := range yyq2463 {
					if b {
						yynn2463++
					}
				}
				r.EncodeMapStart(yynn2463)
				yynn2463 = 0
			}
			if yyr2463 || yy2arr2463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2463 || yy2arr2463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2463 || yy2arr2463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2463[2] {
					yy2467 := &x.LastTransitionTime
					yym2468 := z.EncBinary()
					_ = yym2468
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2467) {
					} else if yym2468 {
						z.EncBinaryMarshal(yy2467)
					} else if !yym2468 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2467)
					} else {
						z.EncFallback(yy2467)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2463[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2469 := &x.LastTransitionTime
					yym2470 := z.EncBinary()
					_ = yym2470
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2469) {
					} else if yym2470 {
						z.EncBinaryMarshal(yy2469)
					} else if !yym2470 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2469)
					} else {
						z.EncFallback(yy2469)
					}
				}
			}
			if yyr2463 || yy2arr2463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2463[3] {
					yym2472 := z.EncBinary()
					_ = yym2472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2463[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2473 := z.EncBinary()
					_ = yym2473
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2463 || yy2arr2463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2463[4] {
					yym2475 := z.EncBinary()
					_ = yym2475
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2463[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2476 := z.EncBinary()
					_ = yym2476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2463 || yy2arr2463 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2477 := z.DecBinary()
	_ = yym2477
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2478 := r.ContainerType()
		if yyct2478 == codecSelferValueTypeMap1234 {
			yyl2478 := r.ReadMapStart()
			if yyl2478 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2478, d)
			}
		} else if yyct2478 == codecSelferValueTypeArray1234 {
			yyl2478 := r.ReadArrayStart()
			if yyl2478 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2478, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2479Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2479Slc
	var yyhl2479 bool = l >= 0
	for yyj2479 := 0; ; yyj2479++ {
		if yyhl2479 {
			if yyj2479 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2479Slc = r.DecodeBytes(yys2479Slc, true, true)
		yys2479 := string(yys2479Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2479 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ReplicationControllerConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_v1.Time{}
			} else {
				yyv2482 := &x.LastTransitionTime
				yym2483 := z.DecBinary()
				_ = yym2483
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2482) {
				} else if yym2483 {
					z.DecBinaryUnmarshal(yyv2482)
				} else if !yym2483 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2482)
				} else {
					z.DecFallback(yyv2482, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2479)
		} // end switch yys2479
	} // end for yyj2479
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2486 int
	var yyb2486 bool
	var yyhl2486 bool = l >= 0
	yyj2486++
	if yyhl2486 {
		yyb2486 = yyj2486 > l
	} else {
		yyb2486 = r.CheckBreak()
	}
	if yyb2486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ReplicationControllerConditionType(r.DecodeString())
	}
	yyj2486++
	if yyhl2486 {
		yyb2486 = yyj2486 > l
	} else {
		yyb2486 = r.CheckBreak()
	}
	if yyb2486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2486++
	if yyhl2486 {
		yyb2486 = yyj2486 > l
	} else {
		yyb2486 = r.CheckBreak()
	}
	if yyb2486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_v1.Time{}
	} else {
		yyv2489 := &x.LastTransitionTime
		yym2490 := z.DecBinary()
		_ = yym2490
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2489) {
		} else if yym2490 {
			z.DecBinaryUnmarshal(yyv2489)
		} else if !yym2490 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2489)
		} else {
			z.DecFallback(yyv2489, false)
		}
	}
	yyj2486++
	if yyhl2486 {
		yyb2486 = yyj2486 > l
	} else {
		yyb2486 = r.CheckBreak()
	}
	if yyb2486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2486++
	if yyhl2486 {
		yyb2486 = yyj2486 > l
	} else {
		yyb2486 = r.CheckBreak()
	}
	if yyb2486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2486++
		if yyhl2486 {
			yyb2486 = yyj2486 > l
		} else {
			yyb2486 = r.CheckBreak()
		}
		if yyb2486 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2486-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2493 := z.EncBinary()
		_ = yym2493
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2494 := !z.EncBinary()
			yy2arr2494 := z.EncBasicHandle().StructToArray
			var yyq2494 [5]bool
			_, _, _ = yysep2494, yyq2494, yy2arr2494
			const yyr2494 bool = false
			yyq2494[0] = x.Kind != ""
			yyq2494[1] = x.APIVersion != ""
			yyq2494[2] = true
			yyq2494[3] = true
			yyq2494[4] = true
			var yynn2494 int
			if yyr2494 || yy2arr2494 {
				r.EncodeArrayStart(5)
			} else {
				yynn2494 = 0
				for _, b := range yyq2494 {
					if b {
						yynn2494++
					}
				}
				r.EncodeMapStart(yynn2494)
				yynn2494 = 0
			}
			if yyr2494 || yy2arr2494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2494[0] {
					yym2496 := z.EncBinary()
					_ = yym2496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2494[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2497 := z.EncBinary()
					_ = yym2497
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2494 || yy2arr2494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2494[1] {
					yym2499 := z.EncBinary()
					_ = yym2499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2494[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2500 := z.EncBinary()
					_ = yym2500
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2494 || yy2arr2494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2494[2] {
					yy2502 := &x.ObjectMeta
					yy2502.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2494[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2503 := &x.ObjectMeta
					yy2503.CodecEncodeSelf(e)
				}
			}
			if yyr2494 || yy2arr2494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2494[3] {
					yy2505 := &x.Spec
					yy2505.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2494[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2506 := &x.Spec
					yy2506.CodecEncodeSelf(e)
				}
			}
			if yyr2494 || yy2arr2494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2494[4] {
					yy2508 := &x.Status
					yy2508.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2494[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2509 := &x.Status
					yy2509.CodecEncodeSelf(e)
				}
			}
			if yyr2494 || yy2arr2494 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2510 := z.DecBinary()
	_ = yym2510
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2511 := r.ContainerType()
		if yyct2511 == codecSelferValueTypeMap1234 {
			yyl2511 := r.ReadMapStart()
			if yyl2511 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2511, d)
			}
		} else if yyct2511 == codecSelferValueTypeArray1234 {
			yyl2511 := r.ReadArrayStart()
			if yyl2511 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2511, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2512Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2512Slc
	var yyhl2512 bool = l >= 0
	for yyj2512 := 0; ; yyj2512++ {
		if yyhl2512 {
			if yyj2512 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2512Slc = r.DecodeBytes(yys2512Slc, true, true)
		yys2512 := string(yys2512Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2512 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2515 := &x.ObjectMeta
				yyv2515.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2516 := &x.Spec
				yyv2516.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2517 := &x.Status
				yyv2517.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2512)
		} // end switch yys2512
	} // end for yyj2512
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2518 int
	var yyb2518 bool
	var yyhl2518 bool = l >= 0
	yyj2518++
	if yyhl2518 {
		yyb2518 = yyj2518 > l
	} else {
		yyb2518 = r.CheckBreak()
	}
	if yyb2518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2518++
	if yyhl2518 {
		yyb2518 = yyj2518 > l
	} else {
		yyb2518 = r.CheckBreak()
	}
	if yyb2518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2518++
	if yyhl2518 {
		yyb2518 = yyj2518 > l
	} else {
		yyb2518 = r.CheckBreak()
	}
	if yyb2518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2521 := &x.ObjectMeta
		yyv2521.CodecDecodeSelf(d)
	}
	yyj2518++
	if yyhl2518 {
		yyb2518 = yyj2518 > l
	} else {
		yyb2518 = r.CheckBreak()
	}
	if yyb2518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2522 := &x.Spec
		yyv2522.CodecDecodeSelf(d)
	}
	yyj2518++
	if yyhl2518 {
		yyb2518 = yyj2518 > l
	} else {
		yyb2518 = r.CheckBreak()
	}
	if yyb2518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2523 := &x.Status
		yyv2523.CodecDecodeSelf(d)
	}
	for {
		yyj2518++
		if yyhl2518 {
			yyb2518 = yyj2518 > l
		} else {
			yyb2518 = r.CheckBreak()
		}
		if yyb2518 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2518-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2524 := z.EncBinary()
		_ = yym2524
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2525 := !z.EncBinary()
			yy2arr2525 := z.EncBasicHandle().StructToArray
			var yyq2525 [4]bool
			_, _, _ = yysep2525, yyq2525, yy2arr2525
			const yyr2525 bool = false
			yyq2525[0] = x.Kind != ""
			yyq2525[1] = x.APIVersion != ""
			yyq2525[2] = true
			var yynn2525 int
			if yyr2525 || yy2arr2525 {
				r.EncodeArrayStart(4)
			} else {
				yynn2525 = 1
				for _, b := range yyq2525 {
					if b {
						yynn2525++
					}
				}
				r.EncodeMapStart(yynn2525)
				yynn2525 = 0
			}
			if yyr2525 || yy2arr2525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2525[0] {
					yym2527 := z.EncBinary()
					_ = yym2527
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2525[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2528 := z.EncBinary()
					_ = yym2528
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2525 || yy2arr2525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2525[1] {
					yym2530 := z.EncBinary()
					_ = yym2530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2525[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2531 := z.EncBinary()
					_ = yym2531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2525 || yy2arr2525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2525[2] {
					yy2533 := &x.ListMeta
					yym2534 := z.EncBinary()
					_ = yym2534
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2533) {
					} else {
						z.EncFallback(yy2533)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2525[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2535 := &x.ListMeta
					yym2536 := z.EncBinary()
					_ = yym2536
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2535) {
					} else {
						z.EncFallback(yy2535)
					}
				}
			}
			if yyr2525 || yy2arr2525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2538 := z.EncBinary()
					_ = yym2538
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2539 := z.EncBinary()
					_ = yym2539
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2525 || yy2arr2525 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2540 := z.DecBinary()
	_ = yym2540
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2541 := r.ContainerType()
		if yyct2541 == codecSelferValueTypeMap1234 {
			yyl2541 := r.ReadMapStart()
			if yyl2541 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2541, d)
			}
		} else if yyct2541 == codecSelferValueTypeArray1234 {
			yyl2541 := r.ReadArrayStart()
			if yyl2541 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2541, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2542Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2542Slc
	var yyhl2542 bool = l >= 0
	for yyj2542 := 0; ; yyj2542++ {
		if yyhl2542 {
			if yyj2542 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2542Slc = r.DecodeBytes(yys2542Slc, true, true)
		yys2542 := string(yys2542Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2542 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv2545 := &x.ListMeta
				yym2546 := z.DecBinary()
				_ = yym2546
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2545) {
				} else {
					z.DecFallback(yyv2545, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2547 := &x.Items
				yym2548 := z.DecBinary()
				_ = yym2548
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2547), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2542)
		} // end switch yys2542
	} // end for yyj2542
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2549 int
	var yyb2549 bool
	var yyhl2549 bool = l >= 0
	yyj2549++
	if yyhl2549 {
		yyb2549 = yyj2549 > l
	} else {
		yyb2549 = r.CheckBreak()
	}
	if yyb2549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2549++
	if yyhl2549 {
		yyb2549 = yyj2549 > l
	} else {
		yyb2549 = r.CheckBreak()
	}
	if yyb2549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2549++
	if yyhl2549 {
		yyb2549 = yyj2549 > l
	} else {
		yyb2549 = r.CheckBreak()
	}
	if yyb2549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv2552 := &x.ListMeta
		yym2553 := z.DecBinary()
		_ = yym2553
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2552) {
		} else {
			z.DecFallback(yyv2552, false)
		}
	}
	yyj2549++
	if yyhl2549 {
		yyb2549 = yyj2549 > l
	} else {
		yyb2549 = r.CheckBreak()
	}
	if yyb2549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2554 := &x.Items
		yym2555 := z.DecBinary()
		_ = yym2555
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2554), d)
		}
	}
	for {
		yyj2549++
		if yyhl2549 {
			yyb2549 = yyj2549 > l
		} else {
			yyb2549 = r.CheckBreak()
		}
		if yyb2549 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2549-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2556 := z.EncBinary()
	_ = yym2556
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2557 := z.DecBinary()
	_ = yym2557
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2558 := z.EncBinary()
	_ = yym2558
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2559 := z.DecBinary()
	_ = yym2559
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2560 := z.EncBinary()
		_ = yym2560
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2561 := !z.EncBinary()
			yy2arr2561 := z.EncBasicHandle().StructToArray
			var yyq2561 [1]bool
			_, _, _ = yysep2561, yyq2561, yy2arr2561
			const yyr2561 bool = false
			yyq2561[0] = true
			var yynn2561 int
			if yyr2561 || yy2arr2561 {
				r.EncodeArrayStart(1)
			} else {
				yynn2561 = 0
				for _, b := range yyq2561 {
					if b {
						yynn2561++
					}
				}
				r.EncodeMapStart(yynn2561)
				yynn2561 = 0
			}
			if yyr2561 || yy2arr2561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2561[0] {
					yy2563 := &x.LoadBalancer
					yy2563.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2561[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2564 := &x.LoadBalancer
					yy2564.CodecEncodeSelf(e)
				}
			}
			if yyr2561 || yy2arr2561 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2565 := z.DecBinary()
	_ = yym2565
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2566 := r.ContainerType()
		if yyct2566 == codecSelferValueTypeMap1234 {
			yyl2566 := r.ReadMapStart()
			if yyl2566 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2566, d)
			}
		} else if yyct2566 == codecSelferValueTypeArray1234 {
			yyl2566 := r.ReadArrayStart()
			if yyl2566 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2566, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2567Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2567Slc
	var yyhl2567 bool = l >= 0
	for yyj2567 := 0; ; yyj2567++ {
		if yyhl2567 {
			if yyj2567 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2567Slc = r.DecodeBytes(yys2567Slc, true, true)
		yys2567 := string(yys2567Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2567 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2568 := &x.LoadBalancer
				yyv2568.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2567)
		} // end switch yys2567
	} // end for yyj2567
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2569 int
	var yyb2569 bool
	var yyhl2569 bool = l >= 0
	yyj2569++
	if yyhl2569 {
		yyb2569 = yyj2569 > l
	} else {
		yyb2569 = r.CheckBreak()
	}
	if yyb2569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2570 := &x.LoadBalancer
		yyv2570.CodecDecodeSelf(d)
	}
	for {
		yyj2569++
		if yyhl2569 {
			yyb2569 = yyj2569 > l
		} else {
			yyb2569 = r.CheckBreak()
		}
		if yyb2569 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2569-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2571 := z.EncBinary()
		_ = yym2571
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2572 := !z.EncBinary()
			yy2arr2572 := z.EncBasicHandle().StructToArray
			var yyq2572 [1]bool
			_, _, _ = yysep2572, yyq2572, yy2arr2572
			const yyr2572 bool = false
			yyq2572[0] = len(x.Ingress) != 0
			var yynn2572 int
			if yyr2572 || yy2arr2572 {
				r.EncodeArrayStart(1)
			} else {
				yynn2572 = 0
				for _, b := range yyq2572 {
					if b {
						yynn2572++
					}
				}
				r.EncodeMapStart(yynn2572)
				yynn2572 = 0
			}
			if yyr2572 || yy2arr2572 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2572[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2574 := z.EncBinary()
						_ = yym2574
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2572[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2575 := z.EncBinary()
						_ = yym2575
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2572 || yy2arr2572 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2576 := z.DecBinary()
	_ = yym2576
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2577 := r.ContainerType()
		if yyct2577 == codecSelferValueTypeMap1234 {
			yyl2577 := r.ReadMapStart()
			if yyl2577 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2577, d)
			}
		} else if yyct2577 == codecSelferValueTypeArray1234 {
			yyl2577 := r.ReadArrayStart()
			if yyl2577 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2577, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2578Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2578Slc
	var yyhl2578 bool = l >= 0
	for yyj2578 := 0; ; yyj2578++ {
		if yyhl2578 {
			if yyj2578 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2578Slc = r.DecodeBytes(yys2578Slc, true, true)
		yys2578 := string(yys2578Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2578 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2579 := &x.Ingress
				yym2580 := z.DecBinary()
				_ = yym2580
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2579), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2578)
		} // end switch yys2578
	} // end for yyj2578
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2581 int
	var yyb2581 bool
	var yyhl2581 bool = l >= 0
	yyj2581++
	if yyhl2581 {
		yyb2581 = yyj2581 > l
	} else {
		yyb2581 = r.CheckBreak()
	}
	if yyb2581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2582 := &x.Ingress
		yym2583 := z.DecBinary()
		_ = yym2583
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2582), d)
		}
	}
	for {
		yyj2581++
		if yyhl2581 {
			yyb2581 = yyj2581 > l
		} else {
			yyb2581 = r.CheckBreak()
		}
		if yyb2581 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2581-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2584 := z.EncBinary()
		_ = yym2584
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2585 := !z.EncBinary()
			yy2arr2585 := z.EncBasicHandle().StructToArray
			var yyq2585 [2]bool
			_, _, _ = yysep2585, yyq2585, yy2arr2585
			const yyr2585 bool = false
			yyq2585[0] = x.IP != ""
			yyq2585[1] = x.Hostname != ""
			var yynn2585 int
			if yyr2585 || yy2arr2585 {
				r.EncodeArrayStart(2)
			} else {
				yynn2585 = 0
				for _, b := range yyq2585 {
					if b {
						yynn2585++
					}
				}
				r.EncodeMapStart(yynn2585)
				yynn2585 = 0
			}
			if yyr2585 || yy2arr2585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2585[0] {
					yym2587 := z.EncBinary()
					_ = yym2587
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2585[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2588 := z.EncBinary()
					_ = yym2588
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2585 || yy2arr2585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2585[1] {
					yym2590 := z.EncBinary()
					_ = yym2590
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2585[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2591 := z.EncBinary()
					_ = yym2591
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2585 || yy2arr2585 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2592 := z.DecBinary()
	_ = yym2592
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2593 := r.ContainerType()
		if yyct2593 == codecSelferValueTypeMap1234 {
			yyl2593 := r.ReadMapStart()
			if yyl2593 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2593, d)
			}
		} else if yyct2593 == codecSelferValueTypeArray1234 {
			yyl2593 := r.ReadArrayStart()
			if yyl2593 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2593, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2594Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2594Slc
	var yyhl2594 bool = l >= 0
	for yyj2594 := 0; ; yyj2594++ {
		if yyhl2594 {
			if yyj2594 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2594Slc = r.DecodeBytes(yys2594Slc, true, true)
		yys2594 := string(yys2594Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2594 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2594)
		} // end switch yys2594
	} // end for yyj2594
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2597 int
	var yyb2597 bool
	var yyhl2597 bool = l >= 0
	yyj2597++
	if yyhl2597 {
		yyb2597 = yyj2597 > l
	} else {
		yyb2597 = r.CheckBreak()
	}
	if yyb2597 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2597++
	if yyhl2597 {
		yyb2597 = yyj2597 > l
	} else {
		yyb2597 = r.CheckBreak()
	}
	if yyb2597 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2597++
		if yyhl2597 {
			yyb2597 = yyj2597 > l
		} else {
			yyb2597 = r.CheckBreak()
		}
		if yyb2597 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2597-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2600 := z.EncBinary()
		_ = yym2600
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2601 := !z.EncBinary()
			yy2arr2601 := z.EncBasicHandle().StructToArray
			var yyq2601 [10]bool
			_, _, _ = yysep2601, yyq2601, yy2arr2601
			const yyr2601 bool = false
			yyq2601[0] = len(x.Ports) != 0
			yyq2601[1] = len(x.Selector) != 0
			yyq2601[2] = x.ClusterIP != ""
			yyq2601[3] = x.Type != ""
			yyq2601[4] = len(x.ExternalIPs) != 0
			yyq2601[5] = len(x.DeprecatedPublicIPs) != 0
			yyq2601[6] = x.SessionAffinity != ""
			yyq2601[7] = x.LoadBalancerIP != ""
			yyq2601[8] = len(x.LoadBalancerSourceRanges) != 0
			yyq2601[9] = x.ExternalName != ""
			var yynn2601 int
			if yyr2601 || yy2arr2601 {
				r.EncodeArrayStart(10)
			} else {
				yynn2601 = 0
				for _, b := range yyq2601 {
					if b {
						yynn2601++
					}
				}
				r.EncodeMapStart(yynn2601)
				yynn2601 = 0
			}
			if yyr2601 || yy2arr2601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2601[0] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2603 := z.EncBinary()
						_ = yym2603
						if false {
						} else {
							h.encSliceServicePort(([]ServicePort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2601[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2604 := z.EncBinary()
						_ = yym2604
						if false {
						} else {
							h.encSliceServicePort(([]ServicePort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2601 || yy2arr2601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2601[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2606 := z.EncBinary()
						_ = yym2606
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2601[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2607 := z.EncBinary()
						_ = yym2607
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2601 || yy2arr2601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2601[2] {
					yym2609 := z.EncBinary()
					_ = yym2609
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2601[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2610 := z.EncBinary()
					_ = yym2610
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2601 || yy2arr2601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2601[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2601[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2601 || yy2arr2601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2601[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2613 := z.EncBinary()
						_ = yym2613
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2601[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2614 := z.EncBinary()
						_ = yym2614
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2601 || yy2arr2601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2601[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2616 := z.EncBinary()
						_ = yym2616
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2601[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2617 := z.EncBinary()
						_ = yym2617
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr2601 || yy2arr2601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2601[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2601[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2601 || yy2arr2601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2601[7] {
					yym2620 := z.EncBinary()
					_ = yym2620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2601[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2621 := z.EncBinary()
					_ = yym2621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2601 || yy2arr2601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2601[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2623 := z.EncBinary()
						_ = yym2623
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2601[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2624 := z.EncBinary()
						_ = yym2624
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2601 || yy2arr2601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2601[9] {
					yym2626 := z.EncBinary()
					_ = yym2626
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2601[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2627 := z.EncBinary()
					_ = yym2627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				}
			}
			if yyr2601 || yy2arr2601 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2628 := z.DecBinary()
	_ = yym2628
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2629 := r.ContainerType()
		if yyct2629 == codecSelferValueTypeMap1234 {
			yyl2629 := r.ReadMapStart()
			if yyl2629 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2629, d)
			}
		} else if yyct2629 == codecSelferValueTypeArray1234 {
			yyl2629 := r.ReadArrayStart()
			if yyl2629 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2629, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2630Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2630Slc
	var yyhl2630 bool = l >= 0
	for yyj2630 := 0; ; yyj2630++ {
		if yyhl2630 {
			if yyj2630 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2630Slc = r.DecodeBytes(yys2630Slc, true, true)
		yys2630 := string(yys2630Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2630 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2631 := &x.Ports
				yym2632 := z.DecBinary()
				_ = yym2632
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2631), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2633 := &x.Selector
				yym2634 := z.DecBinary()
				_ = yym2634
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2633, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2637 := &x.ExternalIPs
				yym2638 := z.DecBinary()
				_ = yym2638
				if false {
				} else {
					z.F.DecSliceStringX(yyv2637, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv2639 := &x.DeprecatedPublicIPs
				yym2640 := z.DecBinary()
				_ = yym2640
				if false {
				} else {
					z.F.DecSliceStringX(yyv2639, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2643 := &x.LoadBalancerSourceRanges
				yym2644 := z.DecBinary()
				_ = yym2644
				if false {
				} else {
					z.F.DecSliceStringX(yyv2643, false, d)
				}
			}
		case "externalName":
			if r.TryDecodeAsNil() {
				x.ExternalName = ""
			} else {
				x.ExternalName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2630)
		} // end switch yys2630
	} // end for yyj2630
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2646 int
	var yyb2646 bool
	var yyhl2646 bool = l >= 0
	yyj2646++
	if yyhl2646 {
		yyb2646 = yyj2646 > l
	} else {
		yyb2646 = r.CheckBreak()
	}
	if yyb2646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2647 := &x.Ports
		yym2648 := z.DecBinary()
		_ = yym2648
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2647), d)
		}
	}
	yyj2646++
	if yyhl2646 {
		yyb2646 = yyj2646 > l
	} else {
		yyb2646 = r.CheckBreak()
	}
	if yyb2646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2649 := &x.Selector
		yym2650 := z.DecBinary()
		_ = yym2650
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2649, false, d)
		}
	}
	yyj2646++
	if yyhl2646 {
		yyb2646 = yyj2646 > l
	} else {
		yyb2646 = r.CheckBreak()
	}
	if yyb2646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2646++
	if yyhl2646 {
		yyb2646 = yyj2646 > l
	} else {
		yyb2646 = r.CheckBreak()
	}
	if yyb2646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2646++
	if yyhl2646 {
		yyb2646 = yyj2646 > l
	} else {
		yyb2646 = r.CheckBreak()
	}
	if yyb2646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2653 := &x.ExternalIPs
		yym2654 := z.DecBinary()
		_ = yym2654
		if false {
		} else {
			z.F.DecSliceStringX(yyv2653, false, d)
		}
	}
	yyj2646++
	if yyhl2646 {
		yyb2646 = yyj2646 > l
	} else {
		yyb2646 = r.CheckBreak()
	}
	if yyb2646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv2655 := &x.DeprecatedPublicIPs
		yym2656 := z.DecBinary()
		_ = yym2656
		if false {
		} else {
			z.F.DecSliceStringX(yyv2655, false, d)
		}
	}
	yyj2646++
	if yyhl2646 {
		yyb2646 = yyj2646 > l
	} else {
		yyb2646 = r.CheckBreak()
	}
	if yyb2646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2646++
	if yyhl2646 {
		yyb2646 = yyj2646 > l
	} else {
		yyb2646 = r.CheckBreak()
	}
	if yyb2646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2646++
	if yyhl2646 {
		yyb2646 = yyj2646 > l
	} else {
		yyb2646 = r.CheckBreak()
	}
	if yyb2646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2659 := &x.LoadBalancerSourceRanges
		yym2660 := z.DecBinary()
		_ = yym2660
		if false {
		} else {
			z.F.DecSliceStringX(yyv2659, false, d)
		}
	}
	yyj2646++
	if yyhl2646 {
		yyb2646 = yyj2646 > l
	} else {
		yyb2646 = r.CheckBreak()
	}
	if yyb2646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalName = ""
	} else {
		x.ExternalName = string(r.DecodeString())
	}
	for {
		yyj2646++
		if yyhl2646 {
			yyb2646 = yyj2646 > l
		} else {
			yyb2646 = r.CheckBreak()
		}
		if yyb2646 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2646-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2662 := z.EncBinary()
		_ = yym2662
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2663 := !z.EncBinary()
			yy2arr2663 := z.EncBasicHandle().StructToArray
			var yyq2663 [5]bool
			_, _, _ = yysep2663, yyq2663, yy2arr2663
			const yyr2663 bool = false
			yyq2663[0] = x.Name != ""
			yyq2663[1] = x.Protocol != ""
			yyq2663[3] = true
			yyq2663[4] = x.NodePort != 0
			var yynn2663 int
			if yyr2663 || yy2arr2663 {
				r.EncodeArrayStart(5)
			} else {
				yynn2663 = 1
				for _, b := range yyq2663 {
					if b {
						yynn2663++
					}
				}
				r.EncodeMapStart(yynn2663)
				yynn2663 = 0
			}
			if yyr2663 || yy2arr2663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2663[0] {
					yym2665 := z.EncBinary()
					_ = yym2665
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2663[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2666 := z.EncBinary()
					_ = yym2666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2663 || yy2arr2663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2663[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2663[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2663 || yy2arr2663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2669 := z.EncBinary()
				_ = yym2669
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2670 := z.EncBinary()
				_ = yym2670
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2663 || yy2arr2663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2663[3] {
					yy2672 := &x.TargetPort
					yym2673 := z.EncBinary()
					_ = yym2673
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2672) {
					} else if !yym2673 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2672)
					} else {
						z.EncFallback(yy2672)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2663[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2674 := &x.TargetPort
					yym2675 := z.EncBinary()
					_ = yym2675
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2674) {
					} else if !yym2675 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2674)
					} else {
						z.EncFallback(yy2674)
					}
				}
			}
			if yyr2663 || yy2arr2663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2663[4] {
					yym2677 := z.EncBinary()
					_ = yym2677
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2663[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2678 := z.EncBinary()
					_ = yym2678
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yyr2663 || yy2arr2663 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2679 := z.DecBinary()
	_ = yym2679
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2680 := r.ContainerType()
		if yyct2680 == codecSelferValueTypeMap1234 {
			yyl2680 := r.ReadMapStart()
			if yyl2680 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2680, d)
			}
		} else if yyct2680 == codecSelferValueTypeArray1234 {
			yyl2680 := r.ReadArrayStart()
			if yyl2680 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2680, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2681Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2681Slc
	var yyhl2681 bool = l >= 0
	for yyj2681 := 0; ; yyj2681++ {
		if yyhl2681 {
			if yyj2681 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2681Slc = r.DecodeBytes(yys2681Slc, true, true)
		yys2681 := string(yys2681Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2681 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2685 := &x.TargetPort
				yym2686 := z.DecBinary()
				_ = yym2686
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2685) {
				} else if !yym2686 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2685)
				} else {
					z.DecFallback(yyv2685, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2681)
		} // end switch yys2681
	} // end for yyj2681
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2688 int
	var yyb2688 bool
	var yyhl2688 bool = l >= 0
	yyj2688++
	if yyhl2688 {
		yyb2688 = yyj2688 > l
	} else {
		yyb2688 = r.CheckBreak()
	}
	if yyb2688 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2688++
	if yyhl2688 {
		yyb2688 = yyj2688 > l
	} else {
		yyb2688 = r.CheckBreak()
	}
	if yyb2688 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2688++
	if yyhl2688 {
		yyb2688 = yyj2688 > l
	} else {
		yyb2688 = r.CheckBreak()
	}
	if yyb2688 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2688++
	if yyhl2688 {
		yyb2688 = yyj2688 > l
	} else {
		yyb2688 = r.CheckBreak()
	}
	if yyb2688 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2692 := &x.TargetPort
		yym2693 := z.DecBinary()
		_ = yym2693
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2692) {
		} else if !yym2693 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2692)
		} else {
			z.DecFallback(yyv2692, false)
		}
	}
	yyj2688++
	if yyhl2688 {
		yyb2688 = yyj2688 > l
	} else {
		yyb2688 = r.CheckBreak()
	}
	if yyb2688 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2688++
		if yyhl2688 {
			yyb2688 = yyj2688 > l
		} else {
			yyb2688 = r.CheckBreak()
		}
		if yyb2688 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2688-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2695 := z.EncBinary()
		_ = yym2695
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2696 := !z.EncBinary()
			yy2arr2696 := z.EncBasicHandle().StructToArray
			var yyq2696 [5]bool
			_, _, _ = yysep2696, yyq2696, yy2arr2696
			const yyr2696 bool = false
			yyq2696[0] = x.Kind != ""
			yyq2696[1] = x.APIVersion != ""
			yyq2696[2] = true
			yyq2696[3] = true
			yyq2696[4] = true
			var yynn2696 int
			if yyr2696 || yy2arr2696 {
				r.EncodeArrayStart(5)
			} else {
				yynn2696 = 0
				for _, b := range yyq2696 {
					if b {
						yynn2696++
					}
				}
				r.EncodeMapStart(yynn2696)
				yynn2696 = 0
			}
			if yyr2696 || yy2arr2696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2696[0] {
					yym2698 := z.EncBinary()
					_ = yym2698
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2696[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2699 := z.EncBinary()
					_ = yym2699
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2696 || yy2arr2696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2696[1] {
					yym2701 := z.EncBinary()
					_ = yym2701
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2696[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2702 := z.EncBinary()
					_ = yym2702
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2696 || yy2arr2696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2696[2] {
					yy2704 := &x.ObjectMeta
					yy2704.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2696[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2705 := &x.ObjectMeta
					yy2705.CodecEncodeSelf(e)
				}
			}
			if yyr2696 || yy2arr2696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2696[3] {
					yy2707 := &x.Spec
					yy2707.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2696[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2708 := &x.Spec
					yy2708.CodecEncodeSelf(e)
				}
			}
			if yyr2696 || yy2arr2696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2696[4] {
					yy2710 := &x.Status
					yy2710.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2696[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2711 := &x.Status
					yy2711.CodecEncodeSelf(e)
				}
			}
			if yyr2696 || yy2arr2696 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2712 := z.DecBinary()
	_ = yym2712
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2713 := r.ContainerType()
		if yyct2713 == codecSelferValueTypeMap1234 {
			yyl2713 := r.ReadMapStart()
			if yyl2713 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2713, d)
			}
		} else if yyct2713 == codecSelferValueTypeArray1234 {
			yyl2713 := r.ReadArrayStart()
			if yyl2713 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2713, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2714Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2714Slc
	var yyhl2714 bool = l >= 0
	for yyj2714 := 0; ; yyj2714++ {
		if yyhl2714 {
			if yyj2714 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2714Slc = r.DecodeBytes(yys2714Slc, true, true)
		yys2714 := string(yys2714Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2714 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2717 := &x.ObjectMeta
				yyv2717.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2718 := &x.Spec
				yyv2718.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2719 := &x.Status
				yyv2719.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2714)
		} // end switch yys2714
	} // end for yyj2714
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2720 int
	var yyb2720 bool
	var yyhl2720 bool = l >= 0
	yyj2720++
	if yyhl2720 {
		yyb2720 = yyj2720 > l
	} else {
		yyb2720 = r.CheckBreak()
	}
	if yyb2720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2720++
	if yyhl2720 {
		yyb2720 = yyj2720 > l
	} else {
		yyb2720 = r.CheckBreak()
	}
	if yyb2720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2720++
	if yyhl2720 {
		yyb2720 = yyj2720 > l
	} else {
		yyb2720 = r.CheckBreak()
	}
	if yyb2720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2723 := &x.ObjectMeta
		yyv2723.CodecDecodeSelf(d)
	}
	yyj2720++
	if yyhl2720 {
		yyb2720 = yyj2720 > l
	} else {
		yyb2720 = r.CheckBreak()
	}
	if yyb2720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2724 := &x.Spec
		yyv2724.CodecDecodeSelf(d)
	}
	yyj2720++
	if yyhl2720 {
		yyb2720 = yyj2720 > l
	} else {
		yyb2720 = r.CheckBreak()
	}
	if yyb2720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2725 := &x.Status
		yyv2725.CodecDecodeSelf(d)
	}
	for {
		yyj2720++
		if yyhl2720 {
			yyb2720 = yyj2720 > l
		} else {
			yyb2720 = r.CheckBreak()
		}
		if yyb2720 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2720-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2726 := z.EncBinary()
		_ = yym2726
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2727 := !z.EncBinary()
			yy2arr2727 := z.EncBasicHandle().StructToArray
			var yyq2727 [4]bool
			_, _, _ = yysep2727, yyq2727, yy2arr2727
			const yyr2727 bool = false
			yyq2727[0] = x.Kind != ""
			yyq2727[1] = x.APIVersion != ""
			yyq2727[2] = true
			var yynn2727 int
			if yyr2727 || yy2arr2727 {
				r.EncodeArrayStart(4)
			} else {
				yynn2727 = 1
				for _, b := range yyq2727 {
					if b {
						yynn2727++
					}
				}
				r.EncodeMapStart(yynn2727)
				yynn2727 = 0
			}
			if yyr2727 || yy2arr2727 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2727[0] {
					yym2729 := z.EncBinary()
					_ = yym2729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2727[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2730 := z.EncBinary()
					_ = yym2730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2727 || yy2arr2727 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2727[1] {
					yym2732 := z.EncBinary()
					_ = yym2732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2727[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2733 := z.EncBinary()
					_ = yym2733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2727 || yy2arr2727 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2727[2] {
					yy2735 := &x.ListMeta
					yym2736 := z.EncBinary()
					_ = yym2736
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2735) {
					} else {
						z.EncFallback(yy2735)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2727[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2737 := &x.ListMeta
					yym2738 := z.EncBinary()
					_ = yym2738
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2737) {
					} else {
						z.EncFallback(yy2737)
					}
				}
			}
			if yyr2727 || yy2arr2727 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2740 := z.EncBinary()
					_ = yym2740
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2741 := z.EncBinary()
					_ = yym2741
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2727 || yy2arr2727 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2742 := z.DecBinary()
	_ = yym2742
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2743 := r.ContainerType()
		if yyct2743 == codecSelferValueTypeMap1234 {
			yyl2743 := r.ReadMapStart()
			if yyl2743 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2743, d)
			}
		} else if yyct2743 == codecSelferValueTypeArray1234 {
			yyl2743 := r.ReadArrayStart()
			if yyl2743 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2743, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2744Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2744Slc
	var yyhl2744 bool = l >= 0
	for yyj2744 := 0; ; yyj2744++ {
		if yyhl2744 {
			if yyj2744 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2744Slc = r.DecodeBytes(yys2744Slc, true, true)
		yys2744 := string(yys2744Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2744 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv2747 := &x.ListMeta
				yym2748 := z.DecBinary()
				_ = yym2748
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2747) {
				} else {
					z.DecFallback(yyv2747, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2749 := &x.Items
				yym2750 := z.DecBinary()
				_ = yym2750
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2749), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2744)
		} // end switch yys2744
	} // end for yyj2744
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2751 int
	var yyb2751 bool
	var yyhl2751 bool = l >= 0
	yyj2751++
	if yyhl2751 {
		yyb2751 = yyj2751 > l
	} else {
		yyb2751 = r.CheckBreak()
	}
	if yyb2751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2751++
	if yyhl2751 {
		yyb2751 = yyj2751 > l
	} else {
		yyb2751 = r.CheckBreak()
	}
	if yyb2751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2751++
	if yyhl2751 {
		yyb2751 = yyj2751 > l
	} else {
		yyb2751 = r.CheckBreak()
	}
	if yyb2751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv2754 := &x.ListMeta
		yym2755 := z.DecBinary()
		_ = yym2755
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2754) {
		} else {
			z.DecFallback(yyv2754, false)
		}
	}
	yyj2751++
	if yyhl2751 {
		yyb2751 = yyj2751 > l
	} else {
		yyb2751 = r.CheckBreak()
	}
	if yyb2751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2756 := &x.Items
		yym2757 := z.DecBinary()
		_ = yym2757
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2756), d)
		}
	}
	for {
		yyj2751++
		if yyhl2751 {
			yyb2751 = yyj2751 > l
		} else {
			yyb2751 = r.CheckBreak()
		}
		if yyb2751 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2751-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2758 := z.EncBinary()
		_ = yym2758
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2759 := !z.EncBinary()
			yy2arr2759 := z.EncBasicHandle().StructToArray
			var yyq2759 [5]bool
			_, _, _ = yysep2759, yyq2759, yy2arr2759
			const yyr2759 bool = false
			yyq2759[0] = x.Kind != ""
			yyq2759[1] = x.APIVersion != ""
			yyq2759[2] = true
			yyq2759[3] = len(x.Secrets) != 0
			yyq2759[4] = len(x.ImagePullSecrets) != 0
			var yynn2759 int
			if yyr2759 || yy2arr2759 {
				r.EncodeArrayStart(5)
			} else {
				yynn2759 = 0
				for _, b := range yyq2759 {
					if b {
						yynn2759++
					}
				}
				r.EncodeMapStart(yynn2759)
				yynn2759 = 0
			}
			if yyr2759 || yy2arr2759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2759[0] {
					yym2761 := z.EncBinary()
					_ = yym2761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2759[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2762 := z.EncBinary()
					_ = yym2762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2759 || yy2arr2759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2759[1] {
					yym2764 := z.EncBinary()
					_ = yym2764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2759[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2765 := z.EncBinary()
					_ = yym2765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2759 || yy2arr2759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2759[2] {
					yy2767 := &x.ObjectMeta
					yy2767.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2759[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2768 := &x.ObjectMeta
					yy2768.CodecEncodeSelf(e)
				}
			}
			if yyr2759 || yy2arr2759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2759[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2770 := z.EncBinary()
						_ = yym2770
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2759[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2771 := z.EncBinary()
						_ = yym2771
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2759 || yy2arr2759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2759[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2773 := z.EncBinary()
						_ = yym2773
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2759[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2774 := z.EncBinary()
						_ = yym2774
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2759 || yy2arr2759 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2775 := z.DecBinary()
	_ = yym2775
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2776 := r.ContainerType()
		if yyct2776 == codecSelferValueTypeMap1234 {
			yyl2776 := r.ReadMapStart()
			if yyl2776 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2776, d)
			}
		} else if yyct2776 == codecSelferValueTypeArray1234 {
			yyl2776 := r.ReadArrayStart()
			if yyl2776 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2776, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2777Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2777Slc
	var yyhl2777 bool = l >= 0
	for yyj2777 := 0; ; yyj2777++ {
		if yyhl2777 {
			if yyj2777 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2777Slc = r.DecodeBytes(yys2777Slc, true, true)
		yys2777 := string(yys2777Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2777 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2780 := &x.ObjectMeta
				yyv2780.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2781 := &x.Secrets
				yym2782 := z.DecBinary()
				_ = yym2782
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2781), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2783 := &x.ImagePullSecrets
				yym2784 := z.DecBinary()
				_ = yym2784
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2783), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2777)
		} // end switch yys2777
	} // end for yyj2777
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2785 int
	var yyb2785 bool
	var yyhl2785 bool = l >= 0
	yyj2785++
	if yyhl2785 {
		yyb2785 = yyj2785 > l
	} else {
		yyb2785 = r.CheckBreak()
	}
	if yyb2785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2785++
	if yyhl2785 {
		yyb2785 = yyj2785 > l
	} else {
		yyb2785 = r.CheckBreak()
	}
	if yyb2785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2785++
	if yyhl2785 {
		yyb2785 = yyj2785 > l
	} else {
		yyb2785 = r.CheckBreak()
	}
	if yyb2785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2788 := &x.ObjectMeta
		yyv2788.CodecDecodeSelf(d)
	}
	yyj2785++
	if yyhl2785 {
		yyb2785 = yyj2785 > l
	} else {
		yyb2785 = r.CheckBreak()
	}
	if yyb2785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2789 := &x.Secrets
		yym2790 := z.DecBinary()
		_ = yym2790
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2789), d)
		}
	}
	yyj2785++
	if yyhl2785 {
		yyb2785 = yyj2785 > l
	} else {
		yyb2785 = r.CheckBreak()
	}
	if yyb2785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2791 := &x.ImagePullSecrets
		yym2792 := z.DecBinary()
		_ = yym2792
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2791), d)
		}
	}
	for {
		yyj2785++
		if yyhl2785 {
			yyb2785 = yyj2785 > l
		} else {
			yyb2785 = r.CheckBreak()
		}
		if yyb2785 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2785-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2793 := z.EncBinary()
		_ = yym2793
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2794 := !z.EncBinary()
			yy2arr2794 := z.EncBasicHandle().StructToArray
			var yyq2794 [4]bool
			_, _, _ = yysep2794, yyq2794, yy2arr2794
			const yyr2794 bool = false
			yyq2794[0] = x.Kind != ""
			yyq2794[1] = x.APIVersion != ""
			yyq2794[2] = true
			var yynn2794 int
			if yyr2794 || yy2arr2794 {
				r.EncodeArrayStart(4)
			} else {
				yynn2794 = 1
				for _, b := range yyq2794 {
					if b {
						yynn2794++
					}
				}
				r.EncodeMapStart(yynn2794)
				yynn2794 = 0
			}
			if yyr2794 || yy2arr2794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2794[0] {
					yym2796 := z.EncBinary()
					_ = yym2796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2794[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2797 := z.EncBinary()
					_ = yym2797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2794 || yy2arr2794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2794[1] {
					yym2799 := z.EncBinary()
					_ = yym2799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2794[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2800 := z.EncBinary()
					_ = yym2800
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2794 || yy2arr2794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2794[2] {
					yy2802 := &x.ListMeta
					yym2803 := z.EncBinary()
					_ = yym2803
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2802) {
					} else {
						z.EncFallback(yy2802)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2794[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2804 := &x.ListMeta
					yym2805 := z.EncBinary()
					_ = yym2805
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2804) {
					} else {
						z.EncFallback(yy2804)
					}
				}
			}
			if yyr2794 || yy2arr2794 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2807 := z.EncBinary()
					_ = yym2807
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2808 := z.EncBinary()
					_ = yym2808
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2794 || yy2arr2794 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2809 := z.DecBinary()
	_ = yym2809
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2810 := r.ContainerType()
		if yyct2810 == codecSelferValueTypeMap1234 {
			yyl2810 := r.ReadMapStart()
			if yyl2810 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2810, d)
			}
		} else if yyct2810 == codecSelferValueTypeArray1234 {
			yyl2810 := r.ReadArrayStart()
			if yyl2810 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2810, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2811Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2811Slc
	var yyhl2811 bool = l >= 0
	for yyj2811 := 0; ; yyj2811++ {
		if yyhl2811 {
			if yyj2811 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2811Slc = r.DecodeBytes(yys2811Slc, true, true)
		yys2811 := string(yys2811Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2811 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv2814 := &x.ListMeta
				yym2815 := z.DecBinary()
				_ = yym2815
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2814) {
				} else {
					z.DecFallback(yyv2814, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2816 := &x.Items
				yym2817 := z.DecBinary()
				_ = yym2817
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2816), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2811)
		} // end switch yys2811
	} // end for yyj2811
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2818 int
	var yyb2818 bool
	var yyhl2818 bool = l >= 0
	yyj2818++
	if yyhl2818 {
		yyb2818 = yyj2818 > l
	} else {
		yyb2818 = r.CheckBreak()
	}
	if yyb2818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2818++
	if yyhl2818 {
		yyb2818 = yyj2818 > l
	} else {
		yyb2818 = r.CheckBreak()
	}
	if yyb2818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2818++
	if yyhl2818 {
		yyb2818 = yyj2818 > l
	} else {
		yyb2818 = r.CheckBreak()
	}
	if yyb2818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv2821 := &x.ListMeta
		yym2822 := z.DecBinary()
		_ = yym2822
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2821) {
		} else {
			z.DecFallback(yyv2821, false)
		}
	}
	yyj2818++
	if yyhl2818 {
		yyb2818 = yyj2818 > l
	} else {
		yyb2818 = r.CheckBreak()
	}
	if yyb2818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2823 := &x.Items
		yym2824 := z.DecBinary()
		_ = yym2824
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2823), d)
		}
	}
	for {
		yyj2818++
		if yyhl2818 {
			yyb2818 = yyj2818 > l
		} else {
			yyb2818 = r.CheckBreak()
		}
		if yyb2818 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2818-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2825 := z.EncBinary()
		_ = yym2825
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2826 := !z.EncBinary()
			yy2arr2826 := z.EncBasicHandle().StructToArray
			var yyq2826 [4]bool
			_, _, _ = yysep2826, yyq2826, yy2arr2826
			const yyr2826 bool = false
			yyq2826[0] = x.Kind != ""
			yyq2826[1] = x.APIVersion != ""
			yyq2826[2] = true
			var yynn2826 int
			if yyr2826 || yy2arr2826 {
				r.EncodeArrayStart(4)
			} else {
				yynn2826 = 1
				for _, b := range yyq2826 {
					if b {
						yynn2826++
					}
				}
				r.EncodeMapStart(yynn2826)
				yynn2826 = 0
			}
			if yyr2826 || yy2arr2826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2826[0] {
					yym2828 := z.EncBinary()
					_ = yym2828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2826[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2829 := z.EncBinary()
					_ = yym2829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2826 || yy2arr2826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2826[1] {
					yym2831 := z.EncBinary()
					_ = yym2831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2826[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2832 := z.EncBinary()
					_ = yym2832
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2826 || yy2arr2826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2826[2] {
					yy2834 := &x.ObjectMeta
					yy2834.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2826[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2835 := &x.ObjectMeta
					yy2835.CodecEncodeSelf(e)
				}
			}
			if yyr2826 || yy2arr2826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2837 := z.EncBinary()
					_ = yym2837
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2838 := z.EncBinary()
					_ = yym2838
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2826 || yy2arr2826 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2839 := z.DecBinary()
	_ = yym2839
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2840 := r.ContainerType()
		if yyct2840 == codecSelferValueTypeMap1234 {
			yyl2840 := r.ReadMapStart()
			if yyl2840 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2840, d)
			}
		} else if yyct2840 == codecSelferValueTypeArray1234 {
			yyl2840 := r.ReadArrayStart()
			if yyl2840 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2840, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2841Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2841Slc
	var yyhl2841 bool = l >= 0
	for yyj2841 := 0; ; yyj2841++ {
		if yyhl2841 {
			if yyj2841 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2841Slc = r.DecodeBytes(yys2841Slc, true, true)
		yys2841 := string(yys2841Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2841 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2844 := &x.ObjectMeta
				yyv2844.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2845 := &x.Subsets
				yym2846 := z.DecBinary()
				_ = yym2846
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2845), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2841)
		} // end switch yys2841
	} // end for yyj2841
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2847 int
	var yyb2847 bool
	var yyhl2847 bool = l >= 0
	yyj2847++
	if yyhl2847 {
		yyb2847 = yyj2847 > l
	} else {
		yyb2847 = r.CheckBreak()
	}
	if yyb2847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2847++
	if yyhl2847 {
		yyb2847 = yyj2847 > l
	} else {
		yyb2847 = r.CheckBreak()
	}
	if yyb2847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2847++
	if yyhl2847 {
		yyb2847 = yyj2847 > l
	} else {
		yyb2847 = r.CheckBreak()
	}
	if yyb2847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2850 := &x.ObjectMeta
		yyv2850.CodecDecodeSelf(d)
	}
	yyj2847++
	if yyhl2847 {
		yyb2847 = yyj2847 > l
	} else {
		yyb2847 = r.CheckBreak()
	}
	if yyb2847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2851 := &x.Subsets
		yym2852 := z.DecBinary()
		_ = yym2852
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2851), d)
		}
	}
	for {
		yyj2847++
		if yyhl2847 {
			yyb2847 = yyj2847 > l
		} else {
			yyb2847 = r.CheckBreak()
		}
		if yyb2847 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2847-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2853 := z.EncBinary()
		_ = yym2853
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2854 := !z.EncBinary()
			yy2arr2854 := z.EncBasicHandle().StructToArray
			var yyq2854 [3]bool
			_, _, _ = yysep2854, yyq2854, yy2arr2854
			const yyr2854 bool = false
			yyq2854[0] = len(x.Addresses) != 0
			yyq2854[1] = len(x.NotReadyAddresses) != 0
			yyq2854[2] = len(x.Ports) != 0
			var yynn2854 int
			if yyr2854 || yy2arr2854 {
				r.EncodeArrayStart(3)
			} else {
				yynn2854 = 0
				for _, b := range yyq2854 {
					if b {
						yynn2854++
					}
				}
				r.EncodeMapStart(yynn2854)
				yynn2854 = 0
			}
			if yyr2854 || yy2arr2854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2854[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2856 := z.EncBinary()
						_ = yym2856
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2854[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2857 := z.EncBinary()
						_ = yym2857
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2854 || yy2arr2854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2854[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2859 := z.EncBinary()
						_ = yym2859
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2854[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2860 := z.EncBinary()
						_ = yym2860
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2854 || yy2arr2854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2854[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2862 := z.EncBinary()
						_ = yym2862
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2854[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2863 := z.EncBinary()
						_ = yym2863
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2854 || yy2arr2854 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2864 := z.DecBinary()
	_ = yym2864
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2865 := r.ContainerType()
		if yyct2865 == codecSelferValueTypeMap1234 {
			yyl2865 := r.ReadMapStart()
			if yyl2865 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2865, d)
			}
		} else if yyct2865 == codecSelferValueTypeArray1234 {
			yyl2865 := r.ReadArrayStart()
			if yyl2865 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2865, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2866Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2866Slc
	var yyhl2866 bool = l >= 0
	for yyj2866 := 0; ; yyj2866++ {
		if yyhl2866 {
			if yyj2866 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2866Slc = r.DecodeBytes(yys2866Slc, true, true)
		yys2866 := string(yys2866Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2866 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2867 := &x.Addresses
				yym2868 := z.DecBinary()
				_ = yym2868
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2867), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2869 := &x.NotReadyAddresses
				yym2870 := z.DecBinary()
				_ = yym2870
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2869), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2871 := &x.Ports
				yym2872 := z.DecBinary()
				_ = yym2872
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2871), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2866)
		} // end switch yys2866
	} // end for yyj2866
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2873 int
	var yyb2873 bool
	var yyhl2873 bool = l >= 0
	yyj2873++
	if yyhl2873 {
		yyb2873 = yyj2873 > l
	} else {
		yyb2873 = r.CheckBreak()
	}
	if yyb2873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2874 := &x.Addresses
		yym2875 := z.DecBinary()
		_ = yym2875
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2874), d)
		}
	}
	yyj2873++
	if yyhl2873 {
		yyb2873 = yyj2873 > l
	} else {
		yyb2873 = r.CheckBreak()
	}
	if yyb2873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2876 := &x.NotReadyAddresses
		yym2877 := z.DecBinary()
		_ = yym2877
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2876), d)
		}
	}
	yyj2873++
	if yyhl2873 {
		yyb2873 = yyj2873 > l
	} else {
		yyb2873 = r.CheckBreak()
	}
	if yyb2873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2878 := &x.Ports
		yym2879 := z.DecBinary()
		_ = yym2879
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2878), d)
		}
	}
	for {
		yyj2873++
		if yyhl2873 {
			yyb2873 = yyj2873 > l
		} else {
			yyb2873 = r.CheckBreak()
		}
		if yyb2873 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2873-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2880 := z.EncBinary()
		_ = yym2880
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2881 := !z.EncBinary()
			yy2arr2881 := z.EncBasicHandle().StructToArray
			var yyq2881 [4]bool
			_, _, _ = yysep2881, yyq2881, yy2arr2881
			const yyr2881 bool = false
			yyq2881[1] = x.Hostname != ""
			yyq2881[2] = x.NodeName != nil
			yyq2881[3] = x.TargetRef != nil
			var yynn2881 int
			if yyr2881 || yy2arr2881 {
				r.EncodeArrayStart(4)
			} else {
				yynn2881 = 1
				for _, b := range yyq2881 {
					if b {
						yynn2881++
					}
				}
				r.EncodeMapStart(yynn2881)
				yynn2881 = 0
			}
			if yyr2881 || yy2arr2881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2883 := z.EncBinary()
				_ = yym2883
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2884 := z.EncBinary()
				_ = yym2884
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2881 || yy2arr2881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2881[1] {
					yym2886 := z.EncBinary()
					_ = yym2886
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2881[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2887 := z.EncBinary()
					_ = yym2887
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2881 || yy2arr2881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2881[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2889 := *x.NodeName
						yym2890 := z.EncBinary()
						_ = yym2890
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2889))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2881[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2891 := *x.NodeName
						yym2892 := z.EncBinary()
						_ = yym2892
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2891))
						}
					}
				}
			}
			if yyr2881 || yy2arr2881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2881[3] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2881[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2881 || yy2arr2881 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2894 := z.DecBinary()
	_ = yym2894
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2895 := r.ContainerType()
		if yyct2895 == codecSelferValueTypeMap1234 {
			yyl2895 := r.ReadMapStart()
			if yyl2895 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2895, d)
			}
		} else if yyct2895 == codecSelferValueTypeArray1234 {
			yyl2895 := r.ReadArrayStart()
			if yyl2895 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2895, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2896Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2896Slc
	var yyhl2896 bool = l >= 0
	for yyj2896 := 0; ; yyj2896++ {
		if yyhl2896 {
			if yyj2896 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2896Slc = r.DecodeBytes(yys2896Slc, true, true)
		yys2896 := string(yys2896Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2896 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2900 := z.DecBinary()
				_ = yym2900
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2896)
		} // end switch yys2896
	} // end for yyj2896
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2902 int
	var yyb2902 bool
	var yyhl2902 bool = l >= 0
	yyj2902++
	if yyhl2902 {
		yyb2902 = yyj2902 > l
	} else {
		yyb2902 = r.CheckBreak()
	}
	if yyb2902 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2902++
	if yyhl2902 {
		yyb2902 = yyj2902 > l
	} else {
		yyb2902 = r.CheckBreak()
	}
	if yyb2902 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2902++
	if yyhl2902 {
		yyb2902 = yyj2902 > l
	} else {
		yyb2902 = r.CheckBreak()
	}
	if yyb2902 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2906 := z.DecBinary()
		_ = yym2906
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2902++
	if yyhl2902 {
		yyb2902 = yyj2902 > l
	} else {
		yyb2902 = r.CheckBreak()
	}
	if yyb2902 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2902++
		if yyhl2902 {
			yyb2902 = yyj2902 > l
		} else {
			yyb2902 = r.CheckBreak()
		}
		if yyb2902 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2902-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2908 := z.EncBinary()
		_ = yym2908
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2909 := !z.EncBinary()
			yy2arr2909 := z.EncBasicHandle().StructToArray
			var yyq2909 [3]bool
			_, _, _ = yysep2909, yyq2909, yy2arr2909
			const yyr2909 bool = false
			yyq2909[0] = x.Name != ""
			yyq2909[2] = x.Protocol != ""
			var yynn2909 int
			if yyr2909 || yy2arr2909 {
				r.EncodeArrayStart(3)
			} else {
				yynn2909 = 1
				for _, b := range yyq2909 {
					if b {
						yynn2909++
					}
				}
				r.EncodeMapStart(yynn2909)
				yynn2909 = 0
			}
			if yyr2909 || yy2arr2909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2909[0] {
					yym2911 := z.EncBinary()
					_ = yym2911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2909[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2912 := z.EncBinary()
					_ = yym2912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2909 || yy2arr2909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2914 := z.EncBinary()
				_ = yym2914
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2915 := z.EncBinary()
				_ = yym2915
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2909 || yy2arr2909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2909[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2909[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2909 || yy2arr2909 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2917 := z.DecBinary()
	_ = yym2917
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2918 := r.ContainerType()
		if yyct2918 == codecSelferValueTypeMap1234 {
			yyl2918 := r.ReadMapStart()
			if yyl2918 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2918, d)
			}
		} else if yyct2918 == codecSelferValueTypeArray1234 {
			yyl2918 := r.ReadArrayStart()
			if yyl2918 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2918, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2919Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2919Slc
	var yyhl2919 bool = l >= 0
	for yyj2919 := 0; ; yyj2919++ {
		if yyhl2919 {
			if yyj2919 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2919Slc = r.DecodeBytes(yys2919Slc, true, true)
		yys2919 := string(yys2919Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2919 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2919)
		} // end switch yys2919
	} // end for yyj2919
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2923 int
	var yyb2923 bool
	var yyhl2923 bool = l >= 0
	yyj2923++
	if yyhl2923 {
		yyb2923 = yyj2923 > l
	} else {
		yyb2923 = r.CheckBreak()
	}
	if yyb2923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2923++
	if yyhl2923 {
		yyb2923 = yyj2923 > l
	} else {
		yyb2923 = r.CheckBreak()
	}
	if yyb2923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2923++
	if yyhl2923 {
		yyb2923 = yyj2923 > l
	} else {
		yyb2923 = r.CheckBreak()
	}
	if yyb2923 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2923++
		if yyhl2923 {
			yyb2923 = yyj2923 > l
		} else {
			yyb2923 = r.CheckBreak()
		}
		if yyb2923 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2923-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2927 := z.EncBinary()
		_ = yym2927
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2928 := !z.EncBinary()
			yy2arr2928 := z.EncBasicHandle().StructToArray
			var yyq2928 [4]bool
			_, _, _ = yysep2928, yyq2928, yy2arr2928
			const yyr2928 bool = false
			yyq2928[0] = x.Kind != ""
			yyq2928[1] = x.APIVersion != ""
			yyq2928[2] = true
			var yynn2928 int
			if yyr2928 || yy2arr2928 {
				r.EncodeArrayStart(4)
			} else {
				yynn2928 = 1
				for _, b := range yyq2928 {
					if b {
						yynn2928++
					}
				}
				r.EncodeMapStart(yynn2928)
				yynn2928 = 0
			}
			if yyr2928 || yy2arr2928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2928[0] {
					yym2930 := z.EncBinary()
					_ = yym2930
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2928[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2931 := z.EncBinary()
					_ = yym2931
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2928 || yy2arr2928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2928[1] {
					yym2933 := z.EncBinary()
					_ = yym2933
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2928[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2934 := z.EncBinary()
					_ = yym2934
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2928 || yy2arr2928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2928[2] {
					yy2936 := &x.ListMeta
					yym2937 := z.EncBinary()
					_ = yym2937
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2936) {
					} else {
						z.EncFallback(yy2936)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2928[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2938 := &x.ListMeta
					yym2939 := z.EncBinary()
					_ = yym2939
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2938) {
					} else {
						z.EncFallback(yy2938)
					}
				}
			}
			if yyr2928 || yy2arr2928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2941 := z.EncBinary()
					_ = yym2941
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2942 := z.EncBinary()
					_ = yym2942
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2928 || yy2arr2928 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2943 := z.DecBinary()
	_ = yym2943
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2944 := r.ContainerType()
		if yyct2944 == codecSelferValueTypeMap1234 {
			yyl2944 := r.ReadMapStart()
			if yyl2944 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2944, d)
			}
		} else if yyct2944 == codecSelferValueTypeArray1234 {
			yyl2944 := r.ReadArrayStart()
			if yyl2944 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2944, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2945Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2945Slc
	var yyhl2945 bool = l >= 0
	for yyj2945 := 0; ; yyj2945++ {
		if yyhl2945 {
			if yyj2945 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2945Slc = r.DecodeBytes(yys2945Slc, true, true)
		yys2945 := string(yys2945Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2945 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv2948 := &x.ListMeta
				yym2949 := z.DecBinary()
				_ = yym2949
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2948) {
				} else {
					z.DecFallback(yyv2948, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2950 := &x.Items
				yym2951 := z.DecBinary()
				_ = yym2951
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2950), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2945)
		} // end switch yys2945
	} // end for yyj2945
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2952 int
	var yyb2952 bool
	var yyhl2952 bool = l >= 0
	yyj2952++
	if yyhl2952 {
		yyb2952 = yyj2952 > l
	} else {
		yyb2952 = r.CheckBreak()
	}
	if yyb2952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2952++
	if yyhl2952 {
		yyb2952 = yyj2952 > l
	} else {
		yyb2952 = r.CheckBreak()
	}
	if yyb2952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2952++
	if yyhl2952 {
		yyb2952 = yyj2952 > l
	} else {
		yyb2952 = r.CheckBreak()
	}
	if yyb2952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv2955 := &x.ListMeta
		yym2956 := z.DecBinary()
		_ = yym2956
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2955) {
		} else {
			z.DecFallback(yyv2955, false)
		}
	}
	yyj2952++
	if yyhl2952 {
		yyb2952 = yyj2952 > l
	} else {
		yyb2952 = r.CheckBreak()
	}
	if yyb2952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2957 := &x.Items
		yym2958 := z.DecBinary()
		_ = yym2958
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2957), d)
		}
	}
	for {
		yyj2952++
		if yyhl2952 {
			yyb2952 = yyj2952 > l
		} else {
			yyb2952 = r.CheckBreak()
		}
		if yyb2952 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2952-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2959 := z.EncBinary()
		_ = yym2959
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2960 := !z.EncBinary()
			yy2arr2960 := z.EncBasicHandle().StructToArray
			var yyq2960 [4]bool
			_, _, _ = yysep2960, yyq2960, yy2arr2960
			const yyr2960 bool = false
			yyq2960[0] = x.PodCIDR != ""
			yyq2960[1] = x.ExternalID != ""
			yyq2960[2] = x.ProviderID != ""
			yyq2960[3] = x.Unschedulable != false
			var yynn2960 int
			if yyr2960 || yy2arr2960 {
				r.EncodeArrayStart(4)
			} else {
				yynn2960 = 0
				for _, b := range yyq2960 {
					if b {
						yynn2960++
					}
				}
				r.EncodeMapStart(yynn2960)
				yynn2960 = 0
			}
			if yyr2960 || yy2arr2960 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2960[0] {
					yym2962 := z.EncBinary()
					_ = yym2962
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2960[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2963 := z.EncBinary()
					_ = yym2963
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2960 || yy2arr2960 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2960[1] {
					yym2965 := z.EncBinary()
					_ = yym2965
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2960[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2966 := z.EncBinary()
					_ = yym2966
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2960 || yy2arr2960 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2960[2] {
					yym2968 := z.EncBinary()
					_ = yym2968
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2960[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2969 := z.EncBinary()
					_ = yym2969
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2960 || yy2arr2960 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2960[3] {
					yym2971 := z.EncBinary()
					_ = yym2971
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2960[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2972 := z.EncBinary()
					_ = yym2972
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2960 || yy2arr2960 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2973 := z.DecBinary()
	_ = yym2973
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2974 := r.ContainerType()
		if yyct2974 == codecSelferValueTypeMap1234 {
			yyl2974 := r.ReadMapStart()
			if yyl2974 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2974, d)
			}
		} else if yyct2974 == codecSelferValueTypeArray1234 {
			yyl2974 := r.ReadArrayStart()
			if yyl2974 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2974, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2975Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2975Slc
	var yyhl2975 bool = l >= 0
	for yyj2975 := 0; ; yyj2975++ {
		if yyhl2975 {
			if yyj2975 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2975Slc = r.DecodeBytes(yys2975Slc, true, true)
		yys2975 := string(yys2975Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2975 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2975)
		} // end switch yys2975
	} // end for yyj2975
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2980 int
	var yyb2980 bool
	var yyhl2980 bool = l >= 0
	yyj2980++
	if yyhl2980 {
		yyb2980 = yyj2980 > l
	} else {
		yyb2980 = r.CheckBreak()
	}
	if yyb2980 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2980++
	if yyhl2980 {
		yyb2980 = yyj2980 > l
	} else {
		yyb2980 = r.CheckBreak()
	}
	if yyb2980 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2980++
	if yyhl2980 {
		yyb2980 = yyj2980 > l
	} else {
		yyb2980 = r.CheckBreak()
	}
	if yyb2980 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2980++
	if yyhl2980 {
		yyb2980 = yyj2980 > l
	} else {
		yyb2980 = r.CheckBreak()
	}
	if yyb2980 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2980++
		if yyhl2980 {
			yyb2980 = yyj2980 > l
		} else {
			yyb2980 = r.CheckBreak()
		}
		if yyb2980 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2980-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2985 := z.EncBinary()
		_ = yym2985
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2986 := !z.EncBinary()
			yy2arr2986 := z.EncBasicHandle().StructToArray
			var yyq2986 [1]bool
			_, _, _ = yysep2986, yyq2986, yy2arr2986
			const yyr2986 bool = false
			var yynn2986 int
			if yyr2986 || yy2arr2986 {
				r.EncodeArrayStart(1)
			} else {
				yynn2986 = 1
				for _, b := range yyq2986 {
					if b {
						yynn2986++
					}
				}
				r.EncodeMapStart(yynn2986)
				yynn2986 = 0
			}
			if yyr2986 || yy2arr2986 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2988 := z.EncBinary()
				_ = yym2988
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2989 := z.EncBinary()
				_ = yym2989
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2986 || yy2arr2986 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2990 := z.DecBinary()
	_ = yym2990
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2991 := r.ContainerType()
		if yyct2991 == codecSelferValueTypeMap1234 {
			yyl2991 := r.ReadMapStart()
			if yyl2991 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2991, d)
			}
		} else if yyct2991 == codecSelferValueTypeArray1234 {
			yyl2991 := r.ReadArrayStart()
			if yyl2991 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2991, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2992Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2992Slc
	var yyhl2992 bool = l >= 0
	for yyj2992 := 0; ; yyj2992++ {
		if yyhl2992 {
			if yyj2992 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2992Slc = r.DecodeBytes(yys2992Slc, true, true)
		yys2992 := string(yys2992Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2992 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2992)
		} // end switch yys2992
	} // end for yyj2992
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2994 int
	var yyb2994 bool
	var yyhl2994 bool = l >= 0
	yyj2994++
	if yyhl2994 {
		yyb2994 = yyj2994 > l
	} else {
		yyb2994 = r.CheckBreak()
	}
	if yyb2994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2994++
		if yyhl2994 {
			yyb2994 = yyj2994 > l
		} else {
			yyb2994 = r.CheckBreak()
		}
		if yyb2994 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2994-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2996 := z.EncBinary()
		_ = yym2996
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2997 := !z.EncBinary()
			yy2arr2997 := z.EncBasicHandle().StructToArray
			var yyq2997 [1]bool
			_, _, _ = yysep2997, yyq2997, yy2arr2997
			const yyr2997 bool = false
			yyq2997[0] = true
			var yynn2997 int
			if yyr2997 || yy2arr2997 {
				r.EncodeArrayStart(1)
			} else {
				yynn2997 = 0
				for _, b := range yyq2997 {
					if b {
						yynn2997++
					}
				}
				r.EncodeMapStart(yynn2997)
				yynn2997 = 0
			}
			if yyr2997 || yy2arr2997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2997[0] {
					yy2999 := &x.KubeletEndpoint
					yy2999.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2997[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3000 := &x.KubeletEndpoint
					yy3000.CodecEncodeSelf(e)
				}
			}
			if yyr2997 || yy2arr2997 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3001 := z.DecBinary()
	_ = yym3001
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3002 := r.ContainerType()
		if yyct3002 == codecSelferValueTypeMap1234 {
			yyl3002 := r.ReadMapStart()
			if yyl3002 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3002, d)
			}
		} else if yyct3002 == codecSelferValueTypeArray1234 {
			yyl3002 := r.ReadArrayStart()
			if yyl3002 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3002, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3003Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3003Slc
	var yyhl3003 bool = l >= 0
	for yyj3003 := 0; ; yyj3003++ {
		if yyhl3003 {
			if yyj3003 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3003Slc = r.DecodeBytes(yys3003Slc, true, true)
		yys3003 := string(yys3003Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3003 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv3004 := &x.KubeletEndpoint
				yyv3004.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3003)
		} // end switch yys3003
	} // end for yyj3003
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3005 int
	var yyb3005 bool
	var yyhl3005 bool = l >= 0
	yyj3005++
	if yyhl3005 {
		yyb3005 = yyj3005 > l
	} else {
		yyb3005 = r.CheckBreak()
	}
	if yyb3005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv3006 := &x.KubeletEndpoint
		yyv3006.CodecDecodeSelf(d)
	}
	for {
		yyj3005++
		if yyhl3005 {
			yyb3005 = yyj3005 > l
		} else {
			yyb3005 = r.CheckBreak()
		}
		if yyb3005 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3005-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3007 := z.EncBinary()
		_ = yym3007
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3008 := !z.EncBinary()
			yy2arr3008 := z.EncBasicHandle().StructToArray
			var yyq3008 [10]bool
			_, _, _ = yysep3008, yyq3008, yy2arr3008
			const yyr3008 bool = false
			var yynn3008 int
			if yyr3008 || yy2arr3008 {
				r.EncodeArrayStart(10)
			} else {
				yynn3008 = 10
				for _, b := range yyq3008 {
					if b {
						yynn3008++
					}
				}
				r.EncodeMapStart(yynn3008)
				yynn3008 = 0
			}
			if yyr3008 || yy2arr3008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3010 := z.EncBinary()
				_ = yym3010
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3011 := z.EncBinary()
				_ = yym3011
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr3008 || yy2arr3008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3013 := z.EncBinary()
				_ = yym3013
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3014 := z.EncBinary()
				_ = yym3014
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr3008 || yy2arr3008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3016 := z.EncBinary()
				_ = yym3016
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3017 := z.EncBinary()
				_ = yym3017
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr3008 || yy2arr3008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3019 := z.EncBinary()
				_ = yym3019
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3020 := z.EncBinary()
				_ = yym3020
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr3008 || yy2arr3008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3022 := z.EncBinary()
				_ = yym3022
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3023 := z.EncBinary()
				_ = yym3023
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr3008 || yy2arr3008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3025 := z.EncBinary()
				_ = yym3025
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3026 := z.EncBinary()
				_ = yym3026
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr3008 || yy2arr3008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3028 := z.EncBinary()
				_ = yym3028
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3029 := z.EncBinary()
				_ = yym3029
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr3008 || yy2arr3008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3031 := z.EncBinary()
				_ = yym3031
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3032 := z.EncBinary()
				_ = yym3032
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr3008 || yy2arr3008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3034 := z.EncBinary()
				_ = yym3034
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3035 := z.EncBinary()
				_ = yym3035
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr3008 || yy2arr3008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3037 := z.EncBinary()
				_ = yym3037
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3038 := z.EncBinary()
				_ = yym3038
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr3008 || yy2arr3008 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3039 := z.DecBinary()
	_ = yym3039
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3040 := r.ContainerType()
		if yyct3040 == codecSelferValueTypeMap1234 {
			yyl3040 := r.ReadMapStart()
			if yyl3040 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3040, d)
			}
		} else if yyct3040 == codecSelferValueTypeArray1234 {
			yyl3040 := r.ReadArrayStart()
			if yyl3040 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3040, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3041Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3041Slc
	var yyhl3041 bool = l >= 0
	for yyj3041 := 0; ; yyj3041++ {
		if yyhl3041 {
			if yyj3041 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3041Slc = r.DecodeBytes(yys3041Slc, true, true)
		yys3041 := string(yys3041Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3041 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3041)
		} // end switch yys3041
	} // end for yyj3041
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3052 int
	var yyb3052 bool
	var yyhl3052 bool = l >= 0
	yyj3052++
	if yyhl3052 {
		yyb3052 = yyj3052 > l
	} else {
		yyb3052 = r.CheckBreak()
	}
	if yyb3052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj3052++
	if yyhl3052 {
		yyb3052 = yyj3052 > l
	} else {
		yyb3052 = r.CheckBreak()
	}
	if yyb3052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj3052++
	if yyhl3052 {
		yyb3052 = yyj3052 > l
	} else {
		yyb3052 = r.CheckBreak()
	}
	if yyb3052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj3052++
	if yyhl3052 {
		yyb3052 = yyj3052 > l
	} else {
		yyb3052 = r.CheckBreak()
	}
	if yyb3052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj3052++
	if yyhl3052 {
		yyb3052 = yyj3052 > l
	} else {
		yyb3052 = r.CheckBreak()
	}
	if yyb3052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj3052++
	if yyhl3052 {
		yyb3052 = yyj3052 > l
	} else {
		yyb3052 = r.CheckBreak()
	}
	if yyb3052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj3052++
	if yyhl3052 {
		yyb3052 = yyj3052 > l
	} else {
		yyb3052 = r.CheckBreak()
	}
	if yyb3052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj3052++
	if yyhl3052 {
		yyb3052 = yyj3052 > l
	} else {
		yyb3052 = r.CheckBreak()
	}
	if yyb3052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj3052++
	if yyhl3052 {
		yyb3052 = yyj3052 > l
	} else {
		yyb3052 = r.CheckBreak()
	}
	if yyb3052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj3052++
	if yyhl3052 {
		yyb3052 = yyj3052 > l
	} else {
		yyb3052 = r.CheckBreak()
	}
	if yyb3052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj3052++
		if yyhl3052 {
			yyb3052 = yyj3052 > l
		} else {
			yyb3052 = r.CheckBreak()
		}
		if yyb3052 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3052-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3063 := z.EncBinary()
		_ = yym3063
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3064 := !z.EncBinary()
			yy2arr3064 := z.EncBasicHandle().StructToArray
			var yyq3064 [10]bool
			_, _, _ = yysep3064, yyq3064, yy2arr3064
			const yyr3064 bool = false
			yyq3064[0] = len(x.Capacity) != 0
			yyq3064[1] = len(x.Allocatable) != 0
			yyq3064[2] = x.Phase != ""
			yyq3064[3] = len(x.Conditions) != 0
			yyq3064[4] = len(x.Addresses) != 0
			yyq3064[5] = true
			yyq3064[6] = true
			yyq3064[7] = len(x.Images) != 0
			yyq3064[8] = len(x.VolumesInUse) != 0
			yyq3064[9] = len(x.VolumesAttached) != 0
			var yynn3064 int
			if yyr3064 || yy2arr3064 {
				r.EncodeArrayStart(10)
			} else {
				yynn3064 = 0
				for _, b := range yyq3064 {
					if b {
						yynn3064++
					}
				}
				r.EncodeMapStart(yynn3064)
				yynn3064 = 0
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3064[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3064[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3064[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3064[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3064[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3064[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3064[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3069 := z.EncBinary()
						_ = yym3069
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3064[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3070 := z.EncBinary()
						_ = yym3070
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3064[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3072 := z.EncBinary()
						_ = yym3072
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3064[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3073 := z.EncBinary()
						_ = yym3073
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3064[5] {
					yy3075 := &x.DaemonEndpoints
					yy3075.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3064[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3076 := &x.DaemonEndpoints
					yy3076.CodecEncodeSelf(e)
				}
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3064[6] {
					yy3078 := &x.NodeInfo
					yy3078.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3064[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3079 := &x.NodeInfo
					yy3079.CodecEncodeSelf(e)
				}
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3064[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3081 := z.EncBinary()
						_ = yym3081
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3064[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3082 := z.EncBinary()
						_ = yym3082
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3064[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3084 := z.EncBinary()
						_ = yym3084
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3064[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3085 := z.EncBinary()
						_ = yym3085
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3064[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3087 := z.EncBinary()
						_ = yym3087
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3064[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3088 := z.EncBinary()
						_ = yym3088
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr3064 || yy2arr3064 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3089 := z.DecBinary()
	_ = yym3089
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3090 := r.ContainerType()
		if yyct3090 == codecSelferValueTypeMap1234 {
			yyl3090 := r.ReadMapStart()
			if yyl3090 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3090, d)
			}
		} else if yyct3090 == codecSelferValueTypeArray1234 {
			yyl3090 := r.ReadArrayStart()
			if yyl3090 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3090, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3091Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3091Slc
	var yyhl3091 bool = l >= 0
	for yyj3091 := 0; ; yyj3091++ {
		if yyhl3091 {
			if yyj3091 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3091Slc = r.DecodeBytes(yys3091Slc, true, true)
		yys3091 := string(yys3091Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3091 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3092 := &x.Capacity
				yyv3092.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv3093 := &x.Allocatable
				yyv3093.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3095 := &x.Conditions
				yym3096 := z.DecBinary()
				_ = yym3096
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv3095), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv3097 := &x.Addresses
				yym3098 := z.DecBinary()
				_ = yym3098
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv3097), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv3099 := &x.DaemonEndpoints
				yyv3099.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv3100 := &x.NodeInfo
				yyv3100.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv3101 := &x.Images
				yym3102 := z.DecBinary()
				_ = yym3102
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv3101), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv3103 := &x.VolumesInUse
				yym3104 := z.DecBinary()
				_ = yym3104
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3103), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv3105 := &x.VolumesAttached
				yym3106 := z.DecBinary()
				_ = yym3106
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3105), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3091)
		} // end switch yys3091
	} // end for yyj3091
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3107 int
	var yyb3107 bool
	var yyhl3107 bool = l >= 0
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3108 := &x.Capacity
		yyv3108.CodecDecodeSelf(d)
	}
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv3109 := &x.Allocatable
		yyv3109.CodecDecodeSelf(d)
	}
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3111 := &x.Conditions
		yym3112 := z.DecBinary()
		_ = yym3112
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv3111), d)
		}
	}
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv3113 := &x.Addresses
		yym3114 := z.DecBinary()
		_ = yym3114
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv3113), d)
		}
	}
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv3115 := &x.DaemonEndpoints
		yyv3115.CodecDecodeSelf(d)
	}
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv3116 := &x.NodeInfo
		yyv3116.CodecDecodeSelf(d)
	}
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv3117 := &x.Images
		yym3118 := z.DecBinary()
		_ = yym3118
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv3117), d)
		}
	}
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv3119 := &x.VolumesInUse
		yym3120 := z.DecBinary()
		_ = yym3120
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3119), d)
		}
	}
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv3121 := &x.VolumesAttached
		yym3122 := z.DecBinary()
		_ = yym3122
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3121), d)
		}
	}
	for {
		yyj3107++
		if yyhl3107 {
			yyb3107 = yyj3107 > l
		} else {
			yyb3107 = r.CheckBreak()
		}
		if yyb3107 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3107-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3123 := z.EncBinary()
	_ = yym3123
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3124 := z.DecBinary()
	_ = yym3124
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3125 := z.EncBinary()
		_ = yym3125
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3126 := !z.EncBinary()
			yy2arr3126 := z.EncBasicHandle().StructToArray
			var yyq3126 [2]bool
			_, _, _ = yysep3126, yyq3126, yy2arr3126
			const yyr3126 bool = false
			var yynn3126 int
			if yyr3126 || yy2arr3126 {
				r.EncodeArrayStart(2)
			} else {
				yynn3126 = 2
				for _, b := range yyq3126 {
					if b {
						yynn3126++
					}
				}
				r.EncodeMapStart(yynn3126)
				yynn3126 = 0
			}
			if yyr3126 || yy2arr3126 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr3126 || yy2arr3126 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3129 := z.EncBinary()
				_ = yym3129
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3130 := z.EncBinary()
				_ = yym3130
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr3126 || yy2arr3126 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3131 := z.DecBinary()
	_ = yym3131
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3132 := r.ContainerType()
		if yyct3132 == codecSelferValueTypeMap1234 {
			yyl3132 := r.ReadMapStart()
			if yyl3132 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3132, d)
			}
		} else if yyct3132 == codecSelferValueTypeArray1234 {
			yyl3132 := r.ReadArrayStart()
			if yyl3132 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3132, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3133Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3133Slc
	var yyhl3133 bool = l >= 0
	for yyj3133 := 0; ; yyj3133++ {
		if yyhl3133 {
			if yyj3133 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3133Slc = r.DecodeBytes(yys3133Slc, true, true)
		yys3133 := string(yys3133Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3133 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3133)
		} // end switch yys3133
	} // end for yyj3133
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3136 int
	var yyb3136 bool
	var yyhl3136 bool = l >= 0
	yyj3136++
	if yyhl3136 {
		yyb3136 = yyj3136 > l
	} else {
		yyb3136 = r.CheckBreak()
	}
	if yyb3136 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj3136++
	if yyhl3136 {
		yyb3136 = yyj3136 > l
	} else {
		yyb3136 = r.CheckBreak()
	}
	if yyb3136 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj3136++
		if yyhl3136 {
			yyb3136 = yyj3136 > l
		} else {
			yyb3136 = r.CheckBreak()
		}
		if yyb3136 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3136-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3139 := z.EncBinary()
		_ = yym3139
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3140 := !z.EncBinary()
			yy2arr3140 := z.EncBasicHandle().StructToArray
			var yyq3140 [1]bool
			_, _, _ = yysep3140, yyq3140, yy2arr3140
			const yyr3140 bool = false
			yyq3140[0] = len(x.PreferAvoidPods) != 0
			var yynn3140 int
			if yyr3140 || yy2arr3140 {
				r.EncodeArrayStart(1)
			} else {
				yynn3140 = 0
				for _, b := range yyq3140 {
					if b {
						yynn3140++
					}
				}
				r.EncodeMapStart(yynn3140)
				yynn3140 = 0
			}
			if yyr3140 || yy2arr3140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3140[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3142 := z.EncBinary()
						_ = yym3142
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3140[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3143 := z.EncBinary()
						_ = yym3143
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr3140 || yy2arr3140 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3144 := z.DecBinary()
	_ = yym3144
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3145 := r.ContainerType()
		if yyct3145 == codecSelferValueTypeMap1234 {
			yyl3145 := r.ReadMapStart()
			if yyl3145 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3145, d)
			}
		} else if yyct3145 == codecSelferValueTypeArray1234 {
			yyl3145 := r.ReadArrayStart()
			if yyl3145 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3145, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3146Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3146Slc
	var yyhl3146 bool = l >= 0
	for yyj3146 := 0; ; yyj3146++ {
		if yyhl3146 {
			if yyj3146 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3146Slc = r.DecodeBytes(yys3146Slc, true, true)
		yys3146 := string(yys3146Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3146 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv3147 := &x.PreferAvoidPods
				yym3148 := z.DecBinary()
				_ = yym3148
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3147), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3146)
		} // end switch yys3146
	} // end for yyj3146
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3149 int
	var yyb3149 bool
	var yyhl3149 bool = l >= 0
	yyj3149++
	if yyhl3149 {
		yyb3149 = yyj3149 > l
	} else {
		yyb3149 = r.CheckBreak()
	}
	if yyb3149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv3150 := &x.PreferAvoidPods
		yym3151 := z.DecBinary()
		_ = yym3151
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3150), d)
		}
	}
	for {
		yyj3149++
		if yyhl3149 {
			yyb3149 = yyj3149 > l
		} else {
			yyb3149 = r.CheckBreak()
		}
		if yyb3149 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3149-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3152 := z.EncBinary()
		_ = yym3152
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3153 := !z.EncBinary()
			yy2arr3153 := z.EncBasicHandle().StructToArray
			var yyq3153 [4]bool
			_, _, _ = yysep3153, yyq3153, yy2arr3153
			const yyr3153 bool = false
			yyq3153[1] = true
			yyq3153[2] = x.Reason != ""
			yyq3153[3] = x.Message != ""
			var yynn3153 int
			if yyr3153 || yy2arr3153 {
				r.EncodeArrayStart(4)
			} else {
				yynn3153 = 1
				for _, b := range yyq3153 {
					if b {
						yynn3153++
					}
				}
				r.EncodeMapStart(yynn3153)
				yynn3153 = 0
			}
			if yyr3153 || yy2arr3153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3155 := &x.PodSignature
				yy3155.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3156 := &x.PodSignature
				yy3156.CodecEncodeSelf(e)
			}
			if yyr3153 || yy2arr3153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3153[1] {
					yy3158 := &x.EvictionTime
					yym3159 := z.EncBinary()
					_ = yym3159
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3158) {
					} else if yym3159 {
						z.EncBinaryMarshal(yy3158)
					} else if !yym3159 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3158)
					} else {
						z.EncFallback(yy3158)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3153[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3160 := &x.EvictionTime
					yym3161 := z.EncBinary()
					_ = yym3161
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3160) {
					} else if yym3161 {
						z.EncBinaryMarshal(yy3160)
					} else if !yym3161 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3160)
					} else {
						z.EncFallback(yy3160)
					}
				}
			}
			if yyr3153 || yy2arr3153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3153[2] {
					yym3163 := z.EncBinary()
					_ = yym3163
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3153[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3164 := z.EncBinary()
					_ = yym3164
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3153 || yy2arr3153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3153[3] {
					yym3166 := z.EncBinary()
					_ = yym3166
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3153[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3167 := z.EncBinary()
					_ = yym3167
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3153 || yy2arr3153 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3168 := z.DecBinary()
	_ = yym3168
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3169 := r.ContainerType()
		if yyct3169 == codecSelferValueTypeMap1234 {
			yyl3169 := r.ReadMapStart()
			if yyl3169 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3169, d)
			}
		} else if yyct3169 == codecSelferValueTypeArray1234 {
			yyl3169 := r.ReadArrayStart()
			if yyl3169 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3169, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3170Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3170Slc
	var yyhl3170 bool = l >= 0
	for yyj3170 := 0; ; yyj3170++ {
		if yyhl3170 {
			if yyj3170 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3170Slc = r.DecodeBytes(yys3170Slc, true, true)
		yys3170 := string(yys3170Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3170 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv3171 := &x.PodSignature
				yyv3171.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_v1.Time{}
			} else {
				yyv3172 := &x.EvictionTime
				yym3173 := z.DecBinary()
				_ = yym3173
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3172) {
				} else if yym3173 {
					z.DecBinaryUnmarshal(yyv3172)
				} else if !yym3173 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3172)
				} else {
					z.DecFallback(yyv3172, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3170)
		} // end switch yys3170
	} // end for yyj3170
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3176 int
	var yyb3176 bool
	var yyhl3176 bool = l >= 0
	yyj3176++
	if yyhl3176 {
		yyb3176 = yyj3176 > l
	} else {
		yyb3176 = r.CheckBreak()
	}
	if yyb3176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv3177 := &x.PodSignature
		yyv3177.CodecDecodeSelf(d)
	}
	yyj3176++
	if yyhl3176 {
		yyb3176 = yyj3176 > l
	} else {
		yyb3176 = r.CheckBreak()
	}
	if yyb3176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_v1.Time{}
	} else {
		yyv3178 := &x.EvictionTime
		yym3179 := z.DecBinary()
		_ = yym3179
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3178) {
		} else if yym3179 {
			z.DecBinaryUnmarshal(yyv3178)
		} else if !yym3179 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3178)
		} else {
			z.DecFallback(yyv3178, false)
		}
	}
	yyj3176++
	if yyhl3176 {
		yyb3176 = yyj3176 > l
	} else {
		yyb3176 = r.CheckBreak()
	}
	if yyb3176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3176++
	if yyhl3176 {
		yyb3176 = yyj3176 > l
	} else {
		yyb3176 = r.CheckBreak()
	}
	if yyb3176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3176++
		if yyhl3176 {
			yyb3176 = yyj3176 > l
		} else {
			yyb3176 = r.CheckBreak()
		}
		if yyb3176 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3176-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3182 := z.EncBinary()
		_ = yym3182
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3183 := !z.EncBinary()
			yy2arr3183 := z.EncBasicHandle().StructToArray
			var yyq3183 [1]bool
			_, _, _ = yysep3183, yyq3183, yy2arr3183
			const yyr3183 bool = false
			yyq3183[0] = x.PodController != nil
			var yynn3183 int
			if yyr3183 || yy2arr3183 {
				r.EncodeArrayStart(1)
			} else {
				yynn3183 = 0
				for _, b := range yyq3183 {
					if b {
						yynn3183++
					}
				}
				r.EncodeMapStart(yynn3183)
				yynn3183 = 0
			}
			if yyr3183 || yy2arr3183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3183[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						yym3185 := z.EncBinary()
						_ = yym3185
						if false {
						} else if z.HasExtensions() && z.EncExt(x.PodController) {
						} else {
							z.EncFallback(x.PodController)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3183[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						yym3186 := z.EncBinary()
						_ = yym3186
						if false {
						} else if z.HasExtensions() && z.EncExt(x.PodController) {
						} else {
							z.EncFallback(x.PodController)
						}
					}
				}
			}
			if yyr3183 || yy2arr3183 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3187 := z.DecBinary()
	_ = yym3187
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3188 := r.ContainerType()
		if yyct3188 == codecSelferValueTypeMap1234 {
			yyl3188 := r.ReadMapStart()
			if yyl3188 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3188, d)
			}
		} else if yyct3188 == codecSelferValueTypeArray1234 {
			yyl3188 := r.ReadArrayStart()
			if yyl3188 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3188, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3189Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3189Slc
	var yyhl3189 bool = l >= 0
	for yyj3189 := 0; ; yyj3189++ {
		if yyhl3189 {
			if yyj3189 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3189Slc = r.DecodeBytes(yys3189Slc, true, true)
		yys3189 := string(yys3189Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3189 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(pkg2_v1.OwnerReference)
				}
				yym3191 := z.DecBinary()
				_ = yym3191
				if false {
				} else if z.HasExtensions() && z.DecExt(x.PodController) {
				} else {
					z.DecFallback(x.PodController, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3189)
		} // end switch yys3189
	} // end for yyj3189
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3192 int
	var yyb3192 bool
	var yyhl3192 bool = l >= 0
	yyj3192++
	if yyhl3192 {
		yyb3192 = yyj3192 > l
	} else {
		yyb3192 = r.CheckBreak()
	}
	if yyb3192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(pkg2_v1.OwnerReference)
		}
		yym3194 := z.DecBinary()
		_ = yym3194
		if false {
		} else if z.HasExtensions() && z.DecExt(x.PodController) {
		} else {
			z.DecFallback(x.PodController, false)
		}
	}
	for {
		yyj3192++
		if yyhl3192 {
			yyb3192 = yyj3192 > l
		} else {
			yyb3192 = r.CheckBreak()
		}
		if yyb3192 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3192-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3195 := z.EncBinary()
		_ = yym3195
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3196 := !z.EncBinary()
			yy2arr3196 := z.EncBasicHandle().StructToArray
			var yyq3196 [2]bool
			_, _, _ = yysep3196, yyq3196, yy2arr3196
			const yyr3196 bool = false
			yyq3196[1] = x.SizeBytes != 0
			var yynn3196 int
			if yyr3196 || yy2arr3196 {
				r.EncodeArrayStart(2)
			} else {
				yynn3196 = 1
				for _, b := range yyq3196 {
					if b {
						yynn3196++
					}
				}
				r.EncodeMapStart(yynn3196)
				yynn3196 = 0
			}
			if yyr3196 || yy2arr3196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3198 := z.EncBinary()
					_ = yym3198
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3199 := z.EncBinary()
					_ = yym3199
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3196 || yy2arr3196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3196[1] {
					yym3201 := z.EncBinary()
					_ = yym3201
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3196[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3202 := z.EncBinary()
					_ = yym3202
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3196 || yy2arr3196 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3203 := z.DecBinary()
	_ = yym3203
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3204 := r.ContainerType()
		if yyct3204 == codecSelferValueTypeMap1234 {
			yyl3204 := r.ReadMapStart()
			if yyl3204 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3204, d)
			}
		} else if yyct3204 == codecSelferValueTypeArray1234 {
			yyl3204 := r.ReadArrayStart()
			if yyl3204 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3204, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3205Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3205Slc
	var yyhl3205 bool = l >= 0
	for yyj3205 := 0; ; yyj3205++ {
		if yyhl3205 {
			if yyj3205 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3205Slc = r.DecodeBytes(yys3205Slc, true, true)
		yys3205 := string(yys3205Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3205 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3206 := &x.Names
				yym3207 := z.DecBinary()
				_ = yym3207
				if false {
				} else {
					z.F.DecSliceStringX(yyv3206, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3205)
		} // end switch yys3205
	} // end for yyj3205
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3209 int
	var yyb3209 bool
	var yyhl3209 bool = l >= 0
	yyj3209++
	if yyhl3209 {
		yyb3209 = yyj3209 > l
	} else {
		yyb3209 = r.CheckBreak()
	}
	if yyb3209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3210 := &x.Names
		yym3211 := z.DecBinary()
		_ = yym3211
		if false {
		} else {
			z.F.DecSliceStringX(yyv3210, false, d)
		}
	}
	yyj3209++
	if yyhl3209 {
		yyb3209 = yyj3209 > l
	} else {
		yyb3209 = r.CheckBreak()
	}
	if yyb3209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3209++
		if yyhl3209 {
			yyb3209 = yyj3209 > l
		} else {
			yyb3209 = r.CheckBreak()
		}
		if yyb3209 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3209-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3213 := z.EncBinary()
	_ = yym3213
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3214 := z.DecBinary()
	_ = yym3214
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3215 := z.EncBinary()
	_ = yym3215
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3216 := z.DecBinary()
	_ = yym3216
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3217 := z.EncBinary()
		_ = yym3217
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3218 := !z.EncBinary()
			yy2arr3218 := z.EncBasicHandle().StructToArray
			var yyq3218 [6]bool
			_, _, _ = yysep3218, yyq3218, yy2arr3218
			const yyr3218 bool = false
			yyq3218[2] = true
			yyq3218[3] = true
			yyq3218[4] = x.Reason != ""
			yyq3218[5] = x.Message != ""
			var yynn3218 int
			if yyr3218 || yy2arr3218 {
				r.EncodeArrayStart(6)
			} else {
				yynn3218 = 2
				for _, b := range yyq3218 {
					if b {
						yynn3218++
					}
				}
				r.EncodeMapStart(yynn3218)
				yynn3218 = 0
			}
			if yyr3218 || yy2arr3218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3218 || yy2arr3218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3218 || yy2arr3218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3218[2] {
					yy3222 := &x.LastHeartbeatTime
					yym3223 := z.EncBinary()
					_ = yym3223
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3222) {
					} else if yym3223 {
						z.EncBinaryMarshal(yy3222)
					} else if !yym3223 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3222)
					} else {
						z.EncFallback(yy3222)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3218[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3224 := &x.LastHeartbeatTime
					yym3225 := z.EncBinary()
					_ = yym3225
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3224) {
					} else if yym3225 {
						z.EncBinaryMarshal(yy3224)
					} else if !yym3225 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3224)
					} else {
						z.EncFallback(yy3224)
					}
				}
			}
			if yyr3218 || yy2arr3218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3218[3] {
					yy3227 := &x.LastTransitionTime
					yym3228 := z.EncBinary()
					_ = yym3228
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3227) {
					} else if yym3228 {
						z.EncBinaryMarshal(yy3227)
					} else if !yym3228 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3227)
					} else {
						z.EncFallback(yy3227)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3218[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3229 := &x.LastTransitionTime
					yym3230 := z.EncBinary()
					_ = yym3230
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3229) {
					} else if yym3230 {
						z.EncBinaryMarshal(yy3229)
					} else if !yym3230 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3229)
					} else {
						z.EncFallback(yy3229)
					}
				}
			}
			if yyr3218 || yy2arr3218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3218[4] {
					yym3232 := z.EncBinary()
					_ = yym3232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3218[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3233 := z.EncBinary()
					_ = yym3233
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3218 || yy2arr3218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3218[5] {
					yym3235 := z.EncBinary()
					_ = yym3235
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3218[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3236 := z.EncBinary()
					_ = yym3236
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3218 || yy2arr3218 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3237 := z.DecBinary()
	_ = yym3237
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3238 := r.ContainerType()
		if yyct3238 == codecSelferValueTypeMap1234 {
			yyl3238 := r.ReadMapStart()
			if yyl3238 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3238, d)
			}
		} else if yyct3238 == codecSelferValueTypeArray1234 {
			yyl3238 := r.ReadArrayStart()
			if yyl3238 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3238, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3239Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3239Slc
	var yyhl3239 bool = l >= 0
	for yyj3239 := 0; ; yyj3239++ {
		if yyhl3239 {
			if yyj3239 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3239Slc = r.DecodeBytes(yys3239Slc, true, true)
		yys3239 := string(yys3239Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3239 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_v1.Time{}
			} else {
				yyv3242 := &x.LastHeartbeatTime
				yym3243 := z.DecBinary()
				_ = yym3243
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3242) {
				} else if yym3243 {
					z.DecBinaryUnmarshal(yyv3242)
				} else if !yym3243 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3242)
				} else {
					z.DecFallback(yyv3242, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_v1.Time{}
			} else {
				yyv3244 := &x.LastTransitionTime
				yym3245 := z.DecBinary()
				_ = yym3245
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3244) {
				} else if yym3245 {
					z.DecBinaryUnmarshal(yyv3244)
				} else if !yym3245 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3244)
				} else {
					z.DecFallback(yyv3244, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3239)
		} // end switch yys3239
	} // end for yyj3239
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3248 int
	var yyb3248 bool
	var yyhl3248 bool = l >= 0
	yyj3248++
	if yyhl3248 {
		yyb3248 = yyj3248 > l
	} else {
		yyb3248 = r.CheckBreak()
	}
	if yyb3248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3248++
	if yyhl3248 {
		yyb3248 = yyj3248 > l
	} else {
		yyb3248 = r.CheckBreak()
	}
	if yyb3248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3248++
	if yyhl3248 {
		yyb3248 = yyj3248 > l
	} else {
		yyb3248 = r.CheckBreak()
	}
	if yyb3248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_v1.Time{}
	} else {
		yyv3251 := &x.LastHeartbeatTime
		yym3252 := z.DecBinary()
		_ = yym3252
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3251) {
		} else if yym3252 {
			z.DecBinaryUnmarshal(yyv3251)
		} else if !yym3252 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3251)
		} else {
			z.DecFallback(yyv3251, false)
		}
	}
	yyj3248++
	if yyhl3248 {
		yyb3248 = yyj3248 > l
	} else {
		yyb3248 = r.CheckBreak()
	}
	if yyb3248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_v1.Time{}
	} else {
		yyv3253 := &x.LastTransitionTime
		yym3254 := z.DecBinary()
		_ = yym3254
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3253) {
		} else if yym3254 {
			z.DecBinaryUnmarshal(yyv3253)
		} else if !yym3254 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3253)
		} else {
			z.DecFallback(yyv3253, false)
		}
	}
	yyj3248++
	if yyhl3248 {
		yyb3248 = yyj3248 > l
	} else {
		yyb3248 = r.CheckBreak()
	}
	if yyb3248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3248++
	if yyhl3248 {
		yyb3248 = yyj3248 > l
	} else {
		yyb3248 = r.CheckBreak()
	}
	if yyb3248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3248++
		if yyhl3248 {
			yyb3248 = yyj3248 > l
		} else {
			yyb3248 = r.CheckBreak()
		}
		if yyb3248 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3248-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3257 := z.EncBinary()
	_ = yym3257
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3258 := z.DecBinary()
	_ = yym3258
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3259 := z.EncBinary()
		_ = yym3259
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3260 := !z.EncBinary()
			yy2arr3260 := z.EncBasicHandle().StructToArray
			var yyq3260 [2]bool
			_, _, _ = yysep3260, yyq3260, yy2arr3260
			const yyr3260 bool = false
			var yynn3260 int
			if yyr3260 || yy2arr3260 {
				r.EncodeArrayStart(2)
			} else {
				yynn3260 = 2
				for _, b := range yyq3260 {
					if b {
						yynn3260++
					}
				}
				r.EncodeMapStart(yynn3260)
				yynn3260 = 0
			}
			if yyr3260 || yy2arr3260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3260 || yy2arr3260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3263 := z.EncBinary()
				_ = yym3263
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3264 := z.EncBinary()
				_ = yym3264
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3260 || yy2arr3260 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3265 := z.DecBinary()
	_ = yym3265
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3266 := r.ContainerType()
		if yyct3266 == codecSelferValueTypeMap1234 {
			yyl3266 := r.ReadMapStart()
			if yyl3266 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3266, d)
			}
		} else if yyct3266 == codecSelferValueTypeArray1234 {
			yyl3266 := r.ReadArrayStart()
			if yyl3266 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3266, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3267Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3267Slc
	var yyhl3267 bool = l >= 0
	for yyj3267 := 0; ; yyj3267++ {
		if yyhl3267 {
			if yyj3267 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3267Slc = r.DecodeBytes(yys3267Slc, true, true)
		yys3267 := string(yys3267Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3267 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3267)
		} // end switch yys3267
	} // end for yyj3267
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3270 int
	var yyb3270 bool
	var yyhl3270 bool = l >= 0
	yyj3270++
	if yyhl3270 {
		yyb3270 = yyj3270 > l
	} else {
		yyb3270 = r.CheckBreak()
	}
	if yyb3270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3270++
	if yyhl3270 {
		yyb3270 = yyj3270 > l
	} else {
		yyb3270 = r.CheckBreak()
	}
	if yyb3270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3270++
		if yyhl3270 {
			yyb3270 = yyj3270 > l
		} else {
			yyb3270 = r.CheckBreak()
		}
		if yyb3270 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3270-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3273 := z.EncBinary()
	_ = yym3273
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3274 := z.DecBinary()
	_ = yym3274
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3275 := z.EncBinary()
		_ = yym3275
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3276 := z.DecBinary()
	_ = yym3276
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3277 := z.EncBinary()
		_ = yym3277
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3278 := !z.EncBinary()
			yy2arr3278 := z.EncBasicHandle().StructToArray
			var yyq3278 [5]bool
			_, _, _ = yysep3278, yyq3278, yy2arr3278
			const yyr3278 bool = false
			yyq3278[0] = x.Kind != ""
			yyq3278[1] = x.APIVersion != ""
			yyq3278[2] = true
			yyq3278[3] = true
			yyq3278[4] = true
			var yynn3278 int
			if yyr3278 || yy2arr3278 {
				r.EncodeArrayStart(5)
			} else {
				yynn3278 = 0
				for _, b := range yyq3278 {
					if b {
						yynn3278++
					}
				}
				r.EncodeMapStart(yynn3278)
				yynn3278 = 0
			}
			if yyr3278 || yy2arr3278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3278[0] {
					yym3280 := z.EncBinary()
					_ = yym3280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3278[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3281 := z.EncBinary()
					_ = yym3281
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3278 || yy2arr3278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3278[1] {
					yym3283 := z.EncBinary()
					_ = yym3283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3278[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3284 := z.EncBinary()
					_ = yym3284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3278 || yy2arr3278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3278[2] {
					yy3286 := &x.ObjectMeta
					yy3286.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3278[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3287 := &x.ObjectMeta
					yy3287.CodecEncodeSelf(e)
				}
			}
			if yyr3278 || yy2arr3278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3278[3] {
					yy3289 := &x.Spec
					yy3289.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3278[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3290 := &x.Spec
					yy3290.CodecEncodeSelf(e)
				}
			}
			if yyr3278 || yy2arr3278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3278[4] {
					yy3292 := &x.Status
					yy3292.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3278[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3293 := &x.Status
					yy3293.CodecEncodeSelf(e)
				}
			}
			if yyr3278 || yy2arr3278 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3294 := z.DecBinary()
	_ = yym3294
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3295 := r.ContainerType()
		if yyct3295 == codecSelferValueTypeMap1234 {
			yyl3295 := r.ReadMapStart()
			if yyl3295 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3295, d)
			}
		} else if yyct3295 == codecSelferValueTypeArray1234 {
			yyl3295 := r.ReadArrayStart()
			if yyl3295 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3295, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3296Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3296Slc
	var yyhl3296 bool = l >= 0
	for yyj3296 := 0; ; yyj3296++ {
		if yyhl3296 {
			if yyj3296 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3296Slc = r.DecodeBytes(yys3296Slc, true, true)
		yys3296 := string(yys3296Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3296 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3299 := &x.ObjectMeta
				yyv3299.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3300 := &x.Spec
				yyv3300.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3301 := &x.Status
				yyv3301.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3296)
		} // end switch yys3296
	} // end for yyj3296
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3302 int
	var yyb3302 bool
	var yyhl3302 bool = l >= 0
	yyj3302++
	if yyhl3302 {
		yyb3302 = yyj3302 > l
	} else {
		yyb3302 = r.CheckBreak()
	}
	if yyb3302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3302++
	if yyhl3302 {
		yyb3302 = yyj3302 > l
	} else {
		yyb3302 = r.CheckBreak()
	}
	if yyb3302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3302++
	if yyhl3302 {
		yyb3302 = yyj3302 > l
	} else {
		yyb3302 = r.CheckBreak()
	}
	if yyb3302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3305 := &x.ObjectMeta
		yyv3305.CodecDecodeSelf(d)
	}
	yyj3302++
	if yyhl3302 {
		yyb3302 = yyj3302 > l
	} else {
		yyb3302 = r.CheckBreak()
	}
	if yyb3302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3306 := &x.Spec
		yyv3306.CodecDecodeSelf(d)
	}
	yyj3302++
	if yyhl3302 {
		yyb3302 = yyj3302 > l
	} else {
		yyb3302 = r.CheckBreak()
	}
	if yyb3302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3307 := &x.Status
		yyv3307.CodecDecodeSelf(d)
	}
	for {
		yyj3302++
		if yyhl3302 {
			yyb3302 = yyj3302 > l
		} else {
			yyb3302 = r.CheckBreak()
		}
		if yyb3302 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3302-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3308 := z.EncBinary()
		_ = yym3308
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3309 := !z.EncBinary()
			yy2arr3309 := z.EncBasicHandle().StructToArray
			var yyq3309 [4]bool
			_, _, _ = yysep3309, yyq3309, yy2arr3309
			const yyr3309 bool = false
			yyq3309[0] = x.Kind != ""
			yyq3309[1] = x.APIVersion != ""
			yyq3309[2] = true
			var yynn3309 int
			if yyr3309 || yy2arr3309 {
				r.EncodeArrayStart(4)
			} else {
				yynn3309 = 1
				for _, b := range yyq3309 {
					if b {
						yynn3309++
					}
				}
				r.EncodeMapStart(yynn3309)
				yynn3309 = 0
			}
			if yyr3309 || yy2arr3309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3309[0] {
					yym3311 := z.EncBinary()
					_ = yym3311
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3309[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3312 := z.EncBinary()
					_ = yym3312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3309 || yy2arr3309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3309[1] {
					yym3314 := z.EncBinary()
					_ = yym3314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3309[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3315 := z.EncBinary()
					_ = yym3315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3309 || yy2arr3309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3309[2] {
					yy3317 := &x.ListMeta
					yym3318 := z.EncBinary()
					_ = yym3318
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3317) {
					} else {
						z.EncFallback(yy3317)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3309[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3319 := &x.ListMeta
					yym3320 := z.EncBinary()
					_ = yym3320
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3319) {
					} else {
						z.EncFallback(yy3319)
					}
				}
			}
			if yyr3309 || yy2arr3309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3322 := z.EncBinary()
					_ = yym3322
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3323 := z.EncBinary()
					_ = yym3323
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3309 || yy2arr3309 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3324 := z.DecBinary()
	_ = yym3324
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3325 := r.ContainerType()
		if yyct3325 == codecSelferValueTypeMap1234 {
			yyl3325 := r.ReadMapStart()
			if yyl3325 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3325, d)
			}
		} else if yyct3325 == codecSelferValueTypeArray1234 {
			yyl3325 := r.ReadArrayStart()
			if yyl3325 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3325, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3326Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3326Slc
	var yyhl3326 bool = l >= 0
	for yyj3326 := 0; ; yyj3326++ {
		if yyhl3326 {
			if yyj3326 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3326Slc = r.DecodeBytes(yys3326Slc, true, true)
		yys3326 := string(yys3326Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3326 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv3329 := &x.ListMeta
				yym3330 := z.DecBinary()
				_ = yym3330
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3329) {
				} else {
					z.DecFallback(yyv3329, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3331 := &x.Items
				yym3332 := z.DecBinary()
				_ = yym3332
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3331), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3326)
		} // end switch yys3326
	} // end for yyj3326
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3333 int
	var yyb3333 bool
	var yyhl3333 bool = l >= 0
	yyj3333++
	if yyhl3333 {
		yyb3333 = yyj3333 > l
	} else {
		yyb3333 = r.CheckBreak()
	}
	if yyb3333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3333++
	if yyhl3333 {
		yyb3333 = yyj3333 > l
	} else {
		yyb3333 = r.CheckBreak()
	}
	if yyb3333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3333++
	if yyhl3333 {
		yyb3333 = yyj3333 > l
	} else {
		yyb3333 = r.CheckBreak()
	}
	if yyb3333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv3336 := &x.ListMeta
		yym3337 := z.DecBinary()
		_ = yym3337
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3336) {
		} else {
			z.DecFallback(yyv3336, false)
		}
	}
	yyj3333++
	if yyhl3333 {
		yyb3333 = yyj3333 > l
	} else {
		yyb3333 = r.CheckBreak()
	}
	if yyb3333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3338 := &x.Items
		yym3339 := z.DecBinary()
		_ = yym3339
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3338), d)
		}
	}
	for {
		yyj3333++
		if yyhl3333 {
			yyb3333 = yyj3333 > l
		} else {
			yyb3333 = r.CheckBreak()
		}
		if yyb3333 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3333-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3340 := z.EncBinary()
	_ = yym3340
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3341 := z.DecBinary()
	_ = yym3341
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3342 := z.EncBinary()
		_ = yym3342
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3343 := !z.EncBinary()
			yy2arr3343 := z.EncBasicHandle().StructToArray
			var yyq3343 [1]bool
			_, _, _ = yysep3343, yyq3343, yy2arr3343
			const yyr3343 bool = false
			yyq3343[0] = len(x.Finalizers) != 0
			var yynn3343 int
			if yyr3343 || yy2arr3343 {
				r.EncodeArrayStart(1)
			} else {
				yynn3343 = 0
				for _, b := range yyq3343 {
					if b {
						yynn3343++
					}
				}
				r.EncodeMapStart(yynn3343)
				yynn3343 = 0
			}
			if yyr3343 || yy2arr3343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3343[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3345 := z.EncBinary()
						_ = yym3345
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3343[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3346 := z.EncBinary()
						_ = yym3346
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yyr3343 || yy2arr3343 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3347 := z.DecBinary()
	_ = yym3347
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3348 := r.ContainerType()
		if yyct3348 == codecSelferValueTypeMap1234 {
			yyl3348 := r.ReadMapStart()
			if yyl3348 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3348, d)
			}
		} else if yyct3348 == codecSelferValueTypeArray1234 {
			yyl3348 := r.ReadArrayStart()
			if yyl3348 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3348, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3349Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3349Slc
	var yyhl3349 bool = l >= 0
	for yyj3349 := 0; ; yyj3349++ {
		if yyhl3349 {
			if yyj3349 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3349Slc = r.DecodeBytes(yys3349Slc, true, true)
		yys3349 := string(yys3349Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3349 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3350 := &x.Finalizers
				yym3351 := z.DecBinary()
				_ = yym3351
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3350), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3349)
		} // end switch yys3349
	} // end for yyj3349
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3352 int
	var yyb3352 bool
	var yyhl3352 bool = l >= 0
	yyj3352++
	if yyhl3352 {
		yyb3352 = yyj3352 > l
	} else {
		yyb3352 = r.CheckBreak()
	}
	if yyb3352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3353 := &x.Finalizers
		yym3354 := z.DecBinary()
		_ = yym3354
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3353), d)
		}
	}
	for {
		yyj3352++
		if yyhl3352 {
			yyb3352 = yyj3352 > l
		} else {
			yyb3352 = r.CheckBreak()
		}
		if yyb3352 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3352-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3355 := z.EncBinary()
		_ = yym3355
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3356 := !z.EncBinary()
			yy2arr3356 := z.EncBasicHandle().StructToArray
			var yyq3356 [1]bool
			_, _, _ = yysep3356, yyq3356, yy2arr3356
			const yyr3356 bool = false
			yyq3356[0] = x.Phase != ""
			var yynn3356 int
			if yyr3356 || yy2arr3356 {
				r.EncodeArrayStart(1)
			} else {
				yynn3356 = 0
				for _, b := range yyq3356 {
					if b {
						yynn3356++
					}
				}
				r.EncodeMapStart(yynn3356)
				yynn3356 = 0
			}
			if yyr3356 || yy2arr3356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3356[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3356[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3356 || yy2arr3356 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3358 := z.DecBinary()
	_ = yym3358
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3359 := r.ContainerType()
		if yyct3359 == codecSelferValueTypeMap1234 {
			yyl3359 := r.ReadMapStart()
			if yyl3359 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3359, d)
			}
		} else if yyct3359 == codecSelferValueTypeArray1234 {
			yyl3359 := r.ReadArrayStart()
			if yyl3359 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3359, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3360Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3360Slc
	var yyhl3360 bool = l >= 0
	for yyj3360 := 0; ; yyj3360++ {
		if yyhl3360 {
			if yyj3360 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3360Slc = r.DecodeBytes(yys3360Slc, true, true)
		yys3360 := string(yys3360Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3360 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3360)
		} // end switch yys3360
	} // end for yyj3360
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3362 int
	var yyb3362 bool
	var yyhl3362 bool = l >= 0
	yyj3362++
	if yyhl3362 {
		yyb3362 = yyj3362 > l
	} else {
		yyb3362 = r.CheckBreak()
	}
	if yyb3362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3362++
		if yyhl3362 {
			yyb3362 = yyj3362 > l
		} else {
			yyb3362 = r.CheckBreak()
		}
		if yyb3362 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3362-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3364 := z.EncBinary()
	_ = yym3364
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3365 := z.DecBinary()
	_ = yym3365
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3366 := z.EncBinary()
		_ = yym3366
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3367 := !z.EncBinary()
			yy2arr3367 := z.EncBasicHandle().StructToArray
			var yyq3367 [5]bool
			_, _, _ = yysep3367, yyq3367, yy2arr3367
			const yyr3367 bool = false
			yyq3367[0] = x.Kind != ""
			yyq3367[1] = x.APIVersion != ""
			yyq3367[2] = true
			yyq3367[3] = true
			yyq3367[4] = true
			var yynn3367 int
			if yyr3367 || yy2arr3367 {
				r.EncodeArrayStart(5)
			} else {
				yynn3367 = 0
				for _, b := range yyq3367 {
					if b {
						yynn3367++
					}
				}
				r.EncodeMapStart(yynn3367)
				yynn3367 = 0
			}
			if yyr3367 || yy2arr3367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3367[0] {
					yym3369 := z.EncBinary()
					_ = yym3369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3367[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3370 := z.EncBinary()
					_ = yym3370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3367 || yy2arr3367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3367[1] {
					yym3372 := z.EncBinary()
					_ = yym3372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3367[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3373 := z.EncBinary()
					_ = yym3373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3367 || yy2arr3367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3367[2] {
					yy3375 := &x.ObjectMeta
					yy3375.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3367[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3376 := &x.ObjectMeta
					yy3376.CodecEncodeSelf(e)
				}
			}
			if yyr3367 || yy2arr3367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3367[3] {
					yy3378 := &x.Spec
					yy3378.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3367[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3379 := &x.Spec
					yy3379.CodecEncodeSelf(e)
				}
			}
			if yyr3367 || yy2arr3367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3367[4] {
					yy3381 := &x.Status
					yy3381.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3367[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3382 := &x.Status
					yy3382.CodecEncodeSelf(e)
				}
			}
			if yyr3367 || yy2arr3367 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3383 := z.DecBinary()
	_ = yym3383
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3384 := r.ContainerType()
		if yyct3384 == codecSelferValueTypeMap1234 {
			yyl3384 := r.ReadMapStart()
			if yyl3384 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3384, d)
			}
		} else if yyct3384 == codecSelferValueTypeArray1234 {
			yyl3384 := r.ReadArrayStart()
			if yyl3384 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3384, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3385Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3385Slc
	var yyhl3385 bool = l >= 0
	for yyj3385 := 0; ; yyj3385++ {
		if yyhl3385 {
			if yyj3385 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3385Slc = r.DecodeBytes(yys3385Slc, true, true)
		yys3385 := string(yys3385Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3385 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3388 := &x.ObjectMeta
				yyv3388.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3389 := &x.Spec
				yyv3389.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3390 := &x.Status
				yyv3390.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3385)
		} // end switch yys3385
	} // end for yyj3385
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3391 int
	var yyb3391 bool
	var yyhl3391 bool = l >= 0
	yyj3391++
	if yyhl3391 {
		yyb3391 = yyj3391 > l
	} else {
		yyb3391 = r.CheckBreak()
	}
	if yyb3391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3391++
	if yyhl3391 {
		yyb3391 = yyj3391 > l
	} else {
		yyb3391 = r.CheckBreak()
	}
	if yyb3391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3391++
	if yyhl3391 {
		yyb3391 = yyj3391 > l
	} else {
		yyb3391 = r.CheckBreak()
	}
	if yyb3391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3394 := &x.ObjectMeta
		yyv3394.CodecDecodeSelf(d)
	}
	yyj3391++
	if yyhl3391 {
		yyb3391 = yyj3391 > l
	} else {
		yyb3391 = r.CheckBreak()
	}
	if yyb3391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3395 := &x.Spec
		yyv3395.CodecDecodeSelf(d)
	}
	yyj3391++
	if yyhl3391 {
		yyb3391 = yyj3391 > l
	} else {
		yyb3391 = r.CheckBreak()
	}
	if yyb3391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3396 := &x.Status
		yyv3396.CodecDecodeSelf(d)
	}
	for {
		yyj3391++
		if yyhl3391 {
			yyb3391 = yyj3391 > l
		} else {
			yyb3391 = r.CheckBreak()
		}
		if yyb3391 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3391-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3397 := z.EncBinary()
		_ = yym3397
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3398 := !z.EncBinary()
			yy2arr3398 := z.EncBasicHandle().StructToArray
			var yyq3398 [4]bool
			_, _, _ = yysep3398, yyq3398, yy2arr3398
			const yyr3398 bool = false
			yyq3398[0] = x.Kind != ""
			yyq3398[1] = x.APIVersion != ""
			yyq3398[2] = true
			var yynn3398 int
			if yyr3398 || yy2arr3398 {
				r.EncodeArrayStart(4)
			} else {
				yynn3398 = 1
				for _, b := range yyq3398 {
					if b {
						yynn3398++
					}
				}
				r.EncodeMapStart(yynn3398)
				yynn3398 = 0
			}
			if yyr3398 || yy2arr3398 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3398[0] {
					yym3400 := z.EncBinary()
					_ = yym3400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3398[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3401 := z.EncBinary()
					_ = yym3401
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3398 || yy2arr3398 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3398[1] {
					yym3403 := z.EncBinary()
					_ = yym3403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3398[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3404 := z.EncBinary()
					_ = yym3404
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3398 || yy2arr3398 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3398[2] {
					yy3406 := &x.ListMeta
					yym3407 := z.EncBinary()
					_ = yym3407
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3406) {
					} else {
						z.EncFallback(yy3406)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3398[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3408 := &x.ListMeta
					yym3409 := z.EncBinary()
					_ = yym3409
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3408) {
					} else {
						z.EncFallback(yy3408)
					}
				}
			}
			if yyr3398 || yy2arr3398 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3411 := z.EncBinary()
					_ = yym3411
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3412 := z.EncBinary()
					_ = yym3412
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3398 || yy2arr3398 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3413 := z.DecBinary()
	_ = yym3413
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3414 := r.ContainerType()
		if yyct3414 == codecSelferValueTypeMap1234 {
			yyl3414 := r.ReadMapStart()
			if yyl3414 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3414, d)
			}
		} else if yyct3414 == codecSelferValueTypeArray1234 {
			yyl3414 := r.ReadArrayStart()
			if yyl3414 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3414, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3415Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3415Slc
	var yyhl3415 bool = l >= 0
	for yyj3415 := 0; ; yyj3415++ {
		if yyhl3415 {
			if yyj3415 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3415Slc = r.DecodeBytes(yys3415Slc, true, true)
		yys3415 := string(yys3415Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3415 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv3418 := &x.ListMeta
				yym3419 := z.DecBinary()
				_ = yym3419
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3418) {
				} else {
					z.DecFallback(yyv3418, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3420 := &x.Items
				yym3421 := z.DecBinary()
				_ = yym3421
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3420), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3415)
		} // end switch yys3415
	} // end for yyj3415
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3422 int
	var yyb3422 bool
	var yyhl3422 bool = l >= 0
	yyj3422++
	if yyhl3422 {
		yyb3422 = yyj3422 > l
	} else {
		yyb3422 = r.CheckBreak()
	}
	if yyb3422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3422++
	if yyhl3422 {
		yyb3422 = yyj3422 > l
	} else {
		yyb3422 = r.CheckBreak()
	}
	if yyb3422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3422++
	if yyhl3422 {
		yyb3422 = yyj3422 > l
	} else {
		yyb3422 = r.CheckBreak()
	}
	if yyb3422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv3425 := &x.ListMeta
		yym3426 := z.DecBinary()
		_ = yym3426
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3425) {
		} else {
			z.DecFallback(yyv3425, false)
		}
	}
	yyj3422++
	if yyhl3422 {
		yyb3422 = yyj3422 > l
	} else {
		yyb3422 = r.CheckBreak()
	}
	if yyb3422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3427 := &x.Items
		yym3428 := z.DecBinary()
		_ = yym3428
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3427), d)
		}
	}
	for {
		yyj3422++
		if yyhl3422 {
			yyb3422 = yyj3422 > l
		} else {
			yyb3422 = r.CheckBreak()
		}
		if yyb3422 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3422-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3429 := z.EncBinary()
		_ = yym3429
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3430 := !z.EncBinary()
			yy2arr3430 := z.EncBasicHandle().StructToArray
			var yyq3430 [4]bool
			_, _, _ = yysep3430, yyq3430, yy2arr3430
			const yyr3430 bool = false
			yyq3430[0] = x.Kind != ""
			yyq3430[1] = x.APIVersion != ""
			yyq3430[2] = true
			var yynn3430 int
			if yyr3430 || yy2arr3430 {
				r.EncodeArrayStart(4)
			} else {
				yynn3430 = 1
				for _, b := range yyq3430 {
					if b {
						yynn3430++
					}
				}
				r.EncodeMapStart(yynn3430)
				yynn3430 = 0
			}
			if yyr3430 || yy2arr3430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3430[0] {
					yym3432 := z.EncBinary()
					_ = yym3432
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3430[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3433 := z.EncBinary()
					_ = yym3433
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3430 || yy2arr3430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3430[1] {
					yym3435 := z.EncBinary()
					_ = yym3435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3430[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3436 := z.EncBinary()
					_ = yym3436
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3430 || yy2arr3430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3430[2] {
					yy3438 := &x.ObjectMeta
					yy3438.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3430[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3439 := &x.ObjectMeta
					yy3439.CodecEncodeSelf(e)
				}
			}
			if yyr3430 || yy2arr3430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3441 := &x.Target
				yy3441.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3442 := &x.Target
				yy3442.CodecEncodeSelf(e)
			}
			if yyr3430 || yy2arr3430 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3443 := z.DecBinary()
	_ = yym3443
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3444 := r.ContainerType()
		if yyct3444 == codecSelferValueTypeMap1234 {
			yyl3444 := r.ReadMapStart()
			if yyl3444 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3444, d)
			}
		} else if yyct3444 == codecSelferValueTypeArray1234 {
			yyl3444 := r.ReadArrayStart()
			if yyl3444 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3444, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3445Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3445Slc
	var yyhl3445 bool = l >= 0
	for yyj3445 := 0; ; yyj3445++ {
		if yyhl3445 {
			if yyj3445 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3445Slc = r.DecodeBytes(yys3445Slc, true, true)
		yys3445 := string(yys3445Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3445 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3448 := &x.ObjectMeta
				yyv3448.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3449 := &x.Target
				yyv3449.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3445)
		} // end switch yys3445
	} // end for yyj3445
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3450 int
	var yyb3450 bool
	var yyhl3450 bool = l >= 0
	yyj3450++
	if yyhl3450 {
		yyb3450 = yyj3450 > l
	} else {
		yyb3450 = r.CheckBreak()
	}
	if yyb3450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3450++
	if yyhl3450 {
		yyb3450 = yyj3450 > l
	} else {
		yyb3450 = r.CheckBreak()
	}
	if yyb3450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3450++
	if yyhl3450 {
		yyb3450 = yyj3450 > l
	} else {
		yyb3450 = r.CheckBreak()
	}
	if yyb3450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3453 := &x.ObjectMeta
		yyv3453.CodecDecodeSelf(d)
	}
	yyj3450++
	if yyhl3450 {
		yyb3450 = yyj3450 > l
	} else {
		yyb3450 = r.CheckBreak()
	}
	if yyb3450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3454 := &x.Target
		yyv3454.CodecDecodeSelf(d)
	}
	for {
		yyj3450++
		if yyhl3450 {
			yyb3450 = yyj3450 > l
		} else {
			yyb3450 = r.CheckBreak()
		}
		if yyb3450 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3450-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3455 := z.EncBinary()
		_ = yym3455
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3456 := !z.EncBinary()
			yy2arr3456 := z.EncBasicHandle().StructToArray
			var yyq3456 [1]bool
			_, _, _ = yysep3456, yyq3456, yy2arr3456
			const yyr3456 bool = false
			yyq3456[0] = x.UID != nil
			var yynn3456 int
			if yyr3456 || yy2arr3456 {
				r.EncodeArrayStart(1)
			} else {
				yynn3456 = 0
				for _, b := range yyq3456 {
					if b {
						yynn3456++
					}
				}
				r.EncodeMapStart(yynn3456)
				yynn3456 = 0
			}
			if yyr3456 || yy2arr3456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3456[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3458 := *x.UID
						yym3459 := z.EncBinary()
						_ = yym3459
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3458) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3458))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3456[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3460 := *x.UID
						yym3461 := z.EncBinary()
						_ = yym3461
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3460) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3460))
						}
					}
				}
			}
			if yyr3456 || yy2arr3456 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3462 := z.DecBinary()
	_ = yym3462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3463 := r.ContainerType()
		if yyct3463 == codecSelferValueTypeMap1234 {
			yyl3463 := r.ReadMapStart()
			if yyl3463 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3463, d)
			}
		} else if yyct3463 == codecSelferValueTypeArray1234 {
			yyl3463 := r.ReadArrayStart()
			if yyl3463 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3464Slc
	var yyhl3464 bool = l >= 0
	for yyj3464 := 0; ; yyj3464++ {
		if yyhl3464 {
			if yyj3464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3464Slc = r.DecodeBytes(yys3464Slc, true, true)
		yys3464 := string(yys3464Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3464 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3466 := z.DecBinary()
				_ = yym3466
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3464)
		} // end switch yys3464
	} // end for yyj3464
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3467 int
	var yyb3467 bool
	var yyhl3467 bool = l >= 0
	yyj3467++
	if yyhl3467 {
		yyb3467 = yyj3467 > l
	} else {
		yyb3467 = r.CheckBreak()
	}
	if yyb3467 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3469 := z.DecBinary()
		_ = yym3469
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3467++
		if yyhl3467 {
			yyb3467 = yyj3467 > l
		} else {
			yyb3467 = r.CheckBreak()
		}
		if yyb3467 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3467-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3470 := z.EncBinary()
		_ = yym3470
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3471 := !z.EncBinary()
			yy2arr3471 := z.EncBasicHandle().StructToArray
			var yyq3471 [5]bool
			_, _, _ = yysep3471, yyq3471, yy2arr3471
			const yyr3471 bool = false
			yyq3471[0] = x.Kind != ""
			yyq3471[1] = x.APIVersion != ""
			yyq3471[2] = x.GracePeriodSeconds != nil
			yyq3471[3] = x.Preconditions != nil
			yyq3471[4] = x.OrphanDependents != nil
			var yynn3471 int
			if yyr3471 || yy2arr3471 {
				r.EncodeArrayStart(5)
			} else {
				yynn3471 = 0
				for _, b := range yyq3471 {
					if b {
						yynn3471++
					}
				}
				r.EncodeMapStart(yynn3471)
				yynn3471 = 0
			}
			if yyr3471 || yy2arr3471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3471[0] {
					yym3473 := z.EncBinary()
					_ = yym3473
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3471[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3474 := z.EncBinary()
					_ = yym3474
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3471 || yy2arr3471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3471[1] {
					yym3476 := z.EncBinary()
					_ = yym3476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3471[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3477 := z.EncBinary()
					_ = yym3477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3471 || yy2arr3471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3471[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3479 := *x.GracePeriodSeconds
						yym3480 := z.EncBinary()
						_ = yym3480
						if false {
						} else {
							r.EncodeInt(int64(yy3479))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3471[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3481 := *x.GracePeriodSeconds
						yym3482 := z.EncBinary()
						_ = yym3482
						if false {
						} else {
							r.EncodeInt(int64(yy3481))
						}
					}
				}
			}
			if yyr3471 || yy2arr3471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3471[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3471[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3471 || yy2arr3471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3471[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3485 := *x.OrphanDependents
						yym3486 := z.EncBinary()
						_ = yym3486
						if false {
						} else {
							r.EncodeBool(bool(yy3485))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3471[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3487 := *x.OrphanDependents
						yym3488 := z.EncBinary()
						_ = yym3488
						if false {
						} else {
							r.EncodeBool(bool(yy3487))
						}
					}
				}
			}
			if yyr3471 || yy2arr3471 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3489 := z.DecBinary()
	_ = yym3489
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3490 := r.ContainerType()
		if yyct3490 == codecSelferValueTypeMap1234 {
			yyl3490 := r.ReadMapStart()
			if yyl3490 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3490, d)
			}
		} else if yyct3490 == codecSelferValueTypeArray1234 {
			yyl3490 := r.ReadArrayStart()
			if yyl3490 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3490, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3491Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3491Slc
	var yyhl3491 bool = l >= 0
	for yyj3491 := 0; ; yyj3491++ {
		if yyhl3491 {
			if yyj3491 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3491Slc = r.DecodeBytes(yys3491Slc, true, true)
		yys3491 := string(yys3491Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3491 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3495 := z.DecBinary()
				_ = yym3495
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3498 := z.DecBinary()
				_ = yym3498
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3491)
		} // end switch yys3491
	} // end for yyj3491
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3499 int
	var yyb3499 bool
	var yyhl3499 bool = l >= 0
	yyj3499++
	if yyhl3499 {
		yyb3499 = yyj3499 > l
	} else {
		yyb3499 = r.CheckBreak()
	}
	if yyb3499 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3499++
	if yyhl3499 {
		yyb3499 = yyj3499 > l
	} else {
		yyb3499 = r.CheckBreak()
	}
	if yyb3499 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3499++
	if yyhl3499 {
		yyb3499 = yyj3499 > l
	} else {
		yyb3499 = r.CheckBreak()
	}
	if yyb3499 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3503 := z.DecBinary()
		_ = yym3503
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3499++
	if yyhl3499 {
		yyb3499 = yyj3499 > l
	} else {
		yyb3499 = r.CheckBreak()
	}
	if yyb3499 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3499++
	if yyhl3499 {
		yyb3499 = yyj3499 > l
	} else {
		yyb3499 = r.CheckBreak()
	}
	if yyb3499 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3506 := z.DecBinary()
		_ = yym3506
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3499++
		if yyhl3499 {
			yyb3499 = yyj3499 > l
		} else {
			yyb3499 = r.CheckBreak()
		}
		if yyb3499 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3499-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3507 := z.EncBinary()
		_ = yym3507
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3508 := !z.EncBinary()
			yy2arr3508 := z.EncBasicHandle().StructToArray
			var yyq3508 [7]bool
			_, _, _ = yysep3508, yyq3508, yy2arr3508
			const yyr3508 bool = false
			yyq3508[0] = x.Kind != ""
			yyq3508[1] = x.APIVersion != ""
			yyq3508[2] = x.LabelSelector != ""
			yyq3508[3] = x.FieldSelector != ""
			yyq3508[4] = x.Watch != false
			yyq3508[5] = x.ResourceVersion != ""
			yyq3508[6] = x.TimeoutSeconds != nil
			var yynn3508 int
			if yyr3508 || yy2arr3508 {
				r.EncodeArrayStart(7)
			} else {
				yynn3508 = 0
				for _, b := range yyq3508 {
					if b {
						yynn3508++
					}
				}
				r.EncodeMapStart(yynn3508)
				yynn3508 = 0
			}
			if yyr3508 || yy2arr3508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3508[0] {
					yym3510 := z.EncBinary()
					_ = yym3510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3508[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3511 := z.EncBinary()
					_ = yym3511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3508 || yy2arr3508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3508[1] {
					yym3513 := z.EncBinary()
					_ = yym3513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3508[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3514 := z.EncBinary()
					_ = yym3514
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3508 || yy2arr3508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3508[2] {
					yym3516 := z.EncBinary()
					_ = yym3516
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3508[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3517 := z.EncBinary()
					_ = yym3517
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr3508 || yy2arr3508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3508[3] {
					yym3519 := z.EncBinary()
					_ = yym3519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3508[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3520 := z.EncBinary()
					_ = yym3520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr3508 || yy2arr3508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3508[4] {
					yym3522 := z.EncBinary()
					_ = yym3522
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3508[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3523 := z.EncBinary()
					_ = yym3523
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr3508 || yy2arr3508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3508[5] {
					yym3525 := z.EncBinary()
					_ = yym3525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3508[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3526 := z.EncBinary()
					_ = yym3526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3508 || yy2arr3508 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3508[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3528 := *x.TimeoutSeconds
						yym3529 := z.EncBinary()
						_ = yym3529
						if false {
						} else {
							r.EncodeInt(int64(yy3528))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3508[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3530 := *x.TimeoutSeconds
						yym3531 := z.EncBinary()
						_ = yym3531
						if false {
						} else {
							r.EncodeInt(int64(yy3530))
						}
					}
				}
			}
			if yyr3508 || yy2arr3508 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3532 := z.DecBinary()
	_ = yym3532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3533 := r.ContainerType()
		if yyct3533 == codecSelferValueTypeMap1234 {
			yyl3533 := r.ReadMapStart()
			if yyl3533 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3533, d)
			}
		} else if yyct3533 == codecSelferValueTypeArray1234 {
			yyl3533 := r.ReadArrayStart()
			if yyl3533 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3533, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3534Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3534Slc
	var yyhl3534 bool = l >= 0
	for yyj3534 := 0; ; yyj3534++ {
		if yyhl3534 {
			if yyj3534 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3534Slc = r.DecodeBytes(yys3534Slc, true, true)
		yys3534 := string(yys3534Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3534 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3542 := z.DecBinary()
				_ = yym3542
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3534)
		} // end switch yys3534
	} // end for yyj3534
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3543 int
	var yyb3543 bool
	var yyhl3543 bool = l >= 0
	yyj3543++
	if yyhl3543 {
		yyb3543 = yyj3543 > l
	} else {
		yyb3543 = r.CheckBreak()
	}
	if yyb3543 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3543++
	if yyhl3543 {
		yyb3543 = yyj3543 > l
	} else {
		yyb3543 = r.CheckBreak()
	}
	if yyb3543 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3543++
	if yyhl3543 {
		yyb3543 = yyj3543 > l
	} else {
		yyb3543 = r.CheckBreak()
	}
	if yyb3543 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj3543++
	if yyhl3543 {
		yyb3543 = yyj3543 > l
	} else {
		yyb3543 = r.CheckBreak()
	}
	if yyb3543 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj3543++
	if yyhl3543 {
		yyb3543 = yyj3543 > l
	} else {
		yyb3543 = r.CheckBreak()
	}
	if yyb3543 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3543++
	if yyhl3543 {
		yyb3543 = yyj3543 > l
	} else {
		yyb3543 = r.CheckBreak()
	}
	if yyb3543 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3543++
	if yyhl3543 {
		yyb3543 = yyj3543 > l
	} else {
		yyb3543 = r.CheckBreak()
	}
	if yyb3543 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3551 := z.DecBinary()
		_ = yym3551
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3543++
		if yyhl3543 {
			yyb3543 = yyj3543 > l
		} else {
			yyb3543 = r.CheckBreak()
		}
		if yyb3543 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3543-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3552 := z.EncBinary()
		_ = yym3552
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3553 := !z.EncBinary()
			yy2arr3553 := z.EncBasicHandle().StructToArray
			var yyq3553 [10]bool
			_, _, _ = yysep3553, yyq3553, yy2arr3553
			const yyr3553 bool = false
			yyq3553[0] = x.Kind != ""
			yyq3553[1] = x.APIVersion != ""
			yyq3553[2] = x.Container != ""
			yyq3553[3] = x.Follow != false
			yyq3553[4] = x.Previous != false
			yyq3553[5] = x.SinceSeconds != nil
			yyq3553[6] = x.SinceTime != nil
			yyq3553[7] = x.Timestamps != false
			yyq3553[8] = x.TailLines != nil
			yyq3553[9] = x.LimitBytes != nil
			var yynn3553 int
			if yyr3553 || yy2arr3553 {
				r.EncodeArrayStart(10)
			} else {
				yynn3553 = 0
				for _, b := range yyq3553 {
					if b {
						yynn3553++
					}
				}
				r.EncodeMapStart(yynn3553)
				yynn3553 = 0
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3553[0] {
					yym3555 := z.EncBinary()
					_ = yym3555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3553[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3556 := z.EncBinary()
					_ = yym3556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3553[1] {
					yym3558 := z.EncBinary()
					_ = yym3558
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3553[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3559 := z.EncBinary()
					_ = yym3559
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3553[2] {
					yym3561 := z.EncBinary()
					_ = yym3561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3553[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3562 := z.EncBinary()
					_ = yym3562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3553[3] {
					yym3564 := z.EncBinary()
					_ = yym3564
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3553[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3565 := z.EncBinary()
					_ = yym3565
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3553[4] {
					yym3567 := z.EncBinary()
					_ = yym3567
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3553[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3568 := z.EncBinary()
					_ = yym3568
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3553[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3570 := *x.SinceSeconds
						yym3571 := z.EncBinary()
						_ = yym3571
						if false {
						} else {
							r.EncodeInt(int64(yy3570))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3553[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3572 := *x.SinceSeconds
						yym3573 := z.EncBinary()
						_ = yym3573
						if false {
						} else {
							r.EncodeInt(int64(yy3572))
						}
					}
				}
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3553[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3575 := z.EncBinary()
						_ = yym3575
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3575 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3575 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3553[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3576 := z.EncBinary()
						_ = yym3576
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3576 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3576 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3553[7] {
					yym3578 := z.EncBinary()
					_ = yym3578
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3553[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3579 := z.EncBinary()
					_ = yym3579
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3553[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3581 := *x.TailLines
						yym3582 := z.EncBinary()
						_ = yym3582
						if false {
						} else {
							r.EncodeInt(int64(yy3581))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3553[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3583 := *x.TailLines
						yym3584 := z.EncBinary()
						_ = yym3584
						if false {
						} else {
							r.EncodeInt(int64(yy3583))
						}
					}
				}
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3553[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3586 := *x.LimitBytes
						yym3587 := z.EncBinary()
						_ = yym3587
						if false {
						} else {
							r.EncodeInt(int64(yy3586))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3553[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3588 := *x.LimitBytes
						yym3589 := z.EncBinary()
						_ = yym3589
						if false {
						} else {
							r.EncodeInt(int64(yy3588))
						}
					}
				}
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3590 := z.DecBinary()
	_ = yym3590
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3591 := r.ContainerType()
		if yyct3591 == codecSelferValueTypeMap1234 {
			yyl3591 := r.ReadMapStart()
			if yyl3591 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3591, d)
			}
		} else if yyct3591 == codecSelferValueTypeArray1234 {
			yyl3591 := r.ReadArrayStart()
			if yyl3591 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3591, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3592Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3592Slc
	var yyhl3592 bool = l >= 0
	for yyj3592 := 0; ; yyj3592++ {
		if yyhl3592 {
			if yyj3592 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3592Slc = r.DecodeBytes(yys3592Slc, true, true)
		yys3592 := string(yys3592Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3592 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3599 := z.DecBinary()
				_ = yym3599
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_v1.Time)
				}
				yym3601 := z.DecBinary()
				_ = yym3601
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3601 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3601 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3604 := z.DecBinary()
				_ = yym3604
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3606 := z.DecBinary()
				_ = yym3606
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3592)
		} // end switch yys3592
	} // end for yyj3592
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3607 int
	var yyb3607 bool
	var yyhl3607 bool = l >= 0
	yyj3607++
	if yyhl3607 {
		yyb3607 = yyj3607 > l
	} else {
		yyb3607 = r.CheckBreak()
	}
	if yyb3607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3607++
	if yyhl3607 {
		yyb3607 = yyj3607 > l
	} else {
		yyb3607 = r.CheckBreak()
	}
	if yyb3607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3607++
	if yyhl3607 {
		yyb3607 = yyj3607 > l
	} else {
		yyb3607 = r.CheckBreak()
	}
	if yyb3607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3607++
	if yyhl3607 {
		yyb3607 = yyj3607 > l
	} else {
		yyb3607 = r.CheckBreak()
	}
	if yyb3607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3607++
	if yyhl3607 {
		yyb3607 = yyj3607 > l
	} else {
		yyb3607 = r.CheckBreak()
	}
	if yyb3607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3607++
	if yyhl3607 {
		yyb3607 = yyj3607 > l
	} else {
		yyb3607 = r.CheckBreak()
	}
	if yyb3607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3614 := z.DecBinary()
		_ = yym3614
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3607++
	if yyhl3607 {
		yyb3607 = yyj3607 > l
	} else {
		yyb3607 = r.CheckBreak()
	}
	if yyb3607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_v1.Time)
		}
		yym3616 := z.DecBinary()
		_ = yym3616
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3616 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3616 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3607++
	if yyhl3607 {
		yyb3607 = yyj3607 > l
	} else {
		yyb3607 = r.CheckBreak()
	}
	if yyb3607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3607++
	if yyhl3607 {
		yyb3607 = yyj3607 > l
	} else {
		yyb3607 = r.CheckBreak()
	}
	if yyb3607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3619 := z.DecBinary()
		_ = yym3619
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3607++
	if yyhl3607 {
		yyb3607 = yyj3607 > l
	} else {
		yyb3607 = r.CheckBreak()
	}
	if yyb3607 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3621 := z.DecBinary()
		_ = yym3621
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3607++
		if yyhl3607 {
			yyb3607 = yyj3607 > l
		} else {
			yyb3607 = r.CheckBreak()
		}
		if yyb3607 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3607-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3622 := z.EncBinary()
		_ = yym3622
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3623 := !z.EncBinary()
			yy2arr3623 := z.EncBasicHandle().StructToArray
			var yyq3623 [7]bool
			_, _, _ = yysep3623, yyq3623, yy2arr3623
			const yyr3623 bool = false
			yyq3623[0] = x.Kind != ""
			yyq3623[1] = x.APIVersion != ""
			yyq3623[2] = x.Stdin != false
			yyq3623[3] = x.Stdout != false
			yyq3623[4] = x.Stderr != false
			yyq3623[5] = x.TTY != false
			yyq3623[6] = x.Container != ""
			var yynn3623 int
			if yyr3623 || yy2arr3623 {
				r.EncodeArrayStart(7)
			} else {
				yynn3623 = 0
				for _, b := range yyq3623 {
					if b {
						yynn3623++
					}
				}
				r.EncodeMapStart(yynn3623)
				yynn3623 = 0
			}
			if yyr3623 || yy2arr3623 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3623[0] {
					yym3625 := z.EncBinary()
					_ = yym3625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3623[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3626 := z.EncBinary()
					_ = yym3626
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3623 || yy2arr3623 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3623[1] {
					yym3628 := z.EncBinary()
					_ = yym3628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3623[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3629 := z.EncBinary()
					_ = yym3629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3623 || yy2arr3623 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3623[2] {
					yym3631 := z.EncBinary()
					_ = yym3631
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3623[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3632 := z.EncBinary()
					_ = yym3632
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3623 || yy2arr3623 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3623[3] {
					yym3634 := z.EncBinary()
					_ = yym3634
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3623[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3635 := z.EncBinary()
					_ = yym3635
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3623 || yy2arr3623 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3623[4] {
					yym3637 := z.EncBinary()
					_ = yym3637
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3623[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3638 := z.EncBinary()
					_ = yym3638
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3623 || yy2arr3623 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3623[5] {
					yym3640 := z.EncBinary()
					_ = yym3640
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3623[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3641 := z.EncBinary()
					_ = yym3641
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3623 || yy2arr3623 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3623[6] {
					yym3643 := z.EncBinary()
					_ = yym3643
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3623[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3644 := z.EncBinary()
					_ = yym3644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3623 || yy2arr3623 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3645 := z.DecBinary()
	_ = yym3645
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3646 := r.ContainerType()
		if yyct3646 == codecSelferValueTypeMap1234 {
			yyl3646 := r.ReadMapStart()
			if yyl3646 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3646, d)
			}
		} else if yyct3646 == codecSelferValueTypeArray1234 {
			yyl3646 := r.ReadArrayStart()
			if yyl3646 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3646, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3647Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3647Slc
	var yyhl3647 bool = l >= 0
	for yyj3647 := 0; ; yyj3647++ {
		if yyhl3647 {
			if yyj3647 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3647Slc = r.DecodeBytes(yys3647Slc, true, true)
		yys3647 := string(yys3647Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3647 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3647)
		} // end switch yys3647
	} // end for yyj3647
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3655 int
	var yyb3655 bool
	var yyhl3655 bool = l >= 0
	yyj3655++
	if yyhl3655 {
		yyb3655 = yyj3655 > l
	} else {
		yyb3655 = r.CheckBreak()
	}
	if yyb3655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3655++
	if yyhl3655 {
		yyb3655 = yyj3655 > l
	} else {
		yyb3655 = r.CheckBreak()
	}
	if yyb3655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3655++
	if yyhl3655 {
		yyb3655 = yyj3655 > l
	} else {
		yyb3655 = r.CheckBreak()
	}
	if yyb3655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3655++
	if yyhl3655 {
		yyb3655 = yyj3655 > l
	} else {
		yyb3655 = r.CheckBreak()
	}
	if yyb3655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3655++
	if yyhl3655 {
		yyb3655 = yyj3655 > l
	} else {
		yyb3655 = r.CheckBreak()
	}
	if yyb3655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3655++
	if yyhl3655 {
		yyb3655 = yyj3655 > l
	} else {
		yyb3655 = r.CheckBreak()
	}
	if yyb3655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3655++
	if yyhl3655 {
		yyb3655 = yyj3655 > l
	} else {
		yyb3655 = r.CheckBreak()
	}
	if yyb3655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3655++
		if yyhl3655 {
			yyb3655 = yyj3655 > l
		} else {
			yyb3655 = r.CheckBreak()
		}
		if yyb3655 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3655-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3663 := z.EncBinary()
		_ = yym3663
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3664 := !z.EncBinary()
			yy2arr3664 := z.EncBasicHandle().StructToArray
			var yyq3664 [8]bool
			_, _, _ = yysep3664, yyq3664, yy2arr3664
			const yyr3664 bool = false
			yyq3664[0] = x.Kind != ""
			yyq3664[1] = x.APIVersion != ""
			yyq3664[2] = x.Stdin != false
			yyq3664[3] = x.Stdout != false
			yyq3664[4] = x.Stderr != false
			yyq3664[5] = x.TTY != false
			yyq3664[6] = x.Container != ""
			var yynn3664 int
			if yyr3664 || yy2arr3664 {
				r.EncodeArrayStart(8)
			} else {
				yynn3664 = 1
				for _, b := range yyq3664 {
					if b {
						yynn3664++
					}
				}
				r.EncodeMapStart(yynn3664)
				yynn3664 = 0
			}
			if yyr3664 || yy2arr3664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3664[0] {
					yym3666 := z.EncBinary()
					_ = yym3666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3664[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3667 := z.EncBinary()
					_ = yym3667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3664 || yy2arr3664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3664[1] {
					yym3669 := z.EncBinary()
					_ = yym3669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3664[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3670 := z.EncBinary()
					_ = yym3670
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3664 || yy2arr3664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3664[2] {
					yym3672 := z.EncBinary()
					_ = yym3672
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3664[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3673 := z.EncBinary()
					_ = yym3673
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3664 || yy2arr3664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3664[3] {
					yym3675 := z.EncBinary()
					_ = yym3675
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3664[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3676 := z.EncBinary()
					_ = yym3676
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3664 || yy2arr3664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3664[4] {
					yym3678 := z.EncBinary()
					_ = yym3678
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3664[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3679 := z.EncBinary()
					_ = yym3679
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3664 || yy2arr3664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3664[5] {
					yym3681 := z.EncBinary()
					_ = yym3681
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3664[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3682 := z.EncBinary()
					_ = yym3682
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3664 || yy2arr3664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3664[6] {
					yym3684 := z.EncBinary()
					_ = yym3684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3664[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3685 := z.EncBinary()
					_ = yym3685
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3664 || yy2arr3664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3687 := z.EncBinary()
					_ = yym3687
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3688 := z.EncBinary()
					_ = yym3688
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3664 || yy2arr3664 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3689 := z.DecBinary()
	_ = yym3689
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3690 := r.ContainerType()
		if yyct3690 == codecSelferValueTypeMap1234 {
			yyl3690 := r.ReadMapStart()
			if yyl3690 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3690, d)
			}
		} else if yyct3690 == codecSelferValueTypeArray1234 {
			yyl3690 := r.ReadArrayStart()
			if yyl3690 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3690, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3691Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3691Slc
	var yyhl3691 bool = l >= 0
	for yyj3691 := 0; ; yyj3691++ {
		if yyhl3691 {
			if yyj3691 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3691Slc = r.DecodeBytes(yys3691Slc, true, true)
		yys3691 := string(yys3691Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3691 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3699 := &x.Command
				yym3700 := z.DecBinary()
				_ = yym3700
				if false {
				} else {
					z.F.DecSliceStringX(yyv3699, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3691)
		} // end switch yys3691
	} // end for yyj3691
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3701 int
	var yyb3701 bool
	var yyhl3701 bool = l >= 0
	yyj3701++
	if yyhl3701 {
		yyb3701 = yyj3701 > l
	} else {
		yyb3701 = r.CheckBreak()
	}
	if yyb3701 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3701++
	if yyhl3701 {
		yyb3701 = yyj3701 > l
	} else {
		yyb3701 = r.CheckBreak()
	}
	if yyb3701 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3701++
	if yyhl3701 {
		yyb3701 = yyj3701 > l
	} else {
		yyb3701 = r.CheckBreak()
	}
	if yyb3701 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3701++
	if yyhl3701 {
		yyb3701 = yyj3701 > l
	} else {
		yyb3701 = r.CheckBreak()
	}
	if yyb3701 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3701++
	if yyhl3701 {
		yyb3701 = yyj3701 > l
	} else {
		yyb3701 = r.CheckBreak()
	}
	if yyb3701 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3701++
	if yyhl3701 {
		yyb3701 = yyj3701 > l
	} else {
		yyb3701 = r.CheckBreak()
	}
	if yyb3701 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3701++
	if yyhl3701 {
		yyb3701 = yyj3701 > l
	} else {
		yyb3701 = r.CheckBreak()
	}
	if yyb3701 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3701++
	if yyhl3701 {
		yyb3701 = yyj3701 > l
	} else {
		yyb3701 = r.CheckBreak()
	}
	if yyb3701 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3709 := &x.Command
		yym3710 := z.DecBinary()
		_ = yym3710
		if false {
		} else {
			z.F.DecSliceStringX(yyv3709, false, d)
		}
	}
	for {
		yyj3701++
		if yyhl3701 {
			yyb3701 = yyj3701 > l
		} else {
			yyb3701 = r.CheckBreak()
		}
		if yyb3701 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3701-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3711 := z.EncBinary()
		_ = yym3711
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3712 := !z.EncBinary()
			yy2arr3712 := z.EncBasicHandle().StructToArray
			var yyq3712 [3]bool
			_, _, _ = yysep3712, yyq3712, yy2arr3712
			const yyr3712 bool = false
			yyq3712[0] = x.Kind != ""
			yyq3712[1] = x.APIVersion != ""
			yyq3712[2] = x.Path != ""
			var yynn3712 int
			if yyr3712 || yy2arr3712 {
				r.EncodeArrayStart(3)
			} else {
				yynn3712 = 0
				for _, b := range yyq3712 {
					if b {
						yynn3712++
					}
				}
				r.EncodeMapStart(yynn3712)
				yynn3712 = 0
			}
			if yyr3712 || yy2arr3712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3712[0] {
					yym3714 := z.EncBinary()
					_ = yym3714
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3712[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3715 := z.EncBinary()
					_ = yym3715
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3712 || yy2arr3712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3712[1] {
					yym3717 := z.EncBinary()
					_ = yym3717
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3712[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3718 := z.EncBinary()
					_ = yym3718
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3712 || yy2arr3712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3712[2] {
					yym3720 := z.EncBinary()
					_ = yym3720
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3712[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3721 := z.EncBinary()
					_ = yym3721
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3712 || yy2arr3712 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3722 := z.DecBinary()
	_ = yym3722
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3723 := r.ContainerType()
		if yyct3723 == codecSelferValueTypeMap1234 {
			yyl3723 := r.ReadMapStart()
			if yyl3723 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3723, d)
			}
		} else if yyct3723 == codecSelferValueTypeArray1234 {
			yyl3723 := r.ReadArrayStart()
			if yyl3723 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3723, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3724Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3724Slc
	var yyhl3724 bool = l >= 0
	for yyj3724 := 0; ; yyj3724++ {
		if yyhl3724 {
			if yyj3724 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3724Slc = r.DecodeBytes(yys3724Slc, true, true)
		yys3724 := string(yys3724Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3724 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3724)
		} // end switch yys3724
	} // end for yyj3724
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3728 int
	var yyb3728 bool
	var yyhl3728 bool = l >= 0
	yyj3728++
	if yyhl3728 {
		yyb3728 = yyj3728 > l
	} else {
		yyb3728 = r.CheckBreak()
	}
	if yyb3728 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3728++
	if yyhl3728 {
		yyb3728 = yyj3728 > l
	} else {
		yyb3728 = r.CheckBreak()
	}
	if yyb3728 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3728++
	if yyhl3728 {
		yyb3728 = yyj3728 > l
	} else {
		yyb3728 = r.CheckBreak()
	}
	if yyb3728 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3728++
		if yyhl3728 {
			yyb3728 = yyj3728 > l
		} else {
			yyb3728 = r.CheckBreak()
		}
		if yyb3728 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3728-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3732 := z.EncBinary()
		_ = yym3732
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3733 := !z.EncBinary()
			yy2arr3733 := z.EncBasicHandle().StructToArray
			var yyq3733 [3]bool
			_, _, _ = yysep3733, yyq3733, yy2arr3733
			const yyr3733 bool = false
			yyq3733[0] = x.Kind != ""
			yyq3733[1] = x.APIVersion != ""
			yyq3733[2] = x.Path != ""
			var yynn3733 int
			if yyr3733 || yy2arr3733 {
				r.EncodeArrayStart(3)
			} else {
				yynn3733 = 0
				for _, b := range yyq3733 {
					if b {
						yynn3733++
					}
				}
				r.EncodeMapStart(yynn3733)
				yynn3733 = 0
			}
			if yyr3733 || yy2arr3733 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3733[0] {
					yym3735 := z.EncBinary()
					_ = yym3735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3733[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3736 := z.EncBinary()
					_ = yym3736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3733 || yy2arr3733 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3733[1] {
					yym3738 := z.EncBinary()
					_ = yym3738
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3733[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3739 := z.EncBinary()
					_ = yym3739
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3733 || yy2arr3733 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3733[2] {
					yym3741 := z.EncBinary()
					_ = yym3741
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3733[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3742 := z.EncBinary()
					_ = yym3742
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3733 || yy2arr3733 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3743 := z.DecBinary()
	_ = yym3743
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3744 := r.ContainerType()
		if yyct3744 == codecSelferValueTypeMap1234 {
			yyl3744 := r.ReadMapStart()
			if yyl3744 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3744, d)
			}
		} else if yyct3744 == codecSelferValueTypeArray1234 {
			yyl3744 := r.ReadArrayStart()
			if yyl3744 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3744, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3745Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3745Slc
	var yyhl3745 bool = l >= 0
	for yyj3745 := 0; ; yyj3745++ {
		if yyhl3745 {
			if yyj3745 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3745Slc = r.DecodeBytes(yys3745Slc, true, true)
		yys3745 := string(yys3745Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3745 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3745)
		} // end switch yys3745
	} // end for yyj3745
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3749 int
	var yyb3749 bool
	var yyhl3749 bool = l >= 0
	yyj3749++
	if yyhl3749 {
		yyb3749 = yyj3749 > l
	} else {
		yyb3749 = r.CheckBreak()
	}
	if yyb3749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3749++
	if yyhl3749 {
		yyb3749 = yyj3749 > l
	} else {
		yyb3749 = r.CheckBreak()
	}
	if yyb3749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3749++
	if yyhl3749 {
		yyb3749 = yyj3749 > l
	} else {
		yyb3749 = r.CheckBreak()
	}
	if yyb3749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3749++
		if yyhl3749 {
			yyb3749 = yyj3749 > l
		} else {
			yyb3749 = r.CheckBreak()
		}
		if yyb3749 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3749-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3753 := z.EncBinary()
		_ = yym3753
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3754 := !z.EncBinary()
			yy2arr3754 := z.EncBasicHandle().StructToArray
			var yyq3754 [3]bool
			_, _, _ = yysep3754, yyq3754, yy2arr3754
			const yyr3754 bool = false
			yyq3754[0] = x.Kind != ""
			yyq3754[1] = x.APIVersion != ""
			yyq3754[2] = x.Path != ""
			var yynn3754 int
			if yyr3754 || yy2arr3754 {
				r.EncodeArrayStart(3)
			} else {
				yynn3754 = 0
				for _, b := range yyq3754 {
					if b {
						yynn3754++
					}
				}
				r.EncodeMapStart(yynn3754)
				yynn3754 = 0
			}
			if yyr3754 || yy2arr3754 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3754[0] {
					yym3756 := z.EncBinary()
					_ = yym3756
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3754[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3757 := z.EncBinary()
					_ = yym3757
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3754 || yy2arr3754 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3754[1] {
					yym3759 := z.EncBinary()
					_ = yym3759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3754[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3760 := z.EncBinary()
					_ = yym3760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3754 || yy2arr3754 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3754[2] {
					yym3762 := z.EncBinary()
					_ = yym3762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3754[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3763 := z.EncBinary()
					_ = yym3763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3754 || yy2arr3754 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3764 := z.DecBinary()
	_ = yym3764
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3765 := r.ContainerType()
		if yyct3765 == codecSelferValueTypeMap1234 {
			yyl3765 := r.ReadMapStart()
			if yyl3765 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3765, d)
			}
		} else if yyct3765 == codecSelferValueTypeArray1234 {
			yyl3765 := r.ReadArrayStart()
			if yyl3765 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3765, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3766Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3766Slc
	var yyhl3766 bool = l >= 0
	for yyj3766 := 0; ; yyj3766++ {
		if yyhl3766 {
			if yyj3766 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3766Slc = r.DecodeBytes(yys3766Slc, true, true)
		yys3766 := string(yys3766Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3766 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3766)
		} // end switch yys3766
	} // end for yyj3766
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3770 int
	var yyb3770 bool
	var yyhl3770 bool = l >= 0
	yyj3770++
	if yyhl3770 {
		yyb3770 = yyj3770 > l
	} else {
		yyb3770 = r.CheckBreak()
	}
	if yyb3770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3770++
	if yyhl3770 {
		yyb3770 = yyj3770 > l
	} else {
		yyb3770 = r.CheckBreak()
	}
	if yyb3770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3770++
	if yyhl3770 {
		yyb3770 = yyj3770 > l
	} else {
		yyb3770 = r.CheckBreak()
	}
	if yyb3770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3770++
		if yyhl3770 {
			yyb3770 = yyj3770 > l
		} else {
			yyb3770 = r.CheckBreak()
		}
		if yyb3770 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3770-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3774 := z.EncBinary()
		_ = yym3774
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3775 := !z.EncBinary()
			yy2arr3775 := z.EncBasicHandle().StructToArray
			var yyq3775 [7]bool
			_, _, _ = yysep3775, yyq3775, yy2arr3775
			const yyr3775 bool = false
			yyq3775[0] = x.Kind != ""
			yyq3775[1] = x.Namespace != ""
			yyq3775[2] = x.Name != ""
			yyq3775[3] = x.UID != ""
			yyq3775[4] = x.APIVersion != ""
			yyq3775[5] = x.ResourceVersion != ""
			yyq3775[6] = x.FieldPath != ""
			var yynn3775 int
			if yyr3775 || yy2arr3775 {
				r.EncodeArrayStart(7)
			} else {
				yynn3775 = 0
				for _, b := range yyq3775 {
					if b {
						yynn3775++
					}
				}
				r.EncodeMapStart(yynn3775)
				yynn3775 = 0
			}
			if yyr3775 || yy2arr3775 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3775[0] {
					yym3777 := z.EncBinary()
					_ = yym3777
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3775[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3778 := z.EncBinary()
					_ = yym3778
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3775 || yy2arr3775 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3775[1] {
					yym3780 := z.EncBinary()
					_ = yym3780
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3775[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3781 := z.EncBinary()
					_ = yym3781
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3775 || yy2arr3775 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3775[2] {
					yym3783 := z.EncBinary()
					_ = yym3783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3775[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3784 := z.EncBinary()
					_ = yym3784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3775 || yy2arr3775 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3775[3] {
					yym3786 := z.EncBinary()
					_ = yym3786
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3775[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3787 := z.EncBinary()
					_ = yym3787
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3775 || yy2arr3775 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3775[4] {
					yym3789 := z.EncBinary()
					_ = yym3789
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3775[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3790 := z.EncBinary()
					_ = yym3790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3775 || yy2arr3775 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3775[5] {
					yym3792 := z.EncBinary()
					_ = yym3792
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3775[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3793 := z.EncBinary()
					_ = yym3793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3775 || yy2arr3775 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3775[6] {
					yym3795 := z.EncBinary()
					_ = yym3795
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3775[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3796 := z.EncBinary()
					_ = yym3796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3775 || yy2arr3775 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3797 := z.DecBinary()
	_ = yym3797
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3798 := r.ContainerType()
		if yyct3798 == codecSelferValueTypeMap1234 {
			yyl3798 := r.ReadMapStart()
			if yyl3798 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3798, d)
			}
		} else if yyct3798 == codecSelferValueTypeArray1234 {
			yyl3798 := r.ReadArrayStart()
			if yyl3798 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3798, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3799Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3799Slc
	var yyhl3799 bool = l >= 0
	for yyj3799 := 0; ; yyj3799++ {
		if yyhl3799 {
			if yyj3799 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3799Slc = r.DecodeBytes(yys3799Slc, true, true)
		yys3799 := string(yys3799Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3799 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3799)
		} // end switch yys3799
	} // end for yyj3799
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3807 int
	var yyb3807 bool
	var yyhl3807 bool = l >= 0
	yyj3807++
	if yyhl3807 {
		yyb3807 = yyj3807 > l
	} else {
		yyb3807 = r.CheckBreak()
	}
	if yyb3807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3807++
	if yyhl3807 {
		yyb3807 = yyj3807 > l
	} else {
		yyb3807 = r.CheckBreak()
	}
	if yyb3807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3807++
	if yyhl3807 {
		yyb3807 = yyj3807 > l
	} else {
		yyb3807 = r.CheckBreak()
	}
	if yyb3807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3807++
	if yyhl3807 {
		yyb3807 = yyj3807 > l
	} else {
		yyb3807 = r.CheckBreak()
	}
	if yyb3807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3807++
	if yyhl3807 {
		yyb3807 = yyj3807 > l
	} else {
		yyb3807 = r.CheckBreak()
	}
	if yyb3807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3807++
	if yyhl3807 {
		yyb3807 = yyj3807 > l
	} else {
		yyb3807 = r.CheckBreak()
	}
	if yyb3807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3807++
	if yyhl3807 {
		yyb3807 = yyj3807 > l
	} else {
		yyb3807 = r.CheckBreak()
	}
	if yyb3807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3807++
		if yyhl3807 {
			yyb3807 = yyj3807 > l
		} else {
			yyb3807 = r.CheckBreak()
		}
		if yyb3807 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3807-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3815 := z.EncBinary()
		_ = yym3815
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3816 := !z.EncBinary()
			yy2arr3816 := z.EncBasicHandle().StructToArray
			var yyq3816 [1]bool
			_, _, _ = yysep3816, yyq3816, yy2arr3816
			const yyr3816 bool = false
			yyq3816[0] = x.Name != ""
			var yynn3816 int
			if yyr3816 || yy2arr3816 {
				r.EncodeArrayStart(1)
			} else {
				yynn3816 = 0
				for _, b := range yyq3816 {
					if b {
						yynn3816++
					}
				}
				r.EncodeMapStart(yynn3816)
				yynn3816 = 0
			}
			if yyr3816 || yy2arr3816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3816[0] {
					yym3818 := z.EncBinary()
					_ = yym3818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3816[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3819 := z.EncBinary()
					_ = yym3819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3816 || yy2arr3816 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3820 := z.DecBinary()
	_ = yym3820
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3821 := r.ContainerType()
		if yyct3821 == codecSelferValueTypeMap1234 {
			yyl3821 := r.ReadMapStart()
			if yyl3821 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3821, d)
			}
		} else if yyct3821 == codecSelferValueTypeArray1234 {
			yyl3821 := r.ReadArrayStart()
			if yyl3821 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3821, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3822Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3822Slc
	var yyhl3822 bool = l >= 0
	for yyj3822 := 0; ; yyj3822++ {
		if yyhl3822 {
			if yyj3822 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3822Slc = r.DecodeBytes(yys3822Slc, true, true)
		yys3822 := string(yys3822Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3822 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3822)
		} // end switch yys3822
	} // end for yyj3822
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3824 int
	var yyb3824 bool
	var yyhl3824 bool = l >= 0
	yyj3824++
	if yyhl3824 {
		yyb3824 = yyj3824 > l
	} else {
		yyb3824 = r.CheckBreak()
	}
	if yyb3824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3824++
		if yyhl3824 {
			yyb3824 = yyj3824 > l
		} else {
			yyb3824 = r.CheckBreak()
		}
		if yyb3824 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3824-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3826 := z.EncBinary()
		_ = yym3826
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3827 := !z.EncBinary()
			yy2arr3827 := z.EncBasicHandle().StructToArray
			var yyq3827 [3]bool
			_, _, _ = yysep3827, yyq3827, yy2arr3827
			const yyr3827 bool = false
			yyq3827[0] = x.Kind != ""
			yyq3827[1] = x.APIVersion != ""
			yyq3827[2] = true
			var yynn3827 int
			if yyr3827 || yy2arr3827 {
				r.EncodeArrayStart(3)
			} else {
				yynn3827 = 0
				for _, b := range yyq3827 {
					if b {
						yynn3827++
					}
				}
				r.EncodeMapStart(yynn3827)
				yynn3827 = 0
			}
			if yyr3827 || yy2arr3827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3827[0] {
					yym3829 := z.EncBinary()
					_ = yym3829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3827[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3830 := z.EncBinary()
					_ = yym3830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3827 || yy2arr3827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3827[1] {
					yym3832 := z.EncBinary()
					_ = yym3832
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3827[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3833 := z.EncBinary()
					_ = yym3833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3827 || yy2arr3827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3827[2] {
					yy3835 := &x.Reference
					yy3835.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3827[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3836 := &x.Reference
					yy3836.CodecEncodeSelf(e)
				}
			}
			if yyr3827 || yy2arr3827 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3837 := z.DecBinary()
	_ = yym3837
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3838 := r.ContainerType()
		if yyct3838 == codecSelferValueTypeMap1234 {
			yyl3838 := r.ReadMapStart()
			if yyl3838 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3838, d)
			}
		} else if yyct3838 == codecSelferValueTypeArray1234 {
			yyl3838 := r.ReadArrayStart()
			if yyl3838 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3838, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3839Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3839Slc
	var yyhl3839 bool = l >= 0
	for yyj3839 := 0; ; yyj3839++ {
		if yyhl3839 {
			if yyj3839 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3839Slc = r.DecodeBytes(yys3839Slc, true, true)
		yys3839 := string(yys3839Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3839 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3842 := &x.Reference
				yyv3842.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3839)
		} // end switch yys3839
	} // end for yyj3839
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3843 int
	var yyb3843 bool
	var yyhl3843 bool = l >= 0
	yyj3843++
	if yyhl3843 {
		yyb3843 = yyj3843 > l
	} else {
		yyb3843 = r.CheckBreak()
	}
	if yyb3843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3843++
	if yyhl3843 {
		yyb3843 = yyj3843 > l
	} else {
		yyb3843 = r.CheckBreak()
	}
	if yyb3843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3843++
	if yyhl3843 {
		yyb3843 = yyj3843 > l
	} else {
		yyb3843 = r.CheckBreak()
	}
	if yyb3843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3846 := &x.Reference
		yyv3846.CodecDecodeSelf(d)
	}
	for {
		yyj3843++
		if yyhl3843 {
			yyb3843 = yyj3843 > l
		} else {
			yyb3843 = r.CheckBreak()
		}
		if yyb3843 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3843-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3847 := z.EncBinary()
		_ = yym3847
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3848 := !z.EncBinary()
			yy2arr3848 := z.EncBasicHandle().StructToArray
			var yyq3848 [2]bool
			_, _, _ = yysep3848, yyq3848, yy2arr3848
			const yyr3848 bool = false
			yyq3848[0] = x.Component != ""
			yyq3848[1] = x.Host != ""
			var yynn3848 int
			if yyr3848 || yy2arr3848 {
				r.EncodeArrayStart(2)
			} else {
				yynn3848 = 0
				for _, b := range yyq3848 {
					if b {
						yynn3848++
					}
				}
				r.EncodeMapStart(yynn3848)
				yynn3848 = 0
			}
			if yyr3848 || yy2arr3848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3848[0] {
					yym3850 := z.EncBinary()
					_ = yym3850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3848[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3851 := z.EncBinary()
					_ = yym3851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3848 || yy2arr3848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3848[1] {
					yym3853 := z.EncBinary()
					_ = yym3853
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3848[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3854 := z.EncBinary()
					_ = yym3854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3848 || yy2arr3848 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3855 := z.DecBinary()
	_ = yym3855
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3856 := r.ContainerType()
		if yyct3856 == codecSelferValueTypeMap1234 {
			yyl3856 := r.ReadMapStart()
			if yyl3856 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3856, d)
			}
		} else if yyct3856 == codecSelferValueTypeArray1234 {
			yyl3856 := r.ReadArrayStart()
			if yyl3856 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3856, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3857Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3857Slc
	var yyhl3857 bool = l >= 0
	for yyj3857 := 0; ; yyj3857++ {
		if yyhl3857 {
			if yyj3857 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3857Slc = r.DecodeBytes(yys3857Slc, true, true)
		yys3857 := string(yys3857Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3857 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3857)
		} // end switch yys3857
	} // end for yyj3857
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3860 int
	var yyb3860 bool
	var yyhl3860 bool = l >= 0
	yyj3860++
	if yyhl3860 {
		yyb3860 = yyj3860 > l
	} else {
		yyb3860 = r.CheckBreak()
	}
	if yyb3860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3860++
	if yyhl3860 {
		yyb3860 = yyj3860 > l
	} else {
		yyb3860 = r.CheckBreak()
	}
	if yyb3860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3860++
		if yyhl3860 {
			yyb3860 = yyj3860 > l
		} else {
			yyb3860 = r.CheckBreak()
		}
		if yyb3860 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3860-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3863 := z.EncBinary()
		_ = yym3863
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3864 := !z.EncBinary()
			yy2arr3864 := z.EncBasicHandle().StructToArray
			var yyq3864 [11]bool
			_, _, _ = yysep3864, yyq3864, yy2arr3864
			const yyr3864 bool = false
			yyq3864[0] = x.Kind != ""
			yyq3864[1] = x.APIVersion != ""
			yyq3864[4] = x.Reason != ""
			yyq3864[5] = x.Message != ""
			yyq3864[6] = true
			yyq3864[7] = true
			yyq3864[8] = true
			yyq3864[9] = x.Count != 0
			yyq3864[10] = x.Type != ""
			var yynn3864 int
			if yyr3864 || yy2arr3864 {
				r.EncodeArrayStart(11)
			} else {
				yynn3864 = 2
				for _, b := range yyq3864 {
					if b {
						yynn3864++
					}
				}
				r.EncodeMapStart(yynn3864)
				yynn3864 = 0
			}
			if yyr3864 || yy2arr3864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3864[0] {
					yym3866 := z.EncBinary()
					_ = yym3866
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3864[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3867 := z.EncBinary()
					_ = yym3867
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3864 || yy2arr3864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3864[1] {
					yym3869 := z.EncBinary()
					_ = yym3869
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3864[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3870 := z.EncBinary()
					_ = yym3870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3864 || yy2arr3864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3872 := &x.ObjectMeta
				yy3872.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3873 := &x.ObjectMeta
				yy3873.CodecEncodeSelf(e)
			}
			if yyr3864 || yy2arr3864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3875 := &x.InvolvedObject
				yy3875.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3876 := &x.InvolvedObject
				yy3876.CodecEncodeSelf(e)
			}
			if yyr3864 || yy2arr3864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3864[4] {
					yym3878 := z.EncBinary()
					_ = yym3878
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3864[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3879 := z.EncBinary()
					_ = yym3879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3864 || yy2arr3864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3864[5] {
					yym3881 := z.EncBinary()
					_ = yym3881
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3864[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3882 := z.EncBinary()
					_ = yym3882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3864 || yy2arr3864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3864[6] {
					yy3884 := &x.Source
					yy3884.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3864[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3885 := &x.Source
					yy3885.CodecEncodeSelf(e)
				}
			}
			if yyr3864 || yy2arr3864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3864[7] {
					yy3887 := &x.FirstTimestamp
					yym3888 := z.EncBinary()
					_ = yym3888
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3887) {
					} else if yym3888 {
						z.EncBinaryMarshal(yy3887)
					} else if !yym3888 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3887)
					} else {
						z.EncFallback(yy3887)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3864[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3889 := &x.FirstTimestamp
					yym3890 := z.EncBinary()
					_ = yym3890
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3889) {
					} else if yym3890 {
						z.EncBinaryMarshal(yy3889)
					} else if !yym3890 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3889)
					} else {
						z.EncFallback(yy3889)
					}
				}
			}
			if yyr3864 || yy2arr3864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3864[8] {
					yy3892 := &x.LastTimestamp
					yym3893 := z.EncBinary()
					_ = yym3893
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3892) {
					} else if yym3893 {
						z.EncBinaryMarshal(yy3892)
					} else if !yym3893 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3892)
					} else {
						z.EncFallback(yy3892)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3864[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3894 := &x.LastTimestamp
					yym3895 := z.EncBinary()
					_ = yym3895
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3894) {
					} else if yym3895 {
						z.EncBinaryMarshal(yy3894)
					} else if !yym3895 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3894)
					} else {
						z.EncFallback(yy3894)
					}
				}
			}
			if yyr3864 || yy2arr3864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3864[9] {
					yym3897 := z.EncBinary()
					_ = yym3897
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3864[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3898 := z.EncBinary()
					_ = yym3898
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3864 || yy2arr3864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3864[10] {
					yym3900 := z.EncBinary()
					_ = yym3900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3864[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3901 := z.EncBinary()
					_ = yym3901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3864 || yy2arr3864 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3902 := z.DecBinary()
	_ = yym3902
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3903 := r.ContainerType()
		if yyct3903 == codecSelferValueTypeMap1234 {
			yyl3903 := r.ReadMapStart()
			if yyl3903 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3903, d)
			}
		} else if yyct3903 == codecSelferValueTypeArray1234 {
			yyl3903 := r.ReadArrayStart()
			if yyl3903 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3903, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3904Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3904Slc
	var yyhl3904 bool = l >= 0
	for yyj3904 := 0; ; yyj3904++ {
		if yyhl3904 {
			if yyj3904 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3904Slc = r.DecodeBytes(yys3904Slc, true, true)
		yys3904 := string(yys3904Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3904 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3907 := &x.ObjectMeta
				yyv3907.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3908 := &x.InvolvedObject
				yyv3908.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3911 := &x.Source
				yyv3911.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_v1.Time{}
			} else {
				yyv3912 := &x.FirstTimestamp
				yym3913 := z.DecBinary()
				_ = yym3913
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3912) {
				} else if yym3913 {
					z.DecBinaryUnmarshal(yyv3912)
				} else if !yym3913 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3912)
				} else {
					z.DecFallback(yyv3912, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_v1.Time{}
			} else {
				yyv3914 := &x.LastTimestamp
				yym3915 := z.DecBinary()
				_ = yym3915
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3914) {
				} else if yym3915 {
					z.DecBinaryUnmarshal(yyv3914)
				} else if !yym3915 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3914)
				} else {
					z.DecFallback(yyv3914, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3904)
		} // end switch yys3904
	} // end for yyj3904
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3918 int
	var yyb3918 bool
	var yyhl3918 bool = l >= 0
	yyj3918++
	if yyhl3918 {
		yyb3918 = yyj3918 > l
	} else {
		yyb3918 = r.CheckBreak()
	}
	if yyb3918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3918++
	if yyhl3918 {
		yyb3918 = yyj3918 > l
	} else {
		yyb3918 = r.CheckBreak()
	}
	if yyb3918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3918++
	if yyhl3918 {
		yyb3918 = yyj3918 > l
	} else {
		yyb3918 = r.CheckBreak()
	}
	if yyb3918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3921 := &x.ObjectMeta
		yyv3921.CodecDecodeSelf(d)
	}
	yyj3918++
	if yyhl3918 {
		yyb3918 = yyj3918 > l
	} else {
		yyb3918 = r.CheckBreak()
	}
	if yyb3918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3922 := &x.InvolvedObject
		yyv3922.CodecDecodeSelf(d)
	}
	yyj3918++
	if yyhl3918 {
		yyb3918 = yyj3918 > l
	} else {
		yyb3918 = r.CheckBreak()
	}
	if yyb3918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3918++
	if yyhl3918 {
		yyb3918 = yyj3918 > l
	} else {
		yyb3918 = r.CheckBreak()
	}
	if yyb3918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3918++
	if yyhl3918 {
		yyb3918 = yyj3918 > l
	} else {
		yyb3918 = r.CheckBreak()
	}
	if yyb3918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3925 := &x.Source
		yyv3925.CodecDecodeSelf(d)
	}
	yyj3918++
	if yyhl3918 {
		yyb3918 = yyj3918 > l
	} else {
		yyb3918 = r.CheckBreak()
	}
	if yyb3918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_v1.Time{}
	} else {
		yyv3926 := &x.FirstTimestamp
		yym3927 := z.DecBinary()
		_ = yym3927
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3926) {
		} else if yym3927 {
			z.DecBinaryUnmarshal(yyv3926)
		} else if !yym3927 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3926)
		} else {
			z.DecFallback(yyv3926, false)
		}
	}
	yyj3918++
	if yyhl3918 {
		yyb3918 = yyj3918 > l
	} else {
		yyb3918 = r.CheckBreak()
	}
	if yyb3918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_v1.Time{}
	} else {
		yyv3928 := &x.LastTimestamp
		yym3929 := z.DecBinary()
		_ = yym3929
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3928) {
		} else if yym3929 {
			z.DecBinaryUnmarshal(yyv3928)
		} else if !yym3929 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3928)
		} else {
			z.DecFallback(yyv3928, false)
		}
	}
	yyj3918++
	if yyhl3918 {
		yyb3918 = yyj3918 > l
	} else {
		yyb3918 = r.CheckBreak()
	}
	if yyb3918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3918++
	if yyhl3918 {
		yyb3918 = yyj3918 > l
	} else {
		yyb3918 = r.CheckBreak()
	}
	if yyb3918 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3918++
		if yyhl3918 {
			yyb3918 = yyj3918 > l
		} else {
			yyb3918 = r.CheckBreak()
		}
		if yyb3918 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3918-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3932 := z.EncBinary()
		_ = yym3932
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3933 := !z.EncBinary()
			yy2arr3933 := z.EncBasicHandle().StructToArray
			var yyq3933 [4]bool
			_, _, _ = yysep3933, yyq3933, yy2arr3933
			const yyr3933 bool = false
			yyq3933[0] = x.Kind != ""
			yyq3933[1] = x.APIVersion != ""
			yyq3933[2] = true
			var yynn3933 int
			if yyr3933 || yy2arr3933 {
				r.EncodeArrayStart(4)
			} else {
				yynn3933 = 1
				for _, b := range yyq3933 {
					if b {
						yynn3933++
					}
				}
				r.EncodeMapStart(yynn3933)
				yynn3933 = 0
			}
			if yyr3933 || yy2arr3933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3933[0] {
					yym3935 := z.EncBinary()
					_ = yym3935
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3933[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3936 := z.EncBinary()
					_ = yym3936
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3933 || yy2arr3933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3933[1] {
					yym3938 := z.EncBinary()
					_ = yym3938
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3933[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3939 := z.EncBinary()
					_ = yym3939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3933 || yy2arr3933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3933[2] {
					yy3941 := &x.ListMeta
					yym3942 := z.EncBinary()
					_ = yym3942
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3941) {
					} else {
						z.EncFallback(yy3941)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3933[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3943 := &x.ListMeta
					yym3944 := z.EncBinary()
					_ = yym3944
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3943) {
					} else {
						z.EncFallback(yy3943)
					}
				}
			}
			if yyr3933 || yy2arr3933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3946 := z.EncBinary()
					_ = yym3946
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3947 := z.EncBinary()
					_ = yym3947
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3933 || yy2arr3933 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3948 := z.DecBinary()
	_ = yym3948
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3949 := r.ContainerType()
		if yyct3949 == codecSelferValueTypeMap1234 {
			yyl3949 := r.ReadMapStart()
			if yyl3949 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3949, d)
			}
		} else if yyct3949 == codecSelferValueTypeArray1234 {
			yyl3949 := r.ReadArrayStart()
			if yyl3949 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3949, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3950Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3950Slc
	var yyhl3950 bool = l >= 0
	for yyj3950 := 0; ; yyj3950++ {
		if yyhl3950 {
			if yyj3950 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3950Slc = r.DecodeBytes(yys3950Slc, true, true)
		yys3950 := string(yys3950Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3950 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv3953 := &x.ListMeta
				yym3954 := z.DecBinary()
				_ = yym3954
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3953) {
				} else {
					z.DecFallback(yyv3953, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3955 := &x.Items
				yym3956 := z.DecBinary()
				_ = yym3956
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3955), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3950)
		} // end switch yys3950
	} // end for yyj3950
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3957 int
	var yyb3957 bool
	var yyhl3957 bool = l >= 0
	yyj3957++
	if yyhl3957 {
		yyb3957 = yyj3957 > l
	} else {
		yyb3957 = r.CheckBreak()
	}
	if yyb3957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3957++
	if yyhl3957 {
		yyb3957 = yyj3957 > l
	} else {
		yyb3957 = r.CheckBreak()
	}
	if yyb3957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3957++
	if yyhl3957 {
		yyb3957 = yyj3957 > l
	} else {
		yyb3957 = r.CheckBreak()
	}
	if yyb3957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv3960 := &x.ListMeta
		yym3961 := z.DecBinary()
		_ = yym3961
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3960) {
		} else {
			z.DecFallback(yyv3960, false)
		}
	}
	yyj3957++
	if yyhl3957 {
		yyb3957 = yyj3957 > l
	} else {
		yyb3957 = r.CheckBreak()
	}
	if yyb3957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3962 := &x.Items
		yym3963 := z.DecBinary()
		_ = yym3963
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3962), d)
		}
	}
	for {
		yyj3957++
		if yyhl3957 {
			yyb3957 = yyj3957 > l
		} else {
			yyb3957 = r.CheckBreak()
		}
		if yyb3957 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3957-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3964 := z.EncBinary()
		_ = yym3964
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3965 := !z.EncBinary()
			yy2arr3965 := z.EncBasicHandle().StructToArray
			var yyq3965 [4]bool
			_, _, _ = yysep3965, yyq3965, yy2arr3965
			const yyr3965 bool = false
			yyq3965[0] = x.Kind != ""
			yyq3965[1] = x.APIVersion != ""
			yyq3965[2] = true
			var yynn3965 int
			if yyr3965 || yy2arr3965 {
				r.EncodeArrayStart(4)
			} else {
				yynn3965 = 1
				for _, b := range yyq3965 {
					if b {
						yynn3965++
					}
				}
				r.EncodeMapStart(yynn3965)
				yynn3965 = 0
			}
			if yyr3965 || yy2arr3965 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3965[0] {
					yym3967 := z.EncBinary()
					_ = yym3967
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3965[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3968 := z.EncBinary()
					_ = yym3968
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3965 || yy2arr3965 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3965[1] {
					yym3970 := z.EncBinary()
					_ = yym3970
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3965[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3971 := z.EncBinary()
					_ = yym3971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3965 || yy2arr3965 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3965[2] {
					yy3973 := &x.ListMeta
					yym3974 := z.EncBinary()
					_ = yym3974
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3973) {
					} else {
						z.EncFallback(yy3973)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3965[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3975 := &x.ListMeta
					yym3976 := z.EncBinary()
					_ = yym3976
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3975) {
					} else {
						z.EncFallback(yy3975)
					}
				}
			}
			if yyr3965 || yy2arr3965 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3978 := z.EncBinary()
					_ = yym3978
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3979 := z.EncBinary()
					_ = yym3979
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yyr3965 || yy2arr3965 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3980 := z.DecBinary()
	_ = yym3980
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3981 := r.ContainerType()
		if yyct3981 == codecSelferValueTypeMap1234 {
			yyl3981 := r.ReadMapStart()
			if yyl3981 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3981, d)
			}
		} else if yyct3981 == codecSelferValueTypeArray1234 {
			yyl3981 := r.ReadArrayStart()
			if yyl3981 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3981, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3982Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3982Slc
	var yyhl3982 bool = l >= 0
	for yyj3982 := 0; ; yyj3982++ {
		if yyhl3982 {
			if yyj3982 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3982Slc = r.DecodeBytes(yys3982Slc, true, true)
		yys3982 := string(yys3982Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3982 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv3985 := &x.ListMeta
				yym3986 := z.DecBinary()
				_ = yym3986
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3985) {
				} else {
					z.DecFallback(yyv3985, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3987 := &x.Items
				yym3988 := z.DecBinary()
				_ = yym3988
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv3987), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3982)
		} // end switch yys3982
	} // end for yyj3982
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3989 int
	var yyb3989 bool
	var yyhl3989 bool = l >= 0
	yyj3989++
	if yyhl3989 {
		yyb3989 = yyj3989 > l
	} else {
		yyb3989 = r.CheckBreak()
	}
	if yyb3989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3989++
	if yyhl3989 {
		yyb3989 = yyj3989 > l
	} else {
		yyb3989 = r.CheckBreak()
	}
	if yyb3989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3989++
	if yyhl3989 {
		yyb3989 = yyj3989 > l
	} else {
		yyb3989 = r.CheckBreak()
	}
	if yyb3989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv3992 := &x.ListMeta
		yym3993 := z.DecBinary()
		_ = yym3993
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3992) {
		} else {
			z.DecFallback(yyv3992, false)
		}
	}
	yyj3989++
	if yyhl3989 {
		yyb3989 = yyj3989 > l
	} else {
		yyb3989 = r.CheckBreak()
	}
	if yyb3989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3994 := &x.Items
		yym3995 := z.DecBinary()
		_ = yym3995
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv3994), d)
		}
	}
	for {
		yyj3989++
		if yyhl3989 {
			yyb3989 = yyj3989 > l
		} else {
			yyb3989 = r.CheckBreak()
		}
		if yyb3989 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3989-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3996 := z.EncBinary()
	_ = yym3996
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3997 := z.DecBinary()
	_ = yym3997
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3998 := z.EncBinary()
		_ = yym3998
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3999 := !z.EncBinary()
			yy2arr3999 := z.EncBasicHandle().StructToArray
			var yyq3999 [6]bool
			_, _, _ = yysep3999, yyq3999, yy2arr3999
			const yyr3999 bool = false
			yyq3999[0] = x.Type != ""
			yyq3999[1] = len(x.Max) != 0
			yyq3999[2] = len(x.Min) != 0
			yyq3999[3] = len(x.Default) != 0
			yyq3999[4] = len(x.DefaultRequest) != 0
			yyq3999[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3999 int
			if yyr3999 || yy2arr3999 {
				r.EncodeArrayStart(6)
			} else {
				yynn3999 = 0
				for _, b := range yyq3999 {
					if b {
						yynn3999++
					}
				}
				r.EncodeMapStart(yynn3999)
				yynn3999 = 0
			}
			if yyr3999 || yy2arr3999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3999[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3999[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3999 || yy2arr3999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3999[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3999[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3999 || yy2arr3999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3999[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3999[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3999 || yy2arr3999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3999[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3999[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3999 || yy2arr3999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3999[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3999[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3999 || yy2arr3999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3999[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3999[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3999 || yy2arr3999 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4006 := z.DecBinary()
	_ = yym4006
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4007 := r.ContainerType()
		if yyct4007 == codecSelferValueTypeMap1234 {
			yyl4007 := r.ReadMapStart()
			if yyl4007 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4007, d)
			}
		} else if yyct4007 == codecSelferValueTypeArray1234 {
			yyl4007 := r.ReadArrayStart()
			if yyl4007 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4007, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4008Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4008Slc
	var yyhl4008 bool = l >= 0
	for yyj4008 := 0; ; yyj4008++ {
		if yyhl4008 {
			if yyj4008 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4008Slc = r.DecodeBytes(yys4008Slc, true, true)
		yys4008 := string(yys4008Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4008 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv4010 := &x.Max
				yyv4010.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv4011 := &x.Min
				yyv4011.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv4012 := &x.Default
				yyv4012.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv4013 := &x.DefaultRequest
				yyv4013.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv4014 := &x.MaxLimitRequestRatio
				yyv4014.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4008)
		} // end switch yys4008
	} // end for yyj4008
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4015 int
	var yyb4015 bool
	var yyhl4015 bool = l >= 0
	yyj4015++
	if yyhl4015 {
		yyb4015 = yyj4015 > l
	} else {
		yyb4015 = r.CheckBreak()
	}
	if yyb4015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj4015++
	if yyhl4015 {
		yyb4015 = yyj4015 > l
	} else {
		yyb4015 = r.CheckBreak()
	}
	if yyb4015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv4017 := &x.Max
		yyv4017.CodecDecodeSelf(d)
	}
	yyj4015++
	if yyhl4015 {
		yyb4015 = yyj4015 > l
	} else {
		yyb4015 = r.CheckBreak()
	}
	if yyb4015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv4018 := &x.Min
		yyv4018.CodecDecodeSelf(d)
	}
	yyj4015++
	if yyhl4015 {
		yyb4015 = yyj4015 > l
	} else {
		yyb4015 = r.CheckBreak()
	}
	if yyb4015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv4019 := &x.Default
		yyv4019.CodecDecodeSelf(d)
	}
	yyj4015++
	if yyhl4015 {
		yyb4015 = yyj4015 > l
	} else {
		yyb4015 = r.CheckBreak()
	}
	if yyb4015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv4020 := &x.DefaultRequest
		yyv4020.CodecDecodeSelf(d)
	}
	yyj4015++
	if yyhl4015 {
		yyb4015 = yyj4015 > l
	} else {
		yyb4015 = r.CheckBreak()
	}
	if yyb4015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv4021 := &x.MaxLimitRequestRatio
		yyv4021.CodecDecodeSelf(d)
	}
	for {
		yyj4015++
		if yyhl4015 {
			yyb4015 = yyj4015 > l
		} else {
			yyb4015 = r.CheckBreak()
		}
		if yyb4015 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4015-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4022 := z.EncBinary()
		_ = yym4022
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4023 := !z.EncBinary()
			yy2arr4023 := z.EncBasicHandle().StructToArray
			var yyq4023 [1]bool
			_, _, _ = yysep4023, yyq4023, yy2arr4023
			const yyr4023 bool = false
			var yynn4023 int
			if yyr4023 || yy2arr4023 {
				r.EncodeArrayStart(1)
			} else {
				yynn4023 = 1
				for _, b := range yyq4023 {
					if b {
						yynn4023++
					}
				}
				r.EncodeMapStart(yynn4023)
				yynn4023 = 0
			}
			if yyr4023 || yy2arr4023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4025 := z.EncBinary()
					_ = yym4025
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4026 := z.EncBinary()
					_ = yym4026
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr4023 || yy2arr4023 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4027 := z.DecBinary()
	_ = yym4027
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4028 := r.ContainerType()
		if yyct4028 == codecSelferValueTypeMap1234 {
			yyl4028 := r.ReadMapStart()
			if yyl4028 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4028, d)
			}
		} else if yyct4028 == codecSelferValueTypeArray1234 {
			yyl4028 := r.ReadArrayStart()
			if yyl4028 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4028, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4029Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4029Slc
	var yyhl4029 bool = l >= 0
	for yyj4029 := 0; ; yyj4029++ {
		if yyhl4029 {
			if yyj4029 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4029Slc = r.DecodeBytes(yys4029Slc, true, true)
		yys4029 := string(yys4029Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4029 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv4030 := &x.Limits
				yym4031 := z.DecBinary()
				_ = yym4031
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4030), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4029)
		} // end switch yys4029
	} // end for yyj4029
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4032 int
	var yyb4032 bool
	var yyhl4032 bool = l >= 0
	yyj4032++
	if yyhl4032 {
		yyb4032 = yyj4032 > l
	} else {
		yyb4032 = r.CheckBreak()
	}
	if yyb4032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv4033 := &x.Limits
		yym4034 := z.DecBinary()
		_ = yym4034
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4033), d)
		}
	}
	for {
		yyj4032++
		if yyhl4032 {
			yyb4032 = yyj4032 > l
		} else {
			yyb4032 = r.CheckBreak()
		}
		if yyb4032 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4032-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4035 := z.EncBinary()
		_ = yym4035
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4036 := !z.EncBinary()
			yy2arr4036 := z.EncBasicHandle().StructToArray
			var yyq4036 [4]bool
			_, _, _ = yysep4036, yyq4036, yy2arr4036
			const yyr4036 bool = false
			yyq4036[0] = x.Kind != ""
			yyq4036[1] = x.APIVersion != ""
			yyq4036[2] = true
			yyq4036[3] = true
			var yynn4036 int
			if yyr4036 || yy2arr4036 {
				r.EncodeArrayStart(4)
			} else {
				yynn4036 = 0
				for _, b := range yyq4036 {
					if b {
						yynn4036++
					}
				}
				r.EncodeMapStart(yynn4036)
				yynn4036 = 0
			}
			if yyr4036 || yy2arr4036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4036[0] {
					yym4038 := z.EncBinary()
					_ = yym4038
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4036[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4039 := z.EncBinary()
					_ = yym4039
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4036 || yy2arr4036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4036[1] {
					yym4041 := z.EncBinary()
					_ = yym4041
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4036[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4042 := z.EncBinary()
					_ = yym4042
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4036 || yy2arr4036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4036[2] {
					yy4044 := &x.ObjectMeta
					yy4044.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4036[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4045 := &x.ObjectMeta
					yy4045.CodecEncodeSelf(e)
				}
			}
			if yyr4036 || yy2arr4036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4036[3] {
					yy4047 := &x.Spec
					yy4047.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4036[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4048 := &x.Spec
					yy4048.CodecEncodeSelf(e)
				}
			}
			if yyr4036 || yy2arr4036 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4049 := z.DecBinary()
	_ = yym4049
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4050 := r.ContainerType()
		if yyct4050 == codecSelferValueTypeMap1234 {
			yyl4050 := r.ReadMapStart()
			if yyl4050 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4050, d)
			}
		} else if yyct4050 == codecSelferValueTypeArray1234 {
			yyl4050 := r.ReadArrayStart()
			if yyl4050 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4050, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4051Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4051Slc
	var yyhl4051 bool = l >= 0
	for yyj4051 := 0; ; yyj4051++ {
		if yyhl4051 {
			if yyj4051 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4051Slc = r.DecodeBytes(yys4051Slc, true, true)
		yys4051 := string(yys4051Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4051 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4054 := &x.ObjectMeta
				yyv4054.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv4055 := &x.Spec
				yyv4055.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4051)
		} // end switch yys4051
	} // end for yyj4051
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4056 int
	var yyb4056 bool
	var yyhl4056 bool = l >= 0
	yyj4056++
	if yyhl4056 {
		yyb4056 = yyj4056 > l
	} else {
		yyb4056 = r.CheckBreak()
	}
	if yyb4056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4056++
	if yyhl4056 {
		yyb4056 = yyj4056 > l
	} else {
		yyb4056 = r.CheckBreak()
	}
	if yyb4056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4056++
	if yyhl4056 {
		yyb4056 = yyj4056 > l
	} else {
		yyb4056 = r.CheckBreak()
	}
	if yyb4056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4059 := &x.ObjectMeta
		yyv4059.CodecDecodeSelf(d)
	}
	yyj4056++
	if yyhl4056 {
		yyb4056 = yyj4056 > l
	} else {
		yyb4056 = r.CheckBreak()
	}
	if yyb4056 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv4060 := &x.Spec
		yyv4060.CodecDecodeSelf(d)
	}
	for {
		yyj4056++
		if yyhl4056 {
			yyb4056 = yyj4056 > l
		} else {
			yyb4056 = r.CheckBreak()
		}
		if yyb4056 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4056-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4061 := z.EncBinary()
		_ = yym4061
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4062 := !z.EncBinary()
			yy2arr4062 := z.EncBasicHandle().StructToArray
			var yyq4062 [4]bool
			_, _, _ = yysep4062, yyq4062, yy2arr4062
			const yyr4062 bool = false
			yyq4062[0] = x.Kind != ""
			yyq4062[1] = x.APIVersion != ""
			yyq4062[2] = true
			var yynn4062 int
			if yyr4062 || yy2arr4062 {
				r.EncodeArrayStart(4)
			} else {
				yynn4062 = 1
				for _, b := range yyq4062 {
					if b {
						yynn4062++
					}
				}
				r.EncodeMapStart(yynn4062)
				yynn4062 = 0
			}
			if yyr4062 || yy2arr4062 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4062[0] {
					yym4064 := z.EncBinary()
					_ = yym4064
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4062[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4065 := z.EncBinary()
					_ = yym4065
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4062 || yy2arr4062 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4062[1] {
					yym4067 := z.EncBinary()
					_ = yym4067
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4062[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4068 := z.EncBinary()
					_ = yym4068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4062 || yy2arr4062 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4062[2] {
					yy4070 := &x.ListMeta
					yym4071 := z.EncBinary()
					_ = yym4071
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4070) {
					} else {
						z.EncFallback(yy4070)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4062[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4072 := &x.ListMeta
					yym4073 := z.EncBinary()
					_ = yym4073
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4072) {
					} else {
						z.EncFallback(yy4072)
					}
				}
			}
			if yyr4062 || yy2arr4062 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4075 := z.EncBinary()
					_ = yym4075
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4076 := z.EncBinary()
					_ = yym4076
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr4062 || yy2arr4062 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4077 := z.DecBinary()
	_ = yym4077
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4078 := r.ContainerType()
		if yyct4078 == codecSelferValueTypeMap1234 {
			yyl4078 := r.ReadMapStart()
			if yyl4078 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4078, d)
			}
		} else if yyct4078 == codecSelferValueTypeArray1234 {
			yyl4078 := r.ReadArrayStart()
			if yyl4078 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4078, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4079Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4079Slc
	var yyhl4079 bool = l >= 0
	for yyj4079 := 0; ; yyj4079++ {
		if yyhl4079 {
			if yyj4079 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4079Slc = r.DecodeBytes(yys4079Slc, true, true)
		yys4079 := string(yys4079Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4079 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv4082 := &x.ListMeta
				yym4083 := z.DecBinary()
				_ = yym4083
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4082) {
				} else {
					z.DecFallback(yyv4082, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4084 := &x.Items
				yym4085 := z.DecBinary()
				_ = yym4085
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv4084), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4079)
		} // end switch yys4079
	} // end for yyj4079
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4086 int
	var yyb4086 bool
	var yyhl4086 bool = l >= 0
	yyj4086++
	if yyhl4086 {
		yyb4086 = yyj4086 > l
	} else {
		yyb4086 = r.CheckBreak()
	}
	if yyb4086 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4086++
	if yyhl4086 {
		yyb4086 = yyj4086 > l
	} else {
		yyb4086 = r.CheckBreak()
	}
	if yyb4086 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4086++
	if yyhl4086 {
		yyb4086 = yyj4086 > l
	} else {
		yyb4086 = r.CheckBreak()
	}
	if yyb4086 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv4089 := &x.ListMeta
		yym4090 := z.DecBinary()
		_ = yym4090
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4089) {
		} else {
			z.DecFallback(yyv4089, false)
		}
	}
	yyj4086++
	if yyhl4086 {
		yyb4086 = yyj4086 > l
	} else {
		yyb4086 = r.CheckBreak()
	}
	if yyb4086 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4091 := &x.Items
		yym4092 := z.DecBinary()
		_ = yym4092
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv4091), d)
		}
	}
	for {
		yyj4086++
		if yyhl4086 {
			yyb4086 = yyj4086 > l
		} else {
			yyb4086 = r.CheckBreak()
		}
		if yyb4086 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4086-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4093 := z.EncBinary()
	_ = yym4093
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4094 := z.DecBinary()
	_ = yym4094
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4095 := z.EncBinary()
		_ = yym4095
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4096 := !z.EncBinary()
			yy2arr4096 := z.EncBasicHandle().StructToArray
			var yyq4096 [2]bool
			_, _, _ = yysep4096, yyq4096, yy2arr4096
			const yyr4096 bool = false
			yyq4096[0] = len(x.Hard) != 0
			yyq4096[1] = len(x.Scopes) != 0
			var yynn4096 int
			if yyr4096 || yy2arr4096 {
				r.EncodeArrayStart(2)
			} else {
				yynn4096 = 0
				for _, b := range yyq4096 {
					if b {
						yynn4096++
					}
				}
				r.EncodeMapStart(yynn4096)
				yynn4096 = 0
			}
			if yyr4096 || yy2arr4096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4096[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4096[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4096 || yy2arr4096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4096[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4099 := z.EncBinary()
						_ = yym4099
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4096[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4100 := z.EncBinary()
						_ = yym4100
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr4096 || yy2arr4096 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4101 := z.DecBinary()
	_ = yym4101
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4102 := r.ContainerType()
		if yyct4102 == codecSelferValueTypeMap1234 {
			yyl4102 := r.ReadMapStart()
			if yyl4102 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4102, d)
			}
		} else if yyct4102 == codecSelferValueTypeArray1234 {
			yyl4102 := r.ReadArrayStart()
			if yyl4102 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4102, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4103Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4103Slc
	var yyhl4103 bool = l >= 0
	for yyj4103 := 0; ; yyj4103++ {
		if yyhl4103 {
			if yyj4103 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4103Slc = r.DecodeBytes(yys4103Slc, true, true)
		yys4103 := string(yys4103Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4103 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4104 := &x.Hard
				yyv4104.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv4105 := &x.Scopes
				yym4106 := z.DecBinary()
				_ = yym4106
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4105), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4103)
		} // end switch yys4103
	} // end for yyj4103
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4107 int
	var yyb4107 bool
	var yyhl4107 bool = l >= 0
	yyj4107++
	if yyhl4107 {
		yyb4107 = yyj4107 > l
	} else {
		yyb4107 = r.CheckBreak()
	}
	if yyb4107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4108 := &x.Hard
		yyv4108.CodecDecodeSelf(d)
	}
	yyj4107++
	if yyhl4107 {
		yyb4107 = yyj4107 > l
	} else {
		yyb4107 = r.CheckBreak()
	}
	if yyb4107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv4109 := &x.Scopes
		yym4110 := z.DecBinary()
		_ = yym4110
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4109), d)
		}
	}
	for {
		yyj4107++
		if yyhl4107 {
			yyb4107 = yyj4107 > l
		} else {
			yyb4107 = r.CheckBreak()
		}
		if yyb4107 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4107-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4111 := z.EncBinary()
		_ = yym4111
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4112 := !z.EncBinary()
			yy2arr4112 := z.EncBasicHandle().StructToArray
			var yyq4112 [2]bool
			_, _, _ = yysep4112, yyq4112, yy2arr4112
			const yyr4112 bool = false
			yyq4112[0] = len(x.Hard) != 0
			yyq4112[1] = len(x.Used) != 0
			var yynn4112 int
			if yyr4112 || yy2arr4112 {
				r.EncodeArrayStart(2)
			} else {
				yynn4112 = 0
				for _, b := range yyq4112 {
					if b {
						yynn4112++
					}
				}
				r.EncodeMapStart(yynn4112)
				yynn4112 = 0
			}
			if yyr4112 || yy2arr4112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4112[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4112[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4112 || yy2arr4112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4112[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4112[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4112 || yy2arr4112 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4115 := z.DecBinary()
	_ = yym4115
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4116 := r.ContainerType()
		if yyct4116 == codecSelferValueTypeMap1234 {
			yyl4116 := r.ReadMapStart()
			if yyl4116 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4116, d)
			}
		} else if yyct4116 == codecSelferValueTypeArray1234 {
			yyl4116 := r.ReadArrayStart()
			if yyl4116 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4116, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4117Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4117Slc
	var yyhl4117 bool = l >= 0
	for yyj4117 := 0; ; yyj4117++ {
		if yyhl4117 {
			if yyj4117 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4117Slc = r.DecodeBytes(yys4117Slc, true, true)
		yys4117 := string(yys4117Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4117 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4118 := &x.Hard
				yyv4118.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv4119 := &x.Used
				yyv4119.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4117)
		} // end switch yys4117
	} // end for yyj4117
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4120 int
	var yyb4120 bool
	var yyhl4120 bool = l >= 0
	yyj4120++
	if yyhl4120 {
		yyb4120 = yyj4120 > l
	} else {
		yyb4120 = r.CheckBreak()
	}
	if yyb4120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4121 := &x.Hard
		yyv4121.CodecDecodeSelf(d)
	}
	yyj4120++
	if yyhl4120 {
		yyb4120 = yyj4120 > l
	} else {
		yyb4120 = r.CheckBreak()
	}
	if yyb4120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv4122 := &x.Used
		yyv4122.CodecDecodeSelf(d)
	}
	for {
		yyj4120++
		if yyhl4120 {
			yyb4120 = yyj4120 > l
		} else {
			yyb4120 = r.CheckBreak()
		}
		if yyb4120 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4120-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4123 := z.EncBinary()
		_ = yym4123
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4124 := !z.EncBinary()
			yy2arr4124 := z.EncBasicHandle().StructToArray
			var yyq4124 [5]bool
			_, _, _ = yysep4124, yyq4124, yy2arr4124
			const yyr4124 bool = false
			yyq4124[0] = x.Kind != ""
			yyq4124[1] = x.APIVersion != ""
			yyq4124[2] = true
			yyq4124[3] = true
			yyq4124[4] = true
			var yynn4124 int
			if yyr4124 || yy2arr4124 {
				r.EncodeArrayStart(5)
			} else {
				yynn4124 = 0
				for _, b := range yyq4124 {
					if b {
						yynn4124++
					}
				}
				r.EncodeMapStart(yynn4124)
				yynn4124 = 0
			}
			if yyr4124 || yy2arr4124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4124[0] {
					yym4126 := z.EncBinary()
					_ = yym4126
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4124[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4127 := z.EncBinary()
					_ = yym4127
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4124 || yy2arr4124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4124[1] {
					yym4129 := z.EncBinary()
					_ = yym4129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4124[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4130 := z.EncBinary()
					_ = yym4130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4124 || yy2arr4124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4124[2] {
					yy4132 := &x.ObjectMeta
					yy4132.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4124[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4133 := &x.ObjectMeta
					yy4133.CodecEncodeSelf(e)
				}
			}
			if yyr4124 || yy2arr4124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4124[3] {
					yy4135 := &x.Spec
					yy4135.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4124[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4136 := &x.Spec
					yy4136.CodecEncodeSelf(e)
				}
			}
			if yyr4124 || yy2arr4124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4124[4] {
					yy4138 := &x.Status
					yy4138.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4124[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4139 := &x.Status
					yy4139.CodecEncodeSelf(e)
				}
			}
			if yyr4124 || yy2arr4124 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4140 := z.DecBinary()
	_ = yym4140
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4141 := r.ContainerType()
		if yyct4141 == codecSelferValueTypeMap1234 {
			yyl4141 := r.ReadMapStart()
			if yyl4141 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4141, d)
			}
		} else if yyct4141 == codecSelferValueTypeArray1234 {
			yyl4141 := r.ReadArrayStart()
			if yyl4141 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4141, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4142Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4142Slc
	var yyhl4142 bool = l >= 0
	for yyj4142 := 0; ; yyj4142++ {
		if yyhl4142 {
			if yyj4142 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4142Slc = r.DecodeBytes(yys4142Slc, true, true)
		yys4142 := string(yys4142Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4142 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4145 := &x.ObjectMeta
				yyv4145.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4146 := &x.Spec
				yyv4146.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4147 := &x.Status
				yyv4147.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4142)
		} // end switch yys4142
	} // end for yyj4142
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4148 int
	var yyb4148 bool
	var yyhl4148 bool = l >= 0
	yyj4148++
	if yyhl4148 {
		yyb4148 = yyj4148 > l
	} else {
		yyb4148 = r.CheckBreak()
	}
	if yyb4148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4148++
	if yyhl4148 {
		yyb4148 = yyj4148 > l
	} else {
		yyb4148 = r.CheckBreak()
	}
	if yyb4148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4148++
	if yyhl4148 {
		yyb4148 = yyj4148 > l
	} else {
		yyb4148 = r.CheckBreak()
	}
	if yyb4148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4151 := &x.ObjectMeta
		yyv4151.CodecDecodeSelf(d)
	}
	yyj4148++
	if yyhl4148 {
		yyb4148 = yyj4148 > l
	} else {
		yyb4148 = r.CheckBreak()
	}
	if yyb4148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4152 := &x.Spec
		yyv4152.CodecDecodeSelf(d)
	}
	yyj4148++
	if yyhl4148 {
		yyb4148 = yyj4148 > l
	} else {
		yyb4148 = r.CheckBreak()
	}
	if yyb4148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4153 := &x.Status
		yyv4153.CodecDecodeSelf(d)
	}
	for {
		yyj4148++
		if yyhl4148 {
			yyb4148 = yyj4148 > l
		} else {
			yyb4148 = r.CheckBreak()
		}
		if yyb4148 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4148-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4154 := z.EncBinary()
		_ = yym4154
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4155 := !z.EncBinary()
			yy2arr4155 := z.EncBasicHandle().StructToArray
			var yyq4155 [4]bool
			_, _, _ = yysep4155, yyq4155, yy2arr4155
			const yyr4155 bool = false
			yyq4155[0] = x.Kind != ""
			yyq4155[1] = x.APIVersion != ""
			yyq4155[2] = true
			var yynn4155 int
			if yyr4155 || yy2arr4155 {
				r.EncodeArrayStart(4)
			} else {
				yynn4155 = 1
				for _, b := range yyq4155 {
					if b {
						yynn4155++
					}
				}
				r.EncodeMapStart(yynn4155)
				yynn4155 = 0
			}
			if yyr4155 || yy2arr4155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4155[0] {
					yym4157 := z.EncBinary()
					_ = yym4157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4155[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4158 := z.EncBinary()
					_ = yym4158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4155 || yy2arr4155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4155[1] {
					yym4160 := z.EncBinary()
					_ = yym4160
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4155[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4161 := z.EncBinary()
					_ = yym4161
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4155 || yy2arr4155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4155[2] {
					yy4163 := &x.ListMeta
					yym4164 := z.EncBinary()
					_ = yym4164
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4163) {
					} else {
						z.EncFallback(yy4163)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4155[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4165 := &x.ListMeta
					yym4166 := z.EncBinary()
					_ = yym4166
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4165) {
					} else {
						z.EncFallback(yy4165)
					}
				}
			}
			if yyr4155 || yy2arr4155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4168 := z.EncBinary()
					_ = yym4168
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4169 := z.EncBinary()
					_ = yym4169
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4155 || yy2arr4155 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4170 := z.DecBinary()
	_ = yym4170
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4171 := r.ContainerType()
		if yyct4171 == codecSelferValueTypeMap1234 {
			yyl4171 := r.ReadMapStart()
			if yyl4171 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4171, d)
			}
		} else if yyct4171 == codecSelferValueTypeArray1234 {
			yyl4171 := r.ReadArrayStart()
			if yyl4171 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4171, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4172Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4172Slc
	var yyhl4172 bool = l >= 0
	for yyj4172 := 0; ; yyj4172++ {
		if yyhl4172 {
			if yyj4172 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4172Slc = r.DecodeBytes(yys4172Slc, true, true)
		yys4172 := string(yys4172Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4172 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv4175 := &x.ListMeta
				yym4176 := z.DecBinary()
				_ = yym4176
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4175) {
				} else {
					z.DecFallback(yyv4175, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4177 := &x.Items
				yym4178 := z.DecBinary()
				_ = yym4178
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4177), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4172)
		} // end switch yys4172
	} // end for yyj4172
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4179 int
	var yyb4179 bool
	var yyhl4179 bool = l >= 0
	yyj4179++
	if yyhl4179 {
		yyb4179 = yyj4179 > l
	} else {
		yyb4179 = r.CheckBreak()
	}
	if yyb4179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4179++
	if yyhl4179 {
		yyb4179 = yyj4179 > l
	} else {
		yyb4179 = r.CheckBreak()
	}
	if yyb4179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4179++
	if yyhl4179 {
		yyb4179 = yyj4179 > l
	} else {
		yyb4179 = r.CheckBreak()
	}
	if yyb4179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv4182 := &x.ListMeta
		yym4183 := z.DecBinary()
		_ = yym4183
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4182) {
		} else {
			z.DecFallback(yyv4182, false)
		}
	}
	yyj4179++
	if yyhl4179 {
		yyb4179 = yyj4179 > l
	} else {
		yyb4179 = r.CheckBreak()
	}
	if yyb4179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4184 := &x.Items
		yym4185 := z.DecBinary()
		_ = yym4185
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4184), d)
		}
	}
	for {
		yyj4179++
		if yyhl4179 {
			yyb4179 = yyj4179 > l
		} else {
			yyb4179 = r.CheckBreak()
		}
		if yyb4179 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4179-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4186 := z.EncBinary()
		_ = yym4186
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4187 := !z.EncBinary()
			yy2arr4187 := z.EncBasicHandle().StructToArray
			var yyq4187 [6]bool
			_, _, _ = yysep4187, yyq4187, yy2arr4187
			const yyr4187 bool = false
			yyq4187[0] = x.Kind != ""
			yyq4187[1] = x.APIVersion != ""
			yyq4187[2] = true
			yyq4187[3] = len(x.Data) != 0
			yyq4187[4] = len(x.StringData) != 0
			yyq4187[5] = x.Type != ""
			var yynn4187 int
			if yyr4187 || yy2arr4187 {
				r.EncodeArrayStart(6)
			} else {
				yynn4187 = 0
				for _, b := range yyq4187 {
					if b {
						yynn4187++
					}
				}
				r.EncodeMapStart(yynn4187)
				yynn4187 = 0
			}
			if yyr4187 || yy2arr4187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4187[0] {
					yym4189 := z.EncBinary()
					_ = yym4189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4187[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4190 := z.EncBinary()
					_ = yym4190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4187 || yy2arr4187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4187[1] {
					yym4192 := z.EncBinary()
					_ = yym4192
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4187[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4193 := z.EncBinary()
					_ = yym4193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4187 || yy2arr4187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4187[2] {
					yy4195 := &x.ObjectMeta
					yy4195.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4187[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4196 := &x.ObjectMeta
					yy4196.CodecEncodeSelf(e)
				}
			}
			if yyr4187 || yy2arr4187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4187[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4198 := z.EncBinary()
						_ = yym4198
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4187[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4199 := z.EncBinary()
						_ = yym4199
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4187 || yy2arr4187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4187[4] {
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4201 := z.EncBinary()
						_ = yym4201
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4187[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stringData"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4202 := z.EncBinary()
						_ = yym4202
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				}
			}
			if yyr4187 || yy2arr4187 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4187[5] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4187[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4187 || yy2arr4187 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4204 := z.DecBinary()
	_ = yym4204
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4205 := r.ContainerType()
		if yyct4205 == codecSelferValueTypeMap1234 {
			yyl4205 := r.ReadMapStart()
			if yyl4205 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4205, d)
			}
		} else if yyct4205 == codecSelferValueTypeArray1234 {
			yyl4205 := r.ReadArrayStart()
			if yyl4205 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4205, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4206Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4206Slc
	var yyhl4206 bool = l >= 0
	for yyj4206 := 0; ; yyj4206++ {
		if yyhl4206 {
			if yyj4206 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4206Slc = r.DecodeBytes(yys4206Slc, true, true)
		yys4206 := string(yys4206Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4206 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4209 := &x.ObjectMeta
				yyv4209.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4210 := &x.Data
				yym4211 := z.DecBinary()
				_ = yym4211
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4210), d)
				}
			}
		case "stringData":
			if r.TryDecodeAsNil() {
				x.StringData = nil
			} else {
				yyv4212 := &x.StringData
				yym4213 := z.DecBinary()
				_ = yym4213
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4212, false, d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4206)
		} // end switch yys4206
	} // end for yyj4206
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4215 int
	var yyb4215 bool
	var yyhl4215 bool = l >= 0
	yyj4215++
	if yyhl4215 {
		yyb4215 = yyj4215 > l
	} else {
		yyb4215 = r.CheckBreak()
	}
	if yyb4215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4215++
	if yyhl4215 {
		yyb4215 = yyj4215 > l
	} else {
		yyb4215 = r.CheckBreak()
	}
	if yyb4215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4215++
	if yyhl4215 {
		yyb4215 = yyj4215 > l
	} else {
		yyb4215 = r.CheckBreak()
	}
	if yyb4215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4218 := &x.ObjectMeta
		yyv4218.CodecDecodeSelf(d)
	}
	yyj4215++
	if yyhl4215 {
		yyb4215 = yyj4215 > l
	} else {
		yyb4215 = r.CheckBreak()
	}
	if yyb4215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4219 := &x.Data
		yym4220 := z.DecBinary()
		_ = yym4220
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4219), d)
		}
	}
	yyj4215++
	if yyhl4215 {
		yyb4215 = yyj4215 > l
	} else {
		yyb4215 = r.CheckBreak()
	}
	if yyb4215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StringData = nil
	} else {
		yyv4221 := &x.StringData
		yym4222 := z.DecBinary()
		_ = yym4222
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4221, false, d)
		}
	}
	yyj4215++
	if yyhl4215 {
		yyb4215 = yyj4215 > l
	} else {
		yyb4215 = r.CheckBreak()
	}
	if yyb4215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4215++
		if yyhl4215 {
			yyb4215 = yyj4215 > l
		} else {
			yyb4215 = r.CheckBreak()
		}
		if yyb4215 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4215-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4224 := z.EncBinary()
	_ = yym4224
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4225 := z.DecBinary()
	_ = yym4225
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4226 := z.EncBinary()
		_ = yym4226
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4227 := !z.EncBinary()
			yy2arr4227 := z.EncBasicHandle().StructToArray
			var yyq4227 [4]bool
			_, _, _ = yysep4227, yyq4227, yy2arr4227
			const yyr4227 bool = false
			yyq4227[0] = x.Kind != ""
			yyq4227[1] = x.APIVersion != ""
			yyq4227[2] = true
			var yynn4227 int
			if yyr4227 || yy2arr4227 {
				r.EncodeArrayStart(4)
			} else {
				yynn4227 = 1
				for _, b := range yyq4227 {
					if b {
						yynn4227++
					}
				}
				r.EncodeMapStart(yynn4227)
				yynn4227 = 0
			}
			if yyr4227 || yy2arr4227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4227[0] {
					yym4229 := z.EncBinary()
					_ = yym4229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4227[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4230 := z.EncBinary()
					_ = yym4230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4227 || yy2arr4227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4227[1] {
					yym4232 := z.EncBinary()
					_ = yym4232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4227[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4233 := z.EncBinary()
					_ = yym4233
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4227 || yy2arr4227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4227[2] {
					yy4235 := &x.ListMeta
					yym4236 := z.EncBinary()
					_ = yym4236
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4235) {
					} else {
						z.EncFallback(yy4235)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4227[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4237 := &x.ListMeta
					yym4238 := z.EncBinary()
					_ = yym4238
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4237) {
					} else {
						z.EncFallback(yy4237)
					}
				}
			}
			if yyr4227 || yy2arr4227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4240 := z.EncBinary()
					_ = yym4240
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4241 := z.EncBinary()
					_ = yym4241
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4227 || yy2arr4227 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4242 := z.DecBinary()
	_ = yym4242
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4243 := r.ContainerType()
		if yyct4243 == codecSelferValueTypeMap1234 {
			yyl4243 := r.ReadMapStart()
			if yyl4243 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4243, d)
			}
		} else if yyct4243 == codecSelferValueTypeArray1234 {
			yyl4243 := r.ReadArrayStart()
			if yyl4243 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4243, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4244Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4244Slc
	var yyhl4244 bool = l >= 0
	for yyj4244 := 0; ; yyj4244++ {
		if yyhl4244 {
			if yyj4244 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4244Slc = r.DecodeBytes(yys4244Slc, true, true)
		yys4244 := string(yys4244Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4244 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv4247 := &x.ListMeta
				yym4248 := z.DecBinary()
				_ = yym4248
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4247) {
				} else {
					z.DecFallback(yyv4247, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4249 := &x.Items
				yym4250 := z.DecBinary()
				_ = yym4250
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4249), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4244)
		} // end switch yys4244
	} // end for yyj4244
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4251 int
	var yyb4251 bool
	var yyhl4251 bool = l >= 0
	yyj4251++
	if yyhl4251 {
		yyb4251 = yyj4251 > l
	} else {
		yyb4251 = r.CheckBreak()
	}
	if yyb4251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4251++
	if yyhl4251 {
		yyb4251 = yyj4251 > l
	} else {
		yyb4251 = r.CheckBreak()
	}
	if yyb4251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4251++
	if yyhl4251 {
		yyb4251 = yyj4251 > l
	} else {
		yyb4251 = r.CheckBreak()
	}
	if yyb4251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv4254 := &x.ListMeta
		yym4255 := z.DecBinary()
		_ = yym4255
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4254) {
		} else {
			z.DecFallback(yyv4254, false)
		}
	}
	yyj4251++
	if yyhl4251 {
		yyb4251 = yyj4251 > l
	} else {
		yyb4251 = r.CheckBreak()
	}
	if yyb4251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4256 := &x.Items
		yym4257 := z.DecBinary()
		_ = yym4257
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4256), d)
		}
	}
	for {
		yyj4251++
		if yyhl4251 {
			yyb4251 = yyj4251 > l
		} else {
			yyb4251 = r.CheckBreak()
		}
		if yyb4251 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4251-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4258 := z.EncBinary()
		_ = yym4258
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4259 := !z.EncBinary()
			yy2arr4259 := z.EncBasicHandle().StructToArray
			var yyq4259 [4]bool
			_, _, _ = yysep4259, yyq4259, yy2arr4259
			const yyr4259 bool = false
			yyq4259[0] = x.Kind != ""
			yyq4259[1] = x.APIVersion != ""
			yyq4259[2] = true
			yyq4259[3] = len(x.Data) != 0
			var yynn4259 int
			if yyr4259 || yy2arr4259 {
				r.EncodeArrayStart(4)
			} else {
				yynn4259 = 0
				for _, b := range yyq4259 {
					if b {
						yynn4259++
					}
				}
				r.EncodeMapStart(yynn4259)
				yynn4259 = 0
			}
			if yyr4259 || yy2arr4259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4259[0] {
					yym4261 := z.EncBinary()
					_ = yym4261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4259[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4262 := z.EncBinary()
					_ = yym4262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4259 || yy2arr4259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4259[1] {
					yym4264 := z.EncBinary()
					_ = yym4264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4259[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4265 := z.EncBinary()
					_ = yym4265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4259 || yy2arr4259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4259[2] {
					yy4267 := &x.ObjectMeta
					yy4267.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4259[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4268 := &x.ObjectMeta
					yy4268.CodecEncodeSelf(e)
				}
			}
			if yyr4259 || yy2arr4259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4259[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4270 := z.EncBinary()
						_ = yym4270
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4259[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4271 := z.EncBinary()
						_ = yym4271
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4259 || yy2arr4259 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4272 := z.DecBinary()
	_ = yym4272
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4273 := r.ContainerType()
		if yyct4273 == codecSelferValueTypeMap1234 {
			yyl4273 := r.ReadMapStart()
			if yyl4273 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4273, d)
			}
		} else if yyct4273 == codecSelferValueTypeArray1234 {
			yyl4273 := r.ReadArrayStart()
			if yyl4273 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4273, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4274Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4274Slc
	var yyhl4274 bool = l >= 0
	for yyj4274 := 0; ; yyj4274++ {
		if yyhl4274 {
			if yyj4274 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4274Slc = r.DecodeBytes(yys4274Slc, true, true)
		yys4274 := string(yys4274Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4274 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4277 := &x.ObjectMeta
				yyv4277.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4278 := &x.Data
				yym4279 := z.DecBinary()
				_ = yym4279
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4278, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4274)
		} // end switch yys4274
	} // end for yyj4274
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4280 int
	var yyb4280 bool
	var yyhl4280 bool = l >= 0
	yyj4280++
	if yyhl4280 {
		yyb4280 = yyj4280 > l
	} else {
		yyb4280 = r.CheckBreak()
	}
	if yyb4280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4280++
	if yyhl4280 {
		yyb4280 = yyj4280 > l
	} else {
		yyb4280 = r.CheckBreak()
	}
	if yyb4280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4280++
	if yyhl4280 {
		yyb4280 = yyj4280 > l
	} else {
		yyb4280 = r.CheckBreak()
	}
	if yyb4280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4283 := &x.ObjectMeta
		yyv4283.CodecDecodeSelf(d)
	}
	yyj4280++
	if yyhl4280 {
		yyb4280 = yyj4280 > l
	} else {
		yyb4280 = r.CheckBreak()
	}
	if yyb4280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4284 := &x.Data
		yym4285 := z.DecBinary()
		_ = yym4285
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4284, false, d)
		}
	}
	for {
		yyj4280++
		if yyhl4280 {
			yyb4280 = yyj4280 > l
		} else {
			yyb4280 = r.CheckBreak()
		}
		if yyb4280 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4280-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4286 := z.EncBinary()
		_ = yym4286
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4287 := !z.EncBinary()
			yy2arr4287 := z.EncBasicHandle().StructToArray
			var yyq4287 [4]bool
			_, _, _ = yysep4287, yyq4287, yy2arr4287
			const yyr4287 bool = false
			yyq4287[0] = x.Kind != ""
			yyq4287[1] = x.APIVersion != ""
			yyq4287[2] = true
			var yynn4287 int
			if yyr4287 || yy2arr4287 {
				r.EncodeArrayStart(4)
			} else {
				yynn4287 = 1
				for _, b := range yyq4287 {
					if b {
						yynn4287++
					}
				}
				r.EncodeMapStart(yynn4287)
				yynn4287 = 0
			}
			if yyr4287 || yy2arr4287 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4287[0] {
					yym4289 := z.EncBinary()
					_ = yym4289
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4287[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4290 := z.EncBinary()
					_ = yym4290
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4287 || yy2arr4287 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4287[1] {
					yym4292 := z.EncBinary()
					_ = yym4292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4287[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4293 := z.EncBinary()
					_ = yym4293
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4287 || yy2arr4287 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4287[2] {
					yy4295 := &x.ListMeta
					yym4296 := z.EncBinary()
					_ = yym4296
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4295) {
					} else {
						z.EncFallback(yy4295)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4287[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4297 := &x.ListMeta
					yym4298 := z.EncBinary()
					_ = yym4298
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4297) {
					} else {
						z.EncFallback(yy4297)
					}
				}
			}
			if yyr4287 || yy2arr4287 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4300 := z.EncBinary()
					_ = yym4300
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4301 := z.EncBinary()
					_ = yym4301
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4287 || yy2arr4287 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4302 := z.DecBinary()
	_ = yym4302
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4303 := r.ContainerType()
		if yyct4303 == codecSelferValueTypeMap1234 {
			yyl4303 := r.ReadMapStart()
			if yyl4303 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4303, d)
			}
		} else if yyct4303 == codecSelferValueTypeArray1234 {
			yyl4303 := r.ReadArrayStart()
			if yyl4303 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4303, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4304Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4304Slc
	var yyhl4304 bool = l >= 0
	for yyj4304 := 0; ; yyj4304++ {
		if yyhl4304 {
			if yyj4304 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4304Slc = r.DecodeBytes(yys4304Slc, true, true)
		yys4304 := string(yys4304Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4304 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv4307 := &x.ListMeta
				yym4308 := z.DecBinary()
				_ = yym4308
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4307) {
				} else {
					z.DecFallback(yyv4307, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4309 := &x.Items
				yym4310 := z.DecBinary()
				_ = yym4310
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4309), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4304)
		} // end switch yys4304
	} // end for yyj4304
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4311 int
	var yyb4311 bool
	var yyhl4311 bool = l >= 0
	yyj4311++
	if yyhl4311 {
		yyb4311 = yyj4311 > l
	} else {
		yyb4311 = r.CheckBreak()
	}
	if yyb4311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4311++
	if yyhl4311 {
		yyb4311 = yyj4311 > l
	} else {
		yyb4311 = r.CheckBreak()
	}
	if yyb4311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4311++
	if yyhl4311 {
		yyb4311 = yyj4311 > l
	} else {
		yyb4311 = r.CheckBreak()
	}
	if yyb4311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv4314 := &x.ListMeta
		yym4315 := z.DecBinary()
		_ = yym4315
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4314) {
		} else {
			z.DecFallback(yyv4314, false)
		}
	}
	yyj4311++
	if yyhl4311 {
		yyb4311 = yyj4311 > l
	} else {
		yyb4311 = r.CheckBreak()
	}
	if yyb4311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4316 := &x.Items
		yym4317 := z.DecBinary()
		_ = yym4317
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4316), d)
		}
	}
	for {
		yyj4311++
		if yyhl4311 {
			yyb4311 = yyj4311 > l
		} else {
			yyb4311 = r.CheckBreak()
		}
		if yyb4311 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4311-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4318 := z.EncBinary()
	_ = yym4318
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4319 := z.DecBinary()
	_ = yym4319
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4320 := z.EncBinary()
		_ = yym4320
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4321 := !z.EncBinary()
			yy2arr4321 := z.EncBasicHandle().StructToArray
			var yyq4321 [4]bool
			_, _, _ = yysep4321, yyq4321, yy2arr4321
			const yyr4321 bool = false
			yyq4321[2] = x.Message != ""
			yyq4321[3] = x.Error != ""
			var yynn4321 int
			if yyr4321 || yy2arr4321 {
				r.EncodeArrayStart(4)
			} else {
				yynn4321 = 2
				for _, b := range yyq4321 {
					if b {
						yynn4321++
					}
				}
				r.EncodeMapStart(yynn4321)
				yynn4321 = 0
			}
			if yyr4321 || yy2arr4321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4321 || yy2arr4321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4321 || yy2arr4321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4321[2] {
					yym4325 := z.EncBinary()
					_ = yym4325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4321[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4326 := z.EncBinary()
					_ = yym4326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4321 || yy2arr4321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4321[3] {
					yym4328 := z.EncBinary()
					_ = yym4328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4321[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4329 := z.EncBinary()
					_ = yym4329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4321 || yy2arr4321 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4330 := z.DecBinary()
	_ = yym4330
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4331 := r.ContainerType()
		if yyct4331 == codecSelferValueTypeMap1234 {
			yyl4331 := r.ReadMapStart()
			if yyl4331 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4331, d)
			}
		} else if yyct4331 == codecSelferValueTypeArray1234 {
			yyl4331 := r.ReadArrayStart()
			if yyl4331 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4331, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4332Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4332Slc
	var yyhl4332 bool = l >= 0
	for yyj4332 := 0; ; yyj4332++ {
		if yyhl4332 {
			if yyj4332 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4332Slc = r.DecodeBytes(yys4332Slc, true, true)
		yys4332 := string(yys4332Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4332 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4332)
		} // end switch yys4332
	} // end for yyj4332
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4337 int
	var yyb4337 bool
	var yyhl4337 bool = l >= 0
	yyj4337++
	if yyhl4337 {
		yyb4337 = yyj4337 > l
	} else {
		yyb4337 = r.CheckBreak()
	}
	if yyb4337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4337++
	if yyhl4337 {
		yyb4337 = yyj4337 > l
	} else {
		yyb4337 = r.CheckBreak()
	}
	if yyb4337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4337++
	if yyhl4337 {
		yyb4337 = yyj4337 > l
	} else {
		yyb4337 = r.CheckBreak()
	}
	if yyb4337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4337++
	if yyhl4337 {
		yyb4337 = yyj4337 > l
	} else {
		yyb4337 = r.CheckBreak()
	}
	if yyb4337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4337++
		if yyhl4337 {
			yyb4337 = yyj4337 > l
		} else {
			yyb4337 = r.CheckBreak()
		}
		if yyb4337 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4337-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4342 := z.EncBinary()
		_ = yym4342
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4343 := !z.EncBinary()
			yy2arr4343 := z.EncBasicHandle().StructToArray
			var yyq4343 [4]bool
			_, _, _ = yysep4343, yyq4343, yy2arr4343
			const yyr4343 bool = false
			yyq4343[0] = x.Kind != ""
			yyq4343[1] = x.APIVersion != ""
			yyq4343[2] = true
			yyq4343[3] = len(x.Conditions) != 0
			var yynn4343 int
			if yyr4343 || yy2arr4343 {
				r.EncodeArrayStart(4)
			} else {
				yynn4343 = 0
				for _, b := range yyq4343 {
					if b {
						yynn4343++
					}
				}
				r.EncodeMapStart(yynn4343)
				yynn4343 = 0
			}
			if yyr4343 || yy2arr4343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4343[0] {
					yym4345 := z.EncBinary()
					_ = yym4345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4343[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4346 := z.EncBinary()
					_ = yym4346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4343 || yy2arr4343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4343[1] {
					yym4348 := z.EncBinary()
					_ = yym4348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4343[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4349 := z.EncBinary()
					_ = yym4349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4343 || yy2arr4343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4343[2] {
					yy4351 := &x.ObjectMeta
					yy4351.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4343[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4352 := &x.ObjectMeta
					yy4352.CodecEncodeSelf(e)
				}
			}
			if yyr4343 || yy2arr4343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4343[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4354 := z.EncBinary()
						_ = yym4354
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4343[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4355 := z.EncBinary()
						_ = yym4355
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4343 || yy2arr4343 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4356 := z.DecBinary()
	_ = yym4356
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4357 := r.ContainerType()
		if yyct4357 == codecSelferValueTypeMap1234 {
			yyl4357 := r.ReadMapStart()
			if yyl4357 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4357, d)
			}
		} else if yyct4357 == codecSelferValueTypeArray1234 {
			yyl4357 := r.ReadArrayStart()
			if yyl4357 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4357, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4358Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4358Slc
	var yyhl4358 bool = l >= 0
	for yyj4358 := 0; ; yyj4358++ {
		if yyhl4358 {
			if yyj4358 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4358Slc = r.DecodeBytes(yys4358Slc, true, true)
		yys4358 := string(yys4358Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4358 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4361 := &x.ObjectMeta
				yyv4361.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4362 := &x.Conditions
				yym4363 := z.DecBinary()
				_ = yym4363
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4362), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4358)
		} // end switch yys4358
	} // end for yyj4358
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4364 int
	var yyb4364 bool
	var yyhl4364 bool = l >= 0
	yyj4364++
	if yyhl4364 {
		yyb4364 = yyj4364 > l
	} else {
		yyb4364 = r.CheckBreak()
	}
	if yyb4364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4364++
	if yyhl4364 {
		yyb4364 = yyj4364 > l
	} else {
		yyb4364 = r.CheckBreak()
	}
	if yyb4364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4364++
	if yyhl4364 {
		yyb4364 = yyj4364 > l
	} else {
		yyb4364 = r.CheckBreak()
	}
	if yyb4364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4367 := &x.ObjectMeta
		yyv4367.CodecDecodeSelf(d)
	}
	yyj4364++
	if yyhl4364 {
		yyb4364 = yyj4364 > l
	} else {
		yyb4364 = r.CheckBreak()
	}
	if yyb4364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4368 := &x.Conditions
		yym4369 := z.DecBinary()
		_ = yym4369
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4368), d)
		}
	}
	for {
		yyj4364++
		if yyhl4364 {
			yyb4364 = yyj4364 > l
		} else {
			yyb4364 = r.CheckBreak()
		}
		if yyb4364 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4364-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4370 := z.EncBinary()
		_ = yym4370
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4371 := !z.EncBinary()
			yy2arr4371 := z.EncBasicHandle().StructToArray
			var yyq4371 [4]bool
			_, _, _ = yysep4371, yyq4371, yy2arr4371
			const yyr4371 bool = false
			yyq4371[0] = x.Kind != ""
			yyq4371[1] = x.APIVersion != ""
			yyq4371[2] = true
			var yynn4371 int
			if yyr4371 || yy2arr4371 {
				r.EncodeArrayStart(4)
			} else {
				yynn4371 = 1
				for _, b := range yyq4371 {
					if b {
						yynn4371++
					}
				}
				r.EncodeMapStart(yynn4371)
				yynn4371 = 0
			}
			if yyr4371 || yy2arr4371 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4371[0] {
					yym4373 := z.EncBinary()
					_ = yym4373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4371[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4374 := z.EncBinary()
					_ = yym4374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4371 || yy2arr4371 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4371[1] {
					yym4376 := z.EncBinary()
					_ = yym4376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4371[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4377 := z.EncBinary()
					_ = yym4377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4371 || yy2arr4371 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4371[2] {
					yy4379 := &x.ListMeta
					yym4380 := z.EncBinary()
					_ = yym4380
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4379) {
					} else {
						z.EncFallback(yy4379)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4371[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4381 := &x.ListMeta
					yym4382 := z.EncBinary()
					_ = yym4382
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4381) {
					} else {
						z.EncFallback(yy4381)
					}
				}
			}
			if yyr4371 || yy2arr4371 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4384 := z.EncBinary()
					_ = yym4384
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4385 := z.EncBinary()
					_ = yym4385
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4371 || yy2arr4371 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4386 := z.DecBinary()
	_ = yym4386
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4387 := r.ContainerType()
		if yyct4387 == codecSelferValueTypeMap1234 {
			yyl4387 := r.ReadMapStart()
			if yyl4387 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4387, d)
			}
		} else if yyct4387 == codecSelferValueTypeArray1234 {
			yyl4387 := r.ReadArrayStart()
			if yyl4387 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4387, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4388Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4388Slc
	var yyhl4388 bool = l >= 0
	for yyj4388 := 0; ; yyj4388++ {
		if yyhl4388 {
			if yyj4388 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4388Slc = r.DecodeBytes(yys4388Slc, true, true)
		yys4388 := string(yys4388Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4388 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_v1.ListMeta{}
			} else {
				yyv4391 := &x.ListMeta
				yym4392 := z.DecBinary()
				_ = yym4392
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4391) {
				} else {
					z.DecFallback(yyv4391, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4393 := &x.Items
				yym4394 := z.DecBinary()
				_ = yym4394
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4393), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4388)
		} // end switch yys4388
	} // end for yyj4388
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4395 int
	var yyb4395 bool
	var yyhl4395 bool = l >= 0
	yyj4395++
	if yyhl4395 {
		yyb4395 = yyj4395 > l
	} else {
		yyb4395 = r.CheckBreak()
	}
	if yyb4395 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4395++
	if yyhl4395 {
		yyb4395 = yyj4395 > l
	} else {
		yyb4395 = r.CheckBreak()
	}
	if yyb4395 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4395++
	if yyhl4395 {
		yyb4395 = yyj4395 > l
	} else {
		yyb4395 = r.CheckBreak()
	}
	if yyb4395 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_v1.ListMeta{}
	} else {
		yyv4398 := &x.ListMeta
		yym4399 := z.DecBinary()
		_ = yym4399
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4398) {
		} else {
			z.DecFallback(yyv4398, false)
		}
	}
	yyj4395++
	if yyhl4395 {
		yyb4395 = yyj4395 > l
	} else {
		yyb4395 = r.CheckBreak()
	}
	if yyb4395 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4400 := &x.Items
		yym4401 := z.DecBinary()
		_ = yym4401
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4400), d)
		}
	}
	for {
		yyj4395++
		if yyhl4395 {
			yyb4395 = yyj4395 > l
		} else {
			yyb4395 = r.CheckBreak()
		}
		if yyb4395 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4395-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4402 := z.EncBinary()
		_ = yym4402
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4403 := !z.EncBinary()
			yy2arr4403 := z.EncBasicHandle().StructToArray
			var yyq4403 [2]bool
			_, _, _ = yysep4403, yyq4403, yy2arr4403
			const yyr4403 bool = false
			yyq4403[0] = len(x.Items) != 0
			yyq4403[1] = x.DefaultMode != nil
			var yynn4403 int
			if yyr4403 || yy2arr4403 {
				r.EncodeArrayStart(2)
			} else {
				yynn4403 = 0
				for _, b := range yyq4403 {
					if b {
						yynn4403++
					}
				}
				r.EncodeMapStart(yynn4403)
				yynn4403 = 0
			}
			if yyr4403 || yy2arr4403 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4403[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4405 := z.EncBinary()
						_ = yym4405
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4403[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4406 := z.EncBinary()
						_ = yym4406
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr4403 || yy2arr4403 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4403[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4408 := *x.DefaultMode
						yym4409 := z.EncBinary()
						_ = yym4409
						if false {
						} else {
							r.EncodeInt(int64(yy4408))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4403[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4410 := *x.DefaultMode
						yym4411 := z.EncBinary()
						_ = yym4411
						if false {
						} else {
							r.EncodeInt(int64(yy4410))
						}
					}
				}
			}
			if yyr4403 || yy2arr4403 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4412 := z.DecBinary()
	_ = yym4412
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4413 := r.ContainerType()
		if yyct4413 == codecSelferValueTypeMap1234 {
			yyl4413 := r.ReadMapStart()
			if yyl4413 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4413, d)
			}
		} else if yyct4413 == codecSelferValueTypeArray1234 {
			yyl4413 := r.ReadArrayStart()
			if yyl4413 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4413, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4414Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4414Slc
	var yyhl4414 bool = l >= 0
	for yyj4414 := 0; ; yyj4414++ {
		if yyhl4414 {
			if yyj4414 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4414Slc = r.DecodeBytes(yys4414Slc, true, true)
		yys4414 := string(yys4414Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4414 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4415 := &x.Items
				yym4416 := z.DecBinary()
				_ = yym4416
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4415), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym4418 := z.DecBinary()
				_ = yym4418
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4414)
		} // end switch yys4414
	} // end for yyj4414
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4419 int
	var yyb4419 bool
	var yyhl4419 bool = l >= 0
	yyj4419++
	if yyhl4419 {
		yyb4419 = yyj4419 > l
	} else {
		yyb4419 = r.CheckBreak()
	}
	if yyb4419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4420 := &x.Items
		yym4421 := z.DecBinary()
		_ = yym4421
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4420), d)
		}
	}
	yyj4419++
	if yyhl4419 {
		yyb4419 = yyj4419 > l
	} else {
		yyb4419 = r.CheckBreak()
	}
	if yyb4419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym4423 := z.DecBinary()
		_ = yym4423
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4419++
		if yyhl4419 {
			yyb4419 = yyj4419 > l
		} else {
			yyb4419 = r.CheckBreak()
		}
		if yyb4419 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4419-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4424 := z.EncBinary()
		_ = yym4424
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4425 := !z.EncBinary()
			yy2arr4425 := z.EncBasicHandle().StructToArray
			var yyq4425 [4]bool
			_, _, _ = yysep4425, yyq4425, yy2arr4425
			const yyr4425 bool = false
			yyq4425[1] = x.FieldRef != nil
			yyq4425[2] = x.ResourceFieldRef != nil
			yyq4425[3] = x.Mode != nil
			var yynn4425 int
			if yyr4425 || yy2arr4425 {
				r.EncodeArrayStart(4)
			} else {
				yynn4425 = 1
				for _, b := range yyq4425 {
					if b {
						yynn4425++
					}
				}
				r.EncodeMapStart(yynn4425)
				yynn4425 = 0
			}
			if yyr4425 || yy2arr4425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4427 := z.EncBinary()
				_ = yym4427
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4428 := z.EncBinary()
				_ = yym4428
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr4425 || yy2arr4425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4425[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4425[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4425 || yy2arr4425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4425[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4425[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4425 || yy2arr4425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4425[3] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4432 := *x.Mode
						yym4433 := z.EncBinary()
						_ = yym4433
						if false {
						} else {
							r.EncodeInt(int64(yy4432))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4425[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4434 := *x.Mode
						yym4435 := z.EncBinary()
						_ = yym4435
						if false {
						} else {
							r.EncodeInt(int64(yy4434))
						}
					}
				}
			}
			if yyr4425 || yy2arr4425 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4436 := z.DecBinary()
	_ = yym4436
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4437 := r.ContainerType()
		if yyct4437 == codecSelferValueTypeMap1234 {
			yyl4437 := r.ReadMapStart()
			if yyl4437 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4437, d)
			}
		} else if yyct4437 == codecSelferValueTypeArray1234 {
			yyl4437 := r.ReadArrayStart()
			if yyl4437 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4437, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4438Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4438Slc
	var yyhl4438 bool = l >= 0
	for yyj4438 := 0; ; yyj4438++ {
		if yyhl4438 {
			if yyj4438 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4438Slc = r.DecodeBytes(yys4438Slc, true, true)
		yys4438 := string(yys4438Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4438 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym4443 := z.DecBinary()
				_ = yym4443
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4438)
		} // end switch yys4438
	} // end for yyj4438
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4444 int
	var yyb4444 bool
	var yyhl4444 bool = l >= 0
	yyj4444++
	if yyhl4444 {
		yyb4444 = yyj4444 > l
	} else {
		yyb4444 = r.CheckBreak()
	}
	if yyb4444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj4444++
	if yyhl4444 {
		yyb4444 = yyj4444 > l
	} else {
		yyb4444 = r.CheckBreak()
	}
	if yyb4444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj4444++
	if yyhl4444 {
		yyb4444 = yyj4444 > l
	} else {
		yyb4444 = r.CheckBreak()
	}
	if yyb4444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj4444++
	if yyhl4444 {
		yyb4444 = yyj4444 > l
	} else {
		yyb4444 = r.CheckBreak()
	}
	if yyb4444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym4449 := z.DecBinary()
		_ = yym4449
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4444++
		if yyhl4444 {
			yyb4444 = yyj4444 > l
		} else {
			yyb4444 = r.CheckBreak()
		}
		if yyb4444 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4444-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4450 := z.EncBinary()
		_ = yym4450
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4451 := !z.EncBinary()
			yy2arr4451 := z.EncBasicHandle().StructToArray
			var yyq4451 [6]bool
			_, _, _ = yysep4451, yyq4451, yy2arr4451
			const yyr4451 bool = false
			yyq4451[0] = x.Capabilities != nil
			yyq4451[1] = x.Privileged != nil
			yyq4451[2] = x.SELinuxOptions != nil
			yyq4451[3] = x.RunAsUser != nil
			yyq4451[4] = x.RunAsNonRoot != nil
			yyq4451[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4451 int
			if yyr4451 || yy2arr4451 {
				r.EncodeArrayStart(6)
			} else {
				yynn4451 = 0
				for _, b := range yyq4451 {
					if b {
						yynn4451++
					}
				}
				r.EncodeMapStart(yynn4451)
				yynn4451 = 0
			}
			if yyr4451 || yy2arr4451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4451[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4451[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4451 || yy2arr4451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4451[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4454 := *x.Privileged
						yym4455 := z.EncBinary()
						_ = yym4455
						if false {
						} else {
							r.EncodeBool(bool(yy4454))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4451[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4456 := *x.Privileged
						yym4457 := z.EncBinary()
						_ = yym4457
						if false {
						} else {
							r.EncodeBool(bool(yy4456))
						}
					}
				}
			}
			if yyr4451 || yy2arr4451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4451[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4451[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4451 || yy2arr4451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4451[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4460 := *x.RunAsUser
						yym4461 := z.EncBinary()
						_ = yym4461
						if false {
						} else {
							r.EncodeInt(int64(yy4460))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4451[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4462 := *x.RunAsUser
						yym4463 := z.EncBinary()
						_ = yym4463
						if false {
						} else {
							r.EncodeInt(int64(yy4462))
						}
					}
				}
			}
			if yyr4451 || yy2arr4451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4451[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4465 := *x.RunAsNonRoot
						yym4466 := z.EncBinary()
						_ = yym4466
						if false {
						} else {
							r.EncodeBool(bool(yy4465))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4451[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4467 := *x.RunAsNonRoot
						yym4468 := z.EncBinary()
						_ = yym4468
						if false {
						} else {
							r.EncodeBool(bool(yy4467))
						}
					}
				}
			}
			if yyr4451 || yy2arr4451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4451[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4470 := *x.ReadOnlyRootFilesystem
						yym4471 := z.EncBinary()
						_ = yym4471
						if false {
						} else {
							r.EncodeBool(bool(yy4470))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4451[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4472 := *x.ReadOnlyRootFilesystem
						yym4473 := z.EncBinary()
						_ = yym4473
						if false {
						} else {
							r.EncodeBool(bool(yy4472))
						}
					}
				}
			}
			if yyr4451 || yy2arr4451 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4474 := z.DecBinary()
	_ = yym4474
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4475 := r.ContainerType()
		if yyct4475 == codecSelferValueTypeMap1234 {
			yyl4475 := r.ReadMapStart()
			if yyl4475 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4475, d)
			}
		} else if yyct4475 == codecSelferValueTypeArray1234 {
			yyl4475 := r.ReadArrayStart()
			if yyl4475 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4475, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4476Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4476Slc
	var yyhl4476 bool = l >= 0
	for yyj4476 := 0; ; yyj4476++ {
		if yyhl4476 {
			if yyj4476 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4476Slc = r.DecodeBytes(yys4476Slc, true, true)
		yys4476 := string(yys4476Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4476 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4479 := z.DecBinary()
				_ = yym4479
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4482 := z.DecBinary()
				_ = yym4482
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4484 := z.DecBinary()
				_ = yym4484
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4486 := z.DecBinary()
				_ = yym4486
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4476)
		} // end switch yys4476
	} // end for yyj4476
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4487 int
	var yyb4487 bool
	var yyhl4487 bool = l >= 0
	yyj4487++
	if yyhl4487 {
		yyb4487 = yyj4487 > l
	} else {
		yyb4487 = r.CheckBreak()
	}
	if yyb4487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4487++
	if yyhl4487 {
		yyb4487 = yyj4487 > l
	} else {
		yyb4487 = r.CheckBreak()
	}
	if yyb4487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4490 := z.DecBinary()
		_ = yym4490
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4487++
	if yyhl4487 {
		yyb4487 = yyj4487 > l
	} else {
		yyb4487 = r.CheckBreak()
	}
	if yyb4487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4487++
	if yyhl4487 {
		yyb4487 = yyj4487 > l
	} else {
		yyb4487 = r.CheckBreak()
	}
	if yyb4487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4493 := z.DecBinary()
		_ = yym4493
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4487++
	if yyhl4487 {
		yyb4487 = yyj4487 > l
	} else {
		yyb4487 = r.CheckBreak()
	}
	if yyb4487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4495 := z.DecBinary()
		_ = yym4495
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4487++
	if yyhl4487 {
		yyb4487 = yyj4487 > l
	} else {
		yyb4487 = r.CheckBreak()
	}
	if yyb4487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4497 := z.DecBinary()
		_ = yym4497
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4487++
		if yyhl4487 {
			yyb4487 = yyj4487 > l
		} else {
			yyb4487 = r.CheckBreak()
		}
		if yyb4487 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4487-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4498 := z.EncBinary()
		_ = yym4498
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4499 := !z.EncBinary()
			yy2arr4499 := z.EncBasicHandle().StructToArray
			var yyq4499 [4]bool
			_, _, _ = yysep4499, yyq4499, yy2arr4499
			const yyr4499 bool = false
			yyq4499[0] = x.User != ""
			yyq4499[1] = x.Role != ""
			yyq4499[2] = x.Type != ""
			yyq4499[3] = x.Level != ""
			var yynn4499 int
			if yyr4499 || yy2arr4499 {
				r.EncodeArrayStart(4)
			} else {
				yynn4499 = 0
				for _, b := range yyq4499 {
					if b {
						yynn4499++
					}
				}
				r.EncodeMapStart(yynn4499)
				yynn4499 = 0
			}
			if yyr4499 || yy2arr4499 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4499[0] {
					yym4501 := z.EncBinary()
					_ = yym4501
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4499[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4502 := z.EncBinary()
					_ = yym4502
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4499 || yy2arr4499 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4499[1] {
					yym4504 := z.EncBinary()
					_ = yym4504
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4499[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4505 := z.EncBinary()
					_ = yym4505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4499 || yy2arr4499 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4499[2] {
					yym4507 := z.EncBinary()
					_ = yym4507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4499[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4508 := z.EncBinary()
					_ = yym4508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4499 || yy2arr4499 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4499[3] {
					yym4510 := z.EncBinary()
					_ = yym4510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4499[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4511 := z.EncBinary()
					_ = yym4511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4499 || yy2arr4499 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4512 := z.DecBinary()
	_ = yym4512
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4513 := r.ContainerType()
		if yyct4513 == codecSelferValueTypeMap1234 {
			yyl4513 := r.ReadMapStart()
			if yyl4513 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4513, d)
			}
		} else if yyct4513 == codecSelferValueTypeArray1234 {
			yyl4513 := r.ReadArrayStart()
			if yyl4513 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4513, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4514Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4514Slc
	var yyhl4514 bool = l >= 0
	for yyj4514 := 0; ; yyj4514++ {
		if yyhl4514 {
			if yyj4514 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4514Slc = r.DecodeBytes(yys4514Slc, true, true)
		yys4514 := string(yys4514Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4514 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4514)
		} // end switch yys4514
	} // end for yyj4514
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4519 int
	var yyb4519 bool
	var yyhl4519 bool = l >= 0
	yyj4519++
	if yyhl4519 {
		yyb4519 = yyj4519 > l
	} else {
		yyb4519 = r.CheckBreak()
	}
	if yyb4519 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4519++
	if yyhl4519 {
		yyb4519 = yyj4519 > l
	} else {
		yyb4519 = r.CheckBreak()
	}
	if yyb4519 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4519++
	if yyhl4519 {
		yyb4519 = yyj4519 > l
	} else {
		yyb4519 = r.CheckBreak()
	}
	if yyb4519 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4519++
	if yyhl4519 {
		yyb4519 = yyj4519 > l
	} else {
		yyb4519 = r.CheckBreak()
	}
	if yyb4519 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4519++
		if yyhl4519 {
			yyb4519 = yyj4519 > l
		} else {
			yyb4519 = r.CheckBreak()
		}
		if yyb4519 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4519-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4524 := z.EncBinary()
		_ = yym4524
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4525 := !z.EncBinary()
			yy2arr4525 := z.EncBasicHandle().StructToArray
			var yyq4525 [5]bool
			_, _, _ = yysep4525, yyq4525, yy2arr4525
			const yyr4525 bool = false
			yyq4525[0] = x.Kind != ""
			yyq4525[1] = x.APIVersion != ""
			yyq4525[2] = true
			var yynn4525 int
			if yyr4525 || yy2arr4525 {
				r.EncodeArrayStart(5)
			} else {
				yynn4525 = 2
				for _, b := range yyq4525 {
					if b {
						yynn4525++
					}
				}
				r.EncodeMapStart(yynn4525)
				yynn4525 = 0
			}
			if yyr4525 || yy2arr4525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4525[0] {
					yym4527 := z.EncBinary()
					_ = yym4527
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4525[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4528 := z.EncBinary()
					_ = yym4528
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4525 || yy2arr4525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4525[1] {
					yym4530 := z.EncBinary()
					_ = yym4530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4525[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4531 := z.EncBinary()
					_ = yym4531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4525 || yy2arr4525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4525[2] {
					yy4533 := &x.ObjectMeta
					yy4533.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4525[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4534 := &x.ObjectMeta
					yy4534.CodecEncodeSelf(e)
				}
			}
			if yyr4525 || yy2arr4525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4536 := z.EncBinary()
				_ = yym4536
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4537 := z.EncBinary()
				_ = yym4537
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4525 || yy2arr4525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4539 := z.EncBinary()
					_ = yym4539
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4540 := z.EncBinary()
					_ = yym4540
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4525 || yy2arr4525 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4541 := z.DecBinary()
	_ = yym4541
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4542 := r.ContainerType()
		if yyct4542 == codecSelferValueTypeMap1234 {
			yyl4542 := r.ReadMapStart()
			if yyl4542 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4542, d)
			}
		} else if yyct4542 == codecSelferValueTypeArray1234 {
			yyl4542 := r.ReadArrayStart()
			if yyl4542 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4542, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4543Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4543Slc
	var yyhl4543 bool = l >= 0
	for yyj4543 := 0; ; yyj4543++ {
		if yyhl4543 {
			if yyj4543 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4543Slc = r.DecodeBytes(yys4543Slc, true, true)
		yys4543 := string(yys4543Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4543 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4546 := &x.ObjectMeta
				yyv4546.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4548 := &x.Data
				yym4549 := z.DecBinary()
				_ = yym4549
				if false {
				} else {
					*yyv4548 = r.DecodeBytes(*(*[]byte)(yyv4548), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4543)
		} // end switch yys4543
	} // end for yyj4543
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4550 int
	var yyb4550 bool
	var yyhl4550 bool = l >= 0
	yyj4550++
	if yyhl4550 {
		yyb4550 = yyj4550 > l
	} else {
		yyb4550 = r.CheckBreak()
	}
	if yyb4550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4550++
	if yyhl4550 {
		yyb4550 = yyj4550 > l
	} else {
		yyb4550 = r.CheckBreak()
	}
	if yyb4550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4550++
	if yyhl4550 {
		yyb4550 = yyj4550 > l
	} else {
		yyb4550 = r.CheckBreak()
	}
	if yyb4550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4553 := &x.ObjectMeta
		yyv4553.CodecDecodeSelf(d)
	}
	yyj4550++
	if yyhl4550 {
		yyb4550 = yyj4550 > l
	} else {
		yyb4550 = r.CheckBreak()
	}
	if yyb4550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4550++
	if yyhl4550 {
		yyb4550 = yyj4550 > l
	} else {
		yyb4550 = r.CheckBreak()
	}
	if yyb4550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4555 := &x.Data
		yym4556 := z.DecBinary()
		_ = yym4556
		if false {
		} else {
			*yyv4555 = r.DecodeBytes(*(*[]byte)(yyv4555), false, false)
		}
	}
	for {
		yyj4550++
		if yyhl4550 {
			yyb4550 = yyj4550 > l
		} else {
			yyb4550 = r.CheckBreak()
		}
		if yyb4550 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4550-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSlicev1_OwnerReference(v []pkg2_v1.OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4557 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4558 := &yyv4557
		yym4559 := z.EncBinary()
		_ = yym4559
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4558) {
		} else {
			z.EncFallback(yy4558)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicev1_OwnerReference(v *[]pkg2_v1.OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4560 := *v
	yyh4560, yyl4560 := z.DecSliceHelperStart()
	var yyc4560 bool
	if yyl4560 == 0 {
		if yyv4560 == nil {
			yyv4560 = []pkg2_v1.OwnerReference{}
			yyc4560 = true
		} else if len(yyv4560) != 0 {
			yyv4560 = yyv4560[:0]
			yyc4560 = true
		}
	} else if yyl4560 > 0 {
		var yyrr4560, yyrl4560 int
		var yyrt4560 bool
		if yyl4560 > cap(yyv4560) {

			yyrg4560 := len(yyv4560) > 0
			yyv24560 := yyv4560
			yyrl4560, yyrt4560 = z.DecInferLen(yyl4560, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4560 {
				if yyrl4560 <= cap(yyv4560) {
					yyv4560 = yyv4560[:yyrl4560]
				} else {
					yyv4560 = make([]pkg2_v1.OwnerReference, yyrl4560)
				}
			} else {
				yyv4560 = make([]pkg2_v1.OwnerReference, yyrl4560)
			}
			yyc4560 = true
			yyrr4560 = len(yyv4560)
			if yyrg4560 {
				copy(yyv4560, yyv24560)
			}
		} else if yyl4560 != len(yyv4560) {
			yyv4560 = yyv4560[:yyl4560]
			yyc4560 = true
		}
		yyj4560 := 0
		for ; yyj4560 < yyrr4560; yyj4560++ {
			yyh4560.ElemContainerState(yyj4560)
			if r.TryDecodeAsNil() {
				yyv4560[yyj4560] = pkg2_v1.OwnerReference{}
			} else {
				yyv4561 := &yyv4560[yyj4560]
				yym4562 := z.DecBinary()
				_ = yym4562
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4561) {
				} else {
					z.DecFallback(yyv4561, false)
				}
			}

		}
		if yyrt4560 {
			for ; yyj4560 < yyl4560; yyj4560++ {
				yyv4560 = append(yyv4560, pkg2_v1.OwnerReference{})
				yyh4560.ElemContainerState(yyj4560)
				if r.TryDecodeAsNil() {
					yyv4560[yyj4560] = pkg2_v1.OwnerReference{}
				} else {
					yyv4563 := &yyv4560[yyj4560]
					yym4564 := z.DecBinary()
					_ = yym4564
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4563) {
					} else {
						z.DecFallback(yyv4563, false)
					}
				}

			}
		}

	} else {
		yyj4560 := 0
		for ; !r.CheckBreak(); yyj4560++ {

			if yyj4560 >= len(yyv4560) {
				yyv4560 = append(yyv4560, pkg2_v1.OwnerReference{}) // var yyz4560 pkg2_v1.OwnerReference
				yyc4560 = true
			}
			yyh4560.ElemContainerState(yyj4560)
			if yyj4560 < len(yyv4560) {
				if r.TryDecodeAsNil() {
					yyv4560[yyj4560] = pkg2_v1.OwnerReference{}
				} else {
					yyv4565 := &yyv4560[yyj4560]
					yym4566 := z.DecBinary()
					_ = yym4566
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4565) {
					} else {
						z.DecFallback(yyv4565, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4560 < len(yyv4560) {
			yyv4560 = yyv4560[:yyj4560]
			yyc4560 = true
		} else if yyj4560 == 0 && yyv4560 == nil {
			yyv4560 = []pkg2_v1.OwnerReference{}
			yyc4560 = true
		}
	}
	yyh4560.End()
	if yyc4560 {
		*v = yyv4560
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4567 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4567.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4568 := *v
	yyh4568, yyl4568 := z.DecSliceHelperStart()
	var yyc4568 bool
	if yyl4568 == 0 {
		if yyv4568 == nil {
			yyv4568 = []PersistentVolumeAccessMode{}
			yyc4568 = true
		} else if len(yyv4568) != 0 {
			yyv4568 = yyv4568[:0]
			yyc4568 = true
		}
	} else if yyl4568 > 0 {
		var yyrr4568, yyrl4568 int
		var yyrt4568 bool
		if yyl4568 > cap(yyv4568) {

			yyrl4568, yyrt4568 = z.DecInferLen(yyl4568, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4568 {
				if yyrl4568 <= cap(yyv4568) {
					yyv4568 = yyv4568[:yyrl4568]
				} else {
					yyv4568 = make([]PersistentVolumeAccessMode, yyrl4568)
				}
			} else {
				yyv4568 = make([]PersistentVolumeAccessMode, yyrl4568)
			}
			yyc4568 = true
			yyrr4568 = len(yyv4568)
		} else if yyl4568 != len(yyv4568) {
			yyv4568 = yyv4568[:yyl4568]
			yyc4568 = true
		}
		yyj4568 := 0
		for ; yyj4568 < yyrr4568; yyj4568++ {
			yyh4568.ElemContainerState(yyj4568)
			if r.TryDecodeAsNil() {
				yyv4568[yyj4568] = ""
			} else {
				yyv4568[yyj4568] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4568 {
			for ; yyj4568 < yyl4568; yyj4568++ {
				yyv4568 = append(yyv4568, "")
				yyh4568.ElemContainerState(yyj4568)
				if r.TryDecodeAsNil() {
					yyv4568[yyj4568] = ""
				} else {
					yyv4568[yyj4568] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4568 := 0
		for ; !r.CheckBreak(); yyj4568++ {

			if yyj4568 >= len(yyv4568) {
				yyv4568 = append(yyv4568, "") // var yyz4568 PersistentVolumeAccessMode
				yyc4568 = true
			}
			yyh4568.ElemContainerState(yyj4568)
			if yyj4568 < len(yyv4568) {
				if r.TryDecodeAsNil() {
					yyv4568[yyj4568] = ""
				} else {
					yyv4568[yyj4568] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4568 < len(yyv4568) {
			yyv4568 = yyv4568[:yyj4568]
			yyc4568 = true
		} else if yyj4568 == 0 && yyv4568 == nil {
			yyv4568 = []PersistentVolumeAccessMode{}
			yyc4568 = true
		}
	}
	yyh4568.End()
	if yyc4568 {
		*v = yyv4568
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4572 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4573 := &yyv4572
		yy4573.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4574 := *v
	yyh4574, yyl4574 := z.DecSliceHelperStart()
	var yyc4574 bool
	if yyl4574 == 0 {
		if yyv4574 == nil {
			yyv4574 = []PersistentVolume{}
			yyc4574 = true
		} else if len(yyv4574) != 0 {
			yyv4574 = yyv4574[:0]
			yyc4574 = true
		}
	} else if yyl4574 > 0 {
		var yyrr4574, yyrl4574 int
		var yyrt4574 bool
		if yyl4574 > cap(yyv4574) {

			yyrg4574 := len(yyv4574) > 0
			yyv24574 := yyv4574
			yyrl4574, yyrt4574 = z.DecInferLen(yyl4574, z.DecBasicHandle().MaxInitLen, 496)
			if yyrt4574 {
				if yyrl4574 <= cap(yyv4574) {
					yyv4574 = yyv4574[:yyrl4574]
				} else {
					yyv4574 = make([]PersistentVolume, yyrl4574)
				}
			} else {
				yyv4574 = make([]PersistentVolume, yyrl4574)
			}
			yyc4574 = true
			yyrr4574 = len(yyv4574)
			if yyrg4574 {
				copy(yyv4574, yyv24574)
			}
		} else if yyl4574 != len(yyv4574) {
			yyv4574 = yyv4574[:yyl4574]
			yyc4574 = true
		}
		yyj4574 := 0
		for ; yyj4574 < yyrr4574; yyj4574++ {
			yyh4574.ElemContainerState(yyj4574)
			if r.TryDecodeAsNil() {
				yyv4574[yyj4574] = PersistentVolume{}
			} else {
				yyv4575 := &yyv4574[yyj4574]
				yyv4575.CodecDecodeSelf(d)
			}

		}
		if yyrt4574 {
			for ; yyj4574 < yyl4574; yyj4574++ {
				yyv4574 = append(yyv4574, PersistentVolume{})
				yyh4574.ElemContainerState(yyj4574)
				if r.TryDecodeAsNil() {
					yyv4574[yyj4574] = PersistentVolume{}
				} else {
					yyv4576 := &yyv4574[yyj4574]
					yyv4576.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4574 := 0
		for ; !r.CheckBreak(); yyj4574++ {

			if yyj4574 >= len(yyv4574) {
				yyv4574 = append(yyv4574, PersistentVolume{}) // var yyz4574 PersistentVolume
				yyc4574 = true
			}
			yyh4574.ElemContainerState(yyj4574)
			if yyj4574 < len(yyv4574) {
				if r.TryDecodeAsNil() {
					yyv4574[yyj4574] = PersistentVolume{}
				} else {
					yyv4577 := &yyv4574[yyj4574]
					yyv4577.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4574 < len(yyv4574) {
			yyv4574 = yyv4574[:yyj4574]
			yyc4574 = true
		} else if yyj4574 == 0 && yyv4574 == nil {
			yyv4574 = []PersistentVolume{}
			yyc4574 = true
		}
	}
	yyh4574.End()
	if yyc4574 {
		*v = yyv4574
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4578 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4579 := &yyv4578
		yy4579.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4580 := *v
	yyh4580, yyl4580 := z.DecSliceHelperStart()
	var yyc4580 bool
	if yyl4580 == 0 {
		if yyv4580 == nil {
			yyv4580 = []PersistentVolumeClaim{}
			yyc4580 = true
		} else if len(yyv4580) != 0 {
			yyv4580 = yyv4580[:0]
			yyc4580 = true
		}
	} else if yyl4580 > 0 {
		var yyrr4580, yyrl4580 int
		var yyrt4580 bool
		if yyl4580 > cap(yyv4580) {

			yyrg4580 := len(yyv4580) > 0
			yyv24580 := yyv4580
			yyrl4580, yyrt4580 = z.DecInferLen(yyl4580, z.DecBasicHandle().MaxInitLen, 368)
			if yyrt4580 {
				if yyrl4580 <= cap(yyv4580) {
					yyv4580 = yyv4580[:yyrl4580]
				} else {
					yyv4580 = make([]PersistentVolumeClaim, yyrl4580)
				}
			} else {
				yyv4580 = make([]PersistentVolumeClaim, yyrl4580)
			}
			yyc4580 = true
			yyrr4580 = len(yyv4580)
			if yyrg4580 {
				copy(yyv4580, yyv24580)
			}
		} else if yyl4580 != len(yyv4580) {
			yyv4580 = yyv4580[:yyl4580]
			yyc4580 = true
		}
		yyj4580 := 0
		for ; yyj4580 < yyrr4580; yyj4580++ {
			yyh4580.ElemContainerState(yyj4580)
			if r.TryDecodeAsNil() {
				yyv4580[yyj4580] = PersistentVolumeClaim{}
			} else {
				yyv4581 := &yyv4580[yyj4580]
				yyv4581.CodecDecodeSelf(d)
			}

		}
		if yyrt4580 {
			for ; yyj4580 < yyl4580; yyj4580++ {
				yyv4580 = append(yyv4580, PersistentVolumeClaim{})
				yyh4580.ElemContainerState(yyj4580)
				if r.TryDecodeAsNil() {
					yyv4580[yyj4580] = PersistentVolumeClaim{}
				} else {
					yyv4582 := &yyv4580[yyj4580]
					yyv4582.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4580 := 0
		for ; !r.CheckBreak(); yyj4580++ {

			if yyj4580 >= len(yyv4580) {
				yyv4580 = append(yyv4580, PersistentVolumeClaim{}) // var yyz4580 PersistentVolumeClaim
				yyc4580 = true
			}
			yyh4580.ElemContainerState(yyj4580)
			if yyj4580 < len(yyv4580) {
				if r.TryDecodeAsNil() {
					yyv4580[yyj4580] = PersistentVolumeClaim{}
				} else {
					yyv4583 := &yyv4580[yyj4580]
					yyv4583.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4580 < len(yyv4580) {
			yyv4580 = yyv4580[:yyj4580]
			yyc4580 = true
		} else if yyj4580 == 0 && yyv4580 == nil {
			yyv4580 = []PersistentVolumeClaim{}
			yyc4580 = true
		}
	}
	yyh4580.End()
	if yyc4580 {
		*v = yyv4580
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4584 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4585 := &yyv4584
		yy4585.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4586 := *v
	yyh4586, yyl4586 := z.DecSliceHelperStart()
	var yyc4586 bool
	if yyl4586 == 0 {
		if yyv4586 == nil {
			yyv4586 = []KeyToPath{}
			yyc4586 = true
		} else if len(yyv4586) != 0 {
			yyv4586 = yyv4586[:0]
			yyc4586 = true
		}
	} else if yyl4586 > 0 {
		var yyrr4586, yyrl4586 int
		var yyrt4586 bool
		if yyl4586 > cap(yyv4586) {

			yyrg4586 := len(yyv4586) > 0
			yyv24586 := yyv4586
			yyrl4586, yyrt4586 = z.DecInferLen(yyl4586, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4586 {
				if yyrl4586 <= cap(yyv4586) {
					yyv4586 = yyv4586[:yyrl4586]
				} else {
					yyv4586 = make([]KeyToPath, yyrl4586)
				}
			} else {
				yyv4586 = make([]KeyToPath, yyrl4586)
			}
			yyc4586 = true
			yyrr4586 = len(yyv4586)
			if yyrg4586 {
				copy(yyv4586, yyv24586)
			}
		} else if yyl4586 != len(yyv4586) {
			yyv4586 = yyv4586[:yyl4586]
			yyc4586 = true
		}
		yyj4586 := 0
		for ; yyj4586 < yyrr4586; yyj4586++ {
			yyh4586.ElemContainerState(yyj4586)
			if r.TryDecodeAsNil() {
				yyv4586[yyj4586] = KeyToPath{}
			} else {
				yyv4587 := &yyv4586[yyj4586]
				yyv4587.CodecDecodeSelf(d)
			}

		}
		if yyrt4586 {
			for ; yyj4586 < yyl4586; yyj4586++ {
				yyv4586 = append(yyv4586, KeyToPath{})
				yyh4586.ElemContainerState(yyj4586)
				if r.TryDecodeAsNil() {
					yyv4586[yyj4586] = KeyToPath{}
				} else {
					yyv4588 := &yyv4586[yyj4586]
					yyv4588.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4586 := 0
		for ; !r.CheckBreak(); yyj4586++ {

			if yyj4586 >= len(yyv4586) {
				yyv4586 = append(yyv4586, KeyToPath{}) // var yyz4586 KeyToPath
				yyc4586 = true
			}
			yyh4586.ElemContainerState(yyj4586)
			if yyj4586 < len(yyv4586) {
				if r.TryDecodeAsNil() {
					yyv4586[yyj4586] = KeyToPath{}
				} else {
					yyv4589 := &yyv4586[yyj4586]
					yyv4589.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4586 < len(yyv4586) {
			yyv4586 = yyv4586[:yyj4586]
			yyc4586 = true
		} else if yyj4586 == 0 && yyv4586 == nil {
			yyv4586 = []KeyToPath{}
			yyc4586 = true
		}
	}
	yyh4586.End()
	if yyc4586 {
		*v = yyv4586
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4590 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4591 := &yyv4590
		yy4591.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4592 := *v
	yyh4592, yyl4592 := z.DecSliceHelperStart()
	var yyc4592 bool
	if yyl4592 == 0 {
		if yyv4592 == nil {
			yyv4592 = []HTTPHeader{}
			yyc4592 = true
		} else if len(yyv4592) != 0 {
			yyv4592 = yyv4592[:0]
			yyc4592 = true
		}
	} else if yyl4592 > 0 {
		var yyrr4592, yyrl4592 int
		var yyrt4592 bool
		if yyl4592 > cap(yyv4592) {

			yyrg4592 := len(yyv4592) > 0
			yyv24592 := yyv4592
			yyrl4592, yyrt4592 = z.DecInferLen(yyl4592, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4592 {
				if yyrl4592 <= cap(yyv4592) {
					yyv4592 = yyv4592[:yyrl4592]
				} else {
					yyv4592 = make([]HTTPHeader, yyrl4592)
				}
			} else {
				yyv4592 = make([]HTTPHeader, yyrl4592)
			}
			yyc4592 = true
			yyrr4592 = len(yyv4592)
			if yyrg4592 {
				copy(yyv4592, yyv24592)
			}
		} else if yyl4592 != len(yyv4592) {
			yyv4592 = yyv4592[:yyl4592]
			yyc4592 = true
		}
		yyj4592 := 0
		for ; yyj4592 < yyrr4592; yyj4592++ {
			yyh4592.ElemContainerState(yyj4592)
			if r.TryDecodeAsNil() {
				yyv4592[yyj4592] = HTTPHeader{}
			} else {
				yyv4593 := &yyv4592[yyj4592]
				yyv4593.CodecDecodeSelf(d)
			}

		}
		if yyrt4592 {
			for ; yyj4592 < yyl4592; yyj4592++ {
				yyv4592 = append(yyv4592, HTTPHeader{})
				yyh4592.ElemContainerState(yyj4592)
				if r.TryDecodeAsNil() {
					yyv4592[yyj4592] = HTTPHeader{}
				} else {
					yyv4594 := &yyv4592[yyj4592]
					yyv4594.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4592 := 0
		for ; !r.CheckBreak(); yyj4592++ {

			if yyj4592 >= len(yyv4592) {
				yyv4592 = append(yyv4592, HTTPHeader{}) // var yyz4592 HTTPHeader
				yyc4592 = true
			}
			yyh4592.ElemContainerState(yyj4592)
			if yyj4592 < len(yyv4592) {
				if r.TryDecodeAsNil() {
					yyv4592[yyj4592] = HTTPHeader{}
				} else {
					yyv4595 := &yyv4592[yyj4592]
					yyv4595.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4592 < len(yyv4592) {
			yyv4592 = yyv4592[:yyj4592]
			yyc4592 = true
		} else if yyj4592 == 0 && yyv4592 == nil {
			yyv4592 = []HTTPHeader{}
			yyc4592 = true
		}
	}
	yyh4592.End()
	if yyc4592 {
		*v = yyv4592
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4596 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4596.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4597 := *v
	yyh4597, yyl4597 := z.DecSliceHelperStart()
	var yyc4597 bool
	if yyl4597 == 0 {
		if yyv4597 == nil {
			yyv4597 = []Capability{}
			yyc4597 = true
		} else if len(yyv4597) != 0 {
			yyv4597 = yyv4597[:0]
			yyc4597 = true
		}
	} else if yyl4597 > 0 {
		var yyrr4597, yyrl4597 int
		var yyrt4597 bool
		if yyl4597 > cap(yyv4597) {

			yyrl4597, yyrt4597 = z.DecInferLen(yyl4597, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4597 {
				if yyrl4597 <= cap(yyv4597) {
					yyv4597 = yyv4597[:yyrl4597]
				} else {
					yyv4597 = make([]Capability, yyrl4597)
				}
			} else {
				yyv4597 = make([]Capability, yyrl4597)
			}
			yyc4597 = true
			yyrr4597 = len(yyv4597)
		} else if yyl4597 != len(yyv4597) {
			yyv4597 = yyv4597[:yyl4597]
			yyc4597 = true
		}
		yyj4597 := 0
		for ; yyj4597 < yyrr4597; yyj4597++ {
			yyh4597.ElemContainerState(yyj4597)
			if r.TryDecodeAsNil() {
				yyv4597[yyj4597] = ""
			} else {
				yyv4597[yyj4597] = Capability(r.DecodeString())
			}

		}
		if yyrt4597 {
			for ; yyj4597 < yyl4597; yyj4597++ {
				yyv4597 = append(yyv4597, "")
				yyh4597.ElemContainerState(yyj4597)
				if r.TryDecodeAsNil() {
					yyv4597[yyj4597] = ""
				} else {
					yyv4597[yyj4597] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4597 := 0
		for ; !r.CheckBreak(); yyj4597++ {

			if yyj4597 >= len(yyv4597) {
				yyv4597 = append(yyv4597, "") // var yyz4597 Capability
				yyc4597 = true
			}
			yyh4597.ElemContainerState(yyj4597)
			if yyj4597 < len(yyv4597) {
				if r.TryDecodeAsNil() {
					yyv4597[yyj4597] = ""
				} else {
					yyv4597[yyj4597] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4597 < len(yyv4597) {
			yyv4597 = yyv4597[:yyj4597]
			yyc4597 = true
		} else if yyj4597 == 0 && yyv4597 == nil {
			yyv4597 = []Capability{}
			yyc4597 = true
		}
	}
	yyh4597.End()
	if yyc4597 {
		*v = yyv4597
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4601 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4602 := &yyv4601
		yy4602.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4603 := *v
	yyh4603, yyl4603 := z.DecSliceHelperStart()
	var yyc4603 bool
	if yyl4603 == 0 {
		if yyv4603 == nil {
			yyv4603 = []ContainerPort{}
			yyc4603 = true
		} else if len(yyv4603) != 0 {
			yyv4603 = yyv4603[:0]
			yyc4603 = true
		}
	} else if yyl4603 > 0 {
		var yyrr4603, yyrl4603 int
		var yyrt4603 bool
		if yyl4603 > cap(yyv4603) {

			yyrg4603 := len(yyv4603) > 0
			yyv24603 := yyv4603
			yyrl4603, yyrt4603 = z.DecInferLen(yyl4603, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4603 {
				if yyrl4603 <= cap(yyv4603) {
					yyv4603 = yyv4603[:yyrl4603]
				} else {
					yyv4603 = make([]ContainerPort, yyrl4603)
				}
			} else {
				yyv4603 = make([]ContainerPort, yyrl4603)
			}
			yyc4603 = true
			yyrr4603 = len(yyv4603)
			if yyrg4603 {
				copy(yyv4603, yyv24603)
			}
		} else if yyl4603 != len(yyv4603) {
			yyv4603 = yyv4603[:yyl4603]
			yyc4603 = true
		}
		yyj4603 := 0
		for ; yyj4603 < yyrr4603; yyj4603++ {
			yyh4603.ElemContainerState(yyj4603)
			if r.TryDecodeAsNil() {
				yyv4603[yyj4603] = ContainerPort{}
			} else {
				yyv4604 := &yyv4603[yyj4603]
				yyv4604.CodecDecodeSelf(d)
			}

		}
		if yyrt4603 {
			for ; yyj4603 < yyl4603; yyj4603++ {
				yyv4603 = append(yyv4603, ContainerPort{})
				yyh4603.ElemContainerState(yyj4603)
				if r.TryDecodeAsNil() {
					yyv4603[yyj4603] = ContainerPort{}
				} else {
					yyv4605 := &yyv4603[yyj4603]
					yyv4605.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4603 := 0
		for ; !r.CheckBreak(); yyj4603++ {

			if yyj4603 >= len(yyv4603) {
				yyv4603 = append(yyv4603, ContainerPort{}) // var yyz4603 ContainerPort
				yyc4603 = true
			}
			yyh4603.ElemContainerState(yyj4603)
			if yyj4603 < len(yyv4603) {
				if r.TryDecodeAsNil() {
					yyv4603[yyj4603] = ContainerPort{}
				} else {
					yyv4606 := &yyv4603[yyj4603]
					yyv4606.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4603 < len(yyv4603) {
			yyv4603 = yyv4603[:yyj4603]
			yyc4603 = true
		} else if yyj4603 == 0 && yyv4603 == nil {
			yyv4603 = []ContainerPort{}
			yyc4603 = true
		}
	}
	yyh4603.End()
	if yyc4603 {
		*v = yyv4603
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4607 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4608 := &yyv4607
		yy4608.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4609 := *v
	yyh4609, yyl4609 := z.DecSliceHelperStart()
	var yyc4609 bool
	if yyl4609 == 0 {
		if yyv4609 == nil {
			yyv4609 = []EnvVar{}
			yyc4609 = true
		} else if len(yyv4609) != 0 {
			yyv4609 = yyv4609[:0]
			yyc4609 = true
		}
	} else if yyl4609 > 0 {
		var yyrr4609, yyrl4609 int
		var yyrt4609 bool
		if yyl4609 > cap(yyv4609) {

			yyrg4609 := len(yyv4609) > 0
			yyv24609 := yyv4609
			yyrl4609, yyrt4609 = z.DecInferLen(yyl4609, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4609 {
				if yyrl4609 <= cap(yyv4609) {
					yyv4609 = yyv4609[:yyrl4609]
				} else {
					yyv4609 = make([]EnvVar, yyrl4609)
				}
			} else {
				yyv4609 = make([]EnvVar, yyrl4609)
			}
			yyc4609 = true
			yyrr4609 = len(yyv4609)
			if yyrg4609 {
				copy(yyv4609, yyv24609)
			}
		} else if yyl4609 != len(yyv4609) {
			yyv4609 = yyv4609[:yyl4609]
			yyc4609 = true
		}
		yyj4609 := 0
		for ; yyj4609 < yyrr4609; yyj4609++ {
			yyh4609.ElemContainerState(yyj4609)
			if r.TryDecodeAsNil() {
				yyv4609[yyj4609] = EnvVar{}
			} else {
				yyv4610 := &yyv4609[yyj4609]
				yyv4610.CodecDecodeSelf(d)
			}

		}
		if yyrt4609 {
			for ; yyj4609 < yyl4609; yyj4609++ {
				yyv4609 = append(yyv4609, EnvVar{})
				yyh4609.ElemContainerState(yyj4609)
				if r.TryDecodeAsNil() {
					yyv4609[yyj4609] = EnvVar{}
				} else {
					yyv4611 := &yyv4609[yyj4609]
					yyv4611.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4609 := 0
		for ; !r.CheckBreak(); yyj4609++ {

			if yyj4609 >= len(yyv4609) {
				yyv4609 = append(yyv4609, EnvVar{}) // var yyz4609 EnvVar
				yyc4609 = true
			}
			yyh4609.ElemContainerState(yyj4609)
			if yyj4609 < len(yyv4609) {
				if r.TryDecodeAsNil() {
					yyv4609[yyj4609] = EnvVar{}
				} else {
					yyv4612 := &yyv4609[yyj4609]
					yyv4612.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4609 < len(yyv4609) {
			yyv4609 = yyv4609[:yyj4609]
			yyc4609 = true
		} else if yyj4609 == 0 && yyv4609 == nil {
			yyv4609 = []EnvVar{}
			yyc4609 = true
		}
	}
	yyh4609.End()
	if yyc4609 {
		*v = yyv4609
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4613 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4614 := &yyv4613
		yy4614.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4615 := *v
	yyh4615, yyl4615 := z.DecSliceHelperStart()
	var yyc4615 bool
	if yyl4615 == 0 {
		if yyv4615 == nil {
			yyv4615 = []VolumeMount{}
			yyc4615 = true
		} else if len(yyv4615) != 0 {
			yyv4615 = yyv4615[:0]
			yyc4615 = true
		}
	} else if yyl4615 > 0 {
		var yyrr4615, yyrl4615 int
		var yyrt4615 bool
		if yyl4615 > cap(yyv4615) {

			yyrg4615 := len(yyv4615) > 0
			yyv24615 := yyv4615
			yyrl4615, yyrt4615 = z.DecInferLen(yyl4615, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4615 {
				if yyrl4615 <= cap(yyv4615) {
					yyv4615 = yyv4615[:yyrl4615]
				} else {
					yyv4615 = make([]VolumeMount, yyrl4615)
				}
			} else {
				yyv4615 = make([]VolumeMount, yyrl4615)
			}
			yyc4615 = true
			yyrr4615 = len(yyv4615)
			if yyrg4615 {
				copy(yyv4615, yyv24615)
			}
		} else if yyl4615 != len(yyv4615) {
			yyv4615 = yyv4615[:yyl4615]
			yyc4615 = true
		}
		yyj4615 := 0
		for ; yyj4615 < yyrr4615; yyj4615++ {
			yyh4615.ElemContainerState(yyj4615)
			if r.TryDecodeAsNil() {
				yyv4615[yyj4615] = VolumeMount{}
			} else {
				yyv4616 := &yyv4615[yyj4615]
				yyv4616.CodecDecodeSelf(d)
			}

		}
		if yyrt4615 {
			for ; yyj4615 < yyl4615; yyj4615++ {
				yyv4615 = append(yyv4615, VolumeMount{})
				yyh4615.ElemContainerState(yyj4615)
				if r.TryDecodeAsNil() {
					yyv4615[yyj4615] = VolumeMount{}
				} else {
					yyv4617 := &yyv4615[yyj4615]
					yyv4617.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4615 := 0
		for ; !r.CheckBreak(); yyj4615++ {

			if yyj4615 >= len(yyv4615) {
				yyv4615 = append(yyv4615, VolumeMount{}) // var yyz4615 VolumeMount
				yyc4615 = true
			}
			yyh4615.ElemContainerState(yyj4615)
			if yyj4615 < len(yyv4615) {
				if r.TryDecodeAsNil() {
					yyv4615[yyj4615] = VolumeMount{}
				} else {
					yyv4618 := &yyv4615[yyj4615]
					yyv4618.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4615 < len(yyv4615) {
			yyv4615 = yyv4615[:yyj4615]
			yyc4615 = true
		} else if yyj4615 == 0 && yyv4615 == nil {
			yyv4615 = []VolumeMount{}
			yyc4615 = true
		}
	}
	yyh4615.End()
	if yyc4615 {
		*v = yyv4615
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4619 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4620 := &yyv4619
		yy4620.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4621 := *v
	yyh4621, yyl4621 := z.DecSliceHelperStart()
	var yyc4621 bool
	if yyl4621 == 0 {
		if yyv4621 == nil {
			yyv4621 = []NodeSelectorTerm{}
			yyc4621 = true
		} else if len(yyv4621) != 0 {
			yyv4621 = yyv4621[:0]
			yyc4621 = true
		}
	} else if yyl4621 > 0 {
		var yyrr4621, yyrl4621 int
		var yyrt4621 bool
		if yyl4621 > cap(yyv4621) {

			yyrg4621 := len(yyv4621) > 0
			yyv24621 := yyv4621
			yyrl4621, yyrt4621 = z.DecInferLen(yyl4621, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4621 {
				if yyrl4621 <= cap(yyv4621) {
					yyv4621 = yyv4621[:yyrl4621]
				} else {
					yyv4621 = make([]NodeSelectorTerm, yyrl4621)
				}
			} else {
				yyv4621 = make([]NodeSelectorTerm, yyrl4621)
			}
			yyc4621 = true
			yyrr4621 = len(yyv4621)
			if yyrg4621 {
				copy(yyv4621, yyv24621)
			}
		} else if yyl4621 != len(yyv4621) {
			yyv4621 = yyv4621[:yyl4621]
			yyc4621 = true
		}
		yyj4621 := 0
		for ; yyj4621 < yyrr4621; yyj4621++ {
			yyh4621.ElemContainerState(yyj4621)
			if r.TryDecodeAsNil() {
				yyv4621[yyj4621] = NodeSelectorTerm{}
			} else {
				yyv4622 := &yyv4621[yyj4621]
				yyv4622.CodecDecodeSelf(d)
			}

		}
		if yyrt4621 {
			for ; yyj4621 < yyl4621; yyj4621++ {
				yyv4621 = append(yyv4621, NodeSelectorTerm{})
				yyh4621.ElemContainerState(yyj4621)
				if r.TryDecodeAsNil() {
					yyv4621[yyj4621] = NodeSelectorTerm{}
				} else {
					yyv4623 := &yyv4621[yyj4621]
					yyv4623.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4621 := 0
		for ; !r.CheckBreak(); yyj4621++ {

			if yyj4621 >= len(yyv4621) {
				yyv4621 = append(yyv4621, NodeSelectorTerm{}) // var yyz4621 NodeSelectorTerm
				yyc4621 = true
			}
			yyh4621.ElemContainerState(yyj4621)
			if yyj4621 < len(yyv4621) {
				if r.TryDecodeAsNil() {
					yyv4621[yyj4621] = NodeSelectorTerm{}
				} else {
					yyv4624 := &yyv4621[yyj4621]
					yyv4624.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4621 < len(yyv4621) {
			yyv4621 = yyv4621[:yyj4621]
			yyc4621 = true
		} else if yyj4621 == 0 && yyv4621 == nil {
			yyv4621 = []NodeSelectorTerm{}
			yyc4621 = true
		}
	}
	yyh4621.End()
	if yyc4621 {
		*v = yyv4621
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4625 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4626 := &yyv4625
		yy4626.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4627 := *v
	yyh4627, yyl4627 := z.DecSliceHelperStart()
	var yyc4627 bool
	if yyl4627 == 0 {
		if yyv4627 == nil {
			yyv4627 = []NodeSelectorRequirement{}
			yyc4627 = true
		} else if len(yyv4627) != 0 {
			yyv4627 = yyv4627[:0]
			yyc4627 = true
		}
	} else if yyl4627 > 0 {
		var yyrr4627, yyrl4627 int
		var yyrt4627 bool
		if yyl4627 > cap(yyv4627) {

			yyrg4627 := len(yyv4627) > 0
			yyv24627 := yyv4627
			yyrl4627, yyrt4627 = z.DecInferLen(yyl4627, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4627 {
				if yyrl4627 <= cap(yyv4627) {
					yyv4627 = yyv4627[:yyrl4627]
				} else {
					yyv4627 = make([]NodeSelectorRequirement, yyrl4627)
				}
			} else {
				yyv4627 = make([]NodeSelectorRequirement, yyrl4627)
			}
			yyc4627 = true
			yyrr4627 = len(yyv4627)
			if yyrg4627 {
				copy(yyv4627, yyv24627)
			}
		} else if yyl4627 != len(yyv4627) {
			yyv4627 = yyv4627[:yyl4627]
			yyc4627 = true
		}
		yyj4627 := 0
		for ; yyj4627 < yyrr4627; yyj4627++ {
			yyh4627.ElemContainerState(yyj4627)
			if r.TryDecodeAsNil() {
				yyv4627[yyj4627] = NodeSelectorRequirement{}
			} else {
				yyv4628 := &yyv4627[yyj4627]
				yyv4628.CodecDecodeSelf(d)
			}

		}
		if yyrt4627 {
			for ; yyj4627 < yyl4627; yyj4627++ {
				yyv4627 = append(yyv4627, NodeSelectorRequirement{})
				yyh4627.ElemContainerState(yyj4627)
				if r.TryDecodeAsNil() {
					yyv4627[yyj4627] = NodeSelectorRequirement{}
				} else {
					yyv4629 := &yyv4627[yyj4627]
					yyv4629.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4627 := 0
		for ; !r.CheckBreak(); yyj4627++ {

			if yyj4627 >= len(yyv4627) {
				yyv4627 = append(yyv4627, NodeSelectorRequirement{}) // var yyz4627 NodeSelectorRequirement
				yyc4627 = true
			}
			yyh4627.ElemContainerState(yyj4627)
			if yyj4627 < len(yyv4627) {
				if r.TryDecodeAsNil() {
					yyv4627[yyj4627] = NodeSelectorRequirement{}
				} else {
					yyv4630 := &yyv4627[yyj4627]
					yyv4630.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4627 < len(yyv4627) {
			yyv4627 = yyv4627[:yyj4627]
			yyc4627 = true
		} else if yyj4627 == 0 && yyv4627 == nil {
			yyv4627 = []NodeSelectorRequirement{}
			yyc4627 = true
		}
	}
	yyh4627.End()
	if yyc4627 {
		*v = yyv4627
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4631 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4632 := &yyv4631
		yy4632.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4633 := *v
	yyh4633, yyl4633 := z.DecSliceHelperStart()
	var yyc4633 bool
	if yyl4633 == 0 {
		if yyv4633 == nil {
			yyv4633 = []PodAffinityTerm{}
			yyc4633 = true
		} else if len(yyv4633) != 0 {
			yyv4633 = yyv4633[:0]
			yyc4633 = true
		}
	} else if yyl4633 > 0 {
		var yyrr4633, yyrl4633 int
		var yyrt4633 bool
		if yyl4633 > cap(yyv4633) {

			yyrg4633 := len(yyv4633) > 0
			yyv24633 := yyv4633
			yyrl4633, yyrt4633 = z.DecInferLen(yyl4633, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4633 {
				if yyrl4633 <= cap(yyv4633) {
					yyv4633 = yyv4633[:yyrl4633]
				} else {
					yyv4633 = make([]PodAffinityTerm, yyrl4633)
				}
			} else {
				yyv4633 = make([]PodAffinityTerm, yyrl4633)
			}
			yyc4633 = true
			yyrr4633 = len(yyv4633)
			if yyrg4633 {
				copy(yyv4633, yyv24633)
			}
		} else if yyl4633 != len(yyv4633) {
			yyv4633 = yyv4633[:yyl4633]
			yyc4633 = true
		}
		yyj4633 := 0
		for ; yyj4633 < yyrr4633; yyj4633++ {
			yyh4633.ElemContainerState(yyj4633)
			if r.TryDecodeAsNil() {
				yyv4633[yyj4633] = PodAffinityTerm{}
			} else {
				yyv4634 := &yyv4633[yyj4633]
				yyv4634.CodecDecodeSelf(d)
			}

		}
		if yyrt4633 {
			for ; yyj4633 < yyl4633; yyj4633++ {
				yyv4633 = append(yyv4633, PodAffinityTerm{})
				yyh4633.ElemContainerState(yyj4633)
				if r.TryDecodeAsNil() {
					yyv4633[yyj4633] = PodAffinityTerm{}
				} else {
					yyv4635 := &yyv4633[yyj4633]
					yyv4635.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4633 := 0
		for ; !r.CheckBreak(); yyj4633++ {

			if yyj4633 >= len(yyv4633) {
				yyv4633 = append(yyv4633, PodAffinityTerm{}) // var yyz4633 PodAffinityTerm
				yyc4633 = true
			}
			yyh4633.ElemContainerState(yyj4633)
			if yyj4633 < len(yyv4633) {
				if r.TryDecodeAsNil() {
					yyv4633[yyj4633] = PodAffinityTerm{}
				} else {
					yyv4636 := &yyv4633[yyj4633]
					yyv4636.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4633 < len(yyv4633) {
			yyv4633 = yyv4633[:yyj4633]
			yyc4633 = true
		} else if yyj4633 == 0 && yyv4633 == nil {
			yyv4633 = []PodAffinityTerm{}
			yyc4633 = true
		}
	}
	yyh4633.End()
	if yyc4633 {
		*v = yyv4633
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4637 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4638 := &yyv4637
		yy4638.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4639 := *v
	yyh4639, yyl4639 := z.DecSliceHelperStart()
	var yyc4639 bool
	if yyl4639 == 0 {
		if yyv4639 == nil {
			yyv4639 = []WeightedPodAffinityTerm{}
			yyc4639 = true
		} else if len(yyv4639) != 0 {
			yyv4639 = yyv4639[:0]
			yyc4639 = true
		}
	} else if yyl4639 > 0 {
		var yyrr4639, yyrl4639 int
		var yyrt4639 bool
		if yyl4639 > cap(yyv4639) {

			yyrg4639 := len(yyv4639) > 0
			yyv24639 := yyv4639
			yyrl4639, yyrt4639 = z.DecInferLen(yyl4639, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4639 {
				if yyrl4639 <= cap(yyv4639) {
					yyv4639 = yyv4639[:yyrl4639]
				} else {
					yyv4639 = make([]WeightedPodAffinityTerm, yyrl4639)
				}
			} else {
				yyv4639 = make([]WeightedPodAffinityTerm, yyrl4639)
			}
			yyc4639 = true
			yyrr4639 = len(yyv4639)
			if yyrg4639 {
				copy(yyv4639, yyv24639)
			}
		} else if yyl4639 != len(yyv4639) {
			yyv4639 = yyv4639[:yyl4639]
			yyc4639 = true
		}
		yyj4639 := 0
		for ; yyj4639 < yyrr4639; yyj4639++ {
			yyh4639.ElemContainerState(yyj4639)
			if r.TryDecodeAsNil() {
				yyv4639[yyj4639] = WeightedPodAffinityTerm{}
			} else {
				yyv4640 := &yyv4639[yyj4639]
				yyv4640.CodecDecodeSelf(d)
			}

		}
		if yyrt4639 {
			for ; yyj4639 < yyl4639; yyj4639++ {
				yyv4639 = append(yyv4639, WeightedPodAffinityTerm{})
				yyh4639.ElemContainerState(yyj4639)
				if r.TryDecodeAsNil() {
					yyv4639[yyj4639] = WeightedPodAffinityTerm{}
				} else {
					yyv4641 := &yyv4639[yyj4639]
					yyv4641.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4639 := 0
		for ; !r.CheckBreak(); yyj4639++ {

			if yyj4639 >= len(yyv4639) {
				yyv4639 = append(yyv4639, WeightedPodAffinityTerm{}) // var yyz4639 WeightedPodAffinityTerm
				yyc4639 = true
			}
			yyh4639.ElemContainerState(yyj4639)
			if yyj4639 < len(yyv4639) {
				if r.TryDecodeAsNil() {
					yyv4639[yyj4639] = WeightedPodAffinityTerm{}
				} else {
					yyv4642 := &yyv4639[yyj4639]
					yyv4642.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4639 < len(yyv4639) {
			yyv4639 = yyv4639[:yyj4639]
			yyc4639 = true
		} else if yyj4639 == 0 && yyv4639 == nil {
			yyv4639 = []WeightedPodAffinityTerm{}
			yyc4639 = true
		}
	}
	yyh4639.End()
	if yyc4639 {
		*v = yyv4639
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4643 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4644 := &yyv4643
		yy4644.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4645 := *v
	yyh4645, yyl4645 := z.DecSliceHelperStart()
	var yyc4645 bool
	if yyl4645 == 0 {
		if yyv4645 == nil {
			yyv4645 = []PreferredSchedulingTerm{}
			yyc4645 = true
		} else if len(yyv4645) != 0 {
			yyv4645 = yyv4645[:0]
			yyc4645 = true
		}
	} else if yyl4645 > 0 {
		var yyrr4645, yyrl4645 int
		var yyrt4645 bool
		if yyl4645 > cap(yyv4645) {

			yyrg4645 := len(yyv4645) > 0
			yyv24645 := yyv4645
			yyrl4645, yyrt4645 = z.DecInferLen(yyl4645, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4645 {
				if yyrl4645 <= cap(yyv4645) {
					yyv4645 = yyv4645[:yyrl4645]
				} else {
					yyv4645 = make([]PreferredSchedulingTerm, yyrl4645)
				}
			} else {
				yyv4645 = make([]PreferredSchedulingTerm, yyrl4645)
			}
			yyc4645 = true
			yyrr4645 = len(yyv4645)
			if yyrg4645 {
				copy(yyv4645, yyv24645)
			}
		} else if yyl4645 != len(yyv4645) {
			yyv4645 = yyv4645[:yyl4645]
			yyc4645 = true
		}
		yyj4645 := 0
		for ; yyj4645 < yyrr4645; yyj4645++ {
			yyh4645.ElemContainerState(yyj4645)
			if r.TryDecodeAsNil() {
				yyv4645[yyj4645] = PreferredSchedulingTerm{}
			} else {
				yyv4646 := &yyv4645[yyj4645]
				yyv4646.CodecDecodeSelf(d)
			}

		}
		if yyrt4645 {
			for ; yyj4645 < yyl4645; yyj4645++ {
				yyv4645 = append(yyv4645, PreferredSchedulingTerm{})
				yyh4645.ElemContainerState(yyj4645)
				if r.TryDecodeAsNil() {
					yyv4645[yyj4645] = PreferredSchedulingTerm{}
				} else {
					yyv4647 := &yyv4645[yyj4645]
					yyv4647.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4645 := 0
		for ; !r.CheckBreak(); yyj4645++ {

			if yyj4645 >= len(yyv4645) {
				yyv4645 = append(yyv4645, PreferredSchedulingTerm{}) // var yyz4645 PreferredSchedulingTerm
				yyc4645 = true
			}
			yyh4645.ElemContainerState(yyj4645)
			if yyj4645 < len(yyv4645) {
				if r.TryDecodeAsNil() {
					yyv4645[yyj4645] = PreferredSchedulingTerm{}
				} else {
					yyv4648 := &yyv4645[yyj4645]
					yyv4648.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4645 < len(yyv4645) {
			yyv4645 = yyv4645[:yyj4645]
			yyc4645 = true
		} else if yyj4645 == 0 && yyv4645 == nil {
			yyv4645 = []PreferredSchedulingTerm{}
			yyc4645 = true
		}
	}
	yyh4645.End()
	if yyc4645 {
		*v = yyv4645
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4649 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4650 := &yyv4649
		yy4650.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4651 := *v
	yyh4651, yyl4651 := z.DecSliceHelperStart()
	var yyc4651 bool
	if yyl4651 == 0 {
		if yyv4651 == nil {
			yyv4651 = []Volume{}
			yyc4651 = true
		} else if len(yyv4651) != 0 {
			yyv4651 = yyv4651[:0]
			yyc4651 = true
		}
	} else if yyl4651 > 0 {
		var yyrr4651, yyrl4651 int
		var yyrt4651 bool
		if yyl4651 > cap(yyv4651) {

			yyrg4651 := len(yyv4651) > 0
			yyv24651 := yyv4651
			yyrl4651, yyrt4651 = z.DecInferLen(yyl4651, z.DecBasicHandle().MaxInitLen, 200)
			if yyrt4651 {
				if yyrl4651 <= cap(yyv4651) {
					yyv4651 = yyv4651[:yyrl4651]
				} else {
					yyv4651 = make([]Volume, yyrl4651)
				}
			} else {
				yyv4651 = make([]Volume, yyrl4651)
			}
			yyc4651 = true
			yyrr4651 = len(yyv4651)
			if yyrg4651 {
				copy(yyv4651, yyv24651)
			}
		} else if yyl4651 != len(yyv4651) {
			yyv4651 = yyv4651[:yyl4651]
			yyc4651 = true
		}
		yyj4651 := 0
		for ; yyj4651 < yyrr4651; yyj4651++ {
			yyh4651.ElemContainerState(yyj4651)
			if r.TryDecodeAsNil() {
				yyv4651[yyj4651] = Volume{}
			} else {
				yyv4652 := &yyv4651[yyj4651]
				yyv4652.CodecDecodeSelf(d)
			}

		}
		if yyrt4651 {
			for ; yyj4651 < yyl4651; yyj4651++ {
				yyv4651 = append(yyv4651, Volume{})
				yyh4651.ElemContainerState(yyj4651)
				if r.TryDecodeAsNil() {
					yyv4651[yyj4651] = Volume{}
				} else {
					yyv4653 := &yyv4651[yyj4651]
					yyv4653.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4651 := 0
		for ; !r.CheckBreak(); yyj4651++ {

			if yyj4651 >= len(yyv4651) {
				yyv4651 = append(yyv4651, Volume{}) // var yyz4651 Volume
				yyc4651 = true
			}
			yyh4651.ElemContainerState(yyj4651)
			if yyj4651 < len(yyv4651) {
				if r.TryDecodeAsNil() {
					yyv4651[yyj4651] = Volume{}
				} else {
					yyv4654 := &yyv4651[yyj4651]
					yyv4654.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4651 < len(yyv4651) {
			yyv4651 = yyv4651[:yyj4651]
			yyc4651 = true
		} else if yyj4651 == 0 && yyv4651 == nil {
			yyv4651 = []Volume{}
			yyc4651 = true
		}
	}
	yyh4651.End()
	if yyc4651 {
		*v = yyv4651
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4655 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4656 := &yyv4655
		yy4656.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4657 := *v
	yyh4657, yyl4657 := z.DecSliceHelperStart()
	var yyc4657 bool
	if yyl4657 == 0 {
		if yyv4657 == nil {
			yyv4657 = []Container{}
			yyc4657 = true
		} else if len(yyv4657) != 0 {
			yyv4657 = yyv4657[:0]
			yyc4657 = true
		}
	} else if yyl4657 > 0 {
		var yyrr4657, yyrl4657 int
		var yyrt4657 bool
		if yyl4657 > cap(yyv4657) {

			yyrg4657 := len(yyv4657) > 0
			yyv24657 := yyv4657
			yyrl4657, yyrt4657 = z.DecInferLen(yyl4657, z.DecBasicHandle().MaxInitLen, 272)
			if yyrt4657 {
				if yyrl4657 <= cap(yyv4657) {
					yyv4657 = yyv4657[:yyrl4657]
				} else {
					yyv4657 = make([]Container, yyrl4657)
				}
			} else {
				yyv4657 = make([]Container, yyrl4657)
			}
			yyc4657 = true
			yyrr4657 = len(yyv4657)
			if yyrg4657 {
				copy(yyv4657, yyv24657)
			}
		} else if yyl4657 != len(yyv4657) {
			yyv4657 = yyv4657[:yyl4657]
			yyc4657 = true
		}
		yyj4657 := 0
		for ; yyj4657 < yyrr4657; yyj4657++ {
			yyh4657.ElemContainerState(yyj4657)
			if r.TryDecodeAsNil() {
				yyv4657[yyj4657] = Container{}
			} else {
				yyv4658 := &yyv4657[yyj4657]
				yyv4658.CodecDecodeSelf(d)
			}

		}
		if yyrt4657 {
			for ; yyj4657 < yyl4657; yyj4657++ {
				yyv4657 = append(yyv4657, Container{})
				yyh4657.ElemContainerState(yyj4657)
				if r.TryDecodeAsNil() {
					yyv4657[yyj4657] = Container{}
				} else {
					yyv4659 := &yyv4657[yyj4657]
					yyv4659.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4657 := 0
		for ; !r.CheckBreak(); yyj4657++ {

			if yyj4657 >= len(yyv4657) {
				yyv4657 = append(yyv4657, Container{}) // var yyz4657 Container
				yyc4657 = true
			}
			yyh4657.ElemContainerState(yyj4657)
			if yyj4657 < len(yyv4657) {
				if r.TryDecodeAsNil() {
					yyv4657[yyj4657] = Container{}
				} else {
					yyv4660 := &yyv4657[yyj4657]
					yyv4660.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4657 < len(yyv4657) {
			yyv4657 = yyv4657[:yyj4657]
			yyc4657 = true
		} else if yyj4657 == 0 && yyv4657 == nil {
			yyv4657 = []Container{}
			yyc4657 = true
		}
	}
	yyh4657.End()
	if yyc4657 {
		*v = yyv4657
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4661 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4662 := &yyv4661
		yy4662.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4663 := *v
	yyh4663, yyl4663 := z.DecSliceHelperStart()
	var yyc4663 bool
	if yyl4663 == 0 {
		if yyv4663 == nil {
			yyv4663 = []LocalObjectReference{}
			yyc4663 = true
		} else if len(yyv4663) != 0 {
			yyv4663 = yyv4663[:0]
			yyc4663 = true
		}
	} else if yyl4663 > 0 {
		var yyrr4663, yyrl4663 int
		var yyrt4663 bool
		if yyl4663 > cap(yyv4663) {

			yyrg4663 := len(yyv4663) > 0
			yyv24663 := yyv4663
			yyrl4663, yyrt4663 = z.DecInferLen(yyl4663, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4663 {
				if yyrl4663 <= cap(yyv4663) {
					yyv4663 = yyv4663[:yyrl4663]
				} else {
					yyv4663 = make([]LocalObjectReference, yyrl4663)
				}
			} else {
				yyv4663 = make([]LocalObjectReference, yyrl4663)
			}
			yyc4663 = true
			yyrr4663 = len(yyv4663)
			if yyrg4663 {
				copy(yyv4663, yyv24663)
			}
		} else if yyl4663 != len(yyv4663) {
			yyv4663 = yyv4663[:yyl4663]
			yyc4663 = true
		}
		yyj4663 := 0
		for ; yyj4663 < yyrr4663; yyj4663++ {
			yyh4663.ElemContainerState(yyj4663)
			if r.TryDecodeAsNil() {
				yyv4663[yyj4663] = LocalObjectReference{}
			} else {
				yyv4664 := &yyv4663[yyj4663]
				yyv4664.CodecDecodeSelf(d)
			}

		}
		if yyrt4663 {
			for ; yyj4663 < yyl4663; yyj4663++ {
				yyv4663 = append(yyv4663, LocalObjectReference{})
				yyh4663.ElemContainerState(yyj4663)
				if r.TryDecodeAsNil() {
					yyv4663[yyj4663] = LocalObjectReference{}
				} else {
					yyv4665 := &yyv4663[yyj4663]
					yyv4665.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4663 := 0
		for ; !r.CheckBreak(); yyj4663++ {

			if yyj4663 >= len(yyv4663) {
				yyv4663 = append(yyv4663, LocalObjectReference{}) // var yyz4663 LocalObjectReference
				yyc4663 = true
			}
			yyh4663.ElemContainerState(yyj4663)
			if yyj4663 < len(yyv4663) {
				if r.TryDecodeAsNil() {
					yyv4663[yyj4663] = LocalObjectReference{}
				} else {
					yyv4666 := &yyv4663[yyj4663]
					yyv4666.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4663 < len(yyv4663) {
			yyv4663 = yyv4663[:yyj4663]
			yyc4663 = true
		} else if yyj4663 == 0 && yyv4663 == nil {
			yyv4663 = []LocalObjectReference{}
			yyc4663 = true
		}
	}
	yyh4663.End()
	if yyc4663 {
		*v = yyv4663
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4667 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4668 := &yyv4667
		yy4668.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4669 := *v
	yyh4669, yyl4669 := z.DecSliceHelperStart()
	var yyc4669 bool
	if yyl4669 == 0 {
		if yyv4669 == nil {
			yyv4669 = []PodCondition{}
			yyc4669 = true
		} else if len(yyv4669) != 0 {
			yyv4669 = yyv4669[:0]
			yyc4669 = true
		}
	} else if yyl4669 > 0 {
		var yyrr4669, yyrl4669 int
		var yyrt4669 bool
		if yyl4669 > cap(yyv4669) {

			yyrg4669 := len(yyv4669) > 0
			yyv24669 := yyv4669
			yyrl4669, yyrt4669 = z.DecInferLen(yyl4669, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4669 {
				if yyrl4669 <= cap(yyv4669) {
					yyv4669 = yyv4669[:yyrl4669]
				} else {
					yyv4669 = make([]PodCondition, yyrl4669)
				}
			} else {
				yyv4669 = make([]PodCondition, yyrl4669)
			}
			yyc4669 = true
			yyrr4669 = len(yyv4669)
			if yyrg4669 {
				copy(yyv4669, yyv24669)
			}
		} else if yyl4669 != len(yyv4669) {
			yyv4669 = yyv4669[:yyl4669]
			yyc4669 = true
		}
		yyj4669 := 0
		for ; yyj4669 < yyrr4669; yyj4669++ {
			yyh4669.ElemContainerState(yyj4669)
			if r.TryDecodeAsNil() {
				yyv4669[yyj4669] = PodCondition{}
			} else {
				yyv4670 := &yyv4669[yyj4669]
				yyv4670.CodecDecodeSelf(d)
			}

		}
		if yyrt4669 {
			for ; yyj4669 < yyl4669; yyj4669++ {
				yyv4669 = append(yyv4669, PodCondition{})
				yyh4669.ElemContainerState(yyj4669)
				if r.TryDecodeAsNil() {
					yyv4669[yyj4669] = PodCondition{}
				} else {
					yyv4671 := &yyv4669[yyj4669]
					yyv4671.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4669 := 0
		for ; !r.CheckBreak(); yyj4669++ {

			if yyj4669 >= len(yyv4669) {
				yyv4669 = append(yyv4669, PodCondition{}) // var yyz4669 PodCondition
				yyc4669 = true
			}
			yyh4669.ElemContainerState(yyj4669)
			if yyj4669 < len(yyv4669) {
				if r.TryDecodeAsNil() {
					yyv4669[yyj4669] = PodCondition{}
				} else {
					yyv4672 := &yyv4669[yyj4669]
					yyv4672.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4669 < len(yyv4669) {
			yyv4669 = yyv4669[:yyj4669]
			yyc4669 = true
		} else if yyj4669 == 0 && yyv4669 == nil {
			yyv4669 = []PodCondition{}
			yyc4669 = true
		}
	}
	yyh4669.End()
	if yyc4669 {
		*v = yyv4669
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4673 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4674 := &yyv4673
		yy4674.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4675 := *v
	yyh4675, yyl4675 := z.DecSliceHelperStart()
	var yyc4675 bool
	if yyl4675 == 0 {
		if yyv4675 == nil {
			yyv4675 = []ContainerStatus{}
			yyc4675 = true
		} else if len(yyv4675) != 0 {
			yyv4675 = yyv4675[:0]
			yyc4675 = true
		}
	} else if yyl4675 > 0 {
		var yyrr4675, yyrl4675 int
		var yyrt4675 bool
		if yyl4675 > cap(yyv4675) {

			yyrg4675 := len(yyv4675) > 0
			yyv24675 := yyv4675
			yyrl4675, yyrt4675 = z.DecInferLen(yyl4675, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4675 {
				if yyrl4675 <= cap(yyv4675) {
					yyv4675 = yyv4675[:yyrl4675]
				} else {
					yyv4675 = make([]ContainerStatus, yyrl4675)
				}
			} else {
				yyv4675 = make([]ContainerStatus, yyrl4675)
			}
			yyc4675 = true
			yyrr4675 = len(yyv4675)
			if yyrg4675 {
				copy(yyv4675, yyv24675)
			}
		} else if yyl4675 != len(yyv4675) {
			yyv4675 = yyv4675[:yyl4675]
			yyc4675 = true
		}
		yyj4675 := 0
		for ; yyj4675 < yyrr4675; yyj4675++ {
			yyh4675.ElemContainerState(yyj4675)
			if r.TryDecodeAsNil() {
				yyv4675[yyj4675] = ContainerStatus{}
			} else {
				yyv4676 := &yyv4675[yyj4675]
				yyv4676.CodecDecodeSelf(d)
			}

		}
		if yyrt4675 {
			for ; yyj4675 < yyl4675; yyj4675++ {
				yyv4675 = append(yyv4675, ContainerStatus{})
				yyh4675.ElemContainerState(yyj4675)
				if r.TryDecodeAsNil() {
					yyv4675[yyj4675] = ContainerStatus{}
				} else {
					yyv4677 := &yyv4675[yyj4675]
					yyv4677.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4675 := 0
		for ; !r.CheckBreak(); yyj4675++ {

			if yyj4675 >= len(yyv4675) {
				yyv4675 = append(yyv4675, ContainerStatus{}) // var yyz4675 ContainerStatus
				yyc4675 = true
			}
			yyh4675.ElemContainerState(yyj4675)
			if yyj4675 < len(yyv4675) {
				if r.TryDecodeAsNil() {
					yyv4675[yyj4675] = ContainerStatus{}
				} else {
					yyv4678 := &yyv4675[yyj4675]
					yyv4678.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4675 < len(yyv4675) {
			yyv4675 = yyv4675[:yyj4675]
			yyc4675 = true
		} else if yyj4675 == 0 && yyv4675 == nil {
			yyv4675 = []ContainerStatus{}
			yyc4675 = true
		}
	}
	yyh4675.End()
	if yyc4675 {
		*v = yyv4675
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4679 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4680 := &yyv4679
		yy4680.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4681 := *v
	yyh4681, yyl4681 := z.DecSliceHelperStart()
	var yyc4681 bool
	if yyl4681 == 0 {
		if yyv4681 == nil {
			yyv4681 = []Pod{}
			yyc4681 = true
		} else if len(yyv4681) != 0 {
			yyv4681 = yyv4681[:0]
			yyc4681 = true
		}
	} else if yyl4681 > 0 {
		var yyrr4681, yyrl4681 int
		var yyrt4681 bool
		if yyl4681 > cap(yyv4681) {

			yyrg4681 := len(yyv4681) > 0
			yyv24681 := yyv4681
			yyrl4681, yyrt4681 = z.DecInferLen(yyl4681, z.DecBasicHandle().MaxInitLen, 688)
			if yyrt4681 {
				if yyrl4681 <= cap(yyv4681) {
					yyv4681 = yyv4681[:yyrl4681]
				} else {
					yyv4681 = make([]Pod, yyrl4681)
				}
			} else {
				yyv4681 = make([]Pod, yyrl4681)
			}
			yyc4681 = true
			yyrr4681 = len(yyv4681)
			if yyrg4681 {
				copy(yyv4681, yyv24681)
			}
		} else if yyl4681 != len(yyv4681) {
			yyv4681 = yyv4681[:yyl4681]
			yyc4681 = true
		}
		yyj4681 := 0
		for ; yyj4681 < yyrr4681; yyj4681++ {
			yyh4681.ElemContainerState(yyj4681)
			if r.TryDecodeAsNil() {
				yyv4681[yyj4681] = Pod{}
			} else {
				yyv4682 := &yyv4681[yyj4681]
				yyv4682.CodecDecodeSelf(d)
			}

		}
		if yyrt4681 {
			for ; yyj4681 < yyl4681; yyj4681++ {
				yyv4681 = append(yyv4681, Pod{})
				yyh4681.ElemContainerState(yyj4681)
				if r.TryDecodeAsNil() {
					yyv4681[yyj4681] = Pod{}
				} else {
					yyv4683 := &yyv4681[yyj4681]
					yyv4683.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4681 := 0
		for ; !r.CheckBreak(); yyj4681++ {

			if yyj4681 >= len(yyv4681) {
				yyv4681 = append(yyv4681, Pod{}) // var yyz4681 Pod
				yyc4681 = true
			}
			yyh4681.ElemContainerState(yyj4681)
			if yyj4681 < len(yyv4681) {
				if r.TryDecodeAsNil() {
					yyv4681[yyj4681] = Pod{}
				} else {
					yyv4684 := &yyv4681[yyj4681]
					yyv4684.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4681 < len(yyv4681) {
			yyv4681 = yyv4681[:yyj4681]
			yyc4681 = true
		} else if yyj4681 == 0 && yyv4681 == nil {
			yyv4681 = []Pod{}
			yyc4681 = true
		}
	}
	yyh4681.End()
	if yyc4681 {
		*v = yyv4681
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4685 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4686 := &yyv4685
		yy4686.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4687 := *v
	yyh4687, yyl4687 := z.DecSliceHelperStart()
	var yyc4687 bool
	if yyl4687 == 0 {
		if yyv4687 == nil {
			yyv4687 = []PodTemplate{}
			yyc4687 = true
		} else if len(yyv4687) != 0 {
			yyv4687 = yyv4687[:0]
			yyc4687 = true
		}
	} else if yyl4687 > 0 {
		var yyrr4687, yyrl4687 int
		var yyrt4687 bool
		if yyl4687 > cap(yyv4687) {

			yyrg4687 := len(yyv4687) > 0
			yyv24687 := yyv4687
			yyrl4687, yyrt4687 = z.DecInferLen(yyl4687, z.DecBasicHandle().MaxInitLen, 736)
			if yyrt4687 {
				if yyrl4687 <= cap(yyv4687) {
					yyv4687 = yyv4687[:yyrl4687]
				} else {
					yyv4687 = make([]PodTemplate, yyrl4687)
				}
			} else {
				yyv4687 = make([]PodTemplate, yyrl4687)
			}
			yyc4687 = true
			yyrr4687 = len(yyv4687)
			if yyrg4687 {
				copy(yyv4687, yyv24687)
			}
		} else if yyl4687 != len(yyv4687) {
			yyv4687 = yyv4687[:yyl4687]
			yyc4687 = true
		}
		yyj4687 := 0
		for ; yyj4687 < yyrr4687; yyj4687++ {
			yyh4687.ElemContainerState(yyj4687)
			if r.TryDecodeAsNil() {
				yyv4687[yyj4687] = PodTemplate{}
			} else {
				yyv4688 := &yyv4687[yyj4687]
				yyv4688.CodecDecodeSelf(d)
			}

		}
		if yyrt4687 {
			for ; yyj4687 < yyl4687; yyj4687++ {
				yyv4687 = append(yyv4687, PodTemplate{})
				yyh4687.ElemContainerState(yyj4687)
				if r.TryDecodeAsNil() {
					yyv4687[yyj4687] = PodTemplate{}
				} else {
					yyv4689 := &yyv4687[yyj4687]
					yyv4689.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4687 := 0
		for ; !r.CheckBreak(); yyj4687++ {

			if yyj4687 >= len(yyv4687) {
				yyv4687 = append(yyv4687, PodTemplate{}) // var yyz4687 PodTemplate
				yyc4687 = true
			}
			yyh4687.ElemContainerState(yyj4687)
			if yyj4687 < len(yyv4687) {
				if r.TryDecodeAsNil() {
					yyv4687[yyj4687] = PodTemplate{}
				} else {
					yyv4690 := &yyv4687[yyj4687]
					yyv4690.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4687 < len(yyv4687) {
			yyv4687 = yyv4687[:yyj4687]
			yyc4687 = true
		} else if yyj4687 == 0 && yyv4687 == nil {
			yyv4687 = []PodTemplate{}
			yyc4687 = true
		}
	}
	yyh4687.End()
	if yyc4687 {
		*v = yyv4687
	}
}

func (x codecSelfer1234) encSliceReplicationControllerCondition(v []ReplicationControllerCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4691 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4692 := &yyv4691
		yy4692.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationControllerCondition(v *[]ReplicationControllerCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4693 := *v
	yyh4693, yyl4693 := z.DecSliceHelperStart()
	var yyc4693 bool
	if yyl4693 == 0 {
		if yyv4693 == nil {
			yyv4693 = []ReplicationControllerCondition{}
			yyc4693 = true
		} else if len(yyv4693) != 0 {
			yyv4693 = yyv4693[:0]
			yyc4693 = true
		}
	} else if yyl4693 > 0 {
		var yyrr4693, yyrl4693 int
		var yyrt4693 bool
		if yyl4693 > cap(yyv4693) {

			yyrg4693 := len(yyv4693) > 0
			yyv24693 := yyv4693
			yyrl4693, yyrt4693 = z.DecInferLen(yyl4693, z.DecBasicHandle().MaxInitLen, 88)
			if yyrt4693 {
				if yyrl4693 <= cap(yyv4693) {
					yyv4693 = yyv4693[:yyrl4693]
				} else {
					yyv4693 = make([]ReplicationControllerCondition, yyrl4693)
				}
			} else {
				yyv4693 = make([]ReplicationControllerCondition, yyrl4693)
			}
			yyc4693 = true
			yyrr4693 = len(yyv4693)
			if yyrg4693 {
				copy(yyv4693, yyv24693)
			}
		} else if yyl4693 != len(yyv4693) {
			yyv4693 = yyv4693[:yyl4693]
			yyc4693 = true
		}
		yyj4693 := 0
		for ; yyj4693 < yyrr4693; yyj4693++ {
			yyh4693.ElemContainerState(yyj4693)
			if r.TryDecodeAsNil() {
				yyv4693[yyj4693] = ReplicationControllerCondition{}
			} else {
				yyv4694 := &yyv4693[yyj4693]
				yyv4694.CodecDecodeSelf(d)
			}

		}
		if yyrt4693 {
			for ; yyj4693 < yyl4693; yyj4693++ {
				yyv4693 = append(yyv4693, ReplicationControllerCondition{})
				yyh4693.ElemContainerState(yyj4693)
				if r.TryDecodeAsNil() {
					yyv4693[yyj4693] = ReplicationControllerCondition{}
				} else {
					yyv4695 := &yyv4693[yyj4693]
					yyv4695.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4693 := 0
		for ; !r.CheckBreak(); yyj4693++ {

			if yyj4693 >= len(yyv4693) {
				yyv4693 = append(yyv4693, ReplicationControllerCondition{}) // var yyz4693 ReplicationControllerCondition
				yyc4693 = true
			}
			yyh4693.ElemContainerState(yyj4693)
			if yyj4693 < len(yyv4693) {
				if r.TryDecodeAsNil() {
					yyv4693[yyj4693] = ReplicationControllerCondition{}
				} else {
					yyv4696 := &yyv4693[yyj4693]
					yyv4696.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4693 < len(yyv4693) {
			yyv4693 = yyv4693[:yyj4693]
			yyc4693 = true
		} else if yyj4693 == 0 && yyv4693 == nil {
			yyv4693 = []ReplicationControllerCondition{}
			yyc4693 = true
		}
	}
	yyh4693.End()
	if yyc4693 {
		*v = yyv4693
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4697 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4698 := &yyv4697
		yy4698.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4699 := *v
	yyh4699, yyl4699 := z.DecSliceHelperStart()
	var yyc4699 bool
	if yyl4699 == 0 {
		if yyv4699 == nil {
			yyv4699 = []ReplicationController{}
			yyc4699 = true
		} else if len(yyv4699) != 0 {
			yyv4699 = yyv4699[:0]
			yyc4699 = true
		}
	} else if yyl4699 > 0 {
		var yyrr4699, yyrl4699 int
		var yyrt4699 bool
		if yyl4699 > cap(yyv4699) {

			yyrg4699 := len(yyv4699) > 0
			yyv24699 := yyv4699
			yyrl4699, yyrt4699 = z.DecInferLen(yyl4699, z.DecBasicHandle().MaxInitLen, 336)
			if yyrt4699 {
				if yyrl4699 <= cap(yyv4699) {
					yyv4699 = yyv4699[:yyrl4699]
				} else {
					yyv4699 = make([]ReplicationController, yyrl4699)
				}
			} else {
				yyv4699 = make([]ReplicationController, yyrl4699)
			}
			yyc4699 = true
			yyrr4699 = len(yyv4699)
			if yyrg4699 {
				copy(yyv4699, yyv24699)
			}
		} else if yyl4699 != len(yyv4699) {
			yyv4699 = yyv4699[:yyl4699]
			yyc4699 = true
		}
		yyj4699 := 0
		for ; yyj4699 < yyrr4699; yyj4699++ {
			yyh4699.ElemContainerState(yyj4699)
			if r.TryDecodeAsNil() {
				yyv4699[yyj4699] = ReplicationController{}
			} else {
				yyv4700 := &yyv4699[yyj4699]
				yyv4700.CodecDecodeSelf(d)
			}

		}
		if yyrt4699 {
			for ; yyj4699 < yyl4699; yyj4699++ {
				yyv4699 = append(yyv4699, ReplicationController{})
				yyh4699.ElemContainerState(yyj4699)
				if r.TryDecodeAsNil() {
					yyv4699[yyj4699] = ReplicationController{}
				} else {
					yyv4701 := &yyv4699[yyj4699]
					yyv4701.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4699 := 0
		for ; !r.CheckBreak(); yyj4699++ {

			if yyj4699 >= len(yyv4699) {
				yyv4699 = append(yyv4699, ReplicationController{}) // var yyz4699 ReplicationController
				yyc4699 = true
			}
			yyh4699.ElemContainerState(yyj4699)
			if yyj4699 < len(yyv4699) {
				if r.TryDecodeAsNil() {
					yyv4699[yyj4699] = ReplicationController{}
				} else {
					yyv4702 := &yyv4699[yyj4699]
					yyv4702.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4699 < len(yyv4699) {
			yyv4699 = yyv4699[:yyj4699]
			yyc4699 = true
		} else if yyj4699 == 0 && yyv4699 == nil {
			yyv4699 = []ReplicationController{}
			yyc4699 = true
		}
	}
	yyh4699.End()
	if yyc4699 {
		*v = yyv4699
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4703 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4704 := &yyv4703
		yy4704.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4705 := *v
	yyh4705, yyl4705 := z.DecSliceHelperStart()
	var yyc4705 bool
	if yyl4705 == 0 {
		if yyv4705 == nil {
			yyv4705 = []LoadBalancerIngress{}
			yyc4705 = true
		} else if len(yyv4705) != 0 {
			yyv4705 = yyv4705[:0]
			yyc4705 = true
		}
	} else if yyl4705 > 0 {
		var yyrr4705, yyrl4705 int
		var yyrt4705 bool
		if yyl4705 > cap(yyv4705) {

			yyrg4705 := len(yyv4705) > 0
			yyv24705 := yyv4705
			yyrl4705, yyrt4705 = z.DecInferLen(yyl4705, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4705 {
				if yyrl4705 <= cap(yyv4705) {
					yyv4705 = yyv4705[:yyrl4705]
				} else {
					yyv4705 = make([]LoadBalancerIngress, yyrl4705)
				}
			} else {
				yyv4705 = make([]LoadBalancerIngress, yyrl4705)
			}
			yyc4705 = true
			yyrr4705 = len(yyv4705)
			if yyrg4705 {
				copy(yyv4705, yyv24705)
			}
		} else if yyl4705 != len(yyv4705) {
			yyv4705 = yyv4705[:yyl4705]
			yyc4705 = true
		}
		yyj4705 := 0
		for ; yyj4705 < yyrr4705; yyj4705++ {
			yyh4705.ElemContainerState(yyj4705)
			if r.TryDecodeAsNil() {
				yyv4705[yyj4705] = LoadBalancerIngress{}
			} else {
				yyv4706 := &yyv4705[yyj4705]
				yyv4706.CodecDecodeSelf(d)
			}

		}
		if yyrt4705 {
			for ; yyj4705 < yyl4705; yyj4705++ {
				yyv4705 = append(yyv4705, LoadBalancerIngress{})
				yyh4705.ElemContainerState(yyj4705)
				if r.TryDecodeAsNil() {
					yyv4705[yyj4705] = LoadBalancerIngress{}
				} else {
					yyv4707 := &yyv4705[yyj4705]
					yyv4707.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4705 := 0
		for ; !r.CheckBreak(); yyj4705++ {

			if yyj4705 >= len(yyv4705) {
				yyv4705 = append(yyv4705, LoadBalancerIngress{}) // var yyz4705 LoadBalancerIngress
				yyc4705 = true
			}
			yyh4705.ElemContainerState(yyj4705)
			if yyj4705 < len(yyv4705) {
				if r.TryDecodeAsNil() {
					yyv4705[yyj4705] = LoadBalancerIngress{}
				} else {
					yyv4708 := &yyv4705[yyj4705]
					yyv4708.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4705 < len(yyv4705) {
			yyv4705 = yyv4705[:yyj4705]
			yyc4705 = true
		} else if yyj4705 == 0 && yyv4705 == nil {
			yyv4705 = []LoadBalancerIngress{}
			yyc4705 = true
		}
	}
	yyh4705.End()
	if yyc4705 {
		*v = yyv4705
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4709 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4710 := &yyv4709
		yy4710.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4711 := *v
	yyh4711, yyl4711 := z.DecSliceHelperStart()
	var yyc4711 bool
	if yyl4711 == 0 {
		if yyv4711 == nil {
			yyv4711 = []ServicePort{}
			yyc4711 = true
		} else if len(yyv4711) != 0 {
			yyv4711 = yyv4711[:0]
			yyc4711 = true
		}
	} else if yyl4711 > 0 {
		var yyrr4711, yyrl4711 int
		var yyrt4711 bool
		if yyl4711 > cap(yyv4711) {

			yyrg4711 := len(yyv4711) > 0
			yyv24711 := yyv4711
			yyrl4711, yyrt4711 = z.DecInferLen(yyl4711, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4711 {
				if yyrl4711 <= cap(yyv4711) {
					yyv4711 = yyv4711[:yyrl4711]
				} else {
					yyv4711 = make([]ServicePort, yyrl4711)
				}
			} else {
				yyv4711 = make([]ServicePort, yyrl4711)
			}
			yyc4711 = true
			yyrr4711 = len(yyv4711)
			if yyrg4711 {
				copy(yyv4711, yyv24711)
			}
		} else if yyl4711 != len(yyv4711) {
			yyv4711 = yyv4711[:yyl4711]
			yyc4711 = true
		}
		yyj4711 := 0
		for ; yyj4711 < yyrr4711; yyj4711++ {
			yyh4711.ElemContainerState(yyj4711)
			if r.TryDecodeAsNil() {
				yyv4711[yyj4711] = ServicePort{}
			} else {
				yyv4712 := &yyv4711[yyj4711]
				yyv4712.CodecDecodeSelf(d)
			}

		}
		if yyrt4711 {
			for ; yyj4711 < yyl4711; yyj4711++ {
				yyv4711 = append(yyv4711, ServicePort{})
				yyh4711.ElemContainerState(yyj4711)
				if r.TryDecodeAsNil() {
					yyv4711[yyj4711] = ServicePort{}
				} else {
					yyv4713 := &yyv4711[yyj4711]
					yyv4713.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4711 := 0
		for ; !r.CheckBreak(); yyj4711++ {

			if yyj4711 >= len(yyv4711) {
				yyv4711 = append(yyv4711, ServicePort{}) // var yyz4711 ServicePort
				yyc4711 = true
			}
			yyh4711.ElemContainerState(yyj4711)
			if yyj4711 < len(yyv4711) {
				if r.TryDecodeAsNil() {
					yyv4711[yyj4711] = ServicePort{}
				} else {
					yyv4714 := &yyv4711[yyj4711]
					yyv4714.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4711 < len(yyv4711) {
			yyv4711 = yyv4711[:yyj4711]
			yyc4711 = true
		} else if yyj4711 == 0 && yyv4711 == nil {
			yyv4711 = []ServicePort{}
			yyc4711 = true
		}
	}
	yyh4711.End()
	if yyc4711 {
		*v = yyv4711
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4715 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4716 := &yyv4715
		yy4716.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4717 := *v
	yyh4717, yyl4717 := z.DecSliceHelperStart()
	var yyc4717 bool
	if yyl4717 == 0 {
		if yyv4717 == nil {
			yyv4717 = []Service{}
			yyc4717 = true
		} else if len(yyv4717) != 0 {
			yyv4717 = yyv4717[:0]
			yyc4717 = true
		}
	} else if yyl4717 > 0 {
		var yyrr4717, yyrl4717 int
		var yyrt4717 bool
		if yyl4717 > cap(yyv4717) {

			yyrg4717 := len(yyv4717) > 0
			yyv24717 := yyv4717
			yyrl4717, yyrt4717 = z.DecInferLen(yyl4717, z.DecBasicHandle().MaxInitLen, 464)
			if yyrt4717 {
				if yyrl4717 <= cap(yyv4717) {
					yyv4717 = yyv4717[:yyrl4717]
				} else {
					yyv4717 = make([]Service, yyrl4717)
				}
			} else {
				yyv4717 = make([]Service, yyrl4717)
			}
			yyc4717 = true
			yyrr4717 = len(yyv4717)
			if yyrg4717 {
				copy(yyv4717, yyv24717)
			}
		} else if yyl4717 != len(yyv4717) {
			yyv4717 = yyv4717[:yyl4717]
			yyc4717 = true
		}
		yyj4717 := 0
		for ; yyj4717 < yyrr4717; yyj4717++ {
			yyh4717.ElemContainerState(yyj4717)
			if r.TryDecodeAsNil() {
				yyv4717[yyj4717] = Service{}
			} else {
				yyv4718 := &yyv4717[yyj4717]
				yyv4718.CodecDecodeSelf(d)
			}

		}
		if yyrt4717 {
			for ; yyj4717 < yyl4717; yyj4717++ {
				yyv4717 = append(yyv4717, Service{})
				yyh4717.ElemContainerState(yyj4717)
				if r.TryDecodeAsNil() {
					yyv4717[yyj4717] = Service{}
				} else {
					yyv4719 := &yyv4717[yyj4717]
					yyv4719.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4717 := 0
		for ; !r.CheckBreak(); yyj4717++ {

			if yyj4717 >= len(yyv4717) {
				yyv4717 = append(yyv4717, Service{}) // var yyz4717 Service
				yyc4717 = true
			}
			yyh4717.ElemContainerState(yyj4717)
			if yyj4717 < len(yyv4717) {
				if r.TryDecodeAsNil() {
					yyv4717[yyj4717] = Service{}
				} else {
					yyv4720 := &yyv4717[yyj4717]
					yyv4720.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4717 < len(yyv4717) {
			yyv4717 = yyv4717[:yyj4717]
			yyc4717 = true
		} else if yyj4717 == 0 && yyv4717 == nil {
			yyv4717 = []Service{}
			yyc4717 = true
		}
	}
	yyh4717.End()
	if yyc4717 {
		*v = yyv4717
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4721 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4722 := &yyv4721
		yy4722.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4723 := *v
	yyh4723, yyl4723 := z.DecSliceHelperStart()
	var yyc4723 bool
	if yyl4723 == 0 {
		if yyv4723 == nil {
			yyv4723 = []ObjectReference{}
			yyc4723 = true
		} else if len(yyv4723) != 0 {
			yyv4723 = yyv4723[:0]
			yyc4723 = true
		}
	} else if yyl4723 > 0 {
		var yyrr4723, yyrl4723 int
		var yyrt4723 bool
		if yyl4723 > cap(yyv4723) {

			yyrg4723 := len(yyv4723) > 0
			yyv24723 := yyv4723
			yyrl4723, yyrt4723 = z.DecInferLen(yyl4723, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4723 {
				if yyrl4723 <= cap(yyv4723) {
					yyv4723 = yyv4723[:yyrl4723]
				} else {
					yyv4723 = make([]ObjectReference, yyrl4723)
				}
			} else {
				yyv4723 = make([]ObjectReference, yyrl4723)
			}
			yyc4723 = true
			yyrr4723 = len(yyv4723)
			if yyrg4723 {
				copy(yyv4723, yyv24723)
			}
		} else if yyl4723 != len(yyv4723) {
			yyv4723 = yyv4723[:yyl4723]
			yyc4723 = true
		}
		yyj4723 := 0
		for ; yyj4723 < yyrr4723; yyj4723++ {
			yyh4723.ElemContainerState(yyj4723)
			if r.TryDecodeAsNil() {
				yyv4723[yyj4723] = ObjectReference{}
			} else {
				yyv4724 := &yyv4723[yyj4723]
				yyv4724.CodecDecodeSelf(d)
			}

		}
		if yyrt4723 {
			for ; yyj4723 < yyl4723; yyj4723++ {
				yyv4723 = append(yyv4723, ObjectReference{})
				yyh4723.ElemContainerState(yyj4723)
				if r.TryDecodeAsNil() {
					yyv4723[yyj4723] = ObjectReference{}
				} else {
					yyv4725 := &yyv4723[yyj4723]
					yyv4725.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4723 := 0
		for ; !r.CheckBreak(); yyj4723++ {

			if yyj4723 >= len(yyv4723) {
				yyv4723 = append(yyv4723, ObjectReference{}) // var yyz4723 ObjectReference
				yyc4723 = true
			}
			yyh4723.ElemContainerState(yyj4723)
			if yyj4723 < len(yyv4723) {
				if r.TryDecodeAsNil() {
					yyv4723[yyj4723] = ObjectReference{}
				} else {
					yyv4726 := &yyv4723[yyj4723]
					yyv4726.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4723 < len(yyv4723) {
			yyv4723 = yyv4723[:yyj4723]
			yyc4723 = true
		} else if yyj4723 == 0 && yyv4723 == nil {
			yyv4723 = []ObjectReference{}
			yyc4723 = true
		}
	}
	yyh4723.End()
	if yyc4723 {
		*v = yyv4723
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4727 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4728 := &yyv4727
		yy4728.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4729 := *v
	yyh4729, yyl4729 := z.DecSliceHelperStart()
	var yyc4729 bool
	if yyl4729 == 0 {
		if yyv4729 == nil {
			yyv4729 = []ServiceAccount{}
			yyc4729 = true
		} else if len(yyv4729) != 0 {
			yyv4729 = yyv4729[:0]
			yyc4729 = true
		}
	} else if yyl4729 > 0 {
		var yyrr4729, yyrl4729 int
		var yyrt4729 bool
		if yyl4729 > cap(yyv4729) {

			yyrg4729 := len(yyv4729) > 0
			yyv24729 := yyv4729
			yyrl4729, yyrt4729 = z.DecInferLen(yyl4729, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4729 {
				if yyrl4729 <= cap(yyv4729) {
					yyv4729 = yyv4729[:yyrl4729]
				} else {
					yyv4729 = make([]ServiceAccount, yyrl4729)
				}
			} else {
				yyv4729 = make([]ServiceAccount, yyrl4729)
			}
			yyc4729 = true
			yyrr4729 = len(yyv4729)
			if yyrg4729 {
				copy(yyv4729, yyv24729)
			}
		} else if yyl4729 != len(yyv4729) {
			yyv4729 = yyv4729[:yyl4729]
			yyc4729 = true
		}
		yyj4729 := 0
		for ; yyj4729 < yyrr4729; yyj4729++ {
			yyh4729.ElemContainerState(yyj4729)
			if r.TryDecodeAsNil() {
				yyv4729[yyj4729] = ServiceAccount{}
			} else {
				yyv4730 := &yyv4729[yyj4729]
				yyv4730.CodecDecodeSelf(d)
			}

		}
		if yyrt4729 {
			for ; yyj4729 < yyl4729; yyj4729++ {
				yyv4729 = append(yyv4729, ServiceAccount{})
				yyh4729.ElemContainerState(yyj4729)
				if r.TryDecodeAsNil() {
					yyv4729[yyj4729] = ServiceAccount{}
				} else {
					yyv4731 := &yyv4729[yyj4729]
					yyv4731.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4729 := 0
		for ; !r.CheckBreak(); yyj4729++ {

			if yyj4729 >= len(yyv4729) {
				yyv4729 = append(yyv4729, ServiceAccount{}) // var yyz4729 ServiceAccount
				yyc4729 = true
			}
			yyh4729.ElemContainerState(yyj4729)
			if yyj4729 < len(yyv4729) {
				if r.TryDecodeAsNil() {
					yyv4729[yyj4729] = ServiceAccount{}
				} else {
					yyv4732 := &yyv4729[yyj4729]
					yyv4732.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4729 < len(yyv4729) {
			yyv4729 = yyv4729[:yyj4729]
			yyc4729 = true
		} else if yyj4729 == 0 && yyv4729 == nil {
			yyv4729 = []ServiceAccount{}
			yyc4729 = true
		}
	}
	yyh4729.End()
	if yyc4729 {
		*v = yyv4729
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4733 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4734 := &yyv4733
		yy4734.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4735 := *v
	yyh4735, yyl4735 := z.DecSliceHelperStart()
	var yyc4735 bool
	if yyl4735 == 0 {
		if yyv4735 == nil {
			yyv4735 = []EndpointSubset{}
			yyc4735 = true
		} else if len(yyv4735) != 0 {
			yyv4735 = yyv4735[:0]
			yyc4735 = true
		}
	} else if yyl4735 > 0 {
		var yyrr4735, yyrl4735 int
		var yyrt4735 bool
		if yyl4735 > cap(yyv4735) {

			yyrg4735 := len(yyv4735) > 0
			yyv24735 := yyv4735
			yyrl4735, yyrt4735 = z.DecInferLen(yyl4735, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4735 {
				if yyrl4735 <= cap(yyv4735) {
					yyv4735 = yyv4735[:yyrl4735]
				} else {
					yyv4735 = make([]EndpointSubset, yyrl4735)
				}
			} else {
				yyv4735 = make([]EndpointSubset, yyrl4735)
			}
			yyc4735 = true
			yyrr4735 = len(yyv4735)
			if yyrg4735 {
				copy(yyv4735, yyv24735)
			}
		} else if yyl4735 != len(yyv4735) {
			yyv4735 = yyv4735[:yyl4735]
			yyc4735 = true
		}
		yyj4735 := 0
		for ; yyj4735 < yyrr4735; yyj4735++ {
			yyh4735.ElemContainerState(yyj4735)
			if r.TryDecodeAsNil() {
				yyv4735[yyj4735] = EndpointSubset{}
			} else {
				yyv4736 := &yyv4735[yyj4735]
				yyv4736.CodecDecodeSelf(d)
			}

		}
		if yyrt4735 {
			for ; yyj4735 < yyl4735; yyj4735++ {
				yyv4735 = append(yyv4735, EndpointSubset{})
				yyh4735.ElemContainerState(yyj4735)
				if r.TryDecodeAsNil() {
					yyv4735[yyj4735] = EndpointSubset{}
				} else {
					yyv4737 := &yyv4735[yyj4735]
					yyv4737.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4735 := 0
		for ; !r.CheckBreak(); yyj4735++ {

			if yyj4735 >= len(yyv4735) {
				yyv4735 = append(yyv4735, EndpointSubset{}) // var yyz4735 EndpointSubset
				yyc4735 = true
			}
			yyh4735.ElemContainerState(yyj4735)
			if yyj4735 < len(yyv4735) {
				if r.TryDecodeAsNil() {
					yyv4735[yyj4735] = EndpointSubset{}
				} else {
					yyv4738 := &yyv4735[yyj4735]
					yyv4738.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4735 < len(yyv4735) {
			yyv4735 = yyv4735[:yyj4735]
			yyc4735 = true
		} else if yyj4735 == 0 && yyv4735 == nil {
			yyv4735 = []EndpointSubset{}
			yyc4735 = true
		}
	}
	yyh4735.End()
	if yyc4735 {
		*v = yyv4735
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4739 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4740 := &yyv4739
		yy4740.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4741 := *v
	yyh4741, yyl4741 := z.DecSliceHelperStart()
	var yyc4741 bool
	if yyl4741 == 0 {
		if yyv4741 == nil {
			yyv4741 = []EndpointAddress{}
			yyc4741 = true
		} else if len(yyv4741) != 0 {
			yyv4741 = yyv4741[:0]
			yyc4741 = true
		}
	} else if yyl4741 > 0 {
		var yyrr4741, yyrl4741 int
		var yyrt4741 bool
		if yyl4741 > cap(yyv4741) {

			yyrg4741 := len(yyv4741) > 0
			yyv24741 := yyv4741
			yyrl4741, yyrt4741 = z.DecInferLen(yyl4741, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4741 {
				if yyrl4741 <= cap(yyv4741) {
					yyv4741 = yyv4741[:yyrl4741]
				} else {
					yyv4741 = make([]EndpointAddress, yyrl4741)
				}
			} else {
				yyv4741 = make([]EndpointAddress, yyrl4741)
			}
			yyc4741 = true
			yyrr4741 = len(yyv4741)
			if yyrg4741 {
				copy(yyv4741, yyv24741)
			}
		} else if yyl4741 != len(yyv4741) {
			yyv4741 = yyv4741[:yyl4741]
			yyc4741 = true
		}
		yyj4741 := 0
		for ; yyj4741 < yyrr4741; yyj4741++ {
			yyh4741.ElemContainerState(yyj4741)
			if r.TryDecodeAsNil() {
				yyv4741[yyj4741] = EndpointAddress{}
			} else {
				yyv4742 := &yyv4741[yyj4741]
				yyv4742.CodecDecodeSelf(d)
			}

		}
		if yyrt4741 {
			for ; yyj4741 < yyl4741; yyj4741++ {
				yyv4741 = append(yyv4741, EndpointAddress{})
				yyh4741.ElemContainerState(yyj4741)
				if r.TryDecodeAsNil() {
					yyv4741[yyj4741] = EndpointAddress{}
				} else {
					yyv4743 := &yyv4741[yyj4741]
					yyv4743.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4741 := 0
		for ; !r.CheckBreak(); yyj4741++ {

			if yyj4741 >= len(yyv4741) {
				yyv4741 = append(yyv4741, EndpointAddress{}) // var yyz4741 EndpointAddress
				yyc4741 = true
			}
			yyh4741.ElemContainerState(yyj4741)
			if yyj4741 < len(yyv4741) {
				if r.TryDecodeAsNil() {
					yyv4741[yyj4741] = EndpointAddress{}
				} else {
					yyv4744 := &yyv4741[yyj4741]
					yyv4744.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4741 < len(yyv4741) {
			yyv4741 = yyv4741[:yyj4741]
			yyc4741 = true
		} else if yyj4741 == 0 && yyv4741 == nil {
			yyv4741 = []EndpointAddress{}
			yyc4741 = true
		}
	}
	yyh4741.End()
	if yyc4741 {
		*v = yyv4741
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4745 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4746 := &yyv4745
		yy4746.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4747 := *v
	yyh4747, yyl4747 := z.DecSliceHelperStart()
	var yyc4747 bool
	if yyl4747 == 0 {
		if yyv4747 == nil {
			yyv4747 = []EndpointPort{}
			yyc4747 = true
		} else if len(yyv4747) != 0 {
			yyv4747 = yyv4747[:0]
			yyc4747 = true
		}
	} else if yyl4747 > 0 {
		var yyrr4747, yyrl4747 int
		var yyrt4747 bool
		if yyl4747 > cap(yyv4747) {

			yyrg4747 := len(yyv4747) > 0
			yyv24747 := yyv4747
			yyrl4747, yyrt4747 = z.DecInferLen(yyl4747, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4747 {
				if yyrl4747 <= cap(yyv4747) {
					yyv4747 = yyv4747[:yyrl4747]
				} else {
					yyv4747 = make([]EndpointPort, yyrl4747)
				}
			} else {
				yyv4747 = make([]EndpointPort, yyrl4747)
			}
			yyc4747 = true
			yyrr4747 = len(yyv4747)
			if yyrg4747 {
				copy(yyv4747, yyv24747)
			}
		} else if yyl4747 != len(yyv4747) {
			yyv4747 = yyv4747[:yyl4747]
			yyc4747 = true
		}
		yyj4747 := 0
		for ; yyj4747 < yyrr4747; yyj4747++ {
			yyh4747.ElemContainerState(yyj4747)
			if r.TryDecodeAsNil() {
				yyv4747[yyj4747] = EndpointPort{}
			} else {
				yyv4748 := &yyv4747[yyj4747]
				yyv4748.CodecDecodeSelf(d)
			}

		}
		if yyrt4747 {
			for ; yyj4747 < yyl4747; yyj4747++ {
				yyv4747 = append(yyv4747, EndpointPort{})
				yyh4747.ElemContainerState(yyj4747)
				if r.TryDecodeAsNil() {
					yyv4747[yyj4747] = EndpointPort{}
				} else {
					yyv4749 := &yyv4747[yyj4747]
					yyv4749.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4747 := 0
		for ; !r.CheckBreak(); yyj4747++ {

			if yyj4747 >= len(yyv4747) {
				yyv4747 = append(yyv4747, EndpointPort{}) // var yyz4747 EndpointPort
				yyc4747 = true
			}
			yyh4747.ElemContainerState(yyj4747)
			if yyj4747 < len(yyv4747) {
				if r.TryDecodeAsNil() {
					yyv4747[yyj4747] = EndpointPort{}
				} else {
					yyv4750 := &yyv4747[yyj4747]
					yyv4750.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4747 < len(yyv4747) {
			yyv4747 = yyv4747[:yyj4747]
			yyc4747 = true
		} else if yyj4747 == 0 && yyv4747 == nil {
			yyv4747 = []EndpointPort{}
			yyc4747 = true
		}
	}
	yyh4747.End()
	if yyc4747 {
		*v = yyv4747
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4751 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4752 := &yyv4751
		yy4752.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4753 := *v
	yyh4753, yyl4753 := z.DecSliceHelperStart()
	var yyc4753 bool
	if yyl4753 == 0 {
		if yyv4753 == nil {
			yyv4753 = []Endpoints{}
			yyc4753 = true
		} else if len(yyv4753) != 0 {
			yyv4753 = yyv4753[:0]
			yyc4753 = true
		}
	} else if yyl4753 > 0 {
		var yyrr4753, yyrl4753 int
		var yyrt4753 bool
		if yyl4753 > cap(yyv4753) {

			yyrg4753 := len(yyv4753) > 0
			yyv24753 := yyv4753
			yyrl4753, yyrt4753 = z.DecInferLen(yyl4753, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4753 {
				if yyrl4753 <= cap(yyv4753) {
					yyv4753 = yyv4753[:yyrl4753]
				} else {
					yyv4753 = make([]Endpoints, yyrl4753)
				}
			} else {
				yyv4753 = make([]Endpoints, yyrl4753)
			}
			yyc4753 = true
			yyrr4753 = len(yyv4753)
			if yyrg4753 {
				copy(yyv4753, yyv24753)
			}
		} else if yyl4753 != len(yyv4753) {
			yyv4753 = yyv4753[:yyl4753]
			yyc4753 = true
		}
		yyj4753 := 0
		for ; yyj4753 < yyrr4753; yyj4753++ {
			yyh4753.ElemContainerState(yyj4753)
			if r.TryDecodeAsNil() {
				yyv4753[yyj4753] = Endpoints{}
			} else {
				yyv4754 := &yyv4753[yyj4753]
				yyv4754.CodecDecodeSelf(d)
			}

		}
		if yyrt4753 {
			for ; yyj4753 < yyl4753; yyj4753++ {
				yyv4753 = append(yyv4753, Endpoints{})
				yyh4753.ElemContainerState(yyj4753)
				if r.TryDecodeAsNil() {
					yyv4753[yyj4753] = Endpoints{}
				} else {
					yyv4755 := &yyv4753[yyj4753]
					yyv4755.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4753 := 0
		for ; !r.CheckBreak(); yyj4753++ {

			if yyj4753 >= len(yyv4753) {
				yyv4753 = append(yyv4753, Endpoints{}) // var yyz4753 Endpoints
				yyc4753 = true
			}
			yyh4753.ElemContainerState(yyj4753)
			if yyj4753 < len(yyv4753) {
				if r.TryDecodeAsNil() {
					yyv4753[yyj4753] = Endpoints{}
				} else {
					yyv4756 := &yyv4753[yyj4753]
					yyv4756.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4753 < len(yyv4753) {
			yyv4753 = yyv4753[:yyj4753]
			yyc4753 = true
		} else if yyj4753 == 0 && yyv4753 == nil {
			yyv4753 = []Endpoints{}
			yyc4753 = true
		}
	}
	yyh4753.End()
	if yyc4753 {
		*v = yyv4753
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4757 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4758 := &yyv4757
		yy4758.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4759 := *v
	yyh4759, yyl4759 := z.DecSliceHelperStart()
	var yyc4759 bool
	if yyl4759 == 0 {
		if yyv4759 == nil {
			yyv4759 = []NodeCondition{}
			yyc4759 = true
		} else if len(yyv4759) != 0 {
			yyv4759 = yyv4759[:0]
			yyc4759 = true
		}
	} else if yyl4759 > 0 {
		var yyrr4759, yyrl4759 int
		var yyrt4759 bool
		if yyl4759 > cap(yyv4759) {

			yyrg4759 := len(yyv4759) > 0
			yyv24759 := yyv4759
			yyrl4759, yyrt4759 = z.DecInferLen(yyl4759, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4759 {
				if yyrl4759 <= cap(yyv4759) {
					yyv4759 = yyv4759[:yyrl4759]
				} else {
					yyv4759 = make([]NodeCondition, yyrl4759)
				}
			} else {
				yyv4759 = make([]NodeCondition, yyrl4759)
			}
			yyc4759 = true
			yyrr4759 = len(yyv4759)
			if yyrg4759 {
				copy(yyv4759, yyv24759)
			}
		} else if yyl4759 != len(yyv4759) {
			yyv4759 = yyv4759[:yyl4759]
			yyc4759 = true
		}
		yyj4759 := 0
		for ; yyj4759 < yyrr4759; yyj4759++ {
			yyh4759.ElemContainerState(yyj4759)
			if r.TryDecodeAsNil() {
				yyv4759[yyj4759] = NodeCondition{}
			} else {
				yyv4760 := &yyv4759[yyj4759]
				yyv4760.CodecDecodeSelf(d)
			}

		}
		if yyrt4759 {
			for ; yyj4759 < yyl4759; yyj4759++ {
				yyv4759 = append(yyv4759, NodeCondition{})
				yyh4759.ElemContainerState(yyj4759)
				if r.TryDecodeAsNil() {
					yyv4759[yyj4759] = NodeCondition{}
				} else {
					yyv4761 := &yyv4759[yyj4759]
					yyv4761.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4759 := 0
		for ; !r.CheckBreak(); yyj4759++ {

			if yyj4759 >= len(yyv4759) {
				yyv4759 = append(yyv4759, NodeCondition{}) // var yyz4759 NodeCondition
				yyc4759 = true
			}
			yyh4759.ElemContainerState(yyj4759)
			if yyj4759 < len(yyv4759) {
				if r.TryDecodeAsNil() {
					yyv4759[yyj4759] = NodeCondition{}
				} else {
					yyv4762 := &yyv4759[yyj4759]
					yyv4762.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4759 < len(yyv4759) {
			yyv4759 = yyv4759[:yyj4759]
			yyc4759 = true
		} else if yyj4759 == 0 && yyv4759 == nil {
			yyv4759 = []NodeCondition{}
			yyc4759 = true
		}
	}
	yyh4759.End()
	if yyc4759 {
		*v = yyv4759
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4763 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4764 := &yyv4763
		yy4764.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4765 := *v
	yyh4765, yyl4765 := z.DecSliceHelperStart()
	var yyc4765 bool
	if yyl4765 == 0 {
		if yyv4765 == nil {
			yyv4765 = []NodeAddress{}
			yyc4765 = true
		} else if len(yyv4765) != 0 {
			yyv4765 = yyv4765[:0]
			yyc4765 = true
		}
	} else if yyl4765 > 0 {
		var yyrr4765, yyrl4765 int
		var yyrt4765 bool
		if yyl4765 > cap(yyv4765) {

			yyrg4765 := len(yyv4765) > 0
			yyv24765 := yyv4765
			yyrl4765, yyrt4765 = z.DecInferLen(yyl4765, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4765 {
				if yyrl4765 <= cap(yyv4765) {
					yyv4765 = yyv4765[:yyrl4765]
				} else {
					yyv4765 = make([]NodeAddress, yyrl4765)
				}
			} else {
				yyv4765 = make([]NodeAddress, yyrl4765)
			}
			yyc4765 = true
			yyrr4765 = len(yyv4765)
			if yyrg4765 {
				copy(yyv4765, yyv24765)
			}
		} else if yyl4765 != len(yyv4765) {
			yyv4765 = yyv4765[:yyl4765]
			yyc4765 = true
		}
		yyj4765 := 0
		for ; yyj4765 < yyrr4765; yyj4765++ {
			yyh4765.ElemContainerState(yyj4765)
			if r.TryDecodeAsNil() {
				yyv4765[yyj4765] = NodeAddress{}
			} else {
				yyv4766 := &yyv4765[yyj4765]
				yyv4766.CodecDecodeSelf(d)
			}

		}
		if yyrt4765 {
			for ; yyj4765 < yyl4765; yyj4765++ {
				yyv4765 = append(yyv4765, NodeAddress{})
				yyh4765.ElemContainerState(yyj4765)
				if r.TryDecodeAsNil() {
					yyv4765[yyj4765] = NodeAddress{}
				} else {
					yyv4767 := &yyv4765[yyj4765]
					yyv4767.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4765 := 0
		for ; !r.CheckBreak(); yyj4765++ {

			if yyj4765 >= len(yyv4765) {
				yyv4765 = append(yyv4765, NodeAddress{}) // var yyz4765 NodeAddress
				yyc4765 = true
			}
			yyh4765.ElemContainerState(yyj4765)
			if yyj4765 < len(yyv4765) {
				if r.TryDecodeAsNil() {
					yyv4765[yyj4765] = NodeAddress{}
				} else {
					yyv4768 := &yyv4765[yyj4765]
					yyv4768.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4765 < len(yyv4765) {
			yyv4765 = yyv4765[:yyj4765]
			yyc4765 = true
		} else if yyj4765 == 0 && yyv4765 == nil {
			yyv4765 = []NodeAddress{}
			yyc4765 = true
		}
	}
	yyh4765.End()
	if yyc4765 {
		*v = yyv4765
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4769 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4770 := &yyv4769
		yy4770.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4771 := *v
	yyh4771, yyl4771 := z.DecSliceHelperStart()
	var yyc4771 bool
	if yyl4771 == 0 {
		if yyv4771 == nil {
			yyv4771 = []ContainerImage{}
			yyc4771 = true
		} else if len(yyv4771) != 0 {
			yyv4771 = yyv4771[:0]
			yyc4771 = true
		}
	} else if yyl4771 > 0 {
		var yyrr4771, yyrl4771 int
		var yyrt4771 bool
		if yyl4771 > cap(yyv4771) {

			yyrg4771 := len(yyv4771) > 0
			yyv24771 := yyv4771
			yyrl4771, yyrt4771 = z.DecInferLen(yyl4771, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4771 {
				if yyrl4771 <= cap(yyv4771) {
					yyv4771 = yyv4771[:yyrl4771]
				} else {
					yyv4771 = make([]ContainerImage, yyrl4771)
				}
			} else {
				yyv4771 = make([]ContainerImage, yyrl4771)
			}
			yyc4771 = true
			yyrr4771 = len(yyv4771)
			if yyrg4771 {
				copy(yyv4771, yyv24771)
			}
		} else if yyl4771 != len(yyv4771) {
			yyv4771 = yyv4771[:yyl4771]
			yyc4771 = true
		}
		yyj4771 := 0
		for ; yyj4771 < yyrr4771; yyj4771++ {
			yyh4771.ElemContainerState(yyj4771)
			if r.TryDecodeAsNil() {
				yyv4771[yyj4771] = ContainerImage{}
			} else {
				yyv4772 := &yyv4771[yyj4771]
				yyv4772.CodecDecodeSelf(d)
			}

		}
		if yyrt4771 {
			for ; yyj4771 < yyl4771; yyj4771++ {
				yyv4771 = append(yyv4771, ContainerImage{})
				yyh4771.ElemContainerState(yyj4771)
				if r.TryDecodeAsNil() {
					yyv4771[yyj4771] = ContainerImage{}
				} else {
					yyv4773 := &yyv4771[yyj4771]
					yyv4773.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4771 := 0
		for ; !r.CheckBreak(); yyj4771++ {

			if yyj4771 >= len(yyv4771) {
				yyv4771 = append(yyv4771, ContainerImage{}) // var yyz4771 ContainerImage
				yyc4771 = true
			}
			yyh4771.ElemContainerState(yyj4771)
			if yyj4771 < len(yyv4771) {
				if r.TryDecodeAsNil() {
					yyv4771[yyj4771] = ContainerImage{}
				} else {
					yyv4774 := &yyv4771[yyj4771]
					yyv4774.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4771 < len(yyv4771) {
			yyv4771 = yyv4771[:yyj4771]
			yyc4771 = true
		} else if yyj4771 == 0 && yyv4771 == nil {
			yyv4771 = []ContainerImage{}
			yyc4771 = true
		}
	}
	yyh4771.End()
	if yyc4771 {
		*v = yyv4771
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4775 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4775.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4776 := *v
	yyh4776, yyl4776 := z.DecSliceHelperStart()
	var yyc4776 bool
	if yyl4776 == 0 {
		if yyv4776 == nil {
			yyv4776 = []UniqueVolumeName{}
			yyc4776 = true
		} else if len(yyv4776) != 0 {
			yyv4776 = yyv4776[:0]
			yyc4776 = true
		}
	} else if yyl4776 > 0 {
		var yyrr4776, yyrl4776 int
		var yyrt4776 bool
		if yyl4776 > cap(yyv4776) {

			yyrl4776, yyrt4776 = z.DecInferLen(yyl4776, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4776 {
				if yyrl4776 <= cap(yyv4776) {
					yyv4776 = yyv4776[:yyrl4776]
				} else {
					yyv4776 = make([]UniqueVolumeName, yyrl4776)
				}
			} else {
				yyv4776 = make([]UniqueVolumeName, yyrl4776)
			}
			yyc4776 = true
			yyrr4776 = len(yyv4776)
		} else if yyl4776 != len(yyv4776) {
			yyv4776 = yyv4776[:yyl4776]
			yyc4776 = true
		}
		yyj4776 := 0
		for ; yyj4776 < yyrr4776; yyj4776++ {
			yyh4776.ElemContainerState(yyj4776)
			if r.TryDecodeAsNil() {
				yyv4776[yyj4776] = ""
			} else {
				yyv4776[yyj4776] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4776 {
			for ; yyj4776 < yyl4776; yyj4776++ {
				yyv4776 = append(yyv4776, "")
				yyh4776.ElemContainerState(yyj4776)
				if r.TryDecodeAsNil() {
					yyv4776[yyj4776] = ""
				} else {
					yyv4776[yyj4776] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4776 := 0
		for ; !r.CheckBreak(); yyj4776++ {

			if yyj4776 >= len(yyv4776) {
				yyv4776 = append(yyv4776, "") // var yyz4776 UniqueVolumeName
				yyc4776 = true
			}
			yyh4776.ElemContainerState(yyj4776)
			if yyj4776 < len(yyv4776) {
				if r.TryDecodeAsNil() {
					yyv4776[yyj4776] = ""
				} else {
					yyv4776[yyj4776] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4776 < len(yyv4776) {
			yyv4776 = yyv4776[:yyj4776]
			yyc4776 = true
		} else if yyj4776 == 0 && yyv4776 == nil {
			yyv4776 = []UniqueVolumeName{}
			yyc4776 = true
		}
	}
	yyh4776.End()
	if yyc4776 {
		*v = yyv4776
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4780 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4781 := &yyv4780
		yy4781.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4782 := *v
	yyh4782, yyl4782 := z.DecSliceHelperStart()
	var yyc4782 bool
	if yyl4782 == 0 {
		if yyv4782 == nil {
			yyv4782 = []AttachedVolume{}
			yyc4782 = true
		} else if len(yyv4782) != 0 {
			yyv4782 = yyv4782[:0]
			yyc4782 = true
		}
	} else if yyl4782 > 0 {
		var yyrr4782, yyrl4782 int
		var yyrt4782 bool
		if yyl4782 > cap(yyv4782) {

			yyrg4782 := len(yyv4782) > 0
			yyv24782 := yyv4782
			yyrl4782, yyrt4782 = z.DecInferLen(yyl4782, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4782 {
				if yyrl4782 <= cap(yyv4782) {
					yyv4782 = yyv4782[:yyrl4782]
				} else {
					yyv4782 = make([]AttachedVolume, yyrl4782)
				}
			} else {
				yyv4782 = make([]AttachedVolume, yyrl4782)
			}
			yyc4782 = true
			yyrr4782 = len(yyv4782)
			if yyrg4782 {
				copy(yyv4782, yyv24782)
			}
		} else if yyl4782 != len(yyv4782) {
			yyv4782 = yyv4782[:yyl4782]
			yyc4782 = true
		}
		yyj4782 := 0
		for ; yyj4782 < yyrr4782; yyj4782++ {
			yyh4782.ElemContainerState(yyj4782)
			if r.TryDecodeAsNil() {
				yyv4782[yyj4782] = AttachedVolume{}
			} else {
				yyv4783 := &yyv4782[yyj4782]
				yyv4783.CodecDecodeSelf(d)
			}

		}
		if yyrt4782 {
			for ; yyj4782 < yyl4782; yyj4782++ {
				yyv4782 = append(yyv4782, AttachedVolume{})
				yyh4782.ElemContainerState(yyj4782)
				if r.TryDecodeAsNil() {
					yyv4782[yyj4782] = AttachedVolume{}
				} else {
					yyv4784 := &yyv4782[yyj4782]
					yyv4784.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4782 := 0
		for ; !r.CheckBreak(); yyj4782++ {

			if yyj4782 >= len(yyv4782) {
				yyv4782 = append(yyv4782, AttachedVolume{}) // var yyz4782 AttachedVolume
				yyc4782 = true
			}
			yyh4782.ElemContainerState(yyj4782)
			if yyj4782 < len(yyv4782) {
				if r.TryDecodeAsNil() {
					yyv4782[yyj4782] = AttachedVolume{}
				} else {
					yyv4785 := &yyv4782[yyj4782]
					yyv4785.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4782 < len(yyv4782) {
			yyv4782 = yyv4782[:yyj4782]
			yyc4782 = true
		} else if yyj4782 == 0 && yyv4782 == nil {
			yyv4782 = []AttachedVolume{}
			yyc4782 = true
		}
	}
	yyh4782.End()
	if yyc4782 {
		*v = yyv4782
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4786 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4787 := &yyv4786
		yy4787.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4788 := *v
	yyh4788, yyl4788 := z.DecSliceHelperStart()
	var yyc4788 bool
	if yyl4788 == 0 {
		if yyv4788 == nil {
			yyv4788 = []PreferAvoidPodsEntry{}
			yyc4788 = true
		} else if len(yyv4788) != 0 {
			yyv4788 = yyv4788[:0]
			yyc4788 = true
		}
	} else if yyl4788 > 0 {
		var yyrr4788, yyrl4788 int
		var yyrt4788 bool
		if yyl4788 > cap(yyv4788) {

			yyrg4788 := len(yyv4788) > 0
			yyv24788 := yyv4788
			yyrl4788, yyrt4788 = z.DecInferLen(yyl4788, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4788 {
				if yyrl4788 <= cap(yyv4788) {
					yyv4788 = yyv4788[:yyrl4788]
				} else {
					yyv4788 = make([]PreferAvoidPodsEntry, yyrl4788)
				}
			} else {
				yyv4788 = make([]PreferAvoidPodsEntry, yyrl4788)
			}
			yyc4788 = true
			yyrr4788 = len(yyv4788)
			if yyrg4788 {
				copy(yyv4788, yyv24788)
			}
		} else if yyl4788 != len(yyv4788) {
			yyv4788 = yyv4788[:yyl4788]
			yyc4788 = true
		}
		yyj4788 := 0
		for ; yyj4788 < yyrr4788; yyj4788++ {
			yyh4788.ElemContainerState(yyj4788)
			if r.TryDecodeAsNil() {
				yyv4788[yyj4788] = PreferAvoidPodsEntry{}
			} else {
				yyv4789 := &yyv4788[yyj4788]
				yyv4789.CodecDecodeSelf(d)
			}

		}
		if yyrt4788 {
			for ; yyj4788 < yyl4788; yyj4788++ {
				yyv4788 = append(yyv4788, PreferAvoidPodsEntry{})
				yyh4788.ElemContainerState(yyj4788)
				if r.TryDecodeAsNil() {
					yyv4788[yyj4788] = PreferAvoidPodsEntry{}
				} else {
					yyv4790 := &yyv4788[yyj4788]
					yyv4790.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4788 := 0
		for ; !r.CheckBreak(); yyj4788++ {

			if yyj4788 >= len(yyv4788) {
				yyv4788 = append(yyv4788, PreferAvoidPodsEntry{}) // var yyz4788 PreferAvoidPodsEntry
				yyc4788 = true
			}
			yyh4788.ElemContainerState(yyj4788)
			if yyj4788 < len(yyv4788) {
				if r.TryDecodeAsNil() {
					yyv4788[yyj4788] = PreferAvoidPodsEntry{}
				} else {
					yyv4791 := &yyv4788[yyj4788]
					yyv4791.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4788 < len(yyv4788) {
			yyv4788 = yyv4788[:yyj4788]
			yyc4788 = true
		} else if yyj4788 == 0 && yyv4788 == nil {
			yyv4788 = []PreferAvoidPodsEntry{}
			yyc4788 = true
		}
	}
	yyh4788.End()
	if yyc4788 {
		*v = yyv4788
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4792, yyv4792 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4792.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4793 := &yyv4792
		yym4794 := z.EncBinary()
		_ = yym4794
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4793) {
		} else if !yym4794 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4793)
		} else {
			z.EncFallback(yy4793)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4795 := *v
	yyl4795 := r.ReadMapStart()
	yybh4795 := z.DecBasicHandle()
	if yyv4795 == nil {
		yyrl4795, _ := z.DecInferLen(yyl4795, yybh4795.MaxInitLen, 72)
		yyv4795 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4795)
		*v = yyv4795
	}
	var yymk4795 ResourceName
	var yymv4795 pkg3_resource.Quantity
	var yymg4795 bool
	if yybh4795.MapValueReset {
		yymg4795 = true
	}
	if yyl4795 > 0 {
		for yyj4795 := 0; yyj4795 < yyl4795; yyj4795++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4795 = ""
			} else {
				yymk4795 = ResourceName(r.DecodeString())
			}

			if yymg4795 {
				yymv4795 = yyv4795[yymk4795]
			} else {
				yymv4795 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4795 = pkg3_resource.Quantity{}
			} else {
				yyv4797 := &yymv4795
				yym4798 := z.DecBinary()
				_ = yym4798
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4797) {
				} else if !yym4798 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4797)
				} else {
					z.DecFallback(yyv4797, false)
				}
			}

			if yyv4795 != nil {
				yyv4795[yymk4795] = yymv4795
			}
		}
	} else if yyl4795 < 0 {
		for yyj4795 := 0; !r.CheckBreak(); yyj4795++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4795 = ""
			} else {
				yymk4795 = ResourceName(r.DecodeString())
			}

			if yymg4795 {
				yymv4795 = yyv4795[yymk4795]
			} else {
				yymv4795 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4795 = pkg3_resource.Quantity{}
			} else {
				yyv4800 := &yymv4795
				yym4801 := z.DecBinary()
				_ = yym4801
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4800) {
				} else if !yym4801 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4800)
				} else {
					z.DecFallback(yyv4800, false)
				}
			}

			if yyv4795 != nil {
				yyv4795[yymk4795] = yymv4795
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4802 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4803 := &yyv4802
		yy4803.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4804 := *v
	yyh4804, yyl4804 := z.DecSliceHelperStart()
	var yyc4804 bool
	if yyl4804 == 0 {
		if yyv4804 == nil {
			yyv4804 = []Node{}
			yyc4804 = true
		} else if len(yyv4804) != 0 {
			yyv4804 = yyv4804[:0]
			yyc4804 = true
		}
	} else if yyl4804 > 0 {
		var yyrr4804, yyrl4804 int
		var yyrt4804 bool
		if yyl4804 > cap(yyv4804) {

			yyrg4804 := len(yyv4804) > 0
			yyv24804 := yyv4804
			yyrl4804, yyrt4804 = z.DecInferLen(yyl4804, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt4804 {
				if yyrl4804 <= cap(yyv4804) {
					yyv4804 = yyv4804[:yyrl4804]
				} else {
					yyv4804 = make([]Node, yyrl4804)
				}
			} else {
				yyv4804 = make([]Node, yyrl4804)
			}
			yyc4804 = true
			yyrr4804 = len(yyv4804)
			if yyrg4804 {
				copy(yyv4804, yyv24804)
			}
		} else if yyl4804 != len(yyv4804) {
			yyv4804 = yyv4804[:yyl4804]
			yyc4804 = true
		}
		yyj4804 := 0
		for ; yyj4804 < yyrr4804; yyj4804++ {
			yyh4804.ElemContainerState(yyj4804)
			if r.TryDecodeAsNil() {
				yyv4804[yyj4804] = Node{}
			} else {
				yyv4805 := &yyv4804[yyj4804]
				yyv4805.CodecDecodeSelf(d)
			}

		}
		if yyrt4804 {
			for ; yyj4804 < yyl4804; yyj4804++ {
				yyv4804 = append(yyv4804, Node{})
				yyh4804.ElemContainerState(yyj4804)
				if r.TryDecodeAsNil() {
					yyv4804[yyj4804] = Node{}
				} else {
					yyv4806 := &yyv4804[yyj4804]
					yyv4806.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4804 := 0
		for ; !r.CheckBreak(); yyj4804++ {

			if yyj4804 >= len(yyv4804) {
				yyv4804 = append(yyv4804, Node{}) // var yyz4804 Node
				yyc4804 = true
			}
			yyh4804.ElemContainerState(yyj4804)
			if yyj4804 < len(yyv4804) {
				if r.TryDecodeAsNil() {
					yyv4804[yyj4804] = Node{}
				} else {
					yyv4807 := &yyv4804[yyj4804]
					yyv4807.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4804 < len(yyv4804) {
			yyv4804 = yyv4804[:yyj4804]
			yyc4804 = true
		} else if yyj4804 == 0 && yyv4804 == nil {
			yyv4804 = []Node{}
			yyc4804 = true
		}
	}
	yyh4804.End()
	if yyc4804 {
		*v = yyv4804
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4808 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4808.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4809 := *v
	yyh4809, yyl4809 := z.DecSliceHelperStart()
	var yyc4809 bool
	if yyl4809 == 0 {
		if yyv4809 == nil {
			yyv4809 = []FinalizerName{}
			yyc4809 = true
		} else if len(yyv4809) != 0 {
			yyv4809 = yyv4809[:0]
			yyc4809 = true
		}
	} else if yyl4809 > 0 {
		var yyrr4809, yyrl4809 int
		var yyrt4809 bool
		if yyl4809 > cap(yyv4809) {

			yyrl4809, yyrt4809 = z.DecInferLen(yyl4809, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4809 {
				if yyrl4809 <= cap(yyv4809) {
					yyv4809 = yyv4809[:yyrl4809]
				} else {
					yyv4809 = make([]FinalizerName, yyrl4809)
				}
			} else {
				yyv4809 = make([]FinalizerName, yyrl4809)
			}
			yyc4809 = true
			yyrr4809 = len(yyv4809)
		} else if yyl4809 != len(yyv4809) {
			yyv4809 = yyv4809[:yyl4809]
			yyc4809 = true
		}
		yyj4809 := 0
		for ; yyj4809 < yyrr4809; yyj4809++ {
			yyh4809.ElemContainerState(yyj4809)
			if r.TryDecodeAsNil() {
				yyv4809[yyj4809] = ""
			} else {
				yyv4809[yyj4809] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4809 {
			for ; yyj4809 < yyl4809; yyj4809++ {
				yyv4809 = append(yyv4809, "")
				yyh4809.ElemContainerState(yyj4809)
				if r.TryDecodeAsNil() {
					yyv4809[yyj4809] = ""
				} else {
					yyv4809[yyj4809] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4809 := 0
		for ; !r.CheckBreak(); yyj4809++ {

			if yyj4809 >= len(yyv4809) {
				yyv4809 = append(yyv4809, "") // var yyz4809 FinalizerName
				yyc4809 = true
			}
			yyh4809.ElemContainerState(yyj4809)
			if yyj4809 < len(yyv4809) {
				if r.TryDecodeAsNil() {
					yyv4809[yyj4809] = ""
				} else {
					yyv4809[yyj4809] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4809 < len(yyv4809) {
			yyv4809 = yyv4809[:yyj4809]
			yyc4809 = true
		} else if yyj4809 == 0 && yyv4809 == nil {
			yyv4809 = []FinalizerName{}
			yyc4809 = true
		}
	}
	yyh4809.End()
	if yyc4809 {
		*v = yyv4809
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4813 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4814 := &yyv4813
		yy4814.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4815 := *v
	yyh4815, yyl4815 := z.DecSliceHelperStart()
	var yyc4815 bool
	if yyl4815 == 0 {
		if yyv4815 == nil {
			yyv4815 = []Namespace{}
			yyc4815 = true
		} else if len(yyv4815) != 0 {
			yyv4815 = yyv4815[:0]
			yyc4815 = true
		}
	} else if yyl4815 > 0 {
		var yyrr4815, yyrl4815 int
		var yyrt4815 bool
		if yyl4815 > cap(yyv4815) {

			yyrg4815 := len(yyv4815) > 0
			yyv24815 := yyv4815
			yyrl4815, yyrt4815 = z.DecInferLen(yyl4815, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4815 {
				if yyrl4815 <= cap(yyv4815) {
					yyv4815 = yyv4815[:yyrl4815]
				} else {
					yyv4815 = make([]Namespace, yyrl4815)
				}
			} else {
				yyv4815 = make([]Namespace, yyrl4815)
			}
			yyc4815 = true
			yyrr4815 = len(yyv4815)
			if yyrg4815 {
				copy(yyv4815, yyv24815)
			}
		} else if yyl4815 != len(yyv4815) {
			yyv4815 = yyv4815[:yyl4815]
			yyc4815 = true
		}
		yyj4815 := 0
		for ; yyj4815 < yyrr4815; yyj4815++ {
			yyh4815.ElemContainerState(yyj4815)
			if r.TryDecodeAsNil() {
				yyv4815[yyj4815] = Namespace{}
			} else {
				yyv4816 := &yyv4815[yyj4815]
				yyv4816.CodecDecodeSelf(d)
			}

		}
		if yyrt4815 {
			for ; yyj4815 < yyl4815; yyj4815++ {
				yyv4815 = append(yyv4815, Namespace{})
				yyh4815.ElemContainerState(yyj4815)
				if r.TryDecodeAsNil() {
					yyv4815[yyj4815] = Namespace{}
				} else {
					yyv4817 := &yyv4815[yyj4815]
					yyv4817.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4815 := 0
		for ; !r.CheckBreak(); yyj4815++ {

			if yyj4815 >= len(yyv4815) {
				yyv4815 = append(yyv4815, Namespace{}) // var yyz4815 Namespace
				yyc4815 = true
			}
			yyh4815.ElemContainerState(yyj4815)
			if yyj4815 < len(yyv4815) {
				if r.TryDecodeAsNil() {
					yyv4815[yyj4815] = Namespace{}
				} else {
					yyv4818 := &yyv4815[yyj4815]
					yyv4818.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4815 < len(yyv4815) {
			yyv4815 = yyv4815[:yyj4815]
			yyc4815 = true
		} else if yyj4815 == 0 && yyv4815 == nil {
			yyv4815 = []Namespace{}
			yyc4815 = true
		}
	}
	yyh4815.End()
	if yyc4815 {
		*v = yyv4815
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4819 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4820 := &yyv4819
		yy4820.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4821 := *v
	yyh4821, yyl4821 := z.DecSliceHelperStart()
	var yyc4821 bool
	if yyl4821 == 0 {
		if yyv4821 == nil {
			yyv4821 = []Event{}
			yyc4821 = true
		} else if len(yyv4821) != 0 {
			yyv4821 = yyv4821[:0]
			yyc4821 = true
		}
	} else if yyl4821 > 0 {
		var yyrr4821, yyrl4821 int
		var yyrt4821 bool
		if yyl4821 > cap(yyv4821) {

			yyrg4821 := len(yyv4821) > 0
			yyv24821 := yyv4821
			yyrl4821, yyrt4821 = z.DecInferLen(yyl4821, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4821 {
				if yyrl4821 <= cap(yyv4821) {
					yyv4821 = yyv4821[:yyrl4821]
				} else {
					yyv4821 = make([]Event, yyrl4821)
				}
			} else {
				yyv4821 = make([]Event, yyrl4821)
			}
			yyc4821 = true
			yyrr4821 = len(yyv4821)
			if yyrg4821 {
				copy(yyv4821, yyv24821)
			}
		} else if yyl4821 != len(yyv4821) {
			yyv4821 = yyv4821[:yyl4821]
			yyc4821 = true
		}
		yyj4821 := 0
		for ; yyj4821 < yyrr4821; yyj4821++ {
			yyh4821.ElemContainerState(yyj4821)
			if r.TryDecodeAsNil() {
				yyv4821[yyj4821] = Event{}
			} else {
				yyv4822 := &yyv4821[yyj4821]
				yyv4822.CodecDecodeSelf(d)
			}

		}
		if yyrt4821 {
			for ; yyj4821 < yyl4821; yyj4821++ {
				yyv4821 = append(yyv4821, Event{})
				yyh4821.ElemContainerState(yyj4821)
				if r.TryDecodeAsNil() {
					yyv4821[yyj4821] = Event{}
				} else {
					yyv4823 := &yyv4821[yyj4821]
					yyv4823.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4821 := 0
		for ; !r.CheckBreak(); yyj4821++ {

			if yyj4821 >= len(yyv4821) {
				yyv4821 = append(yyv4821, Event{}) // var yyz4821 Event
				yyc4821 = true
			}
			yyh4821.ElemContainerState(yyj4821)
			if yyj4821 < len(yyv4821) {
				if r.TryDecodeAsNil() {
					yyv4821[yyj4821] = Event{}
				} else {
					yyv4824 := &yyv4821[yyj4821]
					yyv4824.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4821 < len(yyv4821) {
			yyv4821 = yyv4821[:yyj4821]
			yyc4821 = true
		} else if yyj4821 == 0 && yyv4821 == nil {
			yyv4821 = []Event{}
			yyc4821 = true
		}
	}
	yyh4821.End()
	if yyc4821 {
		*v = yyv4821
	}
}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg5_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4825 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4826 := &yyv4825
		yym4827 := z.EncBinary()
		_ = yym4827
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4826) {
		} else if !yym4827 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4826)
		} else {
			z.EncFallback(yy4826)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg5_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4828 := *v
	yyh4828, yyl4828 := z.DecSliceHelperStart()
	var yyc4828 bool
	if yyl4828 == 0 {
		if yyv4828 == nil {
			yyv4828 = []pkg5_runtime.RawExtension{}
			yyc4828 = true
		} else if len(yyv4828) != 0 {
			yyv4828 = yyv4828[:0]
			yyc4828 = true
		}
	} else if yyl4828 > 0 {
		var yyrr4828, yyrl4828 int
		var yyrt4828 bool
		if yyl4828 > cap(yyv4828) {

			yyrg4828 := len(yyv4828) > 0
			yyv24828 := yyv4828
			yyrl4828, yyrt4828 = z.DecInferLen(yyl4828, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4828 {
				if yyrl4828 <= cap(yyv4828) {
					yyv4828 = yyv4828[:yyrl4828]
				} else {
					yyv4828 = make([]pkg5_runtime.RawExtension, yyrl4828)
				}
			} else {
				yyv4828 = make([]pkg5_runtime.RawExtension, yyrl4828)
			}
			yyc4828 = true
			yyrr4828 = len(yyv4828)
			if yyrg4828 {
				copy(yyv4828, yyv24828)
			}
		} else if yyl4828 != len(yyv4828) {
			yyv4828 = yyv4828[:yyl4828]
			yyc4828 = true
		}
		yyj4828 := 0
		for ; yyj4828 < yyrr4828; yyj4828++ {
			yyh4828.ElemContainerState(yyj4828)
			if r.TryDecodeAsNil() {
				yyv4828[yyj4828] = pkg5_runtime.RawExtension{}
			} else {
				yyv4829 := &yyv4828[yyj4828]
				yym4830 := z.DecBinary()
				_ = yym4830
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4829) {
				} else if !yym4830 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4829)
				} else {
					z.DecFallback(yyv4829, false)
				}
			}

		}
		if yyrt4828 {
			for ; yyj4828 < yyl4828; yyj4828++ {
				yyv4828 = append(yyv4828, pkg5_runtime.RawExtension{})
				yyh4828.ElemContainerState(yyj4828)
				if r.TryDecodeAsNil() {
					yyv4828[yyj4828] = pkg5_runtime.RawExtension{}
				} else {
					yyv4831 := &yyv4828[yyj4828]
					yym4832 := z.DecBinary()
					_ = yym4832
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4831) {
					} else if !yym4832 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4831)
					} else {
						z.DecFallback(yyv4831, false)
					}
				}

			}
		}

	} else {
		yyj4828 := 0
		for ; !r.CheckBreak(); yyj4828++ {

			if yyj4828 >= len(yyv4828) {
				yyv4828 = append(yyv4828, pkg5_runtime.RawExtension{}) // var yyz4828 pkg5_runtime.RawExtension
				yyc4828 = true
			}
			yyh4828.ElemContainerState(yyj4828)
			if yyj4828 < len(yyv4828) {
				if r.TryDecodeAsNil() {
					yyv4828[yyj4828] = pkg5_runtime.RawExtension{}
				} else {
					yyv4833 := &yyv4828[yyj4828]
					yym4834 := z.DecBinary()
					_ = yym4834
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4833) {
					} else if !yym4834 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4833)
					} else {
						z.DecFallback(yyv4833, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4828 < len(yyv4828) {
			yyv4828 = yyv4828[:yyj4828]
			yyc4828 = true
		} else if yyj4828 == 0 && yyv4828 == nil {
			yyv4828 = []pkg5_runtime.RawExtension{}
			yyc4828 = true
		}
	}
	yyh4828.End()
	if yyc4828 {
		*v = yyv4828
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4835 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4836 := &yyv4835
		yy4836.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4837 := *v
	yyh4837, yyl4837 := z.DecSliceHelperStart()
	var yyc4837 bool
	if yyl4837 == 0 {
		if yyv4837 == nil {
			yyv4837 = []LimitRangeItem{}
			yyc4837 = true
		} else if len(yyv4837) != 0 {
			yyv4837 = yyv4837[:0]
			yyc4837 = true
		}
	} else if yyl4837 > 0 {
		var yyrr4837, yyrl4837 int
		var yyrt4837 bool
		if yyl4837 > cap(yyv4837) {

			yyrg4837 := len(yyv4837) > 0
			yyv24837 := yyv4837
			yyrl4837, yyrt4837 = z.DecInferLen(yyl4837, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4837 {
				if yyrl4837 <= cap(yyv4837) {
					yyv4837 = yyv4837[:yyrl4837]
				} else {
					yyv4837 = make([]LimitRangeItem, yyrl4837)
				}
			} else {
				yyv4837 = make([]LimitRangeItem, yyrl4837)
			}
			yyc4837 = true
			yyrr4837 = len(yyv4837)
			if yyrg4837 {
				copy(yyv4837, yyv24837)
			}
		} else if yyl4837 != len(yyv4837) {
			yyv4837 = yyv4837[:yyl4837]
			yyc4837 = true
		}
		yyj4837 := 0
		for ; yyj4837 < yyrr4837; yyj4837++ {
			yyh4837.ElemContainerState(yyj4837)
			if r.TryDecodeAsNil() {
				yyv4837[yyj4837] = LimitRangeItem{}
			} else {
				yyv4838 := &yyv4837[yyj4837]
				yyv4838.CodecDecodeSelf(d)
			}

		}
		if yyrt4837 {
			for ; yyj4837 < yyl4837; yyj4837++ {
				yyv4837 = append(yyv4837, LimitRangeItem{})
				yyh4837.ElemContainerState(yyj4837)
				if r.TryDecodeAsNil() {
					yyv4837[yyj4837] = LimitRangeItem{}
				} else {
					yyv4839 := &yyv4837[yyj4837]
					yyv4839.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4837 := 0
		for ; !r.CheckBreak(); yyj4837++ {

			if yyj4837 >= len(yyv4837) {
				yyv4837 = append(yyv4837, LimitRangeItem{}) // var yyz4837 LimitRangeItem
				yyc4837 = true
			}
			yyh4837.ElemContainerState(yyj4837)
			if yyj4837 < len(yyv4837) {
				if r.TryDecodeAsNil() {
					yyv4837[yyj4837] = LimitRangeItem{}
				} else {
					yyv4840 := &yyv4837[yyj4837]
					yyv4840.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4837 < len(yyv4837) {
			yyv4837 = yyv4837[:yyj4837]
			yyc4837 = true
		} else if yyj4837 == 0 && yyv4837 == nil {
			yyv4837 = []LimitRangeItem{}
			yyc4837 = true
		}
	}
	yyh4837.End()
	if yyc4837 {
		*v = yyv4837
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4841 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4842 := &yyv4841
		yy4842.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4843 := *v
	yyh4843, yyl4843 := z.DecSliceHelperStart()
	var yyc4843 bool
	if yyl4843 == 0 {
		if yyv4843 == nil {
			yyv4843 = []LimitRange{}
			yyc4843 = true
		} else if len(yyv4843) != 0 {
			yyv4843 = yyv4843[:0]
			yyc4843 = true
		}
	} else if yyl4843 > 0 {
		var yyrr4843, yyrl4843 int
		var yyrt4843 bool
		if yyl4843 > cap(yyv4843) {

			yyrg4843 := len(yyv4843) > 0
			yyv24843 := yyv4843
			yyrl4843, yyrt4843 = z.DecInferLen(yyl4843, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4843 {
				if yyrl4843 <= cap(yyv4843) {
					yyv4843 = yyv4843[:yyrl4843]
				} else {
					yyv4843 = make([]LimitRange, yyrl4843)
				}
			} else {
				yyv4843 = make([]LimitRange, yyrl4843)
			}
			yyc4843 = true
			yyrr4843 = len(yyv4843)
			if yyrg4843 {
				copy(yyv4843, yyv24843)
			}
		} else if yyl4843 != len(yyv4843) {
			yyv4843 = yyv4843[:yyl4843]
			yyc4843 = true
		}
		yyj4843 := 0
		for ; yyj4843 < yyrr4843; yyj4843++ {
			yyh4843.ElemContainerState(yyj4843)
			if r.TryDecodeAsNil() {
				yyv4843[yyj4843] = LimitRange{}
			} else {
				yyv4844 := &yyv4843[yyj4843]
				yyv4844.CodecDecodeSelf(d)
			}

		}
		if yyrt4843 {
			for ; yyj4843 < yyl4843; yyj4843++ {
				yyv4843 = append(yyv4843, LimitRange{})
				yyh4843.ElemContainerState(yyj4843)
				if r.TryDecodeAsNil() {
					yyv4843[yyj4843] = LimitRange{}
				} else {
					yyv4845 := &yyv4843[yyj4843]
					yyv4845.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4843 := 0
		for ; !r.CheckBreak(); yyj4843++ {

			if yyj4843 >= len(yyv4843) {
				yyv4843 = append(yyv4843, LimitRange{}) // var yyz4843 LimitRange
				yyc4843 = true
			}
			yyh4843.ElemContainerState(yyj4843)
			if yyj4843 < len(yyv4843) {
				if r.TryDecodeAsNil() {
					yyv4843[yyj4843] = LimitRange{}
				} else {
					yyv4846 := &yyv4843[yyj4843]
					yyv4846.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4843 < len(yyv4843) {
			yyv4843 = yyv4843[:yyj4843]
			yyc4843 = true
		} else if yyj4843 == 0 && yyv4843 == nil {
			yyv4843 = []LimitRange{}
			yyc4843 = true
		}
	}
	yyh4843.End()
	if yyc4843 {
		*v = yyv4843
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4847 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4847.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4848 := *v
	yyh4848, yyl4848 := z.DecSliceHelperStart()
	var yyc4848 bool
	if yyl4848 == 0 {
		if yyv4848 == nil {
			yyv4848 = []ResourceQuotaScope{}
			yyc4848 = true
		} else if len(yyv4848) != 0 {
			yyv4848 = yyv4848[:0]
			yyc4848 = true
		}
	} else if yyl4848 > 0 {
		var yyrr4848, yyrl4848 int
		var yyrt4848 bool
		if yyl4848 > cap(yyv4848) {

			yyrl4848, yyrt4848 = z.DecInferLen(yyl4848, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4848 {
				if yyrl4848 <= cap(yyv4848) {
					yyv4848 = yyv4848[:yyrl4848]
				} else {
					yyv4848 = make([]ResourceQuotaScope, yyrl4848)
				}
			} else {
				yyv4848 = make([]ResourceQuotaScope, yyrl4848)
			}
			yyc4848 = true
			yyrr4848 = len(yyv4848)
		} else if yyl4848 != len(yyv4848) {
			yyv4848 = yyv4848[:yyl4848]
			yyc4848 = true
		}
		yyj4848 := 0
		for ; yyj4848 < yyrr4848; yyj4848++ {
			yyh4848.ElemContainerState(yyj4848)
			if r.TryDecodeAsNil() {
				yyv4848[yyj4848] = ""
			} else {
				yyv4848[yyj4848] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4848 {
			for ; yyj4848 < yyl4848; yyj4848++ {
				yyv4848 = append(yyv4848, "")
				yyh4848.ElemContainerState(yyj4848)
				if r.TryDecodeAsNil() {
					yyv4848[yyj4848] = ""
				} else {
					yyv4848[yyj4848] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4848 := 0
		for ; !r.CheckBreak(); yyj4848++ {

			if yyj4848 >= len(yyv4848) {
				yyv4848 = append(yyv4848, "") // var yyz4848 ResourceQuotaScope
				yyc4848 = true
			}
			yyh4848.ElemContainerState(yyj4848)
			if yyj4848 < len(yyv4848) {
				if r.TryDecodeAsNil() {
					yyv4848[yyj4848] = ""
				} else {
					yyv4848[yyj4848] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4848 < len(yyv4848) {
			yyv4848 = yyv4848[:yyj4848]
			yyc4848 = true
		} else if yyj4848 == 0 && yyv4848 == nil {
			yyv4848 = []ResourceQuotaScope{}
			yyc4848 = true
		}
	}
	yyh4848.End()
	if yyc4848 {
		*v = yyv4848
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4852 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4853 := &yyv4852
		yy4853.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4854 := *v
	yyh4854, yyl4854 := z.DecSliceHelperStart()
	var yyc4854 bool
	if yyl4854 == 0 {
		if yyv4854 == nil {
			yyv4854 = []ResourceQuota{}
			yyc4854 = true
		} else if len(yyv4854) != 0 {
			yyv4854 = yyv4854[:0]
			yyc4854 = true
		}
	} else if yyl4854 > 0 {
		var yyrr4854, yyrl4854 int
		var yyrt4854 bool
		if yyl4854 > cap(yyv4854) {

			yyrg4854 := len(yyv4854) > 0
			yyv24854 := yyv4854
			yyrl4854, yyrt4854 = z.DecInferLen(yyl4854, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4854 {
				if yyrl4854 <= cap(yyv4854) {
					yyv4854 = yyv4854[:yyrl4854]
				} else {
					yyv4854 = make([]ResourceQuota, yyrl4854)
				}
			} else {
				yyv4854 = make([]ResourceQuota, yyrl4854)
			}
			yyc4854 = true
			yyrr4854 = len(yyv4854)
			if yyrg4854 {
				copy(yyv4854, yyv24854)
			}
		} else if yyl4854 != len(yyv4854) {
			yyv4854 = yyv4854[:yyl4854]
			yyc4854 = true
		}
		yyj4854 := 0
		for ; yyj4854 < yyrr4854; yyj4854++ {
			yyh4854.ElemContainerState(yyj4854)
			if r.TryDecodeAsNil() {
				yyv4854[yyj4854] = ResourceQuota{}
			} else {
				yyv4855 := &yyv4854[yyj4854]
				yyv4855.CodecDecodeSelf(d)
			}

		}
		if yyrt4854 {
			for ; yyj4854 < yyl4854; yyj4854++ {
				yyv4854 = append(yyv4854, ResourceQuota{})
				yyh4854.ElemContainerState(yyj4854)
				if r.TryDecodeAsNil() {
					yyv4854[yyj4854] = ResourceQuota{}
				} else {
					yyv4856 := &yyv4854[yyj4854]
					yyv4856.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4854 := 0
		for ; !r.CheckBreak(); yyj4854++ {

			if yyj4854 >= len(yyv4854) {
				yyv4854 = append(yyv4854, ResourceQuota{}) // var yyz4854 ResourceQuota
				yyc4854 = true
			}
			yyh4854.ElemContainerState(yyj4854)
			if yyj4854 < len(yyv4854) {
				if r.TryDecodeAsNil() {
					yyv4854[yyj4854] = ResourceQuota{}
				} else {
					yyv4857 := &yyv4854[yyj4854]
					yyv4857.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4854 < len(yyv4854) {
			yyv4854 = yyv4854[:yyj4854]
			yyc4854 = true
		} else if yyj4854 == 0 && yyv4854 == nil {
			yyv4854 = []ResourceQuota{}
			yyc4854 = true
		}
	}
	yyh4854.End()
	if yyc4854 {
		*v = yyv4854
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4858, yyv4858 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4859 := z.EncBinary()
		_ = yym4859
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4858))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4858 == nil {
			r.EncodeNil()
		} else {
			yym4860 := z.EncBinary()
			_ = yym4860
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4858))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4861 := *v
	yyl4861 := r.ReadMapStart()
	yybh4861 := z.DecBasicHandle()
	if yyv4861 == nil {
		yyrl4861, _ := z.DecInferLen(yyl4861, yybh4861.MaxInitLen, 40)
		yyv4861 = make(map[string][]uint8, yyrl4861)
		*v = yyv4861
	}
	var yymk4861 string
	var yymv4861 []uint8
	var yymg4861 bool
	if yybh4861.MapValueReset {
		yymg4861 = true
	}
	if yyl4861 > 0 {
		for yyj4861 := 0; yyj4861 < yyl4861; yyj4861++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4861 = ""
			} else {
				yymk4861 = string(r.DecodeString())
			}

			if yymg4861 {
				yymv4861 = yyv4861[yymk4861]
			} else {
				yymv4861 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4861 = nil
			} else {
				yyv4863 := &yymv4861
				yym4864 := z.DecBinary()
				_ = yym4864
				if false {
				} else {
					*yyv4863 = r.DecodeBytes(*(*[]byte)(yyv4863), false, false)
				}
			}

			if yyv4861 != nil {
				yyv4861[yymk4861] = yymv4861
			}
		}
	} else if yyl4861 < 0 {
		for yyj4861 := 0; !r.CheckBreak(); yyj4861++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4861 = ""
			} else {
				yymk4861 = string(r.DecodeString())
			}

			if yymg4861 {
				yymv4861 = yyv4861[yymk4861]
			} else {
				yymv4861 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4861 = nil
			} else {
				yyv4866 := &yymv4861
				yym4867 := z.DecBinary()
				_ = yym4867
				if false {
				} else {
					*yyv4866 = r.DecodeBytes(*(*[]byte)(yyv4866), false, false)
				}
			}

			if yyv4861 != nil {
				yyv4861[yymk4861] = yymv4861
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4868 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4869 := &yyv4868
		yy4869.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4870 := *v
	yyh4870, yyl4870 := z.DecSliceHelperStart()
	var yyc4870 bool
	if yyl4870 == 0 {
		if yyv4870 == nil {
			yyv4870 = []Secret{}
			yyc4870 = true
		} else if len(yyv4870) != 0 {
			yyv4870 = yyv4870[:0]
			yyc4870 = true
		}
	} else if yyl4870 > 0 {
		var yyrr4870, yyrl4870 int
		var yyrt4870 bool
		if yyl4870 > cap(yyv4870) {

			yyrg4870 := len(yyv4870) > 0
			yyv24870 := yyv4870
			yyrl4870, yyrt4870 = z.DecInferLen(yyl4870, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4870 {
				if yyrl4870 <= cap(yyv4870) {
					yyv4870 = yyv4870[:yyrl4870]
				} else {
					yyv4870 = make([]Secret, yyrl4870)
				}
			} else {
				yyv4870 = make([]Secret, yyrl4870)
			}
			yyc4870 = true
			yyrr4870 = len(yyv4870)
			if yyrg4870 {
				copy(yyv4870, yyv24870)
			}
		} else if yyl4870 != len(yyv4870) {
			yyv4870 = yyv4870[:yyl4870]
			yyc4870 = true
		}
		yyj4870 := 0
		for ; yyj4870 < yyrr4870; yyj4870++ {
			yyh4870.ElemContainerState(yyj4870)
			if r.TryDecodeAsNil() {
				yyv4870[yyj4870] = Secret{}
			} else {
				yyv4871 := &yyv4870[yyj4870]
				yyv4871.CodecDecodeSelf(d)
			}

		}
		if yyrt4870 {
			for ; yyj4870 < yyl4870; yyj4870++ {
				yyv4870 = append(yyv4870, Secret{})
				yyh4870.ElemContainerState(yyj4870)
				if r.TryDecodeAsNil() {
					yyv4870[yyj4870] = Secret{}
				} else {
					yyv4872 := &yyv4870[yyj4870]
					yyv4872.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4870 := 0
		for ; !r.CheckBreak(); yyj4870++ {

			if yyj4870 >= len(yyv4870) {
				yyv4870 = append(yyv4870, Secret{}) // var yyz4870 Secret
				yyc4870 = true
			}
			yyh4870.ElemContainerState(yyj4870)
			if yyj4870 < len(yyv4870) {
				if r.TryDecodeAsNil() {
					yyv4870[yyj4870] = Secret{}
				} else {
					yyv4873 := &yyv4870[yyj4870]
					yyv4873.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4870 < len(yyv4870) {
			yyv4870 = yyv4870[:yyj4870]
			yyc4870 = true
		} else if yyj4870 == 0 && yyv4870 == nil {
			yyv4870 = []Secret{}
			yyc4870 = true
		}
	}
	yyh4870.End()
	if yyc4870 {
		*v = yyv4870
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4874 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4875 := &yyv4874
		yy4875.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4876 := *v
	yyh4876, yyl4876 := z.DecSliceHelperStart()
	var yyc4876 bool
	if yyl4876 == 0 {
		if yyv4876 == nil {
			yyv4876 = []ConfigMap{}
			yyc4876 = true
		} else if len(yyv4876) != 0 {
			yyv4876 = yyv4876[:0]
			yyc4876 = true
		}
	} else if yyl4876 > 0 {
		var yyrr4876, yyrl4876 int
		var yyrt4876 bool
		if yyl4876 > cap(yyv4876) {

			yyrg4876 := len(yyv4876) > 0
			yyv24876 := yyv4876
			yyrl4876, yyrt4876 = z.DecInferLen(yyl4876, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4876 {
				if yyrl4876 <= cap(yyv4876) {
					yyv4876 = yyv4876[:yyrl4876]
				} else {
					yyv4876 = make([]ConfigMap, yyrl4876)
				}
			} else {
				yyv4876 = make([]ConfigMap, yyrl4876)
			}
			yyc4876 = true
			yyrr4876 = len(yyv4876)
			if yyrg4876 {
				copy(yyv4876, yyv24876)
			}
		} else if yyl4876 != len(yyv4876) {
			yyv4876 = yyv4876[:yyl4876]
			yyc4876 = true
		}
		yyj4876 := 0
		for ; yyj4876 < yyrr4876; yyj4876++ {
			yyh4876.ElemContainerState(yyj4876)
			if r.TryDecodeAsNil() {
				yyv4876[yyj4876] = ConfigMap{}
			} else {
				yyv4877 := &yyv4876[yyj4876]
				yyv4877.CodecDecodeSelf(d)
			}

		}
		if yyrt4876 {
			for ; yyj4876 < yyl4876; yyj4876++ {
				yyv4876 = append(yyv4876, ConfigMap{})
				yyh4876.ElemContainerState(yyj4876)
				if r.TryDecodeAsNil() {
					yyv4876[yyj4876] = ConfigMap{}
				} else {
					yyv4878 := &yyv4876[yyj4876]
					yyv4878.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4876 := 0
		for ; !r.CheckBreak(); yyj4876++ {

			if yyj4876 >= len(yyv4876) {
				yyv4876 = append(yyv4876, ConfigMap{}) // var yyz4876 ConfigMap
				yyc4876 = true
			}
			yyh4876.ElemContainerState(yyj4876)
			if yyj4876 < len(yyv4876) {
				if r.TryDecodeAsNil() {
					yyv4876[yyj4876] = ConfigMap{}
				} else {
					yyv4879 := &yyv4876[yyj4876]
					yyv4879.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4876 < len(yyv4876) {
			yyv4876 = yyv4876[:yyj4876]
			yyc4876 = true
		} else if yyj4876 == 0 && yyv4876 == nil {
			yyv4876 = []ConfigMap{}
			yyc4876 = true
		}
	}
	yyh4876.End()
	if yyc4876 {
		*v = yyv4876
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4880 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4881 := &yyv4880
		yy4881.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4882 := *v
	yyh4882, yyl4882 := z.DecSliceHelperStart()
	var yyc4882 bool
	if yyl4882 == 0 {
		if yyv4882 == nil {
			yyv4882 = []ComponentCondition{}
			yyc4882 = true
		} else if len(yyv4882) != 0 {
			yyv4882 = yyv4882[:0]
			yyc4882 = true
		}
	} else if yyl4882 > 0 {
		var yyrr4882, yyrl4882 int
		var yyrt4882 bool
		if yyl4882 > cap(yyv4882) {

			yyrg4882 := len(yyv4882) > 0
			yyv24882 := yyv4882
			yyrl4882, yyrt4882 = z.DecInferLen(yyl4882, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4882 {
				if yyrl4882 <= cap(yyv4882) {
					yyv4882 = yyv4882[:yyrl4882]
				} else {
					yyv4882 = make([]ComponentCondition, yyrl4882)
				}
			} else {
				yyv4882 = make([]ComponentCondition, yyrl4882)
			}
			yyc4882 = true
			yyrr4882 = len(yyv4882)
			if yyrg4882 {
				copy(yyv4882, yyv24882)
			}
		} else if yyl4882 != len(yyv4882) {
			yyv4882 = yyv4882[:yyl4882]
			yyc4882 = true
		}
		yyj4882 := 0
		for ; yyj4882 < yyrr4882; yyj4882++ {
			yyh4882.ElemContainerState(yyj4882)
			if r.TryDecodeAsNil() {
				yyv4882[yyj4882] = ComponentCondition{}
			} else {
				yyv4883 := &yyv4882[yyj4882]
				yyv4883.CodecDecodeSelf(d)
			}

		}
		if yyrt4882 {
			for ; yyj4882 < yyl4882; yyj4882++ {
				yyv4882 = append(yyv4882, ComponentCondition{})
				yyh4882.ElemContainerState(yyj4882)
				if r.TryDecodeAsNil() {
					yyv4882[yyj4882] = ComponentCondition{}
				} else {
					yyv4884 := &yyv4882[yyj4882]
					yyv4884.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4882 := 0
		for ; !r.CheckBreak(); yyj4882++ {

			if yyj4882 >= len(yyv4882) {
				yyv4882 = append(yyv4882, ComponentCondition{}) // var yyz4882 ComponentCondition
				yyc4882 = true
			}
			yyh4882.ElemContainerState(yyj4882)
			if yyj4882 < len(yyv4882) {
				if r.TryDecodeAsNil() {
					yyv4882[yyj4882] = ComponentCondition{}
				} else {
					yyv4885 := &yyv4882[yyj4882]
					yyv4885.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4882 < len(yyv4882) {
			yyv4882 = yyv4882[:yyj4882]
			yyc4882 = true
		} else if yyj4882 == 0 && yyv4882 == nil {
			yyv4882 = []ComponentCondition{}
			yyc4882 = true
		}
	}
	yyh4882.End()
	if yyc4882 {
		*v = yyv4882
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4886 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4887 := &yyv4886
		yy4887.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4888 := *v
	yyh4888, yyl4888 := z.DecSliceHelperStart()
	var yyc4888 bool
	if yyl4888 == 0 {
		if yyv4888 == nil {
			yyv4888 = []ComponentStatus{}
			yyc4888 = true
		} else if len(yyv4888) != 0 {
			yyv4888 = yyv4888[:0]
			yyc4888 = true
		}
	} else if yyl4888 > 0 {
		var yyrr4888, yyrl4888 int
		var yyrt4888 bool
		if yyl4888 > cap(yyv4888) {

			yyrg4888 := len(yyv4888) > 0
			yyv24888 := yyv4888
			yyrl4888, yyrt4888 = z.DecInferLen(yyl4888, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4888 {
				if yyrl4888 <= cap(yyv4888) {
					yyv4888 = yyv4888[:yyrl4888]
				} else {
					yyv4888 = make([]ComponentStatus, yyrl4888)
				}
			} else {
				yyv4888 = make([]ComponentStatus, yyrl4888)
			}
			yyc4888 = true
			yyrr4888 = len(yyv4888)
			if yyrg4888 {
				copy(yyv4888, yyv24888)
			}
		} else if yyl4888 != len(yyv4888) {
			yyv4888 = yyv4888[:yyl4888]
			yyc4888 = true
		}
		yyj4888 := 0
		for ; yyj4888 < yyrr4888; yyj4888++ {
			yyh4888.ElemContainerState(yyj4888)
			if r.TryDecodeAsNil() {
				yyv4888[yyj4888] = ComponentStatus{}
			} else {
				yyv4889 := &yyv4888[yyj4888]
				yyv4889.CodecDecodeSelf(d)
			}

		}
		if yyrt4888 {
			for ; yyj4888 < yyl4888; yyj4888++ {
				yyv4888 = append(yyv4888, ComponentStatus{})
				yyh4888.ElemContainerState(yyj4888)
				if r.TryDecodeAsNil() {
					yyv4888[yyj4888] = ComponentStatus{}
				} else {
					yyv4890 := &yyv4888[yyj4888]
					yyv4890.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4888 := 0
		for ; !r.CheckBreak(); yyj4888++ {

			if yyj4888 >= len(yyv4888) {
				yyv4888 = append(yyv4888, ComponentStatus{}) // var yyz4888 ComponentStatus
				yyc4888 = true
			}
			yyh4888.ElemContainerState(yyj4888)
			if yyj4888 < len(yyv4888) {
				if r.TryDecodeAsNil() {
					yyv4888[yyj4888] = ComponentStatus{}
				} else {
					yyv4891 := &yyv4888[yyj4888]
					yyv4891.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4888 < len(yyv4888) {
			yyv4888 = yyv4888[:yyj4888]
			yyc4888 = true
		} else if yyj4888 == 0 && yyv4888 == nil {
			yyv4888 = []ComponentStatus{}
			yyc4888 = true
		}
	}
	yyh4888.End()
	if yyc4888 {
		*v = yyv4888
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4892 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4893 := &yyv4892
		yy4893.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4894 := *v
	yyh4894, yyl4894 := z.DecSliceHelperStart()
	var yyc4894 bool
	if yyl4894 == 0 {
		if yyv4894 == nil {
			yyv4894 = []DownwardAPIVolumeFile{}
			yyc4894 = true
		} else if len(yyv4894) != 0 {
			yyv4894 = yyv4894[:0]
			yyc4894 = true
		}
	} else if yyl4894 > 0 {
		var yyrr4894, yyrl4894 int
		var yyrt4894 bool
		if yyl4894 > cap(yyv4894) {

			yyrg4894 := len(yyv4894) > 0
			yyv24894 := yyv4894
			yyrl4894, yyrt4894 = z.DecInferLen(yyl4894, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4894 {
				if yyrl4894 <= cap(yyv4894) {
					yyv4894 = yyv4894[:yyrl4894]
				} else {
					yyv4894 = make([]DownwardAPIVolumeFile, yyrl4894)
				}
			} else {
				yyv4894 = make([]DownwardAPIVolumeFile, yyrl4894)
			}
			yyc4894 = true
			yyrr4894 = len(yyv4894)
			if yyrg4894 {
				copy(yyv4894, yyv24894)
			}
		} else if yyl4894 != len(yyv4894) {
			yyv4894 = yyv4894[:yyl4894]
			yyc4894 = true
		}
		yyj4894 := 0
		for ; yyj4894 < yyrr4894; yyj4894++ {
			yyh4894.ElemContainerState(yyj4894)
			if r.TryDecodeAsNil() {
				yyv4894[yyj4894] = DownwardAPIVolumeFile{}
			} else {
				yyv4895 := &yyv4894[yyj4894]
				yyv4895.CodecDecodeSelf(d)
			}

		}
		if yyrt4894 {
			for ; yyj4894 < yyl4894; yyj4894++ {
				yyv4894 = append(yyv4894, DownwardAPIVolumeFile{})
				yyh4894.ElemContainerState(yyj4894)
				if r.TryDecodeAsNil() {
					yyv4894[yyj4894] = DownwardAPIVolumeFile{}
				} else {
					yyv4896 := &yyv4894[yyj4894]
					yyv4896.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4894 := 0
		for ; !r.CheckBreak(); yyj4894++ {

			if yyj4894 >= len(yyv4894) {
				yyv4894 = append(yyv4894, DownwardAPIVolumeFile{}) // var yyz4894 DownwardAPIVolumeFile
				yyc4894 = true
			}
			yyh4894.ElemContainerState(yyj4894)
			if yyj4894 < len(yyv4894) {
				if r.TryDecodeAsNil() {
					yyv4894[yyj4894] = DownwardAPIVolumeFile{}
				} else {
					yyv4897 := &yyv4894[yyj4894]
					yyv4897.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4894 < len(yyv4894) {
			yyv4894 = yyv4894[:yyj4894]
			yyc4894 = true
		} else if yyj4894 == 0 && yyv4894 == nil {
			yyv4894 = []DownwardAPIVolumeFile{}
			yyc4894 = true
		}
	}
	yyh4894.End()
	if yyc4894 {
		*v = yyv4894
	}
}
