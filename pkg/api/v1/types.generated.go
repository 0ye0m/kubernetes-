/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg5_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg5_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg4_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [14]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(14)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym49 := z.DecBinary()
	_ = yym49
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct50 := r.ContainerType()
		if yyct50 == codecSelferValueTypeMap1234 {
			yyl50 := r.ReadMapStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl50, d)
			}
		} else if yyct50 == codecSelferValueTypeArray1234 {
			yyl50 := r.ReadArrayStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl50, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys51Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys51Slc
	var yyhl51 bool = l >= 0
	for yyj51 := 0; ; yyj51++ {
		if yyhl51 {
			if yyj51 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys51Slc = r.DecodeBytes(yys51Slc, true, true)
		yys51 := string(yys51Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys51 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv59 := &x.CreationTimestamp
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv59) {
				} else if yym60 {
					z.DecBinaryUnmarshal(yyv59)
				} else if !yym60 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv59)
				} else {
					z.DecFallback(yyv59, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym62 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym62 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym64 := z.DecBinary()
				_ = yym64
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv65 := &x.Labels
				yym66 := z.DecBinary()
				_ = yym66
				if false {
				} else {
					z.F.DecMapStringStringX(yyv65, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv67 := &x.Annotations
				yym68 := z.DecBinary()
				_ = yym68
				if false {
				} else {
					z.F.DecMapStringStringX(yyv67, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv69 := &x.OwnerReferences
				yym70 := z.DecBinary()
				_ = yym70
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv69), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv71 := &x.Finalizers
				yym72 := z.DecBinary()
				_ = yym72
				if false {
				} else {
					z.F.DecSliceStringX(yyv71, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys51)
		} // end switch yys51
	} // end for yyj51
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj73 int
	var yyb73 bool
	var yyhl73 bool = l >= 0
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv81 := &x.CreationTimestamp
		yym82 := z.DecBinary()
		_ = yym82
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv81) {
		} else if yym82 {
			z.DecBinaryUnmarshal(yyv81)
		} else if !yym82 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv81)
		} else {
			z.DecFallback(yyv81, false)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym84 := z.DecBinary()
		_ = yym84
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym84 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym84 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv87 := &x.Labels
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else {
			z.F.DecMapStringStringX(yyv87, false, d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv89 := &x.Annotations
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			z.F.DecMapStringStringX(yyv89, false, d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv91 := &x.OwnerReferences
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv91), d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv93 := &x.Finalizers
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecSliceStringX(yyv93, false, d)
		}
	}
	for {
		yyj73++
		if yyhl73 {
			yyb73 = yyj73 > l
		} else {
			yyb73 = r.CheckBreak()
		}
		if yyb73 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj73-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym95 := z.EncBinary()
		_ = yym95
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep96 := !z.EncBinary()
			yy2arr96 := z.EncBasicHandle().StructToArray
			var yyq96 [22]bool
			_, _, _ = yysep96, yyq96, yy2arr96
			const yyr96 bool = false
			yyq96[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq96[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq96[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq96[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq96[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq96[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq96[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq96[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq96[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq96[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq96[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq96[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq96[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq96[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq96[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq96[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq96[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq96[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq96[19] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq96[20] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq96[21] = x.VolumeSource.AzureDisk != nil && x.AzureDisk != nil
			var yynn96 int
			if yyr96 || yy2arr96 {
				r.EncodeArrayStart(22)
			} else {
				yynn96 = 1
				for _, b := range yyq96 {
					if b {
						yynn96++
					}
				}
				r.EncodeMapStart(yynn96)
				yynn96 = 0
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym98 := z.EncBinary()
				_ = yym98
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym99 := z.EncBinary()
				_ = yym99
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn100 bool
			if x.VolumeSource.HostPath == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr96 || yy2arr96 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr96 || yy2arr96 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn102 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn102 = true
				goto LABEL102
			}
		LABEL102:
			if yyr96 || yy2arr96 {
				if yyn102 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn102 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn103 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn103 = true
				goto LABEL103
			}
		LABEL103:
			if yyr96 || yy2arr96 {
				if yyn103 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn103 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn104 bool
			if x.VolumeSource.GitRepo == nil {
				yyn104 = true
				goto LABEL104
			}
		LABEL104:
			if yyr96 || yy2arr96 {
				if yyn104 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn104 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn105 bool
			if x.VolumeSource.Secret == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr96 || yy2arr96 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.NFS == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr96 || yy2arr96 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.ISCSI == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr96 || yy2arr96 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr96 || yy2arr96 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr96 || yy2arr96 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.RBD == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr96 || yy2arr96 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr96 || yy2arr96 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.Cinder == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr96 || yy2arr96 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.CephFS == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr96 || yy2arr96 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.Flocker == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr96 || yy2arr96 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr96 || yy2arr96 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.FC == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr96 || yy2arr96 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.AzureFile == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr96 || yy2arr96 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr96 || yy2arr96 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[19] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr96 || yy2arr96 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[20] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.AzureDisk == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr96 || yy2arr96 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[21] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym121 := z.DecBinary()
	_ = yym121
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct122 := r.ContainerType()
		if yyct122 == codecSelferValueTypeMap1234 {
			yyl122 := r.ReadMapStart()
			if yyl122 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl122, d)
			}
		} else if yyct122 == codecSelferValueTypeArray1234 {
			yyl122 := r.ReadArrayStart()
			if yyl122 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl122, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys123Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys123Slc
	var yyhl123 bool = l >= 0
	for yyj123 := 0; ; yyj123++ {
		if yyhl123 {
			if yyj123 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys123Slc = r.DecodeBytes(yys123Slc, true, true)
		yys123 := string(yys123Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys123 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.VolumeSource.AzureDisk == nil {
				x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys123)
		} // end switch yys123
	} // end for yyj123
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj146 int
	var yyb146 bool
	var yyhl146 bool = l >= 0
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureDisk == nil {
		x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	for {
		yyj146++
		if yyhl146 {
			yyb146 = yyj146 > l
		} else {
			yyb146 = r.CheckBreak()
		}
		if yyb146 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj146-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym169 := z.EncBinary()
		_ = yym169
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep170 := !z.EncBinary()
			yy2arr170 := z.EncBasicHandle().StructToArray
			var yyq170 [21]bool
			_, _, _ = yysep170, yyq170, yy2arr170
			const yyr170 bool = false
			yyq170[0] = x.HostPath != nil
			yyq170[1] = x.EmptyDir != nil
			yyq170[2] = x.GCEPersistentDisk != nil
			yyq170[3] = x.AWSElasticBlockStore != nil
			yyq170[4] = x.GitRepo != nil
			yyq170[5] = x.Secret != nil
			yyq170[6] = x.NFS != nil
			yyq170[7] = x.ISCSI != nil
			yyq170[8] = x.Glusterfs != nil
			yyq170[9] = x.PersistentVolumeClaim != nil
			yyq170[10] = x.RBD != nil
			yyq170[11] = x.FlexVolume != nil
			yyq170[12] = x.Cinder != nil
			yyq170[13] = x.CephFS != nil
			yyq170[14] = x.Flocker != nil
			yyq170[15] = x.DownwardAPI != nil
			yyq170[16] = x.FC != nil
			yyq170[17] = x.AzureFile != nil
			yyq170[18] = x.ConfigMap != nil
			yyq170[19] = x.VsphereVolume != nil
			yyq170[20] = x.AzureDisk != nil
			var yynn170 int
			if yyr170 || yy2arr170 {
				r.EncodeArrayStart(21)
			} else {
				yynn170 = 0
				for _, b := range yyq170 {
					if b {
						yynn170++
					}
				}
				r.EncodeMapStart(yynn170)
				yynn170 = 0
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[18] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[19] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[20] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym192 := z.DecBinary()
	_ = yym192
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct193 := r.ContainerType()
		if yyct193 == codecSelferValueTypeMap1234 {
			yyl193 := r.ReadMapStart()
			if yyl193 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl193, d)
			}
		} else if yyct193 == codecSelferValueTypeArray1234 {
			yyl193 := r.ReadArrayStart()
			if yyl193 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl193, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys194Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys194Slc
	var yyhl194 bool = l >= 0
	for yyj194 := 0; ; yyj194++ {
		if yyhl194 {
			if yyj194 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys194Slc = r.DecodeBytes(yys194Slc, true, true)
		yys194 := string(yys194Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys194 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys194)
		} // end switch yys194
	} // end for yyj194
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj216 int
	var yyb216 bool
	var yyhl216 bool = l >= 0
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	for {
		yyj216++
		if yyhl216 {
			yyb216 = yyj216 > l
		} else {
			yyb216 = r.CheckBreak()
		}
		if yyb216 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj216-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym238 := z.EncBinary()
		_ = yym238
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep239 := !z.EncBinary()
			yy2arr239 := z.EncBasicHandle().StructToArray
			var yyq239 [2]bool
			_, _, _ = yysep239, yyq239, yy2arr239
			const yyr239 bool = false
			yyq239[1] = x.ReadOnly != false
			var yynn239 int
			if yyr239 || yy2arr239 {
				r.EncodeArrayStart(2)
			} else {
				yynn239 = 1
				for _, b := range yyq239 {
					if b {
						yynn239++
					}
				}
				r.EncodeMapStart(yynn239)
				yynn239 = 0
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym241 := z.EncBinary()
				_ = yym241
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym242 := z.EncBinary()
				_ = yym242
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[1] {
					yym244 := z.EncBinary()
					_ = yym244
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq239[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym245 := z.EncBinary()
					_ = yym245
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym246 := z.DecBinary()
	_ = yym246
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct247 := r.ContainerType()
		if yyct247 == codecSelferValueTypeMap1234 {
			yyl247 := r.ReadMapStart()
			if yyl247 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl247, d)
			}
		} else if yyct247 == codecSelferValueTypeArray1234 {
			yyl247 := r.ReadArrayStart()
			if yyl247 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl247, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys248Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys248Slc
	var yyhl248 bool = l >= 0
	for yyj248 := 0; ; yyj248++ {
		if yyhl248 {
			if yyj248 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys248Slc = r.DecodeBytes(yys248Slc, true, true)
		yys248 := string(yys248Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys248 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys248)
		} // end switch yys248
	} // end for yyj248
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj251 int
	var yyb251 bool
	var yyhl251 bool = l >= 0
	yyj251++
	if yyhl251 {
		yyb251 = yyj251 > l
	} else {
		yyb251 = r.CheckBreak()
	}
	if yyb251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj251++
	if yyhl251 {
		yyb251 = yyj251 > l
	} else {
		yyb251 = r.CheckBreak()
	}
	if yyb251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj251++
		if yyhl251 {
			yyb251 = yyj251 > l
		} else {
			yyb251 = r.CheckBreak()
		}
		if yyb251 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj251-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym254 := z.EncBinary()
		_ = yym254
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep255 := !z.EncBinary()
			yy2arr255 := z.EncBasicHandle().StructToArray
			var yyq255 [15]bool
			_, _, _ = yysep255, yyq255, yy2arr255
			const yyr255 bool = false
			yyq255[0] = x.GCEPersistentDisk != nil
			yyq255[1] = x.AWSElasticBlockStore != nil
			yyq255[2] = x.HostPath != nil
			yyq255[3] = x.Glusterfs != nil
			yyq255[4] = x.NFS != nil
			yyq255[5] = x.RBD != nil
			yyq255[6] = x.ISCSI != nil
			yyq255[7] = x.Cinder != nil
			yyq255[8] = x.CephFS != nil
			yyq255[9] = x.FC != nil
			yyq255[10] = x.Flocker != nil
			yyq255[11] = x.FlexVolume != nil
			yyq255[12] = x.AzureFile != nil
			yyq255[13] = x.VsphereVolume != nil
			yyq255[14] = x.AzureDisk != nil
			var yynn255 int
			if yyr255 || yy2arr255 {
				r.EncodeArrayStart(15)
			} else {
				yynn255 = 0
				for _, b := range yyq255 {
					if b {
						yynn255++
					}
				}
				r.EncodeMapStart(yynn255)
				yynn255 = 0
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[13] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq255[14] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr255 || yy2arr255 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym271 := z.DecBinary()
	_ = yym271
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct272 := r.ContainerType()
		if yyct272 == codecSelferValueTypeMap1234 {
			yyl272 := r.ReadMapStart()
			if yyl272 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl272, d)
			}
		} else if yyct272 == codecSelferValueTypeArray1234 {
			yyl272 := r.ReadArrayStart()
			if yyl272 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl272, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys273Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys273Slc
	var yyhl273 bool = l >= 0
	for yyj273 := 0; ; yyj273++ {
		if yyhl273 {
			if yyj273 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys273Slc = r.DecodeBytes(yys273Slc, true, true)
		yys273 := string(yys273Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys273 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys273)
		} // end switch yys273
	} // end for yyj273
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj289 int
	var yyb289 bool
	var yyhl289 bool = l >= 0
	yyj289++
	if yyhl289 {
		yyb289 = yyj289 > l
	} else {
		yyb289 = r.CheckBreak()
	}
	if yyb289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj289++
	if yyhl289 {
		yyb289 = yyj289 > l
	} else {
		yyb289 = r.CheckBreak()
	}
	if yyb289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj289++
	if yyhl289 {
		yyb289 = yyj289 > l
	} else {
		yyb289 = r.CheckBreak()
	}
	if yyb289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj289++
	if yyhl289 {
		yyb289 = yyj289 > l
	} else {
		yyb289 = r.CheckBreak()
	}
	if yyb289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj289++
	if yyhl289 {
		yyb289 = yyj289 > l
	} else {
		yyb289 = r.CheckBreak()
	}
	if yyb289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj289++
	if yyhl289 {
		yyb289 = yyj289 > l
	} else {
		yyb289 = r.CheckBreak()
	}
	if yyb289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj289++
	if yyhl289 {
		yyb289 = yyj289 > l
	} else {
		yyb289 = r.CheckBreak()
	}
	if yyb289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj289++
	if yyhl289 {
		yyb289 = yyj289 > l
	} else {
		yyb289 = r.CheckBreak()
	}
	if yyb289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj289++
	if yyhl289 {
		yyb289 = yyj289 > l
	} else {
		yyb289 = r.CheckBreak()
	}
	if yyb289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj289++
	if yyhl289 {
		yyb289 = yyj289 > l
	} else {
		yyb289 = r.CheckBreak()
	}
	if yyb289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj289++
	if yyhl289 {
		yyb289 = yyj289 > l
	} else {
		yyb289 = r.CheckBreak()
	}
	if yyb289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj289++
	if yyhl289 {
		yyb289 = yyj289 > l
	} else {
		yyb289 = r.CheckBreak()
	}
	if yyb289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj289++
	if yyhl289 {
		yyb289 = yyj289 > l
	} else {
		yyb289 = r.CheckBreak()
	}
	if yyb289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj289++
	if yyhl289 {
		yyb289 = yyj289 > l
	} else {
		yyb289 = r.CheckBreak()
	}
	if yyb289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj289++
	if yyhl289 {
		yyb289 = yyj289 > l
	} else {
		yyb289 = r.CheckBreak()
	}
	if yyb289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	for {
		yyj289++
		if yyhl289 {
			yyb289 = yyj289 > l
		} else {
			yyb289 = r.CheckBreak()
		}
		if yyb289 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj289-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym305 := z.EncBinary()
		_ = yym305
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep306 := !z.EncBinary()
			yy2arr306 := z.EncBasicHandle().StructToArray
			var yyq306 [5]bool
			_, _, _ = yysep306, yyq306, yy2arr306
			const yyr306 bool = false
			yyq306[0] = x.Kind != ""
			yyq306[1] = x.APIVersion != ""
			yyq306[2] = true
			yyq306[3] = true
			yyq306[4] = true
			var yynn306 int
			if yyr306 || yy2arr306 {
				r.EncodeArrayStart(5)
			} else {
				yynn306 = 0
				for _, b := range yyq306 {
					if b {
						yynn306++
					}
				}
				r.EncodeMapStart(yynn306)
				yynn306 = 0
			}
			if yyr306 || yy2arr306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq306[0] {
					yym308 := z.EncBinary()
					_ = yym308
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq306[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym309 := z.EncBinary()
					_ = yym309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr306 || yy2arr306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq306[1] {
					yym311 := z.EncBinary()
					_ = yym311
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq306[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym312 := z.EncBinary()
					_ = yym312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr306 || yy2arr306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq306[2] {
					yy314 := &x.ObjectMeta
					yy314.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq306[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy315 := &x.ObjectMeta
					yy315.CodecEncodeSelf(e)
				}
			}
			if yyr306 || yy2arr306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq306[3] {
					yy317 := &x.Spec
					yy317.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq306[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy318 := &x.Spec
					yy318.CodecEncodeSelf(e)
				}
			}
			if yyr306 || yy2arr306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq306[4] {
					yy320 := &x.Status
					yy320.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq306[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy321 := &x.Status
					yy321.CodecEncodeSelf(e)
				}
			}
			if yyr306 || yy2arr306 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym322 := z.DecBinary()
	_ = yym322
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct323 := r.ContainerType()
		if yyct323 == codecSelferValueTypeMap1234 {
			yyl323 := r.ReadMapStart()
			if yyl323 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl323, d)
			}
		} else if yyct323 == codecSelferValueTypeArray1234 {
			yyl323 := r.ReadArrayStart()
			if yyl323 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl323, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys324Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys324Slc
	var yyhl324 bool = l >= 0
	for yyj324 := 0; ; yyj324++ {
		if yyhl324 {
			if yyj324 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys324Slc = r.DecodeBytes(yys324Slc, true, true)
		yys324 := string(yys324Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys324 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv327 := &x.ObjectMeta
				yyv327.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv328 := &x.Spec
				yyv328.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv329 := &x.Status
				yyv329.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys324)
		} // end switch yys324
	} // end for yyj324
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj330 int
	var yyb330 bool
	var yyhl330 bool = l >= 0
	yyj330++
	if yyhl330 {
		yyb330 = yyj330 > l
	} else {
		yyb330 = r.CheckBreak()
	}
	if yyb330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj330++
	if yyhl330 {
		yyb330 = yyj330 > l
	} else {
		yyb330 = r.CheckBreak()
	}
	if yyb330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj330++
	if yyhl330 {
		yyb330 = yyj330 > l
	} else {
		yyb330 = r.CheckBreak()
	}
	if yyb330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv333 := &x.ObjectMeta
		yyv333.CodecDecodeSelf(d)
	}
	yyj330++
	if yyhl330 {
		yyb330 = yyj330 > l
	} else {
		yyb330 = r.CheckBreak()
	}
	if yyb330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv334 := &x.Spec
		yyv334.CodecDecodeSelf(d)
	}
	yyj330++
	if yyhl330 {
		yyb330 = yyj330 > l
	} else {
		yyb330 = r.CheckBreak()
	}
	if yyb330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv335 := &x.Status
		yyv335.CodecDecodeSelf(d)
	}
	for {
		yyj330++
		if yyhl330 {
			yyb330 = yyj330 > l
		} else {
			yyb330 = r.CheckBreak()
		}
		if yyb330 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj330-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym336 := z.EncBinary()
		_ = yym336
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep337 := !z.EncBinary()
			yy2arr337 := z.EncBasicHandle().StructToArray
			var yyq337 [19]bool
			_, _, _ = yysep337, yyq337, yy2arr337
			const yyr337 bool = false
			yyq337[0] = len(x.Capacity) != 0
			yyq337[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq337[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq337[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq337[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq337[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq337[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq337[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq337[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq337[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq337[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq337[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq337[12] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq337[13] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq337[14] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq337[15] = x.PersistentVolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq337[16] = len(x.AccessModes) != 0
			yyq337[17] = x.ClaimRef != nil
			yyq337[18] = x.PersistentVolumeReclaimPolicy != ""
			var yynn337 int
			if yyr337 || yy2arr337 {
				r.EncodeArrayStart(19)
			} else {
				yynn337 = 0
				for _, b := range yyq337 {
					if b {
						yynn337++
					}
				}
				r.EncodeMapStart(yynn337)
				yynn337 = 0
			}
			if yyr337 || yy2arr337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq337[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq337[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn339 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn339 = true
				goto LABEL339
			}
		LABEL339:
			if yyr337 || yy2arr337 {
				if yyn339 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn339 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn340 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn340 = true
				goto LABEL340
			}
		LABEL340:
			if yyr337 || yy2arr337 {
				if yyn340 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn340 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn341 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn341 = true
				goto LABEL341
			}
		LABEL341:
			if yyr337 || yy2arr337 {
				if yyn341 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn341 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn342 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn342 = true
				goto LABEL342
			}
		LABEL342:
			if yyr337 || yy2arr337 {
				if yyn342 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn342 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn343 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn343 = true
				goto LABEL343
			}
		LABEL343:
			if yyr337 || yy2arr337 {
				if yyn343 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn343 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn344 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn344 = true
				goto LABEL344
			}
		LABEL344:
			if yyr337 || yy2arr337 {
				if yyn344 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn344 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn345 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn345 = true
				goto LABEL345
			}
		LABEL345:
			if yyr337 || yy2arr337 {
				if yyn345 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn345 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn346 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn346 = true
				goto LABEL346
			}
		LABEL346:
			if yyr337 || yy2arr337 {
				if yyn346 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn346 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn347 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn347 = true
				goto LABEL347
			}
		LABEL347:
			if yyr337 || yy2arr337 {
				if yyn347 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn347 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn348 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn348 = true
				goto LABEL348
			}
		LABEL348:
			if yyr337 || yy2arr337 {
				if yyn348 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn348 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn349 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn349 = true
				goto LABEL349
			}
		LABEL349:
			if yyr337 || yy2arr337 {
				if yyn349 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn349 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn350 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn350 = true
				goto LABEL350
			}
		LABEL350:
			if yyr337 || yy2arr337 {
				if yyn350 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn350 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn351 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn351 = true
				goto LABEL351
			}
		LABEL351:
			if yyr337 || yy2arr337 {
				if yyn351 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[13] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn351 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn352 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn352 = true
				goto LABEL352
			}
		LABEL352:
			if yyr337 || yy2arr337 {
				if yyn352 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[14] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn352 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn353 bool
			if x.PersistentVolumeSource.AzureDisk == nil {
				yyn353 = true
				goto LABEL353
			}
		LABEL353:
			if yyr337 || yy2arr337 {
				if yyn353 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[15] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn353 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr337 || yy2arr337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq337[16] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym355 := z.EncBinary()
						_ = yym355
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq337[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym356 := z.EncBinary()
						_ = yym356
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr337 || yy2arr337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq337[17] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq337[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr337 || yy2arr337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq337[18] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq337[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr337 || yy2arr337 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym359 := z.DecBinary()
	_ = yym359
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct360 := r.ContainerType()
		if yyct360 == codecSelferValueTypeMap1234 {
			yyl360 := r.ReadMapStart()
			if yyl360 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl360, d)
			}
		} else if yyct360 == codecSelferValueTypeArray1234 {
			yyl360 := r.ReadArrayStart()
			if yyl360 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl360, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys361Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys361Slc
	var yyhl361 bool = l >= 0
	for yyj361 := 0; ; yyj361++ {
		if yyhl361 {
			if yyj361 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys361Slc = r.DecodeBytes(yys361Slc, true, true)
		yys361 := string(yys361Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys361 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv362 := &x.Capacity
				yyv362.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.PersistentVolumeSource.AzureDisk == nil {
				x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv378 := &x.AccessModes
				yym379 := z.DecBinary()
				_ = yym379
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv378), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys361)
		} // end switch yys361
	} // end for yyj361
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj382 int
	var yyb382 bool
	var yyhl382 bool = l >= 0
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv383 := &x.Capacity
		yyv383.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureDisk == nil {
		x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv399 := &x.AccessModes
		yym400 := z.DecBinary()
		_ = yym400
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv399), d)
		}
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj382++
		if yyhl382 {
			yyb382 = yyj382 > l
		} else {
			yyb382 = r.CheckBreak()
		}
		if yyb382 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj382-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym403 := z.EncBinary()
	_ = yym403
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym404 := z.DecBinary()
	_ = yym404
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym405 := z.EncBinary()
		_ = yym405
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep406 := !z.EncBinary()
			yy2arr406 := z.EncBasicHandle().StructToArray
			var yyq406 [3]bool
			_, _, _ = yysep406, yyq406, yy2arr406
			const yyr406 bool = false
			yyq406[0] = x.Phase != ""
			yyq406[1] = x.Message != ""
			yyq406[2] = x.Reason != ""
			var yynn406 int
			if yyr406 || yy2arr406 {
				r.EncodeArrayStart(3)
			} else {
				yynn406 = 0
				for _, b := range yyq406 {
					if b {
						yynn406++
					}
				}
				r.EncodeMapStart(yynn406)
				yynn406 = 0
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq406[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[1] {
					yym409 := z.EncBinary()
					_ = yym409
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq406[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym410 := z.EncBinary()
					_ = yym410
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[2] {
					yym412 := z.EncBinary()
					_ = yym412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq406[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym413 := z.EncBinary()
					_ = yym413
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym414 := z.DecBinary()
	_ = yym414
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct415 := r.ContainerType()
		if yyct415 == codecSelferValueTypeMap1234 {
			yyl415 := r.ReadMapStart()
			if yyl415 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl415, d)
			}
		} else if yyct415 == codecSelferValueTypeArray1234 {
			yyl415 := r.ReadArrayStart()
			if yyl415 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl415, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys416Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys416Slc
	var yyhl416 bool = l >= 0
	for yyj416 := 0; ; yyj416++ {
		if yyhl416 {
			if yyj416 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys416Slc = r.DecodeBytes(yys416Slc, true, true)
		yys416 := string(yys416Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys416 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys416)
		} // end switch yys416
	} // end for yyj416
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj420 int
	var yyb420 bool
	var yyhl420 bool = l >= 0
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj420++
		if yyhl420 {
			yyb420 = yyj420 > l
		} else {
			yyb420 = r.CheckBreak()
		}
		if yyb420 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj420-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym424 := z.EncBinary()
		_ = yym424
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep425 := !z.EncBinary()
			yy2arr425 := z.EncBasicHandle().StructToArray
			var yyq425 [4]bool
			_, _, _ = yysep425, yyq425, yy2arr425
			const yyr425 bool = false
			yyq425[0] = x.Kind != ""
			yyq425[1] = x.APIVersion != ""
			yyq425[2] = true
			var yynn425 int
			if yyr425 || yy2arr425 {
				r.EncodeArrayStart(4)
			} else {
				yynn425 = 1
				for _, b := range yyq425 {
					if b {
						yynn425++
					}
				}
				r.EncodeMapStart(yynn425)
				yynn425 = 0
			}
			if yyr425 || yy2arr425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq425[0] {
					yym427 := z.EncBinary()
					_ = yym427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq425[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym428 := z.EncBinary()
					_ = yym428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr425 || yy2arr425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq425[1] {
					yym430 := z.EncBinary()
					_ = yym430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq425[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr425 || yy2arr425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq425[2] {
					yy433 := &x.ListMeta
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else if z.HasExtensions() && z.EncExt(yy433) {
					} else {
						z.EncFallback(yy433)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq425[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy435 := &x.ListMeta
					yym436 := z.EncBinary()
					_ = yym436
					if false {
					} else if z.HasExtensions() && z.EncExt(yy435) {
					} else {
						z.EncFallback(yy435)
					}
				}
			}
			if yyr425 || yy2arr425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym438 := z.EncBinary()
					_ = yym438
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym439 := z.EncBinary()
					_ = yym439
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr425 || yy2arr425 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym440 := z.DecBinary()
	_ = yym440
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct441 := r.ContainerType()
		if yyct441 == codecSelferValueTypeMap1234 {
			yyl441 := r.ReadMapStart()
			if yyl441 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl441, d)
			}
		} else if yyct441 == codecSelferValueTypeArray1234 {
			yyl441 := r.ReadArrayStart()
			if yyl441 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl441, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys442Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys442Slc
	var yyhl442 bool = l >= 0
	for yyj442 := 0; ; yyj442++ {
		if yyhl442 {
			if yyj442 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys442Slc = r.DecodeBytes(yys442Slc, true, true)
		yys442 := string(yys442Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys442 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv445 := &x.ListMeta
				yym446 := z.DecBinary()
				_ = yym446
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv445) {
				} else {
					z.DecFallback(yyv445, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv447 := &x.Items
				yym448 := z.DecBinary()
				_ = yym448
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv447), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys442)
		} // end switch yys442
	} // end for yyj442
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj449 int
	var yyb449 bool
	var yyhl449 bool = l >= 0
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv452 := &x.ListMeta
		yym453 := z.DecBinary()
		_ = yym453
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv452) {
		} else {
			z.DecFallback(yyv452, false)
		}
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv454 := &x.Items
		yym455 := z.DecBinary()
		_ = yym455
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv454), d)
		}
	}
	for {
		yyj449++
		if yyhl449 {
			yyb449 = yyj449 > l
		} else {
			yyb449 = r.CheckBreak()
		}
		if yyb449 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj449-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym456 := z.EncBinary()
		_ = yym456
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep457 := !z.EncBinary()
			yy2arr457 := z.EncBasicHandle().StructToArray
			var yyq457 [5]bool
			_, _, _ = yysep457, yyq457, yy2arr457
			const yyr457 bool = false
			yyq457[0] = x.Kind != ""
			yyq457[1] = x.APIVersion != ""
			yyq457[2] = true
			yyq457[3] = true
			yyq457[4] = true
			var yynn457 int
			if yyr457 || yy2arr457 {
				r.EncodeArrayStart(5)
			} else {
				yynn457 = 0
				for _, b := range yyq457 {
					if b {
						yynn457++
					}
				}
				r.EncodeMapStart(yynn457)
				yynn457 = 0
			}
			if yyr457 || yy2arr457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq457[0] {
					yym459 := z.EncBinary()
					_ = yym459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq457[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr457 || yy2arr457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq457[1] {
					yym462 := z.EncBinary()
					_ = yym462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq457[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym463 := z.EncBinary()
					_ = yym463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr457 || yy2arr457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq457[2] {
					yy465 := &x.ObjectMeta
					yy465.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq457[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy466 := &x.ObjectMeta
					yy466.CodecEncodeSelf(e)
				}
			}
			if yyr457 || yy2arr457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq457[3] {
					yy468 := &x.Spec
					yy468.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq457[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy469 := &x.Spec
					yy469.CodecEncodeSelf(e)
				}
			}
			if yyr457 || yy2arr457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq457[4] {
					yy471 := &x.Status
					yy471.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq457[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy472 := &x.Status
					yy472.CodecEncodeSelf(e)
				}
			}
			if yyr457 || yy2arr457 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym473 := z.DecBinary()
	_ = yym473
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct474 := r.ContainerType()
		if yyct474 == codecSelferValueTypeMap1234 {
			yyl474 := r.ReadMapStart()
			if yyl474 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl474, d)
			}
		} else if yyct474 == codecSelferValueTypeArray1234 {
			yyl474 := r.ReadArrayStart()
			if yyl474 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl474, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys475Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys475Slc
	var yyhl475 bool = l >= 0
	for yyj475 := 0; ; yyj475++ {
		if yyhl475 {
			if yyj475 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys475Slc = r.DecodeBytes(yys475Slc, true, true)
		yys475 := string(yys475Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys475 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv478 := &x.ObjectMeta
				yyv478.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv479 := &x.Spec
				yyv479.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv480 := &x.Status
				yyv480.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys475)
		} // end switch yys475
	} // end for yyj475
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj481 int
	var yyb481 bool
	var yyhl481 bool = l >= 0
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv484 := &x.ObjectMeta
		yyv484.CodecDecodeSelf(d)
	}
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv485 := &x.Spec
		yyv485.CodecDecodeSelf(d)
	}
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv486 := &x.Status
		yyv486.CodecDecodeSelf(d)
	}
	for {
		yyj481++
		if yyhl481 {
			yyb481 = yyj481 > l
		} else {
			yyb481 = r.CheckBreak()
		}
		if yyb481 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj481-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym487 := z.EncBinary()
		_ = yym487
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep488 := !z.EncBinary()
			yy2arr488 := z.EncBasicHandle().StructToArray
			var yyq488 [4]bool
			_, _, _ = yysep488, yyq488, yy2arr488
			const yyr488 bool = false
			yyq488[0] = x.Kind != ""
			yyq488[1] = x.APIVersion != ""
			yyq488[2] = true
			var yynn488 int
			if yyr488 || yy2arr488 {
				r.EncodeArrayStart(4)
			} else {
				yynn488 = 1
				for _, b := range yyq488 {
					if b {
						yynn488++
					}
				}
				r.EncodeMapStart(yynn488)
				yynn488 = 0
			}
			if yyr488 || yy2arr488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq488[0] {
					yym490 := z.EncBinary()
					_ = yym490
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq488[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym491 := z.EncBinary()
					_ = yym491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr488 || yy2arr488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq488[1] {
					yym493 := z.EncBinary()
					_ = yym493
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq488[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym494 := z.EncBinary()
					_ = yym494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr488 || yy2arr488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq488[2] {
					yy496 := &x.ListMeta
					yym497 := z.EncBinary()
					_ = yym497
					if false {
					} else if z.HasExtensions() && z.EncExt(yy496) {
					} else {
						z.EncFallback(yy496)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq488[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy498 := &x.ListMeta
					yym499 := z.EncBinary()
					_ = yym499
					if false {
					} else if z.HasExtensions() && z.EncExt(yy498) {
					} else {
						z.EncFallback(yy498)
					}
				}
			}
			if yyr488 || yy2arr488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym501 := z.EncBinary()
					_ = yym501
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym502 := z.EncBinary()
					_ = yym502
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr488 || yy2arr488 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym503 := z.DecBinary()
	_ = yym503
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct504 := r.ContainerType()
		if yyct504 == codecSelferValueTypeMap1234 {
			yyl504 := r.ReadMapStart()
			if yyl504 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl504, d)
			}
		} else if yyct504 == codecSelferValueTypeArray1234 {
			yyl504 := r.ReadArrayStart()
			if yyl504 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl504, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys505Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys505Slc
	var yyhl505 bool = l >= 0
	for yyj505 := 0; ; yyj505++ {
		if yyhl505 {
			if yyj505 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys505Slc = r.DecodeBytes(yys505Slc, true, true)
		yys505 := string(yys505Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys505 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv508 := &x.ListMeta
				yym509 := z.DecBinary()
				_ = yym509
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv508) {
				} else {
					z.DecFallback(yyv508, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv510 := &x.Items
				yym511 := z.DecBinary()
				_ = yym511
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv510), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys505)
		} // end switch yys505
	} // end for yyj505
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj512 int
	var yyb512 bool
	var yyhl512 bool = l >= 0
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv515 := &x.ListMeta
		yym516 := z.DecBinary()
		_ = yym516
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv515) {
		} else {
			z.DecFallback(yyv515, false)
		}
	}
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv517 := &x.Items
		yym518 := z.DecBinary()
		_ = yym518
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv517), d)
		}
	}
	for {
		yyj512++
		if yyhl512 {
			yyb512 = yyj512 > l
		} else {
			yyb512 = r.CheckBreak()
		}
		if yyb512 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj512-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym519 := z.EncBinary()
		_ = yym519
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep520 := !z.EncBinary()
			yy2arr520 := z.EncBasicHandle().StructToArray
			var yyq520 [4]bool
			_, _, _ = yysep520, yyq520, yy2arr520
			const yyr520 bool = false
			yyq520[0] = len(x.AccessModes) != 0
			yyq520[1] = x.Selector != nil
			yyq520[2] = true
			yyq520[3] = x.VolumeName != ""
			var yynn520 int
			if yyr520 || yy2arr520 {
				r.EncodeArrayStart(4)
			} else {
				yynn520 = 0
				for _, b := range yyq520 {
					if b {
						yynn520++
					}
				}
				r.EncodeMapStart(yynn520)
				yynn520 = 0
			}
			if yyr520 || yy2arr520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq520[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym522 := z.EncBinary()
						_ = yym522
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq520[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym523 := z.EncBinary()
						_ = yym523
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr520 || yy2arr520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq520[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym525 := z.EncBinary()
						_ = yym525
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq520[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym526 := z.EncBinary()
						_ = yym526
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr520 || yy2arr520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq520[2] {
					yy528 := &x.Resources
					yy528.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq520[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy529 := &x.Resources
					yy529.CodecEncodeSelf(e)
				}
			}
			if yyr520 || yy2arr520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq520[3] {
					yym531 := z.EncBinary()
					_ = yym531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq520[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym532 := z.EncBinary()
					_ = yym532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr520 || yy2arr520 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym533 := z.DecBinary()
	_ = yym533
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct534 := r.ContainerType()
		if yyct534 == codecSelferValueTypeMap1234 {
			yyl534 := r.ReadMapStart()
			if yyl534 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl534, d)
			}
		} else if yyct534 == codecSelferValueTypeArray1234 {
			yyl534 := r.ReadArrayStart()
			if yyl534 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl534, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys535Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys535Slc
	var yyhl535 bool = l >= 0
	for yyj535 := 0; ; yyj535++ {
		if yyhl535 {
			if yyj535 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys535Slc = r.DecodeBytes(yys535Slc, true, true)
		yys535 := string(yys535Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys535 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv536 := &x.AccessModes
				yym537 := z.DecBinary()
				_ = yym537
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv536), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym539 := z.DecBinary()
				_ = yym539
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv540 := &x.Resources
				yyv540.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys535)
		} // end switch yys535
	} // end for yyj535
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj542 int
	var yyb542 bool
	var yyhl542 bool = l >= 0
	yyj542++
	if yyhl542 {
		yyb542 = yyj542 > l
	} else {
		yyb542 = r.CheckBreak()
	}
	if yyb542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv543 := &x.AccessModes
		yym544 := z.DecBinary()
		_ = yym544
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv543), d)
		}
	}
	yyj542++
	if yyhl542 {
		yyb542 = yyj542 > l
	} else {
		yyb542 = r.CheckBreak()
	}
	if yyb542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym546 := z.DecBinary()
		_ = yym546
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj542++
	if yyhl542 {
		yyb542 = yyj542 > l
	} else {
		yyb542 = r.CheckBreak()
	}
	if yyb542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv547 := &x.Resources
		yyv547.CodecDecodeSelf(d)
	}
	yyj542++
	if yyhl542 {
		yyb542 = yyj542 > l
	} else {
		yyb542 = r.CheckBreak()
	}
	if yyb542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj542++
		if yyhl542 {
			yyb542 = yyj542 > l
		} else {
			yyb542 = r.CheckBreak()
		}
		if yyb542 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj542-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym549 := z.EncBinary()
		_ = yym549
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep550 := !z.EncBinary()
			yy2arr550 := z.EncBasicHandle().StructToArray
			var yyq550 [3]bool
			_, _, _ = yysep550, yyq550, yy2arr550
			const yyr550 bool = false
			yyq550[0] = x.Phase != ""
			yyq550[1] = len(x.AccessModes) != 0
			yyq550[2] = len(x.Capacity) != 0
			var yynn550 int
			if yyr550 || yy2arr550 {
				r.EncodeArrayStart(3)
			} else {
				yynn550 = 0
				for _, b := range yyq550 {
					if b {
						yynn550++
					}
				}
				r.EncodeMapStart(yynn550)
				yynn550 = 0
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym553 := z.EncBinary()
						_ = yym553
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq550[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym554 := z.EncBinary()
						_ = yym554
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq550[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym556 := z.DecBinary()
	_ = yym556
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct557 := r.ContainerType()
		if yyct557 == codecSelferValueTypeMap1234 {
			yyl557 := r.ReadMapStart()
			if yyl557 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl557, d)
			}
		} else if yyct557 == codecSelferValueTypeArray1234 {
			yyl557 := r.ReadArrayStart()
			if yyl557 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl557, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys558Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys558Slc
	var yyhl558 bool = l >= 0
	for yyj558 := 0; ; yyj558++ {
		if yyhl558 {
			if yyj558 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys558Slc = r.DecodeBytes(yys558Slc, true, true)
		yys558 := string(yys558Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys558 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv560 := &x.AccessModes
				yym561 := z.DecBinary()
				_ = yym561
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv560), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv562 := &x.Capacity
				yyv562.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys558)
		} // end switch yys558
	} // end for yyj558
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj563 int
	var yyb563 bool
	var yyhl563 bool = l >= 0
	yyj563++
	if yyhl563 {
		yyb563 = yyj563 > l
	} else {
		yyb563 = r.CheckBreak()
	}
	if yyb563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj563++
	if yyhl563 {
		yyb563 = yyj563 > l
	} else {
		yyb563 = r.CheckBreak()
	}
	if yyb563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv565 := &x.AccessModes
		yym566 := z.DecBinary()
		_ = yym566
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv565), d)
		}
	}
	yyj563++
	if yyhl563 {
		yyb563 = yyj563 > l
	} else {
		yyb563 = r.CheckBreak()
	}
	if yyb563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv567 := &x.Capacity
		yyv567.CodecDecodeSelf(d)
	}
	for {
		yyj563++
		if yyhl563 {
			yyb563 = yyj563 > l
		} else {
			yyb563 = r.CheckBreak()
		}
		if yyb563 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj563-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym568 := z.EncBinary()
	_ = yym568
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym569 := z.DecBinary()
	_ = yym569
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym570 := z.EncBinary()
	_ = yym570
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym571 := z.DecBinary()
	_ = yym571
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym572 := z.EncBinary()
	_ = yym572
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym573 := z.DecBinary()
	_ = yym573
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym574 := z.EncBinary()
		_ = yym574
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep575 := !z.EncBinary()
			yy2arr575 := z.EncBasicHandle().StructToArray
			var yyq575 [1]bool
			_, _, _ = yysep575, yyq575, yy2arr575
			const yyr575 bool = false
			var yynn575 int
			if yyr575 || yy2arr575 {
				r.EncodeArrayStart(1)
			} else {
				yynn575 = 1
				for _, b := range yyq575 {
					if b {
						yynn575++
					}
				}
				r.EncodeMapStart(yynn575)
				yynn575 = 0
			}
			if yyr575 || yy2arr575 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym577 := z.EncBinary()
				_ = yym577
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym578 := z.EncBinary()
				_ = yym578
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr575 || yy2arr575 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym579 := z.DecBinary()
	_ = yym579
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct580 := r.ContainerType()
		if yyct580 == codecSelferValueTypeMap1234 {
			yyl580 := r.ReadMapStart()
			if yyl580 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl580, d)
			}
		} else if yyct580 == codecSelferValueTypeArray1234 {
			yyl580 := r.ReadArrayStart()
			if yyl580 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl580, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys581Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys581Slc
	var yyhl581 bool = l >= 0
	for yyj581 := 0; ; yyj581++ {
		if yyhl581 {
			if yyj581 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys581Slc = r.DecodeBytes(yys581Slc, true, true)
		yys581 := string(yys581Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys581 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys581)
		} // end switch yys581
	} // end for yyj581
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj583 int
	var yyb583 bool
	var yyhl583 bool = l >= 0
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj583++
		if yyhl583 {
			yyb583 = yyj583 > l
		} else {
			yyb583 = r.CheckBreak()
		}
		if yyb583 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj583-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym585 := z.EncBinary()
		_ = yym585
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep586 := !z.EncBinary()
			yy2arr586 := z.EncBasicHandle().StructToArray
			var yyq586 [1]bool
			_, _, _ = yysep586, yyq586, yy2arr586
			const yyr586 bool = false
			yyq586[0] = x.Medium != ""
			var yynn586 int
			if yyr586 || yy2arr586 {
				r.EncodeArrayStart(1)
			} else {
				yynn586 = 0
				for _, b := range yyq586 {
					if b {
						yynn586++
					}
				}
				r.EncodeMapStart(yynn586)
				yynn586 = 0
			}
			if yyr586 || yy2arr586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq586[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq586[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr586 || yy2arr586 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym588 := z.DecBinary()
	_ = yym588
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct589 := r.ContainerType()
		if yyct589 == codecSelferValueTypeMap1234 {
			yyl589 := r.ReadMapStart()
			if yyl589 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl589, d)
			}
		} else if yyct589 == codecSelferValueTypeArray1234 {
			yyl589 := r.ReadArrayStart()
			if yyl589 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl589, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys590Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys590Slc
	var yyhl590 bool = l >= 0
	for yyj590 := 0; ; yyj590++ {
		if yyhl590 {
			if yyj590 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys590Slc = r.DecodeBytes(yys590Slc, true, true)
		yys590 := string(yys590Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys590 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys590)
		} // end switch yys590
	} // end for yyj590
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj592 int
	var yyb592 bool
	var yyhl592 bool = l >= 0
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj592++
		if yyhl592 {
			yyb592 = yyj592 > l
		} else {
			yyb592 = r.CheckBreak()
		}
		if yyb592 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj592-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym594 := z.EncBinary()
		_ = yym594
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep595 := !z.EncBinary()
			yy2arr595 := z.EncBasicHandle().StructToArray
			var yyq595 [3]bool
			_, _, _ = yysep595, yyq595, yy2arr595
			const yyr595 bool = false
			yyq595[2] = x.ReadOnly != false
			var yynn595 int
			if yyr595 || yy2arr595 {
				r.EncodeArrayStart(3)
			} else {
				yynn595 = 2
				for _, b := range yyq595 {
					if b {
						yynn595++
					}
				}
				r.EncodeMapStart(yynn595)
				yynn595 = 0
			}
			if yyr595 || yy2arr595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym597 := z.EncBinary()
				_ = yym597
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym598 := z.EncBinary()
				_ = yym598
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr595 || yy2arr595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym600 := z.EncBinary()
				_ = yym600
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym601 := z.EncBinary()
				_ = yym601
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr595 || yy2arr595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq595[2] {
					yym603 := z.EncBinary()
					_ = yym603
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq595[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym604 := z.EncBinary()
					_ = yym604
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr595 || yy2arr595 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym605 := z.DecBinary()
	_ = yym605
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct606 := r.ContainerType()
		if yyct606 == codecSelferValueTypeMap1234 {
			yyl606 := r.ReadMapStart()
			if yyl606 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl606, d)
			}
		} else if yyct606 == codecSelferValueTypeArray1234 {
			yyl606 := r.ReadArrayStart()
			if yyl606 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl606, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys607Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys607Slc
	var yyhl607 bool = l >= 0
	for yyj607 := 0; ; yyj607++ {
		if yyhl607 {
			if yyj607 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys607Slc = r.DecodeBytes(yys607Slc, true, true)
		yys607 := string(yys607Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys607 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys607)
		} // end switch yys607
	} // end for yyj607
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj611 int
	var yyb611 bool
	var yyhl611 bool = l >= 0
	yyj611++
	if yyhl611 {
		yyb611 = yyj611 > l
	} else {
		yyb611 = r.CheckBreak()
	}
	if yyb611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj611++
	if yyhl611 {
		yyb611 = yyj611 > l
	} else {
		yyb611 = r.CheckBreak()
	}
	if yyb611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj611++
	if yyhl611 {
		yyb611 = yyj611 > l
	} else {
		yyb611 = r.CheckBreak()
	}
	if yyb611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj611++
		if yyhl611 {
			yyb611 = yyj611 > l
		} else {
			yyb611 = r.CheckBreak()
		}
		if yyb611 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj611-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym615 := z.EncBinary()
		_ = yym615
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep616 := !z.EncBinary()
			yy2arr616 := z.EncBasicHandle().StructToArray
			var yyq616 [8]bool
			_, _, _ = yysep616, yyq616, yy2arr616
			const yyr616 bool = false
			yyq616[2] = x.FSType != ""
			yyq616[3] = x.RBDPool != ""
			yyq616[4] = x.RadosUser != ""
			yyq616[5] = x.Keyring != ""
			yyq616[6] = x.SecretRef != nil
			yyq616[7] = x.ReadOnly != false
			var yynn616 int
			if yyr616 || yy2arr616 {
				r.EncodeArrayStart(8)
			} else {
				yynn616 = 2
				for _, b := range yyq616 {
					if b {
						yynn616++
					}
				}
				r.EncodeMapStart(yynn616)
				yynn616 = 0
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym621 := z.EncBinary()
				_ = yym621
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym622 := z.EncBinary()
				_ = yym622
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq616[2] {
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq616[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq616[3] {
					yym627 := z.EncBinary()
					_ = yym627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq616[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym628 := z.EncBinary()
					_ = yym628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq616[4] {
					yym630 := z.EncBinary()
					_ = yym630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq616[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym631 := z.EncBinary()
					_ = yym631
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq616[5] {
					yym633 := z.EncBinary()
					_ = yym633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq616[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym634 := z.EncBinary()
					_ = yym634
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq616[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq616[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq616[7] {
					yym637 := z.EncBinary()
					_ = yym637
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq616[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym638 := z.EncBinary()
					_ = yym638
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym639 := z.DecBinary()
	_ = yym639
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct640 := r.ContainerType()
		if yyct640 == codecSelferValueTypeMap1234 {
			yyl640 := r.ReadMapStart()
			if yyl640 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl640, d)
			}
		} else if yyct640 == codecSelferValueTypeArray1234 {
			yyl640 := r.ReadArrayStart()
			if yyl640 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl640, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys641Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys641Slc
	var yyhl641 bool = l >= 0
	for yyj641 := 0; ; yyj641++ {
		if yyhl641 {
			if yyj641 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys641Slc = r.DecodeBytes(yys641Slc, true, true)
		yys641 := string(yys641Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys641 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv642 := &x.CephMonitors
				yym643 := z.DecBinary()
				_ = yym643
				if false {
				} else {
					z.F.DecSliceStringX(yyv642, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys641)
		} // end switch yys641
	} // end for yyj641
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj651 int
	var yyb651 bool
	var yyhl651 bool = l >= 0
	yyj651++
	if yyhl651 {
		yyb651 = yyj651 > l
	} else {
		yyb651 = r.CheckBreak()
	}
	if yyb651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv652 := &x.CephMonitors
		yym653 := z.DecBinary()
		_ = yym653
		if false {
		} else {
			z.F.DecSliceStringX(yyv652, false, d)
		}
	}
	yyj651++
	if yyhl651 {
		yyb651 = yyj651 > l
	} else {
		yyb651 = r.CheckBreak()
	}
	if yyb651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj651++
	if yyhl651 {
		yyb651 = yyj651 > l
	} else {
		yyb651 = r.CheckBreak()
	}
	if yyb651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj651++
	if yyhl651 {
		yyb651 = yyj651 > l
	} else {
		yyb651 = r.CheckBreak()
	}
	if yyb651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj651++
	if yyhl651 {
		yyb651 = yyj651 > l
	} else {
		yyb651 = r.CheckBreak()
	}
	if yyb651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj651++
	if yyhl651 {
		yyb651 = yyj651 > l
	} else {
		yyb651 = r.CheckBreak()
	}
	if yyb651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj651++
	if yyhl651 {
		yyb651 = yyj651 > l
	} else {
		yyb651 = r.CheckBreak()
	}
	if yyb651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj651++
	if yyhl651 {
		yyb651 = yyj651 > l
	} else {
		yyb651 = r.CheckBreak()
	}
	if yyb651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj651++
		if yyhl651 {
			yyb651 = yyj651 > l
		} else {
			yyb651 = r.CheckBreak()
		}
		if yyb651 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj651-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym661 := z.EncBinary()
		_ = yym661
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep662 := !z.EncBinary()
			yy2arr662 := z.EncBasicHandle().StructToArray
			var yyq662 [3]bool
			_, _, _ = yysep662, yyq662, yy2arr662
			const yyr662 bool = false
			yyq662[1] = x.FSType != ""
			yyq662[2] = x.ReadOnly != false
			var yynn662 int
			if yyr662 || yy2arr662 {
				r.EncodeArrayStart(3)
			} else {
				yynn662 = 1
				for _, b := range yyq662 {
					if b {
						yynn662++
					}
				}
				r.EncodeMapStart(yynn662)
				yynn662 = 0
			}
			if yyr662 || yy2arr662 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym664 := z.EncBinary()
				_ = yym664
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym665 := z.EncBinary()
				_ = yym665
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr662 || yy2arr662 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq662[1] {
					yym667 := z.EncBinary()
					_ = yym667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq662[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym668 := z.EncBinary()
					_ = yym668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr662 || yy2arr662 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq662[2] {
					yym670 := z.EncBinary()
					_ = yym670
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq662[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym671 := z.EncBinary()
					_ = yym671
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr662 || yy2arr662 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym672 := z.DecBinary()
	_ = yym672
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct673 := r.ContainerType()
		if yyct673 == codecSelferValueTypeMap1234 {
			yyl673 := r.ReadMapStart()
			if yyl673 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl673, d)
			}
		} else if yyct673 == codecSelferValueTypeArray1234 {
			yyl673 := r.ReadArrayStart()
			if yyl673 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl673, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys674Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys674Slc
	var yyhl674 bool = l >= 0
	for yyj674 := 0; ; yyj674++ {
		if yyhl674 {
			if yyj674 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys674Slc = r.DecodeBytes(yys674Slc, true, true)
		yys674 := string(yys674Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys674 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys674)
		} // end switch yys674
	} // end for yyj674
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj678 int
	var yyb678 bool
	var yyhl678 bool = l >= 0
	yyj678++
	if yyhl678 {
		yyb678 = yyj678 > l
	} else {
		yyb678 = r.CheckBreak()
	}
	if yyb678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj678++
	if yyhl678 {
		yyb678 = yyj678 > l
	} else {
		yyb678 = r.CheckBreak()
	}
	if yyb678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj678++
	if yyhl678 {
		yyb678 = yyj678 > l
	} else {
		yyb678 = r.CheckBreak()
	}
	if yyb678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj678++
		if yyhl678 {
			yyb678 = yyj678 > l
		} else {
			yyb678 = r.CheckBreak()
		}
		if yyb678 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj678-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym682 := z.EncBinary()
		_ = yym682
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep683 := !z.EncBinary()
			yy2arr683 := z.EncBasicHandle().StructToArray
			var yyq683 [6]bool
			_, _, _ = yysep683, yyq683, yy2arr683
			const yyr683 bool = false
			yyq683[1] = x.Path != ""
			yyq683[2] = x.User != ""
			yyq683[3] = x.SecretFile != ""
			yyq683[4] = x.SecretRef != nil
			yyq683[5] = x.ReadOnly != false
			var yynn683 int
			if yyr683 || yy2arr683 {
				r.EncodeArrayStart(6)
			} else {
				yynn683 = 1
				for _, b := range yyq683 {
					if b {
						yynn683++
					}
				}
				r.EncodeMapStart(yynn683)
				yynn683 = 0
			}
			if yyr683 || yy2arr683 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym685 := z.EncBinary()
					_ = yym685
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym686 := z.EncBinary()
					_ = yym686
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr683 || yy2arr683 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq683[1] {
					yym688 := z.EncBinary()
					_ = yym688
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq683[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym689 := z.EncBinary()
					_ = yym689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr683 || yy2arr683 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq683[2] {
					yym691 := z.EncBinary()
					_ = yym691
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq683[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym692 := z.EncBinary()
					_ = yym692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr683 || yy2arr683 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq683[3] {
					yym694 := z.EncBinary()
					_ = yym694
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq683[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym695 := z.EncBinary()
					_ = yym695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr683 || yy2arr683 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq683[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq683[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr683 || yy2arr683 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq683[5] {
					yym698 := z.EncBinary()
					_ = yym698
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq683[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym699 := z.EncBinary()
					_ = yym699
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr683 || yy2arr683 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym700 := z.DecBinary()
	_ = yym700
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct701 := r.ContainerType()
		if yyct701 == codecSelferValueTypeMap1234 {
			yyl701 := r.ReadMapStart()
			if yyl701 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl701, d)
			}
		} else if yyct701 == codecSelferValueTypeArray1234 {
			yyl701 := r.ReadArrayStart()
			if yyl701 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl701, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys702Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys702Slc
	var yyhl702 bool = l >= 0
	for yyj702 := 0; ; yyj702++ {
		if yyhl702 {
			if yyj702 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys702Slc = r.DecodeBytes(yys702Slc, true, true)
		yys702 := string(yys702Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys702 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv703 := &x.Monitors
				yym704 := z.DecBinary()
				_ = yym704
				if false {
				} else {
					z.F.DecSliceStringX(yyv703, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys702)
		} // end switch yys702
	} // end for yyj702
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj710 int
	var yyb710 bool
	var yyhl710 bool = l >= 0
	yyj710++
	if yyhl710 {
		yyb710 = yyj710 > l
	} else {
		yyb710 = r.CheckBreak()
	}
	if yyb710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv711 := &x.Monitors
		yym712 := z.DecBinary()
		_ = yym712
		if false {
		} else {
			z.F.DecSliceStringX(yyv711, false, d)
		}
	}
	yyj710++
	if yyhl710 {
		yyb710 = yyj710 > l
	} else {
		yyb710 = r.CheckBreak()
	}
	if yyb710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj710++
	if yyhl710 {
		yyb710 = yyj710 > l
	} else {
		yyb710 = r.CheckBreak()
	}
	if yyb710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj710++
	if yyhl710 {
		yyb710 = yyj710 > l
	} else {
		yyb710 = r.CheckBreak()
	}
	if yyb710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj710++
	if yyhl710 {
		yyb710 = yyj710 > l
	} else {
		yyb710 = r.CheckBreak()
	}
	if yyb710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj710++
	if yyhl710 {
		yyb710 = yyj710 > l
	} else {
		yyb710 = r.CheckBreak()
	}
	if yyb710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj710++
		if yyhl710 {
			yyb710 = yyj710 > l
		} else {
			yyb710 = r.CheckBreak()
		}
		if yyb710 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj710-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym718 := z.EncBinary()
		_ = yym718
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep719 := !z.EncBinary()
			yy2arr719 := z.EncBasicHandle().StructToArray
			var yyq719 [1]bool
			_, _, _ = yysep719, yyq719, yy2arr719
			const yyr719 bool = false
			var yynn719 int
			if yyr719 || yy2arr719 {
				r.EncodeArrayStart(1)
			} else {
				yynn719 = 1
				for _, b := range yyq719 {
					if b {
						yynn719++
					}
				}
				r.EncodeMapStart(yynn719)
				yynn719 = 0
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym721 := z.EncBinary()
				_ = yym721
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym722 := z.EncBinary()
				_ = yym722
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym723 := z.DecBinary()
	_ = yym723
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct724 := r.ContainerType()
		if yyct724 == codecSelferValueTypeMap1234 {
			yyl724 := r.ReadMapStart()
			if yyl724 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl724, d)
			}
		} else if yyct724 == codecSelferValueTypeArray1234 {
			yyl724 := r.ReadArrayStart()
			if yyl724 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl724, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys725Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys725Slc
	var yyhl725 bool = l >= 0
	for yyj725 := 0; ; yyj725++ {
		if yyhl725 {
			if yyj725 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys725Slc = r.DecodeBytes(yys725Slc, true, true)
		yys725 := string(yys725Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys725 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys725)
		} // end switch yys725
	} // end for yyj725
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj727 int
	var yyb727 bool
	var yyhl727 bool = l >= 0
	yyj727++
	if yyhl727 {
		yyb727 = yyj727 > l
	} else {
		yyb727 = r.CheckBreak()
	}
	if yyb727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj727++
		if yyhl727 {
			yyb727 = yyj727 > l
		} else {
			yyb727 = r.CheckBreak()
		}
		if yyb727 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj727-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym729 := z.EncBinary()
	_ = yym729
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym730 := z.DecBinary()
	_ = yym730
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym731 := z.EncBinary()
	_ = yym731
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym732 := z.DecBinary()
	_ = yym732
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym733 := z.EncBinary()
		_ = yym733
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep734 := !z.EncBinary()
			yy2arr734 := z.EncBasicHandle().StructToArray
			var yyq734 [4]bool
			_, _, _ = yysep734, yyq734, yy2arr734
			const yyr734 bool = false
			yyq734[1] = x.FSType != ""
			yyq734[2] = x.Partition != 0
			yyq734[3] = x.ReadOnly != false
			var yynn734 int
			if yyr734 || yy2arr734 {
				r.EncodeArrayStart(4)
			} else {
				yynn734 = 1
				for _, b := range yyq734 {
					if b {
						yynn734++
					}
				}
				r.EncodeMapStart(yynn734)
				yynn734 = 0
			}
			if yyr734 || yy2arr734 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym736 := z.EncBinary()
				_ = yym736
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym737 := z.EncBinary()
				_ = yym737
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr734 || yy2arr734 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq734[1] {
					yym739 := z.EncBinary()
					_ = yym739
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq734[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym740 := z.EncBinary()
					_ = yym740
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr734 || yy2arr734 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq734[2] {
					yym742 := z.EncBinary()
					_ = yym742
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq734[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym743 := z.EncBinary()
					_ = yym743
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr734 || yy2arr734 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq734[3] {
					yym745 := z.EncBinary()
					_ = yym745
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq734[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym746 := z.EncBinary()
					_ = yym746
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr734 || yy2arr734 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym747 := z.DecBinary()
	_ = yym747
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct748 := r.ContainerType()
		if yyct748 == codecSelferValueTypeMap1234 {
			yyl748 := r.ReadMapStart()
			if yyl748 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl748, d)
			}
		} else if yyct748 == codecSelferValueTypeArray1234 {
			yyl748 := r.ReadArrayStart()
			if yyl748 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl748, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys749Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys749Slc
	var yyhl749 bool = l >= 0
	for yyj749 := 0; ; yyj749++ {
		if yyhl749 {
			if yyj749 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys749Slc = r.DecodeBytes(yys749Slc, true, true)
		yys749 := string(yys749Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys749 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys749)
		} // end switch yys749
	} // end for yyj749
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj754 int
	var yyb754 bool
	var yyhl754 bool = l >= 0
	yyj754++
	if yyhl754 {
		yyb754 = yyj754 > l
	} else {
		yyb754 = r.CheckBreak()
	}
	if yyb754 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj754++
	if yyhl754 {
		yyb754 = yyj754 > l
	} else {
		yyb754 = r.CheckBreak()
	}
	if yyb754 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj754++
	if yyhl754 {
		yyb754 = yyj754 > l
	} else {
		yyb754 = r.CheckBreak()
	}
	if yyb754 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj754++
	if yyhl754 {
		yyb754 = yyj754 > l
	} else {
		yyb754 = r.CheckBreak()
	}
	if yyb754 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj754++
		if yyhl754 {
			yyb754 = yyj754 > l
		} else {
			yyb754 = r.CheckBreak()
		}
		if yyb754 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj754-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym759 := z.EncBinary()
		_ = yym759
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep760 := !z.EncBinary()
			yy2arr760 := z.EncBasicHandle().StructToArray
			var yyq760 [5]bool
			_, _, _ = yysep760, yyq760, yy2arr760
			const yyr760 bool = false
			yyq760[1] = x.FSType != ""
			yyq760[2] = x.SecretRef != nil
			yyq760[3] = x.ReadOnly != false
			yyq760[4] = len(x.Options) != 0
			var yynn760 int
			if yyr760 || yy2arr760 {
				r.EncodeArrayStart(5)
			} else {
				yynn760 = 1
				for _, b := range yyq760 {
					if b {
						yynn760++
					}
				}
				r.EncodeMapStart(yynn760)
				yynn760 = 0
			}
			if yyr760 || yy2arr760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym762 := z.EncBinary()
				_ = yym762
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym763 := z.EncBinary()
				_ = yym763
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr760 || yy2arr760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq760[1] {
					yym765 := z.EncBinary()
					_ = yym765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq760[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym766 := z.EncBinary()
					_ = yym766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr760 || yy2arr760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq760[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq760[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr760 || yy2arr760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq760[3] {
					yym769 := z.EncBinary()
					_ = yym769
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq760[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym770 := z.EncBinary()
					_ = yym770
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr760 || yy2arr760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq760[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym772 := z.EncBinary()
						_ = yym772
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq760[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym773 := z.EncBinary()
						_ = yym773
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr760 || yy2arr760 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym774 := z.DecBinary()
	_ = yym774
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct775 := r.ContainerType()
		if yyct775 == codecSelferValueTypeMap1234 {
			yyl775 := r.ReadMapStart()
			if yyl775 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl775, d)
			}
		} else if yyct775 == codecSelferValueTypeArray1234 {
			yyl775 := r.ReadArrayStart()
			if yyl775 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl775, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys776Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys776Slc
	var yyhl776 bool = l >= 0
	for yyj776 := 0; ; yyj776++ {
		if yyhl776 {
			if yyj776 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys776Slc = r.DecodeBytes(yys776Slc, true, true)
		yys776 := string(yys776Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys776 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv781 := &x.Options
				yym782 := z.DecBinary()
				_ = yym782
				if false {
				} else {
					z.F.DecMapStringStringX(yyv781, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys776)
		} // end switch yys776
	} // end for yyj776
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj783 int
	var yyb783 bool
	var yyhl783 bool = l >= 0
	yyj783++
	if yyhl783 {
		yyb783 = yyj783 > l
	} else {
		yyb783 = r.CheckBreak()
	}
	if yyb783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj783++
	if yyhl783 {
		yyb783 = yyj783 > l
	} else {
		yyb783 = r.CheckBreak()
	}
	if yyb783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj783++
	if yyhl783 {
		yyb783 = yyj783 > l
	} else {
		yyb783 = r.CheckBreak()
	}
	if yyb783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj783++
	if yyhl783 {
		yyb783 = yyj783 > l
	} else {
		yyb783 = r.CheckBreak()
	}
	if yyb783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj783++
	if yyhl783 {
		yyb783 = yyj783 > l
	} else {
		yyb783 = r.CheckBreak()
	}
	if yyb783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv788 := &x.Options
		yym789 := z.DecBinary()
		_ = yym789
		if false {
		} else {
			z.F.DecMapStringStringX(yyv788, false, d)
		}
	}
	for {
		yyj783++
		if yyhl783 {
			yyb783 = yyj783 > l
		} else {
			yyb783 = r.CheckBreak()
		}
		if yyb783 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj783-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym790 := z.EncBinary()
		_ = yym790
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep791 := !z.EncBinary()
			yy2arr791 := z.EncBasicHandle().StructToArray
			var yyq791 [4]bool
			_, _, _ = yysep791, yyq791, yy2arr791
			const yyr791 bool = false
			yyq791[1] = x.FSType != ""
			yyq791[2] = x.Partition != 0
			yyq791[3] = x.ReadOnly != false
			var yynn791 int
			if yyr791 || yy2arr791 {
				r.EncodeArrayStart(4)
			} else {
				yynn791 = 1
				for _, b := range yyq791 {
					if b {
						yynn791++
					}
				}
				r.EncodeMapStart(yynn791)
				yynn791 = 0
			}
			if yyr791 || yy2arr791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym793 := z.EncBinary()
				_ = yym793
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym794 := z.EncBinary()
				_ = yym794
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr791 || yy2arr791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq791[1] {
					yym796 := z.EncBinary()
					_ = yym796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq791[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym797 := z.EncBinary()
					_ = yym797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr791 || yy2arr791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq791[2] {
					yym799 := z.EncBinary()
					_ = yym799
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq791[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym800 := z.EncBinary()
					_ = yym800
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr791 || yy2arr791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq791[3] {
					yym802 := z.EncBinary()
					_ = yym802
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq791[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym803 := z.EncBinary()
					_ = yym803
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr791 || yy2arr791 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym804 := z.DecBinary()
	_ = yym804
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct805 := r.ContainerType()
		if yyct805 == codecSelferValueTypeMap1234 {
			yyl805 := r.ReadMapStart()
			if yyl805 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl805, d)
			}
		} else if yyct805 == codecSelferValueTypeArray1234 {
			yyl805 := r.ReadArrayStart()
			if yyl805 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl805, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys806Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys806Slc
	var yyhl806 bool = l >= 0
	for yyj806 := 0; ; yyj806++ {
		if yyhl806 {
			if yyj806 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys806Slc = r.DecodeBytes(yys806Slc, true, true)
		yys806 := string(yys806Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys806 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys806)
		} // end switch yys806
	} // end for yyj806
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj811 int
	var yyb811 bool
	var yyhl811 bool = l >= 0
	yyj811++
	if yyhl811 {
		yyb811 = yyj811 > l
	} else {
		yyb811 = r.CheckBreak()
	}
	if yyb811 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj811++
	if yyhl811 {
		yyb811 = yyj811 > l
	} else {
		yyb811 = r.CheckBreak()
	}
	if yyb811 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj811++
	if yyhl811 {
		yyb811 = yyj811 > l
	} else {
		yyb811 = r.CheckBreak()
	}
	if yyb811 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj811++
	if yyhl811 {
		yyb811 = yyj811 > l
	} else {
		yyb811 = r.CheckBreak()
	}
	if yyb811 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj811++
		if yyhl811 {
			yyb811 = yyj811 > l
		} else {
			yyb811 = r.CheckBreak()
		}
		if yyb811 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj811-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym816 := z.EncBinary()
		_ = yym816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep817 := !z.EncBinary()
			yy2arr817 := z.EncBasicHandle().StructToArray
			var yyq817 [3]bool
			_, _, _ = yysep817, yyq817, yy2arr817
			const yyr817 bool = false
			yyq817[1] = x.Revision != ""
			yyq817[2] = x.Directory != ""
			var yynn817 int
			if yyr817 || yy2arr817 {
				r.EncodeArrayStart(3)
			} else {
				yynn817 = 1
				for _, b := range yyq817 {
					if b {
						yynn817++
					}
				}
				r.EncodeMapStart(yynn817)
				yynn817 = 0
			}
			if yyr817 || yy2arr817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym819 := z.EncBinary()
				_ = yym819
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym820 := z.EncBinary()
				_ = yym820
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr817 || yy2arr817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq817[1] {
					yym822 := z.EncBinary()
					_ = yym822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym823 := z.EncBinary()
					_ = yym823
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr817 || yy2arr817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq817[2] {
					yym825 := z.EncBinary()
					_ = yym825
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym826 := z.EncBinary()
					_ = yym826
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr817 || yy2arr817 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym827 := z.DecBinary()
	_ = yym827
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct828 := r.ContainerType()
		if yyct828 == codecSelferValueTypeMap1234 {
			yyl828 := r.ReadMapStart()
			if yyl828 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl828, d)
			}
		} else if yyct828 == codecSelferValueTypeArray1234 {
			yyl828 := r.ReadArrayStart()
			if yyl828 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl828, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys829Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys829Slc
	var yyhl829 bool = l >= 0
	for yyj829 := 0; ; yyj829++ {
		if yyhl829 {
			if yyj829 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys829Slc = r.DecodeBytes(yys829Slc, true, true)
		yys829 := string(yys829Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys829 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys829)
		} // end switch yys829
	} // end for yyj829
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj833 int
	var yyb833 bool
	var yyhl833 bool = l >= 0
	yyj833++
	if yyhl833 {
		yyb833 = yyj833 > l
	} else {
		yyb833 = r.CheckBreak()
	}
	if yyb833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj833++
	if yyhl833 {
		yyb833 = yyj833 > l
	} else {
		yyb833 = r.CheckBreak()
	}
	if yyb833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj833++
	if yyhl833 {
		yyb833 = yyj833 > l
	} else {
		yyb833 = r.CheckBreak()
	}
	if yyb833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj833++
		if yyhl833 {
			yyb833 = yyj833 > l
		} else {
			yyb833 = r.CheckBreak()
		}
		if yyb833 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj833-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym837 := z.EncBinary()
		_ = yym837
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep838 := !z.EncBinary()
			yy2arr838 := z.EncBasicHandle().StructToArray
			var yyq838 [2]bool
			_, _, _ = yysep838, yyq838, yy2arr838
			const yyr838 bool = false
			yyq838[0] = x.SecretName != ""
			yyq838[1] = len(x.Items) != 0
			var yynn838 int
			if yyr838 || yy2arr838 {
				r.EncodeArrayStart(2)
			} else {
				yynn838 = 0
				for _, b := range yyq838 {
					if b {
						yynn838++
					}
				}
				r.EncodeMapStart(yynn838)
				yynn838 = 0
			}
			if yyr838 || yy2arr838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq838[0] {
					yym840 := z.EncBinary()
					_ = yym840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq838[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym841 := z.EncBinary()
					_ = yym841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr838 || yy2arr838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq838[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym843 := z.EncBinary()
						_ = yym843
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq838[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym844 := z.EncBinary()
						_ = yym844
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr838 || yy2arr838 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym845 := z.DecBinary()
	_ = yym845
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct846 := r.ContainerType()
		if yyct846 == codecSelferValueTypeMap1234 {
			yyl846 := r.ReadMapStart()
			if yyl846 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl846, d)
			}
		} else if yyct846 == codecSelferValueTypeArray1234 {
			yyl846 := r.ReadArrayStart()
			if yyl846 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl846, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys847Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys847Slc
	var yyhl847 bool = l >= 0
	for yyj847 := 0; ; yyj847++ {
		if yyhl847 {
			if yyj847 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys847Slc = r.DecodeBytes(yys847Slc, true, true)
		yys847 := string(yys847Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys847 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv849 := &x.Items
				yym850 := z.DecBinary()
				_ = yym850
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv849), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys847)
		} // end switch yys847
	} // end for yyj847
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj851 int
	var yyb851 bool
	var yyhl851 bool = l >= 0
	yyj851++
	if yyhl851 {
		yyb851 = yyj851 > l
	} else {
		yyb851 = r.CheckBreak()
	}
	if yyb851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj851++
	if yyhl851 {
		yyb851 = yyj851 > l
	} else {
		yyb851 = r.CheckBreak()
	}
	if yyb851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv853 := &x.Items
		yym854 := z.DecBinary()
		_ = yym854
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv853), d)
		}
	}
	for {
		yyj851++
		if yyhl851 {
			yyb851 = yyj851 > l
		} else {
			yyb851 = r.CheckBreak()
		}
		if yyb851 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj851-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym855 := z.EncBinary()
		_ = yym855
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep856 := !z.EncBinary()
			yy2arr856 := z.EncBasicHandle().StructToArray
			var yyq856 [3]bool
			_, _, _ = yysep856, yyq856, yy2arr856
			const yyr856 bool = false
			yyq856[2] = x.ReadOnly != false
			var yynn856 int
			if yyr856 || yy2arr856 {
				r.EncodeArrayStart(3)
			} else {
				yynn856 = 2
				for _, b := range yyq856 {
					if b {
						yynn856++
					}
				}
				r.EncodeMapStart(yynn856)
				yynn856 = 0
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym858 := z.EncBinary()
				_ = yym858
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym859 := z.EncBinary()
				_ = yym859
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym861 := z.EncBinary()
				_ = yym861
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym862 := z.EncBinary()
				_ = yym862
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq856[2] {
					yym864 := z.EncBinary()
					_ = yym864
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq856[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym865 := z.EncBinary()
					_ = yym865
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym866 := z.DecBinary()
	_ = yym866
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct867 := r.ContainerType()
		if yyct867 == codecSelferValueTypeMap1234 {
			yyl867 := r.ReadMapStart()
			if yyl867 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl867, d)
			}
		} else if yyct867 == codecSelferValueTypeArray1234 {
			yyl867 := r.ReadArrayStart()
			if yyl867 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl867, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys868Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys868Slc
	var yyhl868 bool = l >= 0
	for yyj868 := 0; ; yyj868++ {
		if yyhl868 {
			if yyj868 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys868Slc = r.DecodeBytes(yys868Slc, true, true)
		yys868 := string(yys868Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys868 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys868)
		} // end switch yys868
	} // end for yyj868
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj872 int
	var yyb872 bool
	var yyhl872 bool = l >= 0
	yyj872++
	if yyhl872 {
		yyb872 = yyj872 > l
	} else {
		yyb872 = r.CheckBreak()
	}
	if yyb872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj872++
	if yyhl872 {
		yyb872 = yyj872 > l
	} else {
		yyb872 = r.CheckBreak()
	}
	if yyb872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj872++
	if yyhl872 {
		yyb872 = yyj872 > l
	} else {
		yyb872 = r.CheckBreak()
	}
	if yyb872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj872++
		if yyhl872 {
			yyb872 = yyj872 > l
		} else {
			yyb872 = r.CheckBreak()
		}
		if yyb872 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj872-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym876 := z.EncBinary()
		_ = yym876
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep877 := !z.EncBinary()
			yy2arr877 := z.EncBasicHandle().StructToArray
			var yyq877 [6]bool
			_, _, _ = yysep877, yyq877, yy2arr877
			const yyr877 bool = false
			yyq877[3] = x.ISCSIInterface != ""
			yyq877[4] = x.FSType != ""
			yyq877[5] = x.ReadOnly != false
			var yynn877 int
			if yyr877 || yy2arr877 {
				r.EncodeArrayStart(6)
			} else {
				yynn877 = 3
				for _, b := range yyq877 {
					if b {
						yynn877++
					}
				}
				r.EncodeMapStart(yynn877)
				yynn877 = 0
			}
			if yyr877 || yy2arr877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym879 := z.EncBinary()
				_ = yym879
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym880 := z.EncBinary()
				_ = yym880
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr877 || yy2arr877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym882 := z.EncBinary()
				_ = yym882
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym883 := z.EncBinary()
				_ = yym883
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr877 || yy2arr877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym885 := z.EncBinary()
				_ = yym885
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym886 := z.EncBinary()
				_ = yym886
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr877 || yy2arr877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq877[3] {
					yym888 := z.EncBinary()
					_ = yym888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq877[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym889 := z.EncBinary()
					_ = yym889
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr877 || yy2arr877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq877[4] {
					yym891 := z.EncBinary()
					_ = yym891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq877[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym892 := z.EncBinary()
					_ = yym892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr877 || yy2arr877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq877[5] {
					yym894 := z.EncBinary()
					_ = yym894
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq877[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym895 := z.EncBinary()
					_ = yym895
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr877 || yy2arr877 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym896 := z.DecBinary()
	_ = yym896
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct897 := r.ContainerType()
		if yyct897 == codecSelferValueTypeMap1234 {
			yyl897 := r.ReadMapStart()
			if yyl897 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl897, d)
			}
		} else if yyct897 == codecSelferValueTypeArray1234 {
			yyl897 := r.ReadArrayStart()
			if yyl897 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl897, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys898Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys898Slc
	var yyhl898 bool = l >= 0
	for yyj898 := 0; ; yyj898++ {
		if yyhl898 {
			if yyj898 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys898Slc = r.DecodeBytes(yys898Slc, true, true)
		yys898 := string(yys898Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys898 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys898)
		} // end switch yys898
	} // end for yyj898
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj905 int
	var yyb905 bool
	var yyhl905 bool = l >= 0
	yyj905++
	if yyhl905 {
		yyb905 = yyj905 > l
	} else {
		yyb905 = r.CheckBreak()
	}
	if yyb905 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj905++
	if yyhl905 {
		yyb905 = yyj905 > l
	} else {
		yyb905 = r.CheckBreak()
	}
	if yyb905 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj905++
	if yyhl905 {
		yyb905 = yyj905 > l
	} else {
		yyb905 = r.CheckBreak()
	}
	if yyb905 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj905++
	if yyhl905 {
		yyb905 = yyj905 > l
	} else {
		yyb905 = r.CheckBreak()
	}
	if yyb905 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj905++
	if yyhl905 {
		yyb905 = yyj905 > l
	} else {
		yyb905 = r.CheckBreak()
	}
	if yyb905 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj905++
	if yyhl905 {
		yyb905 = yyj905 > l
	} else {
		yyb905 = r.CheckBreak()
	}
	if yyb905 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj905++
		if yyhl905 {
			yyb905 = yyj905 > l
		} else {
			yyb905 = r.CheckBreak()
		}
		if yyb905 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj905-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym912 := z.EncBinary()
		_ = yym912
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep913 := !z.EncBinary()
			yy2arr913 := z.EncBasicHandle().StructToArray
			var yyq913 [4]bool
			_, _, _ = yysep913, yyq913, yy2arr913
			const yyr913 bool = false
			yyq913[2] = x.FSType != ""
			yyq913[3] = x.ReadOnly != false
			var yynn913 int
			if yyr913 || yy2arr913 {
				r.EncodeArrayStart(4)
			} else {
				yynn913 = 2
				for _, b := range yyq913 {
					if b {
						yynn913++
					}
				}
				r.EncodeMapStart(yynn913)
				yynn913 = 0
			}
			if yyr913 || yy2arr913 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym915 := z.EncBinary()
					_ = yym915
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym916 := z.EncBinary()
					_ = yym916
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr913 || yy2arr913 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy918 := *x.Lun
					yym919 := z.EncBinary()
					_ = yym919
					if false {
					} else {
						r.EncodeInt(int64(yy918))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy920 := *x.Lun
					yym921 := z.EncBinary()
					_ = yym921
					if false {
					} else {
						r.EncodeInt(int64(yy920))
					}
				}
			}
			if yyr913 || yy2arr913 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq913[2] {
					yym923 := z.EncBinary()
					_ = yym923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq913[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym924 := z.EncBinary()
					_ = yym924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr913 || yy2arr913 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq913[3] {
					yym926 := z.EncBinary()
					_ = yym926
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq913[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym927 := z.EncBinary()
					_ = yym927
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr913 || yy2arr913 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym928 := z.DecBinary()
	_ = yym928
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct929 := r.ContainerType()
		if yyct929 == codecSelferValueTypeMap1234 {
			yyl929 := r.ReadMapStart()
			if yyl929 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl929, d)
			}
		} else if yyct929 == codecSelferValueTypeArray1234 {
			yyl929 := r.ReadArrayStart()
			if yyl929 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl929, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys930Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys930Slc
	var yyhl930 bool = l >= 0
	for yyj930 := 0; ; yyj930++ {
		if yyhl930 {
			if yyj930 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys930Slc = r.DecodeBytes(yys930Slc, true, true)
		yys930 := string(yys930Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys930 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv931 := &x.TargetWWNs
				yym932 := z.DecBinary()
				_ = yym932
				if false {
				} else {
					z.F.DecSliceStringX(yyv931, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym934 := z.DecBinary()
				_ = yym934
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys930)
		} // end switch yys930
	} // end for yyj930
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj937 int
	var yyb937 bool
	var yyhl937 bool = l >= 0
	yyj937++
	if yyhl937 {
		yyb937 = yyj937 > l
	} else {
		yyb937 = r.CheckBreak()
	}
	if yyb937 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv938 := &x.TargetWWNs
		yym939 := z.DecBinary()
		_ = yym939
		if false {
		} else {
			z.F.DecSliceStringX(yyv938, false, d)
		}
	}
	yyj937++
	if yyhl937 {
		yyb937 = yyj937 > l
	} else {
		yyb937 = r.CheckBreak()
	}
	if yyb937 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym941 := z.DecBinary()
		_ = yym941
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj937++
	if yyhl937 {
		yyb937 = yyj937 > l
	} else {
		yyb937 = r.CheckBreak()
	}
	if yyb937 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj937++
	if yyhl937 {
		yyb937 = yyj937 > l
	} else {
		yyb937 = r.CheckBreak()
	}
	if yyb937 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj937++
		if yyhl937 {
			yyb937 = yyj937 > l
		} else {
			yyb937 = r.CheckBreak()
		}
		if yyb937 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj937-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym944 := z.EncBinary()
		_ = yym944
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep945 := !z.EncBinary()
			yy2arr945 := z.EncBasicHandle().StructToArray
			var yyq945 [3]bool
			_, _, _ = yysep945, yyq945, yy2arr945
			const yyr945 bool = false
			yyq945[2] = x.ReadOnly != false
			var yynn945 int
			if yyr945 || yy2arr945 {
				r.EncodeArrayStart(3)
			} else {
				yynn945 = 2
				for _, b := range yyq945 {
					if b {
						yynn945++
					}
				}
				r.EncodeMapStart(yynn945)
				yynn945 = 0
			}
			if yyr945 || yy2arr945 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym947 := z.EncBinary()
				_ = yym947
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym948 := z.EncBinary()
				_ = yym948
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr945 || yy2arr945 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym950 := z.EncBinary()
				_ = yym950
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym951 := z.EncBinary()
				_ = yym951
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr945 || yy2arr945 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq945[2] {
					yym953 := z.EncBinary()
					_ = yym953
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq945[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym954 := z.EncBinary()
					_ = yym954
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr945 || yy2arr945 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym955 := z.DecBinary()
	_ = yym955
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct956 := r.ContainerType()
		if yyct956 == codecSelferValueTypeMap1234 {
			yyl956 := r.ReadMapStart()
			if yyl956 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl956, d)
			}
		} else if yyct956 == codecSelferValueTypeArray1234 {
			yyl956 := r.ReadArrayStart()
			if yyl956 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl956, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys957Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys957Slc
	var yyhl957 bool = l >= 0
	for yyj957 := 0; ; yyj957++ {
		if yyhl957 {
			if yyj957 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys957Slc = r.DecodeBytes(yys957Slc, true, true)
		yys957 := string(yys957Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys957 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys957)
		} // end switch yys957
	} // end for yyj957
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj961 int
	var yyb961 bool
	var yyhl961 bool = l >= 0
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj961++
		if yyhl961 {
			yyb961 = yyj961 > l
		} else {
			yyb961 = r.CheckBreak()
		}
		if yyb961 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj961-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym965 := z.EncBinary()
		_ = yym965
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep966 := !z.EncBinary()
			yy2arr966 := z.EncBasicHandle().StructToArray
			var yyq966 [2]bool
			_, _, _ = yysep966, yyq966, yy2arr966
			const yyr966 bool = false
			yyq966[1] = x.FSType != ""
			var yynn966 int
			if yyr966 || yy2arr966 {
				r.EncodeArrayStart(2)
			} else {
				yynn966 = 1
				for _, b := range yyq966 {
					if b {
						yynn966++
					}
				}
				r.EncodeMapStart(yynn966)
				yynn966 = 0
			}
			if yyr966 || yy2arr966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym968 := z.EncBinary()
				_ = yym968
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym969 := z.EncBinary()
				_ = yym969
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr966 || yy2arr966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq966[1] {
					yym971 := z.EncBinary()
					_ = yym971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq966[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym972 := z.EncBinary()
					_ = yym972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr966 || yy2arr966 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym973 := z.DecBinary()
	_ = yym973
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct974 := r.ContainerType()
		if yyct974 == codecSelferValueTypeMap1234 {
			yyl974 := r.ReadMapStart()
			if yyl974 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl974, d)
			}
		} else if yyct974 == codecSelferValueTypeArray1234 {
			yyl974 := r.ReadArrayStart()
			if yyl974 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl974, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys975Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys975Slc
	var yyhl975 bool = l >= 0
	for yyj975 := 0; ; yyj975++ {
		if yyhl975 {
			if yyj975 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys975Slc = r.DecodeBytes(yys975Slc, true, true)
		yys975 := string(yys975Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys975 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys975)
		} // end switch yys975
	} // end for yyj975
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj978 int
	var yyb978 bool
	var yyhl978 bool = l >= 0
	yyj978++
	if yyhl978 {
		yyb978 = yyj978 > l
	} else {
		yyb978 = r.CheckBreak()
	}
	if yyb978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj978++
	if yyhl978 {
		yyb978 = yyj978 > l
	} else {
		yyb978 = r.CheckBreak()
	}
	if yyb978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj978++
		if yyhl978 {
			yyb978 = yyj978 > l
		} else {
			yyb978 = r.CheckBreak()
		}
		if yyb978 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj978-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x AzureDataDiskCachingMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym981 := z.EncBinary()
	_ = yym981
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *AzureDataDiskCachingMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym982 := z.DecBinary()
	_ = yym982
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AzureDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym983 := z.EncBinary()
		_ = yym983
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep984 := !z.EncBinary()
			yy2arr984 := z.EncBasicHandle().StructToArray
			var yyq984 [5]bool
			_, _, _ = yysep984, yyq984, yy2arr984
			const yyr984 bool = false
			yyq984[2] = x.CachingMode != nil
			yyq984[3] = x.FSType != nil
			yyq984[4] = x.ReadOnly != nil
			var yynn984 int
			if yyr984 || yy2arr984 {
				r.EncodeArrayStart(5)
			} else {
				yynn984 = 2
				for _, b := range yyq984 {
					if b {
						yynn984++
					}
				}
				r.EncodeMapStart(yynn984)
				yynn984 = 0
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym986 := z.EncBinary()
				_ = yym986
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym987 := z.EncBinary()
				_ = yym987
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym989 := z.EncBinary()
				_ = yym989
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskURI"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym990 := z.EncBinary()
				_ = yym990
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq984[2] {
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy992 := *x.CachingMode
						yy992.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq984[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cachingMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy993 := *x.CachingMode
						yy993.CodecEncodeSelf(e)
					}
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq984[3] {
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy995 := *x.FSType
						yym996 := z.EncBinary()
						_ = yym996
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy995))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq984[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy997 := *x.FSType
						yym998 := z.EncBinary()
						_ = yym998
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy997))
						}
					}
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq984[4] {
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1000 := *x.ReadOnly
						yym1001 := z.EncBinary()
						_ = yym1001
						if false {
						} else {
							r.EncodeBool(bool(yy1000))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq984[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1002 := *x.ReadOnly
						yym1003 := z.EncBinary()
						_ = yym1003
						if false {
						} else {
							r.EncodeBool(bool(yy1002))
						}
					}
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1004 := z.DecBinary()
	_ = yym1004
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1005 := r.ContainerType()
		if yyct1005 == codecSelferValueTypeMap1234 {
			yyl1005 := r.ReadMapStart()
			if yyl1005 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1005, d)
			}
		} else if yyct1005 == codecSelferValueTypeArray1234 {
			yyl1005 := r.ReadArrayStart()
			if yyl1005 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1005, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1006Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1006Slc
	var yyhl1006 bool = l >= 0
	for yyj1006 := 0; ; yyj1006++ {
		if yyhl1006 {
			if yyj1006 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1006Slc = r.DecodeBytes(yys1006Slc, true, true)
		yys1006 := string(yys1006Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1006 {
		case "diskName":
			if r.TryDecodeAsNil() {
				x.DiskName = ""
			} else {
				x.DiskName = string(r.DecodeString())
			}
		case "diskURI":
			if r.TryDecodeAsNil() {
				x.DataDiskURI = ""
			} else {
				x.DataDiskURI = string(r.DecodeString())
			}
		case "cachingMode":
			if r.TryDecodeAsNil() {
				if x.CachingMode != nil {
					x.CachingMode = nil
				}
			} else {
				if x.CachingMode == nil {
					x.CachingMode = new(AzureDataDiskCachingMode)
				}
				x.CachingMode.CodecDecodeSelf(d)
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				if x.FSType != nil {
					x.FSType = nil
				}
			} else {
				if x.FSType == nil {
					x.FSType = new(string)
				}
				yym1011 := z.DecBinary()
				_ = yym1011
				if false {
				} else {
					*((*string)(x.FSType)) = r.DecodeString()
				}
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				if x.ReadOnly != nil {
					x.ReadOnly = nil
				}
			} else {
				if x.ReadOnly == nil {
					x.ReadOnly = new(bool)
				}
				yym1013 := z.DecBinary()
				_ = yym1013
				if false {
				} else {
					*((*bool)(x.ReadOnly)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1006)
		} // end switch yys1006
	} // end for yyj1006
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1014 int
	var yyb1014 bool
	var yyhl1014 bool = l >= 0
	yyj1014++
	if yyhl1014 {
		yyb1014 = yyj1014 > l
	} else {
		yyb1014 = r.CheckBreak()
	}
	if yyb1014 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DiskName = ""
	} else {
		x.DiskName = string(r.DecodeString())
	}
	yyj1014++
	if yyhl1014 {
		yyb1014 = yyj1014 > l
	} else {
		yyb1014 = r.CheckBreak()
	}
	if yyb1014 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DataDiskURI = ""
	} else {
		x.DataDiskURI = string(r.DecodeString())
	}
	yyj1014++
	if yyhl1014 {
		yyb1014 = yyj1014 > l
	} else {
		yyb1014 = r.CheckBreak()
	}
	if yyb1014 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CachingMode != nil {
			x.CachingMode = nil
		}
	} else {
		if x.CachingMode == nil {
			x.CachingMode = new(AzureDataDiskCachingMode)
		}
		x.CachingMode.CodecDecodeSelf(d)
	}
	yyj1014++
	if yyhl1014 {
		yyb1014 = yyj1014 > l
	} else {
		yyb1014 = r.CheckBreak()
	}
	if yyb1014 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSType != nil {
			x.FSType = nil
		}
	} else {
		if x.FSType == nil {
			x.FSType = new(string)
		}
		yym1019 := z.DecBinary()
		_ = yym1019
		if false {
		} else {
			*((*string)(x.FSType)) = r.DecodeString()
		}
	}
	yyj1014++
	if yyhl1014 {
		yyb1014 = yyj1014 > l
	} else {
		yyb1014 = r.CheckBreak()
	}
	if yyb1014 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnly != nil {
			x.ReadOnly = nil
		}
	} else {
		if x.ReadOnly == nil {
			x.ReadOnly = new(bool)
		}
		yym1021 := z.DecBinary()
		_ = yym1021
		if false {
		} else {
			*((*bool)(x.ReadOnly)) = r.DecodeBool()
		}
	}
	for {
		yyj1014++
		if yyhl1014 {
			yyb1014 = yyj1014 > l
		} else {
			yyb1014 = r.CheckBreak()
		}
		if yyb1014 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1014-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1022 := z.EncBinary()
		_ = yym1022
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1023 := !z.EncBinary()
			yy2arr1023 := z.EncBasicHandle().StructToArray
			var yyq1023 [2]bool
			_, _, _ = yysep1023, yyq1023, yy2arr1023
			const yyr1023 bool = false
			yyq1023[0] = x.Name != ""
			yyq1023[1] = len(x.Items) != 0
			var yynn1023 int
			if yyr1023 || yy2arr1023 {
				r.EncodeArrayStart(2)
			} else {
				yynn1023 = 0
				for _, b := range yyq1023 {
					if b {
						yynn1023++
					}
				}
				r.EncodeMapStart(yynn1023)
				yynn1023 = 0
			}
			if yyr1023 || yy2arr1023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1023[0] {
					yym1025 := z.EncBinary()
					_ = yym1025
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1023[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1026 := z.EncBinary()
					_ = yym1026
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1023 || yy2arr1023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1023[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1028 := z.EncBinary()
						_ = yym1028
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1023[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1029 := z.EncBinary()
						_ = yym1029
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1023 || yy2arr1023 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1030 := z.DecBinary()
	_ = yym1030
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1031 := r.ContainerType()
		if yyct1031 == codecSelferValueTypeMap1234 {
			yyl1031 := r.ReadMapStart()
			if yyl1031 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1031, d)
			}
		} else if yyct1031 == codecSelferValueTypeArray1234 {
			yyl1031 := r.ReadArrayStart()
			if yyl1031 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1031, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1032Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1032Slc
	var yyhl1032 bool = l >= 0
	for yyj1032 := 0; ; yyj1032++ {
		if yyhl1032 {
			if yyj1032 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1032Slc = r.DecodeBytes(yys1032Slc, true, true)
		yys1032 := string(yys1032Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1032 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1034 := &x.Items
				yym1035 := z.DecBinary()
				_ = yym1035
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1034), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1032)
		} // end switch yys1032
	} // end for yyj1032
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1036 int
	var yyb1036 bool
	var yyhl1036 bool = l >= 0
	yyj1036++
	if yyhl1036 {
		yyb1036 = yyj1036 > l
	} else {
		yyb1036 = r.CheckBreak()
	}
	if yyb1036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1036++
	if yyhl1036 {
		yyb1036 = yyj1036 > l
	} else {
		yyb1036 = r.CheckBreak()
	}
	if yyb1036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1038 := &x.Items
		yym1039 := z.DecBinary()
		_ = yym1039
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1038), d)
		}
	}
	for {
		yyj1036++
		if yyhl1036 {
			yyb1036 = yyj1036 > l
		} else {
			yyb1036 = r.CheckBreak()
		}
		if yyb1036 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1036-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1040 := z.EncBinary()
		_ = yym1040
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1041 := !z.EncBinary()
			yy2arr1041 := z.EncBasicHandle().StructToArray
			var yyq1041 [2]bool
			_, _, _ = yysep1041, yyq1041, yy2arr1041
			const yyr1041 bool = false
			var yynn1041 int
			if yyr1041 || yy2arr1041 {
				r.EncodeArrayStart(2)
			} else {
				yynn1041 = 2
				for _, b := range yyq1041 {
					if b {
						yynn1041++
					}
				}
				r.EncodeMapStart(yynn1041)
				yynn1041 = 0
			}
			if yyr1041 || yy2arr1041 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1043 := z.EncBinary()
				_ = yym1043
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1044 := z.EncBinary()
				_ = yym1044
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1041 || yy2arr1041 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1046 := z.EncBinary()
				_ = yym1046
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1047 := z.EncBinary()
				_ = yym1047
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1041 || yy2arr1041 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1048 := z.DecBinary()
	_ = yym1048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1049 := r.ContainerType()
		if yyct1049 == codecSelferValueTypeMap1234 {
			yyl1049 := r.ReadMapStart()
			if yyl1049 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1049, d)
			}
		} else if yyct1049 == codecSelferValueTypeArray1234 {
			yyl1049 := r.ReadArrayStart()
			if yyl1049 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1049, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1050Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1050Slc
	var yyhl1050 bool = l >= 0
	for yyj1050 := 0; ; yyj1050++ {
		if yyhl1050 {
			if yyj1050 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1050Slc = r.DecodeBytes(yys1050Slc, true, true)
		yys1050 := string(yys1050Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1050 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1050)
		} // end switch yys1050
	} // end for yyj1050
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1053 int
	var yyb1053 bool
	var yyhl1053 bool = l >= 0
	yyj1053++
	if yyhl1053 {
		yyb1053 = yyj1053 > l
	} else {
		yyb1053 = r.CheckBreak()
	}
	if yyb1053 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1053++
	if yyhl1053 {
		yyb1053 = yyj1053 > l
	} else {
		yyb1053 = r.CheckBreak()
	}
	if yyb1053 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj1053++
		if yyhl1053 {
			yyb1053 = yyj1053 > l
		} else {
			yyb1053 = r.CheckBreak()
		}
		if yyb1053 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1053-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1056 := z.EncBinary()
		_ = yym1056
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1057 := !z.EncBinary()
			yy2arr1057 := z.EncBasicHandle().StructToArray
			var yyq1057 [5]bool
			_, _, _ = yysep1057, yyq1057, yy2arr1057
			const yyr1057 bool = false
			yyq1057[0] = x.Name != ""
			yyq1057[1] = x.HostPort != 0
			yyq1057[3] = x.Protocol != ""
			yyq1057[4] = x.HostIP != ""
			var yynn1057 int
			if yyr1057 || yy2arr1057 {
				r.EncodeArrayStart(5)
			} else {
				yynn1057 = 1
				for _, b := range yyq1057 {
					if b {
						yynn1057++
					}
				}
				r.EncodeMapStart(yynn1057)
				yynn1057 = 0
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1057[0] {
					yym1059 := z.EncBinary()
					_ = yym1059
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1057[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1060 := z.EncBinary()
					_ = yym1060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1057[1] {
					yym1062 := z.EncBinary()
					_ = yym1062
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1057[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1063 := z.EncBinary()
					_ = yym1063
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1065 := z.EncBinary()
				_ = yym1065
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1066 := z.EncBinary()
				_ = yym1066
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1057[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1057[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1057[4] {
					yym1069 := z.EncBinary()
					_ = yym1069
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1057[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1070 := z.EncBinary()
					_ = yym1070
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1071 := z.DecBinary()
	_ = yym1071
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1072 := r.ContainerType()
		if yyct1072 == codecSelferValueTypeMap1234 {
			yyl1072 := r.ReadMapStart()
			if yyl1072 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1072, d)
			}
		} else if yyct1072 == codecSelferValueTypeArray1234 {
			yyl1072 := r.ReadArrayStart()
			if yyl1072 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1072, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1073Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1073Slc
	var yyhl1073 bool = l >= 0
	for yyj1073 := 0; ; yyj1073++ {
		if yyhl1073 {
			if yyj1073 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1073Slc = r.DecodeBytes(yys1073Slc, true, true)
		yys1073 := string(yys1073Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1073 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1073)
		} // end switch yys1073
	} // end for yyj1073
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1079 int
	var yyb1079 bool
	var yyhl1079 bool = l >= 0
	yyj1079++
	if yyhl1079 {
		yyb1079 = yyj1079 > l
	} else {
		yyb1079 = r.CheckBreak()
	}
	if yyb1079 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1079++
	if yyhl1079 {
		yyb1079 = yyj1079 > l
	} else {
		yyb1079 = r.CheckBreak()
	}
	if yyb1079 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1079++
	if yyhl1079 {
		yyb1079 = yyj1079 > l
	} else {
		yyb1079 = r.CheckBreak()
	}
	if yyb1079 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1079++
	if yyhl1079 {
		yyb1079 = yyj1079 > l
	} else {
		yyb1079 = r.CheckBreak()
	}
	if yyb1079 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1079++
	if yyhl1079 {
		yyb1079 = yyj1079 > l
	} else {
		yyb1079 = r.CheckBreak()
	}
	if yyb1079 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1079++
		if yyhl1079 {
			yyb1079 = yyj1079 > l
		} else {
			yyb1079 = r.CheckBreak()
		}
		if yyb1079 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1079-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1085 := z.EncBinary()
		_ = yym1085
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1086 := !z.EncBinary()
			yy2arr1086 := z.EncBasicHandle().StructToArray
			var yyq1086 [4]bool
			_, _, _ = yysep1086, yyq1086, yy2arr1086
			const yyr1086 bool = false
			yyq1086[1] = x.ReadOnly != false
			yyq1086[3] = x.SubPath != ""
			var yynn1086 int
			if yyr1086 || yy2arr1086 {
				r.EncodeArrayStart(4)
			} else {
				yynn1086 = 2
				for _, b := range yyq1086 {
					if b {
						yynn1086++
					}
				}
				r.EncodeMapStart(yynn1086)
				yynn1086 = 0
			}
			if yyr1086 || yy2arr1086 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1088 := z.EncBinary()
				_ = yym1088
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1089 := z.EncBinary()
				_ = yym1089
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1086 || yy2arr1086 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1086[1] {
					yym1091 := z.EncBinary()
					_ = yym1091
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1086[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1092 := z.EncBinary()
					_ = yym1092
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1086 || yy2arr1086 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1094 := z.EncBinary()
				_ = yym1094
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1095 := z.EncBinary()
				_ = yym1095
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1086 || yy2arr1086 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1086[3] {
					yym1097 := z.EncBinary()
					_ = yym1097
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1086[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1098 := z.EncBinary()
					_ = yym1098
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1086 || yy2arr1086 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1099 := z.DecBinary()
	_ = yym1099
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1100 := r.ContainerType()
		if yyct1100 == codecSelferValueTypeMap1234 {
			yyl1100 := r.ReadMapStart()
			if yyl1100 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1100, d)
			}
		} else if yyct1100 == codecSelferValueTypeArray1234 {
			yyl1100 := r.ReadArrayStart()
			if yyl1100 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1100, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1101Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1101Slc
	var yyhl1101 bool = l >= 0
	for yyj1101 := 0; ; yyj1101++ {
		if yyhl1101 {
			if yyj1101 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1101Slc = r.DecodeBytes(yys1101Slc, true, true)
		yys1101 := string(yys1101Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1101 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1101)
		} // end switch yys1101
	} // end for yyj1101
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1106 int
	var yyb1106 bool
	var yyhl1106 bool = l >= 0
	yyj1106++
	if yyhl1106 {
		yyb1106 = yyj1106 > l
	} else {
		yyb1106 = r.CheckBreak()
	}
	if yyb1106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1106++
	if yyhl1106 {
		yyb1106 = yyj1106 > l
	} else {
		yyb1106 = r.CheckBreak()
	}
	if yyb1106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1106++
	if yyhl1106 {
		yyb1106 = yyj1106 > l
	} else {
		yyb1106 = r.CheckBreak()
	}
	if yyb1106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1106++
	if yyhl1106 {
		yyb1106 = yyj1106 > l
	} else {
		yyb1106 = r.CheckBreak()
	}
	if yyb1106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1106++
		if yyhl1106 {
			yyb1106 = yyj1106 > l
		} else {
			yyb1106 = r.CheckBreak()
		}
		if yyb1106 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1106-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1111 := z.EncBinary()
		_ = yym1111
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1112 := !z.EncBinary()
			yy2arr1112 := z.EncBasicHandle().StructToArray
			var yyq1112 [3]bool
			_, _, _ = yysep1112, yyq1112, yy2arr1112
			const yyr1112 bool = false
			yyq1112[1] = x.Value != ""
			yyq1112[2] = x.ValueFrom != nil
			var yynn1112 int
			if yyr1112 || yy2arr1112 {
				r.EncodeArrayStart(3)
			} else {
				yynn1112 = 1
				for _, b := range yyq1112 {
					if b {
						yynn1112++
					}
				}
				r.EncodeMapStart(yynn1112)
				yynn1112 = 0
			}
			if yyr1112 || yy2arr1112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1114 := z.EncBinary()
				_ = yym1114
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1115 := z.EncBinary()
				_ = yym1115
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1112 || yy2arr1112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1112[1] {
					yym1117 := z.EncBinary()
					_ = yym1117
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1112[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1118 := z.EncBinary()
					_ = yym1118
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1112 || yy2arr1112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1112[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1112[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1112 || yy2arr1112 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1120 := z.DecBinary()
	_ = yym1120
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1121 := r.ContainerType()
		if yyct1121 == codecSelferValueTypeMap1234 {
			yyl1121 := r.ReadMapStart()
			if yyl1121 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1121, d)
			}
		} else if yyct1121 == codecSelferValueTypeArray1234 {
			yyl1121 := r.ReadArrayStart()
			if yyl1121 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1121, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1122Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1122Slc
	var yyhl1122 bool = l >= 0
	for yyj1122 := 0; ; yyj1122++ {
		if yyhl1122 {
			if yyj1122 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1122Slc = r.DecodeBytes(yys1122Slc, true, true)
		yys1122 := string(yys1122Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1122 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1122)
		} // end switch yys1122
	} // end for yyj1122
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1126 int
	var yyb1126 bool
	var yyhl1126 bool = l >= 0
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1126++
	if yyhl1126 {
		yyb1126 = yyj1126 > l
	} else {
		yyb1126 = r.CheckBreak()
	}
	if yyb1126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1126++
		if yyhl1126 {
			yyb1126 = yyj1126 > l
		} else {
			yyb1126 = r.CheckBreak()
		}
		if yyb1126 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1126-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1130 := z.EncBinary()
		_ = yym1130
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1131 := !z.EncBinary()
			yy2arr1131 := z.EncBasicHandle().StructToArray
			var yyq1131 [4]bool
			_, _, _ = yysep1131, yyq1131, yy2arr1131
			const yyr1131 bool = false
			yyq1131[0] = x.FieldRef != nil
			yyq1131[1] = x.ResourceFieldRef != nil
			yyq1131[2] = x.ConfigMapKeyRef != nil
			yyq1131[3] = x.SecretKeyRef != nil
			var yynn1131 int
			if yyr1131 || yy2arr1131 {
				r.EncodeArrayStart(4)
			} else {
				yynn1131 = 0
				for _, b := range yyq1131 {
					if b {
						yynn1131++
					}
				}
				r.EncodeMapStart(yynn1131)
				yynn1131 = 0
			}
			if yyr1131 || yy2arr1131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1131[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1131[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1131 || yy2arr1131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1131[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1131[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1131 || yy2arr1131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1131[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1131[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1131 || yy2arr1131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1131[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1131[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1131 || yy2arr1131 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1136 := z.DecBinary()
	_ = yym1136
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1137 := r.ContainerType()
		if yyct1137 == codecSelferValueTypeMap1234 {
			yyl1137 := r.ReadMapStart()
			if yyl1137 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1137, d)
			}
		} else if yyct1137 == codecSelferValueTypeArray1234 {
			yyl1137 := r.ReadArrayStart()
			if yyl1137 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1137, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1138Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1138Slc
	var yyhl1138 bool = l >= 0
	for yyj1138 := 0; ; yyj1138++ {
		if yyhl1138 {
			if yyj1138 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1138Slc = r.DecodeBytes(yys1138Slc, true, true)
		yys1138 := string(yys1138Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1138 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1138)
		} // end switch yys1138
	} // end for yyj1138
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1143 int
	var yyb1143 bool
	var yyhl1143 bool = l >= 0
	yyj1143++
	if yyhl1143 {
		yyb1143 = yyj1143 > l
	} else {
		yyb1143 = r.CheckBreak()
	}
	if yyb1143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1143++
	if yyhl1143 {
		yyb1143 = yyj1143 > l
	} else {
		yyb1143 = r.CheckBreak()
	}
	if yyb1143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1143++
	if yyhl1143 {
		yyb1143 = yyj1143 > l
	} else {
		yyb1143 = r.CheckBreak()
	}
	if yyb1143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1143++
	if yyhl1143 {
		yyb1143 = yyj1143 > l
	} else {
		yyb1143 = r.CheckBreak()
	}
	if yyb1143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1143++
		if yyhl1143 {
			yyb1143 = yyj1143 > l
		} else {
			yyb1143 = r.CheckBreak()
		}
		if yyb1143 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1143-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1148 := z.EncBinary()
		_ = yym1148
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1149 := !z.EncBinary()
			yy2arr1149 := z.EncBasicHandle().StructToArray
			var yyq1149 [2]bool
			_, _, _ = yysep1149, yyq1149, yy2arr1149
			const yyr1149 bool = false
			yyq1149[0] = x.APIVersion != ""
			var yynn1149 int
			if yyr1149 || yy2arr1149 {
				r.EncodeArrayStart(2)
			} else {
				yynn1149 = 1
				for _, b := range yyq1149 {
					if b {
						yynn1149++
					}
				}
				r.EncodeMapStart(yynn1149)
				yynn1149 = 0
			}
			if yyr1149 || yy2arr1149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1149[0] {
					yym1151 := z.EncBinary()
					_ = yym1151
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1149[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1152 := z.EncBinary()
					_ = yym1152
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1149 || yy2arr1149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1154 := z.EncBinary()
				_ = yym1154
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1155 := z.EncBinary()
				_ = yym1155
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1149 || yy2arr1149 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1156 := z.DecBinary()
	_ = yym1156
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1157 := r.ContainerType()
		if yyct1157 == codecSelferValueTypeMap1234 {
			yyl1157 := r.ReadMapStart()
			if yyl1157 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1157, d)
			}
		} else if yyct1157 == codecSelferValueTypeArray1234 {
			yyl1157 := r.ReadArrayStart()
			if yyl1157 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1157, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1158Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1158Slc
	var yyhl1158 bool = l >= 0
	for yyj1158 := 0; ; yyj1158++ {
		if yyhl1158 {
			if yyj1158 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1158Slc = r.DecodeBytes(yys1158Slc, true, true)
		yys1158 := string(yys1158Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1158 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1158)
		} // end switch yys1158
	} // end for yyj1158
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1161 int
	var yyb1161 bool
	var yyhl1161 bool = l >= 0
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1161++
		if yyhl1161 {
			yyb1161 = yyj1161 > l
		} else {
			yyb1161 = r.CheckBreak()
		}
		if yyb1161 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1161-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1164 := z.EncBinary()
		_ = yym1164
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1165 := !z.EncBinary()
			yy2arr1165 := z.EncBasicHandle().StructToArray
			var yyq1165 [3]bool
			_, _, _ = yysep1165, yyq1165, yy2arr1165
			const yyr1165 bool = false
			yyq1165[0] = x.ContainerName != ""
			yyq1165[2] = true
			var yynn1165 int
			if yyr1165 || yy2arr1165 {
				r.EncodeArrayStart(3)
			} else {
				yynn1165 = 1
				for _, b := range yyq1165 {
					if b {
						yynn1165++
					}
				}
				r.EncodeMapStart(yynn1165)
				yynn1165 = 0
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[0] {
					yym1167 := z.EncBinary()
					_ = yym1167
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1165[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1168 := z.EncBinary()
					_ = yym1168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1170 := z.EncBinary()
				_ = yym1170
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1171 := z.EncBinary()
				_ = yym1171
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1165[2] {
					yy1173 := &x.Divisor
					yym1174 := z.EncBinary()
					_ = yym1174
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1173) {
					} else if !yym1174 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1173)
					} else {
						z.EncFallback(yy1173)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1165[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1175 := &x.Divisor
					yym1176 := z.EncBinary()
					_ = yym1176
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1175) {
					} else if !yym1176 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1175)
					} else {
						z.EncFallback(yy1175)
					}
				}
			}
			if yyr1165 || yy2arr1165 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1177 := z.DecBinary()
	_ = yym1177
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1178 := r.ContainerType()
		if yyct1178 == codecSelferValueTypeMap1234 {
			yyl1178 := r.ReadMapStart()
			if yyl1178 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1178, d)
			}
		} else if yyct1178 == codecSelferValueTypeArray1234 {
			yyl1178 := r.ReadArrayStart()
			if yyl1178 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1178, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1179Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1179Slc
	var yyhl1179 bool = l >= 0
	for yyj1179 := 0; ; yyj1179++ {
		if yyhl1179 {
			if yyj1179 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1179Slc = r.DecodeBytes(yys1179Slc, true, true)
		yys1179 := string(yys1179Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1179 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1182 := &x.Divisor
				yym1183 := z.DecBinary()
				_ = yym1183
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1182) {
				} else if !yym1183 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1182)
				} else {
					z.DecFallback(yyv1182, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1179)
		} // end switch yys1179
	} // end for yyj1179
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1184 int
	var yyb1184 bool
	var yyhl1184 bool = l >= 0
	yyj1184++
	if yyhl1184 {
		yyb1184 = yyj1184 > l
	} else {
		yyb1184 = r.CheckBreak()
	}
	if yyb1184 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1184++
	if yyhl1184 {
		yyb1184 = yyj1184 > l
	} else {
		yyb1184 = r.CheckBreak()
	}
	if yyb1184 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1184++
	if yyhl1184 {
		yyb1184 = yyj1184 > l
	} else {
		yyb1184 = r.CheckBreak()
	}
	if yyb1184 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1187 := &x.Divisor
		yym1188 := z.DecBinary()
		_ = yym1188
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1187) {
		} else if !yym1188 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1187)
		} else {
			z.DecFallback(yyv1187, false)
		}
	}
	for {
		yyj1184++
		if yyhl1184 {
			yyb1184 = yyj1184 > l
		} else {
			yyb1184 = r.CheckBreak()
		}
		if yyb1184 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1184-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1189 := z.EncBinary()
		_ = yym1189
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1190 := !z.EncBinary()
			yy2arr1190 := z.EncBasicHandle().StructToArray
			var yyq1190 [2]bool
			_, _, _ = yysep1190, yyq1190, yy2arr1190
			const yyr1190 bool = false
			yyq1190[0] = x.Name != ""
			var yynn1190 int
			if yyr1190 || yy2arr1190 {
				r.EncodeArrayStart(2)
			} else {
				yynn1190 = 1
				for _, b := range yyq1190 {
					if b {
						yynn1190++
					}
				}
				r.EncodeMapStart(yynn1190)
				yynn1190 = 0
			}
			if yyr1190 || yy2arr1190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1190[0] {
					yym1192 := z.EncBinary()
					_ = yym1192
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1190[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1193 := z.EncBinary()
					_ = yym1193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1190 || yy2arr1190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1195 := z.EncBinary()
				_ = yym1195
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1196 := z.EncBinary()
				_ = yym1196
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1190 || yy2arr1190 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1197 := z.DecBinary()
	_ = yym1197
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1198 := r.ContainerType()
		if yyct1198 == codecSelferValueTypeMap1234 {
			yyl1198 := r.ReadMapStart()
			if yyl1198 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1198, d)
			}
		} else if yyct1198 == codecSelferValueTypeArray1234 {
			yyl1198 := r.ReadArrayStart()
			if yyl1198 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1198, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1199Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1199Slc
	var yyhl1199 bool = l >= 0
	for yyj1199 := 0; ; yyj1199++ {
		if yyhl1199 {
			if yyj1199 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1199Slc = r.DecodeBytes(yys1199Slc, true, true)
		yys1199 := string(yys1199Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1199 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1199)
		} // end switch yys1199
	} // end for yyj1199
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1202 int
	var yyb1202 bool
	var yyhl1202 bool = l >= 0
	yyj1202++
	if yyhl1202 {
		yyb1202 = yyj1202 > l
	} else {
		yyb1202 = r.CheckBreak()
	}
	if yyb1202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1202++
	if yyhl1202 {
		yyb1202 = yyj1202 > l
	} else {
		yyb1202 = r.CheckBreak()
	}
	if yyb1202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1202++
		if yyhl1202 {
			yyb1202 = yyj1202 > l
		} else {
			yyb1202 = r.CheckBreak()
		}
		if yyb1202 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1202-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1205 := z.EncBinary()
		_ = yym1205
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1206 := !z.EncBinary()
			yy2arr1206 := z.EncBasicHandle().StructToArray
			var yyq1206 [2]bool
			_, _, _ = yysep1206, yyq1206, yy2arr1206
			const yyr1206 bool = false
			yyq1206[0] = x.Name != ""
			var yynn1206 int
			if yyr1206 || yy2arr1206 {
				r.EncodeArrayStart(2)
			} else {
				yynn1206 = 1
				for _, b := range yyq1206 {
					if b {
						yynn1206++
					}
				}
				r.EncodeMapStart(yynn1206)
				yynn1206 = 0
			}
			if yyr1206 || yy2arr1206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1206[0] {
					yym1208 := z.EncBinary()
					_ = yym1208
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1206[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1209 := z.EncBinary()
					_ = yym1209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1206 || yy2arr1206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1211 := z.EncBinary()
				_ = yym1211
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1212 := z.EncBinary()
				_ = yym1212
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1206 || yy2arr1206 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1213 := z.DecBinary()
	_ = yym1213
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1214 := r.ContainerType()
		if yyct1214 == codecSelferValueTypeMap1234 {
			yyl1214 := r.ReadMapStart()
			if yyl1214 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1214, d)
			}
		} else if yyct1214 == codecSelferValueTypeArray1234 {
			yyl1214 := r.ReadArrayStart()
			if yyl1214 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1214, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1215Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1215Slc
	var yyhl1215 bool = l >= 0
	for yyj1215 := 0; ; yyj1215++ {
		if yyhl1215 {
			if yyj1215 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1215Slc = r.DecodeBytes(yys1215Slc, true, true)
		yys1215 := string(yys1215Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1215 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1215)
		} // end switch yys1215
	} // end for yyj1215
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1218 int
	var yyb1218 bool
	var yyhl1218 bool = l >= 0
	yyj1218++
	if yyhl1218 {
		yyb1218 = yyj1218 > l
	} else {
		yyb1218 = r.CheckBreak()
	}
	if yyb1218 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1218++
	if yyhl1218 {
		yyb1218 = yyj1218 > l
	} else {
		yyb1218 = r.CheckBreak()
	}
	if yyb1218 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1218++
		if yyhl1218 {
			yyb1218 = yyj1218 > l
		} else {
			yyb1218 = r.CheckBreak()
		}
		if yyb1218 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1218-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1221 := z.EncBinary()
		_ = yym1221
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1222 := !z.EncBinary()
			yy2arr1222 := z.EncBasicHandle().StructToArray
			var yyq1222 [2]bool
			_, _, _ = yysep1222, yyq1222, yy2arr1222
			const yyr1222 bool = false
			var yynn1222 int
			if yyr1222 || yy2arr1222 {
				r.EncodeArrayStart(2)
			} else {
				yynn1222 = 2
				for _, b := range yyq1222 {
					if b {
						yynn1222++
					}
				}
				r.EncodeMapStart(yynn1222)
				yynn1222 = 0
			}
			if yyr1222 || yy2arr1222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1224 := z.EncBinary()
				_ = yym1224
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1225 := z.EncBinary()
				_ = yym1225
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1222 || yy2arr1222 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1227 := z.EncBinary()
				_ = yym1227
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1228 := z.EncBinary()
				_ = yym1228
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1222 || yy2arr1222 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1229 := z.DecBinary()
	_ = yym1229
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1230 := r.ContainerType()
		if yyct1230 == codecSelferValueTypeMap1234 {
			yyl1230 := r.ReadMapStart()
			if yyl1230 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1230, d)
			}
		} else if yyct1230 == codecSelferValueTypeArray1234 {
			yyl1230 := r.ReadArrayStart()
			if yyl1230 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1230, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1231Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1231Slc
	var yyhl1231 bool = l >= 0
	for yyj1231 := 0; ; yyj1231++ {
		if yyhl1231 {
			if yyj1231 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1231Slc = r.DecodeBytes(yys1231Slc, true, true)
		yys1231 := string(yys1231Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1231 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1231)
		} // end switch yys1231
	} // end for yyj1231
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1234 int
	var yyb1234 bool
	var yyhl1234 bool = l >= 0
	yyj1234++
	if yyhl1234 {
		yyb1234 = yyj1234 > l
	} else {
		yyb1234 = r.CheckBreak()
	}
	if yyb1234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1234++
	if yyhl1234 {
		yyb1234 = yyj1234 > l
	} else {
		yyb1234 = r.CheckBreak()
	}
	if yyb1234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1234++
		if yyhl1234 {
			yyb1234 = yyj1234 > l
		} else {
			yyb1234 = r.CheckBreak()
		}
		if yyb1234 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1234-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1237 := z.EncBinary()
		_ = yym1237
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1238 := !z.EncBinary()
			yy2arr1238 := z.EncBasicHandle().StructToArray
			var yyq1238 [5]bool
			_, _, _ = yysep1238, yyq1238, yy2arr1238
			const yyr1238 bool = false
			yyq1238[0] = x.Path != ""
			yyq1238[2] = x.Host != ""
			yyq1238[3] = x.Scheme != ""
			yyq1238[4] = len(x.HTTPHeaders) != 0
			var yynn1238 int
			if yyr1238 || yy2arr1238 {
				r.EncodeArrayStart(5)
			} else {
				yynn1238 = 1
				for _, b := range yyq1238 {
					if b {
						yynn1238++
					}
				}
				r.EncodeMapStart(yynn1238)
				yynn1238 = 0
			}
			if yyr1238 || yy2arr1238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1238[0] {
					yym1240 := z.EncBinary()
					_ = yym1240
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1238[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1241 := z.EncBinary()
					_ = yym1241
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1238 || yy2arr1238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1243 := &x.Port
				yym1244 := z.EncBinary()
				_ = yym1244
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1243) {
				} else if !yym1244 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1243)
				} else {
					z.EncFallback(yy1243)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1245 := &x.Port
				yym1246 := z.EncBinary()
				_ = yym1246
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1245) {
				} else if !yym1246 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1245)
				} else {
					z.EncFallback(yy1245)
				}
			}
			if yyr1238 || yy2arr1238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1238[2] {
					yym1248 := z.EncBinary()
					_ = yym1248
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1238[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1249 := z.EncBinary()
					_ = yym1249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1238 || yy2arr1238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1238[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1238[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1238 || yy2arr1238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1238[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1252 := z.EncBinary()
						_ = yym1252
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1238[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1253 := z.EncBinary()
						_ = yym1253
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1238 || yy2arr1238 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1254 := z.DecBinary()
	_ = yym1254
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1255 := r.ContainerType()
		if yyct1255 == codecSelferValueTypeMap1234 {
			yyl1255 := r.ReadMapStart()
			if yyl1255 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1255, d)
			}
		} else if yyct1255 == codecSelferValueTypeArray1234 {
			yyl1255 := r.ReadArrayStart()
			if yyl1255 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1255, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1256Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1256Slc
	var yyhl1256 bool = l >= 0
	for yyj1256 := 0; ; yyj1256++ {
		if yyhl1256 {
			if yyj1256 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1256Slc = r.DecodeBytes(yys1256Slc, true, true)
		yys1256 := string(yys1256Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1256 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1258 := &x.Port
				yym1259 := z.DecBinary()
				_ = yym1259
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1258) {
				} else if !yym1259 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1258)
				} else {
					z.DecFallback(yyv1258, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1262 := &x.HTTPHeaders
				yym1263 := z.DecBinary()
				_ = yym1263
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1262), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1256)
		} // end switch yys1256
	} // end for yyj1256
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1264 int
	var yyb1264 bool
	var yyhl1264 bool = l >= 0
	yyj1264++
	if yyhl1264 {
		yyb1264 = yyj1264 > l
	} else {
		yyb1264 = r.CheckBreak()
	}
	if yyb1264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1264++
	if yyhl1264 {
		yyb1264 = yyj1264 > l
	} else {
		yyb1264 = r.CheckBreak()
	}
	if yyb1264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1266 := &x.Port
		yym1267 := z.DecBinary()
		_ = yym1267
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1266) {
		} else if !yym1267 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1266)
		} else {
			z.DecFallback(yyv1266, false)
		}
	}
	yyj1264++
	if yyhl1264 {
		yyb1264 = yyj1264 > l
	} else {
		yyb1264 = r.CheckBreak()
	}
	if yyb1264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1264++
	if yyhl1264 {
		yyb1264 = yyj1264 > l
	} else {
		yyb1264 = r.CheckBreak()
	}
	if yyb1264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1264++
	if yyhl1264 {
		yyb1264 = yyj1264 > l
	} else {
		yyb1264 = r.CheckBreak()
	}
	if yyb1264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1270 := &x.HTTPHeaders
		yym1271 := z.DecBinary()
		_ = yym1271
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1270), d)
		}
	}
	for {
		yyj1264++
		if yyhl1264 {
			yyb1264 = yyj1264 > l
		} else {
			yyb1264 = r.CheckBreak()
		}
		if yyb1264 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1264-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1272 := z.EncBinary()
	_ = yym1272
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1273 := z.DecBinary()
	_ = yym1273
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1274 := z.EncBinary()
		_ = yym1274
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1275 := !z.EncBinary()
			yy2arr1275 := z.EncBasicHandle().StructToArray
			var yyq1275 [1]bool
			_, _, _ = yysep1275, yyq1275, yy2arr1275
			const yyr1275 bool = false
			var yynn1275 int
			if yyr1275 || yy2arr1275 {
				r.EncodeArrayStart(1)
			} else {
				yynn1275 = 1
				for _, b := range yyq1275 {
					if b {
						yynn1275++
					}
				}
				r.EncodeMapStart(yynn1275)
				yynn1275 = 0
			}
			if yyr1275 || yy2arr1275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1277 := &x.Port
				yym1278 := z.EncBinary()
				_ = yym1278
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1277) {
				} else if !yym1278 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1277)
				} else {
					z.EncFallback(yy1277)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1279 := &x.Port
				yym1280 := z.EncBinary()
				_ = yym1280
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1279) {
				} else if !yym1280 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1279)
				} else {
					z.EncFallback(yy1279)
				}
			}
			if yyr1275 || yy2arr1275 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1281 := z.DecBinary()
	_ = yym1281
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1282 := r.ContainerType()
		if yyct1282 == codecSelferValueTypeMap1234 {
			yyl1282 := r.ReadMapStart()
			if yyl1282 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1282, d)
			}
		} else if yyct1282 == codecSelferValueTypeArray1234 {
			yyl1282 := r.ReadArrayStart()
			if yyl1282 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1282, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1283Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1283Slc
	var yyhl1283 bool = l >= 0
	for yyj1283 := 0; ; yyj1283++ {
		if yyhl1283 {
			if yyj1283 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1283Slc = r.DecodeBytes(yys1283Slc, true, true)
		yys1283 := string(yys1283Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1283 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1284 := &x.Port
				yym1285 := z.DecBinary()
				_ = yym1285
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1284) {
				} else if !yym1285 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1284)
				} else {
					z.DecFallback(yyv1284, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1283)
		} // end switch yys1283
	} // end for yyj1283
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1286 int
	var yyb1286 bool
	var yyhl1286 bool = l >= 0
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1287 := &x.Port
		yym1288 := z.DecBinary()
		_ = yym1288
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1287) {
		} else if !yym1288 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1287)
		} else {
			z.DecFallback(yyv1287, false)
		}
	}
	for {
		yyj1286++
		if yyhl1286 {
			yyb1286 = yyj1286 > l
		} else {
			yyb1286 = r.CheckBreak()
		}
		if yyb1286 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1286-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1289 := z.EncBinary()
		_ = yym1289
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1290 := !z.EncBinary()
			yy2arr1290 := z.EncBasicHandle().StructToArray
			var yyq1290 [1]bool
			_, _, _ = yysep1290, yyq1290, yy2arr1290
			const yyr1290 bool = false
			yyq1290[0] = len(x.Command) != 0
			var yynn1290 int
			if yyr1290 || yy2arr1290 {
				r.EncodeArrayStart(1)
			} else {
				yynn1290 = 0
				for _, b := range yyq1290 {
					if b {
						yynn1290++
					}
				}
				r.EncodeMapStart(yynn1290)
				yynn1290 = 0
			}
			if yyr1290 || yy2arr1290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1290[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1292 := z.EncBinary()
						_ = yym1292
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1290[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1293 := z.EncBinary()
						_ = yym1293
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1290 || yy2arr1290 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1294 := z.DecBinary()
	_ = yym1294
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1295 := r.ContainerType()
		if yyct1295 == codecSelferValueTypeMap1234 {
			yyl1295 := r.ReadMapStart()
			if yyl1295 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1295, d)
			}
		} else if yyct1295 == codecSelferValueTypeArray1234 {
			yyl1295 := r.ReadArrayStart()
			if yyl1295 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1295, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1296Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1296Slc
	var yyhl1296 bool = l >= 0
	for yyj1296 := 0; ; yyj1296++ {
		if yyhl1296 {
			if yyj1296 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1296Slc = r.DecodeBytes(yys1296Slc, true, true)
		yys1296 := string(yys1296Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1296 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1297 := &x.Command
				yym1298 := z.DecBinary()
				_ = yym1298
				if false {
				} else {
					z.F.DecSliceStringX(yyv1297, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1296)
		} // end switch yys1296
	} // end for yyj1296
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1299 int
	var yyb1299 bool
	var yyhl1299 bool = l >= 0
	yyj1299++
	if yyhl1299 {
		yyb1299 = yyj1299 > l
	} else {
		yyb1299 = r.CheckBreak()
	}
	if yyb1299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1300 := &x.Command
		yym1301 := z.DecBinary()
		_ = yym1301
		if false {
		} else {
			z.F.DecSliceStringX(yyv1300, false, d)
		}
	}
	for {
		yyj1299++
		if yyhl1299 {
			yyb1299 = yyj1299 > l
		} else {
			yyb1299 = r.CheckBreak()
		}
		if yyb1299 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1299-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1302 := z.EncBinary()
		_ = yym1302
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1303 := !z.EncBinary()
			yy2arr1303 := z.EncBasicHandle().StructToArray
			var yyq1303 [8]bool
			_, _, _ = yysep1303, yyq1303, yy2arr1303
			const yyr1303 bool = false
			yyq1303[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1303[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1303[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1303[3] = x.InitialDelaySeconds != 0
			yyq1303[4] = x.TimeoutSeconds != 0
			yyq1303[5] = x.PeriodSeconds != 0
			yyq1303[6] = x.SuccessThreshold != 0
			yyq1303[7] = x.FailureThreshold != 0
			var yynn1303 int
			if yyr1303 || yy2arr1303 {
				r.EncodeArrayStart(8)
			} else {
				yynn1303 = 0
				for _, b := range yyq1303 {
					if b {
						yynn1303++
					}
				}
				r.EncodeMapStart(yynn1303)
				yynn1303 = 0
			}
			var yyn1304 bool
			if x.Handler.Exec == nil {
				yyn1304 = true
				goto LABEL1304
			}
		LABEL1304:
			if yyr1303 || yy2arr1303 {
				if yyn1304 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1303[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1303[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1304 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1305 bool
			if x.Handler.HTTPGet == nil {
				yyn1305 = true
				goto LABEL1305
			}
		LABEL1305:
			if yyr1303 || yy2arr1303 {
				if yyn1305 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1303[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1303[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1305 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1306 bool
			if x.Handler.TCPSocket == nil {
				yyn1306 = true
				goto LABEL1306
			}
		LABEL1306:
			if yyr1303 || yy2arr1303 {
				if yyn1306 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1303[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1303[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1306 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1303 || yy2arr1303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1303[3] {
					yym1308 := z.EncBinary()
					_ = yym1308
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1303[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1309 := z.EncBinary()
					_ = yym1309
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1303 || yy2arr1303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1303[4] {
					yym1311 := z.EncBinary()
					_ = yym1311
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1303[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1312 := z.EncBinary()
					_ = yym1312
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1303 || yy2arr1303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1303[5] {
					yym1314 := z.EncBinary()
					_ = yym1314
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1303[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1315 := z.EncBinary()
					_ = yym1315
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1303 || yy2arr1303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1303[6] {
					yym1317 := z.EncBinary()
					_ = yym1317
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1303[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1318 := z.EncBinary()
					_ = yym1318
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1303 || yy2arr1303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1303[7] {
					yym1320 := z.EncBinary()
					_ = yym1320
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1303[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1321 := z.EncBinary()
					_ = yym1321
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1303 || yy2arr1303 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1322 := z.DecBinary()
	_ = yym1322
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1323 := r.ContainerType()
		if yyct1323 == codecSelferValueTypeMap1234 {
			yyl1323 := r.ReadMapStart()
			if yyl1323 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1323, d)
			}
		} else if yyct1323 == codecSelferValueTypeArray1234 {
			yyl1323 := r.ReadArrayStart()
			if yyl1323 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1323, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1324Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1324Slc
	var yyhl1324 bool = l >= 0
	for yyj1324 := 0; ; yyj1324++ {
		if yyhl1324 {
			if yyj1324 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1324Slc = r.DecodeBytes(yys1324Slc, true, true)
		yys1324 := string(yys1324Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1324 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1324)
		} // end switch yys1324
	} // end for yyj1324
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1333 int
	var yyb1333 bool
	var yyhl1333 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1333++
		if yyhl1333 {
			yyb1333 = yyj1333 > l
		} else {
			yyb1333 = r.CheckBreak()
		}
		if yyb1333 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1333-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1342 := z.EncBinary()
	_ = yym1342
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1343 := z.DecBinary()
	_ = yym1343
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1344 := z.EncBinary()
	_ = yym1344
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1345 := z.DecBinary()
	_ = yym1345
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1346 := z.EncBinary()
		_ = yym1346
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1347 := !z.EncBinary()
			yy2arr1347 := z.EncBasicHandle().StructToArray
			var yyq1347 [2]bool
			_, _, _ = yysep1347, yyq1347, yy2arr1347
			const yyr1347 bool = false
			yyq1347[0] = len(x.Add) != 0
			yyq1347[1] = len(x.Drop) != 0
			var yynn1347 int
			if yyr1347 || yy2arr1347 {
				r.EncodeArrayStart(2)
			} else {
				yynn1347 = 0
				for _, b := range yyq1347 {
					if b {
						yynn1347++
					}
				}
				r.EncodeMapStart(yynn1347)
				yynn1347 = 0
			}
			if yyr1347 || yy2arr1347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1347[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1349 := z.EncBinary()
						_ = yym1349
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1347[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1350 := z.EncBinary()
						_ = yym1350
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1347 || yy2arr1347 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1347[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1352 := z.EncBinary()
						_ = yym1352
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1347[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1353 := z.EncBinary()
						_ = yym1353
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1347 || yy2arr1347 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1354 := z.DecBinary()
	_ = yym1354
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1355 := r.ContainerType()
		if yyct1355 == codecSelferValueTypeMap1234 {
			yyl1355 := r.ReadMapStart()
			if yyl1355 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1355, d)
			}
		} else if yyct1355 == codecSelferValueTypeArray1234 {
			yyl1355 := r.ReadArrayStart()
			if yyl1355 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1355, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1356Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1356Slc
	var yyhl1356 bool = l >= 0
	for yyj1356 := 0; ; yyj1356++ {
		if yyhl1356 {
			if yyj1356 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1356Slc = r.DecodeBytes(yys1356Slc, true, true)
		yys1356 := string(yys1356Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1356 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1357 := &x.Add
				yym1358 := z.DecBinary()
				_ = yym1358
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1357), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1359 := &x.Drop
				yym1360 := z.DecBinary()
				_ = yym1360
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1359), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1356)
		} // end switch yys1356
	} // end for yyj1356
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1361 int
	var yyb1361 bool
	var yyhl1361 bool = l >= 0
	yyj1361++
	if yyhl1361 {
		yyb1361 = yyj1361 > l
	} else {
		yyb1361 = r.CheckBreak()
	}
	if yyb1361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1362 := &x.Add
		yym1363 := z.DecBinary()
		_ = yym1363
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1362), d)
		}
	}
	yyj1361++
	if yyhl1361 {
		yyb1361 = yyj1361 > l
	} else {
		yyb1361 = r.CheckBreak()
	}
	if yyb1361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1364 := &x.Drop
		yym1365 := z.DecBinary()
		_ = yym1365
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1364), d)
		}
	}
	for {
		yyj1361++
		if yyhl1361 {
			yyb1361 = yyj1361 > l
		} else {
			yyb1361 = r.CheckBreak()
		}
		if yyb1361 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1361-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1366 := z.EncBinary()
		_ = yym1366
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1367 := !z.EncBinary()
			yy2arr1367 := z.EncBasicHandle().StructToArray
			var yyq1367 [2]bool
			_, _, _ = yysep1367, yyq1367, yy2arr1367
			const yyr1367 bool = false
			yyq1367[0] = len(x.Limits) != 0
			yyq1367[1] = len(x.Requests) != 0
			var yynn1367 int
			if yyr1367 || yy2arr1367 {
				r.EncodeArrayStart(2)
			} else {
				yynn1367 = 0
				for _, b := range yyq1367 {
					if b {
						yynn1367++
					}
				}
				r.EncodeMapStart(yynn1367)
				yynn1367 = 0
			}
			if yyr1367 || yy2arr1367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1367[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1367[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1367 || yy2arr1367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1367[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1367[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1367 || yy2arr1367 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1370 := z.DecBinary()
	_ = yym1370
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1371 := r.ContainerType()
		if yyct1371 == codecSelferValueTypeMap1234 {
			yyl1371 := r.ReadMapStart()
			if yyl1371 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1371, d)
			}
		} else if yyct1371 == codecSelferValueTypeArray1234 {
			yyl1371 := r.ReadArrayStart()
			if yyl1371 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1371, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1372Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1372Slc
	var yyhl1372 bool = l >= 0
	for yyj1372 := 0; ; yyj1372++ {
		if yyhl1372 {
			if yyj1372 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1372Slc = r.DecodeBytes(yys1372Slc, true, true)
		yys1372 := string(yys1372Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1372 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1373 := &x.Limits
				yyv1373.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1374 := &x.Requests
				yyv1374.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1372)
		} // end switch yys1372
	} // end for yyj1372
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1375 int
	var yyb1375 bool
	var yyhl1375 bool = l >= 0
	yyj1375++
	if yyhl1375 {
		yyb1375 = yyj1375 > l
	} else {
		yyb1375 = r.CheckBreak()
	}
	if yyb1375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1376 := &x.Limits
		yyv1376.CodecDecodeSelf(d)
	}
	yyj1375++
	if yyhl1375 {
		yyb1375 = yyj1375 > l
	} else {
		yyb1375 = r.CheckBreak()
	}
	if yyb1375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1377 := &x.Requests
		yyv1377.CodecDecodeSelf(d)
	}
	for {
		yyj1375++
		if yyhl1375 {
			yyb1375 = yyj1375 > l
		} else {
			yyb1375 = r.CheckBreak()
		}
		if yyb1375 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1375-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1378 := z.EncBinary()
		_ = yym1378
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1379 := !z.EncBinary()
			yy2arr1379 := z.EncBasicHandle().StructToArray
			var yyq1379 [18]bool
			_, _, _ = yysep1379, yyq1379, yy2arr1379
			const yyr1379 bool = false
			yyq1379[1] = x.Image != ""
			yyq1379[2] = len(x.Command) != 0
			yyq1379[3] = len(x.Args) != 0
			yyq1379[4] = x.WorkingDir != ""
			yyq1379[5] = len(x.Ports) != 0
			yyq1379[6] = len(x.Env) != 0
			yyq1379[7] = true
			yyq1379[8] = len(x.VolumeMounts) != 0
			yyq1379[9] = x.LivenessProbe != nil
			yyq1379[10] = x.ReadinessProbe != nil
			yyq1379[11] = x.Lifecycle != nil
			yyq1379[12] = x.TerminationMessagePath != ""
			yyq1379[13] = x.ImagePullPolicy != ""
			yyq1379[14] = x.SecurityContext != nil
			yyq1379[15] = x.Stdin != false
			yyq1379[16] = x.StdinOnce != false
			yyq1379[17] = x.TTY != false
			var yynn1379 int
			if yyr1379 || yy2arr1379 {
				r.EncodeArrayStart(18)
			} else {
				yynn1379 = 1
				for _, b := range yyq1379 {
					if b {
						yynn1379++
					}
				}
				r.EncodeMapStart(yynn1379)
				yynn1379 = 0
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1381 := z.EncBinary()
				_ = yym1381
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1382 := z.EncBinary()
				_ = yym1382
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1379[1] {
					yym1384 := z.EncBinary()
					_ = yym1384
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1379[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1385 := z.EncBinary()
					_ = yym1385
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1379[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1387 := z.EncBinary()
						_ = yym1387
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1379[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1388 := z.EncBinary()
						_ = yym1388
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1379[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1390 := z.EncBinary()
						_ = yym1390
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1379[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1391 := z.EncBinary()
						_ = yym1391
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1379[4] {
					yym1393 := z.EncBinary()
					_ = yym1393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1379[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1394 := z.EncBinary()
					_ = yym1394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1379[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1396 := z.EncBinary()
						_ = yym1396
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1379[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1397 := z.EncBinary()
						_ = yym1397
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1379[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1399 := z.EncBinary()
						_ = yym1399
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1379[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1400 := z.EncBinary()
						_ = yym1400
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1379[7] {
					yy1402 := &x.Resources
					yy1402.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1379[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1403 := &x.Resources
					yy1403.CodecEncodeSelf(e)
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1379[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1405 := z.EncBinary()
						_ = yym1405
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1379[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1406 := z.EncBinary()
						_ = yym1406
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1379[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1379[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1379[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1379[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1379[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1379[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1379[12] {
					yym1411 := z.EncBinary()
					_ = yym1411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1379[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1412 := z.EncBinary()
					_ = yym1412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1379[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1379[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1379[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1379[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1379[15] {
					yym1416 := z.EncBinary()
					_ = yym1416
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1379[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1417 := z.EncBinary()
					_ = yym1417
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1379[16] {
					yym1419 := z.EncBinary()
					_ = yym1419
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1379[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1420 := z.EncBinary()
					_ = yym1420
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1379[17] {
					yym1422 := z.EncBinary()
					_ = yym1422
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1379[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1423 := z.EncBinary()
					_ = yym1423
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1424 := z.DecBinary()
	_ = yym1424
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1425 := r.ContainerType()
		if yyct1425 == codecSelferValueTypeMap1234 {
			yyl1425 := r.ReadMapStart()
			if yyl1425 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1425, d)
			}
		} else if yyct1425 == codecSelferValueTypeArray1234 {
			yyl1425 := r.ReadArrayStart()
			if yyl1425 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1425, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1426Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1426Slc
	var yyhl1426 bool = l >= 0
	for yyj1426 := 0; ; yyj1426++ {
		if yyhl1426 {
			if yyj1426 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1426Slc = r.DecodeBytes(yys1426Slc, true, true)
		yys1426 := string(yys1426Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1426 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1429 := &x.Command
				yym1430 := z.DecBinary()
				_ = yym1430
				if false {
				} else {
					z.F.DecSliceStringX(yyv1429, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1431 := &x.Args
				yym1432 := z.DecBinary()
				_ = yym1432
				if false {
				} else {
					z.F.DecSliceStringX(yyv1431, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1434 := &x.Ports
				yym1435 := z.DecBinary()
				_ = yym1435
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1434), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1436 := &x.Env
				yym1437 := z.DecBinary()
				_ = yym1437
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1436), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1438 := &x.Resources
				yyv1438.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1439 := &x.VolumeMounts
				yym1440 := z.DecBinary()
				_ = yym1440
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1439), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1426)
		} // end switch yys1426
	} // end for yyj1426
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1450 int
	var yyb1450 bool
	var yyhl1450 bool = l >= 0
	yyj1450++
	if yyhl1450 {
		yyb1450 = yyj1450 > l
	} else {
		yyb1450 = r.CheckBreak()
	}
	if yyb1450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1450++
	if yyhl1450 {
		yyb1450 = yyj1450 > l
	} else {
		yyb1450 = r.CheckBreak()
	}
	if yyb1450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1450++
	if yyhl1450 {
		yyb1450 = yyj1450 > l
	} else {
		yyb1450 = r.CheckBreak()
	}
	if yyb1450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1453 := &x.Command
		yym1454 := z.DecBinary()
		_ = yym1454
		if false {
		} else {
			z.F.DecSliceStringX(yyv1453, false, d)
		}
	}
	yyj1450++
	if yyhl1450 {
		yyb1450 = yyj1450 > l
	} else {
		yyb1450 = r.CheckBreak()
	}
	if yyb1450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1455 := &x.Args
		yym1456 := z.DecBinary()
		_ = yym1456
		if false {
		} else {
			z.F.DecSliceStringX(yyv1455, false, d)
		}
	}
	yyj1450++
	if yyhl1450 {
		yyb1450 = yyj1450 > l
	} else {
		yyb1450 = r.CheckBreak()
	}
	if yyb1450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1450++
	if yyhl1450 {
		yyb1450 = yyj1450 > l
	} else {
		yyb1450 = r.CheckBreak()
	}
	if yyb1450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1458 := &x.Ports
		yym1459 := z.DecBinary()
		_ = yym1459
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1458), d)
		}
	}
	yyj1450++
	if yyhl1450 {
		yyb1450 = yyj1450 > l
	} else {
		yyb1450 = r.CheckBreak()
	}
	if yyb1450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1460 := &x.Env
		yym1461 := z.DecBinary()
		_ = yym1461
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1460), d)
		}
	}
	yyj1450++
	if yyhl1450 {
		yyb1450 = yyj1450 > l
	} else {
		yyb1450 = r.CheckBreak()
	}
	if yyb1450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1462 := &x.Resources
		yyv1462.CodecDecodeSelf(d)
	}
	yyj1450++
	if yyhl1450 {
		yyb1450 = yyj1450 > l
	} else {
		yyb1450 = r.CheckBreak()
	}
	if yyb1450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1463 := &x.VolumeMounts
		yym1464 := z.DecBinary()
		_ = yym1464
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1463), d)
		}
	}
	yyj1450++
	if yyhl1450 {
		yyb1450 = yyj1450 > l
	} else {
		yyb1450 = r.CheckBreak()
	}
	if yyb1450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1450++
	if yyhl1450 {
		yyb1450 = yyj1450 > l
	} else {
		yyb1450 = r.CheckBreak()
	}
	if yyb1450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1450++
	if yyhl1450 {
		yyb1450 = yyj1450 > l
	} else {
		yyb1450 = r.CheckBreak()
	}
	if yyb1450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1450++
	if yyhl1450 {
		yyb1450 = yyj1450 > l
	} else {
		yyb1450 = r.CheckBreak()
	}
	if yyb1450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1450++
	if yyhl1450 {
		yyb1450 = yyj1450 > l
	} else {
		yyb1450 = r.CheckBreak()
	}
	if yyb1450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1450++
	if yyhl1450 {
		yyb1450 = yyj1450 > l
	} else {
		yyb1450 = r.CheckBreak()
	}
	if yyb1450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1450++
	if yyhl1450 {
		yyb1450 = yyj1450 > l
	} else {
		yyb1450 = r.CheckBreak()
	}
	if yyb1450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1450++
	if yyhl1450 {
		yyb1450 = yyj1450 > l
	} else {
		yyb1450 = r.CheckBreak()
	}
	if yyb1450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1450++
	if yyhl1450 {
		yyb1450 = yyj1450 > l
	} else {
		yyb1450 = r.CheckBreak()
	}
	if yyb1450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1450++
		if yyhl1450 {
			yyb1450 = yyj1450 > l
		} else {
			yyb1450 = r.CheckBreak()
		}
		if yyb1450 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1450-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1474 := z.EncBinary()
		_ = yym1474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1475 := !z.EncBinary()
			yy2arr1475 := z.EncBasicHandle().StructToArray
			var yyq1475 [3]bool
			_, _, _ = yysep1475, yyq1475, yy2arr1475
			const yyr1475 bool = false
			yyq1475[0] = x.Exec != nil
			yyq1475[1] = x.HTTPGet != nil
			yyq1475[2] = x.TCPSocket != nil
			var yynn1475 int
			if yyr1475 || yy2arr1475 {
				r.EncodeArrayStart(3)
			} else {
				yynn1475 = 0
				for _, b := range yyq1475 {
					if b {
						yynn1475++
					}
				}
				r.EncodeMapStart(yynn1475)
				yynn1475 = 0
			}
			if yyr1475 || yy2arr1475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1475[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1475[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1475 || yy2arr1475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1475[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1475[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1475 || yy2arr1475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1475[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1475[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1475 || yy2arr1475 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1479 := z.DecBinary()
	_ = yym1479
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1480 := r.ContainerType()
		if yyct1480 == codecSelferValueTypeMap1234 {
			yyl1480 := r.ReadMapStart()
			if yyl1480 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1480, d)
			}
		} else if yyct1480 == codecSelferValueTypeArray1234 {
			yyl1480 := r.ReadArrayStart()
			if yyl1480 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1480, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1481Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1481Slc
	var yyhl1481 bool = l >= 0
	for yyj1481 := 0; ; yyj1481++ {
		if yyhl1481 {
			if yyj1481 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1481Slc = r.DecodeBytes(yys1481Slc, true, true)
		yys1481 := string(yys1481Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1481 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1481)
		} // end switch yys1481
	} // end for yyj1481
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1485 int
	var yyb1485 bool
	var yyhl1485 bool = l >= 0
	yyj1485++
	if yyhl1485 {
		yyb1485 = yyj1485 > l
	} else {
		yyb1485 = r.CheckBreak()
	}
	if yyb1485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1485++
	if yyhl1485 {
		yyb1485 = yyj1485 > l
	} else {
		yyb1485 = r.CheckBreak()
	}
	if yyb1485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1485++
	if yyhl1485 {
		yyb1485 = yyj1485 > l
	} else {
		yyb1485 = r.CheckBreak()
	}
	if yyb1485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1485++
		if yyhl1485 {
			yyb1485 = yyj1485 > l
		} else {
			yyb1485 = r.CheckBreak()
		}
		if yyb1485 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1485-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1489 := z.EncBinary()
		_ = yym1489
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1490 := !z.EncBinary()
			yy2arr1490 := z.EncBasicHandle().StructToArray
			var yyq1490 [2]bool
			_, _, _ = yysep1490, yyq1490, yy2arr1490
			const yyr1490 bool = false
			yyq1490[0] = x.PostStart != nil
			yyq1490[1] = x.PreStop != nil
			var yynn1490 int
			if yyr1490 || yy2arr1490 {
				r.EncodeArrayStart(2)
			} else {
				yynn1490 = 0
				for _, b := range yyq1490 {
					if b {
						yynn1490++
					}
				}
				r.EncodeMapStart(yynn1490)
				yynn1490 = 0
			}
			if yyr1490 || yy2arr1490 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1490[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1490[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1490 || yy2arr1490 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1490[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1490[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1490 || yy2arr1490 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1493 := z.DecBinary()
	_ = yym1493
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1494 := r.ContainerType()
		if yyct1494 == codecSelferValueTypeMap1234 {
			yyl1494 := r.ReadMapStart()
			if yyl1494 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1494, d)
			}
		} else if yyct1494 == codecSelferValueTypeArray1234 {
			yyl1494 := r.ReadArrayStart()
			if yyl1494 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1494, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1495Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1495Slc
	var yyhl1495 bool = l >= 0
	for yyj1495 := 0; ; yyj1495++ {
		if yyhl1495 {
			if yyj1495 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1495Slc = r.DecodeBytes(yys1495Slc, true, true)
		yys1495 := string(yys1495Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1495 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1495)
		} // end switch yys1495
	} // end for yyj1495
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1498 int
	var yyb1498 bool
	var yyhl1498 bool = l >= 0
	yyj1498++
	if yyhl1498 {
		yyb1498 = yyj1498 > l
	} else {
		yyb1498 = r.CheckBreak()
	}
	if yyb1498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1498++
	if yyhl1498 {
		yyb1498 = yyj1498 > l
	} else {
		yyb1498 = r.CheckBreak()
	}
	if yyb1498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1498++
		if yyhl1498 {
			yyb1498 = yyj1498 > l
		} else {
			yyb1498 = r.CheckBreak()
		}
		if yyb1498 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1498-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1501 := z.EncBinary()
	_ = yym1501
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1502 := z.DecBinary()
	_ = yym1502
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1503 := z.EncBinary()
		_ = yym1503
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1504 := !z.EncBinary()
			yy2arr1504 := z.EncBasicHandle().StructToArray
			var yyq1504 [2]bool
			_, _, _ = yysep1504, yyq1504, yy2arr1504
			const yyr1504 bool = false
			yyq1504[0] = x.Reason != ""
			yyq1504[1] = x.Message != ""
			var yynn1504 int
			if yyr1504 || yy2arr1504 {
				r.EncodeArrayStart(2)
			} else {
				yynn1504 = 0
				for _, b := range yyq1504 {
					if b {
						yynn1504++
					}
				}
				r.EncodeMapStart(yynn1504)
				yynn1504 = 0
			}
			if yyr1504 || yy2arr1504 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1504[0] {
					yym1506 := z.EncBinary()
					_ = yym1506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1504[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1507 := z.EncBinary()
					_ = yym1507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1504 || yy2arr1504 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1504[1] {
					yym1509 := z.EncBinary()
					_ = yym1509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1504[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1510 := z.EncBinary()
					_ = yym1510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1504 || yy2arr1504 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1511 := z.DecBinary()
	_ = yym1511
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1512 := r.ContainerType()
		if yyct1512 == codecSelferValueTypeMap1234 {
			yyl1512 := r.ReadMapStart()
			if yyl1512 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1512, d)
			}
		} else if yyct1512 == codecSelferValueTypeArray1234 {
			yyl1512 := r.ReadArrayStart()
			if yyl1512 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1512, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1513Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1513Slc
	var yyhl1513 bool = l >= 0
	for yyj1513 := 0; ; yyj1513++ {
		if yyhl1513 {
			if yyj1513 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1513Slc = r.DecodeBytes(yys1513Slc, true, true)
		yys1513 := string(yys1513Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1513 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1513)
		} // end switch yys1513
	} // end for yyj1513
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1516 int
	var yyb1516 bool
	var yyhl1516 bool = l >= 0
	yyj1516++
	if yyhl1516 {
		yyb1516 = yyj1516 > l
	} else {
		yyb1516 = r.CheckBreak()
	}
	if yyb1516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1516++
	if yyhl1516 {
		yyb1516 = yyj1516 > l
	} else {
		yyb1516 = r.CheckBreak()
	}
	if yyb1516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1516++
		if yyhl1516 {
			yyb1516 = yyj1516 > l
		} else {
			yyb1516 = r.CheckBreak()
		}
		if yyb1516 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1516-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1519 := z.EncBinary()
		_ = yym1519
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1520 := !z.EncBinary()
			yy2arr1520 := z.EncBasicHandle().StructToArray
			var yyq1520 [1]bool
			_, _, _ = yysep1520, yyq1520, yy2arr1520
			const yyr1520 bool = false
			yyq1520[0] = true
			var yynn1520 int
			if yyr1520 || yy2arr1520 {
				r.EncodeArrayStart(1)
			} else {
				yynn1520 = 0
				for _, b := range yyq1520 {
					if b {
						yynn1520++
					}
				}
				r.EncodeMapStart(yynn1520)
				yynn1520 = 0
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1520[0] {
					yy1522 := &x.StartedAt
					yym1523 := z.EncBinary()
					_ = yym1523
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1522) {
					} else if yym1523 {
						z.EncBinaryMarshal(yy1522)
					} else if !yym1523 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1522)
					} else {
						z.EncFallback(yy1522)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1520[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1524 := &x.StartedAt
					yym1525 := z.EncBinary()
					_ = yym1525
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1524) {
					} else if yym1525 {
						z.EncBinaryMarshal(yy1524)
					} else if !yym1525 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1524)
					} else {
						z.EncFallback(yy1524)
					}
				}
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1526 := z.DecBinary()
	_ = yym1526
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1527 := r.ContainerType()
		if yyct1527 == codecSelferValueTypeMap1234 {
			yyl1527 := r.ReadMapStart()
			if yyl1527 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1527, d)
			}
		} else if yyct1527 == codecSelferValueTypeArray1234 {
			yyl1527 := r.ReadArrayStart()
			if yyl1527 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1527, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1528Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1528Slc
	var yyhl1528 bool = l >= 0
	for yyj1528 := 0; ; yyj1528++ {
		if yyhl1528 {
			if yyj1528 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1528Slc = r.DecodeBytes(yys1528Slc, true, true)
		yys1528 := string(yys1528Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1528 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1529 := &x.StartedAt
				yym1530 := z.DecBinary()
				_ = yym1530
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1529) {
				} else if yym1530 {
					z.DecBinaryUnmarshal(yyv1529)
				} else if !yym1530 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1529)
				} else {
					z.DecFallback(yyv1529, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1528)
		} // end switch yys1528
	} // end for yyj1528
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1531 int
	var yyb1531 bool
	var yyhl1531 bool = l >= 0
	yyj1531++
	if yyhl1531 {
		yyb1531 = yyj1531 > l
	} else {
		yyb1531 = r.CheckBreak()
	}
	if yyb1531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1532 := &x.StartedAt
		yym1533 := z.DecBinary()
		_ = yym1533
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1532) {
		} else if yym1533 {
			z.DecBinaryUnmarshal(yyv1532)
		} else if !yym1533 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1532)
		} else {
			z.DecFallback(yyv1532, false)
		}
	}
	for {
		yyj1531++
		if yyhl1531 {
			yyb1531 = yyj1531 > l
		} else {
			yyb1531 = r.CheckBreak()
		}
		if yyb1531 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1531-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1534 := z.EncBinary()
		_ = yym1534
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1535 := !z.EncBinary()
			yy2arr1535 := z.EncBasicHandle().StructToArray
			var yyq1535 [7]bool
			_, _, _ = yysep1535, yyq1535, yy2arr1535
			const yyr1535 bool = false
			yyq1535[1] = x.Signal != 0
			yyq1535[2] = x.Reason != ""
			yyq1535[3] = x.Message != ""
			yyq1535[4] = true
			yyq1535[5] = true
			yyq1535[6] = x.ContainerID != ""
			var yynn1535 int
			if yyr1535 || yy2arr1535 {
				r.EncodeArrayStart(7)
			} else {
				yynn1535 = 1
				for _, b := range yyq1535 {
					if b {
						yynn1535++
					}
				}
				r.EncodeMapStart(yynn1535)
				yynn1535 = 0
			}
			if yyr1535 || yy2arr1535 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1537 := z.EncBinary()
				_ = yym1537
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1538 := z.EncBinary()
				_ = yym1538
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1535 || yy2arr1535 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1535[1] {
					yym1540 := z.EncBinary()
					_ = yym1540
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1535[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1541 := z.EncBinary()
					_ = yym1541
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1535 || yy2arr1535 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1535[2] {
					yym1543 := z.EncBinary()
					_ = yym1543
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1535[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1544 := z.EncBinary()
					_ = yym1544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1535 || yy2arr1535 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1535[3] {
					yym1546 := z.EncBinary()
					_ = yym1546
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1535[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1547 := z.EncBinary()
					_ = yym1547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1535 || yy2arr1535 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1535[4] {
					yy1549 := &x.StartedAt
					yym1550 := z.EncBinary()
					_ = yym1550
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1549) {
					} else if yym1550 {
						z.EncBinaryMarshal(yy1549)
					} else if !yym1550 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1549)
					} else {
						z.EncFallback(yy1549)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1535[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1551 := &x.StartedAt
					yym1552 := z.EncBinary()
					_ = yym1552
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1551) {
					} else if yym1552 {
						z.EncBinaryMarshal(yy1551)
					} else if !yym1552 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1551)
					} else {
						z.EncFallback(yy1551)
					}
				}
			}
			if yyr1535 || yy2arr1535 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1535[5] {
					yy1554 := &x.FinishedAt
					yym1555 := z.EncBinary()
					_ = yym1555
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1554) {
					} else if yym1555 {
						z.EncBinaryMarshal(yy1554)
					} else if !yym1555 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1554)
					} else {
						z.EncFallback(yy1554)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1535[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1556 := &x.FinishedAt
					yym1557 := z.EncBinary()
					_ = yym1557
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1556) {
					} else if yym1557 {
						z.EncBinaryMarshal(yy1556)
					} else if !yym1557 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1556)
					} else {
						z.EncFallback(yy1556)
					}
				}
			}
			if yyr1535 || yy2arr1535 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1535[6] {
					yym1559 := z.EncBinary()
					_ = yym1559
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1535[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1560 := z.EncBinary()
					_ = yym1560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1535 || yy2arr1535 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1561 := z.DecBinary()
	_ = yym1561
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1562 := r.ContainerType()
		if yyct1562 == codecSelferValueTypeMap1234 {
			yyl1562 := r.ReadMapStart()
			if yyl1562 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1562, d)
			}
		} else if yyct1562 == codecSelferValueTypeArray1234 {
			yyl1562 := r.ReadArrayStart()
			if yyl1562 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1562, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1563Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1563Slc
	var yyhl1563 bool = l >= 0
	for yyj1563 := 0; ; yyj1563++ {
		if yyhl1563 {
			if yyj1563 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1563Slc = r.DecodeBytes(yys1563Slc, true, true)
		yys1563 := string(yys1563Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1563 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1568 := &x.StartedAt
				yym1569 := z.DecBinary()
				_ = yym1569
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1568) {
				} else if yym1569 {
					z.DecBinaryUnmarshal(yyv1568)
				} else if !yym1569 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1568)
				} else {
					z.DecFallback(yyv1568, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1570 := &x.FinishedAt
				yym1571 := z.DecBinary()
				_ = yym1571
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1570) {
				} else if yym1571 {
					z.DecBinaryUnmarshal(yyv1570)
				} else if !yym1571 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1570)
				} else {
					z.DecFallback(yyv1570, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1563)
		} // end switch yys1563
	} // end for yyj1563
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1573 int
	var yyb1573 bool
	var yyhl1573 bool = l >= 0
	yyj1573++
	if yyhl1573 {
		yyb1573 = yyj1573 > l
	} else {
		yyb1573 = r.CheckBreak()
	}
	if yyb1573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1573++
	if yyhl1573 {
		yyb1573 = yyj1573 > l
	} else {
		yyb1573 = r.CheckBreak()
	}
	if yyb1573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1573++
	if yyhl1573 {
		yyb1573 = yyj1573 > l
	} else {
		yyb1573 = r.CheckBreak()
	}
	if yyb1573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1573++
	if yyhl1573 {
		yyb1573 = yyj1573 > l
	} else {
		yyb1573 = r.CheckBreak()
	}
	if yyb1573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1573++
	if yyhl1573 {
		yyb1573 = yyj1573 > l
	} else {
		yyb1573 = r.CheckBreak()
	}
	if yyb1573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1578 := &x.StartedAt
		yym1579 := z.DecBinary()
		_ = yym1579
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1578) {
		} else if yym1579 {
			z.DecBinaryUnmarshal(yyv1578)
		} else if !yym1579 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1578)
		} else {
			z.DecFallback(yyv1578, false)
		}
	}
	yyj1573++
	if yyhl1573 {
		yyb1573 = yyj1573 > l
	} else {
		yyb1573 = r.CheckBreak()
	}
	if yyb1573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1580 := &x.FinishedAt
		yym1581 := z.DecBinary()
		_ = yym1581
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1580) {
		} else if yym1581 {
			z.DecBinaryUnmarshal(yyv1580)
		} else if !yym1581 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1580)
		} else {
			z.DecFallback(yyv1580, false)
		}
	}
	yyj1573++
	if yyhl1573 {
		yyb1573 = yyj1573 > l
	} else {
		yyb1573 = r.CheckBreak()
	}
	if yyb1573 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1573++
		if yyhl1573 {
			yyb1573 = yyj1573 > l
		} else {
			yyb1573 = r.CheckBreak()
		}
		if yyb1573 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1573-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1583 := z.EncBinary()
		_ = yym1583
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1584 := !z.EncBinary()
			yy2arr1584 := z.EncBasicHandle().StructToArray
			var yyq1584 [3]bool
			_, _, _ = yysep1584, yyq1584, yy2arr1584
			const yyr1584 bool = false
			yyq1584[0] = x.Waiting != nil
			yyq1584[1] = x.Running != nil
			yyq1584[2] = x.Terminated != nil
			var yynn1584 int
			if yyr1584 || yy2arr1584 {
				r.EncodeArrayStart(3)
			} else {
				yynn1584 = 0
				for _, b := range yyq1584 {
					if b {
						yynn1584++
					}
				}
				r.EncodeMapStart(yynn1584)
				yynn1584 = 0
			}
			if yyr1584 || yy2arr1584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1584[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1584[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1584 || yy2arr1584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1584[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1584[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1584 || yy2arr1584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1584[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1584[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1584 || yy2arr1584 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1588 := z.DecBinary()
	_ = yym1588
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1589 := r.ContainerType()
		if yyct1589 == codecSelferValueTypeMap1234 {
			yyl1589 := r.ReadMapStart()
			if yyl1589 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1589, d)
			}
		} else if yyct1589 == codecSelferValueTypeArray1234 {
			yyl1589 := r.ReadArrayStart()
			if yyl1589 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1589, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1590Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1590Slc
	var yyhl1590 bool = l >= 0
	for yyj1590 := 0; ; yyj1590++ {
		if yyhl1590 {
			if yyj1590 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1590Slc = r.DecodeBytes(yys1590Slc, true, true)
		yys1590 := string(yys1590Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1590 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1590)
		} // end switch yys1590
	} // end for yyj1590
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1594 int
	var yyb1594 bool
	var yyhl1594 bool = l >= 0
	yyj1594++
	if yyhl1594 {
		yyb1594 = yyj1594 > l
	} else {
		yyb1594 = r.CheckBreak()
	}
	if yyb1594 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1594++
	if yyhl1594 {
		yyb1594 = yyj1594 > l
	} else {
		yyb1594 = r.CheckBreak()
	}
	if yyb1594 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1594++
	if yyhl1594 {
		yyb1594 = yyj1594 > l
	} else {
		yyb1594 = r.CheckBreak()
	}
	if yyb1594 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1594++
		if yyhl1594 {
			yyb1594 = yyj1594 > l
		} else {
			yyb1594 = r.CheckBreak()
		}
		if yyb1594 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1594-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1598 := z.EncBinary()
		_ = yym1598
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1599 := !z.EncBinary()
			yy2arr1599 := z.EncBasicHandle().StructToArray
			var yyq1599 [8]bool
			_, _, _ = yysep1599, yyq1599, yy2arr1599
			const yyr1599 bool = false
			yyq1599[1] = true
			yyq1599[2] = true
			yyq1599[7] = x.ContainerID != ""
			var yynn1599 int
			if yyr1599 || yy2arr1599 {
				r.EncodeArrayStart(8)
			} else {
				yynn1599 = 5
				for _, b := range yyq1599 {
					if b {
						yynn1599++
					}
				}
				r.EncodeMapStart(yynn1599)
				yynn1599 = 0
			}
			if yyr1599 || yy2arr1599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1601 := z.EncBinary()
				_ = yym1601
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1602 := z.EncBinary()
				_ = yym1602
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1599 || yy2arr1599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1599[1] {
					yy1604 := &x.State
					yy1604.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1599[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1605 := &x.State
					yy1605.CodecEncodeSelf(e)
				}
			}
			if yyr1599 || yy2arr1599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1599[2] {
					yy1607 := &x.LastTerminationState
					yy1607.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1599[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1608 := &x.LastTerminationState
					yy1608.CodecEncodeSelf(e)
				}
			}
			if yyr1599 || yy2arr1599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1610 := z.EncBinary()
				_ = yym1610
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1611 := z.EncBinary()
				_ = yym1611
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1599 || yy2arr1599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1613 := z.EncBinary()
				_ = yym1613
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1614 := z.EncBinary()
				_ = yym1614
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1599 || yy2arr1599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1616 := z.EncBinary()
				_ = yym1616
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1617 := z.EncBinary()
				_ = yym1617
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1599 || yy2arr1599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1619 := z.EncBinary()
				_ = yym1619
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1620 := z.EncBinary()
				_ = yym1620
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1599 || yy2arr1599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1599[7] {
					yym1622 := z.EncBinary()
					_ = yym1622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1599[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1623 := z.EncBinary()
					_ = yym1623
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1599 || yy2arr1599 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1624 := z.DecBinary()
	_ = yym1624
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1625 := r.ContainerType()
		if yyct1625 == codecSelferValueTypeMap1234 {
			yyl1625 := r.ReadMapStart()
			if yyl1625 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1625, d)
			}
		} else if yyct1625 == codecSelferValueTypeArray1234 {
			yyl1625 := r.ReadArrayStart()
			if yyl1625 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1625, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1626Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1626Slc
	var yyhl1626 bool = l >= 0
	for yyj1626 := 0; ; yyj1626++ {
		if yyhl1626 {
			if yyj1626 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1626Slc = r.DecodeBytes(yys1626Slc, true, true)
		yys1626 := string(yys1626Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1626 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1628 := &x.State
				yyv1628.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1629 := &x.LastTerminationState
				yyv1629.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1626)
		} // end switch yys1626
	} // end for yyj1626
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1635 int
	var yyb1635 bool
	var yyhl1635 bool = l >= 0
	yyj1635++
	if yyhl1635 {
		yyb1635 = yyj1635 > l
	} else {
		yyb1635 = r.CheckBreak()
	}
	if yyb1635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1635++
	if yyhl1635 {
		yyb1635 = yyj1635 > l
	} else {
		yyb1635 = r.CheckBreak()
	}
	if yyb1635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1637 := &x.State
		yyv1637.CodecDecodeSelf(d)
	}
	yyj1635++
	if yyhl1635 {
		yyb1635 = yyj1635 > l
	} else {
		yyb1635 = r.CheckBreak()
	}
	if yyb1635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1638 := &x.LastTerminationState
		yyv1638.CodecDecodeSelf(d)
	}
	yyj1635++
	if yyhl1635 {
		yyb1635 = yyj1635 > l
	} else {
		yyb1635 = r.CheckBreak()
	}
	if yyb1635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1635++
	if yyhl1635 {
		yyb1635 = yyj1635 > l
	} else {
		yyb1635 = r.CheckBreak()
	}
	if yyb1635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1635++
	if yyhl1635 {
		yyb1635 = yyj1635 > l
	} else {
		yyb1635 = r.CheckBreak()
	}
	if yyb1635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1635++
	if yyhl1635 {
		yyb1635 = yyj1635 > l
	} else {
		yyb1635 = r.CheckBreak()
	}
	if yyb1635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1635++
	if yyhl1635 {
		yyb1635 = yyj1635 > l
	} else {
		yyb1635 = r.CheckBreak()
	}
	if yyb1635 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1635++
		if yyhl1635 {
			yyb1635 = yyj1635 > l
		} else {
			yyb1635 = r.CheckBreak()
		}
		if yyb1635 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1635-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1644 := z.EncBinary()
	_ = yym1644
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1645 := z.DecBinary()
	_ = yym1645
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1646 := z.EncBinary()
	_ = yym1646
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1647 := z.DecBinary()
	_ = yym1647
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1648 := z.EncBinary()
		_ = yym1648
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1649 := !z.EncBinary()
			yy2arr1649 := z.EncBasicHandle().StructToArray
			var yyq1649 [6]bool
			_, _, _ = yysep1649, yyq1649, yy2arr1649
			const yyr1649 bool = false
			yyq1649[2] = true
			yyq1649[3] = true
			yyq1649[4] = x.Reason != ""
			yyq1649[5] = x.Message != ""
			var yynn1649 int
			if yyr1649 || yy2arr1649 {
				r.EncodeArrayStart(6)
			} else {
				yynn1649 = 2
				for _, b := range yyq1649 {
					if b {
						yynn1649++
					}
				}
				r.EncodeMapStart(yynn1649)
				yynn1649 = 0
			}
			if yyr1649 || yy2arr1649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1649 || yy2arr1649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1649 || yy2arr1649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1649[2] {
					yy1653 := &x.LastProbeTime
					yym1654 := z.EncBinary()
					_ = yym1654
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1653) {
					} else if yym1654 {
						z.EncBinaryMarshal(yy1653)
					} else if !yym1654 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1653)
					} else {
						z.EncFallback(yy1653)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1649[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1655 := &x.LastProbeTime
					yym1656 := z.EncBinary()
					_ = yym1656
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1655) {
					} else if yym1656 {
						z.EncBinaryMarshal(yy1655)
					} else if !yym1656 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1655)
					} else {
						z.EncFallback(yy1655)
					}
				}
			}
			if yyr1649 || yy2arr1649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1649[3] {
					yy1658 := &x.LastTransitionTime
					yym1659 := z.EncBinary()
					_ = yym1659
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1658) {
					} else if yym1659 {
						z.EncBinaryMarshal(yy1658)
					} else if !yym1659 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1658)
					} else {
						z.EncFallback(yy1658)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1649[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1660 := &x.LastTransitionTime
					yym1661 := z.EncBinary()
					_ = yym1661
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1660) {
					} else if yym1661 {
						z.EncBinaryMarshal(yy1660)
					} else if !yym1661 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1660)
					} else {
						z.EncFallback(yy1660)
					}
				}
			}
			if yyr1649 || yy2arr1649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1649[4] {
					yym1663 := z.EncBinary()
					_ = yym1663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1649[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1664 := z.EncBinary()
					_ = yym1664
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1649 || yy2arr1649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1649[5] {
					yym1666 := z.EncBinary()
					_ = yym1666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1649[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1667 := z.EncBinary()
					_ = yym1667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1649 || yy2arr1649 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1668 := z.DecBinary()
	_ = yym1668
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1669 := r.ContainerType()
		if yyct1669 == codecSelferValueTypeMap1234 {
			yyl1669 := r.ReadMapStart()
			if yyl1669 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1669, d)
			}
		} else if yyct1669 == codecSelferValueTypeArray1234 {
			yyl1669 := r.ReadArrayStart()
			if yyl1669 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1669, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1670Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1670Slc
	var yyhl1670 bool = l >= 0
	for yyj1670 := 0; ; yyj1670++ {
		if yyhl1670 {
			if yyj1670 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1670Slc = r.DecodeBytes(yys1670Slc, true, true)
		yys1670 := string(yys1670Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1670 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1673 := &x.LastProbeTime
				yym1674 := z.DecBinary()
				_ = yym1674
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1673) {
				} else if yym1674 {
					z.DecBinaryUnmarshal(yyv1673)
				} else if !yym1674 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1673)
				} else {
					z.DecFallback(yyv1673, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1675 := &x.LastTransitionTime
				yym1676 := z.DecBinary()
				_ = yym1676
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1675) {
				} else if yym1676 {
					z.DecBinaryUnmarshal(yyv1675)
				} else if !yym1676 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1675)
				} else {
					z.DecFallback(yyv1675, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1670)
		} // end switch yys1670
	} // end for yyj1670
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1679 int
	var yyb1679 bool
	var yyhl1679 bool = l >= 0
	yyj1679++
	if yyhl1679 {
		yyb1679 = yyj1679 > l
	} else {
		yyb1679 = r.CheckBreak()
	}
	if yyb1679 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1679++
	if yyhl1679 {
		yyb1679 = yyj1679 > l
	} else {
		yyb1679 = r.CheckBreak()
	}
	if yyb1679 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1679++
	if yyhl1679 {
		yyb1679 = yyj1679 > l
	} else {
		yyb1679 = r.CheckBreak()
	}
	if yyb1679 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1682 := &x.LastProbeTime
		yym1683 := z.DecBinary()
		_ = yym1683
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1682) {
		} else if yym1683 {
			z.DecBinaryUnmarshal(yyv1682)
		} else if !yym1683 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1682)
		} else {
			z.DecFallback(yyv1682, false)
		}
	}
	yyj1679++
	if yyhl1679 {
		yyb1679 = yyj1679 > l
	} else {
		yyb1679 = r.CheckBreak()
	}
	if yyb1679 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1684 := &x.LastTransitionTime
		yym1685 := z.DecBinary()
		_ = yym1685
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1684) {
		} else if yym1685 {
			z.DecBinaryUnmarshal(yyv1684)
		} else if !yym1685 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1684)
		} else {
			z.DecFallback(yyv1684, false)
		}
	}
	yyj1679++
	if yyhl1679 {
		yyb1679 = yyj1679 > l
	} else {
		yyb1679 = r.CheckBreak()
	}
	if yyb1679 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1679++
	if yyhl1679 {
		yyb1679 = yyj1679 > l
	} else {
		yyb1679 = r.CheckBreak()
	}
	if yyb1679 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1679++
		if yyhl1679 {
			yyb1679 = yyj1679 > l
		} else {
			yyb1679 = r.CheckBreak()
		}
		if yyb1679 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1679-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1688 := z.EncBinary()
	_ = yym1688
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1689 := z.DecBinary()
	_ = yym1689
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1690 := z.EncBinary()
	_ = yym1690
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1691 := z.DecBinary()
	_ = yym1691
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1692 := z.EncBinary()
		_ = yym1692
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1693 := !z.EncBinary()
			yy2arr1693 := z.EncBasicHandle().StructToArray
			var yyq1693 [1]bool
			_, _, _ = yysep1693, yyq1693, yy2arr1693
			const yyr1693 bool = false
			var yynn1693 int
			if yyr1693 || yy2arr1693 {
				r.EncodeArrayStart(1)
			} else {
				yynn1693 = 1
				for _, b := range yyq1693 {
					if b {
						yynn1693++
					}
				}
				r.EncodeMapStart(yynn1693)
				yynn1693 = 0
			}
			if yyr1693 || yy2arr1693 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1695 := z.EncBinary()
					_ = yym1695
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1696 := z.EncBinary()
					_ = yym1696
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1693 || yy2arr1693 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1697 := z.DecBinary()
	_ = yym1697
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1698 := r.ContainerType()
		if yyct1698 == codecSelferValueTypeMap1234 {
			yyl1698 := r.ReadMapStart()
			if yyl1698 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1698, d)
			}
		} else if yyct1698 == codecSelferValueTypeArray1234 {
			yyl1698 := r.ReadArrayStart()
			if yyl1698 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1698, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1699Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1699Slc
	var yyhl1699 bool = l >= 0
	for yyj1699 := 0; ; yyj1699++ {
		if yyhl1699 {
			if yyj1699 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1699Slc = r.DecodeBytes(yys1699Slc, true, true)
		yys1699 := string(yys1699Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1699 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1700 := &x.NodeSelectorTerms
				yym1701 := z.DecBinary()
				_ = yym1701
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1700), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1699)
		} // end switch yys1699
	} // end for yyj1699
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1702 int
	var yyb1702 bool
	var yyhl1702 bool = l >= 0
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1703 := &x.NodeSelectorTerms
		yym1704 := z.DecBinary()
		_ = yym1704
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1703), d)
		}
	}
	for {
		yyj1702++
		if yyhl1702 {
			yyb1702 = yyj1702 > l
		} else {
			yyb1702 = r.CheckBreak()
		}
		if yyb1702 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1702-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1705 := z.EncBinary()
		_ = yym1705
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1706 := !z.EncBinary()
			yy2arr1706 := z.EncBasicHandle().StructToArray
			var yyq1706 [1]bool
			_, _, _ = yysep1706, yyq1706, yy2arr1706
			const yyr1706 bool = false
			var yynn1706 int
			if yyr1706 || yy2arr1706 {
				r.EncodeArrayStart(1)
			} else {
				yynn1706 = 1
				for _, b := range yyq1706 {
					if b {
						yynn1706++
					}
				}
				r.EncodeMapStart(yynn1706)
				yynn1706 = 0
			}
			if yyr1706 || yy2arr1706 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1708 := z.EncBinary()
					_ = yym1708
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1709 := z.EncBinary()
					_ = yym1709
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1706 || yy2arr1706 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1710 := z.DecBinary()
	_ = yym1710
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1711 := r.ContainerType()
		if yyct1711 == codecSelferValueTypeMap1234 {
			yyl1711 := r.ReadMapStart()
			if yyl1711 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1711, d)
			}
		} else if yyct1711 == codecSelferValueTypeArray1234 {
			yyl1711 := r.ReadArrayStart()
			if yyl1711 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1711, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1712Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1712Slc
	var yyhl1712 bool = l >= 0
	for yyj1712 := 0; ; yyj1712++ {
		if yyhl1712 {
			if yyj1712 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1712Slc = r.DecodeBytes(yys1712Slc, true, true)
		yys1712 := string(yys1712Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1712 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1713 := &x.MatchExpressions
				yym1714 := z.DecBinary()
				_ = yym1714
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1713), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1712)
		} // end switch yys1712
	} // end for yyj1712
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1715 int
	var yyb1715 bool
	var yyhl1715 bool = l >= 0
	yyj1715++
	if yyhl1715 {
		yyb1715 = yyj1715 > l
	} else {
		yyb1715 = r.CheckBreak()
	}
	if yyb1715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1716 := &x.MatchExpressions
		yym1717 := z.DecBinary()
		_ = yym1717
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1716), d)
		}
	}
	for {
		yyj1715++
		if yyhl1715 {
			yyb1715 = yyj1715 > l
		} else {
			yyb1715 = r.CheckBreak()
		}
		if yyb1715 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1715-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1718 := z.EncBinary()
		_ = yym1718
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1719 := !z.EncBinary()
			yy2arr1719 := z.EncBasicHandle().StructToArray
			var yyq1719 [3]bool
			_, _, _ = yysep1719, yyq1719, yy2arr1719
			const yyr1719 bool = false
			yyq1719[2] = len(x.Values) != 0
			var yynn1719 int
			if yyr1719 || yy2arr1719 {
				r.EncodeArrayStart(3)
			} else {
				yynn1719 = 2
				for _, b := range yyq1719 {
					if b {
						yynn1719++
					}
				}
				r.EncodeMapStart(yynn1719)
				yynn1719 = 0
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1721 := z.EncBinary()
				_ = yym1721
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1722 := z.EncBinary()
				_ = yym1722
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1719[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1725 := z.EncBinary()
						_ = yym1725
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1719[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1726 := z.EncBinary()
						_ = yym1726
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1727 := z.DecBinary()
	_ = yym1727
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1728 := r.ContainerType()
		if yyct1728 == codecSelferValueTypeMap1234 {
			yyl1728 := r.ReadMapStart()
			if yyl1728 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1728, d)
			}
		} else if yyct1728 == codecSelferValueTypeArray1234 {
			yyl1728 := r.ReadArrayStart()
			if yyl1728 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1728, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1729Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1729Slc
	var yyhl1729 bool = l >= 0
	for yyj1729 := 0; ; yyj1729++ {
		if yyhl1729 {
			if yyj1729 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1729Slc = r.DecodeBytes(yys1729Slc, true, true)
		yys1729 := string(yys1729Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1729 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1732 := &x.Values
				yym1733 := z.DecBinary()
				_ = yym1733
				if false {
				} else {
					z.F.DecSliceStringX(yyv1732, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1729)
		} // end switch yys1729
	} // end for yyj1729
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1734 int
	var yyb1734 bool
	var yyhl1734 bool = l >= 0
	yyj1734++
	if yyhl1734 {
		yyb1734 = yyj1734 > l
	} else {
		yyb1734 = r.CheckBreak()
	}
	if yyb1734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1734++
	if yyhl1734 {
		yyb1734 = yyj1734 > l
	} else {
		yyb1734 = r.CheckBreak()
	}
	if yyb1734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1734++
	if yyhl1734 {
		yyb1734 = yyj1734 > l
	} else {
		yyb1734 = r.CheckBreak()
	}
	if yyb1734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1737 := &x.Values
		yym1738 := z.DecBinary()
		_ = yym1738
		if false {
		} else {
			z.F.DecSliceStringX(yyv1737, false, d)
		}
	}
	for {
		yyj1734++
		if yyhl1734 {
			yyb1734 = yyj1734 > l
		} else {
			yyb1734 = r.CheckBreak()
		}
		if yyb1734 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1734-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1739 := z.EncBinary()
	_ = yym1739
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1740 := z.DecBinary()
	_ = yym1740
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1741 := z.EncBinary()
		_ = yym1741
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1742 := !z.EncBinary()
			yy2arr1742 := z.EncBasicHandle().StructToArray
			var yyq1742 [3]bool
			_, _, _ = yysep1742, yyq1742, yy2arr1742
			const yyr1742 bool = false
			yyq1742[0] = x.NodeAffinity != nil
			yyq1742[1] = x.PodAffinity != nil
			yyq1742[2] = x.PodAntiAffinity != nil
			var yynn1742 int
			if yyr1742 || yy2arr1742 {
				r.EncodeArrayStart(3)
			} else {
				yynn1742 = 0
				for _, b := range yyq1742 {
					if b {
						yynn1742++
					}
				}
				r.EncodeMapStart(yynn1742)
				yynn1742 = 0
			}
			if yyr1742 || yy2arr1742 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1742[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1742[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1742 || yy2arr1742 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1742[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1742[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1742 || yy2arr1742 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1742[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1742[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1742 || yy2arr1742 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1746 := z.DecBinary()
	_ = yym1746
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1747 := r.ContainerType()
		if yyct1747 == codecSelferValueTypeMap1234 {
			yyl1747 := r.ReadMapStart()
			if yyl1747 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1747, d)
			}
		} else if yyct1747 == codecSelferValueTypeArray1234 {
			yyl1747 := r.ReadArrayStart()
			if yyl1747 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1747, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1748Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1748Slc
	var yyhl1748 bool = l >= 0
	for yyj1748 := 0; ; yyj1748++ {
		if yyhl1748 {
			if yyj1748 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1748Slc = r.DecodeBytes(yys1748Slc, true, true)
		yys1748 := string(yys1748Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1748 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1748)
		} // end switch yys1748
	} // end for yyj1748
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1752 int
	var yyb1752 bool
	var yyhl1752 bool = l >= 0
	yyj1752++
	if yyhl1752 {
		yyb1752 = yyj1752 > l
	} else {
		yyb1752 = r.CheckBreak()
	}
	if yyb1752 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1752++
	if yyhl1752 {
		yyb1752 = yyj1752 > l
	} else {
		yyb1752 = r.CheckBreak()
	}
	if yyb1752 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1752++
	if yyhl1752 {
		yyb1752 = yyj1752 > l
	} else {
		yyb1752 = r.CheckBreak()
	}
	if yyb1752 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1752++
		if yyhl1752 {
			yyb1752 = yyj1752 > l
		} else {
			yyb1752 = r.CheckBreak()
		}
		if yyb1752 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1752-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1756 := z.EncBinary()
		_ = yym1756
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1757 := !z.EncBinary()
			yy2arr1757 := z.EncBasicHandle().StructToArray
			var yyq1757 [2]bool
			_, _, _ = yysep1757, yyq1757, yy2arr1757
			const yyr1757 bool = false
			yyq1757[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1757[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1757 int
			if yyr1757 || yy2arr1757 {
				r.EncodeArrayStart(2)
			} else {
				yynn1757 = 0
				for _, b := range yyq1757 {
					if b {
						yynn1757++
					}
				}
				r.EncodeMapStart(yynn1757)
				yynn1757 = 0
			}
			if yyr1757 || yy2arr1757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1757[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1759 := z.EncBinary()
						_ = yym1759
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1757[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1760 := z.EncBinary()
						_ = yym1760
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1757 || yy2arr1757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1757[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1762 := z.EncBinary()
						_ = yym1762
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1757[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1763 := z.EncBinary()
						_ = yym1763
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1757 || yy2arr1757 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1764 := z.DecBinary()
	_ = yym1764
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1765 := r.ContainerType()
		if yyct1765 == codecSelferValueTypeMap1234 {
			yyl1765 := r.ReadMapStart()
			if yyl1765 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1765, d)
			}
		} else if yyct1765 == codecSelferValueTypeArray1234 {
			yyl1765 := r.ReadArrayStart()
			if yyl1765 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1765, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1766Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1766Slc
	var yyhl1766 bool = l >= 0
	for yyj1766 := 0; ; yyj1766++ {
		if yyhl1766 {
			if yyj1766 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1766Slc = r.DecodeBytes(yys1766Slc, true, true)
		yys1766 := string(yys1766Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1766 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1767 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1768 := z.DecBinary()
				_ = yym1768
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1767), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1769 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1770 := z.DecBinary()
				_ = yym1770
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1769), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1766)
		} // end switch yys1766
	} // end for yyj1766
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1771 int
	var yyb1771 bool
	var yyhl1771 bool = l >= 0
	yyj1771++
	if yyhl1771 {
		yyb1771 = yyj1771 > l
	} else {
		yyb1771 = r.CheckBreak()
	}
	if yyb1771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1772 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1773 := z.DecBinary()
		_ = yym1773
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1772), d)
		}
	}
	yyj1771++
	if yyhl1771 {
		yyb1771 = yyj1771 > l
	} else {
		yyb1771 = r.CheckBreak()
	}
	if yyb1771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1774 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1775 := z.DecBinary()
		_ = yym1775
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1774), d)
		}
	}
	for {
		yyj1771++
		if yyhl1771 {
			yyb1771 = yyj1771 > l
		} else {
			yyb1771 = r.CheckBreak()
		}
		if yyb1771 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1771-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1776 := z.EncBinary()
		_ = yym1776
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1777 := !z.EncBinary()
			yy2arr1777 := z.EncBasicHandle().StructToArray
			var yyq1777 [2]bool
			_, _, _ = yysep1777, yyq1777, yy2arr1777
			const yyr1777 bool = false
			yyq1777[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1777[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1777 int
			if yyr1777 || yy2arr1777 {
				r.EncodeArrayStart(2)
			} else {
				yynn1777 = 0
				for _, b := range yyq1777 {
					if b {
						yynn1777++
					}
				}
				r.EncodeMapStart(yynn1777)
				yynn1777 = 0
			}
			if yyr1777 || yy2arr1777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1777[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1779 := z.EncBinary()
						_ = yym1779
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1777[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1780 := z.EncBinary()
						_ = yym1780
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1777 || yy2arr1777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1777[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1782 := z.EncBinary()
						_ = yym1782
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1777[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1783 := z.EncBinary()
						_ = yym1783
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1777 || yy2arr1777 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1784 := z.DecBinary()
	_ = yym1784
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1785 := r.ContainerType()
		if yyct1785 == codecSelferValueTypeMap1234 {
			yyl1785 := r.ReadMapStart()
			if yyl1785 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1785, d)
			}
		} else if yyct1785 == codecSelferValueTypeArray1234 {
			yyl1785 := r.ReadArrayStart()
			if yyl1785 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1785, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1786Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1786Slc
	var yyhl1786 bool = l >= 0
	for yyj1786 := 0; ; yyj1786++ {
		if yyhl1786 {
			if yyj1786 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1786Slc = r.DecodeBytes(yys1786Slc, true, true)
		yys1786 := string(yys1786Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1786 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1787 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1788 := z.DecBinary()
				_ = yym1788
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1787), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1789 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1790 := z.DecBinary()
				_ = yym1790
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1789), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1786)
		} // end switch yys1786
	} // end for yyj1786
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1791 int
	var yyb1791 bool
	var yyhl1791 bool = l >= 0
	yyj1791++
	if yyhl1791 {
		yyb1791 = yyj1791 > l
	} else {
		yyb1791 = r.CheckBreak()
	}
	if yyb1791 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1792 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1793 := z.DecBinary()
		_ = yym1793
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1792), d)
		}
	}
	yyj1791++
	if yyhl1791 {
		yyb1791 = yyj1791 > l
	} else {
		yyb1791 = r.CheckBreak()
	}
	if yyb1791 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1794 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1795 := z.DecBinary()
		_ = yym1795
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1794), d)
		}
	}
	for {
		yyj1791++
		if yyhl1791 {
			yyb1791 = yyj1791 > l
		} else {
			yyb1791 = r.CheckBreak()
		}
		if yyb1791 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1791-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1796 := z.EncBinary()
		_ = yym1796
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1797 := !z.EncBinary()
			yy2arr1797 := z.EncBasicHandle().StructToArray
			var yyq1797 [2]bool
			_, _, _ = yysep1797, yyq1797, yy2arr1797
			const yyr1797 bool = false
			var yynn1797 int
			if yyr1797 || yy2arr1797 {
				r.EncodeArrayStart(2)
			} else {
				yynn1797 = 2
				for _, b := range yyq1797 {
					if b {
						yynn1797++
					}
				}
				r.EncodeMapStart(yynn1797)
				yynn1797 = 0
			}
			if yyr1797 || yy2arr1797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1799 := z.EncBinary()
				_ = yym1799
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1800 := z.EncBinary()
				_ = yym1800
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1797 || yy2arr1797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1802 := &x.PodAffinityTerm
				yy1802.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1803 := &x.PodAffinityTerm
				yy1803.CodecEncodeSelf(e)
			}
			if yyr1797 || yy2arr1797 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1804 := z.DecBinary()
	_ = yym1804
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1805 := r.ContainerType()
		if yyct1805 == codecSelferValueTypeMap1234 {
			yyl1805 := r.ReadMapStart()
			if yyl1805 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1805, d)
			}
		} else if yyct1805 == codecSelferValueTypeArray1234 {
			yyl1805 := r.ReadArrayStart()
			if yyl1805 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1805, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1806Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1806Slc
	var yyhl1806 bool = l >= 0
	for yyj1806 := 0; ; yyj1806++ {
		if yyhl1806 {
			if yyj1806 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1806Slc = r.DecodeBytes(yys1806Slc, true, true)
		yys1806 := string(yys1806Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1806 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1808 := &x.PodAffinityTerm
				yyv1808.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1806)
		} // end switch yys1806
	} // end for yyj1806
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1809 int
	var yyb1809 bool
	var yyhl1809 bool = l >= 0
	yyj1809++
	if yyhl1809 {
		yyb1809 = yyj1809 > l
	} else {
		yyb1809 = r.CheckBreak()
	}
	if yyb1809 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1809++
	if yyhl1809 {
		yyb1809 = yyj1809 > l
	} else {
		yyb1809 = r.CheckBreak()
	}
	if yyb1809 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1811 := &x.PodAffinityTerm
		yyv1811.CodecDecodeSelf(d)
	}
	for {
		yyj1809++
		if yyhl1809 {
			yyb1809 = yyj1809 > l
		} else {
			yyb1809 = r.CheckBreak()
		}
		if yyb1809 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1809-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1812 := z.EncBinary()
		_ = yym1812
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1813 := !z.EncBinary()
			yy2arr1813 := z.EncBasicHandle().StructToArray
			var yyq1813 [3]bool
			_, _, _ = yysep1813, yyq1813, yy2arr1813
			const yyr1813 bool = false
			yyq1813[0] = x.LabelSelector != nil
			yyq1813[2] = x.TopologyKey != ""
			var yynn1813 int
			if yyr1813 || yy2arr1813 {
				r.EncodeArrayStart(3)
			} else {
				yynn1813 = 1
				for _, b := range yyq1813 {
					if b {
						yynn1813++
					}
				}
				r.EncodeMapStart(yynn1813)
				yynn1813 = 0
			}
			if yyr1813 || yy2arr1813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1813[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1815 := z.EncBinary()
						_ = yym1815
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1813[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1816 := z.EncBinary()
						_ = yym1816
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1813 || yy2arr1813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1818 := z.EncBinary()
					_ = yym1818
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1819 := z.EncBinary()
					_ = yym1819
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1813 || yy2arr1813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1813[2] {
					yym1821 := z.EncBinary()
					_ = yym1821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1813[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1822 := z.EncBinary()
					_ = yym1822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1813 || yy2arr1813 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1823 := z.DecBinary()
	_ = yym1823
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1824 := r.ContainerType()
		if yyct1824 == codecSelferValueTypeMap1234 {
			yyl1824 := r.ReadMapStart()
			if yyl1824 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1824, d)
			}
		} else if yyct1824 == codecSelferValueTypeArray1234 {
			yyl1824 := r.ReadArrayStart()
			if yyl1824 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1824, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1825Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1825Slc
	var yyhl1825 bool = l >= 0
	for yyj1825 := 0; ; yyj1825++ {
		if yyhl1825 {
			if yyj1825 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1825Slc = r.DecodeBytes(yys1825Slc, true, true)
		yys1825 := string(yys1825Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1825 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym1827 := z.DecBinary()
				_ = yym1827
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1828 := &x.Namespaces
				yym1829 := z.DecBinary()
				_ = yym1829
				if false {
				} else {
					z.F.DecSliceStringX(yyv1828, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1825)
		} // end switch yys1825
	} // end for yyj1825
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1831 int
	var yyb1831 bool
	var yyhl1831 bool = l >= 0
	yyj1831++
	if yyhl1831 {
		yyb1831 = yyj1831 > l
	} else {
		yyb1831 = r.CheckBreak()
	}
	if yyb1831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym1833 := z.DecBinary()
		_ = yym1833
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1831++
	if yyhl1831 {
		yyb1831 = yyj1831 > l
	} else {
		yyb1831 = r.CheckBreak()
	}
	if yyb1831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1834 := &x.Namespaces
		yym1835 := z.DecBinary()
		_ = yym1835
		if false {
		} else {
			z.F.DecSliceStringX(yyv1834, false, d)
		}
	}
	yyj1831++
	if yyhl1831 {
		yyb1831 = yyj1831 > l
	} else {
		yyb1831 = r.CheckBreak()
	}
	if yyb1831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1831++
		if yyhl1831 {
			yyb1831 = yyj1831 > l
		} else {
			yyb1831 = r.CheckBreak()
		}
		if yyb1831 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1831-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1837 := z.EncBinary()
		_ = yym1837
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1838 := !z.EncBinary()
			yy2arr1838 := z.EncBasicHandle().StructToArray
			var yyq1838 [2]bool
			_, _, _ = yysep1838, yyq1838, yy2arr1838
			const yyr1838 bool = false
			yyq1838[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1838[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1838 int
			if yyr1838 || yy2arr1838 {
				r.EncodeArrayStart(2)
			} else {
				yynn1838 = 0
				for _, b := range yyq1838 {
					if b {
						yynn1838++
					}
				}
				r.EncodeMapStart(yynn1838)
				yynn1838 = 0
			}
			if yyr1838 || yy2arr1838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1838[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1838[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1838 || yy2arr1838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1838[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1841 := z.EncBinary()
						_ = yym1841
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1838[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1842 := z.EncBinary()
						_ = yym1842
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1838 || yy2arr1838 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1843 := z.DecBinary()
	_ = yym1843
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1844 := r.ContainerType()
		if yyct1844 == codecSelferValueTypeMap1234 {
			yyl1844 := r.ReadMapStart()
			if yyl1844 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1844, d)
			}
		} else if yyct1844 == codecSelferValueTypeArray1234 {
			yyl1844 := r.ReadArrayStart()
			if yyl1844 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1844, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1845Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1845Slc
	var yyhl1845 bool = l >= 0
	for yyj1845 := 0; ; yyj1845++ {
		if yyhl1845 {
			if yyj1845 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1845Slc = r.DecodeBytes(yys1845Slc, true, true)
		yys1845 := string(yys1845Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1845 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1847 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1848 := z.DecBinary()
				_ = yym1848
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1847), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1845)
		} // end switch yys1845
	} // end for yyj1845
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1849 int
	var yyb1849 bool
	var yyhl1849 bool = l >= 0
	yyj1849++
	if yyhl1849 {
		yyb1849 = yyj1849 > l
	} else {
		yyb1849 = r.CheckBreak()
	}
	if yyb1849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1849++
	if yyhl1849 {
		yyb1849 = yyj1849 > l
	} else {
		yyb1849 = r.CheckBreak()
	}
	if yyb1849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1851 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1852 := z.DecBinary()
		_ = yym1852
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1851), d)
		}
	}
	for {
		yyj1849++
		if yyhl1849 {
			yyb1849 = yyj1849 > l
		} else {
			yyb1849 = r.CheckBreak()
		}
		if yyb1849 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1849-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1853 := z.EncBinary()
		_ = yym1853
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1854 := !z.EncBinary()
			yy2arr1854 := z.EncBasicHandle().StructToArray
			var yyq1854 [2]bool
			_, _, _ = yysep1854, yyq1854, yy2arr1854
			const yyr1854 bool = false
			var yynn1854 int
			if yyr1854 || yy2arr1854 {
				r.EncodeArrayStart(2)
			} else {
				yynn1854 = 2
				for _, b := range yyq1854 {
					if b {
						yynn1854++
					}
				}
				r.EncodeMapStart(yynn1854)
				yynn1854 = 0
			}
			if yyr1854 || yy2arr1854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1856 := z.EncBinary()
				_ = yym1856
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1857 := z.EncBinary()
				_ = yym1857
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1854 || yy2arr1854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1859 := &x.Preference
				yy1859.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1860 := &x.Preference
				yy1860.CodecEncodeSelf(e)
			}
			if yyr1854 || yy2arr1854 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1861 := z.DecBinary()
	_ = yym1861
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1862 := r.ContainerType()
		if yyct1862 == codecSelferValueTypeMap1234 {
			yyl1862 := r.ReadMapStart()
			if yyl1862 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1862, d)
			}
		} else if yyct1862 == codecSelferValueTypeArray1234 {
			yyl1862 := r.ReadArrayStart()
			if yyl1862 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1862, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1863Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1863Slc
	var yyhl1863 bool = l >= 0
	for yyj1863 := 0; ; yyj1863++ {
		if yyhl1863 {
			if yyj1863 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1863Slc = r.DecodeBytes(yys1863Slc, true, true)
		yys1863 := string(yys1863Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1863 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1865 := &x.Preference
				yyv1865.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1863)
		} // end switch yys1863
	} // end for yyj1863
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1866 int
	var yyb1866 bool
	var yyhl1866 bool = l >= 0
	yyj1866++
	if yyhl1866 {
		yyb1866 = yyj1866 > l
	} else {
		yyb1866 = r.CheckBreak()
	}
	if yyb1866 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1866++
	if yyhl1866 {
		yyb1866 = yyj1866 > l
	} else {
		yyb1866 = r.CheckBreak()
	}
	if yyb1866 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1868 := &x.Preference
		yyv1868.CodecDecodeSelf(d)
	}
	for {
		yyj1866++
		if yyhl1866 {
			yyb1866 = yyj1866 > l
		} else {
			yyb1866 = r.CheckBreak()
		}
		if yyb1866 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1866-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1869 := z.EncBinary()
		_ = yym1869
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1870 := !z.EncBinary()
			yy2arr1870 := z.EncBasicHandle().StructToArray
			var yyq1870 [3]bool
			_, _, _ = yysep1870, yyq1870, yy2arr1870
			const yyr1870 bool = false
			yyq1870[1] = x.Value != ""
			var yynn1870 int
			if yyr1870 || yy2arr1870 {
				r.EncodeArrayStart(3)
			} else {
				yynn1870 = 2
				for _, b := range yyq1870 {
					if b {
						yynn1870++
					}
				}
				r.EncodeMapStart(yynn1870)
				yynn1870 = 0
			}
			if yyr1870 || yy2arr1870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1872 := z.EncBinary()
				_ = yym1872
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1873 := z.EncBinary()
				_ = yym1873
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1870 || yy2arr1870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1870[1] {
					yym1875 := z.EncBinary()
					_ = yym1875
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1870[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1876 := z.EncBinary()
					_ = yym1876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1870 || yy2arr1870 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr1870 || yy2arr1870 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1878 := z.DecBinary()
	_ = yym1878
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1879 := r.ContainerType()
		if yyct1879 == codecSelferValueTypeMap1234 {
			yyl1879 := r.ReadMapStart()
			if yyl1879 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1879, d)
			}
		} else if yyct1879 == codecSelferValueTypeArray1234 {
			yyl1879 := r.ReadArrayStart()
			if yyl1879 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1879, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1880Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1880Slc
	var yyhl1880 bool = l >= 0
	for yyj1880 := 0; ; yyj1880++ {
		if yyhl1880 {
			if yyj1880 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1880Slc = r.DecodeBytes(yys1880Slc, true, true)
		yys1880 := string(yys1880Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1880 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1880)
		} // end switch yys1880
	} // end for yyj1880
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1884 int
	var yyb1884 bool
	var yyhl1884 bool = l >= 0
	yyj1884++
	if yyhl1884 {
		yyb1884 = yyj1884 > l
	} else {
		yyb1884 = r.CheckBreak()
	}
	if yyb1884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1884++
	if yyhl1884 {
		yyb1884 = yyj1884 > l
	} else {
		yyb1884 = r.CheckBreak()
	}
	if yyb1884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1884++
	if yyhl1884 {
		yyb1884 = yyj1884 > l
	} else {
		yyb1884 = r.CheckBreak()
	}
	if yyb1884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1884++
		if yyhl1884 {
			yyb1884 = yyj1884 > l
		} else {
			yyb1884 = r.CheckBreak()
		}
		if yyb1884 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1884-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1888 := z.EncBinary()
	_ = yym1888
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1889 := z.DecBinary()
	_ = yym1889
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1890 := z.EncBinary()
		_ = yym1890
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1891 := !z.EncBinary()
			yy2arr1891 := z.EncBasicHandle().StructToArray
			var yyq1891 [4]bool
			_, _, _ = yysep1891, yyq1891, yy2arr1891
			const yyr1891 bool = false
			yyq1891[0] = x.Key != ""
			yyq1891[1] = x.Operator != ""
			yyq1891[2] = x.Value != ""
			yyq1891[3] = x.Effect != ""
			var yynn1891 int
			if yyr1891 || yy2arr1891 {
				r.EncodeArrayStart(4)
			} else {
				yynn1891 = 0
				for _, b := range yyq1891 {
					if b {
						yynn1891++
					}
				}
				r.EncodeMapStart(yynn1891)
				yynn1891 = 0
			}
			if yyr1891 || yy2arr1891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1891[0] {
					yym1893 := z.EncBinary()
					_ = yym1893
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1891[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1894 := z.EncBinary()
					_ = yym1894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr1891 || yy2arr1891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1891[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1891[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr1891 || yy2arr1891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1891[2] {
					yym1897 := z.EncBinary()
					_ = yym1897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1891[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1898 := z.EncBinary()
					_ = yym1898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1891 || yy2arr1891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1891[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1891[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr1891 || yy2arr1891 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1900 := z.DecBinary()
	_ = yym1900
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1901 := r.ContainerType()
		if yyct1901 == codecSelferValueTypeMap1234 {
			yyl1901 := r.ReadMapStart()
			if yyl1901 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1901, d)
			}
		} else if yyct1901 == codecSelferValueTypeArray1234 {
			yyl1901 := r.ReadArrayStart()
			if yyl1901 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1901, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1902Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1902Slc
	var yyhl1902 bool = l >= 0
	for yyj1902 := 0; ; yyj1902++ {
		if yyhl1902 {
			if yyj1902 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1902Slc = r.DecodeBytes(yys1902Slc, true, true)
		yys1902 := string(yys1902Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1902 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1902)
		} // end switch yys1902
	} // end for yyj1902
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1907 int
	var yyb1907 bool
	var yyhl1907 bool = l >= 0
	yyj1907++
	if yyhl1907 {
		yyb1907 = yyj1907 > l
	} else {
		yyb1907 = r.CheckBreak()
	}
	if yyb1907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1907++
	if yyhl1907 {
		yyb1907 = yyj1907 > l
	} else {
		yyb1907 = r.CheckBreak()
	}
	if yyb1907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj1907++
	if yyhl1907 {
		yyb1907 = yyj1907 > l
	} else {
		yyb1907 = r.CheckBreak()
	}
	if yyb1907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1907++
	if yyhl1907 {
		yyb1907 = yyj1907 > l
	} else {
		yyb1907 = r.CheckBreak()
	}
	if yyb1907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1907++
		if yyhl1907 {
			yyb1907 = yyj1907 > l
		} else {
			yyb1907 = r.CheckBreak()
		}
		if yyb1907 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1907-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1912 := z.EncBinary()
	_ = yym1912
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1913 := z.DecBinary()
	_ = yym1913
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1914 := z.EncBinary()
		_ = yym1914
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1915 := !z.EncBinary()
			yy2arr1915 := z.EncBasicHandle().StructToArray
			var yyq1915 [17]bool
			_, _, _ = yysep1915, yyq1915, yy2arr1915
			const yyr1915 bool = false
			yyq1915[0] = len(x.Volumes) != 0
			yyq1915[2] = x.RestartPolicy != ""
			yyq1915[3] = x.TerminationGracePeriodSeconds != nil
			yyq1915[4] = x.ActiveDeadlineSeconds != nil
			yyq1915[5] = x.DNSPolicy != ""
			yyq1915[6] = len(x.NodeSelector) != 0
			yyq1915[7] = x.ServiceAccountName != ""
			yyq1915[8] = x.DeprecatedServiceAccount != ""
			yyq1915[9] = x.NodeName != ""
			yyq1915[10] = x.HostNetwork != false
			yyq1915[11] = x.HostPID != false
			yyq1915[12] = x.HostIPC != false
			yyq1915[13] = x.SecurityContext != nil
			yyq1915[14] = len(x.ImagePullSecrets) != 0
			yyq1915[15] = x.Hostname != ""
			yyq1915[16] = x.Subdomain != ""
			var yynn1915 int
			if yyr1915 || yy2arr1915 {
				r.EncodeArrayStart(17)
			} else {
				yynn1915 = 1
				for _, b := range yyq1915 {
					if b {
						yynn1915++
					}
				}
				r.EncodeMapStart(yynn1915)
				yynn1915 = 0
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1915[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1917 := z.EncBinary()
						_ = yym1917
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1915[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1918 := z.EncBinary()
						_ = yym1918
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1920 := z.EncBinary()
					_ = yym1920
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1921 := z.EncBinary()
					_ = yym1921
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1915[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1915[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1915[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1924 := *x.TerminationGracePeriodSeconds
						yym1925 := z.EncBinary()
						_ = yym1925
						if false {
						} else {
							r.EncodeInt(int64(yy1924))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1915[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1926 := *x.TerminationGracePeriodSeconds
						yym1927 := z.EncBinary()
						_ = yym1927
						if false {
						} else {
							r.EncodeInt(int64(yy1926))
						}
					}
				}
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1915[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1929 := *x.ActiveDeadlineSeconds
						yym1930 := z.EncBinary()
						_ = yym1930
						if false {
						} else {
							r.EncodeInt(int64(yy1929))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1915[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1931 := *x.ActiveDeadlineSeconds
						yym1932 := z.EncBinary()
						_ = yym1932
						if false {
						} else {
							r.EncodeInt(int64(yy1931))
						}
					}
				}
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1915[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1915[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1915[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1935 := z.EncBinary()
						_ = yym1935
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1915[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1936 := z.EncBinary()
						_ = yym1936
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1915[7] {
					yym1938 := z.EncBinary()
					_ = yym1938
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1915[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1939 := z.EncBinary()
					_ = yym1939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1915[8] {
					yym1941 := z.EncBinary()
					_ = yym1941
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1915[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1942 := z.EncBinary()
					_ = yym1942
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1915[9] {
					yym1944 := z.EncBinary()
					_ = yym1944
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1915[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1945 := z.EncBinary()
					_ = yym1945
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1915[10] {
					yym1947 := z.EncBinary()
					_ = yym1947
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1915[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1948 := z.EncBinary()
					_ = yym1948
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1915[11] {
					yym1950 := z.EncBinary()
					_ = yym1950
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1915[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1951 := z.EncBinary()
					_ = yym1951
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1915[12] {
					yym1953 := z.EncBinary()
					_ = yym1953
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1915[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1954 := z.EncBinary()
					_ = yym1954
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1915[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1915[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1915[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1957 := z.EncBinary()
						_ = yym1957
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1915[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1958 := z.EncBinary()
						_ = yym1958
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1915[15] {
					yym1960 := z.EncBinary()
					_ = yym1960
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1915[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1961 := z.EncBinary()
					_ = yym1961
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1915[16] {
					yym1963 := z.EncBinary()
					_ = yym1963
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1915[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1964 := z.EncBinary()
					_ = yym1964
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr1915 || yy2arr1915 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1965 := z.DecBinary()
	_ = yym1965
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1966 := r.ContainerType()
		if yyct1966 == codecSelferValueTypeMap1234 {
			yyl1966 := r.ReadMapStart()
			if yyl1966 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1966, d)
			}
		} else if yyct1966 == codecSelferValueTypeArray1234 {
			yyl1966 := r.ReadArrayStart()
			if yyl1966 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1966, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1967Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1967Slc
	var yyhl1967 bool = l >= 0
	for yyj1967 := 0; ; yyj1967++ {
		if yyhl1967 {
			if yyj1967 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1967Slc = r.DecodeBytes(yys1967Slc, true, true)
		yys1967 := string(yys1967Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1967 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1968 := &x.Volumes
				yym1969 := z.DecBinary()
				_ = yym1969
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1968), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1970 := &x.Containers
				yym1971 := z.DecBinary()
				_ = yym1971
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1970), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1974 := z.DecBinary()
				_ = yym1974
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1976 := z.DecBinary()
				_ = yym1976
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1978 := &x.NodeSelector
				yym1979 := z.DecBinary()
				_ = yym1979
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1978, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1987 := &x.ImagePullSecrets
				yym1988 := z.DecBinary()
				_ = yym1988
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1987), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1967)
		} // end switch yys1967
	} // end for yyj1967
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1991 int
	var yyb1991 bool
	var yyhl1991 bool = l >= 0
	yyj1991++
	if yyhl1991 {
		yyb1991 = yyj1991 > l
	} else {
		yyb1991 = r.CheckBreak()
	}
	if yyb1991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1992 := &x.Volumes
		yym1993 := z.DecBinary()
		_ = yym1993
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1992), d)
		}
	}
	yyj1991++
	if yyhl1991 {
		yyb1991 = yyj1991 > l
	} else {
		yyb1991 = r.CheckBreak()
	}
	if yyb1991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1994 := &x.Containers
		yym1995 := z.DecBinary()
		_ = yym1995
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1994), d)
		}
	}
	yyj1991++
	if yyhl1991 {
		yyb1991 = yyj1991 > l
	} else {
		yyb1991 = r.CheckBreak()
	}
	if yyb1991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1991++
	if yyhl1991 {
		yyb1991 = yyj1991 > l
	} else {
		yyb1991 = r.CheckBreak()
	}
	if yyb1991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1998 := z.DecBinary()
		_ = yym1998
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1991++
	if yyhl1991 {
		yyb1991 = yyj1991 > l
	} else {
		yyb1991 = r.CheckBreak()
	}
	if yyb1991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2000 := z.DecBinary()
		_ = yym2000
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1991++
	if yyhl1991 {
		yyb1991 = yyj1991 > l
	} else {
		yyb1991 = r.CheckBreak()
	}
	if yyb1991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1991++
	if yyhl1991 {
		yyb1991 = yyj1991 > l
	} else {
		yyb1991 = r.CheckBreak()
	}
	if yyb1991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2002 := &x.NodeSelector
		yym2003 := z.DecBinary()
		_ = yym2003
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2002, false, d)
		}
	}
	yyj1991++
	if yyhl1991 {
		yyb1991 = yyj1991 > l
	} else {
		yyb1991 = r.CheckBreak()
	}
	if yyb1991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1991++
	if yyhl1991 {
		yyb1991 = yyj1991 > l
	} else {
		yyb1991 = r.CheckBreak()
	}
	if yyb1991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj1991++
	if yyhl1991 {
		yyb1991 = yyj1991 > l
	} else {
		yyb1991 = r.CheckBreak()
	}
	if yyb1991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1991++
	if yyhl1991 {
		yyb1991 = yyj1991 > l
	} else {
		yyb1991 = r.CheckBreak()
	}
	if yyb1991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1991++
	if yyhl1991 {
		yyb1991 = yyj1991 > l
	} else {
		yyb1991 = r.CheckBreak()
	}
	if yyb1991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1991++
	if yyhl1991 {
		yyb1991 = yyj1991 > l
	} else {
		yyb1991 = r.CheckBreak()
	}
	if yyb1991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1991++
	if yyhl1991 {
		yyb1991 = yyj1991 > l
	} else {
		yyb1991 = r.CheckBreak()
	}
	if yyb1991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1991++
	if yyhl1991 {
		yyb1991 = yyj1991 > l
	} else {
		yyb1991 = r.CheckBreak()
	}
	if yyb1991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2011 := &x.ImagePullSecrets
		yym2012 := z.DecBinary()
		_ = yym2012
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2011), d)
		}
	}
	yyj1991++
	if yyhl1991 {
		yyb1991 = yyj1991 > l
	} else {
		yyb1991 = r.CheckBreak()
	}
	if yyb1991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj1991++
	if yyhl1991 {
		yyb1991 = yyj1991 > l
	} else {
		yyb1991 = r.CheckBreak()
	}
	if yyb1991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj1991++
		if yyhl1991 {
			yyb1991 = yyj1991 > l
		} else {
			yyb1991 = r.CheckBreak()
		}
		if yyb1991 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1991-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2015 := z.EncBinary()
		_ = yym2015
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2016 := !z.EncBinary()
			yy2arr2016 := z.EncBasicHandle().StructToArray
			var yyq2016 [5]bool
			_, _, _ = yysep2016, yyq2016, yy2arr2016
			const yyr2016 bool = false
			yyq2016[0] = x.SELinuxOptions != nil
			yyq2016[1] = x.RunAsUser != nil
			yyq2016[2] = x.RunAsNonRoot != nil
			yyq2016[3] = len(x.SupplementalGroups) != 0
			yyq2016[4] = x.FSGroup != nil
			var yynn2016 int
			if yyr2016 || yy2arr2016 {
				r.EncodeArrayStart(5)
			} else {
				yynn2016 = 0
				for _, b := range yyq2016 {
					if b {
						yynn2016++
					}
				}
				r.EncodeMapStart(yynn2016)
				yynn2016 = 0
			}
			if yyr2016 || yy2arr2016 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2016[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2016[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2016 || yy2arr2016 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2016[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2019 := *x.RunAsUser
						yym2020 := z.EncBinary()
						_ = yym2020
						if false {
						} else {
							r.EncodeInt(int64(yy2019))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2016[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2021 := *x.RunAsUser
						yym2022 := z.EncBinary()
						_ = yym2022
						if false {
						} else {
							r.EncodeInt(int64(yy2021))
						}
					}
				}
			}
			if yyr2016 || yy2arr2016 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2016[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2024 := *x.RunAsNonRoot
						yym2025 := z.EncBinary()
						_ = yym2025
						if false {
						} else {
							r.EncodeBool(bool(yy2024))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2016[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2026 := *x.RunAsNonRoot
						yym2027 := z.EncBinary()
						_ = yym2027
						if false {
						} else {
							r.EncodeBool(bool(yy2026))
						}
					}
				}
			}
			if yyr2016 || yy2arr2016 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2016[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2029 := z.EncBinary()
						_ = yym2029
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2016[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2030 := z.EncBinary()
						_ = yym2030
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2016 || yy2arr2016 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2016[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2032 := *x.FSGroup
						yym2033 := z.EncBinary()
						_ = yym2033
						if false {
						} else {
							r.EncodeInt(int64(yy2032))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2016[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2034 := *x.FSGroup
						yym2035 := z.EncBinary()
						_ = yym2035
						if false {
						} else {
							r.EncodeInt(int64(yy2034))
						}
					}
				}
			}
			if yyr2016 || yy2arr2016 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2036 := z.DecBinary()
	_ = yym2036
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2037 := r.ContainerType()
		if yyct2037 == codecSelferValueTypeMap1234 {
			yyl2037 := r.ReadMapStart()
			if yyl2037 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2037, d)
			}
		} else if yyct2037 == codecSelferValueTypeArray1234 {
			yyl2037 := r.ReadArrayStart()
			if yyl2037 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2037, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2038Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2038Slc
	var yyhl2038 bool = l >= 0
	for yyj2038 := 0; ; yyj2038++ {
		if yyhl2038 {
			if yyj2038 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2038Slc = r.DecodeBytes(yys2038Slc, true, true)
		yys2038 := string(yys2038Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2038 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2041 := z.DecBinary()
				_ = yym2041
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2043 := z.DecBinary()
				_ = yym2043
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2044 := &x.SupplementalGroups
				yym2045 := z.DecBinary()
				_ = yym2045
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2044, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2047 := z.DecBinary()
				_ = yym2047
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2038)
		} // end switch yys2038
	} // end for yyj2038
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2048 int
	var yyb2048 bool
	var yyhl2048 bool = l >= 0
	yyj2048++
	if yyhl2048 {
		yyb2048 = yyj2048 > l
	} else {
		yyb2048 = r.CheckBreak()
	}
	if yyb2048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2048++
	if yyhl2048 {
		yyb2048 = yyj2048 > l
	} else {
		yyb2048 = r.CheckBreak()
	}
	if yyb2048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2051 := z.DecBinary()
		_ = yym2051
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2048++
	if yyhl2048 {
		yyb2048 = yyj2048 > l
	} else {
		yyb2048 = r.CheckBreak()
	}
	if yyb2048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2053 := z.DecBinary()
		_ = yym2053
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2048++
	if yyhl2048 {
		yyb2048 = yyj2048 > l
	} else {
		yyb2048 = r.CheckBreak()
	}
	if yyb2048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2054 := &x.SupplementalGroups
		yym2055 := z.DecBinary()
		_ = yym2055
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2054, false, d)
		}
	}
	yyj2048++
	if yyhl2048 {
		yyb2048 = yyj2048 > l
	} else {
		yyb2048 = r.CheckBreak()
	}
	if yyb2048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2057 := z.DecBinary()
		_ = yym2057
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2048++
		if yyhl2048 {
			yyb2048 = yyj2048 > l
		} else {
			yyb2048 = r.CheckBreak()
		}
		if yyb2048 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2048-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2058 := z.EncBinary()
		_ = yym2058
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2059 := !z.EncBinary()
			yy2arr2059 := z.EncBasicHandle().StructToArray
			var yyq2059 [8]bool
			_, _, _ = yysep2059, yyq2059, yy2arr2059
			const yyr2059 bool = false
			yyq2059[0] = x.Phase != ""
			yyq2059[1] = len(x.Conditions) != 0
			yyq2059[2] = x.Message != ""
			yyq2059[3] = x.Reason != ""
			yyq2059[4] = x.HostIP != ""
			yyq2059[5] = x.PodIP != ""
			yyq2059[6] = x.StartTime != nil
			yyq2059[7] = len(x.ContainerStatuses) != 0
			var yynn2059 int
			if yyr2059 || yy2arr2059 {
				r.EncodeArrayStart(8)
			} else {
				yynn2059 = 0
				for _, b := range yyq2059 {
					if b {
						yynn2059++
					}
				}
				r.EncodeMapStart(yynn2059)
				yynn2059 = 0
			}
			if yyr2059 || yy2arr2059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2059[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2059[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2059 || yy2arr2059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2059[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2062 := z.EncBinary()
						_ = yym2062
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2059[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2063 := z.EncBinary()
						_ = yym2063
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2059 || yy2arr2059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2059[2] {
					yym2065 := z.EncBinary()
					_ = yym2065
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2059[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2066 := z.EncBinary()
					_ = yym2066
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2059 || yy2arr2059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2059[3] {
					yym2068 := z.EncBinary()
					_ = yym2068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2059[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2069 := z.EncBinary()
					_ = yym2069
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2059 || yy2arr2059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2059[4] {
					yym2071 := z.EncBinary()
					_ = yym2071
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2059[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2072 := z.EncBinary()
					_ = yym2072
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2059 || yy2arr2059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2059[5] {
					yym2074 := z.EncBinary()
					_ = yym2074
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2059[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2075 := z.EncBinary()
					_ = yym2075
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2059 || yy2arr2059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2059[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2077 := z.EncBinary()
						_ = yym2077
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2077 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2077 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2059[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2078 := z.EncBinary()
						_ = yym2078
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2078 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2078 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2059 || yy2arr2059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2059[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2080 := z.EncBinary()
						_ = yym2080
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2059[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2081 := z.EncBinary()
						_ = yym2081
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2059 || yy2arr2059 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2082 := z.DecBinary()
	_ = yym2082
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2083 := r.ContainerType()
		if yyct2083 == codecSelferValueTypeMap1234 {
			yyl2083 := r.ReadMapStart()
			if yyl2083 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2083, d)
			}
		} else if yyct2083 == codecSelferValueTypeArray1234 {
			yyl2083 := r.ReadArrayStart()
			if yyl2083 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2083, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2084Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2084Slc
	var yyhl2084 bool = l >= 0
	for yyj2084 := 0; ; yyj2084++ {
		if yyhl2084 {
			if yyj2084 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2084Slc = r.DecodeBytes(yys2084Slc, true, true)
		yys2084 := string(yys2084Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2084 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2086 := &x.Conditions
				yym2087 := z.DecBinary()
				_ = yym2087
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2086), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2093 := z.DecBinary()
				_ = yym2093
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2093 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2093 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2094 := &x.ContainerStatuses
				yym2095 := z.DecBinary()
				_ = yym2095
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2094), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2084)
		} // end switch yys2084
	} // end for yyj2084
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2096 int
	var yyb2096 bool
	var yyhl2096 bool = l >= 0
	yyj2096++
	if yyhl2096 {
		yyb2096 = yyj2096 > l
	} else {
		yyb2096 = r.CheckBreak()
	}
	if yyb2096 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2096++
	if yyhl2096 {
		yyb2096 = yyj2096 > l
	} else {
		yyb2096 = r.CheckBreak()
	}
	if yyb2096 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2098 := &x.Conditions
		yym2099 := z.DecBinary()
		_ = yym2099
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2098), d)
		}
	}
	yyj2096++
	if yyhl2096 {
		yyb2096 = yyj2096 > l
	} else {
		yyb2096 = r.CheckBreak()
	}
	if yyb2096 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2096++
	if yyhl2096 {
		yyb2096 = yyj2096 > l
	} else {
		yyb2096 = r.CheckBreak()
	}
	if yyb2096 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2096++
	if yyhl2096 {
		yyb2096 = yyj2096 > l
	} else {
		yyb2096 = r.CheckBreak()
	}
	if yyb2096 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2096++
	if yyhl2096 {
		yyb2096 = yyj2096 > l
	} else {
		yyb2096 = r.CheckBreak()
	}
	if yyb2096 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2096++
	if yyhl2096 {
		yyb2096 = yyj2096 > l
	} else {
		yyb2096 = r.CheckBreak()
	}
	if yyb2096 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2105 := z.DecBinary()
		_ = yym2105
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2105 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2105 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2096++
	if yyhl2096 {
		yyb2096 = yyj2096 > l
	} else {
		yyb2096 = r.CheckBreak()
	}
	if yyb2096 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2106 := &x.ContainerStatuses
		yym2107 := z.DecBinary()
		_ = yym2107
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2106), d)
		}
	}
	for {
		yyj2096++
		if yyhl2096 {
			yyb2096 = yyj2096 > l
		} else {
			yyb2096 = r.CheckBreak()
		}
		if yyb2096 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2096-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2108 := z.EncBinary()
		_ = yym2108
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2109 := !z.EncBinary()
			yy2arr2109 := z.EncBasicHandle().StructToArray
			var yyq2109 [4]bool
			_, _, _ = yysep2109, yyq2109, yy2arr2109
			const yyr2109 bool = false
			yyq2109[0] = x.Kind != ""
			yyq2109[1] = x.APIVersion != ""
			yyq2109[2] = true
			yyq2109[3] = true
			var yynn2109 int
			if yyr2109 || yy2arr2109 {
				r.EncodeArrayStart(4)
			} else {
				yynn2109 = 0
				for _, b := range yyq2109 {
					if b {
						yynn2109++
					}
				}
				r.EncodeMapStart(yynn2109)
				yynn2109 = 0
			}
			if yyr2109 || yy2arr2109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2109[0] {
					yym2111 := z.EncBinary()
					_ = yym2111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2109[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2112 := z.EncBinary()
					_ = yym2112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2109 || yy2arr2109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2109[1] {
					yym2114 := z.EncBinary()
					_ = yym2114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2109[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2115 := z.EncBinary()
					_ = yym2115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2109 || yy2arr2109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2109[2] {
					yy2117 := &x.ObjectMeta
					yy2117.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2109[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2118 := &x.ObjectMeta
					yy2118.CodecEncodeSelf(e)
				}
			}
			if yyr2109 || yy2arr2109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2109[3] {
					yy2120 := &x.Status
					yy2120.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2109[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2121 := &x.Status
					yy2121.CodecEncodeSelf(e)
				}
			}
			if yyr2109 || yy2arr2109 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2122 := z.DecBinary()
	_ = yym2122
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2123 := r.ContainerType()
		if yyct2123 == codecSelferValueTypeMap1234 {
			yyl2123 := r.ReadMapStart()
			if yyl2123 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2123, d)
			}
		} else if yyct2123 == codecSelferValueTypeArray1234 {
			yyl2123 := r.ReadArrayStart()
			if yyl2123 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2123, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2124Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2124Slc
	var yyhl2124 bool = l >= 0
	for yyj2124 := 0; ; yyj2124++ {
		if yyhl2124 {
			if yyj2124 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2124Slc = r.DecodeBytes(yys2124Slc, true, true)
		yys2124 := string(yys2124Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2124 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2127 := &x.ObjectMeta
				yyv2127.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2128 := &x.Status
				yyv2128.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2124)
		} // end switch yys2124
	} // end for yyj2124
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2129 int
	var yyb2129 bool
	var yyhl2129 bool = l >= 0
	yyj2129++
	if yyhl2129 {
		yyb2129 = yyj2129 > l
	} else {
		yyb2129 = r.CheckBreak()
	}
	if yyb2129 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2129++
	if yyhl2129 {
		yyb2129 = yyj2129 > l
	} else {
		yyb2129 = r.CheckBreak()
	}
	if yyb2129 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2129++
	if yyhl2129 {
		yyb2129 = yyj2129 > l
	} else {
		yyb2129 = r.CheckBreak()
	}
	if yyb2129 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2132 := &x.ObjectMeta
		yyv2132.CodecDecodeSelf(d)
	}
	yyj2129++
	if yyhl2129 {
		yyb2129 = yyj2129 > l
	} else {
		yyb2129 = r.CheckBreak()
	}
	if yyb2129 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2133 := &x.Status
		yyv2133.CodecDecodeSelf(d)
	}
	for {
		yyj2129++
		if yyhl2129 {
			yyb2129 = yyj2129 > l
		} else {
			yyb2129 = r.CheckBreak()
		}
		if yyb2129 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2129-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2134 := z.EncBinary()
		_ = yym2134
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2135 := !z.EncBinary()
			yy2arr2135 := z.EncBasicHandle().StructToArray
			var yyq2135 [5]bool
			_, _, _ = yysep2135, yyq2135, yy2arr2135
			const yyr2135 bool = false
			yyq2135[0] = x.Kind != ""
			yyq2135[1] = x.APIVersion != ""
			yyq2135[2] = true
			yyq2135[3] = true
			yyq2135[4] = true
			var yynn2135 int
			if yyr2135 || yy2arr2135 {
				r.EncodeArrayStart(5)
			} else {
				yynn2135 = 0
				for _, b := range yyq2135 {
					if b {
						yynn2135++
					}
				}
				r.EncodeMapStart(yynn2135)
				yynn2135 = 0
			}
			if yyr2135 || yy2arr2135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2135[0] {
					yym2137 := z.EncBinary()
					_ = yym2137
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2135[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2138 := z.EncBinary()
					_ = yym2138
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2135 || yy2arr2135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2135[1] {
					yym2140 := z.EncBinary()
					_ = yym2140
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2135[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2141 := z.EncBinary()
					_ = yym2141
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2135 || yy2arr2135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2135[2] {
					yy2143 := &x.ObjectMeta
					yy2143.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2135[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2144 := &x.ObjectMeta
					yy2144.CodecEncodeSelf(e)
				}
			}
			if yyr2135 || yy2arr2135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2135[3] {
					yy2146 := &x.Spec
					yy2146.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2135[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2147 := &x.Spec
					yy2147.CodecEncodeSelf(e)
				}
			}
			if yyr2135 || yy2arr2135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2135[4] {
					yy2149 := &x.Status
					yy2149.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2135[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2150 := &x.Status
					yy2150.CodecEncodeSelf(e)
				}
			}
			if yyr2135 || yy2arr2135 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2151 := z.DecBinary()
	_ = yym2151
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2152 := r.ContainerType()
		if yyct2152 == codecSelferValueTypeMap1234 {
			yyl2152 := r.ReadMapStart()
			if yyl2152 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2152, d)
			}
		} else if yyct2152 == codecSelferValueTypeArray1234 {
			yyl2152 := r.ReadArrayStart()
			if yyl2152 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2152, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2153Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2153Slc
	var yyhl2153 bool = l >= 0
	for yyj2153 := 0; ; yyj2153++ {
		if yyhl2153 {
			if yyj2153 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2153Slc = r.DecodeBytes(yys2153Slc, true, true)
		yys2153 := string(yys2153Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2153 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2156 := &x.ObjectMeta
				yyv2156.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2157 := &x.Spec
				yyv2157.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2158 := &x.Status
				yyv2158.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2153)
		} // end switch yys2153
	} // end for yyj2153
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2159 int
	var yyb2159 bool
	var yyhl2159 bool = l >= 0
	yyj2159++
	if yyhl2159 {
		yyb2159 = yyj2159 > l
	} else {
		yyb2159 = r.CheckBreak()
	}
	if yyb2159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2159++
	if yyhl2159 {
		yyb2159 = yyj2159 > l
	} else {
		yyb2159 = r.CheckBreak()
	}
	if yyb2159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2159++
	if yyhl2159 {
		yyb2159 = yyj2159 > l
	} else {
		yyb2159 = r.CheckBreak()
	}
	if yyb2159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2162 := &x.ObjectMeta
		yyv2162.CodecDecodeSelf(d)
	}
	yyj2159++
	if yyhl2159 {
		yyb2159 = yyj2159 > l
	} else {
		yyb2159 = r.CheckBreak()
	}
	if yyb2159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2163 := &x.Spec
		yyv2163.CodecDecodeSelf(d)
	}
	yyj2159++
	if yyhl2159 {
		yyb2159 = yyj2159 > l
	} else {
		yyb2159 = r.CheckBreak()
	}
	if yyb2159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2164 := &x.Status
		yyv2164.CodecDecodeSelf(d)
	}
	for {
		yyj2159++
		if yyhl2159 {
			yyb2159 = yyj2159 > l
		} else {
			yyb2159 = r.CheckBreak()
		}
		if yyb2159 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2159-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2165 := z.EncBinary()
		_ = yym2165
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2166 := !z.EncBinary()
			yy2arr2166 := z.EncBasicHandle().StructToArray
			var yyq2166 [4]bool
			_, _, _ = yysep2166, yyq2166, yy2arr2166
			const yyr2166 bool = false
			yyq2166[0] = x.Kind != ""
			yyq2166[1] = x.APIVersion != ""
			yyq2166[2] = true
			var yynn2166 int
			if yyr2166 || yy2arr2166 {
				r.EncodeArrayStart(4)
			} else {
				yynn2166 = 1
				for _, b := range yyq2166 {
					if b {
						yynn2166++
					}
				}
				r.EncodeMapStart(yynn2166)
				yynn2166 = 0
			}
			if yyr2166 || yy2arr2166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2166[0] {
					yym2168 := z.EncBinary()
					_ = yym2168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2166[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2169 := z.EncBinary()
					_ = yym2169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2166 || yy2arr2166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2166[1] {
					yym2171 := z.EncBinary()
					_ = yym2171
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2166[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2172 := z.EncBinary()
					_ = yym2172
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2166 || yy2arr2166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2166[2] {
					yy2174 := &x.ListMeta
					yym2175 := z.EncBinary()
					_ = yym2175
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2174) {
					} else {
						z.EncFallback(yy2174)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2166[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2176 := &x.ListMeta
					yym2177 := z.EncBinary()
					_ = yym2177
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2176) {
					} else {
						z.EncFallback(yy2176)
					}
				}
			}
			if yyr2166 || yy2arr2166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2179 := z.EncBinary()
					_ = yym2179
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2180 := z.EncBinary()
					_ = yym2180
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr2166 || yy2arr2166 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2181 := z.DecBinary()
	_ = yym2181
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2182 := r.ContainerType()
		if yyct2182 == codecSelferValueTypeMap1234 {
			yyl2182 := r.ReadMapStart()
			if yyl2182 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2182, d)
			}
		} else if yyct2182 == codecSelferValueTypeArray1234 {
			yyl2182 := r.ReadArrayStart()
			if yyl2182 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2182, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2183Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2183Slc
	var yyhl2183 bool = l >= 0
	for yyj2183 := 0; ; yyj2183++ {
		if yyhl2183 {
			if yyj2183 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2183Slc = r.DecodeBytes(yys2183Slc, true, true)
		yys2183 := string(yys2183Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2183 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2186 := &x.ListMeta
				yym2187 := z.DecBinary()
				_ = yym2187
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2186) {
				} else {
					z.DecFallback(yyv2186, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2188 := &x.Items
				yym2189 := z.DecBinary()
				_ = yym2189
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv2188), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2183)
		} // end switch yys2183
	} // end for yyj2183
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2190 int
	var yyb2190 bool
	var yyhl2190 bool = l >= 0
	yyj2190++
	if yyhl2190 {
		yyb2190 = yyj2190 > l
	} else {
		yyb2190 = r.CheckBreak()
	}
	if yyb2190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2190++
	if yyhl2190 {
		yyb2190 = yyj2190 > l
	} else {
		yyb2190 = r.CheckBreak()
	}
	if yyb2190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2190++
	if yyhl2190 {
		yyb2190 = yyj2190 > l
	} else {
		yyb2190 = r.CheckBreak()
	}
	if yyb2190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2193 := &x.ListMeta
		yym2194 := z.DecBinary()
		_ = yym2194
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2193) {
		} else {
			z.DecFallback(yyv2193, false)
		}
	}
	yyj2190++
	if yyhl2190 {
		yyb2190 = yyj2190 > l
	} else {
		yyb2190 = r.CheckBreak()
	}
	if yyb2190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2195 := &x.Items
		yym2196 := z.DecBinary()
		_ = yym2196
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv2195), d)
		}
	}
	for {
		yyj2190++
		if yyhl2190 {
			yyb2190 = yyj2190 > l
		} else {
			yyb2190 = r.CheckBreak()
		}
		if yyb2190 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2190-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2197 := z.EncBinary()
		_ = yym2197
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2198 := !z.EncBinary()
			yy2arr2198 := z.EncBasicHandle().StructToArray
			var yyq2198 [2]bool
			_, _, _ = yysep2198, yyq2198, yy2arr2198
			const yyr2198 bool = false
			yyq2198[0] = true
			yyq2198[1] = true
			var yynn2198 int
			if yyr2198 || yy2arr2198 {
				r.EncodeArrayStart(2)
			} else {
				yynn2198 = 0
				for _, b := range yyq2198 {
					if b {
						yynn2198++
					}
				}
				r.EncodeMapStart(yynn2198)
				yynn2198 = 0
			}
			if yyr2198 || yy2arr2198 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2198[0] {
					yy2200 := &x.ObjectMeta
					yy2200.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2198[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2201 := &x.ObjectMeta
					yy2201.CodecEncodeSelf(e)
				}
			}
			if yyr2198 || yy2arr2198 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2198[1] {
					yy2203 := &x.Spec
					yy2203.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2198[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2204 := &x.Spec
					yy2204.CodecEncodeSelf(e)
				}
			}
			if yyr2198 || yy2arr2198 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2205 := z.DecBinary()
	_ = yym2205
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2206 := r.ContainerType()
		if yyct2206 == codecSelferValueTypeMap1234 {
			yyl2206 := r.ReadMapStart()
			if yyl2206 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2206, d)
			}
		} else if yyct2206 == codecSelferValueTypeArray1234 {
			yyl2206 := r.ReadArrayStart()
			if yyl2206 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2206, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2207Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2207Slc
	var yyhl2207 bool = l >= 0
	for yyj2207 := 0; ; yyj2207++ {
		if yyhl2207 {
			if yyj2207 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2207Slc = r.DecodeBytes(yys2207Slc, true, true)
		yys2207 := string(yys2207Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2207 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2208 := &x.ObjectMeta
				yyv2208.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2209 := &x.Spec
				yyv2209.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2207)
		} // end switch yys2207
	} // end for yyj2207
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2210 int
	var yyb2210 bool
	var yyhl2210 bool = l >= 0
	yyj2210++
	if yyhl2210 {
		yyb2210 = yyj2210 > l
	} else {
		yyb2210 = r.CheckBreak()
	}
	if yyb2210 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2211 := &x.ObjectMeta
		yyv2211.CodecDecodeSelf(d)
	}
	yyj2210++
	if yyhl2210 {
		yyb2210 = yyj2210 > l
	} else {
		yyb2210 = r.CheckBreak()
	}
	if yyb2210 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2212 := &x.Spec
		yyv2212.CodecDecodeSelf(d)
	}
	for {
		yyj2210++
		if yyhl2210 {
			yyb2210 = yyj2210 > l
		} else {
			yyb2210 = r.CheckBreak()
		}
		if yyb2210 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2210-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2213 := z.EncBinary()
		_ = yym2213
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2214 := !z.EncBinary()
			yy2arr2214 := z.EncBasicHandle().StructToArray
			var yyq2214 [4]bool
			_, _, _ = yysep2214, yyq2214, yy2arr2214
			const yyr2214 bool = false
			yyq2214[0] = x.Kind != ""
			yyq2214[1] = x.APIVersion != ""
			yyq2214[2] = true
			yyq2214[3] = true
			var yynn2214 int
			if yyr2214 || yy2arr2214 {
				r.EncodeArrayStart(4)
			} else {
				yynn2214 = 0
				for _, b := range yyq2214 {
					if b {
						yynn2214++
					}
				}
				r.EncodeMapStart(yynn2214)
				yynn2214 = 0
			}
			if yyr2214 || yy2arr2214 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2214[0] {
					yym2216 := z.EncBinary()
					_ = yym2216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2214[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2217 := z.EncBinary()
					_ = yym2217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2214 || yy2arr2214 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2214[1] {
					yym2219 := z.EncBinary()
					_ = yym2219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2214[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2220 := z.EncBinary()
					_ = yym2220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2214 || yy2arr2214 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2214[2] {
					yy2222 := &x.ObjectMeta
					yy2222.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2214[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2223 := &x.ObjectMeta
					yy2223.CodecEncodeSelf(e)
				}
			}
			if yyr2214 || yy2arr2214 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2214[3] {
					yy2225 := &x.Template
					yy2225.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2214[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2226 := &x.Template
					yy2226.CodecEncodeSelf(e)
				}
			}
			if yyr2214 || yy2arr2214 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2227 := z.DecBinary()
	_ = yym2227
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2228 := r.ContainerType()
		if yyct2228 == codecSelferValueTypeMap1234 {
			yyl2228 := r.ReadMapStart()
			if yyl2228 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2228, d)
			}
		} else if yyct2228 == codecSelferValueTypeArray1234 {
			yyl2228 := r.ReadArrayStart()
			if yyl2228 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2228, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2229Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2229Slc
	var yyhl2229 bool = l >= 0
	for yyj2229 := 0; ; yyj2229++ {
		if yyhl2229 {
			if yyj2229 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2229Slc = r.DecodeBytes(yys2229Slc, true, true)
		yys2229 := string(yys2229Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2229 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2232 := &x.ObjectMeta
				yyv2232.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2233 := &x.Template
				yyv2233.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2229)
		} // end switch yys2229
	} // end for yyj2229
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2234 int
	var yyb2234 bool
	var yyhl2234 bool = l >= 0
	yyj2234++
	if yyhl2234 {
		yyb2234 = yyj2234 > l
	} else {
		yyb2234 = r.CheckBreak()
	}
	if yyb2234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2234++
	if yyhl2234 {
		yyb2234 = yyj2234 > l
	} else {
		yyb2234 = r.CheckBreak()
	}
	if yyb2234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2234++
	if yyhl2234 {
		yyb2234 = yyj2234 > l
	} else {
		yyb2234 = r.CheckBreak()
	}
	if yyb2234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2237 := &x.ObjectMeta
		yyv2237.CodecDecodeSelf(d)
	}
	yyj2234++
	if yyhl2234 {
		yyb2234 = yyj2234 > l
	} else {
		yyb2234 = r.CheckBreak()
	}
	if yyb2234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2238 := &x.Template
		yyv2238.CodecDecodeSelf(d)
	}
	for {
		yyj2234++
		if yyhl2234 {
			yyb2234 = yyj2234 > l
		} else {
			yyb2234 = r.CheckBreak()
		}
		if yyb2234 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2234-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2239 := z.EncBinary()
		_ = yym2239
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2240 := !z.EncBinary()
			yy2arr2240 := z.EncBasicHandle().StructToArray
			var yyq2240 [4]bool
			_, _, _ = yysep2240, yyq2240, yy2arr2240
			const yyr2240 bool = false
			yyq2240[0] = x.Kind != ""
			yyq2240[1] = x.APIVersion != ""
			yyq2240[2] = true
			var yynn2240 int
			if yyr2240 || yy2arr2240 {
				r.EncodeArrayStart(4)
			} else {
				yynn2240 = 1
				for _, b := range yyq2240 {
					if b {
						yynn2240++
					}
				}
				r.EncodeMapStart(yynn2240)
				yynn2240 = 0
			}
			if yyr2240 || yy2arr2240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2240[0] {
					yym2242 := z.EncBinary()
					_ = yym2242
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2240[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2243 := z.EncBinary()
					_ = yym2243
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2240 || yy2arr2240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2240[1] {
					yym2245 := z.EncBinary()
					_ = yym2245
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2240[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2246 := z.EncBinary()
					_ = yym2246
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2240 || yy2arr2240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2240[2] {
					yy2248 := &x.ListMeta
					yym2249 := z.EncBinary()
					_ = yym2249
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2248) {
					} else {
						z.EncFallback(yy2248)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2240[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2250 := &x.ListMeta
					yym2251 := z.EncBinary()
					_ = yym2251
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2250) {
					} else {
						z.EncFallback(yy2250)
					}
				}
			}
			if yyr2240 || yy2arr2240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2253 := z.EncBinary()
					_ = yym2253
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2254 := z.EncBinary()
					_ = yym2254
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2240 || yy2arr2240 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2255 := z.DecBinary()
	_ = yym2255
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2256 := r.ContainerType()
		if yyct2256 == codecSelferValueTypeMap1234 {
			yyl2256 := r.ReadMapStart()
			if yyl2256 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2256, d)
			}
		} else if yyct2256 == codecSelferValueTypeArray1234 {
			yyl2256 := r.ReadArrayStart()
			if yyl2256 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2256, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2257Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2257Slc
	var yyhl2257 bool = l >= 0
	for yyj2257 := 0; ; yyj2257++ {
		if yyhl2257 {
			if yyj2257 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2257Slc = r.DecodeBytes(yys2257Slc, true, true)
		yys2257 := string(yys2257Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2257 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2260 := &x.ListMeta
				yym2261 := z.DecBinary()
				_ = yym2261
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2260) {
				} else {
					z.DecFallback(yyv2260, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2262 := &x.Items
				yym2263 := z.DecBinary()
				_ = yym2263
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2262), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2257)
		} // end switch yys2257
	} // end for yyj2257
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2264 int
	var yyb2264 bool
	var yyhl2264 bool = l >= 0
	yyj2264++
	if yyhl2264 {
		yyb2264 = yyj2264 > l
	} else {
		yyb2264 = r.CheckBreak()
	}
	if yyb2264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2264++
	if yyhl2264 {
		yyb2264 = yyj2264 > l
	} else {
		yyb2264 = r.CheckBreak()
	}
	if yyb2264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2264++
	if yyhl2264 {
		yyb2264 = yyj2264 > l
	} else {
		yyb2264 = r.CheckBreak()
	}
	if yyb2264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2267 := &x.ListMeta
		yym2268 := z.DecBinary()
		_ = yym2268
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2267) {
		} else {
			z.DecFallback(yyv2267, false)
		}
	}
	yyj2264++
	if yyhl2264 {
		yyb2264 = yyj2264 > l
	} else {
		yyb2264 = r.CheckBreak()
	}
	if yyb2264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2269 := &x.Items
		yym2270 := z.DecBinary()
		_ = yym2270
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2269), d)
		}
	}
	for {
		yyj2264++
		if yyhl2264 {
			yyb2264 = yyj2264 > l
		} else {
			yyb2264 = r.CheckBreak()
		}
		if yyb2264 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2264-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2271 := z.EncBinary()
		_ = yym2271
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2272 := !z.EncBinary()
			yy2arr2272 := z.EncBasicHandle().StructToArray
			var yyq2272 [3]bool
			_, _, _ = yysep2272, yyq2272, yy2arr2272
			const yyr2272 bool = false
			yyq2272[0] = x.Replicas != nil
			yyq2272[1] = len(x.Selector) != 0
			yyq2272[2] = x.Template != nil
			var yynn2272 int
			if yyr2272 || yy2arr2272 {
				r.EncodeArrayStart(3)
			} else {
				yynn2272 = 0
				for _, b := range yyq2272 {
					if b {
						yynn2272++
					}
				}
				r.EncodeMapStart(yynn2272)
				yynn2272 = 0
			}
			if yyr2272 || yy2arr2272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2272[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2274 := *x.Replicas
						yym2275 := z.EncBinary()
						_ = yym2275
						if false {
						} else {
							r.EncodeInt(int64(yy2274))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2272[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2276 := *x.Replicas
						yym2277 := z.EncBinary()
						_ = yym2277
						if false {
						} else {
							r.EncodeInt(int64(yy2276))
						}
					}
				}
			}
			if yyr2272 || yy2arr2272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2272[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2279 := z.EncBinary()
						_ = yym2279
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2272[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2280 := z.EncBinary()
						_ = yym2280
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2272 || yy2arr2272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2272[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2272[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2272 || yy2arr2272 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2282 := z.DecBinary()
	_ = yym2282
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2283 := r.ContainerType()
		if yyct2283 == codecSelferValueTypeMap1234 {
			yyl2283 := r.ReadMapStart()
			if yyl2283 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2283, d)
			}
		} else if yyct2283 == codecSelferValueTypeArray1234 {
			yyl2283 := r.ReadArrayStart()
			if yyl2283 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2283, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2284Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2284Slc
	var yyhl2284 bool = l >= 0
	for yyj2284 := 0; ; yyj2284++ {
		if yyhl2284 {
			if yyj2284 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2284Slc = r.DecodeBytes(yys2284Slc, true, true)
		yys2284 := string(yys2284Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2284 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym2286 := z.DecBinary()
				_ = yym2286
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2287 := &x.Selector
				yym2288 := z.DecBinary()
				_ = yym2288
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2287, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2284)
		} // end switch yys2284
	} // end for yyj2284
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2290 int
	var yyb2290 bool
	var yyhl2290 bool = l >= 0
	yyj2290++
	if yyhl2290 {
		yyb2290 = yyj2290 > l
	} else {
		yyb2290 = r.CheckBreak()
	}
	if yyb2290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym2292 := z.DecBinary()
		_ = yym2292
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj2290++
	if yyhl2290 {
		yyb2290 = yyj2290 > l
	} else {
		yyb2290 = r.CheckBreak()
	}
	if yyb2290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2293 := &x.Selector
		yym2294 := z.DecBinary()
		_ = yym2294
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2293, false, d)
		}
	}
	yyj2290++
	if yyhl2290 {
		yyb2290 = yyj2290 > l
	} else {
		yyb2290 = r.CheckBreak()
	}
	if yyb2290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2290++
		if yyhl2290 {
			yyb2290 = yyj2290 > l
		} else {
			yyb2290 = r.CheckBreak()
		}
		if yyb2290 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2290-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2296 := z.EncBinary()
		_ = yym2296
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2297 := !z.EncBinary()
			yy2arr2297 := z.EncBasicHandle().StructToArray
			var yyq2297 [3]bool
			_, _, _ = yysep2297, yyq2297, yy2arr2297
			const yyr2297 bool = false
			yyq2297[1] = x.FullyLabeledReplicas != 0
			yyq2297[2] = x.ObservedGeneration != 0
			var yynn2297 int
			if yyr2297 || yy2arr2297 {
				r.EncodeArrayStart(3)
			} else {
				yynn2297 = 1
				for _, b := range yyq2297 {
					if b {
						yynn2297++
					}
				}
				r.EncodeMapStart(yynn2297)
				yynn2297 = 0
			}
			if yyr2297 || yy2arr2297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2299 := z.EncBinary()
				_ = yym2299
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2300 := z.EncBinary()
				_ = yym2300
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2297 || yy2arr2297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2297[1] {
					yym2302 := z.EncBinary()
					_ = yym2302
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2297[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2303 := z.EncBinary()
					_ = yym2303
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2297 || yy2arr2297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2297[2] {
					yym2305 := z.EncBinary()
					_ = yym2305
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2297[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2306 := z.EncBinary()
					_ = yym2306
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2297 || yy2arr2297 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2307 := z.DecBinary()
	_ = yym2307
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2308 := r.ContainerType()
		if yyct2308 == codecSelferValueTypeMap1234 {
			yyl2308 := r.ReadMapStart()
			if yyl2308 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2308, d)
			}
		} else if yyct2308 == codecSelferValueTypeArray1234 {
			yyl2308 := r.ReadArrayStart()
			if yyl2308 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2308, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2309Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2309Slc
	var yyhl2309 bool = l >= 0
	for yyj2309 := 0; ; yyj2309++ {
		if yyhl2309 {
			if yyj2309 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2309Slc = r.DecodeBytes(yys2309Slc, true, true)
		yys2309 := string(yys2309Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2309 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2309)
		} // end switch yys2309
	} // end for yyj2309
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2313 int
	var yyb2313 bool
	var yyhl2313 bool = l >= 0
	yyj2313++
	if yyhl2313 {
		yyb2313 = yyj2313 > l
	} else {
		yyb2313 = r.CheckBreak()
	}
	if yyb2313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2313++
	if yyhl2313 {
		yyb2313 = yyj2313 > l
	} else {
		yyb2313 = r.CheckBreak()
	}
	if yyb2313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2313++
	if yyhl2313 {
		yyb2313 = yyj2313 > l
	} else {
		yyb2313 = r.CheckBreak()
	}
	if yyb2313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2313++
		if yyhl2313 {
			yyb2313 = yyj2313 > l
		} else {
			yyb2313 = r.CheckBreak()
		}
		if yyb2313 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2313-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2317 := z.EncBinary()
		_ = yym2317
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2318 := !z.EncBinary()
			yy2arr2318 := z.EncBasicHandle().StructToArray
			var yyq2318 [5]bool
			_, _, _ = yysep2318, yyq2318, yy2arr2318
			const yyr2318 bool = false
			yyq2318[0] = x.Kind != ""
			yyq2318[1] = x.APIVersion != ""
			yyq2318[2] = true
			yyq2318[3] = true
			yyq2318[4] = true
			var yynn2318 int
			if yyr2318 || yy2arr2318 {
				r.EncodeArrayStart(5)
			} else {
				yynn2318 = 0
				for _, b := range yyq2318 {
					if b {
						yynn2318++
					}
				}
				r.EncodeMapStart(yynn2318)
				yynn2318 = 0
			}
			if yyr2318 || yy2arr2318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2318[0] {
					yym2320 := z.EncBinary()
					_ = yym2320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2318[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2321 := z.EncBinary()
					_ = yym2321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2318 || yy2arr2318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2318[1] {
					yym2323 := z.EncBinary()
					_ = yym2323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2318[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2324 := z.EncBinary()
					_ = yym2324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2318 || yy2arr2318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2318[2] {
					yy2326 := &x.ObjectMeta
					yy2326.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2318[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2327 := &x.ObjectMeta
					yy2327.CodecEncodeSelf(e)
				}
			}
			if yyr2318 || yy2arr2318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2318[3] {
					yy2329 := &x.Spec
					yy2329.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2318[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2330 := &x.Spec
					yy2330.CodecEncodeSelf(e)
				}
			}
			if yyr2318 || yy2arr2318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2318[4] {
					yy2332 := &x.Status
					yy2332.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2318[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2333 := &x.Status
					yy2333.CodecEncodeSelf(e)
				}
			}
			if yyr2318 || yy2arr2318 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2334 := z.DecBinary()
	_ = yym2334
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2335 := r.ContainerType()
		if yyct2335 == codecSelferValueTypeMap1234 {
			yyl2335 := r.ReadMapStart()
			if yyl2335 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2335, d)
			}
		} else if yyct2335 == codecSelferValueTypeArray1234 {
			yyl2335 := r.ReadArrayStart()
			if yyl2335 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2335, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2336Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2336Slc
	var yyhl2336 bool = l >= 0
	for yyj2336 := 0; ; yyj2336++ {
		if yyhl2336 {
			if yyj2336 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2336Slc = r.DecodeBytes(yys2336Slc, true, true)
		yys2336 := string(yys2336Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2336 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2339 := &x.ObjectMeta
				yyv2339.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2340 := &x.Spec
				yyv2340.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2341 := &x.Status
				yyv2341.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2336)
		} // end switch yys2336
	} // end for yyj2336
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2342 int
	var yyb2342 bool
	var yyhl2342 bool = l >= 0
	yyj2342++
	if yyhl2342 {
		yyb2342 = yyj2342 > l
	} else {
		yyb2342 = r.CheckBreak()
	}
	if yyb2342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2342++
	if yyhl2342 {
		yyb2342 = yyj2342 > l
	} else {
		yyb2342 = r.CheckBreak()
	}
	if yyb2342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2342++
	if yyhl2342 {
		yyb2342 = yyj2342 > l
	} else {
		yyb2342 = r.CheckBreak()
	}
	if yyb2342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2345 := &x.ObjectMeta
		yyv2345.CodecDecodeSelf(d)
	}
	yyj2342++
	if yyhl2342 {
		yyb2342 = yyj2342 > l
	} else {
		yyb2342 = r.CheckBreak()
	}
	if yyb2342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2346 := &x.Spec
		yyv2346.CodecDecodeSelf(d)
	}
	yyj2342++
	if yyhl2342 {
		yyb2342 = yyj2342 > l
	} else {
		yyb2342 = r.CheckBreak()
	}
	if yyb2342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2347 := &x.Status
		yyv2347.CodecDecodeSelf(d)
	}
	for {
		yyj2342++
		if yyhl2342 {
			yyb2342 = yyj2342 > l
		} else {
			yyb2342 = r.CheckBreak()
		}
		if yyb2342 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2342-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2348 := z.EncBinary()
		_ = yym2348
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2349 := !z.EncBinary()
			yy2arr2349 := z.EncBasicHandle().StructToArray
			var yyq2349 [4]bool
			_, _, _ = yysep2349, yyq2349, yy2arr2349
			const yyr2349 bool = false
			yyq2349[0] = x.Kind != ""
			yyq2349[1] = x.APIVersion != ""
			yyq2349[2] = true
			var yynn2349 int
			if yyr2349 || yy2arr2349 {
				r.EncodeArrayStart(4)
			} else {
				yynn2349 = 1
				for _, b := range yyq2349 {
					if b {
						yynn2349++
					}
				}
				r.EncodeMapStart(yynn2349)
				yynn2349 = 0
			}
			if yyr2349 || yy2arr2349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2349[0] {
					yym2351 := z.EncBinary()
					_ = yym2351
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2349[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2352 := z.EncBinary()
					_ = yym2352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2349 || yy2arr2349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2349[1] {
					yym2354 := z.EncBinary()
					_ = yym2354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2349[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2355 := z.EncBinary()
					_ = yym2355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2349 || yy2arr2349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2349[2] {
					yy2357 := &x.ListMeta
					yym2358 := z.EncBinary()
					_ = yym2358
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2357) {
					} else {
						z.EncFallback(yy2357)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2349[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2359 := &x.ListMeta
					yym2360 := z.EncBinary()
					_ = yym2360
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2359) {
					} else {
						z.EncFallback(yy2359)
					}
				}
			}
			if yyr2349 || yy2arr2349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2362 := z.EncBinary()
					_ = yym2362
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2363 := z.EncBinary()
					_ = yym2363
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2349 || yy2arr2349 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2364 := z.DecBinary()
	_ = yym2364
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2365 := r.ContainerType()
		if yyct2365 == codecSelferValueTypeMap1234 {
			yyl2365 := r.ReadMapStart()
			if yyl2365 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2365, d)
			}
		} else if yyct2365 == codecSelferValueTypeArray1234 {
			yyl2365 := r.ReadArrayStart()
			if yyl2365 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2365, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2366Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2366Slc
	var yyhl2366 bool = l >= 0
	for yyj2366 := 0; ; yyj2366++ {
		if yyhl2366 {
			if yyj2366 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2366Slc = r.DecodeBytes(yys2366Slc, true, true)
		yys2366 := string(yys2366Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2366 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2369 := &x.ListMeta
				yym2370 := z.DecBinary()
				_ = yym2370
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2369) {
				} else {
					z.DecFallback(yyv2369, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2371 := &x.Items
				yym2372 := z.DecBinary()
				_ = yym2372
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2371), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2366)
		} // end switch yys2366
	} // end for yyj2366
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2373 int
	var yyb2373 bool
	var yyhl2373 bool = l >= 0
	yyj2373++
	if yyhl2373 {
		yyb2373 = yyj2373 > l
	} else {
		yyb2373 = r.CheckBreak()
	}
	if yyb2373 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2373++
	if yyhl2373 {
		yyb2373 = yyj2373 > l
	} else {
		yyb2373 = r.CheckBreak()
	}
	if yyb2373 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2373++
	if yyhl2373 {
		yyb2373 = yyj2373 > l
	} else {
		yyb2373 = r.CheckBreak()
	}
	if yyb2373 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2376 := &x.ListMeta
		yym2377 := z.DecBinary()
		_ = yym2377
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2376) {
		} else {
			z.DecFallback(yyv2376, false)
		}
	}
	yyj2373++
	if yyhl2373 {
		yyb2373 = yyj2373 > l
	} else {
		yyb2373 = r.CheckBreak()
	}
	if yyb2373 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2378 := &x.Items
		yym2379 := z.DecBinary()
		_ = yym2379
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2378), d)
		}
	}
	for {
		yyj2373++
		if yyhl2373 {
			yyb2373 = yyj2373 > l
		} else {
			yyb2373 = r.CheckBreak()
		}
		if yyb2373 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2373-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2380 := z.EncBinary()
	_ = yym2380
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2381 := z.DecBinary()
	_ = yym2381
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2382 := z.EncBinary()
	_ = yym2382
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2383 := z.DecBinary()
	_ = yym2383
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2384 := z.EncBinary()
		_ = yym2384
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2385 := !z.EncBinary()
			yy2arr2385 := z.EncBasicHandle().StructToArray
			var yyq2385 [1]bool
			_, _, _ = yysep2385, yyq2385, yy2arr2385
			const yyr2385 bool = false
			yyq2385[0] = true
			var yynn2385 int
			if yyr2385 || yy2arr2385 {
				r.EncodeArrayStart(1)
			} else {
				yynn2385 = 0
				for _, b := range yyq2385 {
					if b {
						yynn2385++
					}
				}
				r.EncodeMapStart(yynn2385)
				yynn2385 = 0
			}
			if yyr2385 || yy2arr2385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2385[0] {
					yy2387 := &x.LoadBalancer
					yy2387.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2385[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2388 := &x.LoadBalancer
					yy2388.CodecEncodeSelf(e)
				}
			}
			if yyr2385 || yy2arr2385 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2389 := z.DecBinary()
	_ = yym2389
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2390 := r.ContainerType()
		if yyct2390 == codecSelferValueTypeMap1234 {
			yyl2390 := r.ReadMapStart()
			if yyl2390 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2390, d)
			}
		} else if yyct2390 == codecSelferValueTypeArray1234 {
			yyl2390 := r.ReadArrayStart()
			if yyl2390 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2390, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2391Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2391Slc
	var yyhl2391 bool = l >= 0
	for yyj2391 := 0; ; yyj2391++ {
		if yyhl2391 {
			if yyj2391 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2391Slc = r.DecodeBytes(yys2391Slc, true, true)
		yys2391 := string(yys2391Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2391 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2392 := &x.LoadBalancer
				yyv2392.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2391)
		} // end switch yys2391
	} // end for yyj2391
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2393 int
	var yyb2393 bool
	var yyhl2393 bool = l >= 0
	yyj2393++
	if yyhl2393 {
		yyb2393 = yyj2393 > l
	} else {
		yyb2393 = r.CheckBreak()
	}
	if yyb2393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2394 := &x.LoadBalancer
		yyv2394.CodecDecodeSelf(d)
	}
	for {
		yyj2393++
		if yyhl2393 {
			yyb2393 = yyj2393 > l
		} else {
			yyb2393 = r.CheckBreak()
		}
		if yyb2393 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2393-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2395 := z.EncBinary()
		_ = yym2395
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2396 := !z.EncBinary()
			yy2arr2396 := z.EncBasicHandle().StructToArray
			var yyq2396 [1]bool
			_, _, _ = yysep2396, yyq2396, yy2arr2396
			const yyr2396 bool = false
			yyq2396[0] = len(x.Ingress) != 0
			var yynn2396 int
			if yyr2396 || yy2arr2396 {
				r.EncodeArrayStart(1)
			} else {
				yynn2396 = 0
				for _, b := range yyq2396 {
					if b {
						yynn2396++
					}
				}
				r.EncodeMapStart(yynn2396)
				yynn2396 = 0
			}
			if yyr2396 || yy2arr2396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2396[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2398 := z.EncBinary()
						_ = yym2398
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2396[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2399 := z.EncBinary()
						_ = yym2399
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2396 || yy2arr2396 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2400 := z.DecBinary()
	_ = yym2400
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2401 := r.ContainerType()
		if yyct2401 == codecSelferValueTypeMap1234 {
			yyl2401 := r.ReadMapStart()
			if yyl2401 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2401, d)
			}
		} else if yyct2401 == codecSelferValueTypeArray1234 {
			yyl2401 := r.ReadArrayStart()
			if yyl2401 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2401, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2402Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2402Slc
	var yyhl2402 bool = l >= 0
	for yyj2402 := 0; ; yyj2402++ {
		if yyhl2402 {
			if yyj2402 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2402Slc = r.DecodeBytes(yys2402Slc, true, true)
		yys2402 := string(yys2402Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2402 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2403 := &x.Ingress
				yym2404 := z.DecBinary()
				_ = yym2404
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2403), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2402)
		} // end switch yys2402
	} // end for yyj2402
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2405 int
	var yyb2405 bool
	var yyhl2405 bool = l >= 0
	yyj2405++
	if yyhl2405 {
		yyb2405 = yyj2405 > l
	} else {
		yyb2405 = r.CheckBreak()
	}
	if yyb2405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2406 := &x.Ingress
		yym2407 := z.DecBinary()
		_ = yym2407
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2406), d)
		}
	}
	for {
		yyj2405++
		if yyhl2405 {
			yyb2405 = yyj2405 > l
		} else {
			yyb2405 = r.CheckBreak()
		}
		if yyb2405 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2405-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2408 := z.EncBinary()
		_ = yym2408
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2409 := !z.EncBinary()
			yy2arr2409 := z.EncBasicHandle().StructToArray
			var yyq2409 [2]bool
			_, _, _ = yysep2409, yyq2409, yy2arr2409
			const yyr2409 bool = false
			yyq2409[0] = x.IP != ""
			yyq2409[1] = x.Hostname != ""
			var yynn2409 int
			if yyr2409 || yy2arr2409 {
				r.EncodeArrayStart(2)
			} else {
				yynn2409 = 0
				for _, b := range yyq2409 {
					if b {
						yynn2409++
					}
				}
				r.EncodeMapStart(yynn2409)
				yynn2409 = 0
			}
			if yyr2409 || yy2arr2409 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2409[0] {
					yym2411 := z.EncBinary()
					_ = yym2411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2409[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2412 := z.EncBinary()
					_ = yym2412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2409 || yy2arr2409 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2409[1] {
					yym2414 := z.EncBinary()
					_ = yym2414
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2409[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2415 := z.EncBinary()
					_ = yym2415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2409 || yy2arr2409 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2416 := z.DecBinary()
	_ = yym2416
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2417 := r.ContainerType()
		if yyct2417 == codecSelferValueTypeMap1234 {
			yyl2417 := r.ReadMapStart()
			if yyl2417 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2417, d)
			}
		} else if yyct2417 == codecSelferValueTypeArray1234 {
			yyl2417 := r.ReadArrayStart()
			if yyl2417 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2417, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2418Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2418Slc
	var yyhl2418 bool = l >= 0
	for yyj2418 := 0; ; yyj2418++ {
		if yyhl2418 {
			if yyj2418 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2418Slc = r.DecodeBytes(yys2418Slc, true, true)
		yys2418 := string(yys2418Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2418 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2418)
		} // end switch yys2418
	} // end for yyj2418
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2421 int
	var yyb2421 bool
	var yyhl2421 bool = l >= 0
	yyj2421++
	if yyhl2421 {
		yyb2421 = yyj2421 > l
	} else {
		yyb2421 = r.CheckBreak()
	}
	if yyb2421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2421++
	if yyhl2421 {
		yyb2421 = yyj2421 > l
	} else {
		yyb2421 = r.CheckBreak()
	}
	if yyb2421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2421++
		if yyhl2421 {
			yyb2421 = yyj2421 > l
		} else {
			yyb2421 = r.CheckBreak()
		}
		if yyb2421 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2421-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2424 := z.EncBinary()
		_ = yym2424
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2425 := !z.EncBinary()
			yy2arr2425 := z.EncBasicHandle().StructToArray
			var yyq2425 [9]bool
			_, _, _ = yysep2425, yyq2425, yy2arr2425
			const yyr2425 bool = false
			yyq2425[1] = len(x.Selector) != 0
			yyq2425[2] = x.ClusterIP != ""
			yyq2425[3] = x.Type != ""
			yyq2425[4] = len(x.ExternalIPs) != 0
			yyq2425[5] = len(x.DeprecatedPublicIPs) != 0
			yyq2425[6] = x.SessionAffinity != ""
			yyq2425[7] = x.LoadBalancerIP != ""
			yyq2425[8] = len(x.LoadBalancerSourceRanges) != 0
			var yynn2425 int
			if yyr2425 || yy2arr2425 {
				r.EncodeArrayStart(9)
			} else {
				yynn2425 = 1
				for _, b := range yyq2425 {
					if b {
						yynn2425++
					}
				}
				r.EncodeMapStart(yynn2425)
				yynn2425 = 0
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2427 := z.EncBinary()
					_ = yym2427
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2428 := z.EncBinary()
					_ = yym2428
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2425[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2430 := z.EncBinary()
						_ = yym2430
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2425[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2431 := z.EncBinary()
						_ = yym2431
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2425[2] {
					yym2433 := z.EncBinary()
					_ = yym2433
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2425[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2434 := z.EncBinary()
					_ = yym2434
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2425[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2425[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2425[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2437 := z.EncBinary()
						_ = yym2437
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2425[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2438 := z.EncBinary()
						_ = yym2438
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2425[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2440 := z.EncBinary()
						_ = yym2440
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2425[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2441 := z.EncBinary()
						_ = yym2441
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2425[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2425[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2425[7] {
					yym2444 := z.EncBinary()
					_ = yym2444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2425[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2445 := z.EncBinary()
					_ = yym2445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2425[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2447 := z.EncBinary()
						_ = yym2447
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2425[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2448 := z.EncBinary()
						_ = yym2448
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2425 || yy2arr2425 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2449 := z.DecBinary()
	_ = yym2449
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2450 := r.ContainerType()
		if yyct2450 == codecSelferValueTypeMap1234 {
			yyl2450 := r.ReadMapStart()
			if yyl2450 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2450, d)
			}
		} else if yyct2450 == codecSelferValueTypeArray1234 {
			yyl2450 := r.ReadArrayStart()
			if yyl2450 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2450, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2451Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2451Slc
	var yyhl2451 bool = l >= 0
	for yyj2451 := 0; ; yyj2451++ {
		if yyhl2451 {
			if yyj2451 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2451Slc = r.DecodeBytes(yys2451Slc, true, true)
		yys2451 := string(yys2451Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2451 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2452 := &x.Ports
				yym2453 := z.DecBinary()
				_ = yym2453
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2452), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2454 := &x.Selector
				yym2455 := z.DecBinary()
				_ = yym2455
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2454, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2458 := &x.ExternalIPs
				yym2459 := z.DecBinary()
				_ = yym2459
				if false {
				} else {
					z.F.DecSliceStringX(yyv2458, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv2460 := &x.DeprecatedPublicIPs
				yym2461 := z.DecBinary()
				_ = yym2461
				if false {
				} else {
					z.F.DecSliceStringX(yyv2460, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2464 := &x.LoadBalancerSourceRanges
				yym2465 := z.DecBinary()
				_ = yym2465
				if false {
				} else {
					z.F.DecSliceStringX(yyv2464, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2451)
		} // end switch yys2451
	} // end for yyj2451
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2466 int
	var yyb2466 bool
	var yyhl2466 bool = l >= 0
	yyj2466++
	if yyhl2466 {
		yyb2466 = yyj2466 > l
	} else {
		yyb2466 = r.CheckBreak()
	}
	if yyb2466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2467 := &x.Ports
		yym2468 := z.DecBinary()
		_ = yym2468
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2467), d)
		}
	}
	yyj2466++
	if yyhl2466 {
		yyb2466 = yyj2466 > l
	} else {
		yyb2466 = r.CheckBreak()
	}
	if yyb2466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2469 := &x.Selector
		yym2470 := z.DecBinary()
		_ = yym2470
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2469, false, d)
		}
	}
	yyj2466++
	if yyhl2466 {
		yyb2466 = yyj2466 > l
	} else {
		yyb2466 = r.CheckBreak()
	}
	if yyb2466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2466++
	if yyhl2466 {
		yyb2466 = yyj2466 > l
	} else {
		yyb2466 = r.CheckBreak()
	}
	if yyb2466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2466++
	if yyhl2466 {
		yyb2466 = yyj2466 > l
	} else {
		yyb2466 = r.CheckBreak()
	}
	if yyb2466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2473 := &x.ExternalIPs
		yym2474 := z.DecBinary()
		_ = yym2474
		if false {
		} else {
			z.F.DecSliceStringX(yyv2473, false, d)
		}
	}
	yyj2466++
	if yyhl2466 {
		yyb2466 = yyj2466 > l
	} else {
		yyb2466 = r.CheckBreak()
	}
	if yyb2466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv2475 := &x.DeprecatedPublicIPs
		yym2476 := z.DecBinary()
		_ = yym2476
		if false {
		} else {
			z.F.DecSliceStringX(yyv2475, false, d)
		}
	}
	yyj2466++
	if yyhl2466 {
		yyb2466 = yyj2466 > l
	} else {
		yyb2466 = r.CheckBreak()
	}
	if yyb2466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2466++
	if yyhl2466 {
		yyb2466 = yyj2466 > l
	} else {
		yyb2466 = r.CheckBreak()
	}
	if yyb2466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2466++
	if yyhl2466 {
		yyb2466 = yyj2466 > l
	} else {
		yyb2466 = r.CheckBreak()
	}
	if yyb2466 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2479 := &x.LoadBalancerSourceRanges
		yym2480 := z.DecBinary()
		_ = yym2480
		if false {
		} else {
			z.F.DecSliceStringX(yyv2479, false, d)
		}
	}
	for {
		yyj2466++
		if yyhl2466 {
			yyb2466 = yyj2466 > l
		} else {
			yyb2466 = r.CheckBreak()
		}
		if yyb2466 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2466-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2481 := z.EncBinary()
		_ = yym2481
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2482 := !z.EncBinary()
			yy2arr2482 := z.EncBasicHandle().StructToArray
			var yyq2482 [5]bool
			_, _, _ = yysep2482, yyq2482, yy2arr2482
			const yyr2482 bool = false
			yyq2482[0] = x.Name != ""
			yyq2482[1] = x.Protocol != ""
			yyq2482[3] = true
			yyq2482[4] = x.NodePort != 0
			var yynn2482 int
			if yyr2482 || yy2arr2482 {
				r.EncodeArrayStart(5)
			} else {
				yynn2482 = 1
				for _, b := range yyq2482 {
					if b {
						yynn2482++
					}
				}
				r.EncodeMapStart(yynn2482)
				yynn2482 = 0
			}
			if yyr2482 || yy2arr2482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2482[0] {
					yym2484 := z.EncBinary()
					_ = yym2484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2482[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2485 := z.EncBinary()
					_ = yym2485
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2482 || yy2arr2482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2482[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2482[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2482 || yy2arr2482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2488 := z.EncBinary()
				_ = yym2488
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2489 := z.EncBinary()
				_ = yym2489
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2482 || yy2arr2482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2482[3] {
					yy2491 := &x.TargetPort
					yym2492 := z.EncBinary()
					_ = yym2492
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2491) {
					} else if !yym2492 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2491)
					} else {
						z.EncFallback(yy2491)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2482[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2493 := &x.TargetPort
					yym2494 := z.EncBinary()
					_ = yym2494
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2493) {
					} else if !yym2494 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2493)
					} else {
						z.EncFallback(yy2493)
					}
				}
			}
			if yyr2482 || yy2arr2482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2482[4] {
					yym2496 := z.EncBinary()
					_ = yym2496
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2482[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2497 := z.EncBinary()
					_ = yym2497
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yyr2482 || yy2arr2482 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2498 := z.DecBinary()
	_ = yym2498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2499 := r.ContainerType()
		if yyct2499 == codecSelferValueTypeMap1234 {
			yyl2499 := r.ReadMapStart()
			if yyl2499 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2499, d)
			}
		} else if yyct2499 == codecSelferValueTypeArray1234 {
			yyl2499 := r.ReadArrayStart()
			if yyl2499 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2499, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2500Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2500Slc
	var yyhl2500 bool = l >= 0
	for yyj2500 := 0; ; yyj2500++ {
		if yyhl2500 {
			if yyj2500 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2500Slc = r.DecodeBytes(yys2500Slc, true, true)
		yys2500 := string(yys2500Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2500 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2504 := &x.TargetPort
				yym2505 := z.DecBinary()
				_ = yym2505
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2504) {
				} else if !yym2505 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2504)
				} else {
					z.DecFallback(yyv2504, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2500)
		} // end switch yys2500
	} // end for yyj2500
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2507 int
	var yyb2507 bool
	var yyhl2507 bool = l >= 0
	yyj2507++
	if yyhl2507 {
		yyb2507 = yyj2507 > l
	} else {
		yyb2507 = r.CheckBreak()
	}
	if yyb2507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2507++
	if yyhl2507 {
		yyb2507 = yyj2507 > l
	} else {
		yyb2507 = r.CheckBreak()
	}
	if yyb2507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2507++
	if yyhl2507 {
		yyb2507 = yyj2507 > l
	} else {
		yyb2507 = r.CheckBreak()
	}
	if yyb2507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2507++
	if yyhl2507 {
		yyb2507 = yyj2507 > l
	} else {
		yyb2507 = r.CheckBreak()
	}
	if yyb2507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2511 := &x.TargetPort
		yym2512 := z.DecBinary()
		_ = yym2512
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2511) {
		} else if !yym2512 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2511)
		} else {
			z.DecFallback(yyv2511, false)
		}
	}
	yyj2507++
	if yyhl2507 {
		yyb2507 = yyj2507 > l
	} else {
		yyb2507 = r.CheckBreak()
	}
	if yyb2507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2507++
		if yyhl2507 {
			yyb2507 = yyj2507 > l
		} else {
			yyb2507 = r.CheckBreak()
		}
		if yyb2507 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2507-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2514 := z.EncBinary()
		_ = yym2514
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2515 := !z.EncBinary()
			yy2arr2515 := z.EncBasicHandle().StructToArray
			var yyq2515 [5]bool
			_, _, _ = yysep2515, yyq2515, yy2arr2515
			const yyr2515 bool = false
			yyq2515[0] = x.Kind != ""
			yyq2515[1] = x.APIVersion != ""
			yyq2515[2] = true
			yyq2515[3] = true
			yyq2515[4] = true
			var yynn2515 int
			if yyr2515 || yy2arr2515 {
				r.EncodeArrayStart(5)
			} else {
				yynn2515 = 0
				for _, b := range yyq2515 {
					if b {
						yynn2515++
					}
				}
				r.EncodeMapStart(yynn2515)
				yynn2515 = 0
			}
			if yyr2515 || yy2arr2515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2515[0] {
					yym2517 := z.EncBinary()
					_ = yym2517
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2515[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2518 := z.EncBinary()
					_ = yym2518
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2515 || yy2arr2515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2515[1] {
					yym2520 := z.EncBinary()
					_ = yym2520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2515[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2521 := z.EncBinary()
					_ = yym2521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2515 || yy2arr2515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2515[2] {
					yy2523 := &x.ObjectMeta
					yy2523.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2515[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2524 := &x.ObjectMeta
					yy2524.CodecEncodeSelf(e)
				}
			}
			if yyr2515 || yy2arr2515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2515[3] {
					yy2526 := &x.Spec
					yy2526.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2515[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2527 := &x.Spec
					yy2527.CodecEncodeSelf(e)
				}
			}
			if yyr2515 || yy2arr2515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2515[4] {
					yy2529 := &x.Status
					yy2529.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2515[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2530 := &x.Status
					yy2530.CodecEncodeSelf(e)
				}
			}
			if yyr2515 || yy2arr2515 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2531 := z.DecBinary()
	_ = yym2531
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2532 := r.ContainerType()
		if yyct2532 == codecSelferValueTypeMap1234 {
			yyl2532 := r.ReadMapStart()
			if yyl2532 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2532, d)
			}
		} else if yyct2532 == codecSelferValueTypeArray1234 {
			yyl2532 := r.ReadArrayStart()
			if yyl2532 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2532, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2533Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2533Slc
	var yyhl2533 bool = l >= 0
	for yyj2533 := 0; ; yyj2533++ {
		if yyhl2533 {
			if yyj2533 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2533Slc = r.DecodeBytes(yys2533Slc, true, true)
		yys2533 := string(yys2533Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2533 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2536 := &x.ObjectMeta
				yyv2536.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2537 := &x.Spec
				yyv2537.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2538 := &x.Status
				yyv2538.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2533)
		} // end switch yys2533
	} // end for yyj2533
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2539 int
	var yyb2539 bool
	var yyhl2539 bool = l >= 0
	yyj2539++
	if yyhl2539 {
		yyb2539 = yyj2539 > l
	} else {
		yyb2539 = r.CheckBreak()
	}
	if yyb2539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2539++
	if yyhl2539 {
		yyb2539 = yyj2539 > l
	} else {
		yyb2539 = r.CheckBreak()
	}
	if yyb2539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2539++
	if yyhl2539 {
		yyb2539 = yyj2539 > l
	} else {
		yyb2539 = r.CheckBreak()
	}
	if yyb2539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2542 := &x.ObjectMeta
		yyv2542.CodecDecodeSelf(d)
	}
	yyj2539++
	if yyhl2539 {
		yyb2539 = yyj2539 > l
	} else {
		yyb2539 = r.CheckBreak()
	}
	if yyb2539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2543 := &x.Spec
		yyv2543.CodecDecodeSelf(d)
	}
	yyj2539++
	if yyhl2539 {
		yyb2539 = yyj2539 > l
	} else {
		yyb2539 = r.CheckBreak()
	}
	if yyb2539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2544 := &x.Status
		yyv2544.CodecDecodeSelf(d)
	}
	for {
		yyj2539++
		if yyhl2539 {
			yyb2539 = yyj2539 > l
		} else {
			yyb2539 = r.CheckBreak()
		}
		if yyb2539 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2539-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2545 := z.EncBinary()
		_ = yym2545
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2546 := !z.EncBinary()
			yy2arr2546 := z.EncBasicHandle().StructToArray
			var yyq2546 [4]bool
			_, _, _ = yysep2546, yyq2546, yy2arr2546
			const yyr2546 bool = false
			yyq2546[0] = x.Kind != ""
			yyq2546[1] = x.APIVersion != ""
			yyq2546[2] = true
			var yynn2546 int
			if yyr2546 || yy2arr2546 {
				r.EncodeArrayStart(4)
			} else {
				yynn2546 = 1
				for _, b := range yyq2546 {
					if b {
						yynn2546++
					}
				}
				r.EncodeMapStart(yynn2546)
				yynn2546 = 0
			}
			if yyr2546 || yy2arr2546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2546[0] {
					yym2548 := z.EncBinary()
					_ = yym2548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2546[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2549 := z.EncBinary()
					_ = yym2549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2546 || yy2arr2546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2546[1] {
					yym2551 := z.EncBinary()
					_ = yym2551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2546[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2552 := z.EncBinary()
					_ = yym2552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2546 || yy2arr2546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2546[2] {
					yy2554 := &x.ListMeta
					yym2555 := z.EncBinary()
					_ = yym2555
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2554) {
					} else {
						z.EncFallback(yy2554)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2546[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2556 := &x.ListMeta
					yym2557 := z.EncBinary()
					_ = yym2557
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2556) {
					} else {
						z.EncFallback(yy2556)
					}
				}
			}
			if yyr2546 || yy2arr2546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2559 := z.EncBinary()
					_ = yym2559
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2560 := z.EncBinary()
					_ = yym2560
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2546 || yy2arr2546 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2561 := z.DecBinary()
	_ = yym2561
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2562 := r.ContainerType()
		if yyct2562 == codecSelferValueTypeMap1234 {
			yyl2562 := r.ReadMapStart()
			if yyl2562 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2562, d)
			}
		} else if yyct2562 == codecSelferValueTypeArray1234 {
			yyl2562 := r.ReadArrayStart()
			if yyl2562 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2562, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2563Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2563Slc
	var yyhl2563 bool = l >= 0
	for yyj2563 := 0; ; yyj2563++ {
		if yyhl2563 {
			if yyj2563 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2563Slc = r.DecodeBytes(yys2563Slc, true, true)
		yys2563 := string(yys2563Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2563 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2566 := &x.ListMeta
				yym2567 := z.DecBinary()
				_ = yym2567
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2566) {
				} else {
					z.DecFallback(yyv2566, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2568 := &x.Items
				yym2569 := z.DecBinary()
				_ = yym2569
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2568), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2563)
		} // end switch yys2563
	} // end for yyj2563
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2570 int
	var yyb2570 bool
	var yyhl2570 bool = l >= 0
	yyj2570++
	if yyhl2570 {
		yyb2570 = yyj2570 > l
	} else {
		yyb2570 = r.CheckBreak()
	}
	if yyb2570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2570++
	if yyhl2570 {
		yyb2570 = yyj2570 > l
	} else {
		yyb2570 = r.CheckBreak()
	}
	if yyb2570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2570++
	if yyhl2570 {
		yyb2570 = yyj2570 > l
	} else {
		yyb2570 = r.CheckBreak()
	}
	if yyb2570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2573 := &x.ListMeta
		yym2574 := z.DecBinary()
		_ = yym2574
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2573) {
		} else {
			z.DecFallback(yyv2573, false)
		}
	}
	yyj2570++
	if yyhl2570 {
		yyb2570 = yyj2570 > l
	} else {
		yyb2570 = r.CheckBreak()
	}
	if yyb2570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2575 := &x.Items
		yym2576 := z.DecBinary()
		_ = yym2576
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2575), d)
		}
	}
	for {
		yyj2570++
		if yyhl2570 {
			yyb2570 = yyj2570 > l
		} else {
			yyb2570 = r.CheckBreak()
		}
		if yyb2570 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2570-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2577 := z.EncBinary()
		_ = yym2577
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2578 := !z.EncBinary()
			yy2arr2578 := z.EncBasicHandle().StructToArray
			var yyq2578 [5]bool
			_, _, _ = yysep2578, yyq2578, yy2arr2578
			const yyr2578 bool = false
			yyq2578[0] = x.Kind != ""
			yyq2578[1] = x.APIVersion != ""
			yyq2578[2] = true
			yyq2578[3] = len(x.Secrets) != 0
			yyq2578[4] = len(x.ImagePullSecrets) != 0
			var yynn2578 int
			if yyr2578 || yy2arr2578 {
				r.EncodeArrayStart(5)
			} else {
				yynn2578 = 0
				for _, b := range yyq2578 {
					if b {
						yynn2578++
					}
				}
				r.EncodeMapStart(yynn2578)
				yynn2578 = 0
			}
			if yyr2578 || yy2arr2578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2578[0] {
					yym2580 := z.EncBinary()
					_ = yym2580
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2578[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2581 := z.EncBinary()
					_ = yym2581
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2578 || yy2arr2578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2578[1] {
					yym2583 := z.EncBinary()
					_ = yym2583
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2578[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2584 := z.EncBinary()
					_ = yym2584
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2578 || yy2arr2578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2578[2] {
					yy2586 := &x.ObjectMeta
					yy2586.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2578[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2587 := &x.ObjectMeta
					yy2587.CodecEncodeSelf(e)
				}
			}
			if yyr2578 || yy2arr2578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2578[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2589 := z.EncBinary()
						_ = yym2589
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2578[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2590 := z.EncBinary()
						_ = yym2590
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2578 || yy2arr2578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2578[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2592 := z.EncBinary()
						_ = yym2592
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2578[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2593 := z.EncBinary()
						_ = yym2593
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2578 || yy2arr2578 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2594 := z.DecBinary()
	_ = yym2594
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2595 := r.ContainerType()
		if yyct2595 == codecSelferValueTypeMap1234 {
			yyl2595 := r.ReadMapStart()
			if yyl2595 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2595, d)
			}
		} else if yyct2595 == codecSelferValueTypeArray1234 {
			yyl2595 := r.ReadArrayStart()
			if yyl2595 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2595, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2596Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2596Slc
	var yyhl2596 bool = l >= 0
	for yyj2596 := 0; ; yyj2596++ {
		if yyhl2596 {
			if yyj2596 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2596Slc = r.DecodeBytes(yys2596Slc, true, true)
		yys2596 := string(yys2596Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2596 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2599 := &x.ObjectMeta
				yyv2599.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2600 := &x.Secrets
				yym2601 := z.DecBinary()
				_ = yym2601
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2600), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2602 := &x.ImagePullSecrets
				yym2603 := z.DecBinary()
				_ = yym2603
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2602), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2596)
		} // end switch yys2596
	} // end for yyj2596
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2604 int
	var yyb2604 bool
	var yyhl2604 bool = l >= 0
	yyj2604++
	if yyhl2604 {
		yyb2604 = yyj2604 > l
	} else {
		yyb2604 = r.CheckBreak()
	}
	if yyb2604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2604++
	if yyhl2604 {
		yyb2604 = yyj2604 > l
	} else {
		yyb2604 = r.CheckBreak()
	}
	if yyb2604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2604++
	if yyhl2604 {
		yyb2604 = yyj2604 > l
	} else {
		yyb2604 = r.CheckBreak()
	}
	if yyb2604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2607 := &x.ObjectMeta
		yyv2607.CodecDecodeSelf(d)
	}
	yyj2604++
	if yyhl2604 {
		yyb2604 = yyj2604 > l
	} else {
		yyb2604 = r.CheckBreak()
	}
	if yyb2604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2608 := &x.Secrets
		yym2609 := z.DecBinary()
		_ = yym2609
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2608), d)
		}
	}
	yyj2604++
	if yyhl2604 {
		yyb2604 = yyj2604 > l
	} else {
		yyb2604 = r.CheckBreak()
	}
	if yyb2604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2610 := &x.ImagePullSecrets
		yym2611 := z.DecBinary()
		_ = yym2611
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2610), d)
		}
	}
	for {
		yyj2604++
		if yyhl2604 {
			yyb2604 = yyj2604 > l
		} else {
			yyb2604 = r.CheckBreak()
		}
		if yyb2604 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2604-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2612 := z.EncBinary()
		_ = yym2612
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2613 := !z.EncBinary()
			yy2arr2613 := z.EncBasicHandle().StructToArray
			var yyq2613 [4]bool
			_, _, _ = yysep2613, yyq2613, yy2arr2613
			const yyr2613 bool = false
			yyq2613[0] = x.Kind != ""
			yyq2613[1] = x.APIVersion != ""
			yyq2613[2] = true
			var yynn2613 int
			if yyr2613 || yy2arr2613 {
				r.EncodeArrayStart(4)
			} else {
				yynn2613 = 1
				for _, b := range yyq2613 {
					if b {
						yynn2613++
					}
				}
				r.EncodeMapStart(yynn2613)
				yynn2613 = 0
			}
			if yyr2613 || yy2arr2613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2613[0] {
					yym2615 := z.EncBinary()
					_ = yym2615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2613[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2616 := z.EncBinary()
					_ = yym2616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2613 || yy2arr2613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2613[1] {
					yym2618 := z.EncBinary()
					_ = yym2618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2613[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2619 := z.EncBinary()
					_ = yym2619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2613 || yy2arr2613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2613[2] {
					yy2621 := &x.ListMeta
					yym2622 := z.EncBinary()
					_ = yym2622
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2621) {
					} else {
						z.EncFallback(yy2621)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2613[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2623 := &x.ListMeta
					yym2624 := z.EncBinary()
					_ = yym2624
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2623) {
					} else {
						z.EncFallback(yy2623)
					}
				}
			}
			if yyr2613 || yy2arr2613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2626 := z.EncBinary()
					_ = yym2626
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2627 := z.EncBinary()
					_ = yym2627
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2613 || yy2arr2613 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2628 := z.DecBinary()
	_ = yym2628
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2629 := r.ContainerType()
		if yyct2629 == codecSelferValueTypeMap1234 {
			yyl2629 := r.ReadMapStart()
			if yyl2629 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2629, d)
			}
		} else if yyct2629 == codecSelferValueTypeArray1234 {
			yyl2629 := r.ReadArrayStart()
			if yyl2629 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2629, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2630Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2630Slc
	var yyhl2630 bool = l >= 0
	for yyj2630 := 0; ; yyj2630++ {
		if yyhl2630 {
			if yyj2630 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2630Slc = r.DecodeBytes(yys2630Slc, true, true)
		yys2630 := string(yys2630Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2630 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2633 := &x.ListMeta
				yym2634 := z.DecBinary()
				_ = yym2634
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2633) {
				} else {
					z.DecFallback(yyv2633, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2635 := &x.Items
				yym2636 := z.DecBinary()
				_ = yym2636
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2635), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2630)
		} // end switch yys2630
	} // end for yyj2630
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2637 int
	var yyb2637 bool
	var yyhl2637 bool = l >= 0
	yyj2637++
	if yyhl2637 {
		yyb2637 = yyj2637 > l
	} else {
		yyb2637 = r.CheckBreak()
	}
	if yyb2637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2637++
	if yyhl2637 {
		yyb2637 = yyj2637 > l
	} else {
		yyb2637 = r.CheckBreak()
	}
	if yyb2637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2637++
	if yyhl2637 {
		yyb2637 = yyj2637 > l
	} else {
		yyb2637 = r.CheckBreak()
	}
	if yyb2637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2640 := &x.ListMeta
		yym2641 := z.DecBinary()
		_ = yym2641
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2640) {
		} else {
			z.DecFallback(yyv2640, false)
		}
	}
	yyj2637++
	if yyhl2637 {
		yyb2637 = yyj2637 > l
	} else {
		yyb2637 = r.CheckBreak()
	}
	if yyb2637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2642 := &x.Items
		yym2643 := z.DecBinary()
		_ = yym2643
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2642), d)
		}
	}
	for {
		yyj2637++
		if yyhl2637 {
			yyb2637 = yyj2637 > l
		} else {
			yyb2637 = r.CheckBreak()
		}
		if yyb2637 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2637-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2644 := z.EncBinary()
		_ = yym2644
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2645 := !z.EncBinary()
			yy2arr2645 := z.EncBasicHandle().StructToArray
			var yyq2645 [4]bool
			_, _, _ = yysep2645, yyq2645, yy2arr2645
			const yyr2645 bool = false
			yyq2645[0] = x.Kind != ""
			yyq2645[1] = x.APIVersion != ""
			yyq2645[2] = true
			var yynn2645 int
			if yyr2645 || yy2arr2645 {
				r.EncodeArrayStart(4)
			} else {
				yynn2645 = 1
				for _, b := range yyq2645 {
					if b {
						yynn2645++
					}
				}
				r.EncodeMapStart(yynn2645)
				yynn2645 = 0
			}
			if yyr2645 || yy2arr2645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2645[0] {
					yym2647 := z.EncBinary()
					_ = yym2647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2645[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2648 := z.EncBinary()
					_ = yym2648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2645 || yy2arr2645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2645[1] {
					yym2650 := z.EncBinary()
					_ = yym2650
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2645[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2651 := z.EncBinary()
					_ = yym2651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2645 || yy2arr2645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2645[2] {
					yy2653 := &x.ObjectMeta
					yy2653.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2645[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2654 := &x.ObjectMeta
					yy2654.CodecEncodeSelf(e)
				}
			}
			if yyr2645 || yy2arr2645 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2656 := z.EncBinary()
					_ = yym2656
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2657 := z.EncBinary()
					_ = yym2657
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2645 || yy2arr2645 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2658 := z.DecBinary()
	_ = yym2658
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2659 := r.ContainerType()
		if yyct2659 == codecSelferValueTypeMap1234 {
			yyl2659 := r.ReadMapStart()
			if yyl2659 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2659, d)
			}
		} else if yyct2659 == codecSelferValueTypeArray1234 {
			yyl2659 := r.ReadArrayStart()
			if yyl2659 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2659, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2660Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2660Slc
	var yyhl2660 bool = l >= 0
	for yyj2660 := 0; ; yyj2660++ {
		if yyhl2660 {
			if yyj2660 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2660Slc = r.DecodeBytes(yys2660Slc, true, true)
		yys2660 := string(yys2660Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2660 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2663 := &x.ObjectMeta
				yyv2663.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2664 := &x.Subsets
				yym2665 := z.DecBinary()
				_ = yym2665
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2664), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2660)
		} // end switch yys2660
	} // end for yyj2660
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2666 int
	var yyb2666 bool
	var yyhl2666 bool = l >= 0
	yyj2666++
	if yyhl2666 {
		yyb2666 = yyj2666 > l
	} else {
		yyb2666 = r.CheckBreak()
	}
	if yyb2666 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2666++
	if yyhl2666 {
		yyb2666 = yyj2666 > l
	} else {
		yyb2666 = r.CheckBreak()
	}
	if yyb2666 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2666++
	if yyhl2666 {
		yyb2666 = yyj2666 > l
	} else {
		yyb2666 = r.CheckBreak()
	}
	if yyb2666 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2669 := &x.ObjectMeta
		yyv2669.CodecDecodeSelf(d)
	}
	yyj2666++
	if yyhl2666 {
		yyb2666 = yyj2666 > l
	} else {
		yyb2666 = r.CheckBreak()
	}
	if yyb2666 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2670 := &x.Subsets
		yym2671 := z.DecBinary()
		_ = yym2671
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2670), d)
		}
	}
	for {
		yyj2666++
		if yyhl2666 {
			yyb2666 = yyj2666 > l
		} else {
			yyb2666 = r.CheckBreak()
		}
		if yyb2666 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2666-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2672 := z.EncBinary()
		_ = yym2672
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2673 := !z.EncBinary()
			yy2arr2673 := z.EncBasicHandle().StructToArray
			var yyq2673 [3]bool
			_, _, _ = yysep2673, yyq2673, yy2arr2673
			const yyr2673 bool = false
			yyq2673[0] = len(x.Addresses) != 0
			yyq2673[1] = len(x.NotReadyAddresses) != 0
			yyq2673[2] = len(x.Ports) != 0
			var yynn2673 int
			if yyr2673 || yy2arr2673 {
				r.EncodeArrayStart(3)
			} else {
				yynn2673 = 0
				for _, b := range yyq2673 {
					if b {
						yynn2673++
					}
				}
				r.EncodeMapStart(yynn2673)
				yynn2673 = 0
			}
			if yyr2673 || yy2arr2673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2673[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2675 := z.EncBinary()
						_ = yym2675
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2673[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2676 := z.EncBinary()
						_ = yym2676
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2673 || yy2arr2673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2673[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2678 := z.EncBinary()
						_ = yym2678
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2673[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2679 := z.EncBinary()
						_ = yym2679
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2673 || yy2arr2673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2673[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2681 := z.EncBinary()
						_ = yym2681
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2673[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2682 := z.EncBinary()
						_ = yym2682
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2673 || yy2arr2673 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2683 := z.DecBinary()
	_ = yym2683
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2684 := r.ContainerType()
		if yyct2684 == codecSelferValueTypeMap1234 {
			yyl2684 := r.ReadMapStart()
			if yyl2684 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2684, d)
			}
		} else if yyct2684 == codecSelferValueTypeArray1234 {
			yyl2684 := r.ReadArrayStart()
			if yyl2684 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2684, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2685Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2685Slc
	var yyhl2685 bool = l >= 0
	for yyj2685 := 0; ; yyj2685++ {
		if yyhl2685 {
			if yyj2685 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2685Slc = r.DecodeBytes(yys2685Slc, true, true)
		yys2685 := string(yys2685Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2685 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2686 := &x.Addresses
				yym2687 := z.DecBinary()
				_ = yym2687
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2686), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2688 := &x.NotReadyAddresses
				yym2689 := z.DecBinary()
				_ = yym2689
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2688), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2690 := &x.Ports
				yym2691 := z.DecBinary()
				_ = yym2691
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2690), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2685)
		} // end switch yys2685
	} // end for yyj2685
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2692 int
	var yyb2692 bool
	var yyhl2692 bool = l >= 0
	yyj2692++
	if yyhl2692 {
		yyb2692 = yyj2692 > l
	} else {
		yyb2692 = r.CheckBreak()
	}
	if yyb2692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2693 := &x.Addresses
		yym2694 := z.DecBinary()
		_ = yym2694
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2693), d)
		}
	}
	yyj2692++
	if yyhl2692 {
		yyb2692 = yyj2692 > l
	} else {
		yyb2692 = r.CheckBreak()
	}
	if yyb2692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2695 := &x.NotReadyAddresses
		yym2696 := z.DecBinary()
		_ = yym2696
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2695), d)
		}
	}
	yyj2692++
	if yyhl2692 {
		yyb2692 = yyj2692 > l
	} else {
		yyb2692 = r.CheckBreak()
	}
	if yyb2692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2697 := &x.Ports
		yym2698 := z.DecBinary()
		_ = yym2698
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2697), d)
		}
	}
	for {
		yyj2692++
		if yyhl2692 {
			yyb2692 = yyj2692 > l
		} else {
			yyb2692 = r.CheckBreak()
		}
		if yyb2692 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2692-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2699 := z.EncBinary()
		_ = yym2699
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2700 := !z.EncBinary()
			yy2arr2700 := z.EncBasicHandle().StructToArray
			var yyq2700 [4]bool
			_, _, _ = yysep2700, yyq2700, yy2arr2700
			const yyr2700 bool = false
			yyq2700[1] = x.Hostname != ""
			yyq2700[2] = x.NodeName != nil
			yyq2700[3] = x.TargetRef != nil
			var yynn2700 int
			if yyr2700 || yy2arr2700 {
				r.EncodeArrayStart(4)
			} else {
				yynn2700 = 1
				for _, b := range yyq2700 {
					if b {
						yynn2700++
					}
				}
				r.EncodeMapStart(yynn2700)
				yynn2700 = 0
			}
			if yyr2700 || yy2arr2700 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2702 := z.EncBinary()
				_ = yym2702
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2703 := z.EncBinary()
				_ = yym2703
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2700 || yy2arr2700 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2700[1] {
					yym2705 := z.EncBinary()
					_ = yym2705
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2700[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2706 := z.EncBinary()
					_ = yym2706
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2700 || yy2arr2700 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2700[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2708 := *x.NodeName
						yym2709 := z.EncBinary()
						_ = yym2709
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2708))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2700[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2710 := *x.NodeName
						yym2711 := z.EncBinary()
						_ = yym2711
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2710))
						}
					}
				}
			}
			if yyr2700 || yy2arr2700 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2700[3] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2700[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2700 || yy2arr2700 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2713 := z.DecBinary()
	_ = yym2713
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2714 := r.ContainerType()
		if yyct2714 == codecSelferValueTypeMap1234 {
			yyl2714 := r.ReadMapStart()
			if yyl2714 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2714, d)
			}
		} else if yyct2714 == codecSelferValueTypeArray1234 {
			yyl2714 := r.ReadArrayStart()
			if yyl2714 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2714, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2715Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2715Slc
	var yyhl2715 bool = l >= 0
	for yyj2715 := 0; ; yyj2715++ {
		if yyhl2715 {
			if yyj2715 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2715Slc = r.DecodeBytes(yys2715Slc, true, true)
		yys2715 := string(yys2715Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2715 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2719 := z.DecBinary()
				_ = yym2719
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2715)
		} // end switch yys2715
	} // end for yyj2715
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2721 int
	var yyb2721 bool
	var yyhl2721 bool = l >= 0
	yyj2721++
	if yyhl2721 {
		yyb2721 = yyj2721 > l
	} else {
		yyb2721 = r.CheckBreak()
	}
	if yyb2721 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2721++
	if yyhl2721 {
		yyb2721 = yyj2721 > l
	} else {
		yyb2721 = r.CheckBreak()
	}
	if yyb2721 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2721++
	if yyhl2721 {
		yyb2721 = yyj2721 > l
	} else {
		yyb2721 = r.CheckBreak()
	}
	if yyb2721 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2725 := z.DecBinary()
		_ = yym2725
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2721++
	if yyhl2721 {
		yyb2721 = yyj2721 > l
	} else {
		yyb2721 = r.CheckBreak()
	}
	if yyb2721 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2721++
		if yyhl2721 {
			yyb2721 = yyj2721 > l
		} else {
			yyb2721 = r.CheckBreak()
		}
		if yyb2721 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2721-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2727 := z.EncBinary()
		_ = yym2727
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2728 := !z.EncBinary()
			yy2arr2728 := z.EncBasicHandle().StructToArray
			var yyq2728 [3]bool
			_, _, _ = yysep2728, yyq2728, yy2arr2728
			const yyr2728 bool = false
			yyq2728[0] = x.Name != ""
			yyq2728[2] = x.Protocol != ""
			var yynn2728 int
			if yyr2728 || yy2arr2728 {
				r.EncodeArrayStart(3)
			} else {
				yynn2728 = 1
				for _, b := range yyq2728 {
					if b {
						yynn2728++
					}
				}
				r.EncodeMapStart(yynn2728)
				yynn2728 = 0
			}
			if yyr2728 || yy2arr2728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2728[0] {
					yym2730 := z.EncBinary()
					_ = yym2730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2728[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2731 := z.EncBinary()
					_ = yym2731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2728 || yy2arr2728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2733 := z.EncBinary()
				_ = yym2733
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2734 := z.EncBinary()
				_ = yym2734
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2728 || yy2arr2728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2728[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2728[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2728 || yy2arr2728 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2736 := z.DecBinary()
	_ = yym2736
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2737 := r.ContainerType()
		if yyct2737 == codecSelferValueTypeMap1234 {
			yyl2737 := r.ReadMapStart()
			if yyl2737 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2737, d)
			}
		} else if yyct2737 == codecSelferValueTypeArray1234 {
			yyl2737 := r.ReadArrayStart()
			if yyl2737 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2737, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2738Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2738Slc
	var yyhl2738 bool = l >= 0
	for yyj2738 := 0; ; yyj2738++ {
		if yyhl2738 {
			if yyj2738 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2738Slc = r.DecodeBytes(yys2738Slc, true, true)
		yys2738 := string(yys2738Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2738 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2738)
		} // end switch yys2738
	} // end for yyj2738
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2742 int
	var yyb2742 bool
	var yyhl2742 bool = l >= 0
	yyj2742++
	if yyhl2742 {
		yyb2742 = yyj2742 > l
	} else {
		yyb2742 = r.CheckBreak()
	}
	if yyb2742 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2742++
	if yyhl2742 {
		yyb2742 = yyj2742 > l
	} else {
		yyb2742 = r.CheckBreak()
	}
	if yyb2742 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2742++
	if yyhl2742 {
		yyb2742 = yyj2742 > l
	} else {
		yyb2742 = r.CheckBreak()
	}
	if yyb2742 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2742++
		if yyhl2742 {
			yyb2742 = yyj2742 > l
		} else {
			yyb2742 = r.CheckBreak()
		}
		if yyb2742 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2742-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2746 := z.EncBinary()
		_ = yym2746
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2747 := !z.EncBinary()
			yy2arr2747 := z.EncBasicHandle().StructToArray
			var yyq2747 [4]bool
			_, _, _ = yysep2747, yyq2747, yy2arr2747
			const yyr2747 bool = false
			yyq2747[0] = x.Kind != ""
			yyq2747[1] = x.APIVersion != ""
			yyq2747[2] = true
			var yynn2747 int
			if yyr2747 || yy2arr2747 {
				r.EncodeArrayStart(4)
			} else {
				yynn2747 = 1
				for _, b := range yyq2747 {
					if b {
						yynn2747++
					}
				}
				r.EncodeMapStart(yynn2747)
				yynn2747 = 0
			}
			if yyr2747 || yy2arr2747 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2747[0] {
					yym2749 := z.EncBinary()
					_ = yym2749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2747[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2750 := z.EncBinary()
					_ = yym2750
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2747 || yy2arr2747 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2747[1] {
					yym2752 := z.EncBinary()
					_ = yym2752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2747[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2753 := z.EncBinary()
					_ = yym2753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2747 || yy2arr2747 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2747[2] {
					yy2755 := &x.ListMeta
					yym2756 := z.EncBinary()
					_ = yym2756
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2755) {
					} else {
						z.EncFallback(yy2755)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2747[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2757 := &x.ListMeta
					yym2758 := z.EncBinary()
					_ = yym2758
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2757) {
					} else {
						z.EncFallback(yy2757)
					}
				}
			}
			if yyr2747 || yy2arr2747 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2760 := z.EncBinary()
					_ = yym2760
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2761 := z.EncBinary()
					_ = yym2761
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2747 || yy2arr2747 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2762 := z.DecBinary()
	_ = yym2762
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2763 := r.ContainerType()
		if yyct2763 == codecSelferValueTypeMap1234 {
			yyl2763 := r.ReadMapStart()
			if yyl2763 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2763, d)
			}
		} else if yyct2763 == codecSelferValueTypeArray1234 {
			yyl2763 := r.ReadArrayStart()
			if yyl2763 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2763, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2764Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2764Slc
	var yyhl2764 bool = l >= 0
	for yyj2764 := 0; ; yyj2764++ {
		if yyhl2764 {
			if yyj2764 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2764Slc = r.DecodeBytes(yys2764Slc, true, true)
		yys2764 := string(yys2764Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2764 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2767 := &x.ListMeta
				yym2768 := z.DecBinary()
				_ = yym2768
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2767) {
				} else {
					z.DecFallback(yyv2767, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2769 := &x.Items
				yym2770 := z.DecBinary()
				_ = yym2770
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2769), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2764)
		} // end switch yys2764
	} // end for yyj2764
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2771 int
	var yyb2771 bool
	var yyhl2771 bool = l >= 0
	yyj2771++
	if yyhl2771 {
		yyb2771 = yyj2771 > l
	} else {
		yyb2771 = r.CheckBreak()
	}
	if yyb2771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2771++
	if yyhl2771 {
		yyb2771 = yyj2771 > l
	} else {
		yyb2771 = r.CheckBreak()
	}
	if yyb2771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2771++
	if yyhl2771 {
		yyb2771 = yyj2771 > l
	} else {
		yyb2771 = r.CheckBreak()
	}
	if yyb2771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2774 := &x.ListMeta
		yym2775 := z.DecBinary()
		_ = yym2775
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2774) {
		} else {
			z.DecFallback(yyv2774, false)
		}
	}
	yyj2771++
	if yyhl2771 {
		yyb2771 = yyj2771 > l
	} else {
		yyb2771 = r.CheckBreak()
	}
	if yyb2771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2776 := &x.Items
		yym2777 := z.DecBinary()
		_ = yym2777
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2776), d)
		}
	}
	for {
		yyj2771++
		if yyhl2771 {
			yyb2771 = yyj2771 > l
		} else {
			yyb2771 = r.CheckBreak()
		}
		if yyb2771 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2771-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2778 := z.EncBinary()
		_ = yym2778
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2779 := !z.EncBinary()
			yy2arr2779 := z.EncBasicHandle().StructToArray
			var yyq2779 [4]bool
			_, _, _ = yysep2779, yyq2779, yy2arr2779
			const yyr2779 bool = false
			yyq2779[0] = x.PodCIDR != ""
			yyq2779[1] = x.ExternalID != ""
			yyq2779[2] = x.ProviderID != ""
			yyq2779[3] = x.Unschedulable != false
			var yynn2779 int
			if yyr2779 || yy2arr2779 {
				r.EncodeArrayStart(4)
			} else {
				yynn2779 = 0
				for _, b := range yyq2779 {
					if b {
						yynn2779++
					}
				}
				r.EncodeMapStart(yynn2779)
				yynn2779 = 0
			}
			if yyr2779 || yy2arr2779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2779[0] {
					yym2781 := z.EncBinary()
					_ = yym2781
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2779[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2782 := z.EncBinary()
					_ = yym2782
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2779 || yy2arr2779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2779[1] {
					yym2784 := z.EncBinary()
					_ = yym2784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2779[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2785 := z.EncBinary()
					_ = yym2785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2779 || yy2arr2779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2779[2] {
					yym2787 := z.EncBinary()
					_ = yym2787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2779[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2788 := z.EncBinary()
					_ = yym2788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2779 || yy2arr2779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2779[3] {
					yym2790 := z.EncBinary()
					_ = yym2790
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2779[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2791 := z.EncBinary()
					_ = yym2791
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2779 || yy2arr2779 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2792 := z.DecBinary()
	_ = yym2792
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2793 := r.ContainerType()
		if yyct2793 == codecSelferValueTypeMap1234 {
			yyl2793 := r.ReadMapStart()
			if yyl2793 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2793, d)
			}
		} else if yyct2793 == codecSelferValueTypeArray1234 {
			yyl2793 := r.ReadArrayStart()
			if yyl2793 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2793, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2794Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2794Slc
	var yyhl2794 bool = l >= 0
	for yyj2794 := 0; ; yyj2794++ {
		if yyhl2794 {
			if yyj2794 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2794Slc = r.DecodeBytes(yys2794Slc, true, true)
		yys2794 := string(yys2794Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2794 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2794)
		} // end switch yys2794
	} // end for yyj2794
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2799 int
	var yyb2799 bool
	var yyhl2799 bool = l >= 0
	yyj2799++
	if yyhl2799 {
		yyb2799 = yyj2799 > l
	} else {
		yyb2799 = r.CheckBreak()
	}
	if yyb2799 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2799++
	if yyhl2799 {
		yyb2799 = yyj2799 > l
	} else {
		yyb2799 = r.CheckBreak()
	}
	if yyb2799 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2799++
	if yyhl2799 {
		yyb2799 = yyj2799 > l
	} else {
		yyb2799 = r.CheckBreak()
	}
	if yyb2799 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2799++
	if yyhl2799 {
		yyb2799 = yyj2799 > l
	} else {
		yyb2799 = r.CheckBreak()
	}
	if yyb2799 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2799++
		if yyhl2799 {
			yyb2799 = yyj2799 > l
		} else {
			yyb2799 = r.CheckBreak()
		}
		if yyb2799 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2799-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2804 := z.EncBinary()
		_ = yym2804
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2805 := !z.EncBinary()
			yy2arr2805 := z.EncBasicHandle().StructToArray
			var yyq2805 [1]bool
			_, _, _ = yysep2805, yyq2805, yy2arr2805
			const yyr2805 bool = false
			var yynn2805 int
			if yyr2805 || yy2arr2805 {
				r.EncodeArrayStart(1)
			} else {
				yynn2805 = 1
				for _, b := range yyq2805 {
					if b {
						yynn2805++
					}
				}
				r.EncodeMapStart(yynn2805)
				yynn2805 = 0
			}
			if yyr2805 || yy2arr2805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2807 := z.EncBinary()
				_ = yym2807
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2808 := z.EncBinary()
				_ = yym2808
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2805 || yy2arr2805 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2809 := z.DecBinary()
	_ = yym2809
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2810 := r.ContainerType()
		if yyct2810 == codecSelferValueTypeMap1234 {
			yyl2810 := r.ReadMapStart()
			if yyl2810 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2810, d)
			}
		} else if yyct2810 == codecSelferValueTypeArray1234 {
			yyl2810 := r.ReadArrayStart()
			if yyl2810 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2810, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2811Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2811Slc
	var yyhl2811 bool = l >= 0
	for yyj2811 := 0; ; yyj2811++ {
		if yyhl2811 {
			if yyj2811 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2811Slc = r.DecodeBytes(yys2811Slc, true, true)
		yys2811 := string(yys2811Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2811 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2811)
		} // end switch yys2811
	} // end for yyj2811
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2813 int
	var yyb2813 bool
	var yyhl2813 bool = l >= 0
	yyj2813++
	if yyhl2813 {
		yyb2813 = yyj2813 > l
	} else {
		yyb2813 = r.CheckBreak()
	}
	if yyb2813 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2813++
		if yyhl2813 {
			yyb2813 = yyj2813 > l
		} else {
			yyb2813 = r.CheckBreak()
		}
		if yyb2813 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2813-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2815 := z.EncBinary()
		_ = yym2815
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2816 := !z.EncBinary()
			yy2arr2816 := z.EncBasicHandle().StructToArray
			var yyq2816 [1]bool
			_, _, _ = yysep2816, yyq2816, yy2arr2816
			const yyr2816 bool = false
			yyq2816[0] = true
			var yynn2816 int
			if yyr2816 || yy2arr2816 {
				r.EncodeArrayStart(1)
			} else {
				yynn2816 = 0
				for _, b := range yyq2816 {
					if b {
						yynn2816++
					}
				}
				r.EncodeMapStart(yynn2816)
				yynn2816 = 0
			}
			if yyr2816 || yy2arr2816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2816[0] {
					yy2818 := &x.KubeletEndpoint
					yy2818.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2816[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2819 := &x.KubeletEndpoint
					yy2819.CodecEncodeSelf(e)
				}
			}
			if yyr2816 || yy2arr2816 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2820 := z.DecBinary()
	_ = yym2820
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2821 := r.ContainerType()
		if yyct2821 == codecSelferValueTypeMap1234 {
			yyl2821 := r.ReadMapStart()
			if yyl2821 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2821, d)
			}
		} else if yyct2821 == codecSelferValueTypeArray1234 {
			yyl2821 := r.ReadArrayStart()
			if yyl2821 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2821, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2822Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2822Slc
	var yyhl2822 bool = l >= 0
	for yyj2822 := 0; ; yyj2822++ {
		if yyhl2822 {
			if yyj2822 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2822Slc = r.DecodeBytes(yys2822Slc, true, true)
		yys2822 := string(yys2822Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2822 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2823 := &x.KubeletEndpoint
				yyv2823.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2822)
		} // end switch yys2822
	} // end for yyj2822
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2824 int
	var yyb2824 bool
	var yyhl2824 bool = l >= 0
	yyj2824++
	if yyhl2824 {
		yyb2824 = yyj2824 > l
	} else {
		yyb2824 = r.CheckBreak()
	}
	if yyb2824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2825 := &x.KubeletEndpoint
		yyv2825.CodecDecodeSelf(d)
	}
	for {
		yyj2824++
		if yyhl2824 {
			yyb2824 = yyj2824 > l
		} else {
			yyb2824 = r.CheckBreak()
		}
		if yyb2824 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2824-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2826 := z.EncBinary()
		_ = yym2826
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2827 := !z.EncBinary()
			yy2arr2827 := z.EncBasicHandle().StructToArray
			var yyq2827 [10]bool
			_, _, _ = yysep2827, yyq2827, yy2arr2827
			const yyr2827 bool = false
			var yynn2827 int
			if yyr2827 || yy2arr2827 {
				r.EncodeArrayStart(10)
			} else {
				yynn2827 = 10
				for _, b := range yyq2827 {
					if b {
						yynn2827++
					}
				}
				r.EncodeMapStart(yynn2827)
				yynn2827 = 0
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2829 := z.EncBinary()
				_ = yym2829
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2830 := z.EncBinary()
				_ = yym2830
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2832 := z.EncBinary()
				_ = yym2832
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2833 := z.EncBinary()
				_ = yym2833
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2835 := z.EncBinary()
				_ = yym2835
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2836 := z.EncBinary()
				_ = yym2836
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2838 := z.EncBinary()
				_ = yym2838
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2839 := z.EncBinary()
				_ = yym2839
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2841 := z.EncBinary()
				_ = yym2841
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2842 := z.EncBinary()
				_ = yym2842
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2844 := z.EncBinary()
				_ = yym2844
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2845 := z.EncBinary()
				_ = yym2845
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2847 := z.EncBinary()
				_ = yym2847
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2848 := z.EncBinary()
				_ = yym2848
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2850 := z.EncBinary()
				_ = yym2850
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2851 := z.EncBinary()
				_ = yym2851
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2853 := z.EncBinary()
				_ = yym2853
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2854 := z.EncBinary()
				_ = yym2854
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2856 := z.EncBinary()
				_ = yym2856
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2857 := z.EncBinary()
				_ = yym2857
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2858 := z.DecBinary()
	_ = yym2858
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2859 := r.ContainerType()
		if yyct2859 == codecSelferValueTypeMap1234 {
			yyl2859 := r.ReadMapStart()
			if yyl2859 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2859, d)
			}
		} else if yyct2859 == codecSelferValueTypeArray1234 {
			yyl2859 := r.ReadArrayStart()
			if yyl2859 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2859, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2860Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2860Slc
	var yyhl2860 bool = l >= 0
	for yyj2860 := 0; ; yyj2860++ {
		if yyhl2860 {
			if yyj2860 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2860Slc = r.DecodeBytes(yys2860Slc, true, true)
		yys2860 := string(yys2860Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2860 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2860)
		} // end switch yys2860
	} // end for yyj2860
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2871 int
	var yyb2871 bool
	var yyhl2871 bool = l >= 0
	yyj2871++
	if yyhl2871 {
		yyb2871 = yyj2871 > l
	} else {
		yyb2871 = r.CheckBreak()
	}
	if yyb2871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2871++
	if yyhl2871 {
		yyb2871 = yyj2871 > l
	} else {
		yyb2871 = r.CheckBreak()
	}
	if yyb2871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2871++
	if yyhl2871 {
		yyb2871 = yyj2871 > l
	} else {
		yyb2871 = r.CheckBreak()
	}
	if yyb2871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2871++
	if yyhl2871 {
		yyb2871 = yyj2871 > l
	} else {
		yyb2871 = r.CheckBreak()
	}
	if yyb2871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2871++
	if yyhl2871 {
		yyb2871 = yyj2871 > l
	} else {
		yyb2871 = r.CheckBreak()
	}
	if yyb2871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2871++
	if yyhl2871 {
		yyb2871 = yyj2871 > l
	} else {
		yyb2871 = r.CheckBreak()
	}
	if yyb2871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2871++
	if yyhl2871 {
		yyb2871 = yyj2871 > l
	} else {
		yyb2871 = r.CheckBreak()
	}
	if yyb2871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2871++
	if yyhl2871 {
		yyb2871 = yyj2871 > l
	} else {
		yyb2871 = r.CheckBreak()
	}
	if yyb2871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj2871++
	if yyhl2871 {
		yyb2871 = yyj2871 > l
	} else {
		yyb2871 = r.CheckBreak()
	}
	if yyb2871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj2871++
	if yyhl2871 {
		yyb2871 = yyj2871 > l
	} else {
		yyb2871 = r.CheckBreak()
	}
	if yyb2871 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj2871++
		if yyhl2871 {
			yyb2871 = yyj2871 > l
		} else {
			yyb2871 = r.CheckBreak()
		}
		if yyb2871 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2871-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2882 := z.EncBinary()
		_ = yym2882
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2883 := !z.EncBinary()
			yy2arr2883 := z.EncBasicHandle().StructToArray
			var yyq2883 [10]bool
			_, _, _ = yysep2883, yyq2883, yy2arr2883
			const yyr2883 bool = false
			yyq2883[0] = len(x.Capacity) != 0
			yyq2883[1] = len(x.Allocatable) != 0
			yyq2883[2] = x.Phase != ""
			yyq2883[3] = len(x.Conditions) != 0
			yyq2883[4] = len(x.Addresses) != 0
			yyq2883[5] = true
			yyq2883[6] = true
			yyq2883[7] = len(x.Images) != 0
			yyq2883[8] = len(x.VolumesInUse) != 0
			yyq2883[9] = len(x.VolumesAttached) != 0
			var yynn2883 int
			if yyr2883 || yy2arr2883 {
				r.EncodeArrayStart(10)
			} else {
				yynn2883 = 0
				for _, b := range yyq2883 {
					if b {
						yynn2883++
					}
				}
				r.EncodeMapStart(yynn2883)
				yynn2883 = 0
			}
			if yyr2883 || yy2arr2883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2883[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2883[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2883 || yy2arr2883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2883[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2883[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2883 || yy2arr2883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2883[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2883[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2883 || yy2arr2883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2883[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2888 := z.EncBinary()
						_ = yym2888
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2883[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2889 := z.EncBinary()
						_ = yym2889
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2883 || yy2arr2883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2883[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2891 := z.EncBinary()
						_ = yym2891
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2883[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2892 := z.EncBinary()
						_ = yym2892
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2883 || yy2arr2883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2883[5] {
					yy2894 := &x.DaemonEndpoints
					yy2894.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2883[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2895 := &x.DaemonEndpoints
					yy2895.CodecEncodeSelf(e)
				}
			}
			if yyr2883 || yy2arr2883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2883[6] {
					yy2897 := &x.NodeInfo
					yy2897.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2883[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2898 := &x.NodeInfo
					yy2898.CodecEncodeSelf(e)
				}
			}
			if yyr2883 || yy2arr2883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2883[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2900 := z.EncBinary()
						_ = yym2900
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2883[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2901 := z.EncBinary()
						_ = yym2901
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr2883 || yy2arr2883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2883[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2903 := z.EncBinary()
						_ = yym2903
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2883[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2904 := z.EncBinary()
						_ = yym2904
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr2883 || yy2arr2883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2883[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2906 := z.EncBinary()
						_ = yym2906
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2883[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2907 := z.EncBinary()
						_ = yym2907
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr2883 || yy2arr2883 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2908 := z.DecBinary()
	_ = yym2908
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2909 := r.ContainerType()
		if yyct2909 == codecSelferValueTypeMap1234 {
			yyl2909 := r.ReadMapStart()
			if yyl2909 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2909, d)
			}
		} else if yyct2909 == codecSelferValueTypeArray1234 {
			yyl2909 := r.ReadArrayStart()
			if yyl2909 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2909, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2910Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2910Slc
	var yyhl2910 bool = l >= 0
	for yyj2910 := 0; ; yyj2910++ {
		if yyhl2910 {
			if yyj2910 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2910Slc = r.DecodeBytes(yys2910Slc, true, true)
		yys2910 := string(yys2910Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2910 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2911 := &x.Capacity
				yyv2911.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2912 := &x.Allocatable
				yyv2912.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2914 := &x.Conditions
				yym2915 := z.DecBinary()
				_ = yym2915
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2914), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2916 := &x.Addresses
				yym2917 := z.DecBinary()
				_ = yym2917
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2916), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2918 := &x.DaemonEndpoints
				yyv2918.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2919 := &x.NodeInfo
				yyv2919.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv2920 := &x.Images
				yym2921 := z.DecBinary()
				_ = yym2921
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv2920), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv2922 := &x.VolumesInUse
				yym2923 := z.DecBinary()
				_ = yym2923
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv2922), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv2924 := &x.VolumesAttached
				yym2925 := z.DecBinary()
				_ = yym2925
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv2924), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2910)
		} // end switch yys2910
	} // end for yyj2910
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2926 int
	var yyb2926 bool
	var yyhl2926 bool = l >= 0
	yyj2926++
	if yyhl2926 {
		yyb2926 = yyj2926 > l
	} else {
		yyb2926 = r.CheckBreak()
	}
	if yyb2926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2927 := &x.Capacity
		yyv2927.CodecDecodeSelf(d)
	}
	yyj2926++
	if yyhl2926 {
		yyb2926 = yyj2926 > l
	} else {
		yyb2926 = r.CheckBreak()
	}
	if yyb2926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv2928 := &x.Allocatable
		yyv2928.CodecDecodeSelf(d)
	}
	yyj2926++
	if yyhl2926 {
		yyb2926 = yyj2926 > l
	} else {
		yyb2926 = r.CheckBreak()
	}
	if yyb2926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2926++
	if yyhl2926 {
		yyb2926 = yyj2926 > l
	} else {
		yyb2926 = r.CheckBreak()
	}
	if yyb2926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2930 := &x.Conditions
		yym2931 := z.DecBinary()
		_ = yym2931
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2930), d)
		}
	}
	yyj2926++
	if yyhl2926 {
		yyb2926 = yyj2926 > l
	} else {
		yyb2926 = r.CheckBreak()
	}
	if yyb2926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2932 := &x.Addresses
		yym2933 := z.DecBinary()
		_ = yym2933
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2932), d)
		}
	}
	yyj2926++
	if yyhl2926 {
		yyb2926 = yyj2926 > l
	} else {
		yyb2926 = r.CheckBreak()
	}
	if yyb2926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2934 := &x.DaemonEndpoints
		yyv2934.CodecDecodeSelf(d)
	}
	yyj2926++
	if yyhl2926 {
		yyb2926 = yyj2926 > l
	} else {
		yyb2926 = r.CheckBreak()
	}
	if yyb2926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2935 := &x.NodeInfo
		yyv2935.CodecDecodeSelf(d)
	}
	yyj2926++
	if yyhl2926 {
		yyb2926 = yyj2926 > l
	} else {
		yyb2926 = r.CheckBreak()
	}
	if yyb2926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv2936 := &x.Images
		yym2937 := z.DecBinary()
		_ = yym2937
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv2936), d)
		}
	}
	yyj2926++
	if yyhl2926 {
		yyb2926 = yyj2926 > l
	} else {
		yyb2926 = r.CheckBreak()
	}
	if yyb2926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv2938 := &x.VolumesInUse
		yym2939 := z.DecBinary()
		_ = yym2939
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv2938), d)
		}
	}
	yyj2926++
	if yyhl2926 {
		yyb2926 = yyj2926 > l
	} else {
		yyb2926 = r.CheckBreak()
	}
	if yyb2926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv2940 := &x.VolumesAttached
		yym2941 := z.DecBinary()
		_ = yym2941
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv2940), d)
		}
	}
	for {
		yyj2926++
		if yyhl2926 {
			yyb2926 = yyj2926 > l
		} else {
			yyb2926 = r.CheckBreak()
		}
		if yyb2926 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2926-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2942 := z.EncBinary()
	_ = yym2942
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2943 := z.DecBinary()
	_ = yym2943
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2944 := z.EncBinary()
		_ = yym2944
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2945 := !z.EncBinary()
			yy2arr2945 := z.EncBasicHandle().StructToArray
			var yyq2945 [2]bool
			_, _, _ = yysep2945, yyq2945, yy2arr2945
			const yyr2945 bool = false
			var yynn2945 int
			if yyr2945 || yy2arr2945 {
				r.EncodeArrayStart(2)
			} else {
				yynn2945 = 2
				for _, b := range yyq2945 {
					if b {
						yynn2945++
					}
				}
				r.EncodeMapStart(yynn2945)
				yynn2945 = 0
			}
			if yyr2945 || yy2arr2945 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr2945 || yy2arr2945 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2948 := z.EncBinary()
				_ = yym2948
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2949 := z.EncBinary()
				_ = yym2949
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr2945 || yy2arr2945 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2950 := z.DecBinary()
	_ = yym2950
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2951 := r.ContainerType()
		if yyct2951 == codecSelferValueTypeMap1234 {
			yyl2951 := r.ReadMapStart()
			if yyl2951 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2951, d)
			}
		} else if yyct2951 == codecSelferValueTypeArray1234 {
			yyl2951 := r.ReadArrayStart()
			if yyl2951 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2951, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2952Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2952Slc
	var yyhl2952 bool = l >= 0
	for yyj2952 := 0; ; yyj2952++ {
		if yyhl2952 {
			if yyj2952 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2952Slc = r.DecodeBytes(yys2952Slc, true, true)
		yys2952 := string(yys2952Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2952 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2952)
		} // end switch yys2952
	} // end for yyj2952
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2955 int
	var yyb2955 bool
	var yyhl2955 bool = l >= 0
	yyj2955++
	if yyhl2955 {
		yyb2955 = yyj2955 > l
	} else {
		yyb2955 = r.CheckBreak()
	}
	if yyb2955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj2955++
	if yyhl2955 {
		yyb2955 = yyj2955 > l
	} else {
		yyb2955 = r.CheckBreak()
	}
	if yyb2955 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj2955++
		if yyhl2955 {
			yyb2955 = yyj2955 > l
		} else {
			yyb2955 = r.CheckBreak()
		}
		if yyb2955 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2955-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2958 := z.EncBinary()
		_ = yym2958
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2959 := !z.EncBinary()
			yy2arr2959 := z.EncBasicHandle().StructToArray
			var yyq2959 [1]bool
			_, _, _ = yysep2959, yyq2959, yy2arr2959
			const yyr2959 bool = false
			yyq2959[0] = len(x.PreferAvoidPods) != 0
			var yynn2959 int
			if yyr2959 || yy2arr2959 {
				r.EncodeArrayStart(1)
			} else {
				yynn2959 = 0
				for _, b := range yyq2959 {
					if b {
						yynn2959++
					}
				}
				r.EncodeMapStart(yynn2959)
				yynn2959 = 0
			}
			if yyr2959 || yy2arr2959 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2959[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym2961 := z.EncBinary()
						_ = yym2961
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2959[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym2962 := z.EncBinary()
						_ = yym2962
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr2959 || yy2arr2959 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2963 := z.DecBinary()
	_ = yym2963
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2964 := r.ContainerType()
		if yyct2964 == codecSelferValueTypeMap1234 {
			yyl2964 := r.ReadMapStart()
			if yyl2964 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2964, d)
			}
		} else if yyct2964 == codecSelferValueTypeArray1234 {
			yyl2964 := r.ReadArrayStart()
			if yyl2964 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2964, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2965Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2965Slc
	var yyhl2965 bool = l >= 0
	for yyj2965 := 0; ; yyj2965++ {
		if yyhl2965 {
			if yyj2965 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2965Slc = r.DecodeBytes(yys2965Slc, true, true)
		yys2965 := string(yys2965Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2965 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv2966 := &x.PreferAvoidPods
				yym2967 := z.DecBinary()
				_ = yym2967
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv2966), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2965)
		} // end switch yys2965
	} // end for yyj2965
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2968 int
	var yyb2968 bool
	var yyhl2968 bool = l >= 0
	yyj2968++
	if yyhl2968 {
		yyb2968 = yyj2968 > l
	} else {
		yyb2968 = r.CheckBreak()
	}
	if yyb2968 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv2969 := &x.PreferAvoidPods
		yym2970 := z.DecBinary()
		_ = yym2970
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv2969), d)
		}
	}
	for {
		yyj2968++
		if yyhl2968 {
			yyb2968 = yyj2968 > l
		} else {
			yyb2968 = r.CheckBreak()
		}
		if yyb2968 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2968-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2971 := z.EncBinary()
		_ = yym2971
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2972 := !z.EncBinary()
			yy2arr2972 := z.EncBasicHandle().StructToArray
			var yyq2972 [4]bool
			_, _, _ = yysep2972, yyq2972, yy2arr2972
			const yyr2972 bool = false
			yyq2972[1] = true
			yyq2972[2] = x.Reason != ""
			yyq2972[3] = x.Message != ""
			var yynn2972 int
			if yyr2972 || yy2arr2972 {
				r.EncodeArrayStart(4)
			} else {
				yynn2972 = 1
				for _, b := range yyq2972 {
					if b {
						yynn2972++
					}
				}
				r.EncodeMapStart(yynn2972)
				yynn2972 = 0
			}
			if yyr2972 || yy2arr2972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2974 := &x.PodSignature
				yy2974.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2975 := &x.PodSignature
				yy2975.CodecEncodeSelf(e)
			}
			if yyr2972 || yy2arr2972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2972[1] {
					yy2977 := &x.EvictionTime
					yym2978 := z.EncBinary()
					_ = yym2978
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2977) {
					} else if yym2978 {
						z.EncBinaryMarshal(yy2977)
					} else if !yym2978 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2977)
					} else {
						z.EncFallback(yy2977)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2972[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2979 := &x.EvictionTime
					yym2980 := z.EncBinary()
					_ = yym2980
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2979) {
					} else if yym2980 {
						z.EncBinaryMarshal(yy2979)
					} else if !yym2980 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2979)
					} else {
						z.EncFallback(yy2979)
					}
				}
			}
			if yyr2972 || yy2arr2972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2972[2] {
					yym2982 := z.EncBinary()
					_ = yym2982
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2972[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2983 := z.EncBinary()
					_ = yym2983
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2972 || yy2arr2972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2972[3] {
					yym2985 := z.EncBinary()
					_ = yym2985
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2972[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2986 := z.EncBinary()
					_ = yym2986
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2972 || yy2arr2972 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2987 := z.DecBinary()
	_ = yym2987
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2988 := r.ContainerType()
		if yyct2988 == codecSelferValueTypeMap1234 {
			yyl2988 := r.ReadMapStart()
			if yyl2988 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2988, d)
			}
		} else if yyct2988 == codecSelferValueTypeArray1234 {
			yyl2988 := r.ReadArrayStart()
			if yyl2988 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2988, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2989Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2989Slc
	var yyhl2989 bool = l >= 0
	for yyj2989 := 0; ; yyj2989++ {
		if yyhl2989 {
			if yyj2989 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2989Slc = r.DecodeBytes(yys2989Slc, true, true)
		yys2989 := string(yys2989Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2989 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv2990 := &x.PodSignature
				yyv2990.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv2991 := &x.EvictionTime
				yym2992 := z.DecBinary()
				_ = yym2992
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2991) {
				} else if yym2992 {
					z.DecBinaryUnmarshal(yyv2991)
				} else if !yym2992 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2991)
				} else {
					z.DecFallback(yyv2991, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2989)
		} // end switch yys2989
	} // end for yyj2989
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2995 int
	var yyb2995 bool
	var yyhl2995 bool = l >= 0
	yyj2995++
	if yyhl2995 {
		yyb2995 = yyj2995 > l
	} else {
		yyb2995 = r.CheckBreak()
	}
	if yyb2995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv2996 := &x.PodSignature
		yyv2996.CodecDecodeSelf(d)
	}
	yyj2995++
	if yyhl2995 {
		yyb2995 = yyj2995 > l
	} else {
		yyb2995 = r.CheckBreak()
	}
	if yyb2995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv2997 := &x.EvictionTime
		yym2998 := z.DecBinary()
		_ = yym2998
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2997) {
		} else if yym2998 {
			z.DecBinaryUnmarshal(yyv2997)
		} else if !yym2998 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2997)
		} else {
			z.DecFallback(yyv2997, false)
		}
	}
	yyj2995++
	if yyhl2995 {
		yyb2995 = yyj2995 > l
	} else {
		yyb2995 = r.CheckBreak()
	}
	if yyb2995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2995++
	if yyhl2995 {
		yyb2995 = yyj2995 > l
	} else {
		yyb2995 = r.CheckBreak()
	}
	if yyb2995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2995++
		if yyhl2995 {
			yyb2995 = yyj2995 > l
		} else {
			yyb2995 = r.CheckBreak()
		}
		if yyb2995 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2995-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3001 := z.EncBinary()
		_ = yym3001
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3002 := !z.EncBinary()
			yy2arr3002 := z.EncBasicHandle().StructToArray
			var yyq3002 [1]bool
			_, _, _ = yysep3002, yyq3002, yy2arr3002
			const yyr3002 bool = false
			yyq3002[0] = x.PodController != nil
			var yynn3002 int
			if yyr3002 || yy2arr3002 {
				r.EncodeArrayStart(1)
			} else {
				yynn3002 = 0
				for _, b := range yyq3002 {
					if b {
						yynn3002++
					}
				}
				r.EncodeMapStart(yynn3002)
				yynn3002 = 0
			}
			if yyr3002 || yy2arr3002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3002[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3002[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3002 || yy2arr3002 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3004 := z.DecBinary()
	_ = yym3004
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3005 := r.ContainerType()
		if yyct3005 == codecSelferValueTypeMap1234 {
			yyl3005 := r.ReadMapStart()
			if yyl3005 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3005, d)
			}
		} else if yyct3005 == codecSelferValueTypeArray1234 {
			yyl3005 := r.ReadArrayStart()
			if yyl3005 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3005, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3006Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3006Slc
	var yyhl3006 bool = l >= 0
	for yyj3006 := 0; ; yyj3006++ {
		if yyhl3006 {
			if yyj3006 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3006Slc = r.DecodeBytes(yys3006Slc, true, true)
		yys3006 := string(yys3006Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3006 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3006)
		} // end switch yys3006
	} // end for yyj3006
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3008 int
	var yyb3008 bool
	var yyhl3008 bool = l >= 0
	yyj3008++
	if yyhl3008 {
		yyb3008 = yyj3008 > l
	} else {
		yyb3008 = r.CheckBreak()
	}
	if yyb3008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj3008++
		if yyhl3008 {
			yyb3008 = yyj3008 > l
		} else {
			yyb3008 = r.CheckBreak()
		}
		if yyb3008 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3008-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3010 := z.EncBinary()
		_ = yym3010
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3011 := !z.EncBinary()
			yy2arr3011 := z.EncBasicHandle().StructToArray
			var yyq3011 [2]bool
			_, _, _ = yysep3011, yyq3011, yy2arr3011
			const yyr3011 bool = false
			yyq3011[1] = x.SizeBytes != 0
			var yynn3011 int
			if yyr3011 || yy2arr3011 {
				r.EncodeArrayStart(2)
			} else {
				yynn3011 = 1
				for _, b := range yyq3011 {
					if b {
						yynn3011++
					}
				}
				r.EncodeMapStart(yynn3011)
				yynn3011 = 0
			}
			if yyr3011 || yy2arr3011 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3013 := z.EncBinary()
					_ = yym3013
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3014 := z.EncBinary()
					_ = yym3014
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3011 || yy2arr3011 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3011[1] {
					yym3016 := z.EncBinary()
					_ = yym3016
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3011[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3017 := z.EncBinary()
					_ = yym3017
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3011 || yy2arr3011 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3018 := z.DecBinary()
	_ = yym3018
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3019 := r.ContainerType()
		if yyct3019 == codecSelferValueTypeMap1234 {
			yyl3019 := r.ReadMapStart()
			if yyl3019 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3019, d)
			}
		} else if yyct3019 == codecSelferValueTypeArray1234 {
			yyl3019 := r.ReadArrayStart()
			if yyl3019 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3019, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3020Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3020Slc
	var yyhl3020 bool = l >= 0
	for yyj3020 := 0; ; yyj3020++ {
		if yyhl3020 {
			if yyj3020 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3020Slc = r.DecodeBytes(yys3020Slc, true, true)
		yys3020 := string(yys3020Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3020 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3021 := &x.Names
				yym3022 := z.DecBinary()
				_ = yym3022
				if false {
				} else {
					z.F.DecSliceStringX(yyv3021, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3020)
		} // end switch yys3020
	} // end for yyj3020
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3024 int
	var yyb3024 bool
	var yyhl3024 bool = l >= 0
	yyj3024++
	if yyhl3024 {
		yyb3024 = yyj3024 > l
	} else {
		yyb3024 = r.CheckBreak()
	}
	if yyb3024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3025 := &x.Names
		yym3026 := z.DecBinary()
		_ = yym3026
		if false {
		} else {
			z.F.DecSliceStringX(yyv3025, false, d)
		}
	}
	yyj3024++
	if yyhl3024 {
		yyb3024 = yyj3024 > l
	} else {
		yyb3024 = r.CheckBreak()
	}
	if yyb3024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3024++
		if yyhl3024 {
			yyb3024 = yyj3024 > l
		} else {
			yyb3024 = r.CheckBreak()
		}
		if yyb3024 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3024-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3028 := z.EncBinary()
	_ = yym3028
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3029 := z.DecBinary()
	_ = yym3029
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3030 := z.EncBinary()
	_ = yym3030
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3031 := z.DecBinary()
	_ = yym3031
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3032 := z.EncBinary()
		_ = yym3032
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3033 := !z.EncBinary()
			yy2arr3033 := z.EncBasicHandle().StructToArray
			var yyq3033 [6]bool
			_, _, _ = yysep3033, yyq3033, yy2arr3033
			const yyr3033 bool = false
			yyq3033[2] = true
			yyq3033[3] = true
			yyq3033[4] = x.Reason != ""
			yyq3033[5] = x.Message != ""
			var yynn3033 int
			if yyr3033 || yy2arr3033 {
				r.EncodeArrayStart(6)
			} else {
				yynn3033 = 2
				for _, b := range yyq3033 {
					if b {
						yynn3033++
					}
				}
				r.EncodeMapStart(yynn3033)
				yynn3033 = 0
			}
			if yyr3033 || yy2arr3033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3033 || yy2arr3033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3033 || yy2arr3033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3033[2] {
					yy3037 := &x.LastHeartbeatTime
					yym3038 := z.EncBinary()
					_ = yym3038
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3037) {
					} else if yym3038 {
						z.EncBinaryMarshal(yy3037)
					} else if !yym3038 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3037)
					} else {
						z.EncFallback(yy3037)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3033[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3039 := &x.LastHeartbeatTime
					yym3040 := z.EncBinary()
					_ = yym3040
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3039) {
					} else if yym3040 {
						z.EncBinaryMarshal(yy3039)
					} else if !yym3040 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3039)
					} else {
						z.EncFallback(yy3039)
					}
				}
			}
			if yyr3033 || yy2arr3033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3033[3] {
					yy3042 := &x.LastTransitionTime
					yym3043 := z.EncBinary()
					_ = yym3043
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3042) {
					} else if yym3043 {
						z.EncBinaryMarshal(yy3042)
					} else if !yym3043 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3042)
					} else {
						z.EncFallback(yy3042)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3033[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3044 := &x.LastTransitionTime
					yym3045 := z.EncBinary()
					_ = yym3045
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3044) {
					} else if yym3045 {
						z.EncBinaryMarshal(yy3044)
					} else if !yym3045 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3044)
					} else {
						z.EncFallback(yy3044)
					}
				}
			}
			if yyr3033 || yy2arr3033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3033[4] {
					yym3047 := z.EncBinary()
					_ = yym3047
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3033[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3048 := z.EncBinary()
					_ = yym3048
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3033 || yy2arr3033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3033[5] {
					yym3050 := z.EncBinary()
					_ = yym3050
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3033[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3051 := z.EncBinary()
					_ = yym3051
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3033 || yy2arr3033 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3052 := z.DecBinary()
	_ = yym3052
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3053 := r.ContainerType()
		if yyct3053 == codecSelferValueTypeMap1234 {
			yyl3053 := r.ReadMapStart()
			if yyl3053 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3053, d)
			}
		} else if yyct3053 == codecSelferValueTypeArray1234 {
			yyl3053 := r.ReadArrayStart()
			if yyl3053 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3053, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3054Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3054Slc
	var yyhl3054 bool = l >= 0
	for yyj3054 := 0; ; yyj3054++ {
		if yyhl3054 {
			if yyj3054 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3054Slc = r.DecodeBytes(yys3054Slc, true, true)
		yys3054 := string(yys3054Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3054 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3057 := &x.LastHeartbeatTime
				yym3058 := z.DecBinary()
				_ = yym3058
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3057) {
				} else if yym3058 {
					z.DecBinaryUnmarshal(yyv3057)
				} else if !yym3058 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3057)
				} else {
					z.DecFallback(yyv3057, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3059 := &x.LastTransitionTime
				yym3060 := z.DecBinary()
				_ = yym3060
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3059) {
				} else if yym3060 {
					z.DecBinaryUnmarshal(yyv3059)
				} else if !yym3060 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3059)
				} else {
					z.DecFallback(yyv3059, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3054)
		} // end switch yys3054
	} // end for yyj3054
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3063 int
	var yyb3063 bool
	var yyhl3063 bool = l >= 0
	yyj3063++
	if yyhl3063 {
		yyb3063 = yyj3063 > l
	} else {
		yyb3063 = r.CheckBreak()
	}
	if yyb3063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3063++
	if yyhl3063 {
		yyb3063 = yyj3063 > l
	} else {
		yyb3063 = r.CheckBreak()
	}
	if yyb3063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3063++
	if yyhl3063 {
		yyb3063 = yyj3063 > l
	} else {
		yyb3063 = r.CheckBreak()
	}
	if yyb3063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3066 := &x.LastHeartbeatTime
		yym3067 := z.DecBinary()
		_ = yym3067
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3066) {
		} else if yym3067 {
			z.DecBinaryUnmarshal(yyv3066)
		} else if !yym3067 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3066)
		} else {
			z.DecFallback(yyv3066, false)
		}
	}
	yyj3063++
	if yyhl3063 {
		yyb3063 = yyj3063 > l
	} else {
		yyb3063 = r.CheckBreak()
	}
	if yyb3063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3068 := &x.LastTransitionTime
		yym3069 := z.DecBinary()
		_ = yym3069
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3068) {
		} else if yym3069 {
			z.DecBinaryUnmarshal(yyv3068)
		} else if !yym3069 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3068)
		} else {
			z.DecFallback(yyv3068, false)
		}
	}
	yyj3063++
	if yyhl3063 {
		yyb3063 = yyj3063 > l
	} else {
		yyb3063 = r.CheckBreak()
	}
	if yyb3063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3063++
	if yyhl3063 {
		yyb3063 = yyj3063 > l
	} else {
		yyb3063 = r.CheckBreak()
	}
	if yyb3063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3063++
		if yyhl3063 {
			yyb3063 = yyj3063 > l
		} else {
			yyb3063 = r.CheckBreak()
		}
		if yyb3063 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3063-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3072 := z.EncBinary()
	_ = yym3072
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3073 := z.DecBinary()
	_ = yym3073
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3074 := z.EncBinary()
		_ = yym3074
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3075 := !z.EncBinary()
			yy2arr3075 := z.EncBasicHandle().StructToArray
			var yyq3075 [2]bool
			_, _, _ = yysep3075, yyq3075, yy2arr3075
			const yyr3075 bool = false
			var yynn3075 int
			if yyr3075 || yy2arr3075 {
				r.EncodeArrayStart(2)
			} else {
				yynn3075 = 2
				for _, b := range yyq3075 {
					if b {
						yynn3075++
					}
				}
				r.EncodeMapStart(yynn3075)
				yynn3075 = 0
			}
			if yyr3075 || yy2arr3075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3075 || yy2arr3075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3078 := z.EncBinary()
				_ = yym3078
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3079 := z.EncBinary()
				_ = yym3079
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3075 || yy2arr3075 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3080 := z.DecBinary()
	_ = yym3080
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3081 := r.ContainerType()
		if yyct3081 == codecSelferValueTypeMap1234 {
			yyl3081 := r.ReadMapStart()
			if yyl3081 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3081, d)
			}
		} else if yyct3081 == codecSelferValueTypeArray1234 {
			yyl3081 := r.ReadArrayStart()
			if yyl3081 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3081, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3082Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3082Slc
	var yyhl3082 bool = l >= 0
	for yyj3082 := 0; ; yyj3082++ {
		if yyhl3082 {
			if yyj3082 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3082Slc = r.DecodeBytes(yys3082Slc, true, true)
		yys3082 := string(yys3082Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3082 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3082)
		} // end switch yys3082
	} // end for yyj3082
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3085 int
	var yyb3085 bool
	var yyhl3085 bool = l >= 0
	yyj3085++
	if yyhl3085 {
		yyb3085 = yyj3085 > l
	} else {
		yyb3085 = r.CheckBreak()
	}
	if yyb3085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3085++
	if yyhl3085 {
		yyb3085 = yyj3085 > l
	} else {
		yyb3085 = r.CheckBreak()
	}
	if yyb3085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3085++
		if yyhl3085 {
			yyb3085 = yyj3085 > l
		} else {
			yyb3085 = r.CheckBreak()
		}
		if yyb3085 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3085-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3088 := z.EncBinary()
	_ = yym3088
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3089 := z.DecBinary()
	_ = yym3089
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3090 := z.EncBinary()
		_ = yym3090
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3091 := z.DecBinary()
	_ = yym3091
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3092 := z.EncBinary()
		_ = yym3092
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3093 := !z.EncBinary()
			yy2arr3093 := z.EncBasicHandle().StructToArray
			var yyq3093 [5]bool
			_, _, _ = yysep3093, yyq3093, yy2arr3093
			const yyr3093 bool = false
			yyq3093[0] = x.Kind != ""
			yyq3093[1] = x.APIVersion != ""
			yyq3093[2] = true
			yyq3093[3] = true
			yyq3093[4] = true
			var yynn3093 int
			if yyr3093 || yy2arr3093 {
				r.EncodeArrayStart(5)
			} else {
				yynn3093 = 0
				for _, b := range yyq3093 {
					if b {
						yynn3093++
					}
				}
				r.EncodeMapStart(yynn3093)
				yynn3093 = 0
			}
			if yyr3093 || yy2arr3093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3093[0] {
					yym3095 := z.EncBinary()
					_ = yym3095
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3093[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3096 := z.EncBinary()
					_ = yym3096
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3093 || yy2arr3093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3093[1] {
					yym3098 := z.EncBinary()
					_ = yym3098
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3093[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3099 := z.EncBinary()
					_ = yym3099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3093 || yy2arr3093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3093[2] {
					yy3101 := &x.ObjectMeta
					yy3101.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3093[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3102 := &x.ObjectMeta
					yy3102.CodecEncodeSelf(e)
				}
			}
			if yyr3093 || yy2arr3093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3093[3] {
					yy3104 := &x.Spec
					yy3104.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3093[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3105 := &x.Spec
					yy3105.CodecEncodeSelf(e)
				}
			}
			if yyr3093 || yy2arr3093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3093[4] {
					yy3107 := &x.Status
					yy3107.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3093[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3108 := &x.Status
					yy3108.CodecEncodeSelf(e)
				}
			}
			if yyr3093 || yy2arr3093 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3109 := z.DecBinary()
	_ = yym3109
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3110 := r.ContainerType()
		if yyct3110 == codecSelferValueTypeMap1234 {
			yyl3110 := r.ReadMapStart()
			if yyl3110 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3110, d)
			}
		} else if yyct3110 == codecSelferValueTypeArray1234 {
			yyl3110 := r.ReadArrayStart()
			if yyl3110 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3110, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3111Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3111Slc
	var yyhl3111 bool = l >= 0
	for yyj3111 := 0; ; yyj3111++ {
		if yyhl3111 {
			if yyj3111 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3111Slc = r.DecodeBytes(yys3111Slc, true, true)
		yys3111 := string(yys3111Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3111 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3114 := &x.ObjectMeta
				yyv3114.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3115 := &x.Spec
				yyv3115.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3116 := &x.Status
				yyv3116.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3111)
		} // end switch yys3111
	} // end for yyj3111
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3117 int
	var yyb3117 bool
	var yyhl3117 bool = l >= 0
	yyj3117++
	if yyhl3117 {
		yyb3117 = yyj3117 > l
	} else {
		yyb3117 = r.CheckBreak()
	}
	if yyb3117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3117++
	if yyhl3117 {
		yyb3117 = yyj3117 > l
	} else {
		yyb3117 = r.CheckBreak()
	}
	if yyb3117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3117++
	if yyhl3117 {
		yyb3117 = yyj3117 > l
	} else {
		yyb3117 = r.CheckBreak()
	}
	if yyb3117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3120 := &x.ObjectMeta
		yyv3120.CodecDecodeSelf(d)
	}
	yyj3117++
	if yyhl3117 {
		yyb3117 = yyj3117 > l
	} else {
		yyb3117 = r.CheckBreak()
	}
	if yyb3117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3121 := &x.Spec
		yyv3121.CodecDecodeSelf(d)
	}
	yyj3117++
	if yyhl3117 {
		yyb3117 = yyj3117 > l
	} else {
		yyb3117 = r.CheckBreak()
	}
	if yyb3117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3122 := &x.Status
		yyv3122.CodecDecodeSelf(d)
	}
	for {
		yyj3117++
		if yyhl3117 {
			yyb3117 = yyj3117 > l
		} else {
			yyb3117 = r.CheckBreak()
		}
		if yyb3117 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3117-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3123 := z.EncBinary()
		_ = yym3123
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3124 := !z.EncBinary()
			yy2arr3124 := z.EncBasicHandle().StructToArray
			var yyq3124 [4]bool
			_, _, _ = yysep3124, yyq3124, yy2arr3124
			const yyr3124 bool = false
			yyq3124[0] = x.Kind != ""
			yyq3124[1] = x.APIVersion != ""
			yyq3124[2] = true
			var yynn3124 int
			if yyr3124 || yy2arr3124 {
				r.EncodeArrayStart(4)
			} else {
				yynn3124 = 1
				for _, b := range yyq3124 {
					if b {
						yynn3124++
					}
				}
				r.EncodeMapStart(yynn3124)
				yynn3124 = 0
			}
			if yyr3124 || yy2arr3124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3124[0] {
					yym3126 := z.EncBinary()
					_ = yym3126
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3124[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3127 := z.EncBinary()
					_ = yym3127
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3124 || yy2arr3124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3124[1] {
					yym3129 := z.EncBinary()
					_ = yym3129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3124[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3130 := z.EncBinary()
					_ = yym3130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3124 || yy2arr3124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3124[2] {
					yy3132 := &x.ListMeta
					yym3133 := z.EncBinary()
					_ = yym3133
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3132) {
					} else {
						z.EncFallback(yy3132)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3124[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3134 := &x.ListMeta
					yym3135 := z.EncBinary()
					_ = yym3135
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3134) {
					} else {
						z.EncFallback(yy3134)
					}
				}
			}
			if yyr3124 || yy2arr3124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3137 := z.EncBinary()
					_ = yym3137
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3138 := z.EncBinary()
					_ = yym3138
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3124 || yy2arr3124 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3139 := z.DecBinary()
	_ = yym3139
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3140 := r.ContainerType()
		if yyct3140 == codecSelferValueTypeMap1234 {
			yyl3140 := r.ReadMapStart()
			if yyl3140 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3140, d)
			}
		} else if yyct3140 == codecSelferValueTypeArray1234 {
			yyl3140 := r.ReadArrayStart()
			if yyl3140 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3140, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3141Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3141Slc
	var yyhl3141 bool = l >= 0
	for yyj3141 := 0; ; yyj3141++ {
		if yyhl3141 {
			if yyj3141 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3141Slc = r.DecodeBytes(yys3141Slc, true, true)
		yys3141 := string(yys3141Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3141 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3144 := &x.ListMeta
				yym3145 := z.DecBinary()
				_ = yym3145
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3144) {
				} else {
					z.DecFallback(yyv3144, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3146 := &x.Items
				yym3147 := z.DecBinary()
				_ = yym3147
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3146), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3141)
		} // end switch yys3141
	} // end for yyj3141
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3148 int
	var yyb3148 bool
	var yyhl3148 bool = l >= 0
	yyj3148++
	if yyhl3148 {
		yyb3148 = yyj3148 > l
	} else {
		yyb3148 = r.CheckBreak()
	}
	if yyb3148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3148++
	if yyhl3148 {
		yyb3148 = yyj3148 > l
	} else {
		yyb3148 = r.CheckBreak()
	}
	if yyb3148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3148++
	if yyhl3148 {
		yyb3148 = yyj3148 > l
	} else {
		yyb3148 = r.CheckBreak()
	}
	if yyb3148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3151 := &x.ListMeta
		yym3152 := z.DecBinary()
		_ = yym3152
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3151) {
		} else {
			z.DecFallback(yyv3151, false)
		}
	}
	yyj3148++
	if yyhl3148 {
		yyb3148 = yyj3148 > l
	} else {
		yyb3148 = r.CheckBreak()
	}
	if yyb3148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3153 := &x.Items
		yym3154 := z.DecBinary()
		_ = yym3154
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3153), d)
		}
	}
	for {
		yyj3148++
		if yyhl3148 {
			yyb3148 = yyj3148 > l
		} else {
			yyb3148 = r.CheckBreak()
		}
		if yyb3148 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3148-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3155 := z.EncBinary()
	_ = yym3155
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3156 := z.DecBinary()
	_ = yym3156
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3157 := z.EncBinary()
		_ = yym3157
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3158 := !z.EncBinary()
			yy2arr3158 := z.EncBasicHandle().StructToArray
			var yyq3158 [1]bool
			_, _, _ = yysep3158, yyq3158, yy2arr3158
			const yyr3158 bool = false
			yyq3158[0] = len(x.Finalizers) != 0
			var yynn3158 int
			if yyr3158 || yy2arr3158 {
				r.EncodeArrayStart(1)
			} else {
				yynn3158 = 0
				for _, b := range yyq3158 {
					if b {
						yynn3158++
					}
				}
				r.EncodeMapStart(yynn3158)
				yynn3158 = 0
			}
			if yyr3158 || yy2arr3158 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3158[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3160 := z.EncBinary()
						_ = yym3160
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3158[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3161 := z.EncBinary()
						_ = yym3161
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yyr3158 || yy2arr3158 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3162 := z.DecBinary()
	_ = yym3162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3163 := r.ContainerType()
		if yyct3163 == codecSelferValueTypeMap1234 {
			yyl3163 := r.ReadMapStart()
			if yyl3163 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3163, d)
			}
		} else if yyct3163 == codecSelferValueTypeArray1234 {
			yyl3163 := r.ReadArrayStart()
			if yyl3163 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3163, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3164Slc
	var yyhl3164 bool = l >= 0
	for yyj3164 := 0; ; yyj3164++ {
		if yyhl3164 {
			if yyj3164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3164Slc = r.DecodeBytes(yys3164Slc, true, true)
		yys3164 := string(yys3164Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3164 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3165 := &x.Finalizers
				yym3166 := z.DecBinary()
				_ = yym3166
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3165), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3164)
		} // end switch yys3164
	} // end for yyj3164
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3167 int
	var yyb3167 bool
	var yyhl3167 bool = l >= 0
	yyj3167++
	if yyhl3167 {
		yyb3167 = yyj3167 > l
	} else {
		yyb3167 = r.CheckBreak()
	}
	if yyb3167 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3168 := &x.Finalizers
		yym3169 := z.DecBinary()
		_ = yym3169
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3168), d)
		}
	}
	for {
		yyj3167++
		if yyhl3167 {
			yyb3167 = yyj3167 > l
		} else {
			yyb3167 = r.CheckBreak()
		}
		if yyb3167 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3167-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3170 := z.EncBinary()
		_ = yym3170
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3171 := !z.EncBinary()
			yy2arr3171 := z.EncBasicHandle().StructToArray
			var yyq3171 [1]bool
			_, _, _ = yysep3171, yyq3171, yy2arr3171
			const yyr3171 bool = false
			yyq3171[0] = x.Phase != ""
			var yynn3171 int
			if yyr3171 || yy2arr3171 {
				r.EncodeArrayStart(1)
			} else {
				yynn3171 = 0
				for _, b := range yyq3171 {
					if b {
						yynn3171++
					}
				}
				r.EncodeMapStart(yynn3171)
				yynn3171 = 0
			}
			if yyr3171 || yy2arr3171 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3171[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3171[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3171 || yy2arr3171 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3173 := z.DecBinary()
	_ = yym3173
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3174 := r.ContainerType()
		if yyct3174 == codecSelferValueTypeMap1234 {
			yyl3174 := r.ReadMapStart()
			if yyl3174 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3174, d)
			}
		} else if yyct3174 == codecSelferValueTypeArray1234 {
			yyl3174 := r.ReadArrayStart()
			if yyl3174 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3174, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3175Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3175Slc
	var yyhl3175 bool = l >= 0
	for yyj3175 := 0; ; yyj3175++ {
		if yyhl3175 {
			if yyj3175 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3175Slc = r.DecodeBytes(yys3175Slc, true, true)
		yys3175 := string(yys3175Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3175 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3175)
		} // end switch yys3175
	} // end for yyj3175
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3177 int
	var yyb3177 bool
	var yyhl3177 bool = l >= 0
	yyj3177++
	if yyhl3177 {
		yyb3177 = yyj3177 > l
	} else {
		yyb3177 = r.CheckBreak()
	}
	if yyb3177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3177++
		if yyhl3177 {
			yyb3177 = yyj3177 > l
		} else {
			yyb3177 = r.CheckBreak()
		}
		if yyb3177 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3177-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3179 := z.EncBinary()
	_ = yym3179
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3180 := z.DecBinary()
	_ = yym3180
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3181 := z.EncBinary()
		_ = yym3181
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3182 := !z.EncBinary()
			yy2arr3182 := z.EncBasicHandle().StructToArray
			var yyq3182 [5]bool
			_, _, _ = yysep3182, yyq3182, yy2arr3182
			const yyr3182 bool = false
			yyq3182[0] = x.Kind != ""
			yyq3182[1] = x.APIVersion != ""
			yyq3182[2] = true
			yyq3182[3] = true
			yyq3182[4] = true
			var yynn3182 int
			if yyr3182 || yy2arr3182 {
				r.EncodeArrayStart(5)
			} else {
				yynn3182 = 0
				for _, b := range yyq3182 {
					if b {
						yynn3182++
					}
				}
				r.EncodeMapStart(yynn3182)
				yynn3182 = 0
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3182[0] {
					yym3184 := z.EncBinary()
					_ = yym3184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3182[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3185 := z.EncBinary()
					_ = yym3185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3182[1] {
					yym3187 := z.EncBinary()
					_ = yym3187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3182[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3188 := z.EncBinary()
					_ = yym3188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3182[2] {
					yy3190 := &x.ObjectMeta
					yy3190.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3182[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3191 := &x.ObjectMeta
					yy3191.CodecEncodeSelf(e)
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3182[3] {
					yy3193 := &x.Spec
					yy3193.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3182[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3194 := &x.Spec
					yy3194.CodecEncodeSelf(e)
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3182[4] {
					yy3196 := &x.Status
					yy3196.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3182[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3197 := &x.Status
					yy3197.CodecEncodeSelf(e)
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3198 := z.DecBinary()
	_ = yym3198
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3199 := r.ContainerType()
		if yyct3199 == codecSelferValueTypeMap1234 {
			yyl3199 := r.ReadMapStart()
			if yyl3199 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3199, d)
			}
		} else if yyct3199 == codecSelferValueTypeArray1234 {
			yyl3199 := r.ReadArrayStart()
			if yyl3199 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3199, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3200Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3200Slc
	var yyhl3200 bool = l >= 0
	for yyj3200 := 0; ; yyj3200++ {
		if yyhl3200 {
			if yyj3200 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3200Slc = r.DecodeBytes(yys3200Slc, true, true)
		yys3200 := string(yys3200Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3200 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3203 := &x.ObjectMeta
				yyv3203.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3204 := &x.Spec
				yyv3204.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3205 := &x.Status
				yyv3205.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3200)
		} // end switch yys3200
	} // end for yyj3200
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3206 int
	var yyb3206 bool
	var yyhl3206 bool = l >= 0
	yyj3206++
	if yyhl3206 {
		yyb3206 = yyj3206 > l
	} else {
		yyb3206 = r.CheckBreak()
	}
	if yyb3206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3206++
	if yyhl3206 {
		yyb3206 = yyj3206 > l
	} else {
		yyb3206 = r.CheckBreak()
	}
	if yyb3206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3206++
	if yyhl3206 {
		yyb3206 = yyj3206 > l
	} else {
		yyb3206 = r.CheckBreak()
	}
	if yyb3206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3209 := &x.ObjectMeta
		yyv3209.CodecDecodeSelf(d)
	}
	yyj3206++
	if yyhl3206 {
		yyb3206 = yyj3206 > l
	} else {
		yyb3206 = r.CheckBreak()
	}
	if yyb3206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3210 := &x.Spec
		yyv3210.CodecDecodeSelf(d)
	}
	yyj3206++
	if yyhl3206 {
		yyb3206 = yyj3206 > l
	} else {
		yyb3206 = r.CheckBreak()
	}
	if yyb3206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3211 := &x.Status
		yyv3211.CodecDecodeSelf(d)
	}
	for {
		yyj3206++
		if yyhl3206 {
			yyb3206 = yyj3206 > l
		} else {
			yyb3206 = r.CheckBreak()
		}
		if yyb3206 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3206-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3212 := z.EncBinary()
		_ = yym3212
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3213 := !z.EncBinary()
			yy2arr3213 := z.EncBasicHandle().StructToArray
			var yyq3213 [4]bool
			_, _, _ = yysep3213, yyq3213, yy2arr3213
			const yyr3213 bool = false
			yyq3213[0] = x.Kind != ""
			yyq3213[1] = x.APIVersion != ""
			yyq3213[2] = true
			var yynn3213 int
			if yyr3213 || yy2arr3213 {
				r.EncodeArrayStart(4)
			} else {
				yynn3213 = 1
				for _, b := range yyq3213 {
					if b {
						yynn3213++
					}
				}
				r.EncodeMapStart(yynn3213)
				yynn3213 = 0
			}
			if yyr3213 || yy2arr3213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3213[0] {
					yym3215 := z.EncBinary()
					_ = yym3215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3213[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3216 := z.EncBinary()
					_ = yym3216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3213 || yy2arr3213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3213[1] {
					yym3218 := z.EncBinary()
					_ = yym3218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3213[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3219 := z.EncBinary()
					_ = yym3219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3213 || yy2arr3213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3213[2] {
					yy3221 := &x.ListMeta
					yym3222 := z.EncBinary()
					_ = yym3222
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3221) {
					} else {
						z.EncFallback(yy3221)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3213[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3223 := &x.ListMeta
					yym3224 := z.EncBinary()
					_ = yym3224
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3223) {
					} else {
						z.EncFallback(yy3223)
					}
				}
			}
			if yyr3213 || yy2arr3213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3226 := z.EncBinary()
					_ = yym3226
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3227 := z.EncBinary()
					_ = yym3227
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3213 || yy2arr3213 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3228 := z.DecBinary()
	_ = yym3228
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3229 := r.ContainerType()
		if yyct3229 == codecSelferValueTypeMap1234 {
			yyl3229 := r.ReadMapStart()
			if yyl3229 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3229, d)
			}
		} else if yyct3229 == codecSelferValueTypeArray1234 {
			yyl3229 := r.ReadArrayStart()
			if yyl3229 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3229, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3230Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3230Slc
	var yyhl3230 bool = l >= 0
	for yyj3230 := 0; ; yyj3230++ {
		if yyhl3230 {
			if yyj3230 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3230Slc = r.DecodeBytes(yys3230Slc, true, true)
		yys3230 := string(yys3230Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3230 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3233 := &x.ListMeta
				yym3234 := z.DecBinary()
				_ = yym3234
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3233) {
				} else {
					z.DecFallback(yyv3233, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3235 := &x.Items
				yym3236 := z.DecBinary()
				_ = yym3236
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3235), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3230)
		} // end switch yys3230
	} // end for yyj3230
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3237 int
	var yyb3237 bool
	var yyhl3237 bool = l >= 0
	yyj3237++
	if yyhl3237 {
		yyb3237 = yyj3237 > l
	} else {
		yyb3237 = r.CheckBreak()
	}
	if yyb3237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3237++
	if yyhl3237 {
		yyb3237 = yyj3237 > l
	} else {
		yyb3237 = r.CheckBreak()
	}
	if yyb3237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3237++
	if yyhl3237 {
		yyb3237 = yyj3237 > l
	} else {
		yyb3237 = r.CheckBreak()
	}
	if yyb3237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3240 := &x.ListMeta
		yym3241 := z.DecBinary()
		_ = yym3241
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3240) {
		} else {
			z.DecFallback(yyv3240, false)
		}
	}
	yyj3237++
	if yyhl3237 {
		yyb3237 = yyj3237 > l
	} else {
		yyb3237 = r.CheckBreak()
	}
	if yyb3237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3242 := &x.Items
		yym3243 := z.DecBinary()
		_ = yym3243
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3242), d)
		}
	}
	for {
		yyj3237++
		if yyhl3237 {
			yyb3237 = yyj3237 > l
		} else {
			yyb3237 = r.CheckBreak()
		}
		if yyb3237 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3237-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3244 := z.EncBinary()
		_ = yym3244
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3245 := !z.EncBinary()
			yy2arr3245 := z.EncBasicHandle().StructToArray
			var yyq3245 [4]bool
			_, _, _ = yysep3245, yyq3245, yy2arr3245
			const yyr3245 bool = false
			yyq3245[0] = x.Kind != ""
			yyq3245[1] = x.APIVersion != ""
			yyq3245[2] = true
			var yynn3245 int
			if yyr3245 || yy2arr3245 {
				r.EncodeArrayStart(4)
			} else {
				yynn3245 = 1
				for _, b := range yyq3245 {
					if b {
						yynn3245++
					}
				}
				r.EncodeMapStart(yynn3245)
				yynn3245 = 0
			}
			if yyr3245 || yy2arr3245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3245[0] {
					yym3247 := z.EncBinary()
					_ = yym3247
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3245[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3248 := z.EncBinary()
					_ = yym3248
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3245 || yy2arr3245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3245[1] {
					yym3250 := z.EncBinary()
					_ = yym3250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3245[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3251 := z.EncBinary()
					_ = yym3251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3245 || yy2arr3245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3245[2] {
					yy3253 := &x.ObjectMeta
					yy3253.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3245[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3254 := &x.ObjectMeta
					yy3254.CodecEncodeSelf(e)
				}
			}
			if yyr3245 || yy2arr3245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3256 := &x.Target
				yy3256.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3257 := &x.Target
				yy3257.CodecEncodeSelf(e)
			}
			if yyr3245 || yy2arr3245 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3258 := z.DecBinary()
	_ = yym3258
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3259 := r.ContainerType()
		if yyct3259 == codecSelferValueTypeMap1234 {
			yyl3259 := r.ReadMapStart()
			if yyl3259 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3259, d)
			}
		} else if yyct3259 == codecSelferValueTypeArray1234 {
			yyl3259 := r.ReadArrayStart()
			if yyl3259 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3259, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3260Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3260Slc
	var yyhl3260 bool = l >= 0
	for yyj3260 := 0; ; yyj3260++ {
		if yyhl3260 {
			if yyj3260 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3260Slc = r.DecodeBytes(yys3260Slc, true, true)
		yys3260 := string(yys3260Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3260 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3263 := &x.ObjectMeta
				yyv3263.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3264 := &x.Target
				yyv3264.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3260)
		} // end switch yys3260
	} // end for yyj3260
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3265 int
	var yyb3265 bool
	var yyhl3265 bool = l >= 0
	yyj3265++
	if yyhl3265 {
		yyb3265 = yyj3265 > l
	} else {
		yyb3265 = r.CheckBreak()
	}
	if yyb3265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3265++
	if yyhl3265 {
		yyb3265 = yyj3265 > l
	} else {
		yyb3265 = r.CheckBreak()
	}
	if yyb3265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3265++
	if yyhl3265 {
		yyb3265 = yyj3265 > l
	} else {
		yyb3265 = r.CheckBreak()
	}
	if yyb3265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3268 := &x.ObjectMeta
		yyv3268.CodecDecodeSelf(d)
	}
	yyj3265++
	if yyhl3265 {
		yyb3265 = yyj3265 > l
	} else {
		yyb3265 = r.CheckBreak()
	}
	if yyb3265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3269 := &x.Target
		yyv3269.CodecDecodeSelf(d)
	}
	for {
		yyj3265++
		if yyhl3265 {
			yyb3265 = yyj3265 > l
		} else {
			yyb3265 = r.CheckBreak()
		}
		if yyb3265 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3265-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3270 := z.EncBinary()
		_ = yym3270
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3271 := !z.EncBinary()
			yy2arr3271 := z.EncBasicHandle().StructToArray
			var yyq3271 [1]bool
			_, _, _ = yysep3271, yyq3271, yy2arr3271
			const yyr3271 bool = false
			yyq3271[0] = x.UID != nil
			var yynn3271 int
			if yyr3271 || yy2arr3271 {
				r.EncodeArrayStart(1)
			} else {
				yynn3271 = 0
				for _, b := range yyq3271 {
					if b {
						yynn3271++
					}
				}
				r.EncodeMapStart(yynn3271)
				yynn3271 = 0
			}
			if yyr3271 || yy2arr3271 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3271[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3273 := *x.UID
						yym3274 := z.EncBinary()
						_ = yym3274
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3273) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3273))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3271[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3275 := *x.UID
						yym3276 := z.EncBinary()
						_ = yym3276
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3275) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3275))
						}
					}
				}
			}
			if yyr3271 || yy2arr3271 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3277 := z.DecBinary()
	_ = yym3277
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3278 := r.ContainerType()
		if yyct3278 == codecSelferValueTypeMap1234 {
			yyl3278 := r.ReadMapStart()
			if yyl3278 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3278, d)
			}
		} else if yyct3278 == codecSelferValueTypeArray1234 {
			yyl3278 := r.ReadArrayStart()
			if yyl3278 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3278, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3279Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3279Slc
	var yyhl3279 bool = l >= 0
	for yyj3279 := 0; ; yyj3279++ {
		if yyhl3279 {
			if yyj3279 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3279Slc = r.DecodeBytes(yys3279Slc, true, true)
		yys3279 := string(yys3279Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3279 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3281 := z.DecBinary()
				_ = yym3281
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3279)
		} // end switch yys3279
	} // end for yyj3279
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3282 int
	var yyb3282 bool
	var yyhl3282 bool = l >= 0
	yyj3282++
	if yyhl3282 {
		yyb3282 = yyj3282 > l
	} else {
		yyb3282 = r.CheckBreak()
	}
	if yyb3282 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3284 := z.DecBinary()
		_ = yym3284
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3282++
		if yyhl3282 {
			yyb3282 = yyj3282 > l
		} else {
			yyb3282 = r.CheckBreak()
		}
		if yyb3282 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3282-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3285 := z.EncBinary()
		_ = yym3285
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3286 := !z.EncBinary()
			yy2arr3286 := z.EncBasicHandle().StructToArray
			var yyq3286 [5]bool
			_, _, _ = yysep3286, yyq3286, yy2arr3286
			const yyr3286 bool = false
			yyq3286[0] = x.Kind != ""
			yyq3286[1] = x.APIVersion != ""
			yyq3286[2] = x.GracePeriodSeconds != nil
			yyq3286[3] = x.Preconditions != nil
			yyq3286[4] = x.OrphanDependents != nil
			var yynn3286 int
			if yyr3286 || yy2arr3286 {
				r.EncodeArrayStart(5)
			} else {
				yynn3286 = 0
				for _, b := range yyq3286 {
					if b {
						yynn3286++
					}
				}
				r.EncodeMapStart(yynn3286)
				yynn3286 = 0
			}
			if yyr3286 || yy2arr3286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3286[0] {
					yym3288 := z.EncBinary()
					_ = yym3288
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3286[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3289 := z.EncBinary()
					_ = yym3289
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3286 || yy2arr3286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3286[1] {
					yym3291 := z.EncBinary()
					_ = yym3291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3286[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3292 := z.EncBinary()
					_ = yym3292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3286 || yy2arr3286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3286[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3294 := *x.GracePeriodSeconds
						yym3295 := z.EncBinary()
						_ = yym3295
						if false {
						} else {
							r.EncodeInt(int64(yy3294))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3286[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3296 := *x.GracePeriodSeconds
						yym3297 := z.EncBinary()
						_ = yym3297
						if false {
						} else {
							r.EncodeInt(int64(yy3296))
						}
					}
				}
			}
			if yyr3286 || yy2arr3286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3286[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3286[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3286 || yy2arr3286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3286[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3300 := *x.OrphanDependents
						yym3301 := z.EncBinary()
						_ = yym3301
						if false {
						} else {
							r.EncodeBool(bool(yy3300))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3286[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3302 := *x.OrphanDependents
						yym3303 := z.EncBinary()
						_ = yym3303
						if false {
						} else {
							r.EncodeBool(bool(yy3302))
						}
					}
				}
			}
			if yyr3286 || yy2arr3286 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3304 := z.DecBinary()
	_ = yym3304
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3305 := r.ContainerType()
		if yyct3305 == codecSelferValueTypeMap1234 {
			yyl3305 := r.ReadMapStart()
			if yyl3305 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3305, d)
			}
		} else if yyct3305 == codecSelferValueTypeArray1234 {
			yyl3305 := r.ReadArrayStart()
			if yyl3305 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3305, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3306Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3306Slc
	var yyhl3306 bool = l >= 0
	for yyj3306 := 0; ; yyj3306++ {
		if yyhl3306 {
			if yyj3306 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3306Slc = r.DecodeBytes(yys3306Slc, true, true)
		yys3306 := string(yys3306Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3306 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3310 := z.DecBinary()
				_ = yym3310
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3313 := z.DecBinary()
				_ = yym3313
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3306)
		} // end switch yys3306
	} // end for yyj3306
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3314 int
	var yyb3314 bool
	var yyhl3314 bool = l >= 0
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3318 := z.DecBinary()
		_ = yym3318
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3314++
	if yyhl3314 {
		yyb3314 = yyj3314 > l
	} else {
		yyb3314 = r.CheckBreak()
	}
	if yyb3314 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3321 := z.DecBinary()
		_ = yym3321
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3314++
		if yyhl3314 {
			yyb3314 = yyj3314 > l
		} else {
			yyb3314 = r.CheckBreak()
		}
		if yyb3314 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3314-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3322 := z.EncBinary()
		_ = yym3322
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3323 := !z.EncBinary()
			yy2arr3323 := z.EncBasicHandle().StructToArray
			var yyq3323 [4]bool
			_, _, _ = yysep3323, yyq3323, yy2arr3323
			const yyr3323 bool = false
			yyq3323[0] = x.Kind != ""
			yyq3323[1] = x.APIVersion != ""
			var yynn3323 int
			if yyr3323 || yy2arr3323 {
				r.EncodeArrayStart(4)
			} else {
				yynn3323 = 2
				for _, b := range yyq3323 {
					if b {
						yynn3323++
					}
				}
				r.EncodeMapStart(yynn3323)
				yynn3323 = 0
			}
			if yyr3323 || yy2arr3323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3323[0] {
					yym3325 := z.EncBinary()
					_ = yym3325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3323[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3326 := z.EncBinary()
					_ = yym3326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3323 || yy2arr3323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3323[1] {
					yym3328 := z.EncBinary()
					_ = yym3328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3323[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3329 := z.EncBinary()
					_ = yym3329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3323 || yy2arr3323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3331 := z.EncBinary()
				_ = yym3331
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3332 := z.EncBinary()
				_ = yym3332
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3323 || yy2arr3323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3334 := z.EncBinary()
				_ = yym3334
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3335 := z.EncBinary()
				_ = yym3335
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3323 || yy2arr3323 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3336 := z.DecBinary()
	_ = yym3336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3337 := r.ContainerType()
		if yyct3337 == codecSelferValueTypeMap1234 {
			yyl3337 := r.ReadMapStart()
			if yyl3337 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3337, d)
			}
		} else if yyct3337 == codecSelferValueTypeArray1234 {
			yyl3337 := r.ReadArrayStart()
			if yyl3337 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3337, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3338Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3338Slc
	var yyhl3338 bool = l >= 0
	for yyj3338 := 0; ; yyj3338++ {
		if yyhl3338 {
			if yyj3338 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3338Slc = r.DecodeBytes(yys3338Slc, true, true)
		yys3338 := string(yys3338Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3338 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3338)
		} // end switch yys3338
	} // end for yyj3338
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3343 int
	var yyb3343 bool
	var yyhl3343 bool = l >= 0
	yyj3343++
	if yyhl3343 {
		yyb3343 = yyj3343 > l
	} else {
		yyb3343 = r.CheckBreak()
	}
	if yyb3343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3343++
	if yyhl3343 {
		yyb3343 = yyj3343 > l
	} else {
		yyb3343 = r.CheckBreak()
	}
	if yyb3343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3343++
	if yyhl3343 {
		yyb3343 = yyj3343 > l
	} else {
		yyb3343 = r.CheckBreak()
	}
	if yyb3343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3343++
	if yyhl3343 {
		yyb3343 = yyj3343 > l
	} else {
		yyb3343 = r.CheckBreak()
	}
	if yyb3343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3343++
		if yyhl3343 {
			yyb3343 = yyj3343 > l
		} else {
			yyb3343 = r.CheckBreak()
		}
		if yyb3343 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3343-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3348 := z.EncBinary()
		_ = yym3348
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3349 := !z.EncBinary()
			yy2arr3349 := z.EncBasicHandle().StructToArray
			var yyq3349 [7]bool
			_, _, _ = yysep3349, yyq3349, yy2arr3349
			const yyr3349 bool = false
			yyq3349[0] = x.Kind != ""
			yyq3349[1] = x.APIVersion != ""
			yyq3349[2] = x.LabelSelector != ""
			yyq3349[3] = x.FieldSelector != ""
			yyq3349[4] = x.Watch != false
			yyq3349[5] = x.ResourceVersion != ""
			yyq3349[6] = x.TimeoutSeconds != nil
			var yynn3349 int
			if yyr3349 || yy2arr3349 {
				r.EncodeArrayStart(7)
			} else {
				yynn3349 = 0
				for _, b := range yyq3349 {
					if b {
						yynn3349++
					}
				}
				r.EncodeMapStart(yynn3349)
				yynn3349 = 0
			}
			if yyr3349 || yy2arr3349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3349[0] {
					yym3351 := z.EncBinary()
					_ = yym3351
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3349[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3352 := z.EncBinary()
					_ = yym3352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3349 || yy2arr3349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3349[1] {
					yym3354 := z.EncBinary()
					_ = yym3354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3349[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3355 := z.EncBinary()
					_ = yym3355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3349 || yy2arr3349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3349[2] {
					yym3357 := z.EncBinary()
					_ = yym3357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3349[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3358 := z.EncBinary()
					_ = yym3358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr3349 || yy2arr3349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3349[3] {
					yym3360 := z.EncBinary()
					_ = yym3360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3349[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3361 := z.EncBinary()
					_ = yym3361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr3349 || yy2arr3349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3349[4] {
					yym3363 := z.EncBinary()
					_ = yym3363
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3349[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3364 := z.EncBinary()
					_ = yym3364
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr3349 || yy2arr3349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3349[5] {
					yym3366 := z.EncBinary()
					_ = yym3366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3349[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3367 := z.EncBinary()
					_ = yym3367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3349 || yy2arr3349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3349[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3369 := *x.TimeoutSeconds
						yym3370 := z.EncBinary()
						_ = yym3370
						if false {
						} else {
							r.EncodeInt(int64(yy3369))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3349[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3371 := *x.TimeoutSeconds
						yym3372 := z.EncBinary()
						_ = yym3372
						if false {
						} else {
							r.EncodeInt(int64(yy3371))
						}
					}
				}
			}
			if yyr3349 || yy2arr3349 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3373 := z.DecBinary()
	_ = yym3373
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3374 := r.ContainerType()
		if yyct3374 == codecSelferValueTypeMap1234 {
			yyl3374 := r.ReadMapStart()
			if yyl3374 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3374, d)
			}
		} else if yyct3374 == codecSelferValueTypeArray1234 {
			yyl3374 := r.ReadArrayStart()
			if yyl3374 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3374, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3375Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3375Slc
	var yyhl3375 bool = l >= 0
	for yyj3375 := 0; ; yyj3375++ {
		if yyhl3375 {
			if yyj3375 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3375Slc = r.DecodeBytes(yys3375Slc, true, true)
		yys3375 := string(yys3375Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3375 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3383 := z.DecBinary()
				_ = yym3383
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3375)
		} // end switch yys3375
	} // end for yyj3375
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3384 int
	var yyb3384 bool
	var yyhl3384 bool = l >= 0
	yyj3384++
	if yyhl3384 {
		yyb3384 = yyj3384 > l
	} else {
		yyb3384 = r.CheckBreak()
	}
	if yyb3384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3384++
	if yyhl3384 {
		yyb3384 = yyj3384 > l
	} else {
		yyb3384 = r.CheckBreak()
	}
	if yyb3384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3384++
	if yyhl3384 {
		yyb3384 = yyj3384 > l
	} else {
		yyb3384 = r.CheckBreak()
	}
	if yyb3384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj3384++
	if yyhl3384 {
		yyb3384 = yyj3384 > l
	} else {
		yyb3384 = r.CheckBreak()
	}
	if yyb3384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj3384++
	if yyhl3384 {
		yyb3384 = yyj3384 > l
	} else {
		yyb3384 = r.CheckBreak()
	}
	if yyb3384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3384++
	if yyhl3384 {
		yyb3384 = yyj3384 > l
	} else {
		yyb3384 = r.CheckBreak()
	}
	if yyb3384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3384++
	if yyhl3384 {
		yyb3384 = yyj3384 > l
	} else {
		yyb3384 = r.CheckBreak()
	}
	if yyb3384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3392 := z.DecBinary()
		_ = yym3392
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3384++
		if yyhl3384 {
			yyb3384 = yyj3384 > l
		} else {
			yyb3384 = r.CheckBreak()
		}
		if yyb3384 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3384-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3393 := z.EncBinary()
		_ = yym3393
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3394 := !z.EncBinary()
			yy2arr3394 := z.EncBasicHandle().StructToArray
			var yyq3394 [10]bool
			_, _, _ = yysep3394, yyq3394, yy2arr3394
			const yyr3394 bool = false
			yyq3394[0] = x.Kind != ""
			yyq3394[1] = x.APIVersion != ""
			yyq3394[2] = x.Container != ""
			yyq3394[3] = x.Follow != false
			yyq3394[4] = x.Previous != false
			yyq3394[5] = x.SinceSeconds != nil
			yyq3394[6] = x.SinceTime != nil
			yyq3394[7] = x.Timestamps != false
			yyq3394[8] = x.TailLines != nil
			yyq3394[9] = x.LimitBytes != nil
			var yynn3394 int
			if yyr3394 || yy2arr3394 {
				r.EncodeArrayStart(10)
			} else {
				yynn3394 = 0
				for _, b := range yyq3394 {
					if b {
						yynn3394++
					}
				}
				r.EncodeMapStart(yynn3394)
				yynn3394 = 0
			}
			if yyr3394 || yy2arr3394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3394[0] {
					yym3396 := z.EncBinary()
					_ = yym3396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3394[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3397 := z.EncBinary()
					_ = yym3397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3394 || yy2arr3394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3394[1] {
					yym3399 := z.EncBinary()
					_ = yym3399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3394[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3400 := z.EncBinary()
					_ = yym3400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3394 || yy2arr3394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3394[2] {
					yym3402 := z.EncBinary()
					_ = yym3402
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3394[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3403 := z.EncBinary()
					_ = yym3403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3394 || yy2arr3394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3394[3] {
					yym3405 := z.EncBinary()
					_ = yym3405
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3394[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3406 := z.EncBinary()
					_ = yym3406
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr3394 || yy2arr3394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3394[4] {
					yym3408 := z.EncBinary()
					_ = yym3408
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3394[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3409 := z.EncBinary()
					_ = yym3409
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr3394 || yy2arr3394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3394[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3411 := *x.SinceSeconds
						yym3412 := z.EncBinary()
						_ = yym3412
						if false {
						} else {
							r.EncodeInt(int64(yy3411))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3394[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3413 := *x.SinceSeconds
						yym3414 := z.EncBinary()
						_ = yym3414
						if false {
						} else {
							r.EncodeInt(int64(yy3413))
						}
					}
				}
			}
			if yyr3394 || yy2arr3394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3394[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3416 := z.EncBinary()
						_ = yym3416
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3416 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3416 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3394[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3417 := z.EncBinary()
						_ = yym3417
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3417 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3417 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr3394 || yy2arr3394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3394[7] {
					yym3419 := z.EncBinary()
					_ = yym3419
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3394[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3420 := z.EncBinary()
					_ = yym3420
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr3394 || yy2arr3394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3394[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3422 := *x.TailLines
						yym3423 := z.EncBinary()
						_ = yym3423
						if false {
						} else {
							r.EncodeInt(int64(yy3422))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3394[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3424 := *x.TailLines
						yym3425 := z.EncBinary()
						_ = yym3425
						if false {
						} else {
							r.EncodeInt(int64(yy3424))
						}
					}
				}
			}
			if yyr3394 || yy2arr3394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3394[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3427 := *x.LimitBytes
						yym3428 := z.EncBinary()
						_ = yym3428
						if false {
						} else {
							r.EncodeInt(int64(yy3427))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3394[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3429 := *x.LimitBytes
						yym3430 := z.EncBinary()
						_ = yym3430
						if false {
						} else {
							r.EncodeInt(int64(yy3429))
						}
					}
				}
			}
			if yyr3394 || yy2arr3394 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3431 := z.DecBinary()
	_ = yym3431
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3432 := r.ContainerType()
		if yyct3432 == codecSelferValueTypeMap1234 {
			yyl3432 := r.ReadMapStart()
			if yyl3432 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3432, d)
			}
		} else if yyct3432 == codecSelferValueTypeArray1234 {
			yyl3432 := r.ReadArrayStart()
			if yyl3432 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3432, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3433Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3433Slc
	var yyhl3433 bool = l >= 0
	for yyj3433 := 0; ; yyj3433++ {
		if yyhl3433 {
			if yyj3433 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3433Slc = r.DecodeBytes(yys3433Slc, true, true)
		yys3433 := string(yys3433Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3433 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3440 := z.DecBinary()
				_ = yym3440
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3442 := z.DecBinary()
				_ = yym3442
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3442 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3442 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3445 := z.DecBinary()
				_ = yym3445
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3447 := z.DecBinary()
				_ = yym3447
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3433)
		} // end switch yys3433
	} // end for yyj3433
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3448 int
	var yyb3448 bool
	var yyhl3448 bool = l >= 0
	yyj3448++
	if yyhl3448 {
		yyb3448 = yyj3448 > l
	} else {
		yyb3448 = r.CheckBreak()
	}
	if yyb3448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3448++
	if yyhl3448 {
		yyb3448 = yyj3448 > l
	} else {
		yyb3448 = r.CheckBreak()
	}
	if yyb3448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3448++
	if yyhl3448 {
		yyb3448 = yyj3448 > l
	} else {
		yyb3448 = r.CheckBreak()
	}
	if yyb3448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3448++
	if yyhl3448 {
		yyb3448 = yyj3448 > l
	} else {
		yyb3448 = r.CheckBreak()
	}
	if yyb3448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3448++
	if yyhl3448 {
		yyb3448 = yyj3448 > l
	} else {
		yyb3448 = r.CheckBreak()
	}
	if yyb3448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3448++
	if yyhl3448 {
		yyb3448 = yyj3448 > l
	} else {
		yyb3448 = r.CheckBreak()
	}
	if yyb3448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3455 := z.DecBinary()
		_ = yym3455
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3448++
	if yyhl3448 {
		yyb3448 = yyj3448 > l
	} else {
		yyb3448 = r.CheckBreak()
	}
	if yyb3448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3457 := z.DecBinary()
		_ = yym3457
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3457 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3457 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3448++
	if yyhl3448 {
		yyb3448 = yyj3448 > l
	} else {
		yyb3448 = r.CheckBreak()
	}
	if yyb3448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3448++
	if yyhl3448 {
		yyb3448 = yyj3448 > l
	} else {
		yyb3448 = r.CheckBreak()
	}
	if yyb3448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3460 := z.DecBinary()
		_ = yym3460
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3448++
	if yyhl3448 {
		yyb3448 = yyj3448 > l
	} else {
		yyb3448 = r.CheckBreak()
	}
	if yyb3448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3462 := z.DecBinary()
		_ = yym3462
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3448++
		if yyhl3448 {
			yyb3448 = yyj3448 > l
		} else {
			yyb3448 = r.CheckBreak()
		}
		if yyb3448 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3448-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3463 := z.EncBinary()
		_ = yym3463
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3464 := !z.EncBinary()
			yy2arr3464 := z.EncBasicHandle().StructToArray
			var yyq3464 [7]bool
			_, _, _ = yysep3464, yyq3464, yy2arr3464
			const yyr3464 bool = false
			yyq3464[0] = x.Kind != ""
			yyq3464[1] = x.APIVersion != ""
			yyq3464[2] = x.Stdin != false
			yyq3464[3] = x.Stdout != false
			yyq3464[4] = x.Stderr != false
			yyq3464[5] = x.TTY != false
			yyq3464[6] = x.Container != ""
			var yynn3464 int
			if yyr3464 || yy2arr3464 {
				r.EncodeArrayStart(7)
			} else {
				yynn3464 = 0
				for _, b := range yyq3464 {
					if b {
						yynn3464++
					}
				}
				r.EncodeMapStart(yynn3464)
				yynn3464 = 0
			}
			if yyr3464 || yy2arr3464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3464[0] {
					yym3466 := z.EncBinary()
					_ = yym3466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3464[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3467 := z.EncBinary()
					_ = yym3467
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3464 || yy2arr3464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3464[1] {
					yym3469 := z.EncBinary()
					_ = yym3469
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3464[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3470 := z.EncBinary()
					_ = yym3470
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3464 || yy2arr3464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3464[2] {
					yym3472 := z.EncBinary()
					_ = yym3472
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3464[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3473 := z.EncBinary()
					_ = yym3473
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3464 || yy2arr3464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3464[3] {
					yym3475 := z.EncBinary()
					_ = yym3475
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3464[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3476 := z.EncBinary()
					_ = yym3476
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3464 || yy2arr3464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3464[4] {
					yym3478 := z.EncBinary()
					_ = yym3478
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3464[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3479 := z.EncBinary()
					_ = yym3479
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3464 || yy2arr3464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3464[5] {
					yym3481 := z.EncBinary()
					_ = yym3481
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3464[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3482 := z.EncBinary()
					_ = yym3482
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3464 || yy2arr3464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3464[6] {
					yym3484 := z.EncBinary()
					_ = yym3484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3464[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3485 := z.EncBinary()
					_ = yym3485
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3464 || yy2arr3464 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3486 := z.DecBinary()
	_ = yym3486
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3487 := r.ContainerType()
		if yyct3487 == codecSelferValueTypeMap1234 {
			yyl3487 := r.ReadMapStart()
			if yyl3487 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3487, d)
			}
		} else if yyct3487 == codecSelferValueTypeArray1234 {
			yyl3487 := r.ReadArrayStart()
			if yyl3487 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3487, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3488Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3488Slc
	var yyhl3488 bool = l >= 0
	for yyj3488 := 0; ; yyj3488++ {
		if yyhl3488 {
			if yyj3488 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3488Slc = r.DecodeBytes(yys3488Slc, true, true)
		yys3488 := string(yys3488Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3488 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3488)
		} // end switch yys3488
	} // end for yyj3488
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3496 int
	var yyb3496 bool
	var yyhl3496 bool = l >= 0
	yyj3496++
	if yyhl3496 {
		yyb3496 = yyj3496 > l
	} else {
		yyb3496 = r.CheckBreak()
	}
	if yyb3496 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3496++
	if yyhl3496 {
		yyb3496 = yyj3496 > l
	} else {
		yyb3496 = r.CheckBreak()
	}
	if yyb3496 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3496++
	if yyhl3496 {
		yyb3496 = yyj3496 > l
	} else {
		yyb3496 = r.CheckBreak()
	}
	if yyb3496 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3496++
	if yyhl3496 {
		yyb3496 = yyj3496 > l
	} else {
		yyb3496 = r.CheckBreak()
	}
	if yyb3496 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3496++
	if yyhl3496 {
		yyb3496 = yyj3496 > l
	} else {
		yyb3496 = r.CheckBreak()
	}
	if yyb3496 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3496++
	if yyhl3496 {
		yyb3496 = yyj3496 > l
	} else {
		yyb3496 = r.CheckBreak()
	}
	if yyb3496 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3496++
	if yyhl3496 {
		yyb3496 = yyj3496 > l
	} else {
		yyb3496 = r.CheckBreak()
	}
	if yyb3496 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3496++
		if yyhl3496 {
			yyb3496 = yyj3496 > l
		} else {
			yyb3496 = r.CheckBreak()
		}
		if yyb3496 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3496-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3504 := z.EncBinary()
		_ = yym3504
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3505 := !z.EncBinary()
			yy2arr3505 := z.EncBasicHandle().StructToArray
			var yyq3505 [8]bool
			_, _, _ = yysep3505, yyq3505, yy2arr3505
			const yyr3505 bool = false
			yyq3505[0] = x.Kind != ""
			yyq3505[1] = x.APIVersion != ""
			yyq3505[2] = x.Stdin != false
			yyq3505[3] = x.Stdout != false
			yyq3505[4] = x.Stderr != false
			yyq3505[5] = x.TTY != false
			yyq3505[6] = x.Container != ""
			var yynn3505 int
			if yyr3505 || yy2arr3505 {
				r.EncodeArrayStart(8)
			} else {
				yynn3505 = 1
				for _, b := range yyq3505 {
					if b {
						yynn3505++
					}
				}
				r.EncodeMapStart(yynn3505)
				yynn3505 = 0
			}
			if yyr3505 || yy2arr3505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3505[0] {
					yym3507 := z.EncBinary()
					_ = yym3507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3505[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3508 := z.EncBinary()
					_ = yym3508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3505 || yy2arr3505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3505[1] {
					yym3510 := z.EncBinary()
					_ = yym3510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3505[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3511 := z.EncBinary()
					_ = yym3511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3505 || yy2arr3505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3505[2] {
					yym3513 := z.EncBinary()
					_ = yym3513
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3505[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3514 := z.EncBinary()
					_ = yym3514
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3505 || yy2arr3505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3505[3] {
					yym3516 := z.EncBinary()
					_ = yym3516
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3505[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3517 := z.EncBinary()
					_ = yym3517
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3505 || yy2arr3505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3505[4] {
					yym3519 := z.EncBinary()
					_ = yym3519
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3505[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3520 := z.EncBinary()
					_ = yym3520
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3505 || yy2arr3505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3505[5] {
					yym3522 := z.EncBinary()
					_ = yym3522
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3505[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3523 := z.EncBinary()
					_ = yym3523
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3505 || yy2arr3505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3505[6] {
					yym3525 := z.EncBinary()
					_ = yym3525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3505[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3526 := z.EncBinary()
					_ = yym3526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3505 || yy2arr3505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3528 := z.EncBinary()
					_ = yym3528
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3529 := z.EncBinary()
					_ = yym3529
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3505 || yy2arr3505 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3530 := z.DecBinary()
	_ = yym3530
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3531 := r.ContainerType()
		if yyct3531 == codecSelferValueTypeMap1234 {
			yyl3531 := r.ReadMapStart()
			if yyl3531 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3531, d)
			}
		} else if yyct3531 == codecSelferValueTypeArray1234 {
			yyl3531 := r.ReadArrayStart()
			if yyl3531 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3531, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3532Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3532Slc
	var yyhl3532 bool = l >= 0
	for yyj3532 := 0; ; yyj3532++ {
		if yyhl3532 {
			if yyj3532 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3532Slc = r.DecodeBytes(yys3532Slc, true, true)
		yys3532 := string(yys3532Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3532 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3540 := &x.Command
				yym3541 := z.DecBinary()
				_ = yym3541
				if false {
				} else {
					z.F.DecSliceStringX(yyv3540, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3532)
		} // end switch yys3532
	} // end for yyj3532
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3542 int
	var yyb3542 bool
	var yyhl3542 bool = l >= 0
	yyj3542++
	if yyhl3542 {
		yyb3542 = yyj3542 > l
	} else {
		yyb3542 = r.CheckBreak()
	}
	if yyb3542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3542++
	if yyhl3542 {
		yyb3542 = yyj3542 > l
	} else {
		yyb3542 = r.CheckBreak()
	}
	if yyb3542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3542++
	if yyhl3542 {
		yyb3542 = yyj3542 > l
	} else {
		yyb3542 = r.CheckBreak()
	}
	if yyb3542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3542++
	if yyhl3542 {
		yyb3542 = yyj3542 > l
	} else {
		yyb3542 = r.CheckBreak()
	}
	if yyb3542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3542++
	if yyhl3542 {
		yyb3542 = yyj3542 > l
	} else {
		yyb3542 = r.CheckBreak()
	}
	if yyb3542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3542++
	if yyhl3542 {
		yyb3542 = yyj3542 > l
	} else {
		yyb3542 = r.CheckBreak()
	}
	if yyb3542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3542++
	if yyhl3542 {
		yyb3542 = yyj3542 > l
	} else {
		yyb3542 = r.CheckBreak()
	}
	if yyb3542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3542++
	if yyhl3542 {
		yyb3542 = yyj3542 > l
	} else {
		yyb3542 = r.CheckBreak()
	}
	if yyb3542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3550 := &x.Command
		yym3551 := z.DecBinary()
		_ = yym3551
		if false {
		} else {
			z.F.DecSliceStringX(yyv3550, false, d)
		}
	}
	for {
		yyj3542++
		if yyhl3542 {
			yyb3542 = yyj3542 > l
		} else {
			yyb3542 = r.CheckBreak()
		}
		if yyb3542 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3542-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3552 := z.EncBinary()
		_ = yym3552
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3553 := !z.EncBinary()
			yy2arr3553 := z.EncBasicHandle().StructToArray
			var yyq3553 [3]bool
			_, _, _ = yysep3553, yyq3553, yy2arr3553
			const yyr3553 bool = false
			yyq3553[0] = x.Kind != ""
			yyq3553[1] = x.APIVersion != ""
			yyq3553[2] = x.Path != ""
			var yynn3553 int
			if yyr3553 || yy2arr3553 {
				r.EncodeArrayStart(3)
			} else {
				yynn3553 = 0
				for _, b := range yyq3553 {
					if b {
						yynn3553++
					}
				}
				r.EncodeMapStart(yynn3553)
				yynn3553 = 0
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3553[0] {
					yym3555 := z.EncBinary()
					_ = yym3555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3553[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3556 := z.EncBinary()
					_ = yym3556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3553[1] {
					yym3558 := z.EncBinary()
					_ = yym3558
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3553[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3559 := z.EncBinary()
					_ = yym3559
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3553[2] {
					yym3561 := z.EncBinary()
					_ = yym3561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3553[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3562 := z.EncBinary()
					_ = yym3562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3563 := z.DecBinary()
	_ = yym3563
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3564 := r.ContainerType()
		if yyct3564 == codecSelferValueTypeMap1234 {
			yyl3564 := r.ReadMapStart()
			if yyl3564 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3564, d)
			}
		} else if yyct3564 == codecSelferValueTypeArray1234 {
			yyl3564 := r.ReadArrayStart()
			if yyl3564 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3564, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3565Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3565Slc
	var yyhl3565 bool = l >= 0
	for yyj3565 := 0; ; yyj3565++ {
		if yyhl3565 {
			if yyj3565 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3565Slc = r.DecodeBytes(yys3565Slc, true, true)
		yys3565 := string(yys3565Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3565 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3565)
		} // end switch yys3565
	} // end for yyj3565
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3569 int
	var yyb3569 bool
	var yyhl3569 bool = l >= 0
	yyj3569++
	if yyhl3569 {
		yyb3569 = yyj3569 > l
	} else {
		yyb3569 = r.CheckBreak()
	}
	if yyb3569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3569++
	if yyhl3569 {
		yyb3569 = yyj3569 > l
	} else {
		yyb3569 = r.CheckBreak()
	}
	if yyb3569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3569++
	if yyhl3569 {
		yyb3569 = yyj3569 > l
	} else {
		yyb3569 = r.CheckBreak()
	}
	if yyb3569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3569++
		if yyhl3569 {
			yyb3569 = yyj3569 > l
		} else {
			yyb3569 = r.CheckBreak()
		}
		if yyb3569 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3569-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3573 := z.EncBinary()
		_ = yym3573
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3574 := !z.EncBinary()
			yy2arr3574 := z.EncBasicHandle().StructToArray
			var yyq3574 [3]bool
			_, _, _ = yysep3574, yyq3574, yy2arr3574
			const yyr3574 bool = false
			yyq3574[0] = x.Kind != ""
			yyq3574[1] = x.APIVersion != ""
			yyq3574[2] = x.Path != ""
			var yynn3574 int
			if yyr3574 || yy2arr3574 {
				r.EncodeArrayStart(3)
			} else {
				yynn3574 = 0
				for _, b := range yyq3574 {
					if b {
						yynn3574++
					}
				}
				r.EncodeMapStart(yynn3574)
				yynn3574 = 0
			}
			if yyr3574 || yy2arr3574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3574[0] {
					yym3576 := z.EncBinary()
					_ = yym3576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3574[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3577 := z.EncBinary()
					_ = yym3577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3574 || yy2arr3574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3574[1] {
					yym3579 := z.EncBinary()
					_ = yym3579
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3574[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3580 := z.EncBinary()
					_ = yym3580
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3574 || yy2arr3574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3574[2] {
					yym3582 := z.EncBinary()
					_ = yym3582
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3574[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3583 := z.EncBinary()
					_ = yym3583
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3574 || yy2arr3574 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3584 := z.DecBinary()
	_ = yym3584
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3585 := r.ContainerType()
		if yyct3585 == codecSelferValueTypeMap1234 {
			yyl3585 := r.ReadMapStart()
			if yyl3585 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3585, d)
			}
		} else if yyct3585 == codecSelferValueTypeArray1234 {
			yyl3585 := r.ReadArrayStart()
			if yyl3585 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3585, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3586Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3586Slc
	var yyhl3586 bool = l >= 0
	for yyj3586 := 0; ; yyj3586++ {
		if yyhl3586 {
			if yyj3586 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3586Slc = r.DecodeBytes(yys3586Slc, true, true)
		yys3586 := string(yys3586Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3586 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3586)
		} // end switch yys3586
	} // end for yyj3586
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3590 int
	var yyb3590 bool
	var yyhl3590 bool = l >= 0
	yyj3590++
	if yyhl3590 {
		yyb3590 = yyj3590 > l
	} else {
		yyb3590 = r.CheckBreak()
	}
	if yyb3590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3590++
	if yyhl3590 {
		yyb3590 = yyj3590 > l
	} else {
		yyb3590 = r.CheckBreak()
	}
	if yyb3590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3590++
	if yyhl3590 {
		yyb3590 = yyj3590 > l
	} else {
		yyb3590 = r.CheckBreak()
	}
	if yyb3590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3590++
		if yyhl3590 {
			yyb3590 = yyj3590 > l
		} else {
			yyb3590 = r.CheckBreak()
		}
		if yyb3590 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3590-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3594 := z.EncBinary()
		_ = yym3594
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3595 := !z.EncBinary()
			yy2arr3595 := z.EncBasicHandle().StructToArray
			var yyq3595 [3]bool
			_, _, _ = yysep3595, yyq3595, yy2arr3595
			const yyr3595 bool = false
			yyq3595[0] = x.Kind != ""
			yyq3595[1] = x.APIVersion != ""
			yyq3595[2] = x.Path != ""
			var yynn3595 int
			if yyr3595 || yy2arr3595 {
				r.EncodeArrayStart(3)
			} else {
				yynn3595 = 0
				for _, b := range yyq3595 {
					if b {
						yynn3595++
					}
				}
				r.EncodeMapStart(yynn3595)
				yynn3595 = 0
			}
			if yyr3595 || yy2arr3595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3595[0] {
					yym3597 := z.EncBinary()
					_ = yym3597
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3595[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3598 := z.EncBinary()
					_ = yym3598
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3595 || yy2arr3595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3595[1] {
					yym3600 := z.EncBinary()
					_ = yym3600
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3595[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3601 := z.EncBinary()
					_ = yym3601
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3595 || yy2arr3595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3595[2] {
					yym3603 := z.EncBinary()
					_ = yym3603
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3595[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3604 := z.EncBinary()
					_ = yym3604
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3595 || yy2arr3595 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3605 := z.DecBinary()
	_ = yym3605
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3606 := r.ContainerType()
		if yyct3606 == codecSelferValueTypeMap1234 {
			yyl3606 := r.ReadMapStart()
			if yyl3606 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3606, d)
			}
		} else if yyct3606 == codecSelferValueTypeArray1234 {
			yyl3606 := r.ReadArrayStart()
			if yyl3606 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3606, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3607Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3607Slc
	var yyhl3607 bool = l >= 0
	for yyj3607 := 0; ; yyj3607++ {
		if yyhl3607 {
			if yyj3607 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3607Slc = r.DecodeBytes(yys3607Slc, true, true)
		yys3607 := string(yys3607Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3607 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3607)
		} // end switch yys3607
	} // end for yyj3607
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3611 int
	var yyb3611 bool
	var yyhl3611 bool = l >= 0
	yyj3611++
	if yyhl3611 {
		yyb3611 = yyj3611 > l
	} else {
		yyb3611 = r.CheckBreak()
	}
	if yyb3611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3611++
	if yyhl3611 {
		yyb3611 = yyj3611 > l
	} else {
		yyb3611 = r.CheckBreak()
	}
	if yyb3611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3611++
	if yyhl3611 {
		yyb3611 = yyj3611 > l
	} else {
		yyb3611 = r.CheckBreak()
	}
	if yyb3611 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3611++
		if yyhl3611 {
			yyb3611 = yyj3611 > l
		} else {
			yyb3611 = r.CheckBreak()
		}
		if yyb3611 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3611-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3615 := z.EncBinary()
		_ = yym3615
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3616 := !z.EncBinary()
			yy2arr3616 := z.EncBasicHandle().StructToArray
			var yyq3616 [5]bool
			_, _, _ = yysep3616, yyq3616, yy2arr3616
			const yyr3616 bool = false
			yyq3616[4] = x.Controller != nil
			var yynn3616 int
			if yyr3616 || yy2arr3616 {
				r.EncodeArrayStart(5)
			} else {
				yynn3616 = 4
				for _, b := range yyq3616 {
					if b {
						yynn3616++
					}
				}
				r.EncodeMapStart(yynn3616)
				yynn3616 = 0
			}
			if yyr3616 || yy2arr3616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3618 := z.EncBinary()
				_ = yym3618
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3619 := z.EncBinary()
				_ = yym3619
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3616 || yy2arr3616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3621 := z.EncBinary()
				_ = yym3621
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3622 := z.EncBinary()
				_ = yym3622
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3616 || yy2arr3616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3624 := z.EncBinary()
				_ = yym3624
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3625 := z.EncBinary()
				_ = yym3625
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3616 || yy2arr3616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3627 := z.EncBinary()
				_ = yym3627
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3628 := z.EncBinary()
				_ = yym3628
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3616 || yy2arr3616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3616[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3630 := *x.Controller
						yym3631 := z.EncBinary()
						_ = yym3631
						if false {
						} else {
							r.EncodeBool(bool(yy3630))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3616[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3632 := *x.Controller
						yym3633 := z.EncBinary()
						_ = yym3633
						if false {
						} else {
							r.EncodeBool(bool(yy3632))
						}
					}
				}
			}
			if yyr3616 || yy2arr3616 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3634 := z.DecBinary()
	_ = yym3634
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3635 := r.ContainerType()
		if yyct3635 == codecSelferValueTypeMap1234 {
			yyl3635 := r.ReadMapStart()
			if yyl3635 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3635, d)
			}
		} else if yyct3635 == codecSelferValueTypeArray1234 {
			yyl3635 := r.ReadArrayStart()
			if yyl3635 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3635, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3636Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3636Slc
	var yyhl3636 bool = l >= 0
	for yyj3636 := 0; ; yyj3636++ {
		if yyhl3636 {
			if yyj3636 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3636Slc = r.DecodeBytes(yys3636Slc, true, true)
		yys3636 := string(yys3636Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3636 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3642 := z.DecBinary()
				_ = yym3642
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3636)
		} // end switch yys3636
	} // end for yyj3636
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3643 int
	var yyb3643 bool
	var yyhl3643 bool = l >= 0
	yyj3643++
	if yyhl3643 {
		yyb3643 = yyj3643 > l
	} else {
		yyb3643 = r.CheckBreak()
	}
	if yyb3643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3643++
	if yyhl3643 {
		yyb3643 = yyj3643 > l
	} else {
		yyb3643 = r.CheckBreak()
	}
	if yyb3643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3643++
	if yyhl3643 {
		yyb3643 = yyj3643 > l
	} else {
		yyb3643 = r.CheckBreak()
	}
	if yyb3643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3643++
	if yyhl3643 {
		yyb3643 = yyj3643 > l
	} else {
		yyb3643 = r.CheckBreak()
	}
	if yyb3643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3643++
	if yyhl3643 {
		yyb3643 = yyj3643 > l
	} else {
		yyb3643 = r.CheckBreak()
	}
	if yyb3643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3649 := z.DecBinary()
		_ = yym3649
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3643++
		if yyhl3643 {
			yyb3643 = yyj3643 > l
		} else {
			yyb3643 = r.CheckBreak()
		}
		if yyb3643 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3643-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3650 := z.EncBinary()
		_ = yym3650
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3651 := !z.EncBinary()
			yy2arr3651 := z.EncBasicHandle().StructToArray
			var yyq3651 [7]bool
			_, _, _ = yysep3651, yyq3651, yy2arr3651
			const yyr3651 bool = false
			yyq3651[0] = x.Kind != ""
			yyq3651[1] = x.Namespace != ""
			yyq3651[2] = x.Name != ""
			yyq3651[3] = x.UID != ""
			yyq3651[4] = x.APIVersion != ""
			yyq3651[5] = x.ResourceVersion != ""
			yyq3651[6] = x.FieldPath != ""
			var yynn3651 int
			if yyr3651 || yy2arr3651 {
				r.EncodeArrayStart(7)
			} else {
				yynn3651 = 0
				for _, b := range yyq3651 {
					if b {
						yynn3651++
					}
				}
				r.EncodeMapStart(yynn3651)
				yynn3651 = 0
			}
			if yyr3651 || yy2arr3651 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3651[0] {
					yym3653 := z.EncBinary()
					_ = yym3653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3651[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3654 := z.EncBinary()
					_ = yym3654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3651 || yy2arr3651 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3651[1] {
					yym3656 := z.EncBinary()
					_ = yym3656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3651[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3657 := z.EncBinary()
					_ = yym3657
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3651 || yy2arr3651 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3651[2] {
					yym3659 := z.EncBinary()
					_ = yym3659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3651[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3660 := z.EncBinary()
					_ = yym3660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3651 || yy2arr3651 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3651[3] {
					yym3662 := z.EncBinary()
					_ = yym3662
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3651[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3663 := z.EncBinary()
					_ = yym3663
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3651 || yy2arr3651 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3651[4] {
					yym3665 := z.EncBinary()
					_ = yym3665
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3651[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3666 := z.EncBinary()
					_ = yym3666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3651 || yy2arr3651 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3651[5] {
					yym3668 := z.EncBinary()
					_ = yym3668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3651[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3669 := z.EncBinary()
					_ = yym3669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3651 || yy2arr3651 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3651[6] {
					yym3671 := z.EncBinary()
					_ = yym3671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3651[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3672 := z.EncBinary()
					_ = yym3672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3651 || yy2arr3651 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3673 := z.DecBinary()
	_ = yym3673
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3674 := r.ContainerType()
		if yyct3674 == codecSelferValueTypeMap1234 {
			yyl3674 := r.ReadMapStart()
			if yyl3674 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3674, d)
			}
		} else if yyct3674 == codecSelferValueTypeArray1234 {
			yyl3674 := r.ReadArrayStart()
			if yyl3674 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3674, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3675Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3675Slc
	var yyhl3675 bool = l >= 0
	for yyj3675 := 0; ; yyj3675++ {
		if yyhl3675 {
			if yyj3675 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3675Slc = r.DecodeBytes(yys3675Slc, true, true)
		yys3675 := string(yys3675Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3675 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3675)
		} // end switch yys3675
	} // end for yyj3675
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3683 int
	var yyb3683 bool
	var yyhl3683 bool = l >= 0
	yyj3683++
	if yyhl3683 {
		yyb3683 = yyj3683 > l
	} else {
		yyb3683 = r.CheckBreak()
	}
	if yyb3683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3683++
	if yyhl3683 {
		yyb3683 = yyj3683 > l
	} else {
		yyb3683 = r.CheckBreak()
	}
	if yyb3683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3683++
	if yyhl3683 {
		yyb3683 = yyj3683 > l
	} else {
		yyb3683 = r.CheckBreak()
	}
	if yyb3683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3683++
	if yyhl3683 {
		yyb3683 = yyj3683 > l
	} else {
		yyb3683 = r.CheckBreak()
	}
	if yyb3683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3683++
	if yyhl3683 {
		yyb3683 = yyj3683 > l
	} else {
		yyb3683 = r.CheckBreak()
	}
	if yyb3683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3683++
	if yyhl3683 {
		yyb3683 = yyj3683 > l
	} else {
		yyb3683 = r.CheckBreak()
	}
	if yyb3683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3683++
	if yyhl3683 {
		yyb3683 = yyj3683 > l
	} else {
		yyb3683 = r.CheckBreak()
	}
	if yyb3683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3683++
		if yyhl3683 {
			yyb3683 = yyj3683 > l
		} else {
			yyb3683 = r.CheckBreak()
		}
		if yyb3683 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3683-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3691 := z.EncBinary()
		_ = yym3691
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3692 := !z.EncBinary()
			yy2arr3692 := z.EncBasicHandle().StructToArray
			var yyq3692 [1]bool
			_, _, _ = yysep3692, yyq3692, yy2arr3692
			const yyr3692 bool = false
			yyq3692[0] = x.Name != ""
			var yynn3692 int
			if yyr3692 || yy2arr3692 {
				r.EncodeArrayStart(1)
			} else {
				yynn3692 = 0
				for _, b := range yyq3692 {
					if b {
						yynn3692++
					}
				}
				r.EncodeMapStart(yynn3692)
				yynn3692 = 0
			}
			if yyr3692 || yy2arr3692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3692[0] {
					yym3694 := z.EncBinary()
					_ = yym3694
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3692[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3695 := z.EncBinary()
					_ = yym3695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3692 || yy2arr3692 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3696 := z.DecBinary()
	_ = yym3696
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3697 := r.ContainerType()
		if yyct3697 == codecSelferValueTypeMap1234 {
			yyl3697 := r.ReadMapStart()
			if yyl3697 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3697, d)
			}
		} else if yyct3697 == codecSelferValueTypeArray1234 {
			yyl3697 := r.ReadArrayStart()
			if yyl3697 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3697, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3698Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3698Slc
	var yyhl3698 bool = l >= 0
	for yyj3698 := 0; ; yyj3698++ {
		if yyhl3698 {
			if yyj3698 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3698Slc = r.DecodeBytes(yys3698Slc, true, true)
		yys3698 := string(yys3698Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3698 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3698)
		} // end switch yys3698
	} // end for yyj3698
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3700 int
	var yyb3700 bool
	var yyhl3700 bool = l >= 0
	yyj3700++
	if yyhl3700 {
		yyb3700 = yyj3700 > l
	} else {
		yyb3700 = r.CheckBreak()
	}
	if yyb3700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3700++
		if yyhl3700 {
			yyb3700 = yyj3700 > l
		} else {
			yyb3700 = r.CheckBreak()
		}
		if yyb3700 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3700-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3702 := z.EncBinary()
		_ = yym3702
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3703 := !z.EncBinary()
			yy2arr3703 := z.EncBasicHandle().StructToArray
			var yyq3703 [3]bool
			_, _, _ = yysep3703, yyq3703, yy2arr3703
			const yyr3703 bool = false
			yyq3703[0] = x.Kind != ""
			yyq3703[1] = x.APIVersion != ""
			yyq3703[2] = true
			var yynn3703 int
			if yyr3703 || yy2arr3703 {
				r.EncodeArrayStart(3)
			} else {
				yynn3703 = 0
				for _, b := range yyq3703 {
					if b {
						yynn3703++
					}
				}
				r.EncodeMapStart(yynn3703)
				yynn3703 = 0
			}
			if yyr3703 || yy2arr3703 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3703[0] {
					yym3705 := z.EncBinary()
					_ = yym3705
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3703[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3706 := z.EncBinary()
					_ = yym3706
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3703 || yy2arr3703 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3703[1] {
					yym3708 := z.EncBinary()
					_ = yym3708
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3703[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3709 := z.EncBinary()
					_ = yym3709
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3703 || yy2arr3703 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3703[2] {
					yy3711 := &x.Reference
					yy3711.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3703[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3712 := &x.Reference
					yy3712.CodecEncodeSelf(e)
				}
			}
			if yyr3703 || yy2arr3703 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3713 := z.DecBinary()
	_ = yym3713
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3714 := r.ContainerType()
		if yyct3714 == codecSelferValueTypeMap1234 {
			yyl3714 := r.ReadMapStart()
			if yyl3714 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3714, d)
			}
		} else if yyct3714 == codecSelferValueTypeArray1234 {
			yyl3714 := r.ReadArrayStart()
			if yyl3714 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3714, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3715Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3715Slc
	var yyhl3715 bool = l >= 0
	for yyj3715 := 0; ; yyj3715++ {
		if yyhl3715 {
			if yyj3715 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3715Slc = r.DecodeBytes(yys3715Slc, true, true)
		yys3715 := string(yys3715Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3715 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3718 := &x.Reference
				yyv3718.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3715)
		} // end switch yys3715
	} // end for yyj3715
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3719 int
	var yyb3719 bool
	var yyhl3719 bool = l >= 0
	yyj3719++
	if yyhl3719 {
		yyb3719 = yyj3719 > l
	} else {
		yyb3719 = r.CheckBreak()
	}
	if yyb3719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3719++
	if yyhl3719 {
		yyb3719 = yyj3719 > l
	} else {
		yyb3719 = r.CheckBreak()
	}
	if yyb3719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3719++
	if yyhl3719 {
		yyb3719 = yyj3719 > l
	} else {
		yyb3719 = r.CheckBreak()
	}
	if yyb3719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3722 := &x.Reference
		yyv3722.CodecDecodeSelf(d)
	}
	for {
		yyj3719++
		if yyhl3719 {
			yyb3719 = yyj3719 > l
		} else {
			yyb3719 = r.CheckBreak()
		}
		if yyb3719 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3719-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3723 := z.EncBinary()
		_ = yym3723
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3724 := !z.EncBinary()
			yy2arr3724 := z.EncBasicHandle().StructToArray
			var yyq3724 [2]bool
			_, _, _ = yysep3724, yyq3724, yy2arr3724
			const yyr3724 bool = false
			yyq3724[0] = x.Component != ""
			yyq3724[1] = x.Host != ""
			var yynn3724 int
			if yyr3724 || yy2arr3724 {
				r.EncodeArrayStart(2)
			} else {
				yynn3724 = 0
				for _, b := range yyq3724 {
					if b {
						yynn3724++
					}
				}
				r.EncodeMapStart(yynn3724)
				yynn3724 = 0
			}
			if yyr3724 || yy2arr3724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3724[0] {
					yym3726 := z.EncBinary()
					_ = yym3726
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3724[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3727 := z.EncBinary()
					_ = yym3727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3724 || yy2arr3724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3724[1] {
					yym3729 := z.EncBinary()
					_ = yym3729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3724[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3730 := z.EncBinary()
					_ = yym3730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3724 || yy2arr3724 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3731 := z.DecBinary()
	_ = yym3731
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3732 := r.ContainerType()
		if yyct3732 == codecSelferValueTypeMap1234 {
			yyl3732 := r.ReadMapStart()
			if yyl3732 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3732, d)
			}
		} else if yyct3732 == codecSelferValueTypeArray1234 {
			yyl3732 := r.ReadArrayStart()
			if yyl3732 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3732, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3733Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3733Slc
	var yyhl3733 bool = l >= 0
	for yyj3733 := 0; ; yyj3733++ {
		if yyhl3733 {
			if yyj3733 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3733Slc = r.DecodeBytes(yys3733Slc, true, true)
		yys3733 := string(yys3733Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3733 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3733)
		} // end switch yys3733
	} // end for yyj3733
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3736 int
	var yyb3736 bool
	var yyhl3736 bool = l >= 0
	yyj3736++
	if yyhl3736 {
		yyb3736 = yyj3736 > l
	} else {
		yyb3736 = r.CheckBreak()
	}
	if yyb3736 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3736++
	if yyhl3736 {
		yyb3736 = yyj3736 > l
	} else {
		yyb3736 = r.CheckBreak()
	}
	if yyb3736 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3736++
		if yyhl3736 {
			yyb3736 = yyj3736 > l
		} else {
			yyb3736 = r.CheckBreak()
		}
		if yyb3736 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3736-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3739 := z.EncBinary()
		_ = yym3739
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3740 := !z.EncBinary()
			yy2arr3740 := z.EncBasicHandle().StructToArray
			var yyq3740 [11]bool
			_, _, _ = yysep3740, yyq3740, yy2arr3740
			const yyr3740 bool = false
			yyq3740[0] = x.Kind != ""
			yyq3740[1] = x.APIVersion != ""
			yyq3740[4] = x.Reason != ""
			yyq3740[5] = x.Message != ""
			yyq3740[6] = true
			yyq3740[7] = true
			yyq3740[8] = true
			yyq3740[9] = x.Count != 0
			yyq3740[10] = x.Type != ""
			var yynn3740 int
			if yyr3740 || yy2arr3740 {
				r.EncodeArrayStart(11)
			} else {
				yynn3740 = 2
				for _, b := range yyq3740 {
					if b {
						yynn3740++
					}
				}
				r.EncodeMapStart(yynn3740)
				yynn3740 = 0
			}
			if yyr3740 || yy2arr3740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3740[0] {
					yym3742 := z.EncBinary()
					_ = yym3742
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3740[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3743 := z.EncBinary()
					_ = yym3743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3740 || yy2arr3740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3740[1] {
					yym3745 := z.EncBinary()
					_ = yym3745
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3740[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3746 := z.EncBinary()
					_ = yym3746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3740 || yy2arr3740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3748 := &x.ObjectMeta
				yy3748.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3749 := &x.ObjectMeta
				yy3749.CodecEncodeSelf(e)
			}
			if yyr3740 || yy2arr3740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3751 := &x.InvolvedObject
				yy3751.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3752 := &x.InvolvedObject
				yy3752.CodecEncodeSelf(e)
			}
			if yyr3740 || yy2arr3740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3740[4] {
					yym3754 := z.EncBinary()
					_ = yym3754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3740[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3755 := z.EncBinary()
					_ = yym3755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3740 || yy2arr3740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3740[5] {
					yym3757 := z.EncBinary()
					_ = yym3757
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3740[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3758 := z.EncBinary()
					_ = yym3758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3740 || yy2arr3740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3740[6] {
					yy3760 := &x.Source
					yy3760.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3740[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3761 := &x.Source
					yy3761.CodecEncodeSelf(e)
				}
			}
			if yyr3740 || yy2arr3740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3740[7] {
					yy3763 := &x.FirstTimestamp
					yym3764 := z.EncBinary()
					_ = yym3764
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3763) {
					} else if yym3764 {
						z.EncBinaryMarshal(yy3763)
					} else if !yym3764 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3763)
					} else {
						z.EncFallback(yy3763)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3740[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3765 := &x.FirstTimestamp
					yym3766 := z.EncBinary()
					_ = yym3766
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3765) {
					} else if yym3766 {
						z.EncBinaryMarshal(yy3765)
					} else if !yym3766 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3765)
					} else {
						z.EncFallback(yy3765)
					}
				}
			}
			if yyr3740 || yy2arr3740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3740[8] {
					yy3768 := &x.LastTimestamp
					yym3769 := z.EncBinary()
					_ = yym3769
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3768) {
					} else if yym3769 {
						z.EncBinaryMarshal(yy3768)
					} else if !yym3769 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3768)
					} else {
						z.EncFallback(yy3768)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3740[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3770 := &x.LastTimestamp
					yym3771 := z.EncBinary()
					_ = yym3771
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3770) {
					} else if yym3771 {
						z.EncBinaryMarshal(yy3770)
					} else if !yym3771 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3770)
					} else {
						z.EncFallback(yy3770)
					}
				}
			}
			if yyr3740 || yy2arr3740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3740[9] {
					yym3773 := z.EncBinary()
					_ = yym3773
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3740[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3774 := z.EncBinary()
					_ = yym3774
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3740 || yy2arr3740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3740[10] {
					yym3776 := z.EncBinary()
					_ = yym3776
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3740[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3777 := z.EncBinary()
					_ = yym3777
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3740 || yy2arr3740 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3778 := z.DecBinary()
	_ = yym3778
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3779 := r.ContainerType()
		if yyct3779 == codecSelferValueTypeMap1234 {
			yyl3779 := r.ReadMapStart()
			if yyl3779 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3779, d)
			}
		} else if yyct3779 == codecSelferValueTypeArray1234 {
			yyl3779 := r.ReadArrayStart()
			if yyl3779 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3779, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3780Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3780Slc
	var yyhl3780 bool = l >= 0
	for yyj3780 := 0; ; yyj3780++ {
		if yyhl3780 {
			if yyj3780 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3780Slc = r.DecodeBytes(yys3780Slc, true, true)
		yys3780 := string(yys3780Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3780 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3783 := &x.ObjectMeta
				yyv3783.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3784 := &x.InvolvedObject
				yyv3784.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3787 := &x.Source
				yyv3787.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3788 := &x.FirstTimestamp
				yym3789 := z.DecBinary()
				_ = yym3789
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3788) {
				} else if yym3789 {
					z.DecBinaryUnmarshal(yyv3788)
				} else if !yym3789 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3788)
				} else {
					z.DecFallback(yyv3788, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3790 := &x.LastTimestamp
				yym3791 := z.DecBinary()
				_ = yym3791
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3790) {
				} else if yym3791 {
					z.DecBinaryUnmarshal(yyv3790)
				} else if !yym3791 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3790)
				} else {
					z.DecFallback(yyv3790, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3780)
		} // end switch yys3780
	} // end for yyj3780
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3794 int
	var yyb3794 bool
	var yyhl3794 bool = l >= 0
	yyj3794++
	if yyhl3794 {
		yyb3794 = yyj3794 > l
	} else {
		yyb3794 = r.CheckBreak()
	}
	if yyb3794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3794++
	if yyhl3794 {
		yyb3794 = yyj3794 > l
	} else {
		yyb3794 = r.CheckBreak()
	}
	if yyb3794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3794++
	if yyhl3794 {
		yyb3794 = yyj3794 > l
	} else {
		yyb3794 = r.CheckBreak()
	}
	if yyb3794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3797 := &x.ObjectMeta
		yyv3797.CodecDecodeSelf(d)
	}
	yyj3794++
	if yyhl3794 {
		yyb3794 = yyj3794 > l
	} else {
		yyb3794 = r.CheckBreak()
	}
	if yyb3794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3798 := &x.InvolvedObject
		yyv3798.CodecDecodeSelf(d)
	}
	yyj3794++
	if yyhl3794 {
		yyb3794 = yyj3794 > l
	} else {
		yyb3794 = r.CheckBreak()
	}
	if yyb3794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3794++
	if yyhl3794 {
		yyb3794 = yyj3794 > l
	} else {
		yyb3794 = r.CheckBreak()
	}
	if yyb3794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3794++
	if yyhl3794 {
		yyb3794 = yyj3794 > l
	} else {
		yyb3794 = r.CheckBreak()
	}
	if yyb3794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3801 := &x.Source
		yyv3801.CodecDecodeSelf(d)
	}
	yyj3794++
	if yyhl3794 {
		yyb3794 = yyj3794 > l
	} else {
		yyb3794 = r.CheckBreak()
	}
	if yyb3794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3802 := &x.FirstTimestamp
		yym3803 := z.DecBinary()
		_ = yym3803
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3802) {
		} else if yym3803 {
			z.DecBinaryUnmarshal(yyv3802)
		} else if !yym3803 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3802)
		} else {
			z.DecFallback(yyv3802, false)
		}
	}
	yyj3794++
	if yyhl3794 {
		yyb3794 = yyj3794 > l
	} else {
		yyb3794 = r.CheckBreak()
	}
	if yyb3794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3804 := &x.LastTimestamp
		yym3805 := z.DecBinary()
		_ = yym3805
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3804) {
		} else if yym3805 {
			z.DecBinaryUnmarshal(yyv3804)
		} else if !yym3805 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3804)
		} else {
			z.DecFallback(yyv3804, false)
		}
	}
	yyj3794++
	if yyhl3794 {
		yyb3794 = yyj3794 > l
	} else {
		yyb3794 = r.CheckBreak()
	}
	if yyb3794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3794++
	if yyhl3794 {
		yyb3794 = yyj3794 > l
	} else {
		yyb3794 = r.CheckBreak()
	}
	if yyb3794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3794++
		if yyhl3794 {
			yyb3794 = yyj3794 > l
		} else {
			yyb3794 = r.CheckBreak()
		}
		if yyb3794 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3794-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3808 := z.EncBinary()
		_ = yym3808
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3809 := !z.EncBinary()
			yy2arr3809 := z.EncBasicHandle().StructToArray
			var yyq3809 [4]bool
			_, _, _ = yysep3809, yyq3809, yy2arr3809
			const yyr3809 bool = false
			yyq3809[0] = x.Kind != ""
			yyq3809[1] = x.APIVersion != ""
			yyq3809[2] = true
			var yynn3809 int
			if yyr3809 || yy2arr3809 {
				r.EncodeArrayStart(4)
			} else {
				yynn3809 = 1
				for _, b := range yyq3809 {
					if b {
						yynn3809++
					}
				}
				r.EncodeMapStart(yynn3809)
				yynn3809 = 0
			}
			if yyr3809 || yy2arr3809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3809[0] {
					yym3811 := z.EncBinary()
					_ = yym3811
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3809[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3812 := z.EncBinary()
					_ = yym3812
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3809 || yy2arr3809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3809[1] {
					yym3814 := z.EncBinary()
					_ = yym3814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3809[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3815 := z.EncBinary()
					_ = yym3815
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3809 || yy2arr3809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3809[2] {
					yy3817 := &x.ListMeta
					yym3818 := z.EncBinary()
					_ = yym3818
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3817) {
					} else {
						z.EncFallback(yy3817)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3809[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3819 := &x.ListMeta
					yym3820 := z.EncBinary()
					_ = yym3820
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3819) {
					} else {
						z.EncFallback(yy3819)
					}
				}
			}
			if yyr3809 || yy2arr3809 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3822 := z.EncBinary()
					_ = yym3822
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3823 := z.EncBinary()
					_ = yym3823
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3809 || yy2arr3809 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3824 := z.DecBinary()
	_ = yym3824
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3825 := r.ContainerType()
		if yyct3825 == codecSelferValueTypeMap1234 {
			yyl3825 := r.ReadMapStart()
			if yyl3825 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3825, d)
			}
		} else if yyct3825 == codecSelferValueTypeArray1234 {
			yyl3825 := r.ReadArrayStart()
			if yyl3825 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3825, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3826Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3826Slc
	var yyhl3826 bool = l >= 0
	for yyj3826 := 0; ; yyj3826++ {
		if yyhl3826 {
			if yyj3826 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3826Slc = r.DecodeBytes(yys3826Slc, true, true)
		yys3826 := string(yys3826Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3826 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3829 := &x.ListMeta
				yym3830 := z.DecBinary()
				_ = yym3830
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3829) {
				} else {
					z.DecFallback(yyv3829, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3831 := &x.Items
				yym3832 := z.DecBinary()
				_ = yym3832
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3831), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3826)
		} // end switch yys3826
	} // end for yyj3826
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3833 int
	var yyb3833 bool
	var yyhl3833 bool = l >= 0
	yyj3833++
	if yyhl3833 {
		yyb3833 = yyj3833 > l
	} else {
		yyb3833 = r.CheckBreak()
	}
	if yyb3833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3833++
	if yyhl3833 {
		yyb3833 = yyj3833 > l
	} else {
		yyb3833 = r.CheckBreak()
	}
	if yyb3833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3833++
	if yyhl3833 {
		yyb3833 = yyj3833 > l
	} else {
		yyb3833 = r.CheckBreak()
	}
	if yyb3833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3836 := &x.ListMeta
		yym3837 := z.DecBinary()
		_ = yym3837
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3836) {
		} else {
			z.DecFallback(yyv3836, false)
		}
	}
	yyj3833++
	if yyhl3833 {
		yyb3833 = yyj3833 > l
	} else {
		yyb3833 = r.CheckBreak()
	}
	if yyb3833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3838 := &x.Items
		yym3839 := z.DecBinary()
		_ = yym3839
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3838), d)
		}
	}
	for {
		yyj3833++
		if yyhl3833 {
			yyb3833 = yyj3833 > l
		} else {
			yyb3833 = r.CheckBreak()
		}
		if yyb3833 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3833-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3840 := z.EncBinary()
		_ = yym3840
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3841 := !z.EncBinary()
			yy2arr3841 := z.EncBasicHandle().StructToArray
			var yyq3841 [4]bool
			_, _, _ = yysep3841, yyq3841, yy2arr3841
			const yyr3841 bool = false
			yyq3841[0] = x.Kind != ""
			yyq3841[1] = x.APIVersion != ""
			yyq3841[2] = true
			var yynn3841 int
			if yyr3841 || yy2arr3841 {
				r.EncodeArrayStart(4)
			} else {
				yynn3841 = 1
				for _, b := range yyq3841 {
					if b {
						yynn3841++
					}
				}
				r.EncodeMapStart(yynn3841)
				yynn3841 = 0
			}
			if yyr3841 || yy2arr3841 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3841[0] {
					yym3843 := z.EncBinary()
					_ = yym3843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3841[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3844 := z.EncBinary()
					_ = yym3844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3841 || yy2arr3841 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3841[1] {
					yym3846 := z.EncBinary()
					_ = yym3846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3841[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3847 := z.EncBinary()
					_ = yym3847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3841 || yy2arr3841 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3841[2] {
					yy3849 := &x.ListMeta
					yym3850 := z.EncBinary()
					_ = yym3850
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3849) {
					} else {
						z.EncFallback(yy3849)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3841[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3851 := &x.ListMeta
					yym3852 := z.EncBinary()
					_ = yym3852
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3851) {
					} else {
						z.EncFallback(yy3851)
					}
				}
			}
			if yyr3841 || yy2arr3841 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3854 := z.EncBinary()
					_ = yym3854
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3855 := z.EncBinary()
					_ = yym3855
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yyr3841 || yy2arr3841 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3856 := z.DecBinary()
	_ = yym3856
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3857 := r.ContainerType()
		if yyct3857 == codecSelferValueTypeMap1234 {
			yyl3857 := r.ReadMapStart()
			if yyl3857 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3857, d)
			}
		} else if yyct3857 == codecSelferValueTypeArray1234 {
			yyl3857 := r.ReadArrayStart()
			if yyl3857 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3857, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3858Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3858Slc
	var yyhl3858 bool = l >= 0
	for yyj3858 := 0; ; yyj3858++ {
		if yyhl3858 {
			if yyj3858 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3858Slc = r.DecodeBytes(yys3858Slc, true, true)
		yys3858 := string(yys3858Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3858 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3861 := &x.ListMeta
				yym3862 := z.DecBinary()
				_ = yym3862
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3861) {
				} else {
					z.DecFallback(yyv3861, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3863 := &x.Items
				yym3864 := z.DecBinary()
				_ = yym3864
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv3863), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3858)
		} // end switch yys3858
	} // end for yyj3858
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3865 int
	var yyb3865 bool
	var yyhl3865 bool = l >= 0
	yyj3865++
	if yyhl3865 {
		yyb3865 = yyj3865 > l
	} else {
		yyb3865 = r.CheckBreak()
	}
	if yyb3865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3865++
	if yyhl3865 {
		yyb3865 = yyj3865 > l
	} else {
		yyb3865 = r.CheckBreak()
	}
	if yyb3865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3865++
	if yyhl3865 {
		yyb3865 = yyj3865 > l
	} else {
		yyb3865 = r.CheckBreak()
	}
	if yyb3865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3868 := &x.ListMeta
		yym3869 := z.DecBinary()
		_ = yym3869
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3868) {
		} else {
			z.DecFallback(yyv3868, false)
		}
	}
	yyj3865++
	if yyhl3865 {
		yyb3865 = yyj3865 > l
	} else {
		yyb3865 = r.CheckBreak()
	}
	if yyb3865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3870 := &x.Items
		yym3871 := z.DecBinary()
		_ = yym3871
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv3870), d)
		}
	}
	for {
		yyj3865++
		if yyhl3865 {
			yyb3865 = yyj3865 > l
		} else {
			yyb3865 = r.CheckBreak()
		}
		if yyb3865 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3865-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3872 := z.EncBinary()
	_ = yym3872
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3873 := z.DecBinary()
	_ = yym3873
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3874 := z.EncBinary()
		_ = yym3874
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3875 := !z.EncBinary()
			yy2arr3875 := z.EncBasicHandle().StructToArray
			var yyq3875 [6]bool
			_, _, _ = yysep3875, yyq3875, yy2arr3875
			const yyr3875 bool = false
			yyq3875[0] = x.Type != ""
			yyq3875[1] = len(x.Max) != 0
			yyq3875[2] = len(x.Min) != 0
			yyq3875[3] = len(x.Default) != 0
			yyq3875[4] = len(x.DefaultRequest) != 0
			yyq3875[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3875 int
			if yyr3875 || yy2arr3875 {
				r.EncodeArrayStart(6)
			} else {
				yynn3875 = 0
				for _, b := range yyq3875 {
					if b {
						yynn3875++
					}
				}
				r.EncodeMapStart(yynn3875)
				yynn3875 = 0
			}
			if yyr3875 || yy2arr3875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3875[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3875[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3875 || yy2arr3875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3875[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3875[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3875 || yy2arr3875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3875[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3875[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3875 || yy2arr3875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3875[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3875[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3875 || yy2arr3875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3875[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3875[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3875 || yy2arr3875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3875[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3875[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3875 || yy2arr3875 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3882 := z.DecBinary()
	_ = yym3882
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3883 := r.ContainerType()
		if yyct3883 == codecSelferValueTypeMap1234 {
			yyl3883 := r.ReadMapStart()
			if yyl3883 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3883, d)
			}
		} else if yyct3883 == codecSelferValueTypeArray1234 {
			yyl3883 := r.ReadArrayStart()
			if yyl3883 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3883, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3884Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3884Slc
	var yyhl3884 bool = l >= 0
	for yyj3884 := 0; ; yyj3884++ {
		if yyhl3884 {
			if yyj3884 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3884Slc = r.DecodeBytes(yys3884Slc, true, true)
		yys3884 := string(yys3884Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3884 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3886 := &x.Max
				yyv3886.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3887 := &x.Min
				yyv3887.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3888 := &x.Default
				yyv3888.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3889 := &x.DefaultRequest
				yyv3889.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3890 := &x.MaxLimitRequestRatio
				yyv3890.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3884)
		} // end switch yys3884
	} // end for yyj3884
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3891 int
	var yyb3891 bool
	var yyhl3891 bool = l >= 0
	yyj3891++
	if yyhl3891 {
		yyb3891 = yyj3891 > l
	} else {
		yyb3891 = r.CheckBreak()
	}
	if yyb3891 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3891++
	if yyhl3891 {
		yyb3891 = yyj3891 > l
	} else {
		yyb3891 = r.CheckBreak()
	}
	if yyb3891 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3893 := &x.Max
		yyv3893.CodecDecodeSelf(d)
	}
	yyj3891++
	if yyhl3891 {
		yyb3891 = yyj3891 > l
	} else {
		yyb3891 = r.CheckBreak()
	}
	if yyb3891 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3894 := &x.Min
		yyv3894.CodecDecodeSelf(d)
	}
	yyj3891++
	if yyhl3891 {
		yyb3891 = yyj3891 > l
	} else {
		yyb3891 = r.CheckBreak()
	}
	if yyb3891 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3895 := &x.Default
		yyv3895.CodecDecodeSelf(d)
	}
	yyj3891++
	if yyhl3891 {
		yyb3891 = yyj3891 > l
	} else {
		yyb3891 = r.CheckBreak()
	}
	if yyb3891 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3896 := &x.DefaultRequest
		yyv3896.CodecDecodeSelf(d)
	}
	yyj3891++
	if yyhl3891 {
		yyb3891 = yyj3891 > l
	} else {
		yyb3891 = r.CheckBreak()
	}
	if yyb3891 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3897 := &x.MaxLimitRequestRatio
		yyv3897.CodecDecodeSelf(d)
	}
	for {
		yyj3891++
		if yyhl3891 {
			yyb3891 = yyj3891 > l
		} else {
			yyb3891 = r.CheckBreak()
		}
		if yyb3891 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3891-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3898 := z.EncBinary()
		_ = yym3898
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3899 := !z.EncBinary()
			yy2arr3899 := z.EncBasicHandle().StructToArray
			var yyq3899 [1]bool
			_, _, _ = yysep3899, yyq3899, yy2arr3899
			const yyr3899 bool = false
			var yynn3899 int
			if yyr3899 || yy2arr3899 {
				r.EncodeArrayStart(1)
			} else {
				yynn3899 = 1
				for _, b := range yyq3899 {
					if b {
						yynn3899++
					}
				}
				r.EncodeMapStart(yynn3899)
				yynn3899 = 0
			}
			if yyr3899 || yy2arr3899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3901 := z.EncBinary()
					_ = yym3901
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3902 := z.EncBinary()
					_ = yym3902
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3899 || yy2arr3899 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3903 := z.DecBinary()
	_ = yym3903
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3904 := r.ContainerType()
		if yyct3904 == codecSelferValueTypeMap1234 {
			yyl3904 := r.ReadMapStart()
			if yyl3904 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3904, d)
			}
		} else if yyct3904 == codecSelferValueTypeArray1234 {
			yyl3904 := r.ReadArrayStart()
			if yyl3904 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3904, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3905Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3905Slc
	var yyhl3905 bool = l >= 0
	for yyj3905 := 0; ; yyj3905++ {
		if yyhl3905 {
			if yyj3905 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3905Slc = r.DecodeBytes(yys3905Slc, true, true)
		yys3905 := string(yys3905Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3905 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3906 := &x.Limits
				yym3907 := z.DecBinary()
				_ = yym3907
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3906), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3905)
		} // end switch yys3905
	} // end for yyj3905
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3908 int
	var yyb3908 bool
	var yyhl3908 bool = l >= 0
	yyj3908++
	if yyhl3908 {
		yyb3908 = yyj3908 > l
	} else {
		yyb3908 = r.CheckBreak()
	}
	if yyb3908 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3909 := &x.Limits
		yym3910 := z.DecBinary()
		_ = yym3910
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3909), d)
		}
	}
	for {
		yyj3908++
		if yyhl3908 {
			yyb3908 = yyj3908 > l
		} else {
			yyb3908 = r.CheckBreak()
		}
		if yyb3908 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3908-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3911 := z.EncBinary()
		_ = yym3911
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3912 := !z.EncBinary()
			yy2arr3912 := z.EncBasicHandle().StructToArray
			var yyq3912 [4]bool
			_, _, _ = yysep3912, yyq3912, yy2arr3912
			const yyr3912 bool = false
			yyq3912[0] = x.Kind != ""
			yyq3912[1] = x.APIVersion != ""
			yyq3912[2] = true
			yyq3912[3] = true
			var yynn3912 int
			if yyr3912 || yy2arr3912 {
				r.EncodeArrayStart(4)
			} else {
				yynn3912 = 0
				for _, b := range yyq3912 {
					if b {
						yynn3912++
					}
				}
				r.EncodeMapStart(yynn3912)
				yynn3912 = 0
			}
			if yyr3912 || yy2arr3912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3912[0] {
					yym3914 := z.EncBinary()
					_ = yym3914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3912[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3915 := z.EncBinary()
					_ = yym3915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3912 || yy2arr3912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3912[1] {
					yym3917 := z.EncBinary()
					_ = yym3917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3912[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3918 := z.EncBinary()
					_ = yym3918
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3912 || yy2arr3912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3912[2] {
					yy3920 := &x.ObjectMeta
					yy3920.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3912[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3921 := &x.ObjectMeta
					yy3921.CodecEncodeSelf(e)
				}
			}
			if yyr3912 || yy2arr3912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3912[3] {
					yy3923 := &x.Spec
					yy3923.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3912[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3924 := &x.Spec
					yy3924.CodecEncodeSelf(e)
				}
			}
			if yyr3912 || yy2arr3912 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3925 := z.DecBinary()
	_ = yym3925
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3926 := r.ContainerType()
		if yyct3926 == codecSelferValueTypeMap1234 {
			yyl3926 := r.ReadMapStart()
			if yyl3926 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3926, d)
			}
		} else if yyct3926 == codecSelferValueTypeArray1234 {
			yyl3926 := r.ReadArrayStart()
			if yyl3926 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3926, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3927Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3927Slc
	var yyhl3927 bool = l >= 0
	for yyj3927 := 0; ; yyj3927++ {
		if yyhl3927 {
			if yyj3927 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3927Slc = r.DecodeBytes(yys3927Slc, true, true)
		yys3927 := string(yys3927Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3927 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3930 := &x.ObjectMeta
				yyv3930.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3931 := &x.Spec
				yyv3931.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3927)
		} // end switch yys3927
	} // end for yyj3927
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3932 int
	var yyb3932 bool
	var yyhl3932 bool = l >= 0
	yyj3932++
	if yyhl3932 {
		yyb3932 = yyj3932 > l
	} else {
		yyb3932 = r.CheckBreak()
	}
	if yyb3932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3932++
	if yyhl3932 {
		yyb3932 = yyj3932 > l
	} else {
		yyb3932 = r.CheckBreak()
	}
	if yyb3932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3932++
	if yyhl3932 {
		yyb3932 = yyj3932 > l
	} else {
		yyb3932 = r.CheckBreak()
	}
	if yyb3932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3935 := &x.ObjectMeta
		yyv3935.CodecDecodeSelf(d)
	}
	yyj3932++
	if yyhl3932 {
		yyb3932 = yyj3932 > l
	} else {
		yyb3932 = r.CheckBreak()
	}
	if yyb3932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3936 := &x.Spec
		yyv3936.CodecDecodeSelf(d)
	}
	for {
		yyj3932++
		if yyhl3932 {
			yyb3932 = yyj3932 > l
		} else {
			yyb3932 = r.CheckBreak()
		}
		if yyb3932 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3932-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3937 := z.EncBinary()
		_ = yym3937
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3938 := !z.EncBinary()
			yy2arr3938 := z.EncBasicHandle().StructToArray
			var yyq3938 [4]bool
			_, _, _ = yysep3938, yyq3938, yy2arr3938
			const yyr3938 bool = false
			yyq3938[0] = x.Kind != ""
			yyq3938[1] = x.APIVersion != ""
			yyq3938[2] = true
			var yynn3938 int
			if yyr3938 || yy2arr3938 {
				r.EncodeArrayStart(4)
			} else {
				yynn3938 = 1
				for _, b := range yyq3938 {
					if b {
						yynn3938++
					}
				}
				r.EncodeMapStart(yynn3938)
				yynn3938 = 0
			}
			if yyr3938 || yy2arr3938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3938[0] {
					yym3940 := z.EncBinary()
					_ = yym3940
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3938[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3941 := z.EncBinary()
					_ = yym3941
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3938 || yy2arr3938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3938[1] {
					yym3943 := z.EncBinary()
					_ = yym3943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3938[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3944 := z.EncBinary()
					_ = yym3944
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3938 || yy2arr3938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3938[2] {
					yy3946 := &x.ListMeta
					yym3947 := z.EncBinary()
					_ = yym3947
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3946) {
					} else {
						z.EncFallback(yy3946)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3938[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3948 := &x.ListMeta
					yym3949 := z.EncBinary()
					_ = yym3949
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3948) {
					} else {
						z.EncFallback(yy3948)
					}
				}
			}
			if yyr3938 || yy2arr3938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3951 := z.EncBinary()
					_ = yym3951
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3952 := z.EncBinary()
					_ = yym3952
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr3938 || yy2arr3938 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3953 := z.DecBinary()
	_ = yym3953
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3954 := r.ContainerType()
		if yyct3954 == codecSelferValueTypeMap1234 {
			yyl3954 := r.ReadMapStart()
			if yyl3954 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3954, d)
			}
		} else if yyct3954 == codecSelferValueTypeArray1234 {
			yyl3954 := r.ReadArrayStart()
			if yyl3954 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3954, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3955Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3955Slc
	var yyhl3955 bool = l >= 0
	for yyj3955 := 0; ; yyj3955++ {
		if yyhl3955 {
			if yyj3955 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3955Slc = r.DecodeBytes(yys3955Slc, true, true)
		yys3955 := string(yys3955Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3955 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3958 := &x.ListMeta
				yym3959 := z.DecBinary()
				_ = yym3959
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3958) {
				} else {
					z.DecFallback(yyv3958, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3960 := &x.Items
				yym3961 := z.DecBinary()
				_ = yym3961
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3960), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3955)
		} // end switch yys3955
	} // end for yyj3955
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3962 int
	var yyb3962 bool
	var yyhl3962 bool = l >= 0
	yyj3962++
	if yyhl3962 {
		yyb3962 = yyj3962 > l
	} else {
		yyb3962 = r.CheckBreak()
	}
	if yyb3962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3962++
	if yyhl3962 {
		yyb3962 = yyj3962 > l
	} else {
		yyb3962 = r.CheckBreak()
	}
	if yyb3962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3962++
	if yyhl3962 {
		yyb3962 = yyj3962 > l
	} else {
		yyb3962 = r.CheckBreak()
	}
	if yyb3962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3965 := &x.ListMeta
		yym3966 := z.DecBinary()
		_ = yym3966
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3965) {
		} else {
			z.DecFallback(yyv3965, false)
		}
	}
	yyj3962++
	if yyhl3962 {
		yyb3962 = yyj3962 > l
	} else {
		yyb3962 = r.CheckBreak()
	}
	if yyb3962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3967 := &x.Items
		yym3968 := z.DecBinary()
		_ = yym3968
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3967), d)
		}
	}
	for {
		yyj3962++
		if yyhl3962 {
			yyb3962 = yyj3962 > l
		} else {
			yyb3962 = r.CheckBreak()
		}
		if yyb3962 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3962-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3969 := z.EncBinary()
	_ = yym3969
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3970 := z.DecBinary()
	_ = yym3970
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3971 := z.EncBinary()
		_ = yym3971
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3972 := !z.EncBinary()
			yy2arr3972 := z.EncBasicHandle().StructToArray
			var yyq3972 [2]bool
			_, _, _ = yysep3972, yyq3972, yy2arr3972
			const yyr3972 bool = false
			yyq3972[0] = len(x.Hard) != 0
			yyq3972[1] = len(x.Scopes) != 0
			var yynn3972 int
			if yyr3972 || yy2arr3972 {
				r.EncodeArrayStart(2)
			} else {
				yynn3972 = 0
				for _, b := range yyq3972 {
					if b {
						yynn3972++
					}
				}
				r.EncodeMapStart(yynn3972)
				yynn3972 = 0
			}
			if yyr3972 || yy2arr3972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3972[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3972[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3972 || yy2arr3972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3972[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym3975 := z.EncBinary()
						_ = yym3975
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3972[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym3976 := z.EncBinary()
						_ = yym3976
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr3972 || yy2arr3972 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3977 := z.DecBinary()
	_ = yym3977
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3978 := r.ContainerType()
		if yyct3978 == codecSelferValueTypeMap1234 {
			yyl3978 := r.ReadMapStart()
			if yyl3978 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3978, d)
			}
		} else if yyct3978 == codecSelferValueTypeArray1234 {
			yyl3978 := r.ReadArrayStart()
			if yyl3978 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3978, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3979Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3979Slc
	var yyhl3979 bool = l >= 0
	for yyj3979 := 0; ; yyj3979++ {
		if yyhl3979 {
			if yyj3979 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3979Slc = r.DecodeBytes(yys3979Slc, true, true)
		yys3979 := string(yys3979Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3979 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3980 := &x.Hard
				yyv3980.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv3981 := &x.Scopes
				yym3982 := z.DecBinary()
				_ = yym3982
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv3981), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3979)
		} // end switch yys3979
	} // end for yyj3979
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3983 int
	var yyb3983 bool
	var yyhl3983 bool = l >= 0
	yyj3983++
	if yyhl3983 {
		yyb3983 = yyj3983 > l
	} else {
		yyb3983 = r.CheckBreak()
	}
	if yyb3983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3984 := &x.Hard
		yyv3984.CodecDecodeSelf(d)
	}
	yyj3983++
	if yyhl3983 {
		yyb3983 = yyj3983 > l
	} else {
		yyb3983 = r.CheckBreak()
	}
	if yyb3983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv3985 := &x.Scopes
		yym3986 := z.DecBinary()
		_ = yym3986
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv3985), d)
		}
	}
	for {
		yyj3983++
		if yyhl3983 {
			yyb3983 = yyj3983 > l
		} else {
			yyb3983 = r.CheckBreak()
		}
		if yyb3983 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3983-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3987 := z.EncBinary()
		_ = yym3987
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3988 := !z.EncBinary()
			yy2arr3988 := z.EncBasicHandle().StructToArray
			var yyq3988 [2]bool
			_, _, _ = yysep3988, yyq3988, yy2arr3988
			const yyr3988 bool = false
			yyq3988[0] = len(x.Hard) != 0
			yyq3988[1] = len(x.Used) != 0
			var yynn3988 int
			if yyr3988 || yy2arr3988 {
				r.EncodeArrayStart(2)
			} else {
				yynn3988 = 0
				for _, b := range yyq3988 {
					if b {
						yynn3988++
					}
				}
				r.EncodeMapStart(yynn3988)
				yynn3988 = 0
			}
			if yyr3988 || yy2arr3988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3988[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3988[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3988 || yy2arr3988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3988[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3988[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3988 || yy2arr3988 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3991 := z.DecBinary()
	_ = yym3991
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3992 := r.ContainerType()
		if yyct3992 == codecSelferValueTypeMap1234 {
			yyl3992 := r.ReadMapStart()
			if yyl3992 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3992, d)
			}
		} else if yyct3992 == codecSelferValueTypeArray1234 {
			yyl3992 := r.ReadArrayStart()
			if yyl3992 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3992, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3993Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3993Slc
	var yyhl3993 bool = l >= 0
	for yyj3993 := 0; ; yyj3993++ {
		if yyhl3993 {
			if yyj3993 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3993Slc = r.DecodeBytes(yys3993Slc, true, true)
		yys3993 := string(yys3993Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3993 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3994 := &x.Hard
				yyv3994.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3995 := &x.Used
				yyv3995.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3993)
		} // end switch yys3993
	} // end for yyj3993
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3996 int
	var yyb3996 bool
	var yyhl3996 bool = l >= 0
	yyj3996++
	if yyhl3996 {
		yyb3996 = yyj3996 > l
	} else {
		yyb3996 = r.CheckBreak()
	}
	if yyb3996 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3997 := &x.Hard
		yyv3997.CodecDecodeSelf(d)
	}
	yyj3996++
	if yyhl3996 {
		yyb3996 = yyj3996 > l
	} else {
		yyb3996 = r.CheckBreak()
	}
	if yyb3996 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3998 := &x.Used
		yyv3998.CodecDecodeSelf(d)
	}
	for {
		yyj3996++
		if yyhl3996 {
			yyb3996 = yyj3996 > l
		} else {
			yyb3996 = r.CheckBreak()
		}
		if yyb3996 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3996-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3999 := z.EncBinary()
		_ = yym3999
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4000 := !z.EncBinary()
			yy2arr4000 := z.EncBasicHandle().StructToArray
			var yyq4000 [5]bool
			_, _, _ = yysep4000, yyq4000, yy2arr4000
			const yyr4000 bool = false
			yyq4000[0] = x.Kind != ""
			yyq4000[1] = x.APIVersion != ""
			yyq4000[2] = true
			yyq4000[3] = true
			yyq4000[4] = true
			var yynn4000 int
			if yyr4000 || yy2arr4000 {
				r.EncodeArrayStart(5)
			} else {
				yynn4000 = 0
				for _, b := range yyq4000 {
					if b {
						yynn4000++
					}
				}
				r.EncodeMapStart(yynn4000)
				yynn4000 = 0
			}
			if yyr4000 || yy2arr4000 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4000[0] {
					yym4002 := z.EncBinary()
					_ = yym4002
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4000[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4003 := z.EncBinary()
					_ = yym4003
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4000 || yy2arr4000 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4000[1] {
					yym4005 := z.EncBinary()
					_ = yym4005
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4000[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4006 := z.EncBinary()
					_ = yym4006
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4000 || yy2arr4000 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4000[2] {
					yy4008 := &x.ObjectMeta
					yy4008.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4000[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4009 := &x.ObjectMeta
					yy4009.CodecEncodeSelf(e)
				}
			}
			if yyr4000 || yy2arr4000 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4000[3] {
					yy4011 := &x.Spec
					yy4011.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4000[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4012 := &x.Spec
					yy4012.CodecEncodeSelf(e)
				}
			}
			if yyr4000 || yy2arr4000 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4000[4] {
					yy4014 := &x.Status
					yy4014.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4000[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4015 := &x.Status
					yy4015.CodecEncodeSelf(e)
				}
			}
			if yyr4000 || yy2arr4000 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4016 := z.DecBinary()
	_ = yym4016
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4017 := r.ContainerType()
		if yyct4017 == codecSelferValueTypeMap1234 {
			yyl4017 := r.ReadMapStart()
			if yyl4017 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4017, d)
			}
		} else if yyct4017 == codecSelferValueTypeArray1234 {
			yyl4017 := r.ReadArrayStart()
			if yyl4017 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4017, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4018Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4018Slc
	var yyhl4018 bool = l >= 0
	for yyj4018 := 0; ; yyj4018++ {
		if yyhl4018 {
			if yyj4018 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4018Slc = r.DecodeBytes(yys4018Slc, true, true)
		yys4018 := string(yys4018Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4018 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4021 := &x.ObjectMeta
				yyv4021.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4022 := &x.Spec
				yyv4022.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4023 := &x.Status
				yyv4023.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4018)
		} // end switch yys4018
	} // end for yyj4018
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4024 int
	var yyb4024 bool
	var yyhl4024 bool = l >= 0
	yyj4024++
	if yyhl4024 {
		yyb4024 = yyj4024 > l
	} else {
		yyb4024 = r.CheckBreak()
	}
	if yyb4024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4024++
	if yyhl4024 {
		yyb4024 = yyj4024 > l
	} else {
		yyb4024 = r.CheckBreak()
	}
	if yyb4024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4024++
	if yyhl4024 {
		yyb4024 = yyj4024 > l
	} else {
		yyb4024 = r.CheckBreak()
	}
	if yyb4024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4027 := &x.ObjectMeta
		yyv4027.CodecDecodeSelf(d)
	}
	yyj4024++
	if yyhl4024 {
		yyb4024 = yyj4024 > l
	} else {
		yyb4024 = r.CheckBreak()
	}
	if yyb4024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4028 := &x.Spec
		yyv4028.CodecDecodeSelf(d)
	}
	yyj4024++
	if yyhl4024 {
		yyb4024 = yyj4024 > l
	} else {
		yyb4024 = r.CheckBreak()
	}
	if yyb4024 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4029 := &x.Status
		yyv4029.CodecDecodeSelf(d)
	}
	for {
		yyj4024++
		if yyhl4024 {
			yyb4024 = yyj4024 > l
		} else {
			yyb4024 = r.CheckBreak()
		}
		if yyb4024 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4024-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4030 := z.EncBinary()
		_ = yym4030
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4031 := !z.EncBinary()
			yy2arr4031 := z.EncBasicHandle().StructToArray
			var yyq4031 [4]bool
			_, _, _ = yysep4031, yyq4031, yy2arr4031
			const yyr4031 bool = false
			yyq4031[0] = x.Kind != ""
			yyq4031[1] = x.APIVersion != ""
			yyq4031[2] = true
			var yynn4031 int
			if yyr4031 || yy2arr4031 {
				r.EncodeArrayStart(4)
			} else {
				yynn4031 = 1
				for _, b := range yyq4031 {
					if b {
						yynn4031++
					}
				}
				r.EncodeMapStart(yynn4031)
				yynn4031 = 0
			}
			if yyr4031 || yy2arr4031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4031[0] {
					yym4033 := z.EncBinary()
					_ = yym4033
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4031[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4034 := z.EncBinary()
					_ = yym4034
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4031 || yy2arr4031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4031[1] {
					yym4036 := z.EncBinary()
					_ = yym4036
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4031[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4037 := z.EncBinary()
					_ = yym4037
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4031 || yy2arr4031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4031[2] {
					yy4039 := &x.ListMeta
					yym4040 := z.EncBinary()
					_ = yym4040
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4039) {
					} else {
						z.EncFallback(yy4039)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4031[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4041 := &x.ListMeta
					yym4042 := z.EncBinary()
					_ = yym4042
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4041) {
					} else {
						z.EncFallback(yy4041)
					}
				}
			}
			if yyr4031 || yy2arr4031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4044 := z.EncBinary()
					_ = yym4044
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4045 := z.EncBinary()
					_ = yym4045
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4031 || yy2arr4031 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4046 := z.DecBinary()
	_ = yym4046
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4047 := r.ContainerType()
		if yyct4047 == codecSelferValueTypeMap1234 {
			yyl4047 := r.ReadMapStart()
			if yyl4047 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4047, d)
			}
		} else if yyct4047 == codecSelferValueTypeArray1234 {
			yyl4047 := r.ReadArrayStart()
			if yyl4047 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4047, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4048Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4048Slc
	var yyhl4048 bool = l >= 0
	for yyj4048 := 0; ; yyj4048++ {
		if yyhl4048 {
			if yyj4048 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4048Slc = r.DecodeBytes(yys4048Slc, true, true)
		yys4048 := string(yys4048Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4048 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4051 := &x.ListMeta
				yym4052 := z.DecBinary()
				_ = yym4052
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4051) {
				} else {
					z.DecFallback(yyv4051, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4053 := &x.Items
				yym4054 := z.DecBinary()
				_ = yym4054
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4053), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4048)
		} // end switch yys4048
	} // end for yyj4048
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4055 int
	var yyb4055 bool
	var yyhl4055 bool = l >= 0
	yyj4055++
	if yyhl4055 {
		yyb4055 = yyj4055 > l
	} else {
		yyb4055 = r.CheckBreak()
	}
	if yyb4055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4055++
	if yyhl4055 {
		yyb4055 = yyj4055 > l
	} else {
		yyb4055 = r.CheckBreak()
	}
	if yyb4055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4055++
	if yyhl4055 {
		yyb4055 = yyj4055 > l
	} else {
		yyb4055 = r.CheckBreak()
	}
	if yyb4055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4058 := &x.ListMeta
		yym4059 := z.DecBinary()
		_ = yym4059
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4058) {
		} else {
			z.DecFallback(yyv4058, false)
		}
	}
	yyj4055++
	if yyhl4055 {
		yyb4055 = yyj4055 > l
	} else {
		yyb4055 = r.CheckBreak()
	}
	if yyb4055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4060 := &x.Items
		yym4061 := z.DecBinary()
		_ = yym4061
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4060), d)
		}
	}
	for {
		yyj4055++
		if yyhl4055 {
			yyb4055 = yyj4055 > l
		} else {
			yyb4055 = r.CheckBreak()
		}
		if yyb4055 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4055-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4062 := z.EncBinary()
		_ = yym4062
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4063 := !z.EncBinary()
			yy2arr4063 := z.EncBasicHandle().StructToArray
			var yyq4063 [6]bool
			_, _, _ = yysep4063, yyq4063, yy2arr4063
			const yyr4063 bool = false
			yyq4063[0] = x.Kind != ""
			yyq4063[1] = x.APIVersion != ""
			yyq4063[2] = true
			yyq4063[3] = len(x.Data) != 0
			yyq4063[4] = len(x.StringData) != 0
			yyq4063[5] = x.Type != ""
			var yynn4063 int
			if yyr4063 || yy2arr4063 {
				r.EncodeArrayStart(6)
			} else {
				yynn4063 = 0
				for _, b := range yyq4063 {
					if b {
						yynn4063++
					}
				}
				r.EncodeMapStart(yynn4063)
				yynn4063 = 0
			}
			if yyr4063 || yy2arr4063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4063[0] {
					yym4065 := z.EncBinary()
					_ = yym4065
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4063[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4066 := z.EncBinary()
					_ = yym4066
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4063 || yy2arr4063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4063[1] {
					yym4068 := z.EncBinary()
					_ = yym4068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4063[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4069 := z.EncBinary()
					_ = yym4069
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4063 || yy2arr4063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4063[2] {
					yy4071 := &x.ObjectMeta
					yy4071.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4063[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4072 := &x.ObjectMeta
					yy4072.CodecEncodeSelf(e)
				}
			}
			if yyr4063 || yy2arr4063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4063[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4074 := z.EncBinary()
						_ = yym4074
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4063[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4075 := z.EncBinary()
						_ = yym4075
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4063 || yy2arr4063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4063[4] {
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4077 := z.EncBinary()
						_ = yym4077
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4063[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stringData"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4078 := z.EncBinary()
						_ = yym4078
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				}
			}
			if yyr4063 || yy2arr4063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4063[5] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4063[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4063 || yy2arr4063 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4080 := z.DecBinary()
	_ = yym4080
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4081 := r.ContainerType()
		if yyct4081 == codecSelferValueTypeMap1234 {
			yyl4081 := r.ReadMapStart()
			if yyl4081 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4081, d)
			}
		} else if yyct4081 == codecSelferValueTypeArray1234 {
			yyl4081 := r.ReadArrayStart()
			if yyl4081 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4081, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4082Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4082Slc
	var yyhl4082 bool = l >= 0
	for yyj4082 := 0; ; yyj4082++ {
		if yyhl4082 {
			if yyj4082 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4082Slc = r.DecodeBytes(yys4082Slc, true, true)
		yys4082 := string(yys4082Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4082 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4085 := &x.ObjectMeta
				yyv4085.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4086 := &x.Data
				yym4087 := z.DecBinary()
				_ = yym4087
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4086), d)
				}
			}
		case "stringData":
			if r.TryDecodeAsNil() {
				x.StringData = nil
			} else {
				yyv4088 := &x.StringData
				yym4089 := z.DecBinary()
				_ = yym4089
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4088, false, d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4082)
		} // end switch yys4082
	} // end for yyj4082
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4091 int
	var yyb4091 bool
	var yyhl4091 bool = l >= 0
	yyj4091++
	if yyhl4091 {
		yyb4091 = yyj4091 > l
	} else {
		yyb4091 = r.CheckBreak()
	}
	if yyb4091 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4091++
	if yyhl4091 {
		yyb4091 = yyj4091 > l
	} else {
		yyb4091 = r.CheckBreak()
	}
	if yyb4091 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4091++
	if yyhl4091 {
		yyb4091 = yyj4091 > l
	} else {
		yyb4091 = r.CheckBreak()
	}
	if yyb4091 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4094 := &x.ObjectMeta
		yyv4094.CodecDecodeSelf(d)
	}
	yyj4091++
	if yyhl4091 {
		yyb4091 = yyj4091 > l
	} else {
		yyb4091 = r.CheckBreak()
	}
	if yyb4091 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4095 := &x.Data
		yym4096 := z.DecBinary()
		_ = yym4096
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4095), d)
		}
	}
	yyj4091++
	if yyhl4091 {
		yyb4091 = yyj4091 > l
	} else {
		yyb4091 = r.CheckBreak()
	}
	if yyb4091 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StringData = nil
	} else {
		yyv4097 := &x.StringData
		yym4098 := z.DecBinary()
		_ = yym4098
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4097, false, d)
		}
	}
	yyj4091++
	if yyhl4091 {
		yyb4091 = yyj4091 > l
	} else {
		yyb4091 = r.CheckBreak()
	}
	if yyb4091 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4091++
		if yyhl4091 {
			yyb4091 = yyj4091 > l
		} else {
			yyb4091 = r.CheckBreak()
		}
		if yyb4091 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4091-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4100 := z.EncBinary()
	_ = yym4100
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4101 := z.DecBinary()
	_ = yym4101
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4102 := z.EncBinary()
		_ = yym4102
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4103 := !z.EncBinary()
			yy2arr4103 := z.EncBasicHandle().StructToArray
			var yyq4103 [4]bool
			_, _, _ = yysep4103, yyq4103, yy2arr4103
			const yyr4103 bool = false
			yyq4103[0] = x.Kind != ""
			yyq4103[1] = x.APIVersion != ""
			yyq4103[2] = true
			var yynn4103 int
			if yyr4103 || yy2arr4103 {
				r.EncodeArrayStart(4)
			} else {
				yynn4103 = 1
				for _, b := range yyq4103 {
					if b {
						yynn4103++
					}
				}
				r.EncodeMapStart(yynn4103)
				yynn4103 = 0
			}
			if yyr4103 || yy2arr4103 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4103[0] {
					yym4105 := z.EncBinary()
					_ = yym4105
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4103[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4106 := z.EncBinary()
					_ = yym4106
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4103 || yy2arr4103 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4103[1] {
					yym4108 := z.EncBinary()
					_ = yym4108
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4103[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4109 := z.EncBinary()
					_ = yym4109
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4103 || yy2arr4103 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4103[2] {
					yy4111 := &x.ListMeta
					yym4112 := z.EncBinary()
					_ = yym4112
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4111) {
					} else {
						z.EncFallback(yy4111)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4103[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4113 := &x.ListMeta
					yym4114 := z.EncBinary()
					_ = yym4114
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4113) {
					} else {
						z.EncFallback(yy4113)
					}
				}
			}
			if yyr4103 || yy2arr4103 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4116 := z.EncBinary()
					_ = yym4116
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4117 := z.EncBinary()
					_ = yym4117
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4103 || yy2arr4103 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4118 := z.DecBinary()
	_ = yym4118
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4119 := r.ContainerType()
		if yyct4119 == codecSelferValueTypeMap1234 {
			yyl4119 := r.ReadMapStart()
			if yyl4119 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4119, d)
			}
		} else if yyct4119 == codecSelferValueTypeArray1234 {
			yyl4119 := r.ReadArrayStart()
			if yyl4119 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4119, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4120Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4120Slc
	var yyhl4120 bool = l >= 0
	for yyj4120 := 0; ; yyj4120++ {
		if yyhl4120 {
			if yyj4120 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4120Slc = r.DecodeBytes(yys4120Slc, true, true)
		yys4120 := string(yys4120Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4120 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4123 := &x.ListMeta
				yym4124 := z.DecBinary()
				_ = yym4124
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4123) {
				} else {
					z.DecFallback(yyv4123, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4125 := &x.Items
				yym4126 := z.DecBinary()
				_ = yym4126
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4125), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4120)
		} // end switch yys4120
	} // end for yyj4120
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4127 int
	var yyb4127 bool
	var yyhl4127 bool = l >= 0
	yyj4127++
	if yyhl4127 {
		yyb4127 = yyj4127 > l
	} else {
		yyb4127 = r.CheckBreak()
	}
	if yyb4127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4127++
	if yyhl4127 {
		yyb4127 = yyj4127 > l
	} else {
		yyb4127 = r.CheckBreak()
	}
	if yyb4127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4127++
	if yyhl4127 {
		yyb4127 = yyj4127 > l
	} else {
		yyb4127 = r.CheckBreak()
	}
	if yyb4127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4130 := &x.ListMeta
		yym4131 := z.DecBinary()
		_ = yym4131
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4130) {
		} else {
			z.DecFallback(yyv4130, false)
		}
	}
	yyj4127++
	if yyhl4127 {
		yyb4127 = yyj4127 > l
	} else {
		yyb4127 = r.CheckBreak()
	}
	if yyb4127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4132 := &x.Items
		yym4133 := z.DecBinary()
		_ = yym4133
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4132), d)
		}
	}
	for {
		yyj4127++
		if yyhl4127 {
			yyb4127 = yyj4127 > l
		} else {
			yyb4127 = r.CheckBreak()
		}
		if yyb4127 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4127-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4134 := z.EncBinary()
		_ = yym4134
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4135 := !z.EncBinary()
			yy2arr4135 := z.EncBasicHandle().StructToArray
			var yyq4135 [4]bool
			_, _, _ = yysep4135, yyq4135, yy2arr4135
			const yyr4135 bool = false
			yyq4135[0] = x.Kind != ""
			yyq4135[1] = x.APIVersion != ""
			yyq4135[2] = true
			yyq4135[3] = len(x.Data) != 0
			var yynn4135 int
			if yyr4135 || yy2arr4135 {
				r.EncodeArrayStart(4)
			} else {
				yynn4135 = 0
				for _, b := range yyq4135 {
					if b {
						yynn4135++
					}
				}
				r.EncodeMapStart(yynn4135)
				yynn4135 = 0
			}
			if yyr4135 || yy2arr4135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4135[0] {
					yym4137 := z.EncBinary()
					_ = yym4137
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4135[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4138 := z.EncBinary()
					_ = yym4138
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4135 || yy2arr4135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4135[1] {
					yym4140 := z.EncBinary()
					_ = yym4140
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4135[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4141 := z.EncBinary()
					_ = yym4141
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4135 || yy2arr4135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4135[2] {
					yy4143 := &x.ObjectMeta
					yy4143.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4135[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4144 := &x.ObjectMeta
					yy4144.CodecEncodeSelf(e)
				}
			}
			if yyr4135 || yy2arr4135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4135[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4146 := z.EncBinary()
						_ = yym4146
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4135[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4147 := z.EncBinary()
						_ = yym4147
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4135 || yy2arr4135 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4148 := z.DecBinary()
	_ = yym4148
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4149 := r.ContainerType()
		if yyct4149 == codecSelferValueTypeMap1234 {
			yyl4149 := r.ReadMapStart()
			if yyl4149 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4149, d)
			}
		} else if yyct4149 == codecSelferValueTypeArray1234 {
			yyl4149 := r.ReadArrayStart()
			if yyl4149 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4149, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4150Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4150Slc
	var yyhl4150 bool = l >= 0
	for yyj4150 := 0; ; yyj4150++ {
		if yyhl4150 {
			if yyj4150 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4150Slc = r.DecodeBytes(yys4150Slc, true, true)
		yys4150 := string(yys4150Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4150 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4153 := &x.ObjectMeta
				yyv4153.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4154 := &x.Data
				yym4155 := z.DecBinary()
				_ = yym4155
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4154, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4150)
		} // end switch yys4150
	} // end for yyj4150
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4156 int
	var yyb4156 bool
	var yyhl4156 bool = l >= 0
	yyj4156++
	if yyhl4156 {
		yyb4156 = yyj4156 > l
	} else {
		yyb4156 = r.CheckBreak()
	}
	if yyb4156 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4156++
	if yyhl4156 {
		yyb4156 = yyj4156 > l
	} else {
		yyb4156 = r.CheckBreak()
	}
	if yyb4156 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4156++
	if yyhl4156 {
		yyb4156 = yyj4156 > l
	} else {
		yyb4156 = r.CheckBreak()
	}
	if yyb4156 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4159 := &x.ObjectMeta
		yyv4159.CodecDecodeSelf(d)
	}
	yyj4156++
	if yyhl4156 {
		yyb4156 = yyj4156 > l
	} else {
		yyb4156 = r.CheckBreak()
	}
	if yyb4156 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4160 := &x.Data
		yym4161 := z.DecBinary()
		_ = yym4161
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4160, false, d)
		}
	}
	for {
		yyj4156++
		if yyhl4156 {
			yyb4156 = yyj4156 > l
		} else {
			yyb4156 = r.CheckBreak()
		}
		if yyb4156 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4156-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4162 := z.EncBinary()
		_ = yym4162
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4163 := !z.EncBinary()
			yy2arr4163 := z.EncBasicHandle().StructToArray
			var yyq4163 [4]bool
			_, _, _ = yysep4163, yyq4163, yy2arr4163
			const yyr4163 bool = false
			yyq4163[0] = x.Kind != ""
			yyq4163[1] = x.APIVersion != ""
			yyq4163[2] = true
			var yynn4163 int
			if yyr4163 || yy2arr4163 {
				r.EncodeArrayStart(4)
			} else {
				yynn4163 = 1
				for _, b := range yyq4163 {
					if b {
						yynn4163++
					}
				}
				r.EncodeMapStart(yynn4163)
				yynn4163 = 0
			}
			if yyr4163 || yy2arr4163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4163[0] {
					yym4165 := z.EncBinary()
					_ = yym4165
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4163[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4166 := z.EncBinary()
					_ = yym4166
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4163 || yy2arr4163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4163[1] {
					yym4168 := z.EncBinary()
					_ = yym4168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4163[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4169 := z.EncBinary()
					_ = yym4169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4163 || yy2arr4163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4163[2] {
					yy4171 := &x.ListMeta
					yym4172 := z.EncBinary()
					_ = yym4172
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4171) {
					} else {
						z.EncFallback(yy4171)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4163[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4173 := &x.ListMeta
					yym4174 := z.EncBinary()
					_ = yym4174
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4173) {
					} else {
						z.EncFallback(yy4173)
					}
				}
			}
			if yyr4163 || yy2arr4163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4176 := z.EncBinary()
					_ = yym4176
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4177 := z.EncBinary()
					_ = yym4177
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4163 || yy2arr4163 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4178 := z.DecBinary()
	_ = yym4178
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4179 := r.ContainerType()
		if yyct4179 == codecSelferValueTypeMap1234 {
			yyl4179 := r.ReadMapStart()
			if yyl4179 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4179, d)
			}
		} else if yyct4179 == codecSelferValueTypeArray1234 {
			yyl4179 := r.ReadArrayStart()
			if yyl4179 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4179, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4180Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4180Slc
	var yyhl4180 bool = l >= 0
	for yyj4180 := 0; ; yyj4180++ {
		if yyhl4180 {
			if yyj4180 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4180Slc = r.DecodeBytes(yys4180Slc, true, true)
		yys4180 := string(yys4180Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4180 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4183 := &x.ListMeta
				yym4184 := z.DecBinary()
				_ = yym4184
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4183) {
				} else {
					z.DecFallback(yyv4183, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4185 := &x.Items
				yym4186 := z.DecBinary()
				_ = yym4186
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4185), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4180)
		} // end switch yys4180
	} // end for yyj4180
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4187 int
	var yyb4187 bool
	var yyhl4187 bool = l >= 0
	yyj4187++
	if yyhl4187 {
		yyb4187 = yyj4187 > l
	} else {
		yyb4187 = r.CheckBreak()
	}
	if yyb4187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4187++
	if yyhl4187 {
		yyb4187 = yyj4187 > l
	} else {
		yyb4187 = r.CheckBreak()
	}
	if yyb4187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4187++
	if yyhl4187 {
		yyb4187 = yyj4187 > l
	} else {
		yyb4187 = r.CheckBreak()
	}
	if yyb4187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4190 := &x.ListMeta
		yym4191 := z.DecBinary()
		_ = yym4191
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4190) {
		} else {
			z.DecFallback(yyv4190, false)
		}
	}
	yyj4187++
	if yyhl4187 {
		yyb4187 = yyj4187 > l
	} else {
		yyb4187 = r.CheckBreak()
	}
	if yyb4187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4192 := &x.Items
		yym4193 := z.DecBinary()
		_ = yym4193
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4192), d)
		}
	}
	for {
		yyj4187++
		if yyhl4187 {
			yyb4187 = yyj4187 > l
		} else {
			yyb4187 = r.CheckBreak()
		}
		if yyb4187 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4187-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4194 := z.EncBinary()
	_ = yym4194
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4195 := z.DecBinary()
	_ = yym4195
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4196 := z.EncBinary()
		_ = yym4196
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4197 := !z.EncBinary()
			yy2arr4197 := z.EncBasicHandle().StructToArray
			var yyq4197 [4]bool
			_, _, _ = yysep4197, yyq4197, yy2arr4197
			const yyr4197 bool = false
			yyq4197[2] = x.Message != ""
			yyq4197[3] = x.Error != ""
			var yynn4197 int
			if yyr4197 || yy2arr4197 {
				r.EncodeArrayStart(4)
			} else {
				yynn4197 = 2
				for _, b := range yyq4197 {
					if b {
						yynn4197++
					}
				}
				r.EncodeMapStart(yynn4197)
				yynn4197 = 0
			}
			if yyr4197 || yy2arr4197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4197 || yy2arr4197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4197 || yy2arr4197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4197[2] {
					yym4201 := z.EncBinary()
					_ = yym4201
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4197[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4202 := z.EncBinary()
					_ = yym4202
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4197 || yy2arr4197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4197[3] {
					yym4204 := z.EncBinary()
					_ = yym4204
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4197[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4205 := z.EncBinary()
					_ = yym4205
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4197 || yy2arr4197 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4206 := z.DecBinary()
	_ = yym4206
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4207 := r.ContainerType()
		if yyct4207 == codecSelferValueTypeMap1234 {
			yyl4207 := r.ReadMapStart()
			if yyl4207 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4207, d)
			}
		} else if yyct4207 == codecSelferValueTypeArray1234 {
			yyl4207 := r.ReadArrayStart()
			if yyl4207 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4207, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4208Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4208Slc
	var yyhl4208 bool = l >= 0
	for yyj4208 := 0; ; yyj4208++ {
		if yyhl4208 {
			if yyj4208 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4208Slc = r.DecodeBytes(yys4208Slc, true, true)
		yys4208 := string(yys4208Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4208 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4208)
		} // end switch yys4208
	} // end for yyj4208
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4213 int
	var yyb4213 bool
	var yyhl4213 bool = l >= 0
	yyj4213++
	if yyhl4213 {
		yyb4213 = yyj4213 > l
	} else {
		yyb4213 = r.CheckBreak()
	}
	if yyb4213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4213++
	if yyhl4213 {
		yyb4213 = yyj4213 > l
	} else {
		yyb4213 = r.CheckBreak()
	}
	if yyb4213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4213++
	if yyhl4213 {
		yyb4213 = yyj4213 > l
	} else {
		yyb4213 = r.CheckBreak()
	}
	if yyb4213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4213++
	if yyhl4213 {
		yyb4213 = yyj4213 > l
	} else {
		yyb4213 = r.CheckBreak()
	}
	if yyb4213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4213++
		if yyhl4213 {
			yyb4213 = yyj4213 > l
		} else {
			yyb4213 = r.CheckBreak()
		}
		if yyb4213 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4213-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4218 := z.EncBinary()
		_ = yym4218
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4219 := !z.EncBinary()
			yy2arr4219 := z.EncBasicHandle().StructToArray
			var yyq4219 [4]bool
			_, _, _ = yysep4219, yyq4219, yy2arr4219
			const yyr4219 bool = false
			yyq4219[0] = x.Kind != ""
			yyq4219[1] = x.APIVersion != ""
			yyq4219[2] = true
			yyq4219[3] = len(x.Conditions) != 0
			var yynn4219 int
			if yyr4219 || yy2arr4219 {
				r.EncodeArrayStart(4)
			} else {
				yynn4219 = 0
				for _, b := range yyq4219 {
					if b {
						yynn4219++
					}
				}
				r.EncodeMapStart(yynn4219)
				yynn4219 = 0
			}
			if yyr4219 || yy2arr4219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4219[0] {
					yym4221 := z.EncBinary()
					_ = yym4221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4219[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4222 := z.EncBinary()
					_ = yym4222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4219 || yy2arr4219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4219[1] {
					yym4224 := z.EncBinary()
					_ = yym4224
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4219[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4225 := z.EncBinary()
					_ = yym4225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4219 || yy2arr4219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4219[2] {
					yy4227 := &x.ObjectMeta
					yy4227.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4219[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4228 := &x.ObjectMeta
					yy4228.CodecEncodeSelf(e)
				}
			}
			if yyr4219 || yy2arr4219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4219[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4230 := z.EncBinary()
						_ = yym4230
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4219[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4231 := z.EncBinary()
						_ = yym4231
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4219 || yy2arr4219 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4232 := z.DecBinary()
	_ = yym4232
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4233 := r.ContainerType()
		if yyct4233 == codecSelferValueTypeMap1234 {
			yyl4233 := r.ReadMapStart()
			if yyl4233 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4233, d)
			}
		} else if yyct4233 == codecSelferValueTypeArray1234 {
			yyl4233 := r.ReadArrayStart()
			if yyl4233 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4233, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4234Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4234Slc
	var yyhl4234 bool = l >= 0
	for yyj4234 := 0; ; yyj4234++ {
		if yyhl4234 {
			if yyj4234 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4234Slc = r.DecodeBytes(yys4234Slc, true, true)
		yys4234 := string(yys4234Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4234 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4237 := &x.ObjectMeta
				yyv4237.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4238 := &x.Conditions
				yym4239 := z.DecBinary()
				_ = yym4239
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4238), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4234)
		} // end switch yys4234
	} // end for yyj4234
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4240 int
	var yyb4240 bool
	var yyhl4240 bool = l >= 0
	yyj4240++
	if yyhl4240 {
		yyb4240 = yyj4240 > l
	} else {
		yyb4240 = r.CheckBreak()
	}
	if yyb4240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4240++
	if yyhl4240 {
		yyb4240 = yyj4240 > l
	} else {
		yyb4240 = r.CheckBreak()
	}
	if yyb4240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4240++
	if yyhl4240 {
		yyb4240 = yyj4240 > l
	} else {
		yyb4240 = r.CheckBreak()
	}
	if yyb4240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4243 := &x.ObjectMeta
		yyv4243.CodecDecodeSelf(d)
	}
	yyj4240++
	if yyhl4240 {
		yyb4240 = yyj4240 > l
	} else {
		yyb4240 = r.CheckBreak()
	}
	if yyb4240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4244 := &x.Conditions
		yym4245 := z.DecBinary()
		_ = yym4245
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4244), d)
		}
	}
	for {
		yyj4240++
		if yyhl4240 {
			yyb4240 = yyj4240 > l
		} else {
			yyb4240 = r.CheckBreak()
		}
		if yyb4240 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4240-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4246 := z.EncBinary()
		_ = yym4246
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4247 := !z.EncBinary()
			yy2arr4247 := z.EncBasicHandle().StructToArray
			var yyq4247 [4]bool
			_, _, _ = yysep4247, yyq4247, yy2arr4247
			const yyr4247 bool = false
			yyq4247[0] = x.Kind != ""
			yyq4247[1] = x.APIVersion != ""
			yyq4247[2] = true
			var yynn4247 int
			if yyr4247 || yy2arr4247 {
				r.EncodeArrayStart(4)
			} else {
				yynn4247 = 1
				for _, b := range yyq4247 {
					if b {
						yynn4247++
					}
				}
				r.EncodeMapStart(yynn4247)
				yynn4247 = 0
			}
			if yyr4247 || yy2arr4247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4247[0] {
					yym4249 := z.EncBinary()
					_ = yym4249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4247[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4250 := z.EncBinary()
					_ = yym4250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4247 || yy2arr4247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4247[1] {
					yym4252 := z.EncBinary()
					_ = yym4252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4247[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4253 := z.EncBinary()
					_ = yym4253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4247 || yy2arr4247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4247[2] {
					yy4255 := &x.ListMeta
					yym4256 := z.EncBinary()
					_ = yym4256
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4255) {
					} else {
						z.EncFallback(yy4255)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4247[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4257 := &x.ListMeta
					yym4258 := z.EncBinary()
					_ = yym4258
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4257) {
					} else {
						z.EncFallback(yy4257)
					}
				}
			}
			if yyr4247 || yy2arr4247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4260 := z.EncBinary()
					_ = yym4260
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4261 := z.EncBinary()
					_ = yym4261
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4247 || yy2arr4247 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4262 := z.DecBinary()
	_ = yym4262
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4263 := r.ContainerType()
		if yyct4263 == codecSelferValueTypeMap1234 {
			yyl4263 := r.ReadMapStart()
			if yyl4263 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4263, d)
			}
		} else if yyct4263 == codecSelferValueTypeArray1234 {
			yyl4263 := r.ReadArrayStart()
			if yyl4263 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4263, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4264Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4264Slc
	var yyhl4264 bool = l >= 0
	for yyj4264 := 0; ; yyj4264++ {
		if yyhl4264 {
			if yyj4264 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4264Slc = r.DecodeBytes(yys4264Slc, true, true)
		yys4264 := string(yys4264Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4264 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4267 := &x.ListMeta
				yym4268 := z.DecBinary()
				_ = yym4268
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4267) {
				} else {
					z.DecFallback(yyv4267, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4269 := &x.Items
				yym4270 := z.DecBinary()
				_ = yym4270
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4269), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4264)
		} // end switch yys4264
	} // end for yyj4264
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4271 int
	var yyb4271 bool
	var yyhl4271 bool = l >= 0
	yyj4271++
	if yyhl4271 {
		yyb4271 = yyj4271 > l
	} else {
		yyb4271 = r.CheckBreak()
	}
	if yyb4271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4271++
	if yyhl4271 {
		yyb4271 = yyj4271 > l
	} else {
		yyb4271 = r.CheckBreak()
	}
	if yyb4271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4271++
	if yyhl4271 {
		yyb4271 = yyj4271 > l
	} else {
		yyb4271 = r.CheckBreak()
	}
	if yyb4271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4274 := &x.ListMeta
		yym4275 := z.DecBinary()
		_ = yym4275
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4274) {
		} else {
			z.DecFallback(yyv4274, false)
		}
	}
	yyj4271++
	if yyhl4271 {
		yyb4271 = yyj4271 > l
	} else {
		yyb4271 = r.CheckBreak()
	}
	if yyb4271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4276 := &x.Items
		yym4277 := z.DecBinary()
		_ = yym4277
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4276), d)
		}
	}
	for {
		yyj4271++
		if yyhl4271 {
			yyb4271 = yyj4271 > l
		} else {
			yyb4271 = r.CheckBreak()
		}
		if yyb4271 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4271-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4278 := z.EncBinary()
		_ = yym4278
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4279 := !z.EncBinary()
			yy2arr4279 := z.EncBasicHandle().StructToArray
			var yyq4279 [1]bool
			_, _, _ = yysep4279, yyq4279, yy2arr4279
			const yyr4279 bool = false
			yyq4279[0] = len(x.Items) != 0
			var yynn4279 int
			if yyr4279 || yy2arr4279 {
				r.EncodeArrayStart(1)
			} else {
				yynn4279 = 0
				for _, b := range yyq4279 {
					if b {
						yynn4279++
					}
				}
				r.EncodeMapStart(yynn4279)
				yynn4279 = 0
			}
			if yyr4279 || yy2arr4279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4279[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4281 := z.EncBinary()
						_ = yym4281
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4279[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4282 := z.EncBinary()
						_ = yym4282
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr4279 || yy2arr4279 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4283 := z.DecBinary()
	_ = yym4283
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4284 := r.ContainerType()
		if yyct4284 == codecSelferValueTypeMap1234 {
			yyl4284 := r.ReadMapStart()
			if yyl4284 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4284, d)
			}
		} else if yyct4284 == codecSelferValueTypeArray1234 {
			yyl4284 := r.ReadArrayStart()
			if yyl4284 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4284, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4285Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4285Slc
	var yyhl4285 bool = l >= 0
	for yyj4285 := 0; ; yyj4285++ {
		if yyhl4285 {
			if yyj4285 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4285Slc = r.DecodeBytes(yys4285Slc, true, true)
		yys4285 := string(yys4285Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4285 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4286 := &x.Items
				yym4287 := z.DecBinary()
				_ = yym4287
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4286), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4285)
		} // end switch yys4285
	} // end for yyj4285
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4288 int
	var yyb4288 bool
	var yyhl4288 bool = l >= 0
	yyj4288++
	if yyhl4288 {
		yyb4288 = yyj4288 > l
	} else {
		yyb4288 = r.CheckBreak()
	}
	if yyb4288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4289 := &x.Items
		yym4290 := z.DecBinary()
		_ = yym4290
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4289), d)
		}
	}
	for {
		yyj4288++
		if yyhl4288 {
			yyb4288 = yyj4288 > l
		} else {
			yyb4288 = r.CheckBreak()
		}
		if yyb4288 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4288-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4291 := z.EncBinary()
		_ = yym4291
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4292 := !z.EncBinary()
			yy2arr4292 := z.EncBasicHandle().StructToArray
			var yyq4292 [3]bool
			_, _, _ = yysep4292, yyq4292, yy2arr4292
			const yyr4292 bool = false
			yyq4292[1] = x.FieldRef != nil
			yyq4292[2] = x.ResourceFieldRef != nil
			var yynn4292 int
			if yyr4292 || yy2arr4292 {
				r.EncodeArrayStart(3)
			} else {
				yynn4292 = 1
				for _, b := range yyq4292 {
					if b {
						yynn4292++
					}
				}
				r.EncodeMapStart(yynn4292)
				yynn4292 = 0
			}
			if yyr4292 || yy2arr4292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4294 := z.EncBinary()
				_ = yym4294
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4295 := z.EncBinary()
				_ = yym4295
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr4292 || yy2arr4292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4292[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4292[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4292 || yy2arr4292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4292[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4292[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4292 || yy2arr4292 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4298 := z.DecBinary()
	_ = yym4298
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4299 := r.ContainerType()
		if yyct4299 == codecSelferValueTypeMap1234 {
			yyl4299 := r.ReadMapStart()
			if yyl4299 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4299, d)
			}
		} else if yyct4299 == codecSelferValueTypeArray1234 {
			yyl4299 := r.ReadArrayStart()
			if yyl4299 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4299, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4300Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4300Slc
	var yyhl4300 bool = l >= 0
	for yyj4300 := 0; ; yyj4300++ {
		if yyhl4300 {
			if yyj4300 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4300Slc = r.DecodeBytes(yys4300Slc, true, true)
		yys4300 := string(yys4300Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4300 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4300)
		} // end switch yys4300
	} // end for yyj4300
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4304 int
	var yyb4304 bool
	var yyhl4304 bool = l >= 0
	yyj4304++
	if yyhl4304 {
		yyb4304 = yyj4304 > l
	} else {
		yyb4304 = r.CheckBreak()
	}
	if yyb4304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj4304++
	if yyhl4304 {
		yyb4304 = yyj4304 > l
	} else {
		yyb4304 = r.CheckBreak()
	}
	if yyb4304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj4304++
	if yyhl4304 {
		yyb4304 = yyj4304 > l
	} else {
		yyb4304 = r.CheckBreak()
	}
	if yyb4304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj4304++
		if yyhl4304 {
			yyb4304 = yyj4304 > l
		} else {
			yyb4304 = r.CheckBreak()
		}
		if yyb4304 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4304-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4308 := z.EncBinary()
		_ = yym4308
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4309 := !z.EncBinary()
			yy2arr4309 := z.EncBasicHandle().StructToArray
			var yyq4309 [6]bool
			_, _, _ = yysep4309, yyq4309, yy2arr4309
			const yyr4309 bool = false
			yyq4309[0] = x.Capabilities != nil
			yyq4309[1] = x.Privileged != nil
			yyq4309[2] = x.SELinuxOptions != nil
			yyq4309[3] = x.RunAsUser != nil
			yyq4309[4] = x.RunAsNonRoot != nil
			yyq4309[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4309 int
			if yyr4309 || yy2arr4309 {
				r.EncodeArrayStart(6)
			} else {
				yynn4309 = 0
				for _, b := range yyq4309 {
					if b {
						yynn4309++
					}
				}
				r.EncodeMapStart(yynn4309)
				yynn4309 = 0
			}
			if yyr4309 || yy2arr4309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4309[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4309[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4309 || yy2arr4309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4309[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4312 := *x.Privileged
						yym4313 := z.EncBinary()
						_ = yym4313
						if false {
						} else {
							r.EncodeBool(bool(yy4312))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4309[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4314 := *x.Privileged
						yym4315 := z.EncBinary()
						_ = yym4315
						if false {
						} else {
							r.EncodeBool(bool(yy4314))
						}
					}
				}
			}
			if yyr4309 || yy2arr4309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4309[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4309[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4309 || yy2arr4309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4309[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4318 := *x.RunAsUser
						yym4319 := z.EncBinary()
						_ = yym4319
						if false {
						} else {
							r.EncodeInt(int64(yy4318))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4309[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4320 := *x.RunAsUser
						yym4321 := z.EncBinary()
						_ = yym4321
						if false {
						} else {
							r.EncodeInt(int64(yy4320))
						}
					}
				}
			}
			if yyr4309 || yy2arr4309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4309[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4323 := *x.RunAsNonRoot
						yym4324 := z.EncBinary()
						_ = yym4324
						if false {
						} else {
							r.EncodeBool(bool(yy4323))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4309[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4325 := *x.RunAsNonRoot
						yym4326 := z.EncBinary()
						_ = yym4326
						if false {
						} else {
							r.EncodeBool(bool(yy4325))
						}
					}
				}
			}
			if yyr4309 || yy2arr4309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4309[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4328 := *x.ReadOnlyRootFilesystem
						yym4329 := z.EncBinary()
						_ = yym4329
						if false {
						} else {
							r.EncodeBool(bool(yy4328))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4309[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4330 := *x.ReadOnlyRootFilesystem
						yym4331 := z.EncBinary()
						_ = yym4331
						if false {
						} else {
							r.EncodeBool(bool(yy4330))
						}
					}
				}
			}
			if yyr4309 || yy2arr4309 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4332 := z.DecBinary()
	_ = yym4332
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4333 := r.ContainerType()
		if yyct4333 == codecSelferValueTypeMap1234 {
			yyl4333 := r.ReadMapStart()
			if yyl4333 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4333, d)
			}
		} else if yyct4333 == codecSelferValueTypeArray1234 {
			yyl4333 := r.ReadArrayStart()
			if yyl4333 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4333, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4334Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4334Slc
	var yyhl4334 bool = l >= 0
	for yyj4334 := 0; ; yyj4334++ {
		if yyhl4334 {
			if yyj4334 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4334Slc = r.DecodeBytes(yys4334Slc, true, true)
		yys4334 := string(yys4334Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4334 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4337 := z.DecBinary()
				_ = yym4337
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4340 := z.DecBinary()
				_ = yym4340
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4342 := z.DecBinary()
				_ = yym4342
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4344 := z.DecBinary()
				_ = yym4344
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4334)
		} // end switch yys4334
	} // end for yyj4334
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4345 int
	var yyb4345 bool
	var yyhl4345 bool = l >= 0
	yyj4345++
	if yyhl4345 {
		yyb4345 = yyj4345 > l
	} else {
		yyb4345 = r.CheckBreak()
	}
	if yyb4345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4345++
	if yyhl4345 {
		yyb4345 = yyj4345 > l
	} else {
		yyb4345 = r.CheckBreak()
	}
	if yyb4345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4348 := z.DecBinary()
		_ = yym4348
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4345++
	if yyhl4345 {
		yyb4345 = yyj4345 > l
	} else {
		yyb4345 = r.CheckBreak()
	}
	if yyb4345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4345++
	if yyhl4345 {
		yyb4345 = yyj4345 > l
	} else {
		yyb4345 = r.CheckBreak()
	}
	if yyb4345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4351 := z.DecBinary()
		_ = yym4351
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4345++
	if yyhl4345 {
		yyb4345 = yyj4345 > l
	} else {
		yyb4345 = r.CheckBreak()
	}
	if yyb4345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4353 := z.DecBinary()
		_ = yym4353
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4345++
	if yyhl4345 {
		yyb4345 = yyj4345 > l
	} else {
		yyb4345 = r.CheckBreak()
	}
	if yyb4345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4355 := z.DecBinary()
		_ = yym4355
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4345++
		if yyhl4345 {
			yyb4345 = yyj4345 > l
		} else {
			yyb4345 = r.CheckBreak()
		}
		if yyb4345 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4345-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4356 := z.EncBinary()
		_ = yym4356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4357 := !z.EncBinary()
			yy2arr4357 := z.EncBasicHandle().StructToArray
			var yyq4357 [4]bool
			_, _, _ = yysep4357, yyq4357, yy2arr4357
			const yyr4357 bool = false
			yyq4357[0] = x.User != ""
			yyq4357[1] = x.Role != ""
			yyq4357[2] = x.Type != ""
			yyq4357[3] = x.Level != ""
			var yynn4357 int
			if yyr4357 || yy2arr4357 {
				r.EncodeArrayStart(4)
			} else {
				yynn4357 = 0
				for _, b := range yyq4357 {
					if b {
						yynn4357++
					}
				}
				r.EncodeMapStart(yynn4357)
				yynn4357 = 0
			}
			if yyr4357 || yy2arr4357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4357[0] {
					yym4359 := z.EncBinary()
					_ = yym4359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4357[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4360 := z.EncBinary()
					_ = yym4360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4357 || yy2arr4357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4357[1] {
					yym4362 := z.EncBinary()
					_ = yym4362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4357[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4363 := z.EncBinary()
					_ = yym4363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4357 || yy2arr4357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4357[2] {
					yym4365 := z.EncBinary()
					_ = yym4365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4357[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4366 := z.EncBinary()
					_ = yym4366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4357 || yy2arr4357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4357[3] {
					yym4368 := z.EncBinary()
					_ = yym4368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4357[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4369 := z.EncBinary()
					_ = yym4369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4357 || yy2arr4357 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4370 := z.DecBinary()
	_ = yym4370
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4371 := r.ContainerType()
		if yyct4371 == codecSelferValueTypeMap1234 {
			yyl4371 := r.ReadMapStart()
			if yyl4371 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4371, d)
			}
		} else if yyct4371 == codecSelferValueTypeArray1234 {
			yyl4371 := r.ReadArrayStart()
			if yyl4371 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4371, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4372Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4372Slc
	var yyhl4372 bool = l >= 0
	for yyj4372 := 0; ; yyj4372++ {
		if yyhl4372 {
			if yyj4372 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4372Slc = r.DecodeBytes(yys4372Slc, true, true)
		yys4372 := string(yys4372Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4372 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4372)
		} // end switch yys4372
	} // end for yyj4372
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4377 int
	var yyb4377 bool
	var yyhl4377 bool = l >= 0
	yyj4377++
	if yyhl4377 {
		yyb4377 = yyj4377 > l
	} else {
		yyb4377 = r.CheckBreak()
	}
	if yyb4377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4377++
	if yyhl4377 {
		yyb4377 = yyj4377 > l
	} else {
		yyb4377 = r.CheckBreak()
	}
	if yyb4377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4377++
	if yyhl4377 {
		yyb4377 = yyj4377 > l
	} else {
		yyb4377 = r.CheckBreak()
	}
	if yyb4377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4377++
	if yyhl4377 {
		yyb4377 = yyj4377 > l
	} else {
		yyb4377 = r.CheckBreak()
	}
	if yyb4377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4377++
		if yyhl4377 {
			yyb4377 = yyj4377 > l
		} else {
			yyb4377 = r.CheckBreak()
		}
		if yyb4377 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4377-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4382 := z.EncBinary()
		_ = yym4382
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4383 := !z.EncBinary()
			yy2arr4383 := z.EncBasicHandle().StructToArray
			var yyq4383 [5]bool
			_, _, _ = yysep4383, yyq4383, yy2arr4383
			const yyr4383 bool = false
			yyq4383[0] = x.Kind != ""
			yyq4383[1] = x.APIVersion != ""
			yyq4383[2] = true
			var yynn4383 int
			if yyr4383 || yy2arr4383 {
				r.EncodeArrayStart(5)
			} else {
				yynn4383 = 2
				for _, b := range yyq4383 {
					if b {
						yynn4383++
					}
				}
				r.EncodeMapStart(yynn4383)
				yynn4383 = 0
			}
			if yyr4383 || yy2arr4383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4383[0] {
					yym4385 := z.EncBinary()
					_ = yym4385
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4383[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4386 := z.EncBinary()
					_ = yym4386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4383 || yy2arr4383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4383[1] {
					yym4388 := z.EncBinary()
					_ = yym4388
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4383[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4389 := z.EncBinary()
					_ = yym4389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4383 || yy2arr4383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4383[2] {
					yy4391 := &x.ObjectMeta
					yy4391.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4383[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4392 := &x.ObjectMeta
					yy4392.CodecEncodeSelf(e)
				}
			}
			if yyr4383 || yy2arr4383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4394 := z.EncBinary()
				_ = yym4394
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4395 := z.EncBinary()
				_ = yym4395
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4383 || yy2arr4383 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4397 := z.EncBinary()
					_ = yym4397
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4398 := z.EncBinary()
					_ = yym4398
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4383 || yy2arr4383 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4399 := z.DecBinary()
	_ = yym4399
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4400 := r.ContainerType()
		if yyct4400 == codecSelferValueTypeMap1234 {
			yyl4400 := r.ReadMapStart()
			if yyl4400 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4400, d)
			}
		} else if yyct4400 == codecSelferValueTypeArray1234 {
			yyl4400 := r.ReadArrayStart()
			if yyl4400 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4400, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4401Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4401Slc
	var yyhl4401 bool = l >= 0
	for yyj4401 := 0; ; yyj4401++ {
		if yyhl4401 {
			if yyj4401 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4401Slc = r.DecodeBytes(yys4401Slc, true, true)
		yys4401 := string(yys4401Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4401 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4404 := &x.ObjectMeta
				yyv4404.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4406 := &x.Data
				yym4407 := z.DecBinary()
				_ = yym4407
				if false {
				} else {
					*yyv4406 = r.DecodeBytes(*(*[]byte)(yyv4406), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4401)
		} // end switch yys4401
	} // end for yyj4401
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4408 int
	var yyb4408 bool
	var yyhl4408 bool = l >= 0
	yyj4408++
	if yyhl4408 {
		yyb4408 = yyj4408 > l
	} else {
		yyb4408 = r.CheckBreak()
	}
	if yyb4408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4408++
	if yyhl4408 {
		yyb4408 = yyj4408 > l
	} else {
		yyb4408 = r.CheckBreak()
	}
	if yyb4408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4408++
	if yyhl4408 {
		yyb4408 = yyj4408 > l
	} else {
		yyb4408 = r.CheckBreak()
	}
	if yyb4408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4411 := &x.ObjectMeta
		yyv4411.CodecDecodeSelf(d)
	}
	yyj4408++
	if yyhl4408 {
		yyb4408 = yyj4408 > l
	} else {
		yyb4408 = r.CheckBreak()
	}
	if yyb4408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4408++
	if yyhl4408 {
		yyb4408 = yyj4408 > l
	} else {
		yyb4408 = r.CheckBreak()
	}
	if yyb4408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4413 := &x.Data
		yym4414 := z.DecBinary()
		_ = yym4414
		if false {
		} else {
			*yyv4413 = r.DecodeBytes(*(*[]byte)(yyv4413), false, false)
		}
	}
	for {
		yyj4408++
		if yyhl4408 {
			yyb4408 = yyj4408 > l
		} else {
			yyb4408 = r.CheckBreak()
		}
		if yyb4408 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4408-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4415 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4416 := &yyv4415
		yy4416.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4417 := *v
	yyh4417, yyl4417 := z.DecSliceHelperStart()
	var yyc4417 bool
	if yyl4417 == 0 {
		if yyv4417 == nil {
			yyv4417 = []OwnerReference{}
			yyc4417 = true
		} else if len(yyv4417) != 0 {
			yyv4417 = yyv4417[:0]
			yyc4417 = true
		}
	} else if yyl4417 > 0 {
		var yyrr4417, yyrl4417 int
		var yyrt4417 bool
		if yyl4417 > cap(yyv4417) {

			yyrg4417 := len(yyv4417) > 0
			yyv24417 := yyv4417
			yyrl4417, yyrt4417 = z.DecInferLen(yyl4417, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4417 {
				if yyrl4417 <= cap(yyv4417) {
					yyv4417 = yyv4417[:yyrl4417]
				} else {
					yyv4417 = make([]OwnerReference, yyrl4417)
				}
			} else {
				yyv4417 = make([]OwnerReference, yyrl4417)
			}
			yyc4417 = true
			yyrr4417 = len(yyv4417)
			if yyrg4417 {
				copy(yyv4417, yyv24417)
			}
		} else if yyl4417 != len(yyv4417) {
			yyv4417 = yyv4417[:yyl4417]
			yyc4417 = true
		}
		yyj4417 := 0
		for ; yyj4417 < yyrr4417; yyj4417++ {
			yyh4417.ElemContainerState(yyj4417)
			if r.TryDecodeAsNil() {
				yyv4417[yyj4417] = OwnerReference{}
			} else {
				yyv4418 := &yyv4417[yyj4417]
				yyv4418.CodecDecodeSelf(d)
			}

		}
		if yyrt4417 {
			for ; yyj4417 < yyl4417; yyj4417++ {
				yyv4417 = append(yyv4417, OwnerReference{})
				yyh4417.ElemContainerState(yyj4417)
				if r.TryDecodeAsNil() {
					yyv4417[yyj4417] = OwnerReference{}
				} else {
					yyv4419 := &yyv4417[yyj4417]
					yyv4419.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4417 := 0
		for ; !r.CheckBreak(); yyj4417++ {

			if yyj4417 >= len(yyv4417) {
				yyv4417 = append(yyv4417, OwnerReference{}) // var yyz4417 OwnerReference
				yyc4417 = true
			}
			yyh4417.ElemContainerState(yyj4417)
			if yyj4417 < len(yyv4417) {
				if r.TryDecodeAsNil() {
					yyv4417[yyj4417] = OwnerReference{}
				} else {
					yyv4420 := &yyv4417[yyj4417]
					yyv4420.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4417 < len(yyv4417) {
			yyv4417 = yyv4417[:yyj4417]
			yyc4417 = true
		} else if yyj4417 == 0 && yyv4417 == nil {
			yyv4417 = []OwnerReference{}
			yyc4417 = true
		}
	}
	yyh4417.End()
	if yyc4417 {
		*v = yyv4417
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4421 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4421.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4422 := *v
	yyh4422, yyl4422 := z.DecSliceHelperStart()
	var yyc4422 bool
	if yyl4422 == 0 {
		if yyv4422 == nil {
			yyv4422 = []PersistentVolumeAccessMode{}
			yyc4422 = true
		} else if len(yyv4422) != 0 {
			yyv4422 = yyv4422[:0]
			yyc4422 = true
		}
	} else if yyl4422 > 0 {
		var yyrr4422, yyrl4422 int
		var yyrt4422 bool
		if yyl4422 > cap(yyv4422) {

			yyrl4422, yyrt4422 = z.DecInferLen(yyl4422, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4422 {
				if yyrl4422 <= cap(yyv4422) {
					yyv4422 = yyv4422[:yyrl4422]
				} else {
					yyv4422 = make([]PersistentVolumeAccessMode, yyrl4422)
				}
			} else {
				yyv4422 = make([]PersistentVolumeAccessMode, yyrl4422)
			}
			yyc4422 = true
			yyrr4422 = len(yyv4422)
		} else if yyl4422 != len(yyv4422) {
			yyv4422 = yyv4422[:yyl4422]
			yyc4422 = true
		}
		yyj4422 := 0
		for ; yyj4422 < yyrr4422; yyj4422++ {
			yyh4422.ElemContainerState(yyj4422)
			if r.TryDecodeAsNil() {
				yyv4422[yyj4422] = ""
			} else {
				yyv4422[yyj4422] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4422 {
			for ; yyj4422 < yyl4422; yyj4422++ {
				yyv4422 = append(yyv4422, "")
				yyh4422.ElemContainerState(yyj4422)
				if r.TryDecodeAsNil() {
					yyv4422[yyj4422] = ""
				} else {
					yyv4422[yyj4422] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4422 := 0
		for ; !r.CheckBreak(); yyj4422++ {

			if yyj4422 >= len(yyv4422) {
				yyv4422 = append(yyv4422, "") // var yyz4422 PersistentVolumeAccessMode
				yyc4422 = true
			}
			yyh4422.ElemContainerState(yyj4422)
			if yyj4422 < len(yyv4422) {
				if r.TryDecodeAsNil() {
					yyv4422[yyj4422] = ""
				} else {
					yyv4422[yyj4422] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4422 < len(yyv4422) {
			yyv4422 = yyv4422[:yyj4422]
			yyc4422 = true
		} else if yyj4422 == 0 && yyv4422 == nil {
			yyv4422 = []PersistentVolumeAccessMode{}
			yyc4422 = true
		}
	}
	yyh4422.End()
	if yyc4422 {
		*v = yyv4422
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4426 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4427 := &yyv4426
		yy4427.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4428 := *v
	yyh4428, yyl4428 := z.DecSliceHelperStart()
	var yyc4428 bool
	if yyl4428 == 0 {
		if yyv4428 == nil {
			yyv4428 = []PersistentVolume{}
			yyc4428 = true
		} else if len(yyv4428) != 0 {
			yyv4428 = yyv4428[:0]
			yyc4428 = true
		}
	} else if yyl4428 > 0 {
		var yyrr4428, yyrl4428 int
		var yyrt4428 bool
		if yyl4428 > cap(yyv4428) {

			yyrg4428 := len(yyv4428) > 0
			yyv24428 := yyv4428
			yyrl4428, yyrt4428 = z.DecInferLen(yyl4428, z.DecBasicHandle().MaxInitLen, 464)
			if yyrt4428 {
				if yyrl4428 <= cap(yyv4428) {
					yyv4428 = yyv4428[:yyrl4428]
				} else {
					yyv4428 = make([]PersistentVolume, yyrl4428)
				}
			} else {
				yyv4428 = make([]PersistentVolume, yyrl4428)
			}
			yyc4428 = true
			yyrr4428 = len(yyv4428)
			if yyrg4428 {
				copy(yyv4428, yyv24428)
			}
		} else if yyl4428 != len(yyv4428) {
			yyv4428 = yyv4428[:yyl4428]
			yyc4428 = true
		}
		yyj4428 := 0
		for ; yyj4428 < yyrr4428; yyj4428++ {
			yyh4428.ElemContainerState(yyj4428)
			if r.TryDecodeAsNil() {
				yyv4428[yyj4428] = PersistentVolume{}
			} else {
				yyv4429 := &yyv4428[yyj4428]
				yyv4429.CodecDecodeSelf(d)
			}

		}
		if yyrt4428 {
			for ; yyj4428 < yyl4428; yyj4428++ {
				yyv4428 = append(yyv4428, PersistentVolume{})
				yyh4428.ElemContainerState(yyj4428)
				if r.TryDecodeAsNil() {
					yyv4428[yyj4428] = PersistentVolume{}
				} else {
					yyv4430 := &yyv4428[yyj4428]
					yyv4430.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4428 := 0
		for ; !r.CheckBreak(); yyj4428++ {

			if yyj4428 >= len(yyv4428) {
				yyv4428 = append(yyv4428, PersistentVolume{}) // var yyz4428 PersistentVolume
				yyc4428 = true
			}
			yyh4428.ElemContainerState(yyj4428)
			if yyj4428 < len(yyv4428) {
				if r.TryDecodeAsNil() {
					yyv4428[yyj4428] = PersistentVolume{}
				} else {
					yyv4431 := &yyv4428[yyj4428]
					yyv4431.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4428 < len(yyv4428) {
			yyv4428 = yyv4428[:yyj4428]
			yyc4428 = true
		} else if yyj4428 == 0 && yyv4428 == nil {
			yyv4428 = []PersistentVolume{}
			yyc4428 = true
		}
	}
	yyh4428.End()
	if yyc4428 {
		*v = yyv4428
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4432 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4433 := &yyv4432
		yy4433.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4434 := *v
	yyh4434, yyl4434 := z.DecSliceHelperStart()
	var yyc4434 bool
	if yyl4434 == 0 {
		if yyv4434 == nil {
			yyv4434 = []PersistentVolumeClaim{}
			yyc4434 = true
		} else if len(yyv4434) != 0 {
			yyv4434 = yyv4434[:0]
			yyc4434 = true
		}
	} else if yyl4434 > 0 {
		var yyrr4434, yyrl4434 int
		var yyrt4434 bool
		if yyl4434 > cap(yyv4434) {

			yyrg4434 := len(yyv4434) > 0
			yyv24434 := yyv4434
			yyrl4434, yyrt4434 = z.DecInferLen(yyl4434, z.DecBasicHandle().MaxInitLen, 352)
			if yyrt4434 {
				if yyrl4434 <= cap(yyv4434) {
					yyv4434 = yyv4434[:yyrl4434]
				} else {
					yyv4434 = make([]PersistentVolumeClaim, yyrl4434)
				}
			} else {
				yyv4434 = make([]PersistentVolumeClaim, yyrl4434)
			}
			yyc4434 = true
			yyrr4434 = len(yyv4434)
			if yyrg4434 {
				copy(yyv4434, yyv24434)
			}
		} else if yyl4434 != len(yyv4434) {
			yyv4434 = yyv4434[:yyl4434]
			yyc4434 = true
		}
		yyj4434 := 0
		for ; yyj4434 < yyrr4434; yyj4434++ {
			yyh4434.ElemContainerState(yyj4434)
			if r.TryDecodeAsNil() {
				yyv4434[yyj4434] = PersistentVolumeClaim{}
			} else {
				yyv4435 := &yyv4434[yyj4434]
				yyv4435.CodecDecodeSelf(d)
			}

		}
		if yyrt4434 {
			for ; yyj4434 < yyl4434; yyj4434++ {
				yyv4434 = append(yyv4434, PersistentVolumeClaim{})
				yyh4434.ElemContainerState(yyj4434)
				if r.TryDecodeAsNil() {
					yyv4434[yyj4434] = PersistentVolumeClaim{}
				} else {
					yyv4436 := &yyv4434[yyj4434]
					yyv4436.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4434 := 0
		for ; !r.CheckBreak(); yyj4434++ {

			if yyj4434 >= len(yyv4434) {
				yyv4434 = append(yyv4434, PersistentVolumeClaim{}) // var yyz4434 PersistentVolumeClaim
				yyc4434 = true
			}
			yyh4434.ElemContainerState(yyj4434)
			if yyj4434 < len(yyv4434) {
				if r.TryDecodeAsNil() {
					yyv4434[yyj4434] = PersistentVolumeClaim{}
				} else {
					yyv4437 := &yyv4434[yyj4434]
					yyv4437.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4434 < len(yyv4434) {
			yyv4434 = yyv4434[:yyj4434]
			yyc4434 = true
		} else if yyj4434 == 0 && yyv4434 == nil {
			yyv4434 = []PersistentVolumeClaim{}
			yyc4434 = true
		}
	}
	yyh4434.End()
	if yyc4434 {
		*v = yyv4434
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4438 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4439 := &yyv4438
		yy4439.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4440 := *v
	yyh4440, yyl4440 := z.DecSliceHelperStart()
	var yyc4440 bool
	if yyl4440 == 0 {
		if yyv4440 == nil {
			yyv4440 = []KeyToPath{}
			yyc4440 = true
		} else if len(yyv4440) != 0 {
			yyv4440 = yyv4440[:0]
			yyc4440 = true
		}
	} else if yyl4440 > 0 {
		var yyrr4440, yyrl4440 int
		var yyrt4440 bool
		if yyl4440 > cap(yyv4440) {

			yyrg4440 := len(yyv4440) > 0
			yyv24440 := yyv4440
			yyrl4440, yyrt4440 = z.DecInferLen(yyl4440, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4440 {
				if yyrl4440 <= cap(yyv4440) {
					yyv4440 = yyv4440[:yyrl4440]
				} else {
					yyv4440 = make([]KeyToPath, yyrl4440)
				}
			} else {
				yyv4440 = make([]KeyToPath, yyrl4440)
			}
			yyc4440 = true
			yyrr4440 = len(yyv4440)
			if yyrg4440 {
				copy(yyv4440, yyv24440)
			}
		} else if yyl4440 != len(yyv4440) {
			yyv4440 = yyv4440[:yyl4440]
			yyc4440 = true
		}
		yyj4440 := 0
		for ; yyj4440 < yyrr4440; yyj4440++ {
			yyh4440.ElemContainerState(yyj4440)
			if r.TryDecodeAsNil() {
				yyv4440[yyj4440] = KeyToPath{}
			} else {
				yyv4441 := &yyv4440[yyj4440]
				yyv4441.CodecDecodeSelf(d)
			}

		}
		if yyrt4440 {
			for ; yyj4440 < yyl4440; yyj4440++ {
				yyv4440 = append(yyv4440, KeyToPath{})
				yyh4440.ElemContainerState(yyj4440)
				if r.TryDecodeAsNil() {
					yyv4440[yyj4440] = KeyToPath{}
				} else {
					yyv4442 := &yyv4440[yyj4440]
					yyv4442.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4440 := 0
		for ; !r.CheckBreak(); yyj4440++ {

			if yyj4440 >= len(yyv4440) {
				yyv4440 = append(yyv4440, KeyToPath{}) // var yyz4440 KeyToPath
				yyc4440 = true
			}
			yyh4440.ElemContainerState(yyj4440)
			if yyj4440 < len(yyv4440) {
				if r.TryDecodeAsNil() {
					yyv4440[yyj4440] = KeyToPath{}
				} else {
					yyv4443 := &yyv4440[yyj4440]
					yyv4443.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4440 < len(yyv4440) {
			yyv4440 = yyv4440[:yyj4440]
			yyc4440 = true
		} else if yyj4440 == 0 && yyv4440 == nil {
			yyv4440 = []KeyToPath{}
			yyc4440 = true
		}
	}
	yyh4440.End()
	if yyc4440 {
		*v = yyv4440
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4444 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4445 := &yyv4444
		yy4445.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4446 := *v
	yyh4446, yyl4446 := z.DecSliceHelperStart()
	var yyc4446 bool
	if yyl4446 == 0 {
		if yyv4446 == nil {
			yyv4446 = []HTTPHeader{}
			yyc4446 = true
		} else if len(yyv4446) != 0 {
			yyv4446 = yyv4446[:0]
			yyc4446 = true
		}
	} else if yyl4446 > 0 {
		var yyrr4446, yyrl4446 int
		var yyrt4446 bool
		if yyl4446 > cap(yyv4446) {

			yyrg4446 := len(yyv4446) > 0
			yyv24446 := yyv4446
			yyrl4446, yyrt4446 = z.DecInferLen(yyl4446, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4446 {
				if yyrl4446 <= cap(yyv4446) {
					yyv4446 = yyv4446[:yyrl4446]
				} else {
					yyv4446 = make([]HTTPHeader, yyrl4446)
				}
			} else {
				yyv4446 = make([]HTTPHeader, yyrl4446)
			}
			yyc4446 = true
			yyrr4446 = len(yyv4446)
			if yyrg4446 {
				copy(yyv4446, yyv24446)
			}
		} else if yyl4446 != len(yyv4446) {
			yyv4446 = yyv4446[:yyl4446]
			yyc4446 = true
		}
		yyj4446 := 0
		for ; yyj4446 < yyrr4446; yyj4446++ {
			yyh4446.ElemContainerState(yyj4446)
			if r.TryDecodeAsNil() {
				yyv4446[yyj4446] = HTTPHeader{}
			} else {
				yyv4447 := &yyv4446[yyj4446]
				yyv4447.CodecDecodeSelf(d)
			}

		}
		if yyrt4446 {
			for ; yyj4446 < yyl4446; yyj4446++ {
				yyv4446 = append(yyv4446, HTTPHeader{})
				yyh4446.ElemContainerState(yyj4446)
				if r.TryDecodeAsNil() {
					yyv4446[yyj4446] = HTTPHeader{}
				} else {
					yyv4448 := &yyv4446[yyj4446]
					yyv4448.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4446 := 0
		for ; !r.CheckBreak(); yyj4446++ {

			if yyj4446 >= len(yyv4446) {
				yyv4446 = append(yyv4446, HTTPHeader{}) // var yyz4446 HTTPHeader
				yyc4446 = true
			}
			yyh4446.ElemContainerState(yyj4446)
			if yyj4446 < len(yyv4446) {
				if r.TryDecodeAsNil() {
					yyv4446[yyj4446] = HTTPHeader{}
				} else {
					yyv4449 := &yyv4446[yyj4446]
					yyv4449.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4446 < len(yyv4446) {
			yyv4446 = yyv4446[:yyj4446]
			yyc4446 = true
		} else if yyj4446 == 0 && yyv4446 == nil {
			yyv4446 = []HTTPHeader{}
			yyc4446 = true
		}
	}
	yyh4446.End()
	if yyc4446 {
		*v = yyv4446
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4450 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4450.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4451 := *v
	yyh4451, yyl4451 := z.DecSliceHelperStart()
	var yyc4451 bool
	if yyl4451 == 0 {
		if yyv4451 == nil {
			yyv4451 = []Capability{}
			yyc4451 = true
		} else if len(yyv4451) != 0 {
			yyv4451 = yyv4451[:0]
			yyc4451 = true
		}
	} else if yyl4451 > 0 {
		var yyrr4451, yyrl4451 int
		var yyrt4451 bool
		if yyl4451 > cap(yyv4451) {

			yyrl4451, yyrt4451 = z.DecInferLen(yyl4451, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4451 {
				if yyrl4451 <= cap(yyv4451) {
					yyv4451 = yyv4451[:yyrl4451]
				} else {
					yyv4451 = make([]Capability, yyrl4451)
				}
			} else {
				yyv4451 = make([]Capability, yyrl4451)
			}
			yyc4451 = true
			yyrr4451 = len(yyv4451)
		} else if yyl4451 != len(yyv4451) {
			yyv4451 = yyv4451[:yyl4451]
			yyc4451 = true
		}
		yyj4451 := 0
		for ; yyj4451 < yyrr4451; yyj4451++ {
			yyh4451.ElemContainerState(yyj4451)
			if r.TryDecodeAsNil() {
				yyv4451[yyj4451] = ""
			} else {
				yyv4451[yyj4451] = Capability(r.DecodeString())
			}

		}
		if yyrt4451 {
			for ; yyj4451 < yyl4451; yyj4451++ {
				yyv4451 = append(yyv4451, "")
				yyh4451.ElemContainerState(yyj4451)
				if r.TryDecodeAsNil() {
					yyv4451[yyj4451] = ""
				} else {
					yyv4451[yyj4451] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4451 := 0
		for ; !r.CheckBreak(); yyj4451++ {

			if yyj4451 >= len(yyv4451) {
				yyv4451 = append(yyv4451, "") // var yyz4451 Capability
				yyc4451 = true
			}
			yyh4451.ElemContainerState(yyj4451)
			if yyj4451 < len(yyv4451) {
				if r.TryDecodeAsNil() {
					yyv4451[yyj4451] = ""
				} else {
					yyv4451[yyj4451] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4451 < len(yyv4451) {
			yyv4451 = yyv4451[:yyj4451]
			yyc4451 = true
		} else if yyj4451 == 0 && yyv4451 == nil {
			yyv4451 = []Capability{}
			yyc4451 = true
		}
	}
	yyh4451.End()
	if yyc4451 {
		*v = yyv4451
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4455 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4456 := &yyv4455
		yy4456.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4457 := *v
	yyh4457, yyl4457 := z.DecSliceHelperStart()
	var yyc4457 bool
	if yyl4457 == 0 {
		if yyv4457 == nil {
			yyv4457 = []ContainerPort{}
			yyc4457 = true
		} else if len(yyv4457) != 0 {
			yyv4457 = yyv4457[:0]
			yyc4457 = true
		}
	} else if yyl4457 > 0 {
		var yyrr4457, yyrl4457 int
		var yyrt4457 bool
		if yyl4457 > cap(yyv4457) {

			yyrg4457 := len(yyv4457) > 0
			yyv24457 := yyv4457
			yyrl4457, yyrt4457 = z.DecInferLen(yyl4457, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4457 {
				if yyrl4457 <= cap(yyv4457) {
					yyv4457 = yyv4457[:yyrl4457]
				} else {
					yyv4457 = make([]ContainerPort, yyrl4457)
				}
			} else {
				yyv4457 = make([]ContainerPort, yyrl4457)
			}
			yyc4457 = true
			yyrr4457 = len(yyv4457)
			if yyrg4457 {
				copy(yyv4457, yyv24457)
			}
		} else if yyl4457 != len(yyv4457) {
			yyv4457 = yyv4457[:yyl4457]
			yyc4457 = true
		}
		yyj4457 := 0
		for ; yyj4457 < yyrr4457; yyj4457++ {
			yyh4457.ElemContainerState(yyj4457)
			if r.TryDecodeAsNil() {
				yyv4457[yyj4457] = ContainerPort{}
			} else {
				yyv4458 := &yyv4457[yyj4457]
				yyv4458.CodecDecodeSelf(d)
			}

		}
		if yyrt4457 {
			for ; yyj4457 < yyl4457; yyj4457++ {
				yyv4457 = append(yyv4457, ContainerPort{})
				yyh4457.ElemContainerState(yyj4457)
				if r.TryDecodeAsNil() {
					yyv4457[yyj4457] = ContainerPort{}
				} else {
					yyv4459 := &yyv4457[yyj4457]
					yyv4459.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4457 := 0
		for ; !r.CheckBreak(); yyj4457++ {

			if yyj4457 >= len(yyv4457) {
				yyv4457 = append(yyv4457, ContainerPort{}) // var yyz4457 ContainerPort
				yyc4457 = true
			}
			yyh4457.ElemContainerState(yyj4457)
			if yyj4457 < len(yyv4457) {
				if r.TryDecodeAsNil() {
					yyv4457[yyj4457] = ContainerPort{}
				} else {
					yyv4460 := &yyv4457[yyj4457]
					yyv4460.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4457 < len(yyv4457) {
			yyv4457 = yyv4457[:yyj4457]
			yyc4457 = true
		} else if yyj4457 == 0 && yyv4457 == nil {
			yyv4457 = []ContainerPort{}
			yyc4457 = true
		}
	}
	yyh4457.End()
	if yyc4457 {
		*v = yyv4457
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4461 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4462 := &yyv4461
		yy4462.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4463 := *v
	yyh4463, yyl4463 := z.DecSliceHelperStart()
	var yyc4463 bool
	if yyl4463 == 0 {
		if yyv4463 == nil {
			yyv4463 = []EnvVar{}
			yyc4463 = true
		} else if len(yyv4463) != 0 {
			yyv4463 = yyv4463[:0]
			yyc4463 = true
		}
	} else if yyl4463 > 0 {
		var yyrr4463, yyrl4463 int
		var yyrt4463 bool
		if yyl4463 > cap(yyv4463) {

			yyrg4463 := len(yyv4463) > 0
			yyv24463 := yyv4463
			yyrl4463, yyrt4463 = z.DecInferLen(yyl4463, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4463 {
				if yyrl4463 <= cap(yyv4463) {
					yyv4463 = yyv4463[:yyrl4463]
				} else {
					yyv4463 = make([]EnvVar, yyrl4463)
				}
			} else {
				yyv4463 = make([]EnvVar, yyrl4463)
			}
			yyc4463 = true
			yyrr4463 = len(yyv4463)
			if yyrg4463 {
				copy(yyv4463, yyv24463)
			}
		} else if yyl4463 != len(yyv4463) {
			yyv4463 = yyv4463[:yyl4463]
			yyc4463 = true
		}
		yyj4463 := 0
		for ; yyj4463 < yyrr4463; yyj4463++ {
			yyh4463.ElemContainerState(yyj4463)
			if r.TryDecodeAsNil() {
				yyv4463[yyj4463] = EnvVar{}
			} else {
				yyv4464 := &yyv4463[yyj4463]
				yyv4464.CodecDecodeSelf(d)
			}

		}
		if yyrt4463 {
			for ; yyj4463 < yyl4463; yyj4463++ {
				yyv4463 = append(yyv4463, EnvVar{})
				yyh4463.ElemContainerState(yyj4463)
				if r.TryDecodeAsNil() {
					yyv4463[yyj4463] = EnvVar{}
				} else {
					yyv4465 := &yyv4463[yyj4463]
					yyv4465.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4463 := 0
		for ; !r.CheckBreak(); yyj4463++ {

			if yyj4463 >= len(yyv4463) {
				yyv4463 = append(yyv4463, EnvVar{}) // var yyz4463 EnvVar
				yyc4463 = true
			}
			yyh4463.ElemContainerState(yyj4463)
			if yyj4463 < len(yyv4463) {
				if r.TryDecodeAsNil() {
					yyv4463[yyj4463] = EnvVar{}
				} else {
					yyv4466 := &yyv4463[yyj4463]
					yyv4466.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4463 < len(yyv4463) {
			yyv4463 = yyv4463[:yyj4463]
			yyc4463 = true
		} else if yyj4463 == 0 && yyv4463 == nil {
			yyv4463 = []EnvVar{}
			yyc4463 = true
		}
	}
	yyh4463.End()
	if yyc4463 {
		*v = yyv4463
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4467 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4468 := &yyv4467
		yy4468.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4469 := *v
	yyh4469, yyl4469 := z.DecSliceHelperStart()
	var yyc4469 bool
	if yyl4469 == 0 {
		if yyv4469 == nil {
			yyv4469 = []VolumeMount{}
			yyc4469 = true
		} else if len(yyv4469) != 0 {
			yyv4469 = yyv4469[:0]
			yyc4469 = true
		}
	} else if yyl4469 > 0 {
		var yyrr4469, yyrl4469 int
		var yyrt4469 bool
		if yyl4469 > cap(yyv4469) {

			yyrg4469 := len(yyv4469) > 0
			yyv24469 := yyv4469
			yyrl4469, yyrt4469 = z.DecInferLen(yyl4469, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4469 {
				if yyrl4469 <= cap(yyv4469) {
					yyv4469 = yyv4469[:yyrl4469]
				} else {
					yyv4469 = make([]VolumeMount, yyrl4469)
				}
			} else {
				yyv4469 = make([]VolumeMount, yyrl4469)
			}
			yyc4469 = true
			yyrr4469 = len(yyv4469)
			if yyrg4469 {
				copy(yyv4469, yyv24469)
			}
		} else if yyl4469 != len(yyv4469) {
			yyv4469 = yyv4469[:yyl4469]
			yyc4469 = true
		}
		yyj4469 := 0
		for ; yyj4469 < yyrr4469; yyj4469++ {
			yyh4469.ElemContainerState(yyj4469)
			if r.TryDecodeAsNil() {
				yyv4469[yyj4469] = VolumeMount{}
			} else {
				yyv4470 := &yyv4469[yyj4469]
				yyv4470.CodecDecodeSelf(d)
			}

		}
		if yyrt4469 {
			for ; yyj4469 < yyl4469; yyj4469++ {
				yyv4469 = append(yyv4469, VolumeMount{})
				yyh4469.ElemContainerState(yyj4469)
				if r.TryDecodeAsNil() {
					yyv4469[yyj4469] = VolumeMount{}
				} else {
					yyv4471 := &yyv4469[yyj4469]
					yyv4471.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4469 := 0
		for ; !r.CheckBreak(); yyj4469++ {

			if yyj4469 >= len(yyv4469) {
				yyv4469 = append(yyv4469, VolumeMount{}) // var yyz4469 VolumeMount
				yyc4469 = true
			}
			yyh4469.ElemContainerState(yyj4469)
			if yyj4469 < len(yyv4469) {
				if r.TryDecodeAsNil() {
					yyv4469[yyj4469] = VolumeMount{}
				} else {
					yyv4472 := &yyv4469[yyj4469]
					yyv4472.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4469 < len(yyv4469) {
			yyv4469 = yyv4469[:yyj4469]
			yyc4469 = true
		} else if yyj4469 == 0 && yyv4469 == nil {
			yyv4469 = []VolumeMount{}
			yyc4469 = true
		}
	}
	yyh4469.End()
	if yyc4469 {
		*v = yyv4469
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4473 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4474 := &yyv4473
		yy4474.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4475 := *v
	yyh4475, yyl4475 := z.DecSliceHelperStart()
	var yyc4475 bool
	if yyl4475 == 0 {
		if yyv4475 == nil {
			yyv4475 = []NodeSelectorTerm{}
			yyc4475 = true
		} else if len(yyv4475) != 0 {
			yyv4475 = yyv4475[:0]
			yyc4475 = true
		}
	} else if yyl4475 > 0 {
		var yyrr4475, yyrl4475 int
		var yyrt4475 bool
		if yyl4475 > cap(yyv4475) {

			yyrg4475 := len(yyv4475) > 0
			yyv24475 := yyv4475
			yyrl4475, yyrt4475 = z.DecInferLen(yyl4475, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4475 {
				if yyrl4475 <= cap(yyv4475) {
					yyv4475 = yyv4475[:yyrl4475]
				} else {
					yyv4475 = make([]NodeSelectorTerm, yyrl4475)
				}
			} else {
				yyv4475 = make([]NodeSelectorTerm, yyrl4475)
			}
			yyc4475 = true
			yyrr4475 = len(yyv4475)
			if yyrg4475 {
				copy(yyv4475, yyv24475)
			}
		} else if yyl4475 != len(yyv4475) {
			yyv4475 = yyv4475[:yyl4475]
			yyc4475 = true
		}
		yyj4475 := 0
		for ; yyj4475 < yyrr4475; yyj4475++ {
			yyh4475.ElemContainerState(yyj4475)
			if r.TryDecodeAsNil() {
				yyv4475[yyj4475] = NodeSelectorTerm{}
			} else {
				yyv4476 := &yyv4475[yyj4475]
				yyv4476.CodecDecodeSelf(d)
			}

		}
		if yyrt4475 {
			for ; yyj4475 < yyl4475; yyj4475++ {
				yyv4475 = append(yyv4475, NodeSelectorTerm{})
				yyh4475.ElemContainerState(yyj4475)
				if r.TryDecodeAsNil() {
					yyv4475[yyj4475] = NodeSelectorTerm{}
				} else {
					yyv4477 := &yyv4475[yyj4475]
					yyv4477.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4475 := 0
		for ; !r.CheckBreak(); yyj4475++ {

			if yyj4475 >= len(yyv4475) {
				yyv4475 = append(yyv4475, NodeSelectorTerm{}) // var yyz4475 NodeSelectorTerm
				yyc4475 = true
			}
			yyh4475.ElemContainerState(yyj4475)
			if yyj4475 < len(yyv4475) {
				if r.TryDecodeAsNil() {
					yyv4475[yyj4475] = NodeSelectorTerm{}
				} else {
					yyv4478 := &yyv4475[yyj4475]
					yyv4478.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4475 < len(yyv4475) {
			yyv4475 = yyv4475[:yyj4475]
			yyc4475 = true
		} else if yyj4475 == 0 && yyv4475 == nil {
			yyv4475 = []NodeSelectorTerm{}
			yyc4475 = true
		}
	}
	yyh4475.End()
	if yyc4475 {
		*v = yyv4475
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4479 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4480 := &yyv4479
		yy4480.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4481 := *v
	yyh4481, yyl4481 := z.DecSliceHelperStart()
	var yyc4481 bool
	if yyl4481 == 0 {
		if yyv4481 == nil {
			yyv4481 = []NodeSelectorRequirement{}
			yyc4481 = true
		} else if len(yyv4481) != 0 {
			yyv4481 = yyv4481[:0]
			yyc4481 = true
		}
	} else if yyl4481 > 0 {
		var yyrr4481, yyrl4481 int
		var yyrt4481 bool
		if yyl4481 > cap(yyv4481) {

			yyrg4481 := len(yyv4481) > 0
			yyv24481 := yyv4481
			yyrl4481, yyrt4481 = z.DecInferLen(yyl4481, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4481 {
				if yyrl4481 <= cap(yyv4481) {
					yyv4481 = yyv4481[:yyrl4481]
				} else {
					yyv4481 = make([]NodeSelectorRequirement, yyrl4481)
				}
			} else {
				yyv4481 = make([]NodeSelectorRequirement, yyrl4481)
			}
			yyc4481 = true
			yyrr4481 = len(yyv4481)
			if yyrg4481 {
				copy(yyv4481, yyv24481)
			}
		} else if yyl4481 != len(yyv4481) {
			yyv4481 = yyv4481[:yyl4481]
			yyc4481 = true
		}
		yyj4481 := 0
		for ; yyj4481 < yyrr4481; yyj4481++ {
			yyh4481.ElemContainerState(yyj4481)
			if r.TryDecodeAsNil() {
				yyv4481[yyj4481] = NodeSelectorRequirement{}
			} else {
				yyv4482 := &yyv4481[yyj4481]
				yyv4482.CodecDecodeSelf(d)
			}

		}
		if yyrt4481 {
			for ; yyj4481 < yyl4481; yyj4481++ {
				yyv4481 = append(yyv4481, NodeSelectorRequirement{})
				yyh4481.ElemContainerState(yyj4481)
				if r.TryDecodeAsNil() {
					yyv4481[yyj4481] = NodeSelectorRequirement{}
				} else {
					yyv4483 := &yyv4481[yyj4481]
					yyv4483.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4481 := 0
		for ; !r.CheckBreak(); yyj4481++ {

			if yyj4481 >= len(yyv4481) {
				yyv4481 = append(yyv4481, NodeSelectorRequirement{}) // var yyz4481 NodeSelectorRequirement
				yyc4481 = true
			}
			yyh4481.ElemContainerState(yyj4481)
			if yyj4481 < len(yyv4481) {
				if r.TryDecodeAsNil() {
					yyv4481[yyj4481] = NodeSelectorRequirement{}
				} else {
					yyv4484 := &yyv4481[yyj4481]
					yyv4484.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4481 < len(yyv4481) {
			yyv4481 = yyv4481[:yyj4481]
			yyc4481 = true
		} else if yyj4481 == 0 && yyv4481 == nil {
			yyv4481 = []NodeSelectorRequirement{}
			yyc4481 = true
		}
	}
	yyh4481.End()
	if yyc4481 {
		*v = yyv4481
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4485 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4486 := &yyv4485
		yy4486.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4487 := *v
	yyh4487, yyl4487 := z.DecSliceHelperStart()
	var yyc4487 bool
	if yyl4487 == 0 {
		if yyv4487 == nil {
			yyv4487 = []PodAffinityTerm{}
			yyc4487 = true
		} else if len(yyv4487) != 0 {
			yyv4487 = yyv4487[:0]
			yyc4487 = true
		}
	} else if yyl4487 > 0 {
		var yyrr4487, yyrl4487 int
		var yyrt4487 bool
		if yyl4487 > cap(yyv4487) {

			yyrg4487 := len(yyv4487) > 0
			yyv24487 := yyv4487
			yyrl4487, yyrt4487 = z.DecInferLen(yyl4487, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4487 {
				if yyrl4487 <= cap(yyv4487) {
					yyv4487 = yyv4487[:yyrl4487]
				} else {
					yyv4487 = make([]PodAffinityTerm, yyrl4487)
				}
			} else {
				yyv4487 = make([]PodAffinityTerm, yyrl4487)
			}
			yyc4487 = true
			yyrr4487 = len(yyv4487)
			if yyrg4487 {
				copy(yyv4487, yyv24487)
			}
		} else if yyl4487 != len(yyv4487) {
			yyv4487 = yyv4487[:yyl4487]
			yyc4487 = true
		}
		yyj4487 := 0
		for ; yyj4487 < yyrr4487; yyj4487++ {
			yyh4487.ElemContainerState(yyj4487)
			if r.TryDecodeAsNil() {
				yyv4487[yyj4487] = PodAffinityTerm{}
			} else {
				yyv4488 := &yyv4487[yyj4487]
				yyv4488.CodecDecodeSelf(d)
			}

		}
		if yyrt4487 {
			for ; yyj4487 < yyl4487; yyj4487++ {
				yyv4487 = append(yyv4487, PodAffinityTerm{})
				yyh4487.ElemContainerState(yyj4487)
				if r.TryDecodeAsNil() {
					yyv4487[yyj4487] = PodAffinityTerm{}
				} else {
					yyv4489 := &yyv4487[yyj4487]
					yyv4489.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4487 := 0
		for ; !r.CheckBreak(); yyj4487++ {

			if yyj4487 >= len(yyv4487) {
				yyv4487 = append(yyv4487, PodAffinityTerm{}) // var yyz4487 PodAffinityTerm
				yyc4487 = true
			}
			yyh4487.ElemContainerState(yyj4487)
			if yyj4487 < len(yyv4487) {
				if r.TryDecodeAsNil() {
					yyv4487[yyj4487] = PodAffinityTerm{}
				} else {
					yyv4490 := &yyv4487[yyj4487]
					yyv4490.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4487 < len(yyv4487) {
			yyv4487 = yyv4487[:yyj4487]
			yyc4487 = true
		} else if yyj4487 == 0 && yyv4487 == nil {
			yyv4487 = []PodAffinityTerm{}
			yyc4487 = true
		}
	}
	yyh4487.End()
	if yyc4487 {
		*v = yyv4487
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4491 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4492 := &yyv4491
		yy4492.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4493 := *v
	yyh4493, yyl4493 := z.DecSliceHelperStart()
	var yyc4493 bool
	if yyl4493 == 0 {
		if yyv4493 == nil {
			yyv4493 = []WeightedPodAffinityTerm{}
			yyc4493 = true
		} else if len(yyv4493) != 0 {
			yyv4493 = yyv4493[:0]
			yyc4493 = true
		}
	} else if yyl4493 > 0 {
		var yyrr4493, yyrl4493 int
		var yyrt4493 bool
		if yyl4493 > cap(yyv4493) {

			yyrg4493 := len(yyv4493) > 0
			yyv24493 := yyv4493
			yyrl4493, yyrt4493 = z.DecInferLen(yyl4493, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4493 {
				if yyrl4493 <= cap(yyv4493) {
					yyv4493 = yyv4493[:yyrl4493]
				} else {
					yyv4493 = make([]WeightedPodAffinityTerm, yyrl4493)
				}
			} else {
				yyv4493 = make([]WeightedPodAffinityTerm, yyrl4493)
			}
			yyc4493 = true
			yyrr4493 = len(yyv4493)
			if yyrg4493 {
				copy(yyv4493, yyv24493)
			}
		} else if yyl4493 != len(yyv4493) {
			yyv4493 = yyv4493[:yyl4493]
			yyc4493 = true
		}
		yyj4493 := 0
		for ; yyj4493 < yyrr4493; yyj4493++ {
			yyh4493.ElemContainerState(yyj4493)
			if r.TryDecodeAsNil() {
				yyv4493[yyj4493] = WeightedPodAffinityTerm{}
			} else {
				yyv4494 := &yyv4493[yyj4493]
				yyv4494.CodecDecodeSelf(d)
			}

		}
		if yyrt4493 {
			for ; yyj4493 < yyl4493; yyj4493++ {
				yyv4493 = append(yyv4493, WeightedPodAffinityTerm{})
				yyh4493.ElemContainerState(yyj4493)
				if r.TryDecodeAsNil() {
					yyv4493[yyj4493] = WeightedPodAffinityTerm{}
				} else {
					yyv4495 := &yyv4493[yyj4493]
					yyv4495.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4493 := 0
		for ; !r.CheckBreak(); yyj4493++ {

			if yyj4493 >= len(yyv4493) {
				yyv4493 = append(yyv4493, WeightedPodAffinityTerm{}) // var yyz4493 WeightedPodAffinityTerm
				yyc4493 = true
			}
			yyh4493.ElemContainerState(yyj4493)
			if yyj4493 < len(yyv4493) {
				if r.TryDecodeAsNil() {
					yyv4493[yyj4493] = WeightedPodAffinityTerm{}
				} else {
					yyv4496 := &yyv4493[yyj4493]
					yyv4496.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4493 < len(yyv4493) {
			yyv4493 = yyv4493[:yyj4493]
			yyc4493 = true
		} else if yyj4493 == 0 && yyv4493 == nil {
			yyv4493 = []WeightedPodAffinityTerm{}
			yyc4493 = true
		}
	}
	yyh4493.End()
	if yyc4493 {
		*v = yyv4493
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4497 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4498 := &yyv4497
		yy4498.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4499 := *v
	yyh4499, yyl4499 := z.DecSliceHelperStart()
	var yyc4499 bool
	if yyl4499 == 0 {
		if yyv4499 == nil {
			yyv4499 = []PreferredSchedulingTerm{}
			yyc4499 = true
		} else if len(yyv4499) != 0 {
			yyv4499 = yyv4499[:0]
			yyc4499 = true
		}
	} else if yyl4499 > 0 {
		var yyrr4499, yyrl4499 int
		var yyrt4499 bool
		if yyl4499 > cap(yyv4499) {

			yyrg4499 := len(yyv4499) > 0
			yyv24499 := yyv4499
			yyrl4499, yyrt4499 = z.DecInferLen(yyl4499, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4499 {
				if yyrl4499 <= cap(yyv4499) {
					yyv4499 = yyv4499[:yyrl4499]
				} else {
					yyv4499 = make([]PreferredSchedulingTerm, yyrl4499)
				}
			} else {
				yyv4499 = make([]PreferredSchedulingTerm, yyrl4499)
			}
			yyc4499 = true
			yyrr4499 = len(yyv4499)
			if yyrg4499 {
				copy(yyv4499, yyv24499)
			}
		} else if yyl4499 != len(yyv4499) {
			yyv4499 = yyv4499[:yyl4499]
			yyc4499 = true
		}
		yyj4499 := 0
		for ; yyj4499 < yyrr4499; yyj4499++ {
			yyh4499.ElemContainerState(yyj4499)
			if r.TryDecodeAsNil() {
				yyv4499[yyj4499] = PreferredSchedulingTerm{}
			} else {
				yyv4500 := &yyv4499[yyj4499]
				yyv4500.CodecDecodeSelf(d)
			}

		}
		if yyrt4499 {
			for ; yyj4499 < yyl4499; yyj4499++ {
				yyv4499 = append(yyv4499, PreferredSchedulingTerm{})
				yyh4499.ElemContainerState(yyj4499)
				if r.TryDecodeAsNil() {
					yyv4499[yyj4499] = PreferredSchedulingTerm{}
				} else {
					yyv4501 := &yyv4499[yyj4499]
					yyv4501.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4499 := 0
		for ; !r.CheckBreak(); yyj4499++ {

			if yyj4499 >= len(yyv4499) {
				yyv4499 = append(yyv4499, PreferredSchedulingTerm{}) // var yyz4499 PreferredSchedulingTerm
				yyc4499 = true
			}
			yyh4499.ElemContainerState(yyj4499)
			if yyj4499 < len(yyv4499) {
				if r.TryDecodeAsNil() {
					yyv4499[yyj4499] = PreferredSchedulingTerm{}
				} else {
					yyv4502 := &yyv4499[yyj4499]
					yyv4502.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4499 < len(yyv4499) {
			yyv4499 = yyv4499[:yyj4499]
			yyc4499 = true
		} else if yyj4499 == 0 && yyv4499 == nil {
			yyv4499 = []PreferredSchedulingTerm{}
			yyc4499 = true
		}
	}
	yyh4499.End()
	if yyc4499 {
		*v = yyv4499
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4503 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4504 := &yyv4503
		yy4504.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4505 := *v
	yyh4505, yyl4505 := z.DecSliceHelperStart()
	var yyc4505 bool
	if yyl4505 == 0 {
		if yyv4505 == nil {
			yyv4505 = []Volume{}
			yyc4505 = true
		} else if len(yyv4505) != 0 {
			yyv4505 = yyv4505[:0]
			yyc4505 = true
		}
	} else if yyl4505 > 0 {
		var yyrr4505, yyrl4505 int
		var yyrt4505 bool
		if yyl4505 > cap(yyv4505) {

			yyrg4505 := len(yyv4505) > 0
			yyv24505 := yyv4505
			yyrl4505, yyrt4505 = z.DecInferLen(yyl4505, z.DecBasicHandle().MaxInitLen, 184)
			if yyrt4505 {
				if yyrl4505 <= cap(yyv4505) {
					yyv4505 = yyv4505[:yyrl4505]
				} else {
					yyv4505 = make([]Volume, yyrl4505)
				}
			} else {
				yyv4505 = make([]Volume, yyrl4505)
			}
			yyc4505 = true
			yyrr4505 = len(yyv4505)
			if yyrg4505 {
				copy(yyv4505, yyv24505)
			}
		} else if yyl4505 != len(yyv4505) {
			yyv4505 = yyv4505[:yyl4505]
			yyc4505 = true
		}
		yyj4505 := 0
		for ; yyj4505 < yyrr4505; yyj4505++ {
			yyh4505.ElemContainerState(yyj4505)
			if r.TryDecodeAsNil() {
				yyv4505[yyj4505] = Volume{}
			} else {
				yyv4506 := &yyv4505[yyj4505]
				yyv4506.CodecDecodeSelf(d)
			}

		}
		if yyrt4505 {
			for ; yyj4505 < yyl4505; yyj4505++ {
				yyv4505 = append(yyv4505, Volume{})
				yyh4505.ElemContainerState(yyj4505)
				if r.TryDecodeAsNil() {
					yyv4505[yyj4505] = Volume{}
				} else {
					yyv4507 := &yyv4505[yyj4505]
					yyv4507.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4505 := 0
		for ; !r.CheckBreak(); yyj4505++ {

			if yyj4505 >= len(yyv4505) {
				yyv4505 = append(yyv4505, Volume{}) // var yyz4505 Volume
				yyc4505 = true
			}
			yyh4505.ElemContainerState(yyj4505)
			if yyj4505 < len(yyv4505) {
				if r.TryDecodeAsNil() {
					yyv4505[yyj4505] = Volume{}
				} else {
					yyv4508 := &yyv4505[yyj4505]
					yyv4508.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4505 < len(yyv4505) {
			yyv4505 = yyv4505[:yyj4505]
			yyc4505 = true
		} else if yyj4505 == 0 && yyv4505 == nil {
			yyv4505 = []Volume{}
			yyc4505 = true
		}
	}
	yyh4505.End()
	if yyc4505 {
		*v = yyv4505
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4509 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4510 := &yyv4509
		yy4510.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4511 := *v
	yyh4511, yyl4511 := z.DecSliceHelperStart()
	var yyc4511 bool
	if yyl4511 == 0 {
		if yyv4511 == nil {
			yyv4511 = []Container{}
			yyc4511 = true
		} else if len(yyv4511) != 0 {
			yyv4511 = yyv4511[:0]
			yyc4511 = true
		}
	} else if yyl4511 > 0 {
		var yyrr4511, yyrl4511 int
		var yyrt4511 bool
		if yyl4511 > cap(yyv4511) {

			yyrg4511 := len(yyv4511) > 0
			yyv24511 := yyv4511
			yyrl4511, yyrt4511 = z.DecInferLen(yyl4511, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4511 {
				if yyrl4511 <= cap(yyv4511) {
					yyv4511 = yyv4511[:yyrl4511]
				} else {
					yyv4511 = make([]Container, yyrl4511)
				}
			} else {
				yyv4511 = make([]Container, yyrl4511)
			}
			yyc4511 = true
			yyrr4511 = len(yyv4511)
			if yyrg4511 {
				copy(yyv4511, yyv24511)
			}
		} else if yyl4511 != len(yyv4511) {
			yyv4511 = yyv4511[:yyl4511]
			yyc4511 = true
		}
		yyj4511 := 0
		for ; yyj4511 < yyrr4511; yyj4511++ {
			yyh4511.ElemContainerState(yyj4511)
			if r.TryDecodeAsNil() {
				yyv4511[yyj4511] = Container{}
			} else {
				yyv4512 := &yyv4511[yyj4511]
				yyv4512.CodecDecodeSelf(d)
			}

		}
		if yyrt4511 {
			for ; yyj4511 < yyl4511; yyj4511++ {
				yyv4511 = append(yyv4511, Container{})
				yyh4511.ElemContainerState(yyj4511)
				if r.TryDecodeAsNil() {
					yyv4511[yyj4511] = Container{}
				} else {
					yyv4513 := &yyv4511[yyj4511]
					yyv4513.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4511 := 0
		for ; !r.CheckBreak(); yyj4511++ {

			if yyj4511 >= len(yyv4511) {
				yyv4511 = append(yyv4511, Container{}) // var yyz4511 Container
				yyc4511 = true
			}
			yyh4511.ElemContainerState(yyj4511)
			if yyj4511 < len(yyv4511) {
				if r.TryDecodeAsNil() {
					yyv4511[yyj4511] = Container{}
				} else {
					yyv4514 := &yyv4511[yyj4511]
					yyv4514.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4511 < len(yyv4511) {
			yyv4511 = yyv4511[:yyj4511]
			yyc4511 = true
		} else if yyj4511 == 0 && yyv4511 == nil {
			yyv4511 = []Container{}
			yyc4511 = true
		}
	}
	yyh4511.End()
	if yyc4511 {
		*v = yyv4511
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4515 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4516 := &yyv4515
		yy4516.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4517 := *v
	yyh4517, yyl4517 := z.DecSliceHelperStart()
	var yyc4517 bool
	if yyl4517 == 0 {
		if yyv4517 == nil {
			yyv4517 = []LocalObjectReference{}
			yyc4517 = true
		} else if len(yyv4517) != 0 {
			yyv4517 = yyv4517[:0]
			yyc4517 = true
		}
	} else if yyl4517 > 0 {
		var yyrr4517, yyrl4517 int
		var yyrt4517 bool
		if yyl4517 > cap(yyv4517) {

			yyrg4517 := len(yyv4517) > 0
			yyv24517 := yyv4517
			yyrl4517, yyrt4517 = z.DecInferLen(yyl4517, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4517 {
				if yyrl4517 <= cap(yyv4517) {
					yyv4517 = yyv4517[:yyrl4517]
				} else {
					yyv4517 = make([]LocalObjectReference, yyrl4517)
				}
			} else {
				yyv4517 = make([]LocalObjectReference, yyrl4517)
			}
			yyc4517 = true
			yyrr4517 = len(yyv4517)
			if yyrg4517 {
				copy(yyv4517, yyv24517)
			}
		} else if yyl4517 != len(yyv4517) {
			yyv4517 = yyv4517[:yyl4517]
			yyc4517 = true
		}
		yyj4517 := 0
		for ; yyj4517 < yyrr4517; yyj4517++ {
			yyh4517.ElemContainerState(yyj4517)
			if r.TryDecodeAsNil() {
				yyv4517[yyj4517] = LocalObjectReference{}
			} else {
				yyv4518 := &yyv4517[yyj4517]
				yyv4518.CodecDecodeSelf(d)
			}

		}
		if yyrt4517 {
			for ; yyj4517 < yyl4517; yyj4517++ {
				yyv4517 = append(yyv4517, LocalObjectReference{})
				yyh4517.ElemContainerState(yyj4517)
				if r.TryDecodeAsNil() {
					yyv4517[yyj4517] = LocalObjectReference{}
				} else {
					yyv4519 := &yyv4517[yyj4517]
					yyv4519.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4517 := 0
		for ; !r.CheckBreak(); yyj4517++ {

			if yyj4517 >= len(yyv4517) {
				yyv4517 = append(yyv4517, LocalObjectReference{}) // var yyz4517 LocalObjectReference
				yyc4517 = true
			}
			yyh4517.ElemContainerState(yyj4517)
			if yyj4517 < len(yyv4517) {
				if r.TryDecodeAsNil() {
					yyv4517[yyj4517] = LocalObjectReference{}
				} else {
					yyv4520 := &yyv4517[yyj4517]
					yyv4520.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4517 < len(yyv4517) {
			yyv4517 = yyv4517[:yyj4517]
			yyc4517 = true
		} else if yyj4517 == 0 && yyv4517 == nil {
			yyv4517 = []LocalObjectReference{}
			yyc4517 = true
		}
	}
	yyh4517.End()
	if yyc4517 {
		*v = yyv4517
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4521 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4522 := &yyv4521
		yy4522.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4523 := *v
	yyh4523, yyl4523 := z.DecSliceHelperStart()
	var yyc4523 bool
	if yyl4523 == 0 {
		if yyv4523 == nil {
			yyv4523 = []PodCondition{}
			yyc4523 = true
		} else if len(yyv4523) != 0 {
			yyv4523 = yyv4523[:0]
			yyc4523 = true
		}
	} else if yyl4523 > 0 {
		var yyrr4523, yyrl4523 int
		var yyrt4523 bool
		if yyl4523 > cap(yyv4523) {

			yyrg4523 := len(yyv4523) > 0
			yyv24523 := yyv4523
			yyrl4523, yyrt4523 = z.DecInferLen(yyl4523, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4523 {
				if yyrl4523 <= cap(yyv4523) {
					yyv4523 = yyv4523[:yyrl4523]
				} else {
					yyv4523 = make([]PodCondition, yyrl4523)
				}
			} else {
				yyv4523 = make([]PodCondition, yyrl4523)
			}
			yyc4523 = true
			yyrr4523 = len(yyv4523)
			if yyrg4523 {
				copy(yyv4523, yyv24523)
			}
		} else if yyl4523 != len(yyv4523) {
			yyv4523 = yyv4523[:yyl4523]
			yyc4523 = true
		}
		yyj4523 := 0
		for ; yyj4523 < yyrr4523; yyj4523++ {
			yyh4523.ElemContainerState(yyj4523)
			if r.TryDecodeAsNil() {
				yyv4523[yyj4523] = PodCondition{}
			} else {
				yyv4524 := &yyv4523[yyj4523]
				yyv4524.CodecDecodeSelf(d)
			}

		}
		if yyrt4523 {
			for ; yyj4523 < yyl4523; yyj4523++ {
				yyv4523 = append(yyv4523, PodCondition{})
				yyh4523.ElemContainerState(yyj4523)
				if r.TryDecodeAsNil() {
					yyv4523[yyj4523] = PodCondition{}
				} else {
					yyv4525 := &yyv4523[yyj4523]
					yyv4525.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4523 := 0
		for ; !r.CheckBreak(); yyj4523++ {

			if yyj4523 >= len(yyv4523) {
				yyv4523 = append(yyv4523, PodCondition{}) // var yyz4523 PodCondition
				yyc4523 = true
			}
			yyh4523.ElemContainerState(yyj4523)
			if yyj4523 < len(yyv4523) {
				if r.TryDecodeAsNil() {
					yyv4523[yyj4523] = PodCondition{}
				} else {
					yyv4526 := &yyv4523[yyj4523]
					yyv4526.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4523 < len(yyv4523) {
			yyv4523 = yyv4523[:yyj4523]
			yyc4523 = true
		} else if yyj4523 == 0 && yyv4523 == nil {
			yyv4523 = []PodCondition{}
			yyc4523 = true
		}
	}
	yyh4523.End()
	if yyc4523 {
		*v = yyv4523
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4527 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4528 := &yyv4527
		yy4528.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4529 := *v
	yyh4529, yyl4529 := z.DecSliceHelperStart()
	var yyc4529 bool
	if yyl4529 == 0 {
		if yyv4529 == nil {
			yyv4529 = []ContainerStatus{}
			yyc4529 = true
		} else if len(yyv4529) != 0 {
			yyv4529 = yyv4529[:0]
			yyc4529 = true
		}
	} else if yyl4529 > 0 {
		var yyrr4529, yyrl4529 int
		var yyrt4529 bool
		if yyl4529 > cap(yyv4529) {

			yyrg4529 := len(yyv4529) > 0
			yyv24529 := yyv4529
			yyrl4529, yyrt4529 = z.DecInferLen(yyl4529, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4529 {
				if yyrl4529 <= cap(yyv4529) {
					yyv4529 = yyv4529[:yyrl4529]
				} else {
					yyv4529 = make([]ContainerStatus, yyrl4529)
				}
			} else {
				yyv4529 = make([]ContainerStatus, yyrl4529)
			}
			yyc4529 = true
			yyrr4529 = len(yyv4529)
			if yyrg4529 {
				copy(yyv4529, yyv24529)
			}
		} else if yyl4529 != len(yyv4529) {
			yyv4529 = yyv4529[:yyl4529]
			yyc4529 = true
		}
		yyj4529 := 0
		for ; yyj4529 < yyrr4529; yyj4529++ {
			yyh4529.ElemContainerState(yyj4529)
			if r.TryDecodeAsNil() {
				yyv4529[yyj4529] = ContainerStatus{}
			} else {
				yyv4530 := &yyv4529[yyj4529]
				yyv4530.CodecDecodeSelf(d)
			}

		}
		if yyrt4529 {
			for ; yyj4529 < yyl4529; yyj4529++ {
				yyv4529 = append(yyv4529, ContainerStatus{})
				yyh4529.ElemContainerState(yyj4529)
				if r.TryDecodeAsNil() {
					yyv4529[yyj4529] = ContainerStatus{}
				} else {
					yyv4531 := &yyv4529[yyj4529]
					yyv4531.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4529 := 0
		for ; !r.CheckBreak(); yyj4529++ {

			if yyj4529 >= len(yyv4529) {
				yyv4529 = append(yyv4529, ContainerStatus{}) // var yyz4529 ContainerStatus
				yyc4529 = true
			}
			yyh4529.ElemContainerState(yyj4529)
			if yyj4529 < len(yyv4529) {
				if r.TryDecodeAsNil() {
					yyv4529[yyj4529] = ContainerStatus{}
				} else {
					yyv4532 := &yyv4529[yyj4529]
					yyv4532.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4529 < len(yyv4529) {
			yyv4529 = yyv4529[:yyj4529]
			yyc4529 = true
		} else if yyj4529 == 0 && yyv4529 == nil {
			yyv4529 = []ContainerStatus{}
			yyc4529 = true
		}
	}
	yyh4529.End()
	if yyc4529 {
		*v = yyv4529
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4533 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4534 := &yyv4533
		yy4534.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4535 := *v
	yyh4535, yyl4535 := z.DecSliceHelperStart()
	var yyc4535 bool
	if yyl4535 == 0 {
		if yyv4535 == nil {
			yyv4535 = []Pod{}
			yyc4535 = true
		} else if len(yyv4535) != 0 {
			yyv4535 = yyv4535[:0]
			yyc4535 = true
		}
	} else if yyl4535 > 0 {
		var yyrr4535, yyrl4535 int
		var yyrt4535 bool
		if yyl4535 > cap(yyv4535) {

			yyrg4535 := len(yyv4535) > 0
			yyv24535 := yyv4535
			yyrl4535, yyrt4535 = z.DecInferLen(yyl4535, z.DecBasicHandle().MaxInitLen, 648)
			if yyrt4535 {
				if yyrl4535 <= cap(yyv4535) {
					yyv4535 = yyv4535[:yyrl4535]
				} else {
					yyv4535 = make([]Pod, yyrl4535)
				}
			} else {
				yyv4535 = make([]Pod, yyrl4535)
			}
			yyc4535 = true
			yyrr4535 = len(yyv4535)
			if yyrg4535 {
				copy(yyv4535, yyv24535)
			}
		} else if yyl4535 != len(yyv4535) {
			yyv4535 = yyv4535[:yyl4535]
			yyc4535 = true
		}
		yyj4535 := 0
		for ; yyj4535 < yyrr4535; yyj4535++ {
			yyh4535.ElemContainerState(yyj4535)
			if r.TryDecodeAsNil() {
				yyv4535[yyj4535] = Pod{}
			} else {
				yyv4536 := &yyv4535[yyj4535]
				yyv4536.CodecDecodeSelf(d)
			}

		}
		if yyrt4535 {
			for ; yyj4535 < yyl4535; yyj4535++ {
				yyv4535 = append(yyv4535, Pod{})
				yyh4535.ElemContainerState(yyj4535)
				if r.TryDecodeAsNil() {
					yyv4535[yyj4535] = Pod{}
				} else {
					yyv4537 := &yyv4535[yyj4535]
					yyv4537.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4535 := 0
		for ; !r.CheckBreak(); yyj4535++ {

			if yyj4535 >= len(yyv4535) {
				yyv4535 = append(yyv4535, Pod{}) // var yyz4535 Pod
				yyc4535 = true
			}
			yyh4535.ElemContainerState(yyj4535)
			if yyj4535 < len(yyv4535) {
				if r.TryDecodeAsNil() {
					yyv4535[yyj4535] = Pod{}
				} else {
					yyv4538 := &yyv4535[yyj4535]
					yyv4538.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4535 < len(yyv4535) {
			yyv4535 = yyv4535[:yyj4535]
			yyc4535 = true
		} else if yyj4535 == 0 && yyv4535 == nil {
			yyv4535 = []Pod{}
			yyc4535 = true
		}
	}
	yyh4535.End()
	if yyc4535 {
		*v = yyv4535
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4539 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4540 := &yyv4539
		yy4540.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4541 := *v
	yyh4541, yyl4541 := z.DecSliceHelperStart()
	var yyc4541 bool
	if yyl4541 == 0 {
		if yyv4541 == nil {
			yyv4541 = []PodTemplate{}
			yyc4541 = true
		} else if len(yyv4541) != 0 {
			yyv4541 = yyv4541[:0]
			yyc4541 = true
		}
	} else if yyl4541 > 0 {
		var yyrr4541, yyrl4541 int
		var yyrt4541 bool
		if yyl4541 > cap(yyv4541) {

			yyrg4541 := len(yyv4541) > 0
			yyv24541 := yyv4541
			yyrl4541, yyrt4541 = z.DecInferLen(yyl4541, z.DecBasicHandle().MaxInitLen, 696)
			if yyrt4541 {
				if yyrl4541 <= cap(yyv4541) {
					yyv4541 = yyv4541[:yyrl4541]
				} else {
					yyv4541 = make([]PodTemplate, yyrl4541)
				}
			} else {
				yyv4541 = make([]PodTemplate, yyrl4541)
			}
			yyc4541 = true
			yyrr4541 = len(yyv4541)
			if yyrg4541 {
				copy(yyv4541, yyv24541)
			}
		} else if yyl4541 != len(yyv4541) {
			yyv4541 = yyv4541[:yyl4541]
			yyc4541 = true
		}
		yyj4541 := 0
		for ; yyj4541 < yyrr4541; yyj4541++ {
			yyh4541.ElemContainerState(yyj4541)
			if r.TryDecodeAsNil() {
				yyv4541[yyj4541] = PodTemplate{}
			} else {
				yyv4542 := &yyv4541[yyj4541]
				yyv4542.CodecDecodeSelf(d)
			}

		}
		if yyrt4541 {
			for ; yyj4541 < yyl4541; yyj4541++ {
				yyv4541 = append(yyv4541, PodTemplate{})
				yyh4541.ElemContainerState(yyj4541)
				if r.TryDecodeAsNil() {
					yyv4541[yyj4541] = PodTemplate{}
				} else {
					yyv4543 := &yyv4541[yyj4541]
					yyv4543.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4541 := 0
		for ; !r.CheckBreak(); yyj4541++ {

			if yyj4541 >= len(yyv4541) {
				yyv4541 = append(yyv4541, PodTemplate{}) // var yyz4541 PodTemplate
				yyc4541 = true
			}
			yyh4541.ElemContainerState(yyj4541)
			if yyj4541 < len(yyv4541) {
				if r.TryDecodeAsNil() {
					yyv4541[yyj4541] = PodTemplate{}
				} else {
					yyv4544 := &yyv4541[yyj4541]
					yyv4544.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4541 < len(yyv4541) {
			yyv4541 = yyv4541[:yyj4541]
			yyc4541 = true
		} else if yyj4541 == 0 && yyv4541 == nil {
			yyv4541 = []PodTemplate{}
			yyc4541 = true
		}
	}
	yyh4541.End()
	if yyc4541 {
		*v = yyv4541
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4545 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4546 := &yyv4545
		yy4546.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4547 := *v
	yyh4547, yyl4547 := z.DecSliceHelperStart()
	var yyc4547 bool
	if yyl4547 == 0 {
		if yyv4547 == nil {
			yyv4547 = []ReplicationController{}
			yyc4547 = true
		} else if len(yyv4547) != 0 {
			yyv4547 = yyv4547[:0]
			yyc4547 = true
		}
	} else if yyl4547 > 0 {
		var yyrr4547, yyrl4547 int
		var yyrt4547 bool
		if yyl4547 > cap(yyv4547) {

			yyrg4547 := len(yyv4547) > 0
			yyv24547 := yyv4547
			yyrl4547, yyrt4547 = z.DecInferLen(yyl4547, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4547 {
				if yyrl4547 <= cap(yyv4547) {
					yyv4547 = yyv4547[:yyrl4547]
				} else {
					yyv4547 = make([]ReplicationController, yyrl4547)
				}
			} else {
				yyv4547 = make([]ReplicationController, yyrl4547)
			}
			yyc4547 = true
			yyrr4547 = len(yyv4547)
			if yyrg4547 {
				copy(yyv4547, yyv24547)
			}
		} else if yyl4547 != len(yyv4547) {
			yyv4547 = yyv4547[:yyl4547]
			yyc4547 = true
		}
		yyj4547 := 0
		for ; yyj4547 < yyrr4547; yyj4547++ {
			yyh4547.ElemContainerState(yyj4547)
			if r.TryDecodeAsNil() {
				yyv4547[yyj4547] = ReplicationController{}
			} else {
				yyv4548 := &yyv4547[yyj4547]
				yyv4548.CodecDecodeSelf(d)
			}

		}
		if yyrt4547 {
			for ; yyj4547 < yyl4547; yyj4547++ {
				yyv4547 = append(yyv4547, ReplicationController{})
				yyh4547.ElemContainerState(yyj4547)
				if r.TryDecodeAsNil() {
					yyv4547[yyj4547] = ReplicationController{}
				} else {
					yyv4549 := &yyv4547[yyj4547]
					yyv4549.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4547 := 0
		for ; !r.CheckBreak(); yyj4547++ {

			if yyj4547 >= len(yyv4547) {
				yyv4547 = append(yyv4547, ReplicationController{}) // var yyz4547 ReplicationController
				yyc4547 = true
			}
			yyh4547.ElemContainerState(yyj4547)
			if yyj4547 < len(yyv4547) {
				if r.TryDecodeAsNil() {
					yyv4547[yyj4547] = ReplicationController{}
				} else {
					yyv4550 := &yyv4547[yyj4547]
					yyv4550.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4547 < len(yyv4547) {
			yyv4547 = yyv4547[:yyj4547]
			yyc4547 = true
		} else if yyj4547 == 0 && yyv4547 == nil {
			yyv4547 = []ReplicationController{}
			yyc4547 = true
		}
	}
	yyh4547.End()
	if yyc4547 {
		*v = yyv4547
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4551 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4552 := &yyv4551
		yy4552.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4553 := *v
	yyh4553, yyl4553 := z.DecSliceHelperStart()
	var yyc4553 bool
	if yyl4553 == 0 {
		if yyv4553 == nil {
			yyv4553 = []LoadBalancerIngress{}
			yyc4553 = true
		} else if len(yyv4553) != 0 {
			yyv4553 = yyv4553[:0]
			yyc4553 = true
		}
	} else if yyl4553 > 0 {
		var yyrr4553, yyrl4553 int
		var yyrt4553 bool
		if yyl4553 > cap(yyv4553) {

			yyrg4553 := len(yyv4553) > 0
			yyv24553 := yyv4553
			yyrl4553, yyrt4553 = z.DecInferLen(yyl4553, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4553 {
				if yyrl4553 <= cap(yyv4553) {
					yyv4553 = yyv4553[:yyrl4553]
				} else {
					yyv4553 = make([]LoadBalancerIngress, yyrl4553)
				}
			} else {
				yyv4553 = make([]LoadBalancerIngress, yyrl4553)
			}
			yyc4553 = true
			yyrr4553 = len(yyv4553)
			if yyrg4553 {
				copy(yyv4553, yyv24553)
			}
		} else if yyl4553 != len(yyv4553) {
			yyv4553 = yyv4553[:yyl4553]
			yyc4553 = true
		}
		yyj4553 := 0
		for ; yyj4553 < yyrr4553; yyj4553++ {
			yyh4553.ElemContainerState(yyj4553)
			if r.TryDecodeAsNil() {
				yyv4553[yyj4553] = LoadBalancerIngress{}
			} else {
				yyv4554 := &yyv4553[yyj4553]
				yyv4554.CodecDecodeSelf(d)
			}

		}
		if yyrt4553 {
			for ; yyj4553 < yyl4553; yyj4553++ {
				yyv4553 = append(yyv4553, LoadBalancerIngress{})
				yyh4553.ElemContainerState(yyj4553)
				if r.TryDecodeAsNil() {
					yyv4553[yyj4553] = LoadBalancerIngress{}
				} else {
					yyv4555 := &yyv4553[yyj4553]
					yyv4555.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4553 := 0
		for ; !r.CheckBreak(); yyj4553++ {

			if yyj4553 >= len(yyv4553) {
				yyv4553 = append(yyv4553, LoadBalancerIngress{}) // var yyz4553 LoadBalancerIngress
				yyc4553 = true
			}
			yyh4553.ElemContainerState(yyj4553)
			if yyj4553 < len(yyv4553) {
				if r.TryDecodeAsNil() {
					yyv4553[yyj4553] = LoadBalancerIngress{}
				} else {
					yyv4556 := &yyv4553[yyj4553]
					yyv4556.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4553 < len(yyv4553) {
			yyv4553 = yyv4553[:yyj4553]
			yyc4553 = true
		} else if yyj4553 == 0 && yyv4553 == nil {
			yyv4553 = []LoadBalancerIngress{}
			yyc4553 = true
		}
	}
	yyh4553.End()
	if yyc4553 {
		*v = yyv4553
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4557 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4558 := &yyv4557
		yy4558.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4559 := *v
	yyh4559, yyl4559 := z.DecSliceHelperStart()
	var yyc4559 bool
	if yyl4559 == 0 {
		if yyv4559 == nil {
			yyv4559 = []ServicePort{}
			yyc4559 = true
		} else if len(yyv4559) != 0 {
			yyv4559 = yyv4559[:0]
			yyc4559 = true
		}
	} else if yyl4559 > 0 {
		var yyrr4559, yyrl4559 int
		var yyrt4559 bool
		if yyl4559 > cap(yyv4559) {

			yyrg4559 := len(yyv4559) > 0
			yyv24559 := yyv4559
			yyrl4559, yyrt4559 = z.DecInferLen(yyl4559, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4559 {
				if yyrl4559 <= cap(yyv4559) {
					yyv4559 = yyv4559[:yyrl4559]
				} else {
					yyv4559 = make([]ServicePort, yyrl4559)
				}
			} else {
				yyv4559 = make([]ServicePort, yyrl4559)
			}
			yyc4559 = true
			yyrr4559 = len(yyv4559)
			if yyrg4559 {
				copy(yyv4559, yyv24559)
			}
		} else if yyl4559 != len(yyv4559) {
			yyv4559 = yyv4559[:yyl4559]
			yyc4559 = true
		}
		yyj4559 := 0
		for ; yyj4559 < yyrr4559; yyj4559++ {
			yyh4559.ElemContainerState(yyj4559)
			if r.TryDecodeAsNil() {
				yyv4559[yyj4559] = ServicePort{}
			} else {
				yyv4560 := &yyv4559[yyj4559]
				yyv4560.CodecDecodeSelf(d)
			}

		}
		if yyrt4559 {
			for ; yyj4559 < yyl4559; yyj4559++ {
				yyv4559 = append(yyv4559, ServicePort{})
				yyh4559.ElemContainerState(yyj4559)
				if r.TryDecodeAsNil() {
					yyv4559[yyj4559] = ServicePort{}
				} else {
					yyv4561 := &yyv4559[yyj4559]
					yyv4561.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4559 := 0
		for ; !r.CheckBreak(); yyj4559++ {

			if yyj4559 >= len(yyv4559) {
				yyv4559 = append(yyv4559, ServicePort{}) // var yyz4559 ServicePort
				yyc4559 = true
			}
			yyh4559.ElemContainerState(yyj4559)
			if yyj4559 < len(yyv4559) {
				if r.TryDecodeAsNil() {
					yyv4559[yyj4559] = ServicePort{}
				} else {
					yyv4562 := &yyv4559[yyj4559]
					yyv4562.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4559 < len(yyv4559) {
			yyv4559 = yyv4559[:yyj4559]
			yyc4559 = true
		} else if yyj4559 == 0 && yyv4559 == nil {
			yyv4559 = []ServicePort{}
			yyc4559 = true
		}
	}
	yyh4559.End()
	if yyc4559 {
		*v = yyv4559
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4563 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4564 := &yyv4563
		yy4564.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4565 := *v
	yyh4565, yyl4565 := z.DecSliceHelperStart()
	var yyc4565 bool
	if yyl4565 == 0 {
		if yyv4565 == nil {
			yyv4565 = []Service{}
			yyc4565 = true
		} else if len(yyv4565) != 0 {
			yyv4565 = yyv4565[:0]
			yyc4565 = true
		}
	} else if yyl4565 > 0 {
		var yyrr4565, yyrl4565 int
		var yyrt4565 bool
		if yyl4565 > cap(yyv4565) {

			yyrg4565 := len(yyv4565) > 0
			yyv24565 := yyv4565
			yyrl4565, yyrt4565 = z.DecInferLen(yyl4565, z.DecBasicHandle().MaxInitLen, 432)
			if yyrt4565 {
				if yyrl4565 <= cap(yyv4565) {
					yyv4565 = yyv4565[:yyrl4565]
				} else {
					yyv4565 = make([]Service, yyrl4565)
				}
			} else {
				yyv4565 = make([]Service, yyrl4565)
			}
			yyc4565 = true
			yyrr4565 = len(yyv4565)
			if yyrg4565 {
				copy(yyv4565, yyv24565)
			}
		} else if yyl4565 != len(yyv4565) {
			yyv4565 = yyv4565[:yyl4565]
			yyc4565 = true
		}
		yyj4565 := 0
		for ; yyj4565 < yyrr4565; yyj4565++ {
			yyh4565.ElemContainerState(yyj4565)
			if r.TryDecodeAsNil() {
				yyv4565[yyj4565] = Service{}
			} else {
				yyv4566 := &yyv4565[yyj4565]
				yyv4566.CodecDecodeSelf(d)
			}

		}
		if yyrt4565 {
			for ; yyj4565 < yyl4565; yyj4565++ {
				yyv4565 = append(yyv4565, Service{})
				yyh4565.ElemContainerState(yyj4565)
				if r.TryDecodeAsNil() {
					yyv4565[yyj4565] = Service{}
				} else {
					yyv4567 := &yyv4565[yyj4565]
					yyv4567.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4565 := 0
		for ; !r.CheckBreak(); yyj4565++ {

			if yyj4565 >= len(yyv4565) {
				yyv4565 = append(yyv4565, Service{}) // var yyz4565 Service
				yyc4565 = true
			}
			yyh4565.ElemContainerState(yyj4565)
			if yyj4565 < len(yyv4565) {
				if r.TryDecodeAsNil() {
					yyv4565[yyj4565] = Service{}
				} else {
					yyv4568 := &yyv4565[yyj4565]
					yyv4568.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4565 < len(yyv4565) {
			yyv4565 = yyv4565[:yyj4565]
			yyc4565 = true
		} else if yyj4565 == 0 && yyv4565 == nil {
			yyv4565 = []Service{}
			yyc4565 = true
		}
	}
	yyh4565.End()
	if yyc4565 {
		*v = yyv4565
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4569 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4570 := &yyv4569
		yy4570.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4571 := *v
	yyh4571, yyl4571 := z.DecSliceHelperStart()
	var yyc4571 bool
	if yyl4571 == 0 {
		if yyv4571 == nil {
			yyv4571 = []ObjectReference{}
			yyc4571 = true
		} else if len(yyv4571) != 0 {
			yyv4571 = yyv4571[:0]
			yyc4571 = true
		}
	} else if yyl4571 > 0 {
		var yyrr4571, yyrl4571 int
		var yyrt4571 bool
		if yyl4571 > cap(yyv4571) {

			yyrg4571 := len(yyv4571) > 0
			yyv24571 := yyv4571
			yyrl4571, yyrt4571 = z.DecInferLen(yyl4571, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4571 {
				if yyrl4571 <= cap(yyv4571) {
					yyv4571 = yyv4571[:yyrl4571]
				} else {
					yyv4571 = make([]ObjectReference, yyrl4571)
				}
			} else {
				yyv4571 = make([]ObjectReference, yyrl4571)
			}
			yyc4571 = true
			yyrr4571 = len(yyv4571)
			if yyrg4571 {
				copy(yyv4571, yyv24571)
			}
		} else if yyl4571 != len(yyv4571) {
			yyv4571 = yyv4571[:yyl4571]
			yyc4571 = true
		}
		yyj4571 := 0
		for ; yyj4571 < yyrr4571; yyj4571++ {
			yyh4571.ElemContainerState(yyj4571)
			if r.TryDecodeAsNil() {
				yyv4571[yyj4571] = ObjectReference{}
			} else {
				yyv4572 := &yyv4571[yyj4571]
				yyv4572.CodecDecodeSelf(d)
			}

		}
		if yyrt4571 {
			for ; yyj4571 < yyl4571; yyj4571++ {
				yyv4571 = append(yyv4571, ObjectReference{})
				yyh4571.ElemContainerState(yyj4571)
				if r.TryDecodeAsNil() {
					yyv4571[yyj4571] = ObjectReference{}
				} else {
					yyv4573 := &yyv4571[yyj4571]
					yyv4573.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4571 := 0
		for ; !r.CheckBreak(); yyj4571++ {

			if yyj4571 >= len(yyv4571) {
				yyv4571 = append(yyv4571, ObjectReference{}) // var yyz4571 ObjectReference
				yyc4571 = true
			}
			yyh4571.ElemContainerState(yyj4571)
			if yyj4571 < len(yyv4571) {
				if r.TryDecodeAsNil() {
					yyv4571[yyj4571] = ObjectReference{}
				} else {
					yyv4574 := &yyv4571[yyj4571]
					yyv4574.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4571 < len(yyv4571) {
			yyv4571 = yyv4571[:yyj4571]
			yyc4571 = true
		} else if yyj4571 == 0 && yyv4571 == nil {
			yyv4571 = []ObjectReference{}
			yyc4571 = true
		}
	}
	yyh4571.End()
	if yyc4571 {
		*v = yyv4571
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4575 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4576 := &yyv4575
		yy4576.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4577 := *v
	yyh4577, yyl4577 := z.DecSliceHelperStart()
	var yyc4577 bool
	if yyl4577 == 0 {
		if yyv4577 == nil {
			yyv4577 = []ServiceAccount{}
			yyc4577 = true
		} else if len(yyv4577) != 0 {
			yyv4577 = yyv4577[:0]
			yyc4577 = true
		}
	} else if yyl4577 > 0 {
		var yyrr4577, yyrl4577 int
		var yyrt4577 bool
		if yyl4577 > cap(yyv4577) {

			yyrg4577 := len(yyv4577) > 0
			yyv24577 := yyv4577
			yyrl4577, yyrt4577 = z.DecInferLen(yyl4577, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4577 {
				if yyrl4577 <= cap(yyv4577) {
					yyv4577 = yyv4577[:yyrl4577]
				} else {
					yyv4577 = make([]ServiceAccount, yyrl4577)
				}
			} else {
				yyv4577 = make([]ServiceAccount, yyrl4577)
			}
			yyc4577 = true
			yyrr4577 = len(yyv4577)
			if yyrg4577 {
				copy(yyv4577, yyv24577)
			}
		} else if yyl4577 != len(yyv4577) {
			yyv4577 = yyv4577[:yyl4577]
			yyc4577 = true
		}
		yyj4577 := 0
		for ; yyj4577 < yyrr4577; yyj4577++ {
			yyh4577.ElemContainerState(yyj4577)
			if r.TryDecodeAsNil() {
				yyv4577[yyj4577] = ServiceAccount{}
			} else {
				yyv4578 := &yyv4577[yyj4577]
				yyv4578.CodecDecodeSelf(d)
			}

		}
		if yyrt4577 {
			for ; yyj4577 < yyl4577; yyj4577++ {
				yyv4577 = append(yyv4577, ServiceAccount{})
				yyh4577.ElemContainerState(yyj4577)
				if r.TryDecodeAsNil() {
					yyv4577[yyj4577] = ServiceAccount{}
				} else {
					yyv4579 := &yyv4577[yyj4577]
					yyv4579.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4577 := 0
		for ; !r.CheckBreak(); yyj4577++ {

			if yyj4577 >= len(yyv4577) {
				yyv4577 = append(yyv4577, ServiceAccount{}) // var yyz4577 ServiceAccount
				yyc4577 = true
			}
			yyh4577.ElemContainerState(yyj4577)
			if yyj4577 < len(yyv4577) {
				if r.TryDecodeAsNil() {
					yyv4577[yyj4577] = ServiceAccount{}
				} else {
					yyv4580 := &yyv4577[yyj4577]
					yyv4580.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4577 < len(yyv4577) {
			yyv4577 = yyv4577[:yyj4577]
			yyc4577 = true
		} else if yyj4577 == 0 && yyv4577 == nil {
			yyv4577 = []ServiceAccount{}
			yyc4577 = true
		}
	}
	yyh4577.End()
	if yyc4577 {
		*v = yyv4577
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4581 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4582 := &yyv4581
		yy4582.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4583 := *v
	yyh4583, yyl4583 := z.DecSliceHelperStart()
	var yyc4583 bool
	if yyl4583 == 0 {
		if yyv4583 == nil {
			yyv4583 = []EndpointSubset{}
			yyc4583 = true
		} else if len(yyv4583) != 0 {
			yyv4583 = yyv4583[:0]
			yyc4583 = true
		}
	} else if yyl4583 > 0 {
		var yyrr4583, yyrl4583 int
		var yyrt4583 bool
		if yyl4583 > cap(yyv4583) {

			yyrg4583 := len(yyv4583) > 0
			yyv24583 := yyv4583
			yyrl4583, yyrt4583 = z.DecInferLen(yyl4583, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4583 {
				if yyrl4583 <= cap(yyv4583) {
					yyv4583 = yyv4583[:yyrl4583]
				} else {
					yyv4583 = make([]EndpointSubset, yyrl4583)
				}
			} else {
				yyv4583 = make([]EndpointSubset, yyrl4583)
			}
			yyc4583 = true
			yyrr4583 = len(yyv4583)
			if yyrg4583 {
				copy(yyv4583, yyv24583)
			}
		} else if yyl4583 != len(yyv4583) {
			yyv4583 = yyv4583[:yyl4583]
			yyc4583 = true
		}
		yyj4583 := 0
		for ; yyj4583 < yyrr4583; yyj4583++ {
			yyh4583.ElemContainerState(yyj4583)
			if r.TryDecodeAsNil() {
				yyv4583[yyj4583] = EndpointSubset{}
			} else {
				yyv4584 := &yyv4583[yyj4583]
				yyv4584.CodecDecodeSelf(d)
			}

		}
		if yyrt4583 {
			for ; yyj4583 < yyl4583; yyj4583++ {
				yyv4583 = append(yyv4583, EndpointSubset{})
				yyh4583.ElemContainerState(yyj4583)
				if r.TryDecodeAsNil() {
					yyv4583[yyj4583] = EndpointSubset{}
				} else {
					yyv4585 := &yyv4583[yyj4583]
					yyv4585.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4583 := 0
		for ; !r.CheckBreak(); yyj4583++ {

			if yyj4583 >= len(yyv4583) {
				yyv4583 = append(yyv4583, EndpointSubset{}) // var yyz4583 EndpointSubset
				yyc4583 = true
			}
			yyh4583.ElemContainerState(yyj4583)
			if yyj4583 < len(yyv4583) {
				if r.TryDecodeAsNil() {
					yyv4583[yyj4583] = EndpointSubset{}
				} else {
					yyv4586 := &yyv4583[yyj4583]
					yyv4586.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4583 < len(yyv4583) {
			yyv4583 = yyv4583[:yyj4583]
			yyc4583 = true
		} else if yyj4583 == 0 && yyv4583 == nil {
			yyv4583 = []EndpointSubset{}
			yyc4583 = true
		}
	}
	yyh4583.End()
	if yyc4583 {
		*v = yyv4583
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4587 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4588 := &yyv4587
		yy4588.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4589 := *v
	yyh4589, yyl4589 := z.DecSliceHelperStart()
	var yyc4589 bool
	if yyl4589 == 0 {
		if yyv4589 == nil {
			yyv4589 = []EndpointAddress{}
			yyc4589 = true
		} else if len(yyv4589) != 0 {
			yyv4589 = yyv4589[:0]
			yyc4589 = true
		}
	} else if yyl4589 > 0 {
		var yyrr4589, yyrl4589 int
		var yyrt4589 bool
		if yyl4589 > cap(yyv4589) {

			yyrg4589 := len(yyv4589) > 0
			yyv24589 := yyv4589
			yyrl4589, yyrt4589 = z.DecInferLen(yyl4589, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4589 {
				if yyrl4589 <= cap(yyv4589) {
					yyv4589 = yyv4589[:yyrl4589]
				} else {
					yyv4589 = make([]EndpointAddress, yyrl4589)
				}
			} else {
				yyv4589 = make([]EndpointAddress, yyrl4589)
			}
			yyc4589 = true
			yyrr4589 = len(yyv4589)
			if yyrg4589 {
				copy(yyv4589, yyv24589)
			}
		} else if yyl4589 != len(yyv4589) {
			yyv4589 = yyv4589[:yyl4589]
			yyc4589 = true
		}
		yyj4589 := 0
		for ; yyj4589 < yyrr4589; yyj4589++ {
			yyh4589.ElemContainerState(yyj4589)
			if r.TryDecodeAsNil() {
				yyv4589[yyj4589] = EndpointAddress{}
			} else {
				yyv4590 := &yyv4589[yyj4589]
				yyv4590.CodecDecodeSelf(d)
			}

		}
		if yyrt4589 {
			for ; yyj4589 < yyl4589; yyj4589++ {
				yyv4589 = append(yyv4589, EndpointAddress{})
				yyh4589.ElemContainerState(yyj4589)
				if r.TryDecodeAsNil() {
					yyv4589[yyj4589] = EndpointAddress{}
				} else {
					yyv4591 := &yyv4589[yyj4589]
					yyv4591.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4589 := 0
		for ; !r.CheckBreak(); yyj4589++ {

			if yyj4589 >= len(yyv4589) {
				yyv4589 = append(yyv4589, EndpointAddress{}) // var yyz4589 EndpointAddress
				yyc4589 = true
			}
			yyh4589.ElemContainerState(yyj4589)
			if yyj4589 < len(yyv4589) {
				if r.TryDecodeAsNil() {
					yyv4589[yyj4589] = EndpointAddress{}
				} else {
					yyv4592 := &yyv4589[yyj4589]
					yyv4592.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4589 < len(yyv4589) {
			yyv4589 = yyv4589[:yyj4589]
			yyc4589 = true
		} else if yyj4589 == 0 && yyv4589 == nil {
			yyv4589 = []EndpointAddress{}
			yyc4589 = true
		}
	}
	yyh4589.End()
	if yyc4589 {
		*v = yyv4589
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4593 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4594 := &yyv4593
		yy4594.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4595 := *v
	yyh4595, yyl4595 := z.DecSliceHelperStart()
	var yyc4595 bool
	if yyl4595 == 0 {
		if yyv4595 == nil {
			yyv4595 = []EndpointPort{}
			yyc4595 = true
		} else if len(yyv4595) != 0 {
			yyv4595 = yyv4595[:0]
			yyc4595 = true
		}
	} else if yyl4595 > 0 {
		var yyrr4595, yyrl4595 int
		var yyrt4595 bool
		if yyl4595 > cap(yyv4595) {

			yyrg4595 := len(yyv4595) > 0
			yyv24595 := yyv4595
			yyrl4595, yyrt4595 = z.DecInferLen(yyl4595, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4595 {
				if yyrl4595 <= cap(yyv4595) {
					yyv4595 = yyv4595[:yyrl4595]
				} else {
					yyv4595 = make([]EndpointPort, yyrl4595)
				}
			} else {
				yyv4595 = make([]EndpointPort, yyrl4595)
			}
			yyc4595 = true
			yyrr4595 = len(yyv4595)
			if yyrg4595 {
				copy(yyv4595, yyv24595)
			}
		} else if yyl4595 != len(yyv4595) {
			yyv4595 = yyv4595[:yyl4595]
			yyc4595 = true
		}
		yyj4595 := 0
		for ; yyj4595 < yyrr4595; yyj4595++ {
			yyh4595.ElemContainerState(yyj4595)
			if r.TryDecodeAsNil() {
				yyv4595[yyj4595] = EndpointPort{}
			} else {
				yyv4596 := &yyv4595[yyj4595]
				yyv4596.CodecDecodeSelf(d)
			}

		}
		if yyrt4595 {
			for ; yyj4595 < yyl4595; yyj4595++ {
				yyv4595 = append(yyv4595, EndpointPort{})
				yyh4595.ElemContainerState(yyj4595)
				if r.TryDecodeAsNil() {
					yyv4595[yyj4595] = EndpointPort{}
				} else {
					yyv4597 := &yyv4595[yyj4595]
					yyv4597.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4595 := 0
		for ; !r.CheckBreak(); yyj4595++ {

			if yyj4595 >= len(yyv4595) {
				yyv4595 = append(yyv4595, EndpointPort{}) // var yyz4595 EndpointPort
				yyc4595 = true
			}
			yyh4595.ElemContainerState(yyj4595)
			if yyj4595 < len(yyv4595) {
				if r.TryDecodeAsNil() {
					yyv4595[yyj4595] = EndpointPort{}
				} else {
					yyv4598 := &yyv4595[yyj4595]
					yyv4598.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4595 < len(yyv4595) {
			yyv4595 = yyv4595[:yyj4595]
			yyc4595 = true
		} else if yyj4595 == 0 && yyv4595 == nil {
			yyv4595 = []EndpointPort{}
			yyc4595 = true
		}
	}
	yyh4595.End()
	if yyc4595 {
		*v = yyv4595
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4599 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4600 := &yyv4599
		yy4600.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4601 := *v
	yyh4601, yyl4601 := z.DecSliceHelperStart()
	var yyc4601 bool
	if yyl4601 == 0 {
		if yyv4601 == nil {
			yyv4601 = []Endpoints{}
			yyc4601 = true
		} else if len(yyv4601) != 0 {
			yyv4601 = yyv4601[:0]
			yyc4601 = true
		}
	} else if yyl4601 > 0 {
		var yyrr4601, yyrl4601 int
		var yyrt4601 bool
		if yyl4601 > cap(yyv4601) {

			yyrg4601 := len(yyv4601) > 0
			yyv24601 := yyv4601
			yyrl4601, yyrt4601 = z.DecInferLen(yyl4601, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4601 {
				if yyrl4601 <= cap(yyv4601) {
					yyv4601 = yyv4601[:yyrl4601]
				} else {
					yyv4601 = make([]Endpoints, yyrl4601)
				}
			} else {
				yyv4601 = make([]Endpoints, yyrl4601)
			}
			yyc4601 = true
			yyrr4601 = len(yyv4601)
			if yyrg4601 {
				copy(yyv4601, yyv24601)
			}
		} else if yyl4601 != len(yyv4601) {
			yyv4601 = yyv4601[:yyl4601]
			yyc4601 = true
		}
		yyj4601 := 0
		for ; yyj4601 < yyrr4601; yyj4601++ {
			yyh4601.ElemContainerState(yyj4601)
			if r.TryDecodeAsNil() {
				yyv4601[yyj4601] = Endpoints{}
			} else {
				yyv4602 := &yyv4601[yyj4601]
				yyv4602.CodecDecodeSelf(d)
			}

		}
		if yyrt4601 {
			for ; yyj4601 < yyl4601; yyj4601++ {
				yyv4601 = append(yyv4601, Endpoints{})
				yyh4601.ElemContainerState(yyj4601)
				if r.TryDecodeAsNil() {
					yyv4601[yyj4601] = Endpoints{}
				} else {
					yyv4603 := &yyv4601[yyj4601]
					yyv4603.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4601 := 0
		for ; !r.CheckBreak(); yyj4601++ {

			if yyj4601 >= len(yyv4601) {
				yyv4601 = append(yyv4601, Endpoints{}) // var yyz4601 Endpoints
				yyc4601 = true
			}
			yyh4601.ElemContainerState(yyj4601)
			if yyj4601 < len(yyv4601) {
				if r.TryDecodeAsNil() {
					yyv4601[yyj4601] = Endpoints{}
				} else {
					yyv4604 := &yyv4601[yyj4601]
					yyv4604.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4601 < len(yyv4601) {
			yyv4601 = yyv4601[:yyj4601]
			yyc4601 = true
		} else if yyj4601 == 0 && yyv4601 == nil {
			yyv4601 = []Endpoints{}
			yyc4601 = true
		}
	}
	yyh4601.End()
	if yyc4601 {
		*v = yyv4601
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4605 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4606 := &yyv4605
		yy4606.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4607 := *v
	yyh4607, yyl4607 := z.DecSliceHelperStart()
	var yyc4607 bool
	if yyl4607 == 0 {
		if yyv4607 == nil {
			yyv4607 = []NodeCondition{}
			yyc4607 = true
		} else if len(yyv4607) != 0 {
			yyv4607 = yyv4607[:0]
			yyc4607 = true
		}
	} else if yyl4607 > 0 {
		var yyrr4607, yyrl4607 int
		var yyrt4607 bool
		if yyl4607 > cap(yyv4607) {

			yyrg4607 := len(yyv4607) > 0
			yyv24607 := yyv4607
			yyrl4607, yyrt4607 = z.DecInferLen(yyl4607, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4607 {
				if yyrl4607 <= cap(yyv4607) {
					yyv4607 = yyv4607[:yyrl4607]
				} else {
					yyv4607 = make([]NodeCondition, yyrl4607)
				}
			} else {
				yyv4607 = make([]NodeCondition, yyrl4607)
			}
			yyc4607 = true
			yyrr4607 = len(yyv4607)
			if yyrg4607 {
				copy(yyv4607, yyv24607)
			}
		} else if yyl4607 != len(yyv4607) {
			yyv4607 = yyv4607[:yyl4607]
			yyc4607 = true
		}
		yyj4607 := 0
		for ; yyj4607 < yyrr4607; yyj4607++ {
			yyh4607.ElemContainerState(yyj4607)
			if r.TryDecodeAsNil() {
				yyv4607[yyj4607] = NodeCondition{}
			} else {
				yyv4608 := &yyv4607[yyj4607]
				yyv4608.CodecDecodeSelf(d)
			}

		}
		if yyrt4607 {
			for ; yyj4607 < yyl4607; yyj4607++ {
				yyv4607 = append(yyv4607, NodeCondition{})
				yyh4607.ElemContainerState(yyj4607)
				if r.TryDecodeAsNil() {
					yyv4607[yyj4607] = NodeCondition{}
				} else {
					yyv4609 := &yyv4607[yyj4607]
					yyv4609.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4607 := 0
		for ; !r.CheckBreak(); yyj4607++ {

			if yyj4607 >= len(yyv4607) {
				yyv4607 = append(yyv4607, NodeCondition{}) // var yyz4607 NodeCondition
				yyc4607 = true
			}
			yyh4607.ElemContainerState(yyj4607)
			if yyj4607 < len(yyv4607) {
				if r.TryDecodeAsNil() {
					yyv4607[yyj4607] = NodeCondition{}
				} else {
					yyv4610 := &yyv4607[yyj4607]
					yyv4610.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4607 < len(yyv4607) {
			yyv4607 = yyv4607[:yyj4607]
			yyc4607 = true
		} else if yyj4607 == 0 && yyv4607 == nil {
			yyv4607 = []NodeCondition{}
			yyc4607 = true
		}
	}
	yyh4607.End()
	if yyc4607 {
		*v = yyv4607
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4611 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4612 := &yyv4611
		yy4612.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4613 := *v
	yyh4613, yyl4613 := z.DecSliceHelperStart()
	var yyc4613 bool
	if yyl4613 == 0 {
		if yyv4613 == nil {
			yyv4613 = []NodeAddress{}
			yyc4613 = true
		} else if len(yyv4613) != 0 {
			yyv4613 = yyv4613[:0]
			yyc4613 = true
		}
	} else if yyl4613 > 0 {
		var yyrr4613, yyrl4613 int
		var yyrt4613 bool
		if yyl4613 > cap(yyv4613) {

			yyrg4613 := len(yyv4613) > 0
			yyv24613 := yyv4613
			yyrl4613, yyrt4613 = z.DecInferLen(yyl4613, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4613 {
				if yyrl4613 <= cap(yyv4613) {
					yyv4613 = yyv4613[:yyrl4613]
				} else {
					yyv4613 = make([]NodeAddress, yyrl4613)
				}
			} else {
				yyv4613 = make([]NodeAddress, yyrl4613)
			}
			yyc4613 = true
			yyrr4613 = len(yyv4613)
			if yyrg4613 {
				copy(yyv4613, yyv24613)
			}
		} else if yyl4613 != len(yyv4613) {
			yyv4613 = yyv4613[:yyl4613]
			yyc4613 = true
		}
		yyj4613 := 0
		for ; yyj4613 < yyrr4613; yyj4613++ {
			yyh4613.ElemContainerState(yyj4613)
			if r.TryDecodeAsNil() {
				yyv4613[yyj4613] = NodeAddress{}
			} else {
				yyv4614 := &yyv4613[yyj4613]
				yyv4614.CodecDecodeSelf(d)
			}

		}
		if yyrt4613 {
			for ; yyj4613 < yyl4613; yyj4613++ {
				yyv4613 = append(yyv4613, NodeAddress{})
				yyh4613.ElemContainerState(yyj4613)
				if r.TryDecodeAsNil() {
					yyv4613[yyj4613] = NodeAddress{}
				} else {
					yyv4615 := &yyv4613[yyj4613]
					yyv4615.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4613 := 0
		for ; !r.CheckBreak(); yyj4613++ {

			if yyj4613 >= len(yyv4613) {
				yyv4613 = append(yyv4613, NodeAddress{}) // var yyz4613 NodeAddress
				yyc4613 = true
			}
			yyh4613.ElemContainerState(yyj4613)
			if yyj4613 < len(yyv4613) {
				if r.TryDecodeAsNil() {
					yyv4613[yyj4613] = NodeAddress{}
				} else {
					yyv4616 := &yyv4613[yyj4613]
					yyv4616.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4613 < len(yyv4613) {
			yyv4613 = yyv4613[:yyj4613]
			yyc4613 = true
		} else if yyj4613 == 0 && yyv4613 == nil {
			yyv4613 = []NodeAddress{}
			yyc4613 = true
		}
	}
	yyh4613.End()
	if yyc4613 {
		*v = yyv4613
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4617 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4618 := &yyv4617
		yy4618.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4619 := *v
	yyh4619, yyl4619 := z.DecSliceHelperStart()
	var yyc4619 bool
	if yyl4619 == 0 {
		if yyv4619 == nil {
			yyv4619 = []ContainerImage{}
			yyc4619 = true
		} else if len(yyv4619) != 0 {
			yyv4619 = yyv4619[:0]
			yyc4619 = true
		}
	} else if yyl4619 > 0 {
		var yyrr4619, yyrl4619 int
		var yyrt4619 bool
		if yyl4619 > cap(yyv4619) {

			yyrg4619 := len(yyv4619) > 0
			yyv24619 := yyv4619
			yyrl4619, yyrt4619 = z.DecInferLen(yyl4619, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4619 {
				if yyrl4619 <= cap(yyv4619) {
					yyv4619 = yyv4619[:yyrl4619]
				} else {
					yyv4619 = make([]ContainerImage, yyrl4619)
				}
			} else {
				yyv4619 = make([]ContainerImage, yyrl4619)
			}
			yyc4619 = true
			yyrr4619 = len(yyv4619)
			if yyrg4619 {
				copy(yyv4619, yyv24619)
			}
		} else if yyl4619 != len(yyv4619) {
			yyv4619 = yyv4619[:yyl4619]
			yyc4619 = true
		}
		yyj4619 := 0
		for ; yyj4619 < yyrr4619; yyj4619++ {
			yyh4619.ElemContainerState(yyj4619)
			if r.TryDecodeAsNil() {
				yyv4619[yyj4619] = ContainerImage{}
			} else {
				yyv4620 := &yyv4619[yyj4619]
				yyv4620.CodecDecodeSelf(d)
			}

		}
		if yyrt4619 {
			for ; yyj4619 < yyl4619; yyj4619++ {
				yyv4619 = append(yyv4619, ContainerImage{})
				yyh4619.ElemContainerState(yyj4619)
				if r.TryDecodeAsNil() {
					yyv4619[yyj4619] = ContainerImage{}
				} else {
					yyv4621 := &yyv4619[yyj4619]
					yyv4621.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4619 := 0
		for ; !r.CheckBreak(); yyj4619++ {

			if yyj4619 >= len(yyv4619) {
				yyv4619 = append(yyv4619, ContainerImage{}) // var yyz4619 ContainerImage
				yyc4619 = true
			}
			yyh4619.ElemContainerState(yyj4619)
			if yyj4619 < len(yyv4619) {
				if r.TryDecodeAsNil() {
					yyv4619[yyj4619] = ContainerImage{}
				} else {
					yyv4622 := &yyv4619[yyj4619]
					yyv4622.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4619 < len(yyv4619) {
			yyv4619 = yyv4619[:yyj4619]
			yyc4619 = true
		} else if yyj4619 == 0 && yyv4619 == nil {
			yyv4619 = []ContainerImage{}
			yyc4619 = true
		}
	}
	yyh4619.End()
	if yyc4619 {
		*v = yyv4619
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4623 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4623.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4624 := *v
	yyh4624, yyl4624 := z.DecSliceHelperStart()
	var yyc4624 bool
	if yyl4624 == 0 {
		if yyv4624 == nil {
			yyv4624 = []UniqueVolumeName{}
			yyc4624 = true
		} else if len(yyv4624) != 0 {
			yyv4624 = yyv4624[:0]
			yyc4624 = true
		}
	} else if yyl4624 > 0 {
		var yyrr4624, yyrl4624 int
		var yyrt4624 bool
		if yyl4624 > cap(yyv4624) {

			yyrl4624, yyrt4624 = z.DecInferLen(yyl4624, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4624 {
				if yyrl4624 <= cap(yyv4624) {
					yyv4624 = yyv4624[:yyrl4624]
				} else {
					yyv4624 = make([]UniqueVolumeName, yyrl4624)
				}
			} else {
				yyv4624 = make([]UniqueVolumeName, yyrl4624)
			}
			yyc4624 = true
			yyrr4624 = len(yyv4624)
		} else if yyl4624 != len(yyv4624) {
			yyv4624 = yyv4624[:yyl4624]
			yyc4624 = true
		}
		yyj4624 := 0
		for ; yyj4624 < yyrr4624; yyj4624++ {
			yyh4624.ElemContainerState(yyj4624)
			if r.TryDecodeAsNil() {
				yyv4624[yyj4624] = ""
			} else {
				yyv4624[yyj4624] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4624 {
			for ; yyj4624 < yyl4624; yyj4624++ {
				yyv4624 = append(yyv4624, "")
				yyh4624.ElemContainerState(yyj4624)
				if r.TryDecodeAsNil() {
					yyv4624[yyj4624] = ""
				} else {
					yyv4624[yyj4624] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4624 := 0
		for ; !r.CheckBreak(); yyj4624++ {

			if yyj4624 >= len(yyv4624) {
				yyv4624 = append(yyv4624, "") // var yyz4624 UniqueVolumeName
				yyc4624 = true
			}
			yyh4624.ElemContainerState(yyj4624)
			if yyj4624 < len(yyv4624) {
				if r.TryDecodeAsNil() {
					yyv4624[yyj4624] = ""
				} else {
					yyv4624[yyj4624] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4624 < len(yyv4624) {
			yyv4624 = yyv4624[:yyj4624]
			yyc4624 = true
		} else if yyj4624 == 0 && yyv4624 == nil {
			yyv4624 = []UniqueVolumeName{}
			yyc4624 = true
		}
	}
	yyh4624.End()
	if yyc4624 {
		*v = yyv4624
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4628 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4629 := &yyv4628
		yy4629.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4630 := *v
	yyh4630, yyl4630 := z.DecSliceHelperStart()
	var yyc4630 bool
	if yyl4630 == 0 {
		if yyv4630 == nil {
			yyv4630 = []AttachedVolume{}
			yyc4630 = true
		} else if len(yyv4630) != 0 {
			yyv4630 = yyv4630[:0]
			yyc4630 = true
		}
	} else if yyl4630 > 0 {
		var yyrr4630, yyrl4630 int
		var yyrt4630 bool
		if yyl4630 > cap(yyv4630) {

			yyrg4630 := len(yyv4630) > 0
			yyv24630 := yyv4630
			yyrl4630, yyrt4630 = z.DecInferLen(yyl4630, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4630 {
				if yyrl4630 <= cap(yyv4630) {
					yyv4630 = yyv4630[:yyrl4630]
				} else {
					yyv4630 = make([]AttachedVolume, yyrl4630)
				}
			} else {
				yyv4630 = make([]AttachedVolume, yyrl4630)
			}
			yyc4630 = true
			yyrr4630 = len(yyv4630)
			if yyrg4630 {
				copy(yyv4630, yyv24630)
			}
		} else if yyl4630 != len(yyv4630) {
			yyv4630 = yyv4630[:yyl4630]
			yyc4630 = true
		}
		yyj4630 := 0
		for ; yyj4630 < yyrr4630; yyj4630++ {
			yyh4630.ElemContainerState(yyj4630)
			if r.TryDecodeAsNil() {
				yyv4630[yyj4630] = AttachedVolume{}
			} else {
				yyv4631 := &yyv4630[yyj4630]
				yyv4631.CodecDecodeSelf(d)
			}

		}
		if yyrt4630 {
			for ; yyj4630 < yyl4630; yyj4630++ {
				yyv4630 = append(yyv4630, AttachedVolume{})
				yyh4630.ElemContainerState(yyj4630)
				if r.TryDecodeAsNil() {
					yyv4630[yyj4630] = AttachedVolume{}
				} else {
					yyv4632 := &yyv4630[yyj4630]
					yyv4632.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4630 := 0
		for ; !r.CheckBreak(); yyj4630++ {

			if yyj4630 >= len(yyv4630) {
				yyv4630 = append(yyv4630, AttachedVolume{}) // var yyz4630 AttachedVolume
				yyc4630 = true
			}
			yyh4630.ElemContainerState(yyj4630)
			if yyj4630 < len(yyv4630) {
				if r.TryDecodeAsNil() {
					yyv4630[yyj4630] = AttachedVolume{}
				} else {
					yyv4633 := &yyv4630[yyj4630]
					yyv4633.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4630 < len(yyv4630) {
			yyv4630 = yyv4630[:yyj4630]
			yyc4630 = true
		} else if yyj4630 == 0 && yyv4630 == nil {
			yyv4630 = []AttachedVolume{}
			yyc4630 = true
		}
	}
	yyh4630.End()
	if yyc4630 {
		*v = yyv4630
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4634 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4635 := &yyv4634
		yy4635.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4636 := *v
	yyh4636, yyl4636 := z.DecSliceHelperStart()
	var yyc4636 bool
	if yyl4636 == 0 {
		if yyv4636 == nil {
			yyv4636 = []PreferAvoidPodsEntry{}
			yyc4636 = true
		} else if len(yyv4636) != 0 {
			yyv4636 = yyv4636[:0]
			yyc4636 = true
		}
	} else if yyl4636 > 0 {
		var yyrr4636, yyrl4636 int
		var yyrt4636 bool
		if yyl4636 > cap(yyv4636) {

			yyrg4636 := len(yyv4636) > 0
			yyv24636 := yyv4636
			yyrl4636, yyrt4636 = z.DecInferLen(yyl4636, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4636 {
				if yyrl4636 <= cap(yyv4636) {
					yyv4636 = yyv4636[:yyrl4636]
				} else {
					yyv4636 = make([]PreferAvoidPodsEntry, yyrl4636)
				}
			} else {
				yyv4636 = make([]PreferAvoidPodsEntry, yyrl4636)
			}
			yyc4636 = true
			yyrr4636 = len(yyv4636)
			if yyrg4636 {
				copy(yyv4636, yyv24636)
			}
		} else if yyl4636 != len(yyv4636) {
			yyv4636 = yyv4636[:yyl4636]
			yyc4636 = true
		}
		yyj4636 := 0
		for ; yyj4636 < yyrr4636; yyj4636++ {
			yyh4636.ElemContainerState(yyj4636)
			if r.TryDecodeAsNil() {
				yyv4636[yyj4636] = PreferAvoidPodsEntry{}
			} else {
				yyv4637 := &yyv4636[yyj4636]
				yyv4637.CodecDecodeSelf(d)
			}

		}
		if yyrt4636 {
			for ; yyj4636 < yyl4636; yyj4636++ {
				yyv4636 = append(yyv4636, PreferAvoidPodsEntry{})
				yyh4636.ElemContainerState(yyj4636)
				if r.TryDecodeAsNil() {
					yyv4636[yyj4636] = PreferAvoidPodsEntry{}
				} else {
					yyv4638 := &yyv4636[yyj4636]
					yyv4638.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4636 := 0
		for ; !r.CheckBreak(); yyj4636++ {

			if yyj4636 >= len(yyv4636) {
				yyv4636 = append(yyv4636, PreferAvoidPodsEntry{}) // var yyz4636 PreferAvoidPodsEntry
				yyc4636 = true
			}
			yyh4636.ElemContainerState(yyj4636)
			if yyj4636 < len(yyv4636) {
				if r.TryDecodeAsNil() {
					yyv4636[yyj4636] = PreferAvoidPodsEntry{}
				} else {
					yyv4639 := &yyv4636[yyj4636]
					yyv4639.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4636 < len(yyv4636) {
			yyv4636 = yyv4636[:yyj4636]
			yyc4636 = true
		} else if yyj4636 == 0 && yyv4636 == nil {
			yyv4636 = []PreferAvoidPodsEntry{}
			yyc4636 = true
		}
	}
	yyh4636.End()
	if yyc4636 {
		*v = yyv4636
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4640, yyv4640 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4640.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4641 := &yyv4640
		yym4642 := z.EncBinary()
		_ = yym4642
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4641) {
		} else if !yym4642 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4641)
		} else {
			z.EncFallback(yy4641)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4643 := *v
	yyl4643 := r.ReadMapStart()
	yybh4643 := z.DecBasicHandle()
	if yyv4643 == nil {
		yyrl4643, _ := z.DecInferLen(yyl4643, yybh4643.MaxInitLen, 72)
		yyv4643 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4643)
		*v = yyv4643
	}
	var yymk4643 ResourceName
	var yymv4643 pkg3_resource.Quantity
	var yymg4643 bool
	if yybh4643.MapValueReset {
		yymg4643 = true
	}
	if yyl4643 > 0 {
		for yyj4643 := 0; yyj4643 < yyl4643; yyj4643++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4643 = ""
			} else {
				yymk4643 = ResourceName(r.DecodeString())
			}

			if yymg4643 {
				yymv4643 = yyv4643[yymk4643]
			} else {
				yymv4643 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4643 = pkg3_resource.Quantity{}
			} else {
				yyv4645 := &yymv4643
				yym4646 := z.DecBinary()
				_ = yym4646
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4645) {
				} else if !yym4646 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4645)
				} else {
					z.DecFallback(yyv4645, false)
				}
			}

			if yyv4643 != nil {
				yyv4643[yymk4643] = yymv4643
			}
		}
	} else if yyl4643 < 0 {
		for yyj4643 := 0; !r.CheckBreak(); yyj4643++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4643 = ""
			} else {
				yymk4643 = ResourceName(r.DecodeString())
			}

			if yymg4643 {
				yymv4643 = yyv4643[yymk4643]
			} else {
				yymv4643 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4643 = pkg3_resource.Quantity{}
			} else {
				yyv4648 := &yymv4643
				yym4649 := z.DecBinary()
				_ = yym4649
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4648) {
				} else if !yym4649 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4648)
				} else {
					z.DecFallback(yyv4648, false)
				}
			}

			if yyv4643 != nil {
				yyv4643[yymk4643] = yymv4643
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4650 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4651 := &yyv4650
		yy4651.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4652 := *v
	yyh4652, yyl4652 := z.DecSliceHelperStart()
	var yyc4652 bool
	if yyl4652 == 0 {
		if yyv4652 == nil {
			yyv4652 = []Node{}
			yyc4652 = true
		} else if len(yyv4652) != 0 {
			yyv4652 = yyv4652[:0]
			yyc4652 = true
		}
	} else if yyl4652 > 0 {
		var yyrr4652, yyrl4652 int
		var yyrt4652 bool
		if yyl4652 > cap(yyv4652) {

			yyrg4652 := len(yyv4652) > 0
			yyv24652 := yyv4652
			yyrl4652, yyrt4652 = z.DecInferLen(yyl4652, z.DecBasicHandle().MaxInitLen, 616)
			if yyrt4652 {
				if yyrl4652 <= cap(yyv4652) {
					yyv4652 = yyv4652[:yyrl4652]
				} else {
					yyv4652 = make([]Node, yyrl4652)
				}
			} else {
				yyv4652 = make([]Node, yyrl4652)
			}
			yyc4652 = true
			yyrr4652 = len(yyv4652)
			if yyrg4652 {
				copy(yyv4652, yyv24652)
			}
		} else if yyl4652 != len(yyv4652) {
			yyv4652 = yyv4652[:yyl4652]
			yyc4652 = true
		}
		yyj4652 := 0
		for ; yyj4652 < yyrr4652; yyj4652++ {
			yyh4652.ElemContainerState(yyj4652)
			if r.TryDecodeAsNil() {
				yyv4652[yyj4652] = Node{}
			} else {
				yyv4653 := &yyv4652[yyj4652]
				yyv4653.CodecDecodeSelf(d)
			}

		}
		if yyrt4652 {
			for ; yyj4652 < yyl4652; yyj4652++ {
				yyv4652 = append(yyv4652, Node{})
				yyh4652.ElemContainerState(yyj4652)
				if r.TryDecodeAsNil() {
					yyv4652[yyj4652] = Node{}
				} else {
					yyv4654 := &yyv4652[yyj4652]
					yyv4654.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4652 := 0
		for ; !r.CheckBreak(); yyj4652++ {

			if yyj4652 >= len(yyv4652) {
				yyv4652 = append(yyv4652, Node{}) // var yyz4652 Node
				yyc4652 = true
			}
			yyh4652.ElemContainerState(yyj4652)
			if yyj4652 < len(yyv4652) {
				if r.TryDecodeAsNil() {
					yyv4652[yyj4652] = Node{}
				} else {
					yyv4655 := &yyv4652[yyj4652]
					yyv4655.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4652 < len(yyv4652) {
			yyv4652 = yyv4652[:yyj4652]
			yyc4652 = true
		} else if yyj4652 == 0 && yyv4652 == nil {
			yyv4652 = []Node{}
			yyc4652 = true
		}
	}
	yyh4652.End()
	if yyc4652 {
		*v = yyv4652
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4656 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4656.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4657 := *v
	yyh4657, yyl4657 := z.DecSliceHelperStart()
	var yyc4657 bool
	if yyl4657 == 0 {
		if yyv4657 == nil {
			yyv4657 = []FinalizerName{}
			yyc4657 = true
		} else if len(yyv4657) != 0 {
			yyv4657 = yyv4657[:0]
			yyc4657 = true
		}
	} else if yyl4657 > 0 {
		var yyrr4657, yyrl4657 int
		var yyrt4657 bool
		if yyl4657 > cap(yyv4657) {

			yyrl4657, yyrt4657 = z.DecInferLen(yyl4657, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4657 {
				if yyrl4657 <= cap(yyv4657) {
					yyv4657 = yyv4657[:yyrl4657]
				} else {
					yyv4657 = make([]FinalizerName, yyrl4657)
				}
			} else {
				yyv4657 = make([]FinalizerName, yyrl4657)
			}
			yyc4657 = true
			yyrr4657 = len(yyv4657)
		} else if yyl4657 != len(yyv4657) {
			yyv4657 = yyv4657[:yyl4657]
			yyc4657 = true
		}
		yyj4657 := 0
		for ; yyj4657 < yyrr4657; yyj4657++ {
			yyh4657.ElemContainerState(yyj4657)
			if r.TryDecodeAsNil() {
				yyv4657[yyj4657] = ""
			} else {
				yyv4657[yyj4657] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4657 {
			for ; yyj4657 < yyl4657; yyj4657++ {
				yyv4657 = append(yyv4657, "")
				yyh4657.ElemContainerState(yyj4657)
				if r.TryDecodeAsNil() {
					yyv4657[yyj4657] = ""
				} else {
					yyv4657[yyj4657] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4657 := 0
		for ; !r.CheckBreak(); yyj4657++ {

			if yyj4657 >= len(yyv4657) {
				yyv4657 = append(yyv4657, "") // var yyz4657 FinalizerName
				yyc4657 = true
			}
			yyh4657.ElemContainerState(yyj4657)
			if yyj4657 < len(yyv4657) {
				if r.TryDecodeAsNil() {
					yyv4657[yyj4657] = ""
				} else {
					yyv4657[yyj4657] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4657 < len(yyv4657) {
			yyv4657 = yyv4657[:yyj4657]
			yyc4657 = true
		} else if yyj4657 == 0 && yyv4657 == nil {
			yyv4657 = []FinalizerName{}
			yyc4657 = true
		}
	}
	yyh4657.End()
	if yyc4657 {
		*v = yyv4657
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4661 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4662 := &yyv4661
		yy4662.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4663 := *v
	yyh4663, yyl4663 := z.DecSliceHelperStart()
	var yyc4663 bool
	if yyl4663 == 0 {
		if yyv4663 == nil {
			yyv4663 = []Namespace{}
			yyc4663 = true
		} else if len(yyv4663) != 0 {
			yyv4663 = yyv4663[:0]
			yyc4663 = true
		}
	} else if yyl4663 > 0 {
		var yyrr4663, yyrl4663 int
		var yyrt4663 bool
		if yyl4663 > cap(yyv4663) {

			yyrg4663 := len(yyv4663) > 0
			yyv24663 := yyv4663
			yyrl4663, yyrt4663 = z.DecInferLen(yyl4663, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4663 {
				if yyrl4663 <= cap(yyv4663) {
					yyv4663 = yyv4663[:yyrl4663]
				} else {
					yyv4663 = make([]Namespace, yyrl4663)
				}
			} else {
				yyv4663 = make([]Namespace, yyrl4663)
			}
			yyc4663 = true
			yyrr4663 = len(yyv4663)
			if yyrg4663 {
				copy(yyv4663, yyv24663)
			}
		} else if yyl4663 != len(yyv4663) {
			yyv4663 = yyv4663[:yyl4663]
			yyc4663 = true
		}
		yyj4663 := 0
		for ; yyj4663 < yyrr4663; yyj4663++ {
			yyh4663.ElemContainerState(yyj4663)
			if r.TryDecodeAsNil() {
				yyv4663[yyj4663] = Namespace{}
			} else {
				yyv4664 := &yyv4663[yyj4663]
				yyv4664.CodecDecodeSelf(d)
			}

		}
		if yyrt4663 {
			for ; yyj4663 < yyl4663; yyj4663++ {
				yyv4663 = append(yyv4663, Namespace{})
				yyh4663.ElemContainerState(yyj4663)
				if r.TryDecodeAsNil() {
					yyv4663[yyj4663] = Namespace{}
				} else {
					yyv4665 := &yyv4663[yyj4663]
					yyv4665.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4663 := 0
		for ; !r.CheckBreak(); yyj4663++ {

			if yyj4663 >= len(yyv4663) {
				yyv4663 = append(yyv4663, Namespace{}) // var yyz4663 Namespace
				yyc4663 = true
			}
			yyh4663.ElemContainerState(yyj4663)
			if yyj4663 < len(yyv4663) {
				if r.TryDecodeAsNil() {
					yyv4663[yyj4663] = Namespace{}
				} else {
					yyv4666 := &yyv4663[yyj4663]
					yyv4666.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4663 < len(yyv4663) {
			yyv4663 = yyv4663[:yyj4663]
			yyc4663 = true
		} else if yyj4663 == 0 && yyv4663 == nil {
			yyv4663 = []Namespace{}
			yyc4663 = true
		}
	}
	yyh4663.End()
	if yyc4663 {
		*v = yyv4663
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4667 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4668 := &yyv4667
		yy4668.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4669 := *v
	yyh4669, yyl4669 := z.DecSliceHelperStart()
	var yyc4669 bool
	if yyl4669 == 0 {
		if yyv4669 == nil {
			yyv4669 = []Event{}
			yyc4669 = true
		} else if len(yyv4669) != 0 {
			yyv4669 = yyv4669[:0]
			yyc4669 = true
		}
	} else if yyl4669 > 0 {
		var yyrr4669, yyrl4669 int
		var yyrt4669 bool
		if yyl4669 > cap(yyv4669) {

			yyrg4669 := len(yyv4669) > 0
			yyv24669 := yyv4669
			yyrl4669, yyrt4669 = z.DecInferLen(yyl4669, z.DecBasicHandle().MaxInitLen, 488)
			if yyrt4669 {
				if yyrl4669 <= cap(yyv4669) {
					yyv4669 = yyv4669[:yyrl4669]
				} else {
					yyv4669 = make([]Event, yyrl4669)
				}
			} else {
				yyv4669 = make([]Event, yyrl4669)
			}
			yyc4669 = true
			yyrr4669 = len(yyv4669)
			if yyrg4669 {
				copy(yyv4669, yyv24669)
			}
		} else if yyl4669 != len(yyv4669) {
			yyv4669 = yyv4669[:yyl4669]
			yyc4669 = true
		}
		yyj4669 := 0
		for ; yyj4669 < yyrr4669; yyj4669++ {
			yyh4669.ElemContainerState(yyj4669)
			if r.TryDecodeAsNil() {
				yyv4669[yyj4669] = Event{}
			} else {
				yyv4670 := &yyv4669[yyj4669]
				yyv4670.CodecDecodeSelf(d)
			}

		}
		if yyrt4669 {
			for ; yyj4669 < yyl4669; yyj4669++ {
				yyv4669 = append(yyv4669, Event{})
				yyh4669.ElemContainerState(yyj4669)
				if r.TryDecodeAsNil() {
					yyv4669[yyj4669] = Event{}
				} else {
					yyv4671 := &yyv4669[yyj4669]
					yyv4671.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4669 := 0
		for ; !r.CheckBreak(); yyj4669++ {

			if yyj4669 >= len(yyv4669) {
				yyv4669 = append(yyv4669, Event{}) // var yyz4669 Event
				yyc4669 = true
			}
			yyh4669.ElemContainerState(yyj4669)
			if yyj4669 < len(yyv4669) {
				if r.TryDecodeAsNil() {
					yyv4669[yyj4669] = Event{}
				} else {
					yyv4672 := &yyv4669[yyj4669]
					yyv4672.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4669 < len(yyv4669) {
			yyv4669 = yyv4669[:yyj4669]
			yyc4669 = true
		} else if yyj4669 == 0 && yyv4669 == nil {
			yyv4669 = []Event{}
			yyc4669 = true
		}
	}
	yyh4669.End()
	if yyc4669 {
		*v = yyv4669
	}
}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg5_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4673 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4674 := &yyv4673
		yym4675 := z.EncBinary()
		_ = yym4675
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4674) {
		} else if !yym4675 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4674)
		} else {
			z.EncFallback(yy4674)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg5_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4676 := *v
	yyh4676, yyl4676 := z.DecSliceHelperStart()
	var yyc4676 bool
	if yyl4676 == 0 {
		if yyv4676 == nil {
			yyv4676 = []pkg5_runtime.RawExtension{}
			yyc4676 = true
		} else if len(yyv4676) != 0 {
			yyv4676 = yyv4676[:0]
			yyc4676 = true
		}
	} else if yyl4676 > 0 {
		var yyrr4676, yyrl4676 int
		var yyrt4676 bool
		if yyl4676 > cap(yyv4676) {

			yyrg4676 := len(yyv4676) > 0
			yyv24676 := yyv4676
			yyrl4676, yyrt4676 = z.DecInferLen(yyl4676, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4676 {
				if yyrl4676 <= cap(yyv4676) {
					yyv4676 = yyv4676[:yyrl4676]
				} else {
					yyv4676 = make([]pkg5_runtime.RawExtension, yyrl4676)
				}
			} else {
				yyv4676 = make([]pkg5_runtime.RawExtension, yyrl4676)
			}
			yyc4676 = true
			yyrr4676 = len(yyv4676)
			if yyrg4676 {
				copy(yyv4676, yyv24676)
			}
		} else if yyl4676 != len(yyv4676) {
			yyv4676 = yyv4676[:yyl4676]
			yyc4676 = true
		}
		yyj4676 := 0
		for ; yyj4676 < yyrr4676; yyj4676++ {
			yyh4676.ElemContainerState(yyj4676)
			if r.TryDecodeAsNil() {
				yyv4676[yyj4676] = pkg5_runtime.RawExtension{}
			} else {
				yyv4677 := &yyv4676[yyj4676]
				yym4678 := z.DecBinary()
				_ = yym4678
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4677) {
				} else if !yym4678 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4677)
				} else {
					z.DecFallback(yyv4677, false)
				}
			}

		}
		if yyrt4676 {
			for ; yyj4676 < yyl4676; yyj4676++ {
				yyv4676 = append(yyv4676, pkg5_runtime.RawExtension{})
				yyh4676.ElemContainerState(yyj4676)
				if r.TryDecodeAsNil() {
					yyv4676[yyj4676] = pkg5_runtime.RawExtension{}
				} else {
					yyv4679 := &yyv4676[yyj4676]
					yym4680 := z.DecBinary()
					_ = yym4680
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4679) {
					} else if !yym4680 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4679)
					} else {
						z.DecFallback(yyv4679, false)
					}
				}

			}
		}

	} else {
		yyj4676 := 0
		for ; !r.CheckBreak(); yyj4676++ {

			if yyj4676 >= len(yyv4676) {
				yyv4676 = append(yyv4676, pkg5_runtime.RawExtension{}) // var yyz4676 pkg5_runtime.RawExtension
				yyc4676 = true
			}
			yyh4676.ElemContainerState(yyj4676)
			if yyj4676 < len(yyv4676) {
				if r.TryDecodeAsNil() {
					yyv4676[yyj4676] = pkg5_runtime.RawExtension{}
				} else {
					yyv4681 := &yyv4676[yyj4676]
					yym4682 := z.DecBinary()
					_ = yym4682
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4681) {
					} else if !yym4682 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4681)
					} else {
						z.DecFallback(yyv4681, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4676 < len(yyv4676) {
			yyv4676 = yyv4676[:yyj4676]
			yyc4676 = true
		} else if yyj4676 == 0 && yyv4676 == nil {
			yyv4676 = []pkg5_runtime.RawExtension{}
			yyc4676 = true
		}
	}
	yyh4676.End()
	if yyc4676 {
		*v = yyv4676
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4683 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4684 := &yyv4683
		yy4684.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4685 := *v
	yyh4685, yyl4685 := z.DecSliceHelperStart()
	var yyc4685 bool
	if yyl4685 == 0 {
		if yyv4685 == nil {
			yyv4685 = []LimitRangeItem{}
			yyc4685 = true
		} else if len(yyv4685) != 0 {
			yyv4685 = yyv4685[:0]
			yyc4685 = true
		}
	} else if yyl4685 > 0 {
		var yyrr4685, yyrl4685 int
		var yyrt4685 bool
		if yyl4685 > cap(yyv4685) {

			yyrg4685 := len(yyv4685) > 0
			yyv24685 := yyv4685
			yyrl4685, yyrt4685 = z.DecInferLen(yyl4685, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4685 {
				if yyrl4685 <= cap(yyv4685) {
					yyv4685 = yyv4685[:yyrl4685]
				} else {
					yyv4685 = make([]LimitRangeItem, yyrl4685)
				}
			} else {
				yyv4685 = make([]LimitRangeItem, yyrl4685)
			}
			yyc4685 = true
			yyrr4685 = len(yyv4685)
			if yyrg4685 {
				copy(yyv4685, yyv24685)
			}
		} else if yyl4685 != len(yyv4685) {
			yyv4685 = yyv4685[:yyl4685]
			yyc4685 = true
		}
		yyj4685 := 0
		for ; yyj4685 < yyrr4685; yyj4685++ {
			yyh4685.ElemContainerState(yyj4685)
			if r.TryDecodeAsNil() {
				yyv4685[yyj4685] = LimitRangeItem{}
			} else {
				yyv4686 := &yyv4685[yyj4685]
				yyv4686.CodecDecodeSelf(d)
			}

		}
		if yyrt4685 {
			for ; yyj4685 < yyl4685; yyj4685++ {
				yyv4685 = append(yyv4685, LimitRangeItem{})
				yyh4685.ElemContainerState(yyj4685)
				if r.TryDecodeAsNil() {
					yyv4685[yyj4685] = LimitRangeItem{}
				} else {
					yyv4687 := &yyv4685[yyj4685]
					yyv4687.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4685 := 0
		for ; !r.CheckBreak(); yyj4685++ {

			if yyj4685 >= len(yyv4685) {
				yyv4685 = append(yyv4685, LimitRangeItem{}) // var yyz4685 LimitRangeItem
				yyc4685 = true
			}
			yyh4685.ElemContainerState(yyj4685)
			if yyj4685 < len(yyv4685) {
				if r.TryDecodeAsNil() {
					yyv4685[yyj4685] = LimitRangeItem{}
				} else {
					yyv4688 := &yyv4685[yyj4685]
					yyv4688.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4685 < len(yyv4685) {
			yyv4685 = yyv4685[:yyj4685]
			yyc4685 = true
		} else if yyj4685 == 0 && yyv4685 == nil {
			yyv4685 = []LimitRangeItem{}
			yyc4685 = true
		}
	}
	yyh4685.End()
	if yyc4685 {
		*v = yyv4685
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4689 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4690 := &yyv4689
		yy4690.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4691 := *v
	yyh4691, yyl4691 := z.DecSliceHelperStart()
	var yyc4691 bool
	if yyl4691 == 0 {
		if yyv4691 == nil {
			yyv4691 = []LimitRange{}
			yyc4691 = true
		} else if len(yyv4691) != 0 {
			yyv4691 = yyv4691[:0]
			yyc4691 = true
		}
	} else if yyl4691 > 0 {
		var yyrr4691, yyrl4691 int
		var yyrt4691 bool
		if yyl4691 > cap(yyv4691) {

			yyrg4691 := len(yyv4691) > 0
			yyv24691 := yyv4691
			yyrl4691, yyrt4691 = z.DecInferLen(yyl4691, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4691 {
				if yyrl4691 <= cap(yyv4691) {
					yyv4691 = yyv4691[:yyrl4691]
				} else {
					yyv4691 = make([]LimitRange, yyrl4691)
				}
			} else {
				yyv4691 = make([]LimitRange, yyrl4691)
			}
			yyc4691 = true
			yyrr4691 = len(yyv4691)
			if yyrg4691 {
				copy(yyv4691, yyv24691)
			}
		} else if yyl4691 != len(yyv4691) {
			yyv4691 = yyv4691[:yyl4691]
			yyc4691 = true
		}
		yyj4691 := 0
		for ; yyj4691 < yyrr4691; yyj4691++ {
			yyh4691.ElemContainerState(yyj4691)
			if r.TryDecodeAsNil() {
				yyv4691[yyj4691] = LimitRange{}
			} else {
				yyv4692 := &yyv4691[yyj4691]
				yyv4692.CodecDecodeSelf(d)
			}

		}
		if yyrt4691 {
			for ; yyj4691 < yyl4691; yyj4691++ {
				yyv4691 = append(yyv4691, LimitRange{})
				yyh4691.ElemContainerState(yyj4691)
				if r.TryDecodeAsNil() {
					yyv4691[yyj4691] = LimitRange{}
				} else {
					yyv4693 := &yyv4691[yyj4691]
					yyv4693.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4691 := 0
		for ; !r.CheckBreak(); yyj4691++ {

			if yyj4691 >= len(yyv4691) {
				yyv4691 = append(yyv4691, LimitRange{}) // var yyz4691 LimitRange
				yyc4691 = true
			}
			yyh4691.ElemContainerState(yyj4691)
			if yyj4691 < len(yyv4691) {
				if r.TryDecodeAsNil() {
					yyv4691[yyj4691] = LimitRange{}
				} else {
					yyv4694 := &yyv4691[yyj4691]
					yyv4694.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4691 < len(yyv4691) {
			yyv4691 = yyv4691[:yyj4691]
			yyc4691 = true
		} else if yyj4691 == 0 && yyv4691 == nil {
			yyv4691 = []LimitRange{}
			yyc4691 = true
		}
	}
	yyh4691.End()
	if yyc4691 {
		*v = yyv4691
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4695 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4695.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4696 := *v
	yyh4696, yyl4696 := z.DecSliceHelperStart()
	var yyc4696 bool
	if yyl4696 == 0 {
		if yyv4696 == nil {
			yyv4696 = []ResourceQuotaScope{}
			yyc4696 = true
		} else if len(yyv4696) != 0 {
			yyv4696 = yyv4696[:0]
			yyc4696 = true
		}
	} else if yyl4696 > 0 {
		var yyrr4696, yyrl4696 int
		var yyrt4696 bool
		if yyl4696 > cap(yyv4696) {

			yyrl4696, yyrt4696 = z.DecInferLen(yyl4696, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4696 {
				if yyrl4696 <= cap(yyv4696) {
					yyv4696 = yyv4696[:yyrl4696]
				} else {
					yyv4696 = make([]ResourceQuotaScope, yyrl4696)
				}
			} else {
				yyv4696 = make([]ResourceQuotaScope, yyrl4696)
			}
			yyc4696 = true
			yyrr4696 = len(yyv4696)
		} else if yyl4696 != len(yyv4696) {
			yyv4696 = yyv4696[:yyl4696]
			yyc4696 = true
		}
		yyj4696 := 0
		for ; yyj4696 < yyrr4696; yyj4696++ {
			yyh4696.ElemContainerState(yyj4696)
			if r.TryDecodeAsNil() {
				yyv4696[yyj4696] = ""
			} else {
				yyv4696[yyj4696] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4696 {
			for ; yyj4696 < yyl4696; yyj4696++ {
				yyv4696 = append(yyv4696, "")
				yyh4696.ElemContainerState(yyj4696)
				if r.TryDecodeAsNil() {
					yyv4696[yyj4696] = ""
				} else {
					yyv4696[yyj4696] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4696 := 0
		for ; !r.CheckBreak(); yyj4696++ {

			if yyj4696 >= len(yyv4696) {
				yyv4696 = append(yyv4696, "") // var yyz4696 ResourceQuotaScope
				yyc4696 = true
			}
			yyh4696.ElemContainerState(yyj4696)
			if yyj4696 < len(yyv4696) {
				if r.TryDecodeAsNil() {
					yyv4696[yyj4696] = ""
				} else {
					yyv4696[yyj4696] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4696 < len(yyv4696) {
			yyv4696 = yyv4696[:yyj4696]
			yyc4696 = true
		} else if yyj4696 == 0 && yyv4696 == nil {
			yyv4696 = []ResourceQuotaScope{}
			yyc4696 = true
		}
	}
	yyh4696.End()
	if yyc4696 {
		*v = yyv4696
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4700 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4701 := &yyv4700
		yy4701.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4702 := *v
	yyh4702, yyl4702 := z.DecSliceHelperStart()
	var yyc4702 bool
	if yyl4702 == 0 {
		if yyv4702 == nil {
			yyv4702 = []ResourceQuota{}
			yyc4702 = true
		} else if len(yyv4702) != 0 {
			yyv4702 = yyv4702[:0]
			yyc4702 = true
		}
	} else if yyl4702 > 0 {
		var yyrr4702, yyrl4702 int
		var yyrt4702 bool
		if yyl4702 > cap(yyv4702) {

			yyrg4702 := len(yyv4702) > 0
			yyv24702 := yyv4702
			yyrl4702, yyrt4702 = z.DecInferLen(yyl4702, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4702 {
				if yyrl4702 <= cap(yyv4702) {
					yyv4702 = yyv4702[:yyrl4702]
				} else {
					yyv4702 = make([]ResourceQuota, yyrl4702)
				}
			} else {
				yyv4702 = make([]ResourceQuota, yyrl4702)
			}
			yyc4702 = true
			yyrr4702 = len(yyv4702)
			if yyrg4702 {
				copy(yyv4702, yyv24702)
			}
		} else if yyl4702 != len(yyv4702) {
			yyv4702 = yyv4702[:yyl4702]
			yyc4702 = true
		}
		yyj4702 := 0
		for ; yyj4702 < yyrr4702; yyj4702++ {
			yyh4702.ElemContainerState(yyj4702)
			if r.TryDecodeAsNil() {
				yyv4702[yyj4702] = ResourceQuota{}
			} else {
				yyv4703 := &yyv4702[yyj4702]
				yyv4703.CodecDecodeSelf(d)
			}

		}
		if yyrt4702 {
			for ; yyj4702 < yyl4702; yyj4702++ {
				yyv4702 = append(yyv4702, ResourceQuota{})
				yyh4702.ElemContainerState(yyj4702)
				if r.TryDecodeAsNil() {
					yyv4702[yyj4702] = ResourceQuota{}
				} else {
					yyv4704 := &yyv4702[yyj4702]
					yyv4704.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4702 := 0
		for ; !r.CheckBreak(); yyj4702++ {

			if yyj4702 >= len(yyv4702) {
				yyv4702 = append(yyv4702, ResourceQuota{}) // var yyz4702 ResourceQuota
				yyc4702 = true
			}
			yyh4702.ElemContainerState(yyj4702)
			if yyj4702 < len(yyv4702) {
				if r.TryDecodeAsNil() {
					yyv4702[yyj4702] = ResourceQuota{}
				} else {
					yyv4705 := &yyv4702[yyj4702]
					yyv4705.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4702 < len(yyv4702) {
			yyv4702 = yyv4702[:yyj4702]
			yyc4702 = true
		} else if yyj4702 == 0 && yyv4702 == nil {
			yyv4702 = []ResourceQuota{}
			yyc4702 = true
		}
	}
	yyh4702.End()
	if yyc4702 {
		*v = yyv4702
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4706, yyv4706 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4707 := z.EncBinary()
		_ = yym4707
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4706))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4706 == nil {
			r.EncodeNil()
		} else {
			yym4708 := z.EncBinary()
			_ = yym4708
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4706))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4709 := *v
	yyl4709 := r.ReadMapStart()
	yybh4709 := z.DecBasicHandle()
	if yyv4709 == nil {
		yyrl4709, _ := z.DecInferLen(yyl4709, yybh4709.MaxInitLen, 40)
		yyv4709 = make(map[string][]uint8, yyrl4709)
		*v = yyv4709
	}
	var yymk4709 string
	var yymv4709 []uint8
	var yymg4709 bool
	if yybh4709.MapValueReset {
		yymg4709 = true
	}
	if yyl4709 > 0 {
		for yyj4709 := 0; yyj4709 < yyl4709; yyj4709++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4709 = ""
			} else {
				yymk4709 = string(r.DecodeString())
			}

			if yymg4709 {
				yymv4709 = yyv4709[yymk4709]
			} else {
				yymv4709 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4709 = nil
			} else {
				yyv4711 := &yymv4709
				yym4712 := z.DecBinary()
				_ = yym4712
				if false {
				} else {
					*yyv4711 = r.DecodeBytes(*(*[]byte)(yyv4711), false, false)
				}
			}

			if yyv4709 != nil {
				yyv4709[yymk4709] = yymv4709
			}
		}
	} else if yyl4709 < 0 {
		for yyj4709 := 0; !r.CheckBreak(); yyj4709++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4709 = ""
			} else {
				yymk4709 = string(r.DecodeString())
			}

			if yymg4709 {
				yymv4709 = yyv4709[yymk4709]
			} else {
				yymv4709 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4709 = nil
			} else {
				yyv4714 := &yymv4709
				yym4715 := z.DecBinary()
				_ = yym4715
				if false {
				} else {
					*yyv4714 = r.DecodeBytes(*(*[]byte)(yyv4714), false, false)
				}
			}

			if yyv4709 != nil {
				yyv4709[yymk4709] = yymv4709
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4716 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4717 := &yyv4716
		yy4717.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4718 := *v
	yyh4718, yyl4718 := z.DecSliceHelperStart()
	var yyc4718 bool
	if yyl4718 == 0 {
		if yyv4718 == nil {
			yyv4718 = []Secret{}
			yyc4718 = true
		} else if len(yyv4718) != 0 {
			yyv4718 = yyv4718[:0]
			yyc4718 = true
		}
	} else if yyl4718 > 0 {
		var yyrr4718, yyrl4718 int
		var yyrt4718 bool
		if yyl4718 > cap(yyv4718) {

			yyrg4718 := len(yyv4718) > 0
			yyv24718 := yyv4718
			yyrl4718, yyrt4718 = z.DecInferLen(yyl4718, z.DecBasicHandle().MaxInitLen, 272)
			if yyrt4718 {
				if yyrl4718 <= cap(yyv4718) {
					yyv4718 = yyv4718[:yyrl4718]
				} else {
					yyv4718 = make([]Secret, yyrl4718)
				}
			} else {
				yyv4718 = make([]Secret, yyrl4718)
			}
			yyc4718 = true
			yyrr4718 = len(yyv4718)
			if yyrg4718 {
				copy(yyv4718, yyv24718)
			}
		} else if yyl4718 != len(yyv4718) {
			yyv4718 = yyv4718[:yyl4718]
			yyc4718 = true
		}
		yyj4718 := 0
		for ; yyj4718 < yyrr4718; yyj4718++ {
			yyh4718.ElemContainerState(yyj4718)
			if r.TryDecodeAsNil() {
				yyv4718[yyj4718] = Secret{}
			} else {
				yyv4719 := &yyv4718[yyj4718]
				yyv4719.CodecDecodeSelf(d)
			}

		}
		if yyrt4718 {
			for ; yyj4718 < yyl4718; yyj4718++ {
				yyv4718 = append(yyv4718, Secret{})
				yyh4718.ElemContainerState(yyj4718)
				if r.TryDecodeAsNil() {
					yyv4718[yyj4718] = Secret{}
				} else {
					yyv4720 := &yyv4718[yyj4718]
					yyv4720.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4718 := 0
		for ; !r.CheckBreak(); yyj4718++ {

			if yyj4718 >= len(yyv4718) {
				yyv4718 = append(yyv4718, Secret{}) // var yyz4718 Secret
				yyc4718 = true
			}
			yyh4718.ElemContainerState(yyj4718)
			if yyj4718 < len(yyv4718) {
				if r.TryDecodeAsNil() {
					yyv4718[yyj4718] = Secret{}
				} else {
					yyv4721 := &yyv4718[yyj4718]
					yyv4721.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4718 < len(yyv4718) {
			yyv4718 = yyv4718[:yyj4718]
			yyc4718 = true
		} else if yyj4718 == 0 && yyv4718 == nil {
			yyv4718 = []Secret{}
			yyc4718 = true
		}
	}
	yyh4718.End()
	if yyc4718 {
		*v = yyv4718
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4722 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4723 := &yyv4722
		yy4723.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4724 := *v
	yyh4724, yyl4724 := z.DecSliceHelperStart()
	var yyc4724 bool
	if yyl4724 == 0 {
		if yyv4724 == nil {
			yyv4724 = []ConfigMap{}
			yyc4724 = true
		} else if len(yyv4724) != 0 {
			yyv4724 = yyv4724[:0]
			yyc4724 = true
		}
	} else if yyl4724 > 0 {
		var yyrr4724, yyrl4724 int
		var yyrt4724 bool
		if yyl4724 > cap(yyv4724) {

			yyrg4724 := len(yyv4724) > 0
			yyv24724 := yyv4724
			yyrl4724, yyrt4724 = z.DecInferLen(yyl4724, z.DecBasicHandle().MaxInitLen, 248)
			if yyrt4724 {
				if yyrl4724 <= cap(yyv4724) {
					yyv4724 = yyv4724[:yyrl4724]
				} else {
					yyv4724 = make([]ConfigMap, yyrl4724)
				}
			} else {
				yyv4724 = make([]ConfigMap, yyrl4724)
			}
			yyc4724 = true
			yyrr4724 = len(yyv4724)
			if yyrg4724 {
				copy(yyv4724, yyv24724)
			}
		} else if yyl4724 != len(yyv4724) {
			yyv4724 = yyv4724[:yyl4724]
			yyc4724 = true
		}
		yyj4724 := 0
		for ; yyj4724 < yyrr4724; yyj4724++ {
			yyh4724.ElemContainerState(yyj4724)
			if r.TryDecodeAsNil() {
				yyv4724[yyj4724] = ConfigMap{}
			} else {
				yyv4725 := &yyv4724[yyj4724]
				yyv4725.CodecDecodeSelf(d)
			}

		}
		if yyrt4724 {
			for ; yyj4724 < yyl4724; yyj4724++ {
				yyv4724 = append(yyv4724, ConfigMap{})
				yyh4724.ElemContainerState(yyj4724)
				if r.TryDecodeAsNil() {
					yyv4724[yyj4724] = ConfigMap{}
				} else {
					yyv4726 := &yyv4724[yyj4724]
					yyv4726.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4724 := 0
		for ; !r.CheckBreak(); yyj4724++ {

			if yyj4724 >= len(yyv4724) {
				yyv4724 = append(yyv4724, ConfigMap{}) // var yyz4724 ConfigMap
				yyc4724 = true
			}
			yyh4724.ElemContainerState(yyj4724)
			if yyj4724 < len(yyv4724) {
				if r.TryDecodeAsNil() {
					yyv4724[yyj4724] = ConfigMap{}
				} else {
					yyv4727 := &yyv4724[yyj4724]
					yyv4727.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4724 < len(yyv4724) {
			yyv4724 = yyv4724[:yyj4724]
			yyc4724 = true
		} else if yyj4724 == 0 && yyv4724 == nil {
			yyv4724 = []ConfigMap{}
			yyc4724 = true
		}
	}
	yyh4724.End()
	if yyc4724 {
		*v = yyv4724
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4728 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4729 := &yyv4728
		yy4729.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4730 := *v
	yyh4730, yyl4730 := z.DecSliceHelperStart()
	var yyc4730 bool
	if yyl4730 == 0 {
		if yyv4730 == nil {
			yyv4730 = []ComponentCondition{}
			yyc4730 = true
		} else if len(yyv4730) != 0 {
			yyv4730 = yyv4730[:0]
			yyc4730 = true
		}
	} else if yyl4730 > 0 {
		var yyrr4730, yyrl4730 int
		var yyrt4730 bool
		if yyl4730 > cap(yyv4730) {

			yyrg4730 := len(yyv4730) > 0
			yyv24730 := yyv4730
			yyrl4730, yyrt4730 = z.DecInferLen(yyl4730, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4730 {
				if yyrl4730 <= cap(yyv4730) {
					yyv4730 = yyv4730[:yyrl4730]
				} else {
					yyv4730 = make([]ComponentCondition, yyrl4730)
				}
			} else {
				yyv4730 = make([]ComponentCondition, yyrl4730)
			}
			yyc4730 = true
			yyrr4730 = len(yyv4730)
			if yyrg4730 {
				copy(yyv4730, yyv24730)
			}
		} else if yyl4730 != len(yyv4730) {
			yyv4730 = yyv4730[:yyl4730]
			yyc4730 = true
		}
		yyj4730 := 0
		for ; yyj4730 < yyrr4730; yyj4730++ {
			yyh4730.ElemContainerState(yyj4730)
			if r.TryDecodeAsNil() {
				yyv4730[yyj4730] = ComponentCondition{}
			} else {
				yyv4731 := &yyv4730[yyj4730]
				yyv4731.CodecDecodeSelf(d)
			}

		}
		if yyrt4730 {
			for ; yyj4730 < yyl4730; yyj4730++ {
				yyv4730 = append(yyv4730, ComponentCondition{})
				yyh4730.ElemContainerState(yyj4730)
				if r.TryDecodeAsNil() {
					yyv4730[yyj4730] = ComponentCondition{}
				} else {
					yyv4732 := &yyv4730[yyj4730]
					yyv4732.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4730 := 0
		for ; !r.CheckBreak(); yyj4730++ {

			if yyj4730 >= len(yyv4730) {
				yyv4730 = append(yyv4730, ComponentCondition{}) // var yyz4730 ComponentCondition
				yyc4730 = true
			}
			yyh4730.ElemContainerState(yyj4730)
			if yyj4730 < len(yyv4730) {
				if r.TryDecodeAsNil() {
					yyv4730[yyj4730] = ComponentCondition{}
				} else {
					yyv4733 := &yyv4730[yyj4730]
					yyv4733.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4730 < len(yyv4730) {
			yyv4730 = yyv4730[:yyj4730]
			yyc4730 = true
		} else if yyj4730 == 0 && yyv4730 == nil {
			yyv4730 = []ComponentCondition{}
			yyc4730 = true
		}
	}
	yyh4730.End()
	if yyc4730 {
		*v = yyv4730
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4734 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4735 := &yyv4734
		yy4735.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4736 := *v
	yyh4736, yyl4736 := z.DecSliceHelperStart()
	var yyc4736 bool
	if yyl4736 == 0 {
		if yyv4736 == nil {
			yyv4736 = []ComponentStatus{}
			yyc4736 = true
		} else if len(yyv4736) != 0 {
			yyv4736 = yyv4736[:0]
			yyc4736 = true
		}
	} else if yyl4736 > 0 {
		var yyrr4736, yyrl4736 int
		var yyrt4736 bool
		if yyl4736 > cap(yyv4736) {

			yyrg4736 := len(yyv4736) > 0
			yyv24736 := yyv4736
			yyrl4736, yyrt4736 = z.DecInferLen(yyl4736, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4736 {
				if yyrl4736 <= cap(yyv4736) {
					yyv4736 = yyv4736[:yyrl4736]
				} else {
					yyv4736 = make([]ComponentStatus, yyrl4736)
				}
			} else {
				yyv4736 = make([]ComponentStatus, yyrl4736)
			}
			yyc4736 = true
			yyrr4736 = len(yyv4736)
			if yyrg4736 {
				copy(yyv4736, yyv24736)
			}
		} else if yyl4736 != len(yyv4736) {
			yyv4736 = yyv4736[:yyl4736]
			yyc4736 = true
		}
		yyj4736 := 0
		for ; yyj4736 < yyrr4736; yyj4736++ {
			yyh4736.ElemContainerState(yyj4736)
			if r.TryDecodeAsNil() {
				yyv4736[yyj4736] = ComponentStatus{}
			} else {
				yyv4737 := &yyv4736[yyj4736]
				yyv4737.CodecDecodeSelf(d)
			}

		}
		if yyrt4736 {
			for ; yyj4736 < yyl4736; yyj4736++ {
				yyv4736 = append(yyv4736, ComponentStatus{})
				yyh4736.ElemContainerState(yyj4736)
				if r.TryDecodeAsNil() {
					yyv4736[yyj4736] = ComponentStatus{}
				} else {
					yyv4738 := &yyv4736[yyj4736]
					yyv4738.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4736 := 0
		for ; !r.CheckBreak(); yyj4736++ {

			if yyj4736 >= len(yyv4736) {
				yyv4736 = append(yyv4736, ComponentStatus{}) // var yyz4736 ComponentStatus
				yyc4736 = true
			}
			yyh4736.ElemContainerState(yyj4736)
			if yyj4736 < len(yyv4736) {
				if r.TryDecodeAsNil() {
					yyv4736[yyj4736] = ComponentStatus{}
				} else {
					yyv4739 := &yyv4736[yyj4736]
					yyv4739.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4736 < len(yyv4736) {
			yyv4736 = yyv4736[:yyj4736]
			yyc4736 = true
		} else if yyj4736 == 0 && yyv4736 == nil {
			yyv4736 = []ComponentStatus{}
			yyc4736 = true
		}
	}
	yyh4736.End()
	if yyc4736 {
		*v = yyv4736
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4740 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4741 := &yyv4740
		yy4741.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4742 := *v
	yyh4742, yyl4742 := z.DecSliceHelperStart()
	var yyc4742 bool
	if yyl4742 == 0 {
		if yyv4742 == nil {
			yyv4742 = []DownwardAPIVolumeFile{}
			yyc4742 = true
		} else if len(yyv4742) != 0 {
			yyv4742 = yyv4742[:0]
			yyc4742 = true
		}
	} else if yyl4742 > 0 {
		var yyrr4742, yyrl4742 int
		var yyrt4742 bool
		if yyl4742 > cap(yyv4742) {

			yyrg4742 := len(yyv4742) > 0
			yyv24742 := yyv4742
			yyrl4742, yyrt4742 = z.DecInferLen(yyl4742, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4742 {
				if yyrl4742 <= cap(yyv4742) {
					yyv4742 = yyv4742[:yyrl4742]
				} else {
					yyv4742 = make([]DownwardAPIVolumeFile, yyrl4742)
				}
			} else {
				yyv4742 = make([]DownwardAPIVolumeFile, yyrl4742)
			}
			yyc4742 = true
			yyrr4742 = len(yyv4742)
			if yyrg4742 {
				copy(yyv4742, yyv24742)
			}
		} else if yyl4742 != len(yyv4742) {
			yyv4742 = yyv4742[:yyl4742]
			yyc4742 = true
		}
		yyj4742 := 0
		for ; yyj4742 < yyrr4742; yyj4742++ {
			yyh4742.ElemContainerState(yyj4742)
			if r.TryDecodeAsNil() {
				yyv4742[yyj4742] = DownwardAPIVolumeFile{}
			} else {
				yyv4743 := &yyv4742[yyj4742]
				yyv4743.CodecDecodeSelf(d)
			}

		}
		if yyrt4742 {
			for ; yyj4742 < yyl4742; yyj4742++ {
				yyv4742 = append(yyv4742, DownwardAPIVolumeFile{})
				yyh4742.ElemContainerState(yyj4742)
				if r.TryDecodeAsNil() {
					yyv4742[yyj4742] = DownwardAPIVolumeFile{}
				} else {
					yyv4744 := &yyv4742[yyj4742]
					yyv4744.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4742 := 0
		for ; !r.CheckBreak(); yyj4742++ {

			if yyj4742 >= len(yyv4742) {
				yyv4742 = append(yyv4742, DownwardAPIVolumeFile{}) // var yyz4742 DownwardAPIVolumeFile
				yyc4742 = true
			}
			yyh4742.ElemContainerState(yyj4742)
			if yyj4742 < len(yyv4742) {
				if r.TryDecodeAsNil() {
					yyv4742[yyj4742] = DownwardAPIVolumeFile{}
				} else {
					yyv4745 := &yyv4742[yyj4742]
					yyv4745.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4742 < len(yyv4742) {
			yyv4742 = yyv4742[:yyj4742]
			yyc4742 = true
		} else if yyj4742 == 0 && yyv4742 == nil {
			yyv4742 = []DownwardAPIVolumeFile{}
			yyc4742 = true
		}
	}
	yyh4742.End()
	if yyc4742 {
		*v = yyv4742
	}
}
