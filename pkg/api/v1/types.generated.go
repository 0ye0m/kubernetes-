/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg5_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg5_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg4_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [14]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(14)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym49 := z.DecBinary()
	_ = yym49
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct50 := r.ContainerType()
		if yyct50 == codecSelferValueTypeMap1234 {
			yyl50 := r.ReadMapStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl50, d)
			}
		} else if yyct50 == codecSelferValueTypeArray1234 {
			yyl50 := r.ReadArrayStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl50, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys51Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys51Slc
	var yyhl51 bool = l >= 0
	for yyj51 := 0; ; yyj51++ {
		if yyhl51 {
			if yyj51 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys51Slc = r.DecodeBytes(yys51Slc, true, true)
		yys51 := string(yys51Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys51 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv59 := &x.CreationTimestamp
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv59) {
				} else if yym60 {
					z.DecBinaryUnmarshal(yyv59)
				} else if !yym60 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv59)
				} else {
					z.DecFallback(yyv59, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym62 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym62 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym64 := z.DecBinary()
				_ = yym64
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv65 := &x.Labels
				yym66 := z.DecBinary()
				_ = yym66
				if false {
				} else {
					z.F.DecMapStringStringX(yyv65, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv67 := &x.Annotations
				yym68 := z.DecBinary()
				_ = yym68
				if false {
				} else {
					z.F.DecMapStringStringX(yyv67, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv69 := &x.OwnerReferences
				yym70 := z.DecBinary()
				_ = yym70
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv69), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv71 := &x.Finalizers
				yym72 := z.DecBinary()
				_ = yym72
				if false {
				} else {
					z.F.DecSliceStringX(yyv71, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys51)
		} // end switch yys51
	} // end for yyj51
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj73 int
	var yyb73 bool
	var yyhl73 bool = l >= 0
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv81 := &x.CreationTimestamp
		yym82 := z.DecBinary()
		_ = yym82
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv81) {
		} else if yym82 {
			z.DecBinaryUnmarshal(yyv81)
		} else if !yym82 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv81)
		} else {
			z.DecFallback(yyv81, false)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym84 := z.DecBinary()
		_ = yym84
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym84 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym84 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv87 := &x.Labels
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else {
			z.F.DecMapStringStringX(yyv87, false, d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv89 := &x.Annotations
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			z.F.DecMapStringStringX(yyv89, false, d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv91 := &x.OwnerReferences
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv91), d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv93 := &x.Finalizers
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecSliceStringX(yyv93, false, d)
		}
	}
	for {
		yyj73++
		if yyhl73 {
			yyb73 = yyj73 > l
		} else {
			yyb73 = r.CheckBreak()
		}
		if yyb73 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj73-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym95 := z.EncBinary()
		_ = yym95
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep96 := !z.EncBinary()
			yy2arr96 := z.EncBasicHandle().StructToArray
			var yyq96 [23]bool
			_, _, _ = yysep96, yyq96, yy2arr96
			const yyr96 bool = false
			yyq96[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq96[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq96[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq96[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq96[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq96[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq96[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq96[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq96[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq96[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq96[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq96[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq96[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq96[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq96[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq96[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq96[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq96[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq96[19] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq96[20] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq96[21] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq96[22] = x.VolumeSource.AzureDisk != nil && x.AzureDisk != nil
			var yynn96 int
			if yyr96 || yy2arr96 {
				r.EncodeArrayStart(23)
			} else {
				yynn96 = 1
				for _, b := range yyq96 {
					if b {
						yynn96++
					}
				}
				r.EncodeMapStart(yynn96)
				yynn96 = 0
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym98 := z.EncBinary()
				_ = yym98
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym99 := z.EncBinary()
				_ = yym99
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn100 bool
			if x.VolumeSource.HostPath == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr96 || yy2arr96 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr96 || yy2arr96 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn102 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn102 = true
				goto LABEL102
			}
		LABEL102:
			if yyr96 || yy2arr96 {
				if yyn102 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn102 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn103 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn103 = true
				goto LABEL103
			}
		LABEL103:
			if yyr96 || yy2arr96 {
				if yyn103 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn103 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn104 bool
			if x.VolumeSource.GitRepo == nil {
				yyn104 = true
				goto LABEL104
			}
		LABEL104:
			if yyr96 || yy2arr96 {
				if yyn104 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn104 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn105 bool
			if x.VolumeSource.Secret == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr96 || yy2arr96 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.NFS == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr96 || yy2arr96 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.ISCSI == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr96 || yy2arr96 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr96 || yy2arr96 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr96 || yy2arr96 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.RBD == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr96 || yy2arr96 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr96 || yy2arr96 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.Cinder == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr96 || yy2arr96 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.CephFS == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr96 || yy2arr96 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.Flocker == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr96 || yy2arr96 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr96 || yy2arr96 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.FC == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr96 || yy2arr96 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.AzureFile == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr96 || yy2arr96 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr96 || yy2arr96 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[19] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr96 || yy2arr96 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[20] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.Quobyte == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr96 || yy2arr96 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[21] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.AzureDisk == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr96 || yy2arr96 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[22] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym122 := z.DecBinary()
	_ = yym122
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct123 := r.ContainerType()
		if yyct123 == codecSelferValueTypeMap1234 {
			yyl123 := r.ReadMapStart()
			if yyl123 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl123, d)
			}
		} else if yyct123 == codecSelferValueTypeArray1234 {
			yyl123 := r.ReadArrayStart()
			if yyl123 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl123, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys124Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys124Slc
	var yyhl124 bool = l >= 0
	for yyj124 := 0; ; yyj124++ {
		if yyhl124 {
			if yyj124 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys124Slc = r.DecodeBytes(yys124Slc, true, true)
		yys124 := string(yys124Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys124 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.VolumeSource.AzureDisk == nil {
				x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys124)
		} // end switch yys124
	} // end for yyj124
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj148 int
	var yyb148 bool
	var yyhl148 bool = l >= 0
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureDisk == nil {
		x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	for {
		yyj148++
		if yyhl148 {
			yyb148 = yyj148 > l
		} else {
			yyb148 = r.CheckBreak()
		}
		if yyb148 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj148-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym172 := z.EncBinary()
		_ = yym172
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep173 := !z.EncBinary()
			yy2arr173 := z.EncBasicHandle().StructToArray
			var yyq173 [22]bool
			_, _, _ = yysep173, yyq173, yy2arr173
			const yyr173 bool = false
			yyq173[0] = x.HostPath != nil
			yyq173[1] = x.EmptyDir != nil
			yyq173[2] = x.GCEPersistentDisk != nil
			yyq173[3] = x.AWSElasticBlockStore != nil
			yyq173[4] = x.GitRepo != nil
			yyq173[5] = x.Secret != nil
			yyq173[6] = x.NFS != nil
			yyq173[7] = x.ISCSI != nil
			yyq173[8] = x.Glusterfs != nil
			yyq173[9] = x.PersistentVolumeClaim != nil
			yyq173[10] = x.RBD != nil
			yyq173[11] = x.FlexVolume != nil
			yyq173[12] = x.Cinder != nil
			yyq173[13] = x.CephFS != nil
			yyq173[14] = x.Flocker != nil
			yyq173[15] = x.DownwardAPI != nil
			yyq173[16] = x.FC != nil
			yyq173[17] = x.AzureFile != nil
			yyq173[18] = x.ConfigMap != nil
			yyq173[19] = x.VsphereVolume != nil
			yyq173[20] = x.Quobyte != nil
			yyq173[21] = x.AzureDisk != nil
			var yynn173 int
			if yyr173 || yy2arr173 {
				r.EncodeArrayStart(22)
			} else {
				yynn173 = 0
				for _, b := range yyq173 {
					if b {
						yynn173++
					}
				}
				r.EncodeMapStart(yynn173)
				yynn173 = 0
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[18] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[19] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[20] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq173[21] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq173[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr173 || yy2arr173 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym196 := z.DecBinary()
	_ = yym196
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct197 := r.ContainerType()
		if yyct197 == codecSelferValueTypeMap1234 {
			yyl197 := r.ReadMapStart()
			if yyl197 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl197, d)
			}
		} else if yyct197 == codecSelferValueTypeArray1234 {
			yyl197 := r.ReadArrayStart()
			if yyl197 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl197, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys198Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys198Slc
	var yyhl198 bool = l >= 0
	for yyj198 := 0; ; yyj198++ {
		if yyhl198 {
			if yyj198 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys198Slc = r.DecodeBytes(yys198Slc, true, true)
		yys198 := string(yys198Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys198 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys198)
		} // end switch yys198
	} // end for yyj198
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj221 int
	var yyb221 bool
	var yyhl221 bool = l >= 0
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	for {
		yyj221++
		if yyhl221 {
			yyb221 = yyj221 > l
		} else {
			yyb221 = r.CheckBreak()
		}
		if yyb221 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj221-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym244 := z.EncBinary()
		_ = yym244
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep245 := !z.EncBinary()
			yy2arr245 := z.EncBasicHandle().StructToArray
			var yyq245 [2]bool
			_, _, _ = yysep245, yyq245, yy2arr245
			const yyr245 bool = false
			yyq245[1] = x.ReadOnly != false
			var yynn245 int
			if yyr245 || yy2arr245 {
				r.EncodeArrayStart(2)
			} else {
				yynn245 = 1
				for _, b := range yyq245 {
					if b {
						yynn245++
					}
				}
				r.EncodeMapStart(yynn245)
				yynn245 = 0
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym247 := z.EncBinary()
				_ = yym247
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym248 := z.EncBinary()
				_ = yym248
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq245[1] {
					yym250 := z.EncBinary()
					_ = yym250
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq245[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym251 := z.EncBinary()
					_ = yym251
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym252 := z.DecBinary()
	_ = yym252
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct253 := r.ContainerType()
		if yyct253 == codecSelferValueTypeMap1234 {
			yyl253 := r.ReadMapStart()
			if yyl253 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl253, d)
			}
		} else if yyct253 == codecSelferValueTypeArray1234 {
			yyl253 := r.ReadArrayStart()
			if yyl253 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl253, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys254Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys254Slc
	var yyhl254 bool = l >= 0
	for yyj254 := 0; ; yyj254++ {
		if yyhl254 {
			if yyj254 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys254Slc = r.DecodeBytes(yys254Slc, true, true)
		yys254 := string(yys254Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys254 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys254)
		} // end switch yys254
	} // end for yyj254
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj257 int
	var yyb257 bool
	var yyhl257 bool = l >= 0
	yyj257++
	if yyhl257 {
		yyb257 = yyj257 > l
	} else {
		yyb257 = r.CheckBreak()
	}
	if yyb257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj257++
	if yyhl257 {
		yyb257 = yyj257 > l
	} else {
		yyb257 = r.CheckBreak()
	}
	if yyb257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj257++
		if yyhl257 {
			yyb257 = yyj257 > l
		} else {
			yyb257 = r.CheckBreak()
		}
		if yyb257 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj257-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym260 := z.EncBinary()
		_ = yym260
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep261 := !z.EncBinary()
			yy2arr261 := z.EncBasicHandle().StructToArray
			var yyq261 [16]bool
			_, _, _ = yysep261, yyq261, yy2arr261
			const yyr261 bool = false
			yyq261[0] = x.GCEPersistentDisk != nil
			yyq261[1] = x.AWSElasticBlockStore != nil
			yyq261[2] = x.HostPath != nil
			yyq261[3] = x.Glusterfs != nil
			yyq261[4] = x.NFS != nil
			yyq261[5] = x.RBD != nil
			yyq261[6] = x.ISCSI != nil
			yyq261[7] = x.Cinder != nil
			yyq261[8] = x.CephFS != nil
			yyq261[9] = x.FC != nil
			yyq261[10] = x.Flocker != nil
			yyq261[11] = x.FlexVolume != nil
			yyq261[12] = x.AzureFile != nil
			yyq261[13] = x.VsphereVolume != nil
			yyq261[14] = x.Quobyte != nil
			yyq261[15] = x.AzureDisk != nil
			var yynn261 int
			if yyr261 || yy2arr261 {
				r.EncodeArrayStart(16)
			} else {
				yynn261 = 0
				for _, b := range yyq261 {
					if b {
						yynn261++
					}
				}
				r.EncodeMapStart(yynn261)
				yynn261 = 0
			}
			if yyr261 || yy2arr261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq261[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq261[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr261 || yy2arr261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq261[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq261[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr261 || yy2arr261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq261[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq261[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr261 || yy2arr261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq261[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq261[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr261 || yy2arr261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq261[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq261[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr261 || yy2arr261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq261[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq261[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr261 || yy2arr261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq261[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq261[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr261 || yy2arr261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq261[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq261[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr261 || yy2arr261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq261[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq261[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr261 || yy2arr261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq261[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq261[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr261 || yy2arr261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq261[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq261[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr261 || yy2arr261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq261[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq261[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr261 || yy2arr261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq261[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq261[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr261 || yy2arr261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq261[13] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq261[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr261 || yy2arr261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq261[14] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq261[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr261 || yy2arr261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq261[15] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq261[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr261 || yy2arr261 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym278 := z.DecBinary()
	_ = yym278
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct279 := r.ContainerType()
		if yyct279 == codecSelferValueTypeMap1234 {
			yyl279 := r.ReadMapStart()
			if yyl279 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl279, d)
			}
		} else if yyct279 == codecSelferValueTypeArray1234 {
			yyl279 := r.ReadArrayStart()
			if yyl279 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl279, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys280Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys280Slc
	var yyhl280 bool = l >= 0
	for yyj280 := 0; ; yyj280++ {
		if yyhl280 {
			if yyj280 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys280Slc = r.DecodeBytes(yys280Slc, true, true)
		yys280 := string(yys280Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys280 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys280)
		} // end switch yys280
	} // end for yyj280
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj297 int
	var yyb297 bool
	var yyhl297 bool = l >= 0
	yyj297++
	if yyhl297 {
		yyb297 = yyj297 > l
	} else {
		yyb297 = r.CheckBreak()
	}
	if yyb297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj297++
	if yyhl297 {
		yyb297 = yyj297 > l
	} else {
		yyb297 = r.CheckBreak()
	}
	if yyb297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj297++
	if yyhl297 {
		yyb297 = yyj297 > l
	} else {
		yyb297 = r.CheckBreak()
	}
	if yyb297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj297++
	if yyhl297 {
		yyb297 = yyj297 > l
	} else {
		yyb297 = r.CheckBreak()
	}
	if yyb297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj297++
	if yyhl297 {
		yyb297 = yyj297 > l
	} else {
		yyb297 = r.CheckBreak()
	}
	if yyb297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj297++
	if yyhl297 {
		yyb297 = yyj297 > l
	} else {
		yyb297 = r.CheckBreak()
	}
	if yyb297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj297++
	if yyhl297 {
		yyb297 = yyj297 > l
	} else {
		yyb297 = r.CheckBreak()
	}
	if yyb297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj297++
	if yyhl297 {
		yyb297 = yyj297 > l
	} else {
		yyb297 = r.CheckBreak()
	}
	if yyb297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj297++
	if yyhl297 {
		yyb297 = yyj297 > l
	} else {
		yyb297 = r.CheckBreak()
	}
	if yyb297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj297++
	if yyhl297 {
		yyb297 = yyj297 > l
	} else {
		yyb297 = r.CheckBreak()
	}
	if yyb297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj297++
	if yyhl297 {
		yyb297 = yyj297 > l
	} else {
		yyb297 = r.CheckBreak()
	}
	if yyb297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj297++
	if yyhl297 {
		yyb297 = yyj297 > l
	} else {
		yyb297 = r.CheckBreak()
	}
	if yyb297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj297++
	if yyhl297 {
		yyb297 = yyj297 > l
	} else {
		yyb297 = r.CheckBreak()
	}
	if yyb297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj297++
	if yyhl297 {
		yyb297 = yyj297 > l
	} else {
		yyb297 = r.CheckBreak()
	}
	if yyb297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj297++
	if yyhl297 {
		yyb297 = yyj297 > l
	} else {
		yyb297 = r.CheckBreak()
	}
	if yyb297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj297++
	if yyhl297 {
		yyb297 = yyj297 > l
	} else {
		yyb297 = r.CheckBreak()
	}
	if yyb297 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	for {
		yyj297++
		if yyhl297 {
			yyb297 = yyj297 > l
		} else {
			yyb297 = r.CheckBreak()
		}
		if yyb297 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj297-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym314 := z.EncBinary()
		_ = yym314
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep315 := !z.EncBinary()
			yy2arr315 := z.EncBasicHandle().StructToArray
			var yyq315 [5]bool
			_, _, _ = yysep315, yyq315, yy2arr315
			const yyr315 bool = false
			yyq315[0] = x.Kind != ""
			yyq315[1] = x.APIVersion != ""
			yyq315[2] = true
			yyq315[3] = true
			yyq315[4] = true
			var yynn315 int
			if yyr315 || yy2arr315 {
				r.EncodeArrayStart(5)
			} else {
				yynn315 = 0
				for _, b := range yyq315 {
					if b {
						yynn315++
					}
				}
				r.EncodeMapStart(yynn315)
				yynn315 = 0
			}
			if yyr315 || yy2arr315 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq315[0] {
					yym317 := z.EncBinary()
					_ = yym317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq315[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym318 := z.EncBinary()
					_ = yym318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr315 || yy2arr315 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq315[1] {
					yym320 := z.EncBinary()
					_ = yym320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq315[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym321 := z.EncBinary()
					_ = yym321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr315 || yy2arr315 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq315[2] {
					yy323 := &x.ObjectMeta
					yy323.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq315[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy324 := &x.ObjectMeta
					yy324.CodecEncodeSelf(e)
				}
			}
			if yyr315 || yy2arr315 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq315[3] {
					yy326 := &x.Spec
					yy326.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq315[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy327 := &x.Spec
					yy327.CodecEncodeSelf(e)
				}
			}
			if yyr315 || yy2arr315 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq315[4] {
					yy329 := &x.Status
					yy329.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq315[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy330 := &x.Status
					yy330.CodecEncodeSelf(e)
				}
			}
			if yyr315 || yy2arr315 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym331 := z.DecBinary()
	_ = yym331
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct332 := r.ContainerType()
		if yyct332 == codecSelferValueTypeMap1234 {
			yyl332 := r.ReadMapStart()
			if yyl332 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl332, d)
			}
		} else if yyct332 == codecSelferValueTypeArray1234 {
			yyl332 := r.ReadArrayStart()
			if yyl332 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl332, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys333Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys333Slc
	var yyhl333 bool = l >= 0
	for yyj333 := 0; ; yyj333++ {
		if yyhl333 {
			if yyj333 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys333Slc = r.DecodeBytes(yys333Slc, true, true)
		yys333 := string(yys333Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys333 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv336 := &x.ObjectMeta
				yyv336.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv337 := &x.Spec
				yyv337.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv338 := &x.Status
				yyv338.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys333)
		} // end switch yys333
	} // end for yyj333
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj339 int
	var yyb339 bool
	var yyhl339 bool = l >= 0
	yyj339++
	if yyhl339 {
		yyb339 = yyj339 > l
	} else {
		yyb339 = r.CheckBreak()
	}
	if yyb339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj339++
	if yyhl339 {
		yyb339 = yyj339 > l
	} else {
		yyb339 = r.CheckBreak()
	}
	if yyb339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj339++
	if yyhl339 {
		yyb339 = yyj339 > l
	} else {
		yyb339 = r.CheckBreak()
	}
	if yyb339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv342 := &x.ObjectMeta
		yyv342.CodecDecodeSelf(d)
	}
	yyj339++
	if yyhl339 {
		yyb339 = yyj339 > l
	} else {
		yyb339 = r.CheckBreak()
	}
	if yyb339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv343 := &x.Spec
		yyv343.CodecDecodeSelf(d)
	}
	yyj339++
	if yyhl339 {
		yyb339 = yyj339 > l
	} else {
		yyb339 = r.CheckBreak()
	}
	if yyb339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv344 := &x.Status
		yyv344.CodecDecodeSelf(d)
	}
	for {
		yyj339++
		if yyhl339 {
			yyb339 = yyj339 > l
		} else {
			yyb339 = r.CheckBreak()
		}
		if yyb339 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj339-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym345 := z.EncBinary()
		_ = yym345
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep346 := !z.EncBinary()
			yy2arr346 := z.EncBasicHandle().StructToArray
			var yyq346 [20]bool
			_, _, _ = yysep346, yyq346, yy2arr346
			const yyr346 bool = false
			yyq346[0] = len(x.Capacity) != 0
			yyq346[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq346[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq346[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq346[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq346[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq346[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq346[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq346[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq346[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq346[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq346[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq346[12] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq346[13] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq346[14] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq346[15] = x.PersistentVolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq346[16] = x.PersistentVolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq346[17] = len(x.AccessModes) != 0
			yyq346[18] = x.ClaimRef != nil
			yyq346[19] = x.PersistentVolumeReclaimPolicy != ""
			var yynn346 int
			if yyr346 || yy2arr346 {
				r.EncodeArrayStart(20)
			} else {
				yynn346 = 0
				for _, b := range yyq346 {
					if b {
						yynn346++
					}
				}
				r.EncodeMapStart(yynn346)
				yynn346 = 0
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq346[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq346[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn348 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn348 = true
				goto LABEL348
			}
		LABEL348:
			if yyr346 || yy2arr346 {
				if yyn348 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn348 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn349 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn349 = true
				goto LABEL349
			}
		LABEL349:
			if yyr346 || yy2arr346 {
				if yyn349 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn349 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn350 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn350 = true
				goto LABEL350
			}
		LABEL350:
			if yyr346 || yy2arr346 {
				if yyn350 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn350 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn351 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn351 = true
				goto LABEL351
			}
		LABEL351:
			if yyr346 || yy2arr346 {
				if yyn351 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn351 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn352 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn352 = true
				goto LABEL352
			}
		LABEL352:
			if yyr346 || yy2arr346 {
				if yyn352 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn352 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn353 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn353 = true
				goto LABEL353
			}
		LABEL353:
			if yyr346 || yy2arr346 {
				if yyn353 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn353 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn354 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn354 = true
				goto LABEL354
			}
		LABEL354:
			if yyr346 || yy2arr346 {
				if yyn354 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn354 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn355 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn355 = true
				goto LABEL355
			}
		LABEL355:
			if yyr346 || yy2arr346 {
				if yyn355 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn355 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn356 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn356 = true
				goto LABEL356
			}
		LABEL356:
			if yyr346 || yy2arr346 {
				if yyn356 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn356 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn357 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn357 = true
				goto LABEL357
			}
		LABEL357:
			if yyr346 || yy2arr346 {
				if yyn357 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn357 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn358 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn358 = true
				goto LABEL358
			}
		LABEL358:
			if yyr346 || yy2arr346 {
				if yyn358 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn358 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn359 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn359 = true
				goto LABEL359
			}
		LABEL359:
			if yyr346 || yy2arr346 {
				if yyn359 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn359 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn360 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn360 = true
				goto LABEL360
			}
		LABEL360:
			if yyr346 || yy2arr346 {
				if yyn360 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[13] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn360 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn361 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn361 = true
				goto LABEL361
			}
		LABEL361:
			if yyr346 || yy2arr346 {
				if yyn361 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[14] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn361 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn362 bool
			if x.PersistentVolumeSource.Quobyte == nil {
				yyn362 = true
				goto LABEL362
			}
		LABEL362:
			if yyr346 || yy2arr346 {
				if yyn362 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[15] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn362 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn363 bool
			if x.PersistentVolumeSource.AzureDisk == nil {
				yyn363 = true
				goto LABEL363
			}
		LABEL363:
			if yyr346 || yy2arr346 {
				if yyn363 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq346[16] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq346[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn363 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq346[17] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym365 := z.EncBinary()
						_ = yym365
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq346[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym366 := z.EncBinary()
						_ = yym366
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq346[18] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq346[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq346[19] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq346[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr346 || yy2arr346 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym369 := z.DecBinary()
	_ = yym369
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct370 := r.ContainerType()
		if yyct370 == codecSelferValueTypeMap1234 {
			yyl370 := r.ReadMapStart()
			if yyl370 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl370, d)
			}
		} else if yyct370 == codecSelferValueTypeArray1234 {
			yyl370 := r.ReadArrayStart()
			if yyl370 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl370, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys371Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys371Slc
	var yyhl371 bool = l >= 0
	for yyj371 := 0; ; yyj371++ {
		if yyhl371 {
			if yyj371 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys371Slc = r.DecodeBytes(yys371Slc, true, true)
		yys371 := string(yys371Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys371 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv372 := &x.Capacity
				yyv372.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.PersistentVolumeSource.Quobyte == nil {
				x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.PersistentVolumeSource.AzureDisk == nil {
				x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv389 := &x.AccessModes
				yym390 := z.DecBinary()
				_ = yym390
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv389), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys371)
		} // end switch yys371
	} // end for yyj371
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj393 int
	var yyb393 bool
	var yyhl393 bool = l >= 0
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv394 := &x.Capacity
		yyv394.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Quobyte == nil {
		x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureDisk == nil {
		x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv411 := &x.AccessModes
		yym412 := z.DecBinary()
		_ = yym412
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv411), d)
		}
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj393++
	if yyhl393 {
		yyb393 = yyj393 > l
	} else {
		yyb393 = r.CheckBreak()
	}
	if yyb393 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj393++
		if yyhl393 {
			yyb393 = yyj393 > l
		} else {
			yyb393 = r.CheckBreak()
		}
		if yyb393 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj393-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym415 := z.EncBinary()
	_ = yym415
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym416 := z.DecBinary()
	_ = yym416
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym417 := z.EncBinary()
		_ = yym417
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep418 := !z.EncBinary()
			yy2arr418 := z.EncBasicHandle().StructToArray
			var yyq418 [3]bool
			_, _, _ = yysep418, yyq418, yy2arr418
			const yyr418 bool = false
			yyq418[0] = x.Phase != ""
			yyq418[1] = x.Message != ""
			yyq418[2] = x.Reason != ""
			var yynn418 int
			if yyr418 || yy2arr418 {
				r.EncodeArrayStart(3)
			} else {
				yynn418 = 0
				for _, b := range yyq418 {
					if b {
						yynn418++
					}
				}
				r.EncodeMapStart(yynn418)
				yynn418 = 0
			}
			if yyr418 || yy2arr418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq418[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq418[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr418 || yy2arr418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq418[1] {
					yym421 := z.EncBinary()
					_ = yym421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq418[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr418 || yy2arr418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq418[2] {
					yym424 := z.EncBinary()
					_ = yym424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq418[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr418 || yy2arr418 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym426 := z.DecBinary()
	_ = yym426
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct427 := r.ContainerType()
		if yyct427 == codecSelferValueTypeMap1234 {
			yyl427 := r.ReadMapStart()
			if yyl427 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl427, d)
			}
		} else if yyct427 == codecSelferValueTypeArray1234 {
			yyl427 := r.ReadArrayStart()
			if yyl427 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl427, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys428Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys428Slc
	var yyhl428 bool = l >= 0
	for yyj428 := 0; ; yyj428++ {
		if yyhl428 {
			if yyj428 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys428Slc = r.DecodeBytes(yys428Slc, true, true)
		yys428 := string(yys428Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys428 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys428)
		} // end switch yys428
	} // end for yyj428
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj432 int
	var yyb432 bool
	var yyhl432 bool = l >= 0
	yyj432++
	if yyhl432 {
		yyb432 = yyj432 > l
	} else {
		yyb432 = r.CheckBreak()
	}
	if yyb432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj432++
	if yyhl432 {
		yyb432 = yyj432 > l
	} else {
		yyb432 = r.CheckBreak()
	}
	if yyb432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj432++
	if yyhl432 {
		yyb432 = yyj432 > l
	} else {
		yyb432 = r.CheckBreak()
	}
	if yyb432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj432++
		if yyhl432 {
			yyb432 = yyj432 > l
		} else {
			yyb432 = r.CheckBreak()
		}
		if yyb432 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj432-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym436 := z.EncBinary()
		_ = yym436
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep437 := !z.EncBinary()
			yy2arr437 := z.EncBasicHandle().StructToArray
			var yyq437 [4]bool
			_, _, _ = yysep437, yyq437, yy2arr437
			const yyr437 bool = false
			yyq437[0] = x.Kind != ""
			yyq437[1] = x.APIVersion != ""
			yyq437[2] = true
			var yynn437 int
			if yyr437 || yy2arr437 {
				r.EncodeArrayStart(4)
			} else {
				yynn437 = 1
				for _, b := range yyq437 {
					if b {
						yynn437++
					}
				}
				r.EncodeMapStart(yynn437)
				yynn437 = 0
			}
			if yyr437 || yy2arr437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq437[0] {
					yym439 := z.EncBinary()
					_ = yym439
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq437[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym440 := z.EncBinary()
					_ = yym440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr437 || yy2arr437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq437[1] {
					yym442 := z.EncBinary()
					_ = yym442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq437[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym443 := z.EncBinary()
					_ = yym443
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr437 || yy2arr437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq437[2] {
					yy445 := &x.ListMeta
					yym446 := z.EncBinary()
					_ = yym446
					if false {
					} else if z.HasExtensions() && z.EncExt(yy445) {
					} else {
						z.EncFallback(yy445)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq437[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy447 := &x.ListMeta
					yym448 := z.EncBinary()
					_ = yym448
					if false {
					} else if z.HasExtensions() && z.EncExt(yy447) {
					} else {
						z.EncFallback(yy447)
					}
				}
			}
			if yyr437 || yy2arr437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym450 := z.EncBinary()
					_ = yym450
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym451 := z.EncBinary()
					_ = yym451
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr437 || yy2arr437 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym452 := z.DecBinary()
	_ = yym452
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct453 := r.ContainerType()
		if yyct453 == codecSelferValueTypeMap1234 {
			yyl453 := r.ReadMapStart()
			if yyl453 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl453, d)
			}
		} else if yyct453 == codecSelferValueTypeArray1234 {
			yyl453 := r.ReadArrayStart()
			if yyl453 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl453, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys454Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys454Slc
	var yyhl454 bool = l >= 0
	for yyj454 := 0; ; yyj454++ {
		if yyhl454 {
			if yyj454 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys454Slc = r.DecodeBytes(yys454Slc, true, true)
		yys454 := string(yys454Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys454 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv457 := &x.ListMeta
				yym458 := z.DecBinary()
				_ = yym458
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv457) {
				} else {
					z.DecFallback(yyv457, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv459 := &x.Items
				yym460 := z.DecBinary()
				_ = yym460
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv459), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys454)
		} // end switch yys454
	} // end for yyj454
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj461 int
	var yyb461 bool
	var yyhl461 bool = l >= 0
	yyj461++
	if yyhl461 {
		yyb461 = yyj461 > l
	} else {
		yyb461 = r.CheckBreak()
	}
	if yyb461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj461++
	if yyhl461 {
		yyb461 = yyj461 > l
	} else {
		yyb461 = r.CheckBreak()
	}
	if yyb461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj461++
	if yyhl461 {
		yyb461 = yyj461 > l
	} else {
		yyb461 = r.CheckBreak()
	}
	if yyb461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv464 := &x.ListMeta
		yym465 := z.DecBinary()
		_ = yym465
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv464) {
		} else {
			z.DecFallback(yyv464, false)
		}
	}
	yyj461++
	if yyhl461 {
		yyb461 = yyj461 > l
	} else {
		yyb461 = r.CheckBreak()
	}
	if yyb461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv466 := &x.Items
		yym467 := z.DecBinary()
		_ = yym467
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv466), d)
		}
	}
	for {
		yyj461++
		if yyhl461 {
			yyb461 = yyj461 > l
		} else {
			yyb461 = r.CheckBreak()
		}
		if yyb461 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj461-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym468 := z.EncBinary()
		_ = yym468
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep469 := !z.EncBinary()
			yy2arr469 := z.EncBasicHandle().StructToArray
			var yyq469 [5]bool
			_, _, _ = yysep469, yyq469, yy2arr469
			const yyr469 bool = false
			yyq469[0] = x.Kind != ""
			yyq469[1] = x.APIVersion != ""
			yyq469[2] = true
			yyq469[3] = true
			yyq469[4] = true
			var yynn469 int
			if yyr469 || yy2arr469 {
				r.EncodeArrayStart(5)
			} else {
				yynn469 = 0
				for _, b := range yyq469 {
					if b {
						yynn469++
					}
				}
				r.EncodeMapStart(yynn469)
				yynn469 = 0
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq469[0] {
					yym471 := z.EncBinary()
					_ = yym471
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq469[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym472 := z.EncBinary()
					_ = yym472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq469[1] {
					yym474 := z.EncBinary()
					_ = yym474
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq469[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym475 := z.EncBinary()
					_ = yym475
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq469[2] {
					yy477 := &x.ObjectMeta
					yy477.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq469[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy478 := &x.ObjectMeta
					yy478.CodecEncodeSelf(e)
				}
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq469[3] {
					yy480 := &x.Spec
					yy480.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq469[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy481 := &x.Spec
					yy481.CodecEncodeSelf(e)
				}
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq469[4] {
					yy483 := &x.Status
					yy483.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq469[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy484 := &x.Status
					yy484.CodecEncodeSelf(e)
				}
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym485 := z.DecBinary()
	_ = yym485
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct486 := r.ContainerType()
		if yyct486 == codecSelferValueTypeMap1234 {
			yyl486 := r.ReadMapStart()
			if yyl486 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl486, d)
			}
		} else if yyct486 == codecSelferValueTypeArray1234 {
			yyl486 := r.ReadArrayStart()
			if yyl486 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl486, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys487Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys487Slc
	var yyhl487 bool = l >= 0
	for yyj487 := 0; ; yyj487++ {
		if yyhl487 {
			if yyj487 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys487Slc = r.DecodeBytes(yys487Slc, true, true)
		yys487 := string(yys487Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys487 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv490 := &x.ObjectMeta
				yyv490.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv491 := &x.Spec
				yyv491.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv492 := &x.Status
				yyv492.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys487)
		} // end switch yys487
	} // end for yyj487
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj493 int
	var yyb493 bool
	var yyhl493 bool = l >= 0
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv496 := &x.ObjectMeta
		yyv496.CodecDecodeSelf(d)
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv497 := &x.Spec
		yyv497.CodecDecodeSelf(d)
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv498 := &x.Status
		yyv498.CodecDecodeSelf(d)
	}
	for {
		yyj493++
		if yyhl493 {
			yyb493 = yyj493 > l
		} else {
			yyb493 = r.CheckBreak()
		}
		if yyb493 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj493-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym499 := z.EncBinary()
		_ = yym499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep500 := !z.EncBinary()
			yy2arr500 := z.EncBasicHandle().StructToArray
			var yyq500 [4]bool
			_, _, _ = yysep500, yyq500, yy2arr500
			const yyr500 bool = false
			yyq500[0] = x.Kind != ""
			yyq500[1] = x.APIVersion != ""
			yyq500[2] = true
			var yynn500 int
			if yyr500 || yy2arr500 {
				r.EncodeArrayStart(4)
			} else {
				yynn500 = 1
				for _, b := range yyq500 {
					if b {
						yynn500++
					}
				}
				r.EncodeMapStart(yynn500)
				yynn500 = 0
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq500[0] {
					yym502 := z.EncBinary()
					_ = yym502
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq500[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym503 := z.EncBinary()
					_ = yym503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq500[1] {
					yym505 := z.EncBinary()
					_ = yym505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq500[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym506 := z.EncBinary()
					_ = yym506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq500[2] {
					yy508 := &x.ListMeta
					yym509 := z.EncBinary()
					_ = yym509
					if false {
					} else if z.HasExtensions() && z.EncExt(yy508) {
					} else {
						z.EncFallback(yy508)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq500[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy510 := &x.ListMeta
					yym511 := z.EncBinary()
					_ = yym511
					if false {
					} else if z.HasExtensions() && z.EncExt(yy510) {
					} else {
						z.EncFallback(yy510)
					}
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym513 := z.EncBinary()
					_ = yym513
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym514 := z.EncBinary()
					_ = yym514
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym515 := z.DecBinary()
	_ = yym515
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct516 := r.ContainerType()
		if yyct516 == codecSelferValueTypeMap1234 {
			yyl516 := r.ReadMapStart()
			if yyl516 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl516, d)
			}
		} else if yyct516 == codecSelferValueTypeArray1234 {
			yyl516 := r.ReadArrayStart()
			if yyl516 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl516, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys517Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys517Slc
	var yyhl517 bool = l >= 0
	for yyj517 := 0; ; yyj517++ {
		if yyhl517 {
			if yyj517 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys517Slc = r.DecodeBytes(yys517Slc, true, true)
		yys517 := string(yys517Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys517 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv520 := &x.ListMeta
				yym521 := z.DecBinary()
				_ = yym521
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv520) {
				} else {
					z.DecFallback(yyv520, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv522 := &x.Items
				yym523 := z.DecBinary()
				_ = yym523
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv522), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys517)
		} // end switch yys517
	} // end for yyj517
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj524 int
	var yyb524 bool
	var yyhl524 bool = l >= 0
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv527 := &x.ListMeta
		yym528 := z.DecBinary()
		_ = yym528
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv527) {
		} else {
			z.DecFallback(yyv527, false)
		}
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv529 := &x.Items
		yym530 := z.DecBinary()
		_ = yym530
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv529), d)
		}
	}
	for {
		yyj524++
		if yyhl524 {
			yyb524 = yyj524 > l
		} else {
			yyb524 = r.CheckBreak()
		}
		if yyb524 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj524-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym531 := z.EncBinary()
		_ = yym531
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep532 := !z.EncBinary()
			yy2arr532 := z.EncBasicHandle().StructToArray
			var yyq532 [4]bool
			_, _, _ = yysep532, yyq532, yy2arr532
			const yyr532 bool = false
			yyq532[0] = len(x.AccessModes) != 0
			yyq532[1] = x.Selector != nil
			yyq532[2] = true
			yyq532[3] = x.VolumeName != ""
			var yynn532 int
			if yyr532 || yy2arr532 {
				r.EncodeArrayStart(4)
			} else {
				yynn532 = 0
				for _, b := range yyq532 {
					if b {
						yynn532++
					}
				}
				r.EncodeMapStart(yynn532)
				yynn532 = 0
			}
			if yyr532 || yy2arr532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq532[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym534 := z.EncBinary()
						_ = yym534
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq532[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym535 := z.EncBinary()
						_ = yym535
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr532 || yy2arr532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq532[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym537 := z.EncBinary()
						_ = yym537
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq532[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym538 := z.EncBinary()
						_ = yym538
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr532 || yy2arr532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq532[2] {
					yy540 := &x.Resources
					yy540.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq532[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy541 := &x.Resources
					yy541.CodecEncodeSelf(e)
				}
			}
			if yyr532 || yy2arr532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq532[3] {
					yym543 := z.EncBinary()
					_ = yym543
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq532[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym544 := z.EncBinary()
					_ = yym544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr532 || yy2arr532 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym545 := z.DecBinary()
	_ = yym545
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct546 := r.ContainerType()
		if yyct546 == codecSelferValueTypeMap1234 {
			yyl546 := r.ReadMapStart()
			if yyl546 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl546, d)
			}
		} else if yyct546 == codecSelferValueTypeArray1234 {
			yyl546 := r.ReadArrayStart()
			if yyl546 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl546, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys547Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys547Slc
	var yyhl547 bool = l >= 0
	for yyj547 := 0; ; yyj547++ {
		if yyhl547 {
			if yyj547 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys547Slc = r.DecodeBytes(yys547Slc, true, true)
		yys547 := string(yys547Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys547 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv548 := &x.AccessModes
				yym549 := z.DecBinary()
				_ = yym549
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv548), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym551 := z.DecBinary()
				_ = yym551
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv552 := &x.Resources
				yyv552.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys547)
		} // end switch yys547
	} // end for yyj547
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj554 int
	var yyb554 bool
	var yyhl554 bool = l >= 0
	yyj554++
	if yyhl554 {
		yyb554 = yyj554 > l
	} else {
		yyb554 = r.CheckBreak()
	}
	if yyb554 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv555 := &x.AccessModes
		yym556 := z.DecBinary()
		_ = yym556
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv555), d)
		}
	}
	yyj554++
	if yyhl554 {
		yyb554 = yyj554 > l
	} else {
		yyb554 = r.CheckBreak()
	}
	if yyb554 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym558 := z.DecBinary()
		_ = yym558
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj554++
	if yyhl554 {
		yyb554 = yyj554 > l
	} else {
		yyb554 = r.CheckBreak()
	}
	if yyb554 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv559 := &x.Resources
		yyv559.CodecDecodeSelf(d)
	}
	yyj554++
	if yyhl554 {
		yyb554 = yyj554 > l
	} else {
		yyb554 = r.CheckBreak()
	}
	if yyb554 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj554++
		if yyhl554 {
			yyb554 = yyj554 > l
		} else {
			yyb554 = r.CheckBreak()
		}
		if yyb554 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj554-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym561 := z.EncBinary()
		_ = yym561
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep562 := !z.EncBinary()
			yy2arr562 := z.EncBasicHandle().StructToArray
			var yyq562 [3]bool
			_, _, _ = yysep562, yyq562, yy2arr562
			const yyr562 bool = false
			yyq562[0] = x.Phase != ""
			yyq562[1] = len(x.AccessModes) != 0
			yyq562[2] = len(x.Capacity) != 0
			var yynn562 int
			if yyr562 || yy2arr562 {
				r.EncodeArrayStart(3)
			} else {
				yynn562 = 0
				for _, b := range yyq562 {
					if b {
						yynn562++
					}
				}
				r.EncodeMapStart(yynn562)
				yynn562 = 0
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq562[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym565 := z.EncBinary()
						_ = yym565
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq562[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym566 := z.EncBinary()
						_ = yym566
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq562[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq562[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr562 || yy2arr562 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym568 := z.DecBinary()
	_ = yym568
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct569 := r.ContainerType()
		if yyct569 == codecSelferValueTypeMap1234 {
			yyl569 := r.ReadMapStart()
			if yyl569 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl569, d)
			}
		} else if yyct569 == codecSelferValueTypeArray1234 {
			yyl569 := r.ReadArrayStart()
			if yyl569 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl569, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys570Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys570Slc
	var yyhl570 bool = l >= 0
	for yyj570 := 0; ; yyj570++ {
		if yyhl570 {
			if yyj570 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys570Slc = r.DecodeBytes(yys570Slc, true, true)
		yys570 := string(yys570Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys570 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv572 := &x.AccessModes
				yym573 := z.DecBinary()
				_ = yym573
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv572), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv574 := &x.Capacity
				yyv574.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys570)
		} // end switch yys570
	} // end for yyj570
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj575 int
	var yyb575 bool
	var yyhl575 bool = l >= 0
	yyj575++
	if yyhl575 {
		yyb575 = yyj575 > l
	} else {
		yyb575 = r.CheckBreak()
	}
	if yyb575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj575++
	if yyhl575 {
		yyb575 = yyj575 > l
	} else {
		yyb575 = r.CheckBreak()
	}
	if yyb575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv577 := &x.AccessModes
		yym578 := z.DecBinary()
		_ = yym578
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv577), d)
		}
	}
	yyj575++
	if yyhl575 {
		yyb575 = yyj575 > l
	} else {
		yyb575 = r.CheckBreak()
	}
	if yyb575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv579 := &x.Capacity
		yyv579.CodecDecodeSelf(d)
	}
	for {
		yyj575++
		if yyhl575 {
			yyb575 = yyj575 > l
		} else {
			yyb575 = r.CheckBreak()
		}
		if yyb575 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj575-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym580 := z.EncBinary()
	_ = yym580
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym581 := z.DecBinary()
	_ = yym581
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym582 := z.EncBinary()
	_ = yym582
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym583 := z.DecBinary()
	_ = yym583
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym584 := z.EncBinary()
	_ = yym584
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym585 := z.DecBinary()
	_ = yym585
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym586 := z.EncBinary()
		_ = yym586
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep587 := !z.EncBinary()
			yy2arr587 := z.EncBasicHandle().StructToArray
			var yyq587 [1]bool
			_, _, _ = yysep587, yyq587, yy2arr587
			const yyr587 bool = false
			var yynn587 int
			if yyr587 || yy2arr587 {
				r.EncodeArrayStart(1)
			} else {
				yynn587 = 1
				for _, b := range yyq587 {
					if b {
						yynn587++
					}
				}
				r.EncodeMapStart(yynn587)
				yynn587 = 0
			}
			if yyr587 || yy2arr587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym589 := z.EncBinary()
				_ = yym589
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym590 := z.EncBinary()
				_ = yym590
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr587 || yy2arr587 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym591 := z.DecBinary()
	_ = yym591
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct592 := r.ContainerType()
		if yyct592 == codecSelferValueTypeMap1234 {
			yyl592 := r.ReadMapStart()
			if yyl592 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl592, d)
			}
		} else if yyct592 == codecSelferValueTypeArray1234 {
			yyl592 := r.ReadArrayStart()
			if yyl592 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl592, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys593Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys593Slc
	var yyhl593 bool = l >= 0
	for yyj593 := 0; ; yyj593++ {
		if yyhl593 {
			if yyj593 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys593Slc = r.DecodeBytes(yys593Slc, true, true)
		yys593 := string(yys593Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys593 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys593)
		} // end switch yys593
	} // end for yyj593
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj595 int
	var yyb595 bool
	var yyhl595 bool = l >= 0
	yyj595++
	if yyhl595 {
		yyb595 = yyj595 > l
	} else {
		yyb595 = r.CheckBreak()
	}
	if yyb595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj595++
		if yyhl595 {
			yyb595 = yyj595 > l
		} else {
			yyb595 = r.CheckBreak()
		}
		if yyb595 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj595-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym597 := z.EncBinary()
		_ = yym597
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep598 := !z.EncBinary()
			yy2arr598 := z.EncBasicHandle().StructToArray
			var yyq598 [1]bool
			_, _, _ = yysep598, yyq598, yy2arr598
			const yyr598 bool = false
			yyq598[0] = x.Medium != ""
			var yynn598 int
			if yyr598 || yy2arr598 {
				r.EncodeArrayStart(1)
			} else {
				yynn598 = 0
				for _, b := range yyq598 {
					if b {
						yynn598++
					}
				}
				r.EncodeMapStart(yynn598)
				yynn598 = 0
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq598[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq598[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym600 := z.DecBinary()
	_ = yym600
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct601 := r.ContainerType()
		if yyct601 == codecSelferValueTypeMap1234 {
			yyl601 := r.ReadMapStart()
			if yyl601 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl601, d)
			}
		} else if yyct601 == codecSelferValueTypeArray1234 {
			yyl601 := r.ReadArrayStart()
			if yyl601 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl601, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys602Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys602Slc
	var yyhl602 bool = l >= 0
	for yyj602 := 0; ; yyj602++ {
		if yyhl602 {
			if yyj602 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys602Slc = r.DecodeBytes(yys602Slc, true, true)
		yys602 := string(yys602Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys602 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys602)
		} // end switch yys602
	} // end for yyj602
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj604 int
	var yyb604 bool
	var yyhl604 bool = l >= 0
	yyj604++
	if yyhl604 {
		yyb604 = yyj604 > l
	} else {
		yyb604 = r.CheckBreak()
	}
	if yyb604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj604++
		if yyhl604 {
			yyb604 = yyj604 > l
		} else {
			yyb604 = r.CheckBreak()
		}
		if yyb604 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj604-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym606 := z.EncBinary()
		_ = yym606
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep607 := !z.EncBinary()
			yy2arr607 := z.EncBasicHandle().StructToArray
			var yyq607 [3]bool
			_, _, _ = yysep607, yyq607, yy2arr607
			const yyr607 bool = false
			yyq607[2] = x.ReadOnly != false
			var yynn607 int
			if yyr607 || yy2arr607 {
				r.EncodeArrayStart(3)
			} else {
				yynn607 = 2
				for _, b := range yyq607 {
					if b {
						yynn607++
					}
				}
				r.EncodeMapStart(yynn607)
				yynn607 = 0
			}
			if yyr607 || yy2arr607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym609 := z.EncBinary()
				_ = yym609
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym610 := z.EncBinary()
				_ = yym610
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr607 || yy2arr607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym612 := z.EncBinary()
				_ = yym612
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym613 := z.EncBinary()
				_ = yym613
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr607 || yy2arr607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq607[2] {
					yym615 := z.EncBinary()
					_ = yym615
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq607[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr607 || yy2arr607 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym617 := z.DecBinary()
	_ = yym617
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct618 := r.ContainerType()
		if yyct618 == codecSelferValueTypeMap1234 {
			yyl618 := r.ReadMapStart()
			if yyl618 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl618, d)
			}
		} else if yyct618 == codecSelferValueTypeArray1234 {
			yyl618 := r.ReadArrayStart()
			if yyl618 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl618, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys619Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys619Slc
	var yyhl619 bool = l >= 0
	for yyj619 := 0; ; yyj619++ {
		if yyhl619 {
			if yyj619 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys619Slc = r.DecodeBytes(yys619Slc, true, true)
		yys619 := string(yys619Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys619 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys619)
		} // end switch yys619
	} // end for yyj619
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj623 int
	var yyb623 bool
	var yyhl623 bool = l >= 0
	yyj623++
	if yyhl623 {
		yyb623 = yyj623 > l
	} else {
		yyb623 = r.CheckBreak()
	}
	if yyb623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj623++
	if yyhl623 {
		yyb623 = yyj623 > l
	} else {
		yyb623 = r.CheckBreak()
	}
	if yyb623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj623++
	if yyhl623 {
		yyb623 = yyj623 > l
	} else {
		yyb623 = r.CheckBreak()
	}
	if yyb623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj623++
		if yyhl623 {
			yyb623 = yyj623 > l
		} else {
			yyb623 = r.CheckBreak()
		}
		if yyb623 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj623-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym627 := z.EncBinary()
		_ = yym627
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep628 := !z.EncBinary()
			yy2arr628 := z.EncBasicHandle().StructToArray
			var yyq628 [8]bool
			_, _, _ = yysep628, yyq628, yy2arr628
			const yyr628 bool = false
			yyq628[2] = x.FSType != ""
			yyq628[3] = x.RBDPool != ""
			yyq628[4] = x.RadosUser != ""
			yyq628[5] = x.Keyring != ""
			yyq628[6] = x.SecretRef != nil
			yyq628[7] = x.ReadOnly != false
			var yynn628 int
			if yyr628 || yy2arr628 {
				r.EncodeArrayStart(8)
			} else {
				yynn628 = 2
				for _, b := range yyq628 {
					if b {
						yynn628++
					}
				}
				r.EncodeMapStart(yynn628)
				yynn628 = 0
			}
			if yyr628 || yy2arr628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym630 := z.EncBinary()
					_ = yym630
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym631 := z.EncBinary()
					_ = yym631
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr628 || yy2arr628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym633 := z.EncBinary()
				_ = yym633
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym634 := z.EncBinary()
				_ = yym634
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr628 || yy2arr628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq628[2] {
					yym636 := z.EncBinary()
					_ = yym636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq628[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym637 := z.EncBinary()
					_ = yym637
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr628 || yy2arr628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq628[3] {
					yym639 := z.EncBinary()
					_ = yym639
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq628[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym640 := z.EncBinary()
					_ = yym640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr628 || yy2arr628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq628[4] {
					yym642 := z.EncBinary()
					_ = yym642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq628[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym643 := z.EncBinary()
					_ = yym643
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr628 || yy2arr628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq628[5] {
					yym645 := z.EncBinary()
					_ = yym645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq628[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym646 := z.EncBinary()
					_ = yym646
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr628 || yy2arr628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq628[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq628[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr628 || yy2arr628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq628[7] {
					yym649 := z.EncBinary()
					_ = yym649
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq628[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym650 := z.EncBinary()
					_ = yym650
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr628 || yy2arr628 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym651 := z.DecBinary()
	_ = yym651
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct652 := r.ContainerType()
		if yyct652 == codecSelferValueTypeMap1234 {
			yyl652 := r.ReadMapStart()
			if yyl652 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl652, d)
			}
		} else if yyct652 == codecSelferValueTypeArray1234 {
			yyl652 := r.ReadArrayStart()
			if yyl652 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl652, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys653Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys653Slc
	var yyhl653 bool = l >= 0
	for yyj653 := 0; ; yyj653++ {
		if yyhl653 {
			if yyj653 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys653Slc = r.DecodeBytes(yys653Slc, true, true)
		yys653 := string(yys653Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys653 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv654 := &x.CephMonitors
				yym655 := z.DecBinary()
				_ = yym655
				if false {
				} else {
					z.F.DecSliceStringX(yyv654, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys653)
		} // end switch yys653
	} // end for yyj653
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj663 int
	var yyb663 bool
	var yyhl663 bool = l >= 0
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv664 := &x.CephMonitors
		yym665 := z.DecBinary()
		_ = yym665
		if false {
		} else {
			z.F.DecSliceStringX(yyv664, false, d)
		}
	}
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj663++
		if yyhl663 {
			yyb663 = yyj663 > l
		} else {
			yyb663 = r.CheckBreak()
		}
		if yyb663 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj663-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym673 := z.EncBinary()
		_ = yym673
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep674 := !z.EncBinary()
			yy2arr674 := z.EncBasicHandle().StructToArray
			var yyq674 [3]bool
			_, _, _ = yysep674, yyq674, yy2arr674
			const yyr674 bool = false
			yyq674[1] = x.FSType != ""
			yyq674[2] = x.ReadOnly != false
			var yynn674 int
			if yyr674 || yy2arr674 {
				r.EncodeArrayStart(3)
			} else {
				yynn674 = 1
				for _, b := range yyq674 {
					if b {
						yynn674++
					}
				}
				r.EncodeMapStart(yynn674)
				yynn674 = 0
			}
			if yyr674 || yy2arr674 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym676 := z.EncBinary()
				_ = yym676
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym677 := z.EncBinary()
				_ = yym677
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr674 || yy2arr674 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq674[1] {
					yym679 := z.EncBinary()
					_ = yym679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq674[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym680 := z.EncBinary()
					_ = yym680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr674 || yy2arr674 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq674[2] {
					yym682 := z.EncBinary()
					_ = yym682
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq674[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym683 := z.EncBinary()
					_ = yym683
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr674 || yy2arr674 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym684 := z.DecBinary()
	_ = yym684
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct685 := r.ContainerType()
		if yyct685 == codecSelferValueTypeMap1234 {
			yyl685 := r.ReadMapStart()
			if yyl685 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl685, d)
			}
		} else if yyct685 == codecSelferValueTypeArray1234 {
			yyl685 := r.ReadArrayStart()
			if yyl685 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl685, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys686Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys686Slc
	var yyhl686 bool = l >= 0
	for yyj686 := 0; ; yyj686++ {
		if yyhl686 {
			if yyj686 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys686Slc = r.DecodeBytes(yys686Slc, true, true)
		yys686 := string(yys686Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys686 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys686)
		} // end switch yys686
	} // end for yyj686
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj690 int
	var yyb690 bool
	var yyhl690 bool = l >= 0
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj690++
		if yyhl690 {
			yyb690 = yyj690 > l
		} else {
			yyb690 = r.CheckBreak()
		}
		if yyb690 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj690-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym694 := z.EncBinary()
		_ = yym694
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep695 := !z.EncBinary()
			yy2arr695 := z.EncBasicHandle().StructToArray
			var yyq695 [6]bool
			_, _, _ = yysep695, yyq695, yy2arr695
			const yyr695 bool = false
			yyq695[1] = x.Path != ""
			yyq695[2] = x.User != ""
			yyq695[3] = x.SecretFile != ""
			yyq695[4] = x.SecretRef != nil
			yyq695[5] = x.ReadOnly != false
			var yynn695 int
			if yyr695 || yy2arr695 {
				r.EncodeArrayStart(6)
			} else {
				yynn695 = 1
				for _, b := range yyq695 {
					if b {
						yynn695++
					}
				}
				r.EncodeMapStart(yynn695)
				yynn695 = 0
			}
			if yyr695 || yy2arr695 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym697 := z.EncBinary()
					_ = yym697
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym698 := z.EncBinary()
					_ = yym698
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr695 || yy2arr695 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq695[1] {
					yym700 := z.EncBinary()
					_ = yym700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq695[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym701 := z.EncBinary()
					_ = yym701
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr695 || yy2arr695 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq695[2] {
					yym703 := z.EncBinary()
					_ = yym703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq695[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym704 := z.EncBinary()
					_ = yym704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr695 || yy2arr695 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq695[3] {
					yym706 := z.EncBinary()
					_ = yym706
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq695[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym707 := z.EncBinary()
					_ = yym707
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr695 || yy2arr695 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq695[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq695[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr695 || yy2arr695 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq695[5] {
					yym710 := z.EncBinary()
					_ = yym710
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq695[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym711 := z.EncBinary()
					_ = yym711
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr695 || yy2arr695 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym712 := z.DecBinary()
	_ = yym712
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct713 := r.ContainerType()
		if yyct713 == codecSelferValueTypeMap1234 {
			yyl713 := r.ReadMapStart()
			if yyl713 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl713, d)
			}
		} else if yyct713 == codecSelferValueTypeArray1234 {
			yyl713 := r.ReadArrayStart()
			if yyl713 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl713, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys714Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys714Slc
	var yyhl714 bool = l >= 0
	for yyj714 := 0; ; yyj714++ {
		if yyhl714 {
			if yyj714 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys714Slc = r.DecodeBytes(yys714Slc, true, true)
		yys714 := string(yys714Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys714 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv715 := &x.Monitors
				yym716 := z.DecBinary()
				_ = yym716
				if false {
				} else {
					z.F.DecSliceStringX(yyv715, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys714)
		} // end switch yys714
	} // end for yyj714
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj722 int
	var yyb722 bool
	var yyhl722 bool = l >= 0
	yyj722++
	if yyhl722 {
		yyb722 = yyj722 > l
	} else {
		yyb722 = r.CheckBreak()
	}
	if yyb722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv723 := &x.Monitors
		yym724 := z.DecBinary()
		_ = yym724
		if false {
		} else {
			z.F.DecSliceStringX(yyv723, false, d)
		}
	}
	yyj722++
	if yyhl722 {
		yyb722 = yyj722 > l
	} else {
		yyb722 = r.CheckBreak()
	}
	if yyb722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj722++
	if yyhl722 {
		yyb722 = yyj722 > l
	} else {
		yyb722 = r.CheckBreak()
	}
	if yyb722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj722++
	if yyhl722 {
		yyb722 = yyj722 > l
	} else {
		yyb722 = r.CheckBreak()
	}
	if yyb722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj722++
	if yyhl722 {
		yyb722 = yyj722 > l
	} else {
		yyb722 = r.CheckBreak()
	}
	if yyb722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj722++
	if yyhl722 {
		yyb722 = yyj722 > l
	} else {
		yyb722 = r.CheckBreak()
	}
	if yyb722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj722++
		if yyhl722 {
			yyb722 = yyj722 > l
		} else {
			yyb722 = r.CheckBreak()
		}
		if yyb722 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj722-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym730 := z.EncBinary()
		_ = yym730
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep731 := !z.EncBinary()
			yy2arr731 := z.EncBasicHandle().StructToArray
			var yyq731 [1]bool
			_, _, _ = yysep731, yyq731, yy2arr731
			const yyr731 bool = false
			var yynn731 int
			if yyr731 || yy2arr731 {
				r.EncodeArrayStart(1)
			} else {
				yynn731 = 1
				for _, b := range yyq731 {
					if b {
						yynn731++
					}
				}
				r.EncodeMapStart(yynn731)
				yynn731 = 0
			}
			if yyr731 || yy2arr731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym733 := z.EncBinary()
				_ = yym733
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym734 := z.EncBinary()
				_ = yym734
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr731 || yy2arr731 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym735 := z.DecBinary()
	_ = yym735
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct736 := r.ContainerType()
		if yyct736 == codecSelferValueTypeMap1234 {
			yyl736 := r.ReadMapStart()
			if yyl736 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl736, d)
			}
		} else if yyct736 == codecSelferValueTypeArray1234 {
			yyl736 := r.ReadArrayStart()
			if yyl736 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl736, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys737Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys737Slc
	var yyhl737 bool = l >= 0
	for yyj737 := 0; ; yyj737++ {
		if yyhl737 {
			if yyj737 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys737Slc = r.DecodeBytes(yys737Slc, true, true)
		yys737 := string(yys737Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys737 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys737)
		} // end switch yys737
	} // end for yyj737
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj739 int
	var yyb739 bool
	var yyhl739 bool = l >= 0
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj739++
		if yyhl739 {
			yyb739 = yyj739 > l
		} else {
			yyb739 = r.CheckBreak()
		}
		if yyb739 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj739-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym741 := z.EncBinary()
	_ = yym741
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym742 := z.DecBinary()
	_ = yym742
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym743 := z.EncBinary()
	_ = yym743
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym744 := z.DecBinary()
	_ = yym744
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym745 := z.EncBinary()
		_ = yym745
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep746 := !z.EncBinary()
			yy2arr746 := z.EncBasicHandle().StructToArray
			var yyq746 [4]bool
			_, _, _ = yysep746, yyq746, yy2arr746
			const yyr746 bool = false
			yyq746[1] = x.FSType != ""
			yyq746[2] = x.Partition != 0
			yyq746[3] = x.ReadOnly != false
			var yynn746 int
			if yyr746 || yy2arr746 {
				r.EncodeArrayStart(4)
			} else {
				yynn746 = 1
				for _, b := range yyq746 {
					if b {
						yynn746++
					}
				}
				r.EncodeMapStart(yynn746)
				yynn746 = 0
			}
			if yyr746 || yy2arr746 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym748 := z.EncBinary()
				_ = yym748
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym749 := z.EncBinary()
				_ = yym749
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr746 || yy2arr746 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq746[1] {
					yym751 := z.EncBinary()
					_ = yym751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq746[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym752 := z.EncBinary()
					_ = yym752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr746 || yy2arr746 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq746[2] {
					yym754 := z.EncBinary()
					_ = yym754
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq746[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym755 := z.EncBinary()
					_ = yym755
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr746 || yy2arr746 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq746[3] {
					yym757 := z.EncBinary()
					_ = yym757
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq746[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym758 := z.EncBinary()
					_ = yym758
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr746 || yy2arr746 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym759 := z.DecBinary()
	_ = yym759
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct760 := r.ContainerType()
		if yyct760 == codecSelferValueTypeMap1234 {
			yyl760 := r.ReadMapStart()
			if yyl760 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl760, d)
			}
		} else if yyct760 == codecSelferValueTypeArray1234 {
			yyl760 := r.ReadArrayStart()
			if yyl760 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl760, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys761Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys761Slc
	var yyhl761 bool = l >= 0
	for yyj761 := 0; ; yyj761++ {
		if yyhl761 {
			if yyj761 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys761Slc = r.DecodeBytes(yys761Slc, true, true)
		yys761 := string(yys761Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys761 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys761)
		} // end switch yys761
	} // end for yyj761
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj766 int
	var yyb766 bool
	var yyhl766 bool = l >= 0
	yyj766++
	if yyhl766 {
		yyb766 = yyj766 > l
	} else {
		yyb766 = r.CheckBreak()
	}
	if yyb766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj766++
	if yyhl766 {
		yyb766 = yyj766 > l
	} else {
		yyb766 = r.CheckBreak()
	}
	if yyb766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj766++
	if yyhl766 {
		yyb766 = yyj766 > l
	} else {
		yyb766 = r.CheckBreak()
	}
	if yyb766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj766++
	if yyhl766 {
		yyb766 = yyj766 > l
	} else {
		yyb766 = r.CheckBreak()
	}
	if yyb766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj766++
		if yyhl766 {
			yyb766 = yyj766 > l
		} else {
			yyb766 = r.CheckBreak()
		}
		if yyb766 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj766-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *QuobyteVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym771 := z.EncBinary()
		_ = yym771
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep772 := !z.EncBinary()
			yy2arr772 := z.EncBasicHandle().StructToArray
			var yyq772 [5]bool
			_, _, _ = yysep772, yyq772, yy2arr772
			const yyr772 bool = false
			yyq772[2] = x.ReadOnly != false
			yyq772[3] = x.User != ""
			yyq772[4] = x.Group != ""
			var yynn772 int
			if yyr772 || yy2arr772 {
				r.EncodeArrayStart(5)
			} else {
				yynn772 = 2
				for _, b := range yyq772 {
					if b {
						yynn772++
					}
				}
				r.EncodeMapStart(yynn772)
				yynn772 = 0
			}
			if yyr772 || yy2arr772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym774 := z.EncBinary()
				_ = yym774
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("registry"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym775 := z.EncBinary()
				_ = yym775
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			}
			if yyr772 || yy2arr772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym777 := z.EncBinary()
				_ = yym777
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volume"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym778 := z.EncBinary()
				_ = yym778
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			}
			if yyr772 || yy2arr772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq772[2] {
					yym780 := z.EncBinary()
					_ = yym780
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq772[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym781 := z.EncBinary()
					_ = yym781
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr772 || yy2arr772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq772[3] {
					yym783 := z.EncBinary()
					_ = yym783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq772[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym784 := z.EncBinary()
					_ = yym784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr772 || yy2arr772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq772[4] {
					yym786 := z.EncBinary()
					_ = yym786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq772[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym787 := z.EncBinary()
					_ = yym787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				}
			}
			if yyr772 || yy2arr772 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *QuobyteVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym788 := z.DecBinary()
	_ = yym788
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct789 := r.ContainerType()
		if yyct789 == codecSelferValueTypeMap1234 {
			yyl789 := r.ReadMapStart()
			if yyl789 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl789, d)
			}
		} else if yyct789 == codecSelferValueTypeArray1234 {
			yyl789 := r.ReadArrayStart()
			if yyl789 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl789, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys790Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys790Slc
	var yyhl790 bool = l >= 0
	for yyj790 := 0; ; yyj790++ {
		if yyhl790 {
			if yyj790 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys790Slc = r.DecodeBytes(yys790Slc, true, true)
		yys790 := string(yys790Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys790 {
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = string(r.DecodeString())
			}
		case "volume":
			if r.TryDecodeAsNil() {
				x.Volume = ""
			} else {
				x.Volume = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				x.Group = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys790)
		} // end switch yys790
	} // end for yyj790
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj796 int
	var yyb796 bool
	var yyhl796 bool = l >= 0
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volume = ""
	} else {
		x.Volume = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		x.Group = string(r.DecodeString())
	}
	for {
		yyj796++
		if yyhl796 {
			yyb796 = yyj796 > l
		} else {
			yyb796 = r.CheckBreak()
		}
		if yyb796 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj796-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym802 := z.EncBinary()
		_ = yym802
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep803 := !z.EncBinary()
			yy2arr803 := z.EncBasicHandle().StructToArray
			var yyq803 [5]bool
			_, _, _ = yysep803, yyq803, yy2arr803
			const yyr803 bool = false
			yyq803[1] = x.FSType != ""
			yyq803[2] = x.SecretRef != nil
			yyq803[3] = x.ReadOnly != false
			yyq803[4] = len(x.Options) != 0
			var yynn803 int
			if yyr803 || yy2arr803 {
				r.EncodeArrayStart(5)
			} else {
				yynn803 = 1
				for _, b := range yyq803 {
					if b {
						yynn803++
					}
				}
				r.EncodeMapStart(yynn803)
				yynn803 = 0
			}
			if yyr803 || yy2arr803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym805 := z.EncBinary()
				_ = yym805
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym806 := z.EncBinary()
				_ = yym806
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr803 || yy2arr803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq803[1] {
					yym808 := z.EncBinary()
					_ = yym808
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq803[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym809 := z.EncBinary()
					_ = yym809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr803 || yy2arr803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq803[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq803[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr803 || yy2arr803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq803[3] {
					yym812 := z.EncBinary()
					_ = yym812
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq803[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym813 := z.EncBinary()
					_ = yym813
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr803 || yy2arr803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq803[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym815 := z.EncBinary()
						_ = yym815
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq803[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym816 := z.EncBinary()
						_ = yym816
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr803 || yy2arr803 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym817 := z.DecBinary()
	_ = yym817
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct818 := r.ContainerType()
		if yyct818 == codecSelferValueTypeMap1234 {
			yyl818 := r.ReadMapStart()
			if yyl818 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl818, d)
			}
		} else if yyct818 == codecSelferValueTypeArray1234 {
			yyl818 := r.ReadArrayStart()
			if yyl818 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl818, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys819Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys819Slc
	var yyhl819 bool = l >= 0
	for yyj819 := 0; ; yyj819++ {
		if yyhl819 {
			if yyj819 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys819Slc = r.DecodeBytes(yys819Slc, true, true)
		yys819 := string(yys819Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys819 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv824 := &x.Options
				yym825 := z.DecBinary()
				_ = yym825
				if false {
				} else {
					z.F.DecMapStringStringX(yyv824, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys819)
		} // end switch yys819
	} // end for yyj819
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj826 int
	var yyb826 bool
	var yyhl826 bool = l >= 0
	yyj826++
	if yyhl826 {
		yyb826 = yyj826 > l
	} else {
		yyb826 = r.CheckBreak()
	}
	if yyb826 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj826++
	if yyhl826 {
		yyb826 = yyj826 > l
	} else {
		yyb826 = r.CheckBreak()
	}
	if yyb826 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj826++
	if yyhl826 {
		yyb826 = yyj826 > l
	} else {
		yyb826 = r.CheckBreak()
	}
	if yyb826 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj826++
	if yyhl826 {
		yyb826 = yyj826 > l
	} else {
		yyb826 = r.CheckBreak()
	}
	if yyb826 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj826++
	if yyhl826 {
		yyb826 = yyj826 > l
	} else {
		yyb826 = r.CheckBreak()
	}
	if yyb826 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv831 := &x.Options
		yym832 := z.DecBinary()
		_ = yym832
		if false {
		} else {
			z.F.DecMapStringStringX(yyv831, false, d)
		}
	}
	for {
		yyj826++
		if yyhl826 {
			yyb826 = yyj826 > l
		} else {
			yyb826 = r.CheckBreak()
		}
		if yyb826 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj826-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym833 := z.EncBinary()
		_ = yym833
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep834 := !z.EncBinary()
			yy2arr834 := z.EncBasicHandle().StructToArray
			var yyq834 [4]bool
			_, _, _ = yysep834, yyq834, yy2arr834
			const yyr834 bool = false
			yyq834[1] = x.FSType != ""
			yyq834[2] = x.Partition != 0
			yyq834[3] = x.ReadOnly != false
			var yynn834 int
			if yyr834 || yy2arr834 {
				r.EncodeArrayStart(4)
			} else {
				yynn834 = 1
				for _, b := range yyq834 {
					if b {
						yynn834++
					}
				}
				r.EncodeMapStart(yynn834)
				yynn834 = 0
			}
			if yyr834 || yy2arr834 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym836 := z.EncBinary()
				_ = yym836
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym837 := z.EncBinary()
				_ = yym837
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr834 || yy2arr834 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq834[1] {
					yym839 := z.EncBinary()
					_ = yym839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq834[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym840 := z.EncBinary()
					_ = yym840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr834 || yy2arr834 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq834[2] {
					yym842 := z.EncBinary()
					_ = yym842
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq834[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym843 := z.EncBinary()
					_ = yym843
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr834 || yy2arr834 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq834[3] {
					yym845 := z.EncBinary()
					_ = yym845
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq834[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym846 := z.EncBinary()
					_ = yym846
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr834 || yy2arr834 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym847 := z.DecBinary()
	_ = yym847
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct848 := r.ContainerType()
		if yyct848 == codecSelferValueTypeMap1234 {
			yyl848 := r.ReadMapStart()
			if yyl848 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl848, d)
			}
		} else if yyct848 == codecSelferValueTypeArray1234 {
			yyl848 := r.ReadArrayStart()
			if yyl848 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl848, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys849Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys849Slc
	var yyhl849 bool = l >= 0
	for yyj849 := 0; ; yyj849++ {
		if yyhl849 {
			if yyj849 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys849Slc = r.DecodeBytes(yys849Slc, true, true)
		yys849 := string(yys849Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys849 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys849)
		} // end switch yys849
	} // end for yyj849
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj854 int
	var yyb854 bool
	var yyhl854 bool = l >= 0
	yyj854++
	if yyhl854 {
		yyb854 = yyj854 > l
	} else {
		yyb854 = r.CheckBreak()
	}
	if yyb854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj854++
	if yyhl854 {
		yyb854 = yyj854 > l
	} else {
		yyb854 = r.CheckBreak()
	}
	if yyb854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj854++
	if yyhl854 {
		yyb854 = yyj854 > l
	} else {
		yyb854 = r.CheckBreak()
	}
	if yyb854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj854++
	if yyhl854 {
		yyb854 = yyj854 > l
	} else {
		yyb854 = r.CheckBreak()
	}
	if yyb854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj854++
		if yyhl854 {
			yyb854 = yyj854 > l
		} else {
			yyb854 = r.CheckBreak()
		}
		if yyb854 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj854-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym859 := z.EncBinary()
		_ = yym859
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep860 := !z.EncBinary()
			yy2arr860 := z.EncBasicHandle().StructToArray
			var yyq860 [3]bool
			_, _, _ = yysep860, yyq860, yy2arr860
			const yyr860 bool = false
			yyq860[1] = x.Revision != ""
			yyq860[2] = x.Directory != ""
			var yynn860 int
			if yyr860 || yy2arr860 {
				r.EncodeArrayStart(3)
			} else {
				yynn860 = 1
				for _, b := range yyq860 {
					if b {
						yynn860++
					}
				}
				r.EncodeMapStart(yynn860)
				yynn860 = 0
			}
			if yyr860 || yy2arr860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym862 := z.EncBinary()
				_ = yym862
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym863 := z.EncBinary()
				_ = yym863
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr860 || yy2arr860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq860[1] {
					yym865 := z.EncBinary()
					_ = yym865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq860[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym866 := z.EncBinary()
					_ = yym866
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr860 || yy2arr860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq860[2] {
					yym868 := z.EncBinary()
					_ = yym868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq860[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym869 := z.EncBinary()
					_ = yym869
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr860 || yy2arr860 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym870 := z.DecBinary()
	_ = yym870
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct871 := r.ContainerType()
		if yyct871 == codecSelferValueTypeMap1234 {
			yyl871 := r.ReadMapStart()
			if yyl871 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl871, d)
			}
		} else if yyct871 == codecSelferValueTypeArray1234 {
			yyl871 := r.ReadArrayStart()
			if yyl871 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl871, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys872Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys872Slc
	var yyhl872 bool = l >= 0
	for yyj872 := 0; ; yyj872++ {
		if yyhl872 {
			if yyj872 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys872Slc = r.DecodeBytes(yys872Slc, true, true)
		yys872 := string(yys872Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys872 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys872)
		} // end switch yys872
	} // end for yyj872
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj876 int
	var yyb876 bool
	var yyhl876 bool = l >= 0
	yyj876++
	if yyhl876 {
		yyb876 = yyj876 > l
	} else {
		yyb876 = r.CheckBreak()
	}
	if yyb876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj876++
	if yyhl876 {
		yyb876 = yyj876 > l
	} else {
		yyb876 = r.CheckBreak()
	}
	if yyb876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj876++
	if yyhl876 {
		yyb876 = yyj876 > l
	} else {
		yyb876 = r.CheckBreak()
	}
	if yyb876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj876++
		if yyhl876 {
			yyb876 = yyj876 > l
		} else {
			yyb876 = r.CheckBreak()
		}
		if yyb876 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj876-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym880 := z.EncBinary()
		_ = yym880
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep881 := !z.EncBinary()
			yy2arr881 := z.EncBasicHandle().StructToArray
			var yyq881 [3]bool
			_, _, _ = yysep881, yyq881, yy2arr881
			const yyr881 bool = false
			yyq881[0] = x.SecretName != ""
			yyq881[1] = len(x.Items) != 0
			yyq881[2] = x.DefaultMode != nil
			var yynn881 int
			if yyr881 || yy2arr881 {
				r.EncodeArrayStart(3)
			} else {
				yynn881 = 0
				for _, b := range yyq881 {
					if b {
						yynn881++
					}
				}
				r.EncodeMapStart(yynn881)
				yynn881 = 0
			}
			if yyr881 || yy2arr881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq881[0] {
					yym883 := z.EncBinary()
					_ = yym883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq881[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym884 := z.EncBinary()
					_ = yym884
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr881 || yy2arr881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq881[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym886 := z.EncBinary()
						_ = yym886
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq881[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym887 := z.EncBinary()
						_ = yym887
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr881 || yy2arr881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq881[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy889 := *x.DefaultMode
						yym890 := z.EncBinary()
						_ = yym890
						if false {
						} else {
							r.EncodeInt(int64(yy889))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq881[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy891 := *x.DefaultMode
						yym892 := z.EncBinary()
						_ = yym892
						if false {
						} else {
							r.EncodeInt(int64(yy891))
						}
					}
				}
			}
			if yyr881 || yy2arr881 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym893 := z.DecBinary()
	_ = yym893
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct894 := r.ContainerType()
		if yyct894 == codecSelferValueTypeMap1234 {
			yyl894 := r.ReadMapStart()
			if yyl894 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl894, d)
			}
		} else if yyct894 == codecSelferValueTypeArray1234 {
			yyl894 := r.ReadArrayStart()
			if yyl894 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl894, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys895Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys895Slc
	var yyhl895 bool = l >= 0
	for yyj895 := 0; ; yyj895++ {
		if yyhl895 {
			if yyj895 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys895Slc = r.DecodeBytes(yys895Slc, true, true)
		yys895 := string(yys895Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys895 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv897 := &x.Items
				yym898 := z.DecBinary()
				_ = yym898
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv897), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym900 := z.DecBinary()
				_ = yym900
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys895)
		} // end switch yys895
	} // end for yyj895
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj901 int
	var yyb901 bool
	var yyhl901 bool = l >= 0
	yyj901++
	if yyhl901 {
		yyb901 = yyj901 > l
	} else {
		yyb901 = r.CheckBreak()
	}
	if yyb901 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj901++
	if yyhl901 {
		yyb901 = yyj901 > l
	} else {
		yyb901 = r.CheckBreak()
	}
	if yyb901 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv903 := &x.Items
		yym904 := z.DecBinary()
		_ = yym904
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv903), d)
		}
	}
	yyj901++
	if yyhl901 {
		yyb901 = yyj901 > l
	} else {
		yyb901 = r.CheckBreak()
	}
	if yyb901 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym906 := z.DecBinary()
		_ = yym906
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj901++
		if yyhl901 {
			yyb901 = yyj901 > l
		} else {
			yyb901 = r.CheckBreak()
		}
		if yyb901 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj901-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym907 := z.EncBinary()
		_ = yym907
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep908 := !z.EncBinary()
			yy2arr908 := z.EncBasicHandle().StructToArray
			var yyq908 [3]bool
			_, _, _ = yysep908, yyq908, yy2arr908
			const yyr908 bool = false
			yyq908[2] = x.ReadOnly != false
			var yynn908 int
			if yyr908 || yy2arr908 {
				r.EncodeArrayStart(3)
			} else {
				yynn908 = 2
				for _, b := range yyq908 {
					if b {
						yynn908++
					}
				}
				r.EncodeMapStart(yynn908)
				yynn908 = 0
			}
			if yyr908 || yy2arr908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym910 := z.EncBinary()
				_ = yym910
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym911 := z.EncBinary()
				_ = yym911
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr908 || yy2arr908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym913 := z.EncBinary()
				_ = yym913
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym914 := z.EncBinary()
				_ = yym914
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr908 || yy2arr908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq908[2] {
					yym916 := z.EncBinary()
					_ = yym916
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq908[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym917 := z.EncBinary()
					_ = yym917
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr908 || yy2arr908 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym918 := z.DecBinary()
	_ = yym918
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct919 := r.ContainerType()
		if yyct919 == codecSelferValueTypeMap1234 {
			yyl919 := r.ReadMapStart()
			if yyl919 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl919, d)
			}
		} else if yyct919 == codecSelferValueTypeArray1234 {
			yyl919 := r.ReadArrayStart()
			if yyl919 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl919, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys920Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys920Slc
	var yyhl920 bool = l >= 0
	for yyj920 := 0; ; yyj920++ {
		if yyhl920 {
			if yyj920 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys920Slc = r.DecodeBytes(yys920Slc, true, true)
		yys920 := string(yys920Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys920 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys920)
		} // end switch yys920
	} // end for yyj920
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj924 int
	var yyb924 bool
	var yyhl924 bool = l >= 0
	yyj924++
	if yyhl924 {
		yyb924 = yyj924 > l
	} else {
		yyb924 = r.CheckBreak()
	}
	if yyb924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj924++
	if yyhl924 {
		yyb924 = yyj924 > l
	} else {
		yyb924 = r.CheckBreak()
	}
	if yyb924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj924++
	if yyhl924 {
		yyb924 = yyj924 > l
	} else {
		yyb924 = r.CheckBreak()
	}
	if yyb924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj924++
		if yyhl924 {
			yyb924 = yyj924 > l
		} else {
			yyb924 = r.CheckBreak()
		}
		if yyb924 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj924-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym928 := z.EncBinary()
		_ = yym928
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep929 := !z.EncBinary()
			yy2arr929 := z.EncBasicHandle().StructToArray
			var yyq929 [6]bool
			_, _, _ = yysep929, yyq929, yy2arr929
			const yyr929 bool = false
			yyq929[3] = x.ISCSIInterface != ""
			yyq929[4] = x.FSType != ""
			yyq929[5] = x.ReadOnly != false
			var yynn929 int
			if yyr929 || yy2arr929 {
				r.EncodeArrayStart(6)
			} else {
				yynn929 = 3
				for _, b := range yyq929 {
					if b {
						yynn929++
					}
				}
				r.EncodeMapStart(yynn929)
				yynn929 = 0
			}
			if yyr929 || yy2arr929 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym931 := z.EncBinary()
				_ = yym931
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym932 := z.EncBinary()
				_ = yym932
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr929 || yy2arr929 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym934 := z.EncBinary()
				_ = yym934
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym935 := z.EncBinary()
				_ = yym935
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr929 || yy2arr929 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym937 := z.EncBinary()
				_ = yym937
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym938 := z.EncBinary()
				_ = yym938
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr929 || yy2arr929 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq929[3] {
					yym940 := z.EncBinary()
					_ = yym940
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq929[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym941 := z.EncBinary()
					_ = yym941
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr929 || yy2arr929 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq929[4] {
					yym943 := z.EncBinary()
					_ = yym943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq929[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym944 := z.EncBinary()
					_ = yym944
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr929 || yy2arr929 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq929[5] {
					yym946 := z.EncBinary()
					_ = yym946
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq929[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym947 := z.EncBinary()
					_ = yym947
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr929 || yy2arr929 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym948 := z.DecBinary()
	_ = yym948
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct949 := r.ContainerType()
		if yyct949 == codecSelferValueTypeMap1234 {
			yyl949 := r.ReadMapStart()
			if yyl949 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl949, d)
			}
		} else if yyct949 == codecSelferValueTypeArray1234 {
			yyl949 := r.ReadArrayStart()
			if yyl949 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl949, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys950Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys950Slc
	var yyhl950 bool = l >= 0
	for yyj950 := 0; ; yyj950++ {
		if yyhl950 {
			if yyj950 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys950Slc = r.DecodeBytes(yys950Slc, true, true)
		yys950 := string(yys950Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys950 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys950)
		} // end switch yys950
	} // end for yyj950
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj957 int
	var yyb957 bool
	var yyhl957 bool = l >= 0
	yyj957++
	if yyhl957 {
		yyb957 = yyj957 > l
	} else {
		yyb957 = r.CheckBreak()
	}
	if yyb957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj957++
	if yyhl957 {
		yyb957 = yyj957 > l
	} else {
		yyb957 = r.CheckBreak()
	}
	if yyb957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj957++
	if yyhl957 {
		yyb957 = yyj957 > l
	} else {
		yyb957 = r.CheckBreak()
	}
	if yyb957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj957++
	if yyhl957 {
		yyb957 = yyj957 > l
	} else {
		yyb957 = r.CheckBreak()
	}
	if yyb957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj957++
	if yyhl957 {
		yyb957 = yyj957 > l
	} else {
		yyb957 = r.CheckBreak()
	}
	if yyb957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj957++
	if yyhl957 {
		yyb957 = yyj957 > l
	} else {
		yyb957 = r.CheckBreak()
	}
	if yyb957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj957++
		if yyhl957 {
			yyb957 = yyj957 > l
		} else {
			yyb957 = r.CheckBreak()
		}
		if yyb957 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj957-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym964 := z.EncBinary()
		_ = yym964
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep965 := !z.EncBinary()
			yy2arr965 := z.EncBasicHandle().StructToArray
			var yyq965 [4]bool
			_, _, _ = yysep965, yyq965, yy2arr965
			const yyr965 bool = false
			yyq965[2] = x.FSType != ""
			yyq965[3] = x.ReadOnly != false
			var yynn965 int
			if yyr965 || yy2arr965 {
				r.EncodeArrayStart(4)
			} else {
				yynn965 = 2
				for _, b := range yyq965 {
					if b {
						yynn965++
					}
				}
				r.EncodeMapStart(yynn965)
				yynn965 = 0
			}
			if yyr965 || yy2arr965 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym967 := z.EncBinary()
					_ = yym967
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym968 := z.EncBinary()
					_ = yym968
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr965 || yy2arr965 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy970 := *x.Lun
					yym971 := z.EncBinary()
					_ = yym971
					if false {
					} else {
						r.EncodeInt(int64(yy970))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy972 := *x.Lun
					yym973 := z.EncBinary()
					_ = yym973
					if false {
					} else {
						r.EncodeInt(int64(yy972))
					}
				}
			}
			if yyr965 || yy2arr965 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq965[2] {
					yym975 := z.EncBinary()
					_ = yym975
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq965[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym976 := z.EncBinary()
					_ = yym976
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr965 || yy2arr965 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq965[3] {
					yym978 := z.EncBinary()
					_ = yym978
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq965[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym979 := z.EncBinary()
					_ = yym979
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr965 || yy2arr965 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym980 := z.DecBinary()
	_ = yym980
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct981 := r.ContainerType()
		if yyct981 == codecSelferValueTypeMap1234 {
			yyl981 := r.ReadMapStart()
			if yyl981 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl981, d)
			}
		} else if yyct981 == codecSelferValueTypeArray1234 {
			yyl981 := r.ReadArrayStart()
			if yyl981 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl981, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys982Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys982Slc
	var yyhl982 bool = l >= 0
	for yyj982 := 0; ; yyj982++ {
		if yyhl982 {
			if yyj982 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys982Slc = r.DecodeBytes(yys982Slc, true, true)
		yys982 := string(yys982Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys982 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv983 := &x.TargetWWNs
				yym984 := z.DecBinary()
				_ = yym984
				if false {
				} else {
					z.F.DecSliceStringX(yyv983, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym986 := z.DecBinary()
				_ = yym986
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys982)
		} // end switch yys982
	} // end for yyj982
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj989 int
	var yyb989 bool
	var yyhl989 bool = l >= 0
	yyj989++
	if yyhl989 {
		yyb989 = yyj989 > l
	} else {
		yyb989 = r.CheckBreak()
	}
	if yyb989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv990 := &x.TargetWWNs
		yym991 := z.DecBinary()
		_ = yym991
		if false {
		} else {
			z.F.DecSliceStringX(yyv990, false, d)
		}
	}
	yyj989++
	if yyhl989 {
		yyb989 = yyj989 > l
	} else {
		yyb989 = r.CheckBreak()
	}
	if yyb989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym993 := z.DecBinary()
		_ = yym993
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj989++
	if yyhl989 {
		yyb989 = yyj989 > l
	} else {
		yyb989 = r.CheckBreak()
	}
	if yyb989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj989++
	if yyhl989 {
		yyb989 = yyj989 > l
	} else {
		yyb989 = r.CheckBreak()
	}
	if yyb989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj989++
		if yyhl989 {
			yyb989 = yyj989 > l
		} else {
			yyb989 = r.CheckBreak()
		}
		if yyb989 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj989-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym996 := z.EncBinary()
		_ = yym996
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep997 := !z.EncBinary()
			yy2arr997 := z.EncBasicHandle().StructToArray
			var yyq997 [3]bool
			_, _, _ = yysep997, yyq997, yy2arr997
			const yyr997 bool = false
			yyq997[2] = x.ReadOnly != false
			var yynn997 int
			if yyr997 || yy2arr997 {
				r.EncodeArrayStart(3)
			} else {
				yynn997 = 2
				for _, b := range yyq997 {
					if b {
						yynn997++
					}
				}
				r.EncodeMapStart(yynn997)
				yynn997 = 0
			}
			if yyr997 || yy2arr997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym999 := z.EncBinary()
				_ = yym999
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1000 := z.EncBinary()
				_ = yym1000
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr997 || yy2arr997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1002 := z.EncBinary()
				_ = yym1002
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1003 := z.EncBinary()
				_ = yym1003
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr997 || yy2arr997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq997[2] {
					yym1005 := z.EncBinary()
					_ = yym1005
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq997[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1006 := z.EncBinary()
					_ = yym1006
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr997 || yy2arr997 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1007 := z.DecBinary()
	_ = yym1007
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1008 := r.ContainerType()
		if yyct1008 == codecSelferValueTypeMap1234 {
			yyl1008 := r.ReadMapStart()
			if yyl1008 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1008, d)
			}
		} else if yyct1008 == codecSelferValueTypeArray1234 {
			yyl1008 := r.ReadArrayStart()
			if yyl1008 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1008, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1009Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1009Slc
	var yyhl1009 bool = l >= 0
	for yyj1009 := 0; ; yyj1009++ {
		if yyhl1009 {
			if yyj1009 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1009Slc = r.DecodeBytes(yys1009Slc, true, true)
		yys1009 := string(yys1009Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1009 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1009)
		} // end switch yys1009
	} // end for yyj1009
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1013 int
	var yyb1013 bool
	var yyhl1013 bool = l >= 0
	yyj1013++
	if yyhl1013 {
		yyb1013 = yyj1013 > l
	} else {
		yyb1013 = r.CheckBreak()
	}
	if yyb1013 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1013++
	if yyhl1013 {
		yyb1013 = yyj1013 > l
	} else {
		yyb1013 = r.CheckBreak()
	}
	if yyb1013 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1013++
	if yyhl1013 {
		yyb1013 = yyj1013 > l
	} else {
		yyb1013 = r.CheckBreak()
	}
	if yyb1013 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1013++
		if yyhl1013 {
			yyb1013 = yyj1013 > l
		} else {
			yyb1013 = r.CheckBreak()
		}
		if yyb1013 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1013-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1017 := z.EncBinary()
		_ = yym1017
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1018 := !z.EncBinary()
			yy2arr1018 := z.EncBasicHandle().StructToArray
			var yyq1018 [2]bool
			_, _, _ = yysep1018, yyq1018, yy2arr1018
			const yyr1018 bool = false
			yyq1018[1] = x.FSType != ""
			var yynn1018 int
			if yyr1018 || yy2arr1018 {
				r.EncodeArrayStart(2)
			} else {
				yynn1018 = 1
				for _, b := range yyq1018 {
					if b {
						yynn1018++
					}
				}
				r.EncodeMapStart(yynn1018)
				yynn1018 = 0
			}
			if yyr1018 || yy2arr1018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1020 := z.EncBinary()
				_ = yym1020
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1021 := z.EncBinary()
				_ = yym1021
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1018 || yy2arr1018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1018[1] {
					yym1023 := z.EncBinary()
					_ = yym1023
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1018[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1024 := z.EncBinary()
					_ = yym1024
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1018 || yy2arr1018 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1025 := z.DecBinary()
	_ = yym1025
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1026 := r.ContainerType()
		if yyct1026 == codecSelferValueTypeMap1234 {
			yyl1026 := r.ReadMapStart()
			if yyl1026 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1026, d)
			}
		} else if yyct1026 == codecSelferValueTypeArray1234 {
			yyl1026 := r.ReadArrayStart()
			if yyl1026 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1026, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1027Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1027Slc
	var yyhl1027 bool = l >= 0
	for yyj1027 := 0; ; yyj1027++ {
		if yyhl1027 {
			if yyj1027 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1027Slc = r.DecodeBytes(yys1027Slc, true, true)
		yys1027 := string(yys1027Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1027 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1027)
		} // end switch yys1027
	} // end for yyj1027
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1030 int
	var yyb1030 bool
	var yyhl1030 bool = l >= 0
	yyj1030++
	if yyhl1030 {
		yyb1030 = yyj1030 > l
	} else {
		yyb1030 = r.CheckBreak()
	}
	if yyb1030 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1030++
	if yyhl1030 {
		yyb1030 = yyj1030 > l
	} else {
		yyb1030 = r.CheckBreak()
	}
	if yyb1030 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1030++
		if yyhl1030 {
			yyb1030 = yyj1030 > l
		} else {
			yyb1030 = r.CheckBreak()
		}
		if yyb1030 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1030-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x AzureDataDiskCachingMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1033 := z.EncBinary()
	_ = yym1033
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *AzureDataDiskCachingMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1034 := z.DecBinary()
	_ = yym1034
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AzureDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1035 := z.EncBinary()
		_ = yym1035
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1036 := !z.EncBinary()
			yy2arr1036 := z.EncBasicHandle().StructToArray
			var yyq1036 [5]bool
			_, _, _ = yysep1036, yyq1036, yy2arr1036
			const yyr1036 bool = false
			yyq1036[2] = x.CachingMode != nil
			yyq1036[3] = x.FSType != nil
			yyq1036[4] = x.ReadOnly != nil
			var yynn1036 int
			if yyr1036 || yy2arr1036 {
				r.EncodeArrayStart(5)
			} else {
				yynn1036 = 2
				for _, b := range yyq1036 {
					if b {
						yynn1036++
					}
				}
				r.EncodeMapStart(yynn1036)
				yynn1036 = 0
			}
			if yyr1036 || yy2arr1036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1038 := z.EncBinary()
				_ = yym1038
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1039 := z.EncBinary()
				_ = yym1039
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			}
			if yyr1036 || yy2arr1036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1041 := z.EncBinary()
				_ = yym1041
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskURI"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1042 := z.EncBinary()
				_ = yym1042
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			}
			if yyr1036 || yy2arr1036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1036[2] {
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1044 := *x.CachingMode
						yy1044.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1036[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cachingMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1045 := *x.CachingMode
						yy1045.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1036 || yy2arr1036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1036[3] {
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1047 := *x.FSType
						yym1048 := z.EncBinary()
						_ = yym1048
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1047))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1036[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1049 := *x.FSType
						yym1050 := z.EncBinary()
						_ = yym1050
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1049))
						}
					}
				}
			}
			if yyr1036 || yy2arr1036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1036[4] {
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1052 := *x.ReadOnly
						yym1053 := z.EncBinary()
						_ = yym1053
						if false {
						} else {
							r.EncodeBool(bool(yy1052))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1036[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1054 := *x.ReadOnly
						yym1055 := z.EncBinary()
						_ = yym1055
						if false {
						} else {
							r.EncodeBool(bool(yy1054))
						}
					}
				}
			}
			if yyr1036 || yy2arr1036 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1056 := z.DecBinary()
	_ = yym1056
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1057 := r.ContainerType()
		if yyct1057 == codecSelferValueTypeMap1234 {
			yyl1057 := r.ReadMapStart()
			if yyl1057 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1057, d)
			}
		} else if yyct1057 == codecSelferValueTypeArray1234 {
			yyl1057 := r.ReadArrayStart()
			if yyl1057 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1057, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1058Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1058Slc
	var yyhl1058 bool = l >= 0
	for yyj1058 := 0; ; yyj1058++ {
		if yyhl1058 {
			if yyj1058 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1058Slc = r.DecodeBytes(yys1058Slc, true, true)
		yys1058 := string(yys1058Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1058 {
		case "diskName":
			if r.TryDecodeAsNil() {
				x.DiskName = ""
			} else {
				x.DiskName = string(r.DecodeString())
			}
		case "diskURI":
			if r.TryDecodeAsNil() {
				x.DataDiskURI = ""
			} else {
				x.DataDiskURI = string(r.DecodeString())
			}
		case "cachingMode":
			if r.TryDecodeAsNil() {
				if x.CachingMode != nil {
					x.CachingMode = nil
				}
			} else {
				if x.CachingMode == nil {
					x.CachingMode = new(AzureDataDiskCachingMode)
				}
				x.CachingMode.CodecDecodeSelf(d)
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				if x.FSType != nil {
					x.FSType = nil
				}
			} else {
				if x.FSType == nil {
					x.FSType = new(string)
				}
				yym1063 := z.DecBinary()
				_ = yym1063
				if false {
				} else {
					*((*string)(x.FSType)) = r.DecodeString()
				}
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				if x.ReadOnly != nil {
					x.ReadOnly = nil
				}
			} else {
				if x.ReadOnly == nil {
					x.ReadOnly = new(bool)
				}
				yym1065 := z.DecBinary()
				_ = yym1065
				if false {
				} else {
					*((*bool)(x.ReadOnly)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1058)
		} // end switch yys1058
	} // end for yyj1058
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1066 int
	var yyb1066 bool
	var yyhl1066 bool = l >= 0
	yyj1066++
	if yyhl1066 {
		yyb1066 = yyj1066 > l
	} else {
		yyb1066 = r.CheckBreak()
	}
	if yyb1066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DiskName = ""
	} else {
		x.DiskName = string(r.DecodeString())
	}
	yyj1066++
	if yyhl1066 {
		yyb1066 = yyj1066 > l
	} else {
		yyb1066 = r.CheckBreak()
	}
	if yyb1066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DataDiskURI = ""
	} else {
		x.DataDiskURI = string(r.DecodeString())
	}
	yyj1066++
	if yyhl1066 {
		yyb1066 = yyj1066 > l
	} else {
		yyb1066 = r.CheckBreak()
	}
	if yyb1066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CachingMode != nil {
			x.CachingMode = nil
		}
	} else {
		if x.CachingMode == nil {
			x.CachingMode = new(AzureDataDiskCachingMode)
		}
		x.CachingMode.CodecDecodeSelf(d)
	}
	yyj1066++
	if yyhl1066 {
		yyb1066 = yyj1066 > l
	} else {
		yyb1066 = r.CheckBreak()
	}
	if yyb1066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSType != nil {
			x.FSType = nil
		}
	} else {
		if x.FSType == nil {
			x.FSType = new(string)
		}
		yym1071 := z.DecBinary()
		_ = yym1071
		if false {
		} else {
			*((*string)(x.FSType)) = r.DecodeString()
		}
	}
	yyj1066++
	if yyhl1066 {
		yyb1066 = yyj1066 > l
	} else {
		yyb1066 = r.CheckBreak()
	}
	if yyb1066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnly != nil {
			x.ReadOnly = nil
		}
	} else {
		if x.ReadOnly == nil {
			x.ReadOnly = new(bool)
		}
		yym1073 := z.DecBinary()
		_ = yym1073
		if false {
		} else {
			*((*bool)(x.ReadOnly)) = r.DecodeBool()
		}
	}
	for {
		yyj1066++
		if yyhl1066 {
			yyb1066 = yyj1066 > l
		} else {
			yyb1066 = r.CheckBreak()
		}
		if yyb1066 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1066-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1074 := z.EncBinary()
		_ = yym1074
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1075 := !z.EncBinary()
			yy2arr1075 := z.EncBasicHandle().StructToArray
			var yyq1075 [3]bool
			_, _, _ = yysep1075, yyq1075, yy2arr1075
			const yyr1075 bool = false
			yyq1075[0] = x.Name != ""
			yyq1075[1] = len(x.Items) != 0
			yyq1075[2] = x.DefaultMode != nil
			var yynn1075 int
			if yyr1075 || yy2arr1075 {
				r.EncodeArrayStart(3)
			} else {
				yynn1075 = 0
				for _, b := range yyq1075 {
					if b {
						yynn1075++
					}
				}
				r.EncodeMapStart(yynn1075)
				yynn1075 = 0
			}
			if yyr1075 || yy2arr1075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1075[0] {
					yym1077 := z.EncBinary()
					_ = yym1077
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1075[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1078 := z.EncBinary()
					_ = yym1078
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1075 || yy2arr1075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1075[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1080 := z.EncBinary()
						_ = yym1080
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1075[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1081 := z.EncBinary()
						_ = yym1081
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1075 || yy2arr1075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1075[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1083 := *x.DefaultMode
						yym1084 := z.EncBinary()
						_ = yym1084
						if false {
						} else {
							r.EncodeInt(int64(yy1083))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1075[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1085 := *x.DefaultMode
						yym1086 := z.EncBinary()
						_ = yym1086
						if false {
						} else {
							r.EncodeInt(int64(yy1085))
						}
					}
				}
			}
			if yyr1075 || yy2arr1075 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1087 := z.DecBinary()
	_ = yym1087
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1088 := r.ContainerType()
		if yyct1088 == codecSelferValueTypeMap1234 {
			yyl1088 := r.ReadMapStart()
			if yyl1088 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1088, d)
			}
		} else if yyct1088 == codecSelferValueTypeArray1234 {
			yyl1088 := r.ReadArrayStart()
			if yyl1088 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1088, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1089Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1089Slc
	var yyhl1089 bool = l >= 0
	for yyj1089 := 0; ; yyj1089++ {
		if yyhl1089 {
			if yyj1089 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1089Slc = r.DecodeBytes(yys1089Slc, true, true)
		yys1089 := string(yys1089Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1089 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1091 := &x.Items
				yym1092 := z.DecBinary()
				_ = yym1092
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1091), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1094 := z.DecBinary()
				_ = yym1094
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1089)
		} // end switch yys1089
	} // end for yyj1089
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1095 int
	var yyb1095 bool
	var yyhl1095 bool = l >= 0
	yyj1095++
	if yyhl1095 {
		yyb1095 = yyj1095 > l
	} else {
		yyb1095 = r.CheckBreak()
	}
	if yyb1095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1095++
	if yyhl1095 {
		yyb1095 = yyj1095 > l
	} else {
		yyb1095 = r.CheckBreak()
	}
	if yyb1095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1097 := &x.Items
		yym1098 := z.DecBinary()
		_ = yym1098
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1097), d)
		}
	}
	yyj1095++
	if yyhl1095 {
		yyb1095 = yyj1095 > l
	} else {
		yyb1095 = r.CheckBreak()
	}
	if yyb1095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1100 := z.DecBinary()
		_ = yym1100
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1095++
		if yyhl1095 {
			yyb1095 = yyj1095 > l
		} else {
			yyb1095 = r.CheckBreak()
		}
		if yyb1095 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1095-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1101 := z.EncBinary()
		_ = yym1101
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1102 := !z.EncBinary()
			yy2arr1102 := z.EncBasicHandle().StructToArray
			var yyq1102 [3]bool
			_, _, _ = yysep1102, yyq1102, yy2arr1102
			const yyr1102 bool = false
			yyq1102[2] = x.Mode != nil
			var yynn1102 int
			if yyr1102 || yy2arr1102 {
				r.EncodeArrayStart(3)
			} else {
				yynn1102 = 2
				for _, b := range yyq1102 {
					if b {
						yynn1102++
					}
				}
				r.EncodeMapStart(yynn1102)
				yynn1102 = 0
			}
			if yyr1102 || yy2arr1102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1104 := z.EncBinary()
				_ = yym1104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1105 := z.EncBinary()
				_ = yym1105
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1102 || yy2arr1102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1107 := z.EncBinary()
				_ = yym1107
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1108 := z.EncBinary()
				_ = yym1108
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1102 || yy2arr1102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1102[2] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1110 := *x.Mode
						yym1111 := z.EncBinary()
						_ = yym1111
						if false {
						} else {
							r.EncodeInt(int64(yy1110))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1102[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1112 := *x.Mode
						yym1113 := z.EncBinary()
						_ = yym1113
						if false {
						} else {
							r.EncodeInt(int64(yy1112))
						}
					}
				}
			}
			if yyr1102 || yy2arr1102 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1114 := z.DecBinary()
	_ = yym1114
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1115 := r.ContainerType()
		if yyct1115 == codecSelferValueTypeMap1234 {
			yyl1115 := r.ReadMapStart()
			if yyl1115 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1115, d)
			}
		} else if yyct1115 == codecSelferValueTypeArray1234 {
			yyl1115 := r.ReadArrayStart()
			if yyl1115 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1115, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1116Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1116Slc
	var yyhl1116 bool = l >= 0
	for yyj1116 := 0; ; yyj1116++ {
		if yyhl1116 {
			if yyj1116 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1116Slc = r.DecodeBytes(yys1116Slc, true, true)
		yys1116 := string(yys1116Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1116 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1120 := z.DecBinary()
				_ = yym1120
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1116)
		} // end switch yys1116
	} // end for yyj1116
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1121 int
	var yyb1121 bool
	var yyhl1121 bool = l >= 0
	yyj1121++
	if yyhl1121 {
		yyb1121 = yyj1121 > l
	} else {
		yyb1121 = r.CheckBreak()
	}
	if yyb1121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1121++
	if yyhl1121 {
		yyb1121 = yyj1121 > l
	} else {
		yyb1121 = r.CheckBreak()
	}
	if yyb1121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1121++
	if yyhl1121 {
		yyb1121 = yyj1121 > l
	} else {
		yyb1121 = r.CheckBreak()
	}
	if yyb1121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1125 := z.DecBinary()
		_ = yym1125
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1121++
		if yyhl1121 {
			yyb1121 = yyj1121 > l
		} else {
			yyb1121 = r.CheckBreak()
		}
		if yyb1121 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1121-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1126 := z.EncBinary()
		_ = yym1126
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1127 := !z.EncBinary()
			yy2arr1127 := z.EncBasicHandle().StructToArray
			var yyq1127 [5]bool
			_, _, _ = yysep1127, yyq1127, yy2arr1127
			const yyr1127 bool = false
			yyq1127[0] = x.Name != ""
			yyq1127[1] = x.HostPort != 0
			yyq1127[3] = x.Protocol != ""
			yyq1127[4] = x.HostIP != ""
			var yynn1127 int
			if yyr1127 || yy2arr1127 {
				r.EncodeArrayStart(5)
			} else {
				yynn1127 = 1
				for _, b := range yyq1127 {
					if b {
						yynn1127++
					}
				}
				r.EncodeMapStart(yynn1127)
				yynn1127 = 0
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[0] {
					yym1129 := z.EncBinary()
					_ = yym1129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1127[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1130 := z.EncBinary()
					_ = yym1130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[1] {
					yym1132 := z.EncBinary()
					_ = yym1132
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1127[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1133 := z.EncBinary()
					_ = yym1133
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1135 := z.EncBinary()
				_ = yym1135
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1136 := z.EncBinary()
				_ = yym1136
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1127[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1127[4] {
					yym1139 := z.EncBinary()
					_ = yym1139
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1127[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1140 := z.EncBinary()
					_ = yym1140
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1127 || yy2arr1127 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1141 := z.DecBinary()
	_ = yym1141
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1142 := r.ContainerType()
		if yyct1142 == codecSelferValueTypeMap1234 {
			yyl1142 := r.ReadMapStart()
			if yyl1142 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1142, d)
			}
		} else if yyct1142 == codecSelferValueTypeArray1234 {
			yyl1142 := r.ReadArrayStart()
			if yyl1142 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1142, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1143Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1143Slc
	var yyhl1143 bool = l >= 0
	for yyj1143 := 0; ; yyj1143++ {
		if yyhl1143 {
			if yyj1143 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1143Slc = r.DecodeBytes(yys1143Slc, true, true)
		yys1143 := string(yys1143Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1143 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1143)
		} // end switch yys1143
	} // end for yyj1143
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1149 int
	var yyb1149 bool
	var yyhl1149 bool = l >= 0
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1149++
		if yyhl1149 {
			yyb1149 = yyj1149 > l
		} else {
			yyb1149 = r.CheckBreak()
		}
		if yyb1149 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1149-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1155 := z.EncBinary()
		_ = yym1155
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1156 := !z.EncBinary()
			yy2arr1156 := z.EncBasicHandle().StructToArray
			var yyq1156 [4]bool
			_, _, _ = yysep1156, yyq1156, yy2arr1156
			const yyr1156 bool = false
			yyq1156[1] = x.ReadOnly != false
			yyq1156[3] = x.SubPath != ""
			var yynn1156 int
			if yyr1156 || yy2arr1156 {
				r.EncodeArrayStart(4)
			} else {
				yynn1156 = 2
				for _, b := range yyq1156 {
					if b {
						yynn1156++
					}
				}
				r.EncodeMapStart(yynn1156)
				yynn1156 = 0
			}
			if yyr1156 || yy2arr1156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1158 := z.EncBinary()
				_ = yym1158
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1159 := z.EncBinary()
				_ = yym1159
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1156 || yy2arr1156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1156[1] {
					yym1161 := z.EncBinary()
					_ = yym1161
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1156[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1162 := z.EncBinary()
					_ = yym1162
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1156 || yy2arr1156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1164 := z.EncBinary()
				_ = yym1164
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1165 := z.EncBinary()
				_ = yym1165
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1156 || yy2arr1156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1156[3] {
					yym1167 := z.EncBinary()
					_ = yym1167
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1156[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1168 := z.EncBinary()
					_ = yym1168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1156 || yy2arr1156 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1169 := z.DecBinary()
	_ = yym1169
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1170 := r.ContainerType()
		if yyct1170 == codecSelferValueTypeMap1234 {
			yyl1170 := r.ReadMapStart()
			if yyl1170 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1170, d)
			}
		} else if yyct1170 == codecSelferValueTypeArray1234 {
			yyl1170 := r.ReadArrayStart()
			if yyl1170 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1170, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1171Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1171Slc
	var yyhl1171 bool = l >= 0
	for yyj1171 := 0; ; yyj1171++ {
		if yyhl1171 {
			if yyj1171 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1171Slc = r.DecodeBytes(yys1171Slc, true, true)
		yys1171 := string(yys1171Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1171 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1171)
		} // end switch yys1171
	} // end for yyj1171
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1176 int
	var yyb1176 bool
	var yyhl1176 bool = l >= 0
	yyj1176++
	if yyhl1176 {
		yyb1176 = yyj1176 > l
	} else {
		yyb1176 = r.CheckBreak()
	}
	if yyb1176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1176++
	if yyhl1176 {
		yyb1176 = yyj1176 > l
	} else {
		yyb1176 = r.CheckBreak()
	}
	if yyb1176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1176++
	if yyhl1176 {
		yyb1176 = yyj1176 > l
	} else {
		yyb1176 = r.CheckBreak()
	}
	if yyb1176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1176++
	if yyhl1176 {
		yyb1176 = yyj1176 > l
	} else {
		yyb1176 = r.CheckBreak()
	}
	if yyb1176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1176++
		if yyhl1176 {
			yyb1176 = yyj1176 > l
		} else {
			yyb1176 = r.CheckBreak()
		}
		if yyb1176 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1176-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1181 := z.EncBinary()
		_ = yym1181
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1182 := !z.EncBinary()
			yy2arr1182 := z.EncBasicHandle().StructToArray
			var yyq1182 [3]bool
			_, _, _ = yysep1182, yyq1182, yy2arr1182
			const yyr1182 bool = false
			yyq1182[1] = x.Value != ""
			yyq1182[2] = x.ValueFrom != nil
			var yynn1182 int
			if yyr1182 || yy2arr1182 {
				r.EncodeArrayStart(3)
			} else {
				yynn1182 = 1
				for _, b := range yyq1182 {
					if b {
						yynn1182++
					}
				}
				r.EncodeMapStart(yynn1182)
				yynn1182 = 0
			}
			if yyr1182 || yy2arr1182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1184 := z.EncBinary()
				_ = yym1184
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1185 := z.EncBinary()
				_ = yym1185
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1182 || yy2arr1182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1182[1] {
					yym1187 := z.EncBinary()
					_ = yym1187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1182[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1188 := z.EncBinary()
					_ = yym1188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1182 || yy2arr1182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1182[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1182[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1182 || yy2arr1182 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1190 := z.DecBinary()
	_ = yym1190
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1191 := r.ContainerType()
		if yyct1191 == codecSelferValueTypeMap1234 {
			yyl1191 := r.ReadMapStart()
			if yyl1191 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1191, d)
			}
		} else if yyct1191 == codecSelferValueTypeArray1234 {
			yyl1191 := r.ReadArrayStart()
			if yyl1191 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1191, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1192Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1192Slc
	var yyhl1192 bool = l >= 0
	for yyj1192 := 0; ; yyj1192++ {
		if yyhl1192 {
			if yyj1192 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1192Slc = r.DecodeBytes(yys1192Slc, true, true)
		yys1192 := string(yys1192Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1192 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1192)
		} // end switch yys1192
	} // end for yyj1192
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1196 int
	var yyb1196 bool
	var yyhl1196 bool = l >= 0
	yyj1196++
	if yyhl1196 {
		yyb1196 = yyj1196 > l
	} else {
		yyb1196 = r.CheckBreak()
	}
	if yyb1196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1196++
	if yyhl1196 {
		yyb1196 = yyj1196 > l
	} else {
		yyb1196 = r.CheckBreak()
	}
	if yyb1196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1196++
	if yyhl1196 {
		yyb1196 = yyj1196 > l
	} else {
		yyb1196 = r.CheckBreak()
	}
	if yyb1196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1196++
		if yyhl1196 {
			yyb1196 = yyj1196 > l
		} else {
			yyb1196 = r.CheckBreak()
		}
		if yyb1196 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1196-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1200 := z.EncBinary()
		_ = yym1200
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1201 := !z.EncBinary()
			yy2arr1201 := z.EncBasicHandle().StructToArray
			var yyq1201 [4]bool
			_, _, _ = yysep1201, yyq1201, yy2arr1201
			const yyr1201 bool = false
			yyq1201[0] = x.FieldRef != nil
			yyq1201[1] = x.ResourceFieldRef != nil
			yyq1201[2] = x.ConfigMapKeyRef != nil
			yyq1201[3] = x.SecretKeyRef != nil
			var yynn1201 int
			if yyr1201 || yy2arr1201 {
				r.EncodeArrayStart(4)
			} else {
				yynn1201 = 0
				for _, b := range yyq1201 {
					if b {
						yynn1201++
					}
				}
				r.EncodeMapStart(yynn1201)
				yynn1201 = 0
			}
			if yyr1201 || yy2arr1201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1201[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1201[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1201 || yy2arr1201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1201[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1201[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1201 || yy2arr1201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1201[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1201[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1201 || yy2arr1201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1201[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1201[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1201 || yy2arr1201 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1206 := z.DecBinary()
	_ = yym1206
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1207 := r.ContainerType()
		if yyct1207 == codecSelferValueTypeMap1234 {
			yyl1207 := r.ReadMapStart()
			if yyl1207 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1207, d)
			}
		} else if yyct1207 == codecSelferValueTypeArray1234 {
			yyl1207 := r.ReadArrayStart()
			if yyl1207 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1207, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1208Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1208Slc
	var yyhl1208 bool = l >= 0
	for yyj1208 := 0; ; yyj1208++ {
		if yyhl1208 {
			if yyj1208 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1208Slc = r.DecodeBytes(yys1208Slc, true, true)
		yys1208 := string(yys1208Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1208 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1208)
		} // end switch yys1208
	} // end for yyj1208
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1213 int
	var yyb1213 bool
	var yyhl1213 bool = l >= 0
	yyj1213++
	if yyhl1213 {
		yyb1213 = yyj1213 > l
	} else {
		yyb1213 = r.CheckBreak()
	}
	if yyb1213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1213++
	if yyhl1213 {
		yyb1213 = yyj1213 > l
	} else {
		yyb1213 = r.CheckBreak()
	}
	if yyb1213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1213++
	if yyhl1213 {
		yyb1213 = yyj1213 > l
	} else {
		yyb1213 = r.CheckBreak()
	}
	if yyb1213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1213++
	if yyhl1213 {
		yyb1213 = yyj1213 > l
	} else {
		yyb1213 = r.CheckBreak()
	}
	if yyb1213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1213++
		if yyhl1213 {
			yyb1213 = yyj1213 > l
		} else {
			yyb1213 = r.CheckBreak()
		}
		if yyb1213 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1213-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1218 := z.EncBinary()
		_ = yym1218
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1219 := !z.EncBinary()
			yy2arr1219 := z.EncBasicHandle().StructToArray
			var yyq1219 [2]bool
			_, _, _ = yysep1219, yyq1219, yy2arr1219
			const yyr1219 bool = false
			yyq1219[0] = x.APIVersion != ""
			var yynn1219 int
			if yyr1219 || yy2arr1219 {
				r.EncodeArrayStart(2)
			} else {
				yynn1219 = 1
				for _, b := range yyq1219 {
					if b {
						yynn1219++
					}
				}
				r.EncodeMapStart(yynn1219)
				yynn1219 = 0
			}
			if yyr1219 || yy2arr1219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1219[0] {
					yym1221 := z.EncBinary()
					_ = yym1221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1219[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1222 := z.EncBinary()
					_ = yym1222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1219 || yy2arr1219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1224 := z.EncBinary()
				_ = yym1224
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1225 := z.EncBinary()
				_ = yym1225
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1219 || yy2arr1219 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1226 := z.DecBinary()
	_ = yym1226
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1227 := r.ContainerType()
		if yyct1227 == codecSelferValueTypeMap1234 {
			yyl1227 := r.ReadMapStart()
			if yyl1227 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1227, d)
			}
		} else if yyct1227 == codecSelferValueTypeArray1234 {
			yyl1227 := r.ReadArrayStart()
			if yyl1227 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1227, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1228Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1228Slc
	var yyhl1228 bool = l >= 0
	for yyj1228 := 0; ; yyj1228++ {
		if yyhl1228 {
			if yyj1228 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1228Slc = r.DecodeBytes(yys1228Slc, true, true)
		yys1228 := string(yys1228Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1228 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1228)
		} // end switch yys1228
	} // end for yyj1228
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1231 int
	var yyb1231 bool
	var yyhl1231 bool = l >= 0
	yyj1231++
	if yyhl1231 {
		yyb1231 = yyj1231 > l
	} else {
		yyb1231 = r.CheckBreak()
	}
	if yyb1231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1231++
	if yyhl1231 {
		yyb1231 = yyj1231 > l
	} else {
		yyb1231 = r.CheckBreak()
	}
	if yyb1231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1231++
		if yyhl1231 {
			yyb1231 = yyj1231 > l
		} else {
			yyb1231 = r.CheckBreak()
		}
		if yyb1231 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1231-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1234 := z.EncBinary()
		_ = yym1234
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1235 := !z.EncBinary()
			yy2arr1235 := z.EncBasicHandle().StructToArray
			var yyq1235 [3]bool
			_, _, _ = yysep1235, yyq1235, yy2arr1235
			const yyr1235 bool = false
			yyq1235[0] = x.ContainerName != ""
			yyq1235[2] = true
			var yynn1235 int
			if yyr1235 || yy2arr1235 {
				r.EncodeArrayStart(3)
			} else {
				yynn1235 = 1
				for _, b := range yyq1235 {
					if b {
						yynn1235++
					}
				}
				r.EncodeMapStart(yynn1235)
				yynn1235 = 0
			}
			if yyr1235 || yy2arr1235 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1235[0] {
					yym1237 := z.EncBinary()
					_ = yym1237
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1235[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1238 := z.EncBinary()
					_ = yym1238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1235 || yy2arr1235 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1240 := z.EncBinary()
				_ = yym1240
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1241 := z.EncBinary()
				_ = yym1241
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1235 || yy2arr1235 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1235[2] {
					yy1243 := &x.Divisor
					yym1244 := z.EncBinary()
					_ = yym1244
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1243) {
					} else if !yym1244 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1243)
					} else {
						z.EncFallback(yy1243)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1235[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1245 := &x.Divisor
					yym1246 := z.EncBinary()
					_ = yym1246
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1245) {
					} else if !yym1246 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1245)
					} else {
						z.EncFallback(yy1245)
					}
				}
			}
			if yyr1235 || yy2arr1235 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1247 := z.DecBinary()
	_ = yym1247
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1248 := r.ContainerType()
		if yyct1248 == codecSelferValueTypeMap1234 {
			yyl1248 := r.ReadMapStart()
			if yyl1248 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1248, d)
			}
		} else if yyct1248 == codecSelferValueTypeArray1234 {
			yyl1248 := r.ReadArrayStart()
			if yyl1248 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1248, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1249Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1249Slc
	var yyhl1249 bool = l >= 0
	for yyj1249 := 0; ; yyj1249++ {
		if yyhl1249 {
			if yyj1249 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1249Slc = r.DecodeBytes(yys1249Slc, true, true)
		yys1249 := string(yys1249Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1249 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1252 := &x.Divisor
				yym1253 := z.DecBinary()
				_ = yym1253
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1252) {
				} else if !yym1253 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1252)
				} else {
					z.DecFallback(yyv1252, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1249)
		} // end switch yys1249
	} // end for yyj1249
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1254 int
	var yyb1254 bool
	var yyhl1254 bool = l >= 0
	yyj1254++
	if yyhl1254 {
		yyb1254 = yyj1254 > l
	} else {
		yyb1254 = r.CheckBreak()
	}
	if yyb1254 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1254++
	if yyhl1254 {
		yyb1254 = yyj1254 > l
	} else {
		yyb1254 = r.CheckBreak()
	}
	if yyb1254 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1254++
	if yyhl1254 {
		yyb1254 = yyj1254 > l
	} else {
		yyb1254 = r.CheckBreak()
	}
	if yyb1254 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1257 := &x.Divisor
		yym1258 := z.DecBinary()
		_ = yym1258
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1257) {
		} else if !yym1258 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1257)
		} else {
			z.DecFallback(yyv1257, false)
		}
	}
	for {
		yyj1254++
		if yyhl1254 {
			yyb1254 = yyj1254 > l
		} else {
			yyb1254 = r.CheckBreak()
		}
		if yyb1254 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1254-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1259 := z.EncBinary()
		_ = yym1259
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1260 := !z.EncBinary()
			yy2arr1260 := z.EncBasicHandle().StructToArray
			var yyq1260 [2]bool
			_, _, _ = yysep1260, yyq1260, yy2arr1260
			const yyr1260 bool = false
			yyq1260[0] = x.Name != ""
			var yynn1260 int
			if yyr1260 || yy2arr1260 {
				r.EncodeArrayStart(2)
			} else {
				yynn1260 = 1
				for _, b := range yyq1260 {
					if b {
						yynn1260++
					}
				}
				r.EncodeMapStart(yynn1260)
				yynn1260 = 0
			}
			if yyr1260 || yy2arr1260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1260[0] {
					yym1262 := z.EncBinary()
					_ = yym1262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1260[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1263 := z.EncBinary()
					_ = yym1263
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1260 || yy2arr1260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1265 := z.EncBinary()
				_ = yym1265
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1266 := z.EncBinary()
				_ = yym1266
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1260 || yy2arr1260 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1267 := z.DecBinary()
	_ = yym1267
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1268 := r.ContainerType()
		if yyct1268 == codecSelferValueTypeMap1234 {
			yyl1268 := r.ReadMapStart()
			if yyl1268 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1268, d)
			}
		} else if yyct1268 == codecSelferValueTypeArray1234 {
			yyl1268 := r.ReadArrayStart()
			if yyl1268 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1268, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1269Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1269Slc
	var yyhl1269 bool = l >= 0
	for yyj1269 := 0; ; yyj1269++ {
		if yyhl1269 {
			if yyj1269 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1269Slc = r.DecodeBytes(yys1269Slc, true, true)
		yys1269 := string(yys1269Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1269 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1269)
		} // end switch yys1269
	} // end for yyj1269
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1272 int
	var yyb1272 bool
	var yyhl1272 bool = l >= 0
	yyj1272++
	if yyhl1272 {
		yyb1272 = yyj1272 > l
	} else {
		yyb1272 = r.CheckBreak()
	}
	if yyb1272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1272++
	if yyhl1272 {
		yyb1272 = yyj1272 > l
	} else {
		yyb1272 = r.CheckBreak()
	}
	if yyb1272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1272++
		if yyhl1272 {
			yyb1272 = yyj1272 > l
		} else {
			yyb1272 = r.CheckBreak()
		}
		if yyb1272 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1272-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1275 := z.EncBinary()
		_ = yym1275
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1276 := !z.EncBinary()
			yy2arr1276 := z.EncBasicHandle().StructToArray
			var yyq1276 [2]bool
			_, _, _ = yysep1276, yyq1276, yy2arr1276
			const yyr1276 bool = false
			yyq1276[0] = x.Name != ""
			var yynn1276 int
			if yyr1276 || yy2arr1276 {
				r.EncodeArrayStart(2)
			} else {
				yynn1276 = 1
				for _, b := range yyq1276 {
					if b {
						yynn1276++
					}
				}
				r.EncodeMapStart(yynn1276)
				yynn1276 = 0
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1276[0] {
					yym1278 := z.EncBinary()
					_ = yym1278
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1276[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1279 := z.EncBinary()
					_ = yym1279
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1281 := z.EncBinary()
				_ = yym1281
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1282 := z.EncBinary()
				_ = yym1282
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1283 := z.DecBinary()
	_ = yym1283
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1284 := r.ContainerType()
		if yyct1284 == codecSelferValueTypeMap1234 {
			yyl1284 := r.ReadMapStart()
			if yyl1284 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1284, d)
			}
		} else if yyct1284 == codecSelferValueTypeArray1234 {
			yyl1284 := r.ReadArrayStart()
			if yyl1284 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1284, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1285Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1285Slc
	var yyhl1285 bool = l >= 0
	for yyj1285 := 0; ; yyj1285++ {
		if yyhl1285 {
			if yyj1285 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1285Slc = r.DecodeBytes(yys1285Slc, true, true)
		yys1285 := string(yys1285Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1285 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1285)
		} // end switch yys1285
	} // end for yyj1285
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1288 int
	var yyb1288 bool
	var yyhl1288 bool = l >= 0
	yyj1288++
	if yyhl1288 {
		yyb1288 = yyj1288 > l
	} else {
		yyb1288 = r.CheckBreak()
	}
	if yyb1288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1288++
	if yyhl1288 {
		yyb1288 = yyj1288 > l
	} else {
		yyb1288 = r.CheckBreak()
	}
	if yyb1288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1288++
		if yyhl1288 {
			yyb1288 = yyj1288 > l
		} else {
			yyb1288 = r.CheckBreak()
		}
		if yyb1288 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1288-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1291 := z.EncBinary()
		_ = yym1291
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1292 := !z.EncBinary()
			yy2arr1292 := z.EncBasicHandle().StructToArray
			var yyq1292 [2]bool
			_, _, _ = yysep1292, yyq1292, yy2arr1292
			const yyr1292 bool = false
			var yynn1292 int
			if yyr1292 || yy2arr1292 {
				r.EncodeArrayStart(2)
			} else {
				yynn1292 = 2
				for _, b := range yyq1292 {
					if b {
						yynn1292++
					}
				}
				r.EncodeMapStart(yynn1292)
				yynn1292 = 0
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1294 := z.EncBinary()
				_ = yym1294
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1295 := z.EncBinary()
				_ = yym1295
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1297 := z.EncBinary()
				_ = yym1297
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1298 := z.EncBinary()
				_ = yym1298
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1299 := z.DecBinary()
	_ = yym1299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1300 := r.ContainerType()
		if yyct1300 == codecSelferValueTypeMap1234 {
			yyl1300 := r.ReadMapStart()
			if yyl1300 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1300, d)
			}
		} else if yyct1300 == codecSelferValueTypeArray1234 {
			yyl1300 := r.ReadArrayStart()
			if yyl1300 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1301Slc
	var yyhl1301 bool = l >= 0
	for yyj1301 := 0; ; yyj1301++ {
		if yyhl1301 {
			if yyj1301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1301Slc = r.DecodeBytes(yys1301Slc, true, true)
		yys1301 := string(yys1301Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1301 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1301)
		} // end switch yys1301
	} // end for yyj1301
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1304 int
	var yyb1304 bool
	var yyhl1304 bool = l >= 0
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1304++
		if yyhl1304 {
			yyb1304 = yyj1304 > l
		} else {
			yyb1304 = r.CheckBreak()
		}
		if yyb1304 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1304-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1307 := z.EncBinary()
		_ = yym1307
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1308 := !z.EncBinary()
			yy2arr1308 := z.EncBasicHandle().StructToArray
			var yyq1308 [5]bool
			_, _, _ = yysep1308, yyq1308, yy2arr1308
			const yyr1308 bool = false
			yyq1308[0] = x.Path != ""
			yyq1308[2] = x.Host != ""
			yyq1308[3] = x.Scheme != ""
			yyq1308[4] = len(x.HTTPHeaders) != 0
			var yynn1308 int
			if yyr1308 || yy2arr1308 {
				r.EncodeArrayStart(5)
			} else {
				yynn1308 = 1
				for _, b := range yyq1308 {
					if b {
						yynn1308++
					}
				}
				r.EncodeMapStart(yynn1308)
				yynn1308 = 0
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1308[0] {
					yym1310 := z.EncBinary()
					_ = yym1310
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1308[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1311 := z.EncBinary()
					_ = yym1311
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1313 := &x.Port
				yym1314 := z.EncBinary()
				_ = yym1314
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1313) {
				} else if !yym1314 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1313)
				} else {
					z.EncFallback(yy1313)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1315 := &x.Port
				yym1316 := z.EncBinary()
				_ = yym1316
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1315) {
				} else if !yym1316 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1315)
				} else {
					z.EncFallback(yy1315)
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1308[2] {
					yym1318 := z.EncBinary()
					_ = yym1318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1308[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1319 := z.EncBinary()
					_ = yym1319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1308[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1308[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1308[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1322 := z.EncBinary()
						_ = yym1322
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1308[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1323 := z.EncBinary()
						_ = yym1323
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1308 || yy2arr1308 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1324 := z.DecBinary()
	_ = yym1324
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1325 := r.ContainerType()
		if yyct1325 == codecSelferValueTypeMap1234 {
			yyl1325 := r.ReadMapStart()
			if yyl1325 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1325, d)
			}
		} else if yyct1325 == codecSelferValueTypeArray1234 {
			yyl1325 := r.ReadArrayStart()
			if yyl1325 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1325, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1326Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1326Slc
	var yyhl1326 bool = l >= 0
	for yyj1326 := 0; ; yyj1326++ {
		if yyhl1326 {
			if yyj1326 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1326Slc = r.DecodeBytes(yys1326Slc, true, true)
		yys1326 := string(yys1326Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1326 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1328 := &x.Port
				yym1329 := z.DecBinary()
				_ = yym1329
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1328) {
				} else if !yym1329 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1328)
				} else {
					z.DecFallback(yyv1328, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1332 := &x.HTTPHeaders
				yym1333 := z.DecBinary()
				_ = yym1333
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1332), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1326)
		} // end switch yys1326
	} // end for yyj1326
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1334 int
	var yyb1334 bool
	var yyhl1334 bool = l >= 0
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1336 := &x.Port
		yym1337 := z.DecBinary()
		_ = yym1337
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1336) {
		} else if !yym1337 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1336)
		} else {
			z.DecFallback(yyv1336, false)
		}
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1340 := &x.HTTPHeaders
		yym1341 := z.DecBinary()
		_ = yym1341
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1340), d)
		}
	}
	for {
		yyj1334++
		if yyhl1334 {
			yyb1334 = yyj1334 > l
		} else {
			yyb1334 = r.CheckBreak()
		}
		if yyb1334 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1334-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1342 := z.EncBinary()
	_ = yym1342
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1343 := z.DecBinary()
	_ = yym1343
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1344 := z.EncBinary()
		_ = yym1344
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1345 := !z.EncBinary()
			yy2arr1345 := z.EncBasicHandle().StructToArray
			var yyq1345 [1]bool
			_, _, _ = yysep1345, yyq1345, yy2arr1345
			const yyr1345 bool = false
			var yynn1345 int
			if yyr1345 || yy2arr1345 {
				r.EncodeArrayStart(1)
			} else {
				yynn1345 = 1
				for _, b := range yyq1345 {
					if b {
						yynn1345++
					}
				}
				r.EncodeMapStart(yynn1345)
				yynn1345 = 0
			}
			if yyr1345 || yy2arr1345 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1347 := &x.Port
				yym1348 := z.EncBinary()
				_ = yym1348
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1347) {
				} else if !yym1348 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1347)
				} else {
					z.EncFallback(yy1347)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1349 := &x.Port
				yym1350 := z.EncBinary()
				_ = yym1350
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1349) {
				} else if !yym1350 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1349)
				} else {
					z.EncFallback(yy1349)
				}
			}
			if yyr1345 || yy2arr1345 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1351 := z.DecBinary()
	_ = yym1351
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1352 := r.ContainerType()
		if yyct1352 == codecSelferValueTypeMap1234 {
			yyl1352 := r.ReadMapStart()
			if yyl1352 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1352, d)
			}
		} else if yyct1352 == codecSelferValueTypeArray1234 {
			yyl1352 := r.ReadArrayStart()
			if yyl1352 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1352, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1353Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1353Slc
	var yyhl1353 bool = l >= 0
	for yyj1353 := 0; ; yyj1353++ {
		if yyhl1353 {
			if yyj1353 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1353Slc = r.DecodeBytes(yys1353Slc, true, true)
		yys1353 := string(yys1353Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1353 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1354 := &x.Port
				yym1355 := z.DecBinary()
				_ = yym1355
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1354) {
				} else if !yym1355 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1354)
				} else {
					z.DecFallback(yyv1354, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1353)
		} // end switch yys1353
	} // end for yyj1353
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1356 int
	var yyb1356 bool
	var yyhl1356 bool = l >= 0
	yyj1356++
	if yyhl1356 {
		yyb1356 = yyj1356 > l
	} else {
		yyb1356 = r.CheckBreak()
	}
	if yyb1356 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1357 := &x.Port
		yym1358 := z.DecBinary()
		_ = yym1358
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1357) {
		} else if !yym1358 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1357)
		} else {
			z.DecFallback(yyv1357, false)
		}
	}
	for {
		yyj1356++
		if yyhl1356 {
			yyb1356 = yyj1356 > l
		} else {
			yyb1356 = r.CheckBreak()
		}
		if yyb1356 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1356-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1359 := z.EncBinary()
		_ = yym1359
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1360 := !z.EncBinary()
			yy2arr1360 := z.EncBasicHandle().StructToArray
			var yyq1360 [1]bool
			_, _, _ = yysep1360, yyq1360, yy2arr1360
			const yyr1360 bool = false
			yyq1360[0] = len(x.Command) != 0
			var yynn1360 int
			if yyr1360 || yy2arr1360 {
				r.EncodeArrayStart(1)
			} else {
				yynn1360 = 0
				for _, b := range yyq1360 {
					if b {
						yynn1360++
					}
				}
				r.EncodeMapStart(yynn1360)
				yynn1360 = 0
			}
			if yyr1360 || yy2arr1360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1360[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1362 := z.EncBinary()
						_ = yym1362
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1360[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1363 := z.EncBinary()
						_ = yym1363
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1360 || yy2arr1360 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1364 := z.DecBinary()
	_ = yym1364
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1365 := r.ContainerType()
		if yyct1365 == codecSelferValueTypeMap1234 {
			yyl1365 := r.ReadMapStart()
			if yyl1365 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1365, d)
			}
		} else if yyct1365 == codecSelferValueTypeArray1234 {
			yyl1365 := r.ReadArrayStart()
			if yyl1365 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1365, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1366Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1366Slc
	var yyhl1366 bool = l >= 0
	for yyj1366 := 0; ; yyj1366++ {
		if yyhl1366 {
			if yyj1366 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1366Slc = r.DecodeBytes(yys1366Slc, true, true)
		yys1366 := string(yys1366Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1366 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1367 := &x.Command
				yym1368 := z.DecBinary()
				_ = yym1368
				if false {
				} else {
					z.F.DecSliceStringX(yyv1367, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1366)
		} // end switch yys1366
	} // end for yyj1366
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1369 int
	var yyb1369 bool
	var yyhl1369 bool = l >= 0
	yyj1369++
	if yyhl1369 {
		yyb1369 = yyj1369 > l
	} else {
		yyb1369 = r.CheckBreak()
	}
	if yyb1369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1370 := &x.Command
		yym1371 := z.DecBinary()
		_ = yym1371
		if false {
		} else {
			z.F.DecSliceStringX(yyv1370, false, d)
		}
	}
	for {
		yyj1369++
		if yyhl1369 {
			yyb1369 = yyj1369 > l
		} else {
			yyb1369 = r.CheckBreak()
		}
		if yyb1369 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1369-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1372 := z.EncBinary()
		_ = yym1372
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1373 := !z.EncBinary()
			yy2arr1373 := z.EncBasicHandle().StructToArray
			var yyq1373 [8]bool
			_, _, _ = yysep1373, yyq1373, yy2arr1373
			const yyr1373 bool = false
			yyq1373[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1373[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1373[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1373[3] = x.InitialDelaySeconds != 0
			yyq1373[4] = x.TimeoutSeconds != 0
			yyq1373[5] = x.PeriodSeconds != 0
			yyq1373[6] = x.SuccessThreshold != 0
			yyq1373[7] = x.FailureThreshold != 0
			var yynn1373 int
			if yyr1373 || yy2arr1373 {
				r.EncodeArrayStart(8)
			} else {
				yynn1373 = 0
				for _, b := range yyq1373 {
					if b {
						yynn1373++
					}
				}
				r.EncodeMapStart(yynn1373)
				yynn1373 = 0
			}
			var yyn1374 bool
			if x.Handler.Exec == nil {
				yyn1374 = true
				goto LABEL1374
			}
		LABEL1374:
			if yyr1373 || yy2arr1373 {
				if yyn1374 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1373[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1373[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1374 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1375 bool
			if x.Handler.HTTPGet == nil {
				yyn1375 = true
				goto LABEL1375
			}
		LABEL1375:
			if yyr1373 || yy2arr1373 {
				if yyn1375 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1373[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1373[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1375 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1376 bool
			if x.Handler.TCPSocket == nil {
				yyn1376 = true
				goto LABEL1376
			}
		LABEL1376:
			if yyr1373 || yy2arr1373 {
				if yyn1376 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1373[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1373[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1376 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1373[3] {
					yym1378 := z.EncBinary()
					_ = yym1378
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1373[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1379 := z.EncBinary()
					_ = yym1379
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1373[4] {
					yym1381 := z.EncBinary()
					_ = yym1381
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1373[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1382 := z.EncBinary()
					_ = yym1382
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1373[5] {
					yym1384 := z.EncBinary()
					_ = yym1384
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1373[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1385 := z.EncBinary()
					_ = yym1385
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1373[6] {
					yym1387 := z.EncBinary()
					_ = yym1387
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1373[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1388 := z.EncBinary()
					_ = yym1388
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1373[7] {
					yym1390 := z.EncBinary()
					_ = yym1390
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1373[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1391 := z.EncBinary()
					_ = yym1391
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1392 := z.DecBinary()
	_ = yym1392
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1393 := r.ContainerType()
		if yyct1393 == codecSelferValueTypeMap1234 {
			yyl1393 := r.ReadMapStart()
			if yyl1393 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1393, d)
			}
		} else if yyct1393 == codecSelferValueTypeArray1234 {
			yyl1393 := r.ReadArrayStart()
			if yyl1393 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1393, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1394Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1394Slc
	var yyhl1394 bool = l >= 0
	for yyj1394 := 0; ; yyj1394++ {
		if yyhl1394 {
			if yyj1394 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1394Slc = r.DecodeBytes(yys1394Slc, true, true)
		yys1394 := string(yys1394Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1394 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1394)
		} // end switch yys1394
	} // end for yyj1394
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1403 int
	var yyb1403 bool
	var yyhl1403 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1403++
		if yyhl1403 {
			yyb1403 = yyj1403 > l
		} else {
			yyb1403 = r.CheckBreak()
		}
		if yyb1403 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1403-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1412 := z.EncBinary()
	_ = yym1412
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1413 := z.DecBinary()
	_ = yym1413
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1414 := z.EncBinary()
	_ = yym1414
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1415 := z.DecBinary()
	_ = yym1415
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1416 := z.EncBinary()
		_ = yym1416
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1417 := !z.EncBinary()
			yy2arr1417 := z.EncBasicHandle().StructToArray
			var yyq1417 [2]bool
			_, _, _ = yysep1417, yyq1417, yy2arr1417
			const yyr1417 bool = false
			yyq1417[0] = len(x.Add) != 0
			yyq1417[1] = len(x.Drop) != 0
			var yynn1417 int
			if yyr1417 || yy2arr1417 {
				r.EncodeArrayStart(2)
			} else {
				yynn1417 = 0
				for _, b := range yyq1417 {
					if b {
						yynn1417++
					}
				}
				r.EncodeMapStart(yynn1417)
				yynn1417 = 0
			}
			if yyr1417 || yy2arr1417 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1417[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1419 := z.EncBinary()
						_ = yym1419
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1417[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1420 := z.EncBinary()
						_ = yym1420
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1417 || yy2arr1417 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1417[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1422 := z.EncBinary()
						_ = yym1422
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1417[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1423 := z.EncBinary()
						_ = yym1423
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1417 || yy2arr1417 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1424 := z.DecBinary()
	_ = yym1424
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1425 := r.ContainerType()
		if yyct1425 == codecSelferValueTypeMap1234 {
			yyl1425 := r.ReadMapStart()
			if yyl1425 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1425, d)
			}
		} else if yyct1425 == codecSelferValueTypeArray1234 {
			yyl1425 := r.ReadArrayStart()
			if yyl1425 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1425, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1426Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1426Slc
	var yyhl1426 bool = l >= 0
	for yyj1426 := 0; ; yyj1426++ {
		if yyhl1426 {
			if yyj1426 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1426Slc = r.DecodeBytes(yys1426Slc, true, true)
		yys1426 := string(yys1426Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1426 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1427 := &x.Add
				yym1428 := z.DecBinary()
				_ = yym1428
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1427), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1429 := &x.Drop
				yym1430 := z.DecBinary()
				_ = yym1430
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1429), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1426)
		} // end switch yys1426
	} // end for yyj1426
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1431 int
	var yyb1431 bool
	var yyhl1431 bool = l >= 0
	yyj1431++
	if yyhl1431 {
		yyb1431 = yyj1431 > l
	} else {
		yyb1431 = r.CheckBreak()
	}
	if yyb1431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1432 := &x.Add
		yym1433 := z.DecBinary()
		_ = yym1433
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1432), d)
		}
	}
	yyj1431++
	if yyhl1431 {
		yyb1431 = yyj1431 > l
	} else {
		yyb1431 = r.CheckBreak()
	}
	if yyb1431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1434 := &x.Drop
		yym1435 := z.DecBinary()
		_ = yym1435
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1434), d)
		}
	}
	for {
		yyj1431++
		if yyhl1431 {
			yyb1431 = yyj1431 > l
		} else {
			yyb1431 = r.CheckBreak()
		}
		if yyb1431 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1431-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1436 := z.EncBinary()
		_ = yym1436
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1437 := !z.EncBinary()
			yy2arr1437 := z.EncBasicHandle().StructToArray
			var yyq1437 [2]bool
			_, _, _ = yysep1437, yyq1437, yy2arr1437
			const yyr1437 bool = false
			yyq1437[0] = len(x.Limits) != 0
			yyq1437[1] = len(x.Requests) != 0
			var yynn1437 int
			if yyr1437 || yy2arr1437 {
				r.EncodeArrayStart(2)
			} else {
				yynn1437 = 0
				for _, b := range yyq1437 {
					if b {
						yynn1437++
					}
				}
				r.EncodeMapStart(yynn1437)
				yynn1437 = 0
			}
			if yyr1437 || yy2arr1437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1437[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1437[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1437 || yy2arr1437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1437[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1437[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1437 || yy2arr1437 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1440 := z.DecBinary()
	_ = yym1440
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1441 := r.ContainerType()
		if yyct1441 == codecSelferValueTypeMap1234 {
			yyl1441 := r.ReadMapStart()
			if yyl1441 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1441, d)
			}
		} else if yyct1441 == codecSelferValueTypeArray1234 {
			yyl1441 := r.ReadArrayStart()
			if yyl1441 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1441, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1442Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1442Slc
	var yyhl1442 bool = l >= 0
	for yyj1442 := 0; ; yyj1442++ {
		if yyhl1442 {
			if yyj1442 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1442Slc = r.DecodeBytes(yys1442Slc, true, true)
		yys1442 := string(yys1442Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1442 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1443 := &x.Limits
				yyv1443.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1444 := &x.Requests
				yyv1444.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1442)
		} // end switch yys1442
	} // end for yyj1442
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1445 int
	var yyb1445 bool
	var yyhl1445 bool = l >= 0
	yyj1445++
	if yyhl1445 {
		yyb1445 = yyj1445 > l
	} else {
		yyb1445 = r.CheckBreak()
	}
	if yyb1445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1446 := &x.Limits
		yyv1446.CodecDecodeSelf(d)
	}
	yyj1445++
	if yyhl1445 {
		yyb1445 = yyj1445 > l
	} else {
		yyb1445 = r.CheckBreak()
	}
	if yyb1445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1447 := &x.Requests
		yyv1447.CodecDecodeSelf(d)
	}
	for {
		yyj1445++
		if yyhl1445 {
			yyb1445 = yyj1445 > l
		} else {
			yyb1445 = r.CheckBreak()
		}
		if yyb1445 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1445-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1448 := z.EncBinary()
		_ = yym1448
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1449 := !z.EncBinary()
			yy2arr1449 := z.EncBasicHandle().StructToArray
			var yyq1449 [18]bool
			_, _, _ = yysep1449, yyq1449, yy2arr1449
			const yyr1449 bool = false
			yyq1449[1] = x.Image != ""
			yyq1449[2] = len(x.Command) != 0
			yyq1449[3] = len(x.Args) != 0
			yyq1449[4] = x.WorkingDir != ""
			yyq1449[5] = len(x.Ports) != 0
			yyq1449[6] = len(x.Env) != 0
			yyq1449[7] = true
			yyq1449[8] = len(x.VolumeMounts) != 0
			yyq1449[9] = x.LivenessProbe != nil
			yyq1449[10] = x.ReadinessProbe != nil
			yyq1449[11] = x.Lifecycle != nil
			yyq1449[12] = x.TerminationMessagePath != ""
			yyq1449[13] = x.ImagePullPolicy != ""
			yyq1449[14] = x.SecurityContext != nil
			yyq1449[15] = x.Stdin != false
			yyq1449[16] = x.StdinOnce != false
			yyq1449[17] = x.TTY != false
			var yynn1449 int
			if yyr1449 || yy2arr1449 {
				r.EncodeArrayStart(18)
			} else {
				yynn1449 = 1
				for _, b := range yyq1449 {
					if b {
						yynn1449++
					}
				}
				r.EncodeMapStart(yynn1449)
				yynn1449 = 0
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1451 := z.EncBinary()
				_ = yym1451
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1452 := z.EncBinary()
				_ = yym1452
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[1] {
					yym1454 := z.EncBinary()
					_ = yym1454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1449[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1455 := z.EncBinary()
					_ = yym1455
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1457 := z.EncBinary()
						_ = yym1457
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1458 := z.EncBinary()
						_ = yym1458
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1460 := z.EncBinary()
						_ = yym1460
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1461 := z.EncBinary()
						_ = yym1461
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[4] {
					yym1463 := z.EncBinary()
					_ = yym1463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1449[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1464 := z.EncBinary()
					_ = yym1464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1466 := z.EncBinary()
						_ = yym1466
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1467 := z.EncBinary()
						_ = yym1467
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1469 := z.EncBinary()
						_ = yym1469
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1470 := z.EncBinary()
						_ = yym1470
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[7] {
					yy1472 := &x.Resources
					yy1472.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1473 := &x.Resources
					yy1473.CodecEncodeSelf(e)
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1475 := z.EncBinary()
						_ = yym1475
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1476 := z.EncBinary()
						_ = yym1476
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[12] {
					yym1481 := z.EncBinary()
					_ = yym1481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1449[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1482 := z.EncBinary()
					_ = yym1482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1449[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1449[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[15] {
					yym1486 := z.EncBinary()
					_ = yym1486
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1449[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1487 := z.EncBinary()
					_ = yym1487
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[16] {
					yym1489 := z.EncBinary()
					_ = yym1489
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1449[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1490 := z.EncBinary()
					_ = yym1490
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1449[17] {
					yym1492 := z.EncBinary()
					_ = yym1492
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1449[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1493 := z.EncBinary()
					_ = yym1493
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1449 || yy2arr1449 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1494 := z.DecBinary()
	_ = yym1494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1495 := r.ContainerType()
		if yyct1495 == codecSelferValueTypeMap1234 {
			yyl1495 := r.ReadMapStart()
			if yyl1495 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1495, d)
			}
		} else if yyct1495 == codecSelferValueTypeArray1234 {
			yyl1495 := r.ReadArrayStart()
			if yyl1495 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1495, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1496Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1496Slc
	var yyhl1496 bool = l >= 0
	for yyj1496 := 0; ; yyj1496++ {
		if yyhl1496 {
			if yyj1496 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1496Slc = r.DecodeBytes(yys1496Slc, true, true)
		yys1496 := string(yys1496Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1496 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1499 := &x.Command
				yym1500 := z.DecBinary()
				_ = yym1500
				if false {
				} else {
					z.F.DecSliceStringX(yyv1499, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1501 := &x.Args
				yym1502 := z.DecBinary()
				_ = yym1502
				if false {
				} else {
					z.F.DecSliceStringX(yyv1501, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1504 := &x.Ports
				yym1505 := z.DecBinary()
				_ = yym1505
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1504), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1506 := &x.Env
				yym1507 := z.DecBinary()
				_ = yym1507
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1506), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1508 := &x.Resources
				yyv1508.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1509 := &x.VolumeMounts
				yym1510 := z.DecBinary()
				_ = yym1510
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1509), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1496)
		} // end switch yys1496
	} // end for yyj1496
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1520 int
	var yyb1520 bool
	var yyhl1520 bool = l >= 0
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1523 := &x.Command
		yym1524 := z.DecBinary()
		_ = yym1524
		if false {
		} else {
			z.F.DecSliceStringX(yyv1523, false, d)
		}
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1525 := &x.Args
		yym1526 := z.DecBinary()
		_ = yym1526
		if false {
		} else {
			z.F.DecSliceStringX(yyv1525, false, d)
		}
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1528 := &x.Ports
		yym1529 := z.DecBinary()
		_ = yym1529
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1528), d)
		}
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1530 := &x.Env
		yym1531 := z.DecBinary()
		_ = yym1531
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1530), d)
		}
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1532 := &x.Resources
		yyv1532.CodecDecodeSelf(d)
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1533 := &x.VolumeMounts
		yym1534 := z.DecBinary()
		_ = yym1534
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1533), d)
		}
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1520++
	if yyhl1520 {
		yyb1520 = yyj1520 > l
	} else {
		yyb1520 = r.CheckBreak()
	}
	if yyb1520 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1520++
		if yyhl1520 {
			yyb1520 = yyj1520 > l
		} else {
			yyb1520 = r.CheckBreak()
		}
		if yyb1520 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1520-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1544 := z.EncBinary()
		_ = yym1544
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1545 := !z.EncBinary()
			yy2arr1545 := z.EncBasicHandle().StructToArray
			var yyq1545 [3]bool
			_, _, _ = yysep1545, yyq1545, yy2arr1545
			const yyr1545 bool = false
			yyq1545[0] = x.Exec != nil
			yyq1545[1] = x.HTTPGet != nil
			yyq1545[2] = x.TCPSocket != nil
			var yynn1545 int
			if yyr1545 || yy2arr1545 {
				r.EncodeArrayStart(3)
			} else {
				yynn1545 = 0
				for _, b := range yyq1545 {
					if b {
						yynn1545++
					}
				}
				r.EncodeMapStart(yynn1545)
				yynn1545 = 0
			}
			if yyr1545 || yy2arr1545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1545[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1545[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1545 || yy2arr1545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1545[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1545[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1545 || yy2arr1545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1545[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1545[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1545 || yy2arr1545 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1549 := z.DecBinary()
	_ = yym1549
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1550 := r.ContainerType()
		if yyct1550 == codecSelferValueTypeMap1234 {
			yyl1550 := r.ReadMapStart()
			if yyl1550 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1550, d)
			}
		} else if yyct1550 == codecSelferValueTypeArray1234 {
			yyl1550 := r.ReadArrayStart()
			if yyl1550 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1550, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1551Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1551Slc
	var yyhl1551 bool = l >= 0
	for yyj1551 := 0; ; yyj1551++ {
		if yyhl1551 {
			if yyj1551 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1551Slc = r.DecodeBytes(yys1551Slc, true, true)
		yys1551 := string(yys1551Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1551 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1551)
		} // end switch yys1551
	} // end for yyj1551
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1555 int
	var yyb1555 bool
	var yyhl1555 bool = l >= 0
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1555++
	if yyhl1555 {
		yyb1555 = yyj1555 > l
	} else {
		yyb1555 = r.CheckBreak()
	}
	if yyb1555 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1555++
		if yyhl1555 {
			yyb1555 = yyj1555 > l
		} else {
			yyb1555 = r.CheckBreak()
		}
		if yyb1555 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1555-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1559 := z.EncBinary()
		_ = yym1559
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1560 := !z.EncBinary()
			yy2arr1560 := z.EncBasicHandle().StructToArray
			var yyq1560 [2]bool
			_, _, _ = yysep1560, yyq1560, yy2arr1560
			const yyr1560 bool = false
			yyq1560[0] = x.PostStart != nil
			yyq1560[1] = x.PreStop != nil
			var yynn1560 int
			if yyr1560 || yy2arr1560 {
				r.EncodeArrayStart(2)
			} else {
				yynn1560 = 0
				for _, b := range yyq1560 {
					if b {
						yynn1560++
					}
				}
				r.EncodeMapStart(yynn1560)
				yynn1560 = 0
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1560[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1560[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1560[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1560[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1563 := z.DecBinary()
	_ = yym1563
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1564 := r.ContainerType()
		if yyct1564 == codecSelferValueTypeMap1234 {
			yyl1564 := r.ReadMapStart()
			if yyl1564 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1564, d)
			}
		} else if yyct1564 == codecSelferValueTypeArray1234 {
			yyl1564 := r.ReadArrayStart()
			if yyl1564 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1564, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1565Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1565Slc
	var yyhl1565 bool = l >= 0
	for yyj1565 := 0; ; yyj1565++ {
		if yyhl1565 {
			if yyj1565 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1565Slc = r.DecodeBytes(yys1565Slc, true, true)
		yys1565 := string(yys1565Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1565 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1565)
		} // end switch yys1565
	} // end for yyj1565
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1568 int
	var yyb1568 bool
	var yyhl1568 bool = l >= 0
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1568++
		if yyhl1568 {
			yyb1568 = yyj1568 > l
		} else {
			yyb1568 = r.CheckBreak()
		}
		if yyb1568 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1568-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1571 := z.EncBinary()
	_ = yym1571
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1572 := z.DecBinary()
	_ = yym1572
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1573 := z.EncBinary()
		_ = yym1573
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1574 := !z.EncBinary()
			yy2arr1574 := z.EncBasicHandle().StructToArray
			var yyq1574 [2]bool
			_, _, _ = yysep1574, yyq1574, yy2arr1574
			const yyr1574 bool = false
			yyq1574[0] = x.Reason != ""
			yyq1574[1] = x.Message != ""
			var yynn1574 int
			if yyr1574 || yy2arr1574 {
				r.EncodeArrayStart(2)
			} else {
				yynn1574 = 0
				for _, b := range yyq1574 {
					if b {
						yynn1574++
					}
				}
				r.EncodeMapStart(yynn1574)
				yynn1574 = 0
			}
			if yyr1574 || yy2arr1574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1574[0] {
					yym1576 := z.EncBinary()
					_ = yym1576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1574[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1577 := z.EncBinary()
					_ = yym1577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1574 || yy2arr1574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1574[1] {
					yym1579 := z.EncBinary()
					_ = yym1579
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1574[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1580 := z.EncBinary()
					_ = yym1580
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1574 || yy2arr1574 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1581 := z.DecBinary()
	_ = yym1581
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1582 := r.ContainerType()
		if yyct1582 == codecSelferValueTypeMap1234 {
			yyl1582 := r.ReadMapStart()
			if yyl1582 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1582, d)
			}
		} else if yyct1582 == codecSelferValueTypeArray1234 {
			yyl1582 := r.ReadArrayStart()
			if yyl1582 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1582, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1583Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1583Slc
	var yyhl1583 bool = l >= 0
	for yyj1583 := 0; ; yyj1583++ {
		if yyhl1583 {
			if yyj1583 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1583Slc = r.DecodeBytes(yys1583Slc, true, true)
		yys1583 := string(yys1583Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1583 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1583)
		} // end switch yys1583
	} // end for yyj1583
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1586 int
	var yyb1586 bool
	var yyhl1586 bool = l >= 0
	yyj1586++
	if yyhl1586 {
		yyb1586 = yyj1586 > l
	} else {
		yyb1586 = r.CheckBreak()
	}
	if yyb1586 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1586++
	if yyhl1586 {
		yyb1586 = yyj1586 > l
	} else {
		yyb1586 = r.CheckBreak()
	}
	if yyb1586 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1586++
		if yyhl1586 {
			yyb1586 = yyj1586 > l
		} else {
			yyb1586 = r.CheckBreak()
		}
		if yyb1586 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1586-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1589 := z.EncBinary()
		_ = yym1589
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1590 := !z.EncBinary()
			yy2arr1590 := z.EncBasicHandle().StructToArray
			var yyq1590 [1]bool
			_, _, _ = yysep1590, yyq1590, yy2arr1590
			const yyr1590 bool = false
			yyq1590[0] = true
			var yynn1590 int
			if yyr1590 || yy2arr1590 {
				r.EncodeArrayStart(1)
			} else {
				yynn1590 = 0
				for _, b := range yyq1590 {
					if b {
						yynn1590++
					}
				}
				r.EncodeMapStart(yynn1590)
				yynn1590 = 0
			}
			if yyr1590 || yy2arr1590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1590[0] {
					yy1592 := &x.StartedAt
					yym1593 := z.EncBinary()
					_ = yym1593
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1592) {
					} else if yym1593 {
						z.EncBinaryMarshal(yy1592)
					} else if !yym1593 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1592)
					} else {
						z.EncFallback(yy1592)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1590[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1594 := &x.StartedAt
					yym1595 := z.EncBinary()
					_ = yym1595
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1594) {
					} else if yym1595 {
						z.EncBinaryMarshal(yy1594)
					} else if !yym1595 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1594)
					} else {
						z.EncFallback(yy1594)
					}
				}
			}
			if yyr1590 || yy2arr1590 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1596 := z.DecBinary()
	_ = yym1596
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1597 := r.ContainerType()
		if yyct1597 == codecSelferValueTypeMap1234 {
			yyl1597 := r.ReadMapStart()
			if yyl1597 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1597, d)
			}
		} else if yyct1597 == codecSelferValueTypeArray1234 {
			yyl1597 := r.ReadArrayStart()
			if yyl1597 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1597, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1598Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1598Slc
	var yyhl1598 bool = l >= 0
	for yyj1598 := 0; ; yyj1598++ {
		if yyhl1598 {
			if yyj1598 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1598Slc = r.DecodeBytes(yys1598Slc, true, true)
		yys1598 := string(yys1598Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1598 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1599 := &x.StartedAt
				yym1600 := z.DecBinary()
				_ = yym1600
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1599) {
				} else if yym1600 {
					z.DecBinaryUnmarshal(yyv1599)
				} else if !yym1600 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1599)
				} else {
					z.DecFallback(yyv1599, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1598)
		} // end switch yys1598
	} // end for yyj1598
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1601 int
	var yyb1601 bool
	var yyhl1601 bool = l >= 0
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1602 := &x.StartedAt
		yym1603 := z.DecBinary()
		_ = yym1603
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1602) {
		} else if yym1603 {
			z.DecBinaryUnmarshal(yyv1602)
		} else if !yym1603 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1602)
		} else {
			z.DecFallback(yyv1602, false)
		}
	}
	for {
		yyj1601++
		if yyhl1601 {
			yyb1601 = yyj1601 > l
		} else {
			yyb1601 = r.CheckBreak()
		}
		if yyb1601 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1601-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1604 := z.EncBinary()
		_ = yym1604
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1605 := !z.EncBinary()
			yy2arr1605 := z.EncBasicHandle().StructToArray
			var yyq1605 [7]bool
			_, _, _ = yysep1605, yyq1605, yy2arr1605
			const yyr1605 bool = false
			yyq1605[1] = x.Signal != 0
			yyq1605[2] = x.Reason != ""
			yyq1605[3] = x.Message != ""
			yyq1605[4] = true
			yyq1605[5] = true
			yyq1605[6] = x.ContainerID != ""
			var yynn1605 int
			if yyr1605 || yy2arr1605 {
				r.EncodeArrayStart(7)
			} else {
				yynn1605 = 1
				for _, b := range yyq1605 {
					if b {
						yynn1605++
					}
				}
				r.EncodeMapStart(yynn1605)
				yynn1605 = 0
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1607 := z.EncBinary()
				_ = yym1607
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1608 := z.EncBinary()
				_ = yym1608
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1605[1] {
					yym1610 := z.EncBinary()
					_ = yym1610
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1605[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1611 := z.EncBinary()
					_ = yym1611
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1605[2] {
					yym1613 := z.EncBinary()
					_ = yym1613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1605[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1614 := z.EncBinary()
					_ = yym1614
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1605[3] {
					yym1616 := z.EncBinary()
					_ = yym1616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1605[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1617 := z.EncBinary()
					_ = yym1617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1605[4] {
					yy1619 := &x.StartedAt
					yym1620 := z.EncBinary()
					_ = yym1620
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1619) {
					} else if yym1620 {
						z.EncBinaryMarshal(yy1619)
					} else if !yym1620 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1619)
					} else {
						z.EncFallback(yy1619)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1605[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1621 := &x.StartedAt
					yym1622 := z.EncBinary()
					_ = yym1622
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1621) {
					} else if yym1622 {
						z.EncBinaryMarshal(yy1621)
					} else if !yym1622 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1621)
					} else {
						z.EncFallback(yy1621)
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1605[5] {
					yy1624 := &x.FinishedAt
					yym1625 := z.EncBinary()
					_ = yym1625
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1624) {
					} else if yym1625 {
						z.EncBinaryMarshal(yy1624)
					} else if !yym1625 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1624)
					} else {
						z.EncFallback(yy1624)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1605[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1626 := &x.FinishedAt
					yym1627 := z.EncBinary()
					_ = yym1627
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1626) {
					} else if yym1627 {
						z.EncBinaryMarshal(yy1626)
					} else if !yym1627 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1626)
					} else {
						z.EncFallback(yy1626)
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1605[6] {
					yym1629 := z.EncBinary()
					_ = yym1629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1605[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1630 := z.EncBinary()
					_ = yym1630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1605 || yy2arr1605 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1631 := z.DecBinary()
	_ = yym1631
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1632 := r.ContainerType()
		if yyct1632 == codecSelferValueTypeMap1234 {
			yyl1632 := r.ReadMapStart()
			if yyl1632 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1632, d)
			}
		} else if yyct1632 == codecSelferValueTypeArray1234 {
			yyl1632 := r.ReadArrayStart()
			if yyl1632 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1632, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1633Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1633Slc
	var yyhl1633 bool = l >= 0
	for yyj1633 := 0; ; yyj1633++ {
		if yyhl1633 {
			if yyj1633 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1633Slc = r.DecodeBytes(yys1633Slc, true, true)
		yys1633 := string(yys1633Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1633 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1638 := &x.StartedAt
				yym1639 := z.DecBinary()
				_ = yym1639
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1638) {
				} else if yym1639 {
					z.DecBinaryUnmarshal(yyv1638)
				} else if !yym1639 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1638)
				} else {
					z.DecFallback(yyv1638, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1640 := &x.FinishedAt
				yym1641 := z.DecBinary()
				_ = yym1641
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1640) {
				} else if yym1641 {
					z.DecBinaryUnmarshal(yyv1640)
				} else if !yym1641 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1640)
				} else {
					z.DecFallback(yyv1640, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1633)
		} // end switch yys1633
	} // end for yyj1633
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1643 int
	var yyb1643 bool
	var yyhl1643 bool = l >= 0
	yyj1643++
	if yyhl1643 {
		yyb1643 = yyj1643 > l
	} else {
		yyb1643 = r.CheckBreak()
	}
	if yyb1643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1643++
	if yyhl1643 {
		yyb1643 = yyj1643 > l
	} else {
		yyb1643 = r.CheckBreak()
	}
	if yyb1643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1643++
	if yyhl1643 {
		yyb1643 = yyj1643 > l
	} else {
		yyb1643 = r.CheckBreak()
	}
	if yyb1643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1643++
	if yyhl1643 {
		yyb1643 = yyj1643 > l
	} else {
		yyb1643 = r.CheckBreak()
	}
	if yyb1643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1643++
	if yyhl1643 {
		yyb1643 = yyj1643 > l
	} else {
		yyb1643 = r.CheckBreak()
	}
	if yyb1643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1648 := &x.StartedAt
		yym1649 := z.DecBinary()
		_ = yym1649
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1648) {
		} else if yym1649 {
			z.DecBinaryUnmarshal(yyv1648)
		} else if !yym1649 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1648)
		} else {
			z.DecFallback(yyv1648, false)
		}
	}
	yyj1643++
	if yyhl1643 {
		yyb1643 = yyj1643 > l
	} else {
		yyb1643 = r.CheckBreak()
	}
	if yyb1643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1650 := &x.FinishedAt
		yym1651 := z.DecBinary()
		_ = yym1651
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1650) {
		} else if yym1651 {
			z.DecBinaryUnmarshal(yyv1650)
		} else if !yym1651 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1650)
		} else {
			z.DecFallback(yyv1650, false)
		}
	}
	yyj1643++
	if yyhl1643 {
		yyb1643 = yyj1643 > l
	} else {
		yyb1643 = r.CheckBreak()
	}
	if yyb1643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1643++
		if yyhl1643 {
			yyb1643 = yyj1643 > l
		} else {
			yyb1643 = r.CheckBreak()
		}
		if yyb1643 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1643-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1653 := z.EncBinary()
		_ = yym1653
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1654 := !z.EncBinary()
			yy2arr1654 := z.EncBasicHandle().StructToArray
			var yyq1654 [3]bool
			_, _, _ = yysep1654, yyq1654, yy2arr1654
			const yyr1654 bool = false
			yyq1654[0] = x.Waiting != nil
			yyq1654[1] = x.Running != nil
			yyq1654[2] = x.Terminated != nil
			var yynn1654 int
			if yyr1654 || yy2arr1654 {
				r.EncodeArrayStart(3)
			} else {
				yynn1654 = 0
				for _, b := range yyq1654 {
					if b {
						yynn1654++
					}
				}
				r.EncodeMapStart(yynn1654)
				yynn1654 = 0
			}
			if yyr1654 || yy2arr1654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1654[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1654[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1654 || yy2arr1654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1654[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1654[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1654 || yy2arr1654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1654[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1654[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1654 || yy2arr1654 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1658 := z.DecBinary()
	_ = yym1658
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1659 := r.ContainerType()
		if yyct1659 == codecSelferValueTypeMap1234 {
			yyl1659 := r.ReadMapStart()
			if yyl1659 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1659, d)
			}
		} else if yyct1659 == codecSelferValueTypeArray1234 {
			yyl1659 := r.ReadArrayStart()
			if yyl1659 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1659, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1660Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1660Slc
	var yyhl1660 bool = l >= 0
	for yyj1660 := 0; ; yyj1660++ {
		if yyhl1660 {
			if yyj1660 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1660Slc = r.DecodeBytes(yys1660Slc, true, true)
		yys1660 := string(yys1660Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1660 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1660)
		} // end switch yys1660
	} // end for yyj1660
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1664 int
	var yyb1664 bool
	var yyhl1664 bool = l >= 0
	yyj1664++
	if yyhl1664 {
		yyb1664 = yyj1664 > l
	} else {
		yyb1664 = r.CheckBreak()
	}
	if yyb1664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1664++
	if yyhl1664 {
		yyb1664 = yyj1664 > l
	} else {
		yyb1664 = r.CheckBreak()
	}
	if yyb1664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1664++
	if yyhl1664 {
		yyb1664 = yyj1664 > l
	} else {
		yyb1664 = r.CheckBreak()
	}
	if yyb1664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1664++
		if yyhl1664 {
			yyb1664 = yyj1664 > l
		} else {
			yyb1664 = r.CheckBreak()
		}
		if yyb1664 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1664-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1668 := z.EncBinary()
		_ = yym1668
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1669 := !z.EncBinary()
			yy2arr1669 := z.EncBasicHandle().StructToArray
			var yyq1669 [8]bool
			_, _, _ = yysep1669, yyq1669, yy2arr1669
			const yyr1669 bool = false
			yyq1669[1] = true
			yyq1669[2] = true
			yyq1669[7] = x.ContainerID != ""
			var yynn1669 int
			if yyr1669 || yy2arr1669 {
				r.EncodeArrayStart(8)
			} else {
				yynn1669 = 5
				for _, b := range yyq1669 {
					if b {
						yynn1669++
					}
				}
				r.EncodeMapStart(yynn1669)
				yynn1669 = 0
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1671 := z.EncBinary()
				_ = yym1671
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1672 := z.EncBinary()
				_ = yym1672
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1669[1] {
					yy1674 := &x.State
					yy1674.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1669[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1675 := &x.State
					yy1675.CodecEncodeSelf(e)
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1669[2] {
					yy1677 := &x.LastTerminationState
					yy1677.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1669[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1678 := &x.LastTerminationState
					yy1678.CodecEncodeSelf(e)
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1680 := z.EncBinary()
				_ = yym1680
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1681 := z.EncBinary()
				_ = yym1681
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1683 := z.EncBinary()
				_ = yym1683
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1684 := z.EncBinary()
				_ = yym1684
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1686 := z.EncBinary()
				_ = yym1686
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1687 := z.EncBinary()
				_ = yym1687
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1689 := z.EncBinary()
				_ = yym1689
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1690 := z.EncBinary()
				_ = yym1690
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1669[7] {
					yym1692 := z.EncBinary()
					_ = yym1692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1669[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1693 := z.EncBinary()
					_ = yym1693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1694 := z.DecBinary()
	_ = yym1694
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1695 := r.ContainerType()
		if yyct1695 == codecSelferValueTypeMap1234 {
			yyl1695 := r.ReadMapStart()
			if yyl1695 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1695, d)
			}
		} else if yyct1695 == codecSelferValueTypeArray1234 {
			yyl1695 := r.ReadArrayStart()
			if yyl1695 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1695, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1696Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1696Slc
	var yyhl1696 bool = l >= 0
	for yyj1696 := 0; ; yyj1696++ {
		if yyhl1696 {
			if yyj1696 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1696Slc = r.DecodeBytes(yys1696Slc, true, true)
		yys1696 := string(yys1696Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1696 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1698 := &x.State
				yyv1698.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1699 := &x.LastTerminationState
				yyv1699.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1696)
		} // end switch yys1696
	} // end for yyj1696
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1705 int
	var yyb1705 bool
	var yyhl1705 bool = l >= 0
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1707 := &x.State
		yyv1707.CodecDecodeSelf(d)
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1708 := &x.LastTerminationState
		yyv1708.CodecDecodeSelf(d)
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1705++
	if yyhl1705 {
		yyb1705 = yyj1705 > l
	} else {
		yyb1705 = r.CheckBreak()
	}
	if yyb1705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1705++
		if yyhl1705 {
			yyb1705 = yyj1705 > l
		} else {
			yyb1705 = r.CheckBreak()
		}
		if yyb1705 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1705-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1714 := z.EncBinary()
	_ = yym1714
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1715 := z.DecBinary()
	_ = yym1715
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1716 := z.EncBinary()
	_ = yym1716
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1717 := z.DecBinary()
	_ = yym1717
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1718 := z.EncBinary()
		_ = yym1718
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1719 := !z.EncBinary()
			yy2arr1719 := z.EncBasicHandle().StructToArray
			var yyq1719 [6]bool
			_, _, _ = yysep1719, yyq1719, yy2arr1719
			const yyr1719 bool = false
			yyq1719[2] = true
			yyq1719[3] = true
			yyq1719[4] = x.Reason != ""
			yyq1719[5] = x.Message != ""
			var yynn1719 int
			if yyr1719 || yy2arr1719 {
				r.EncodeArrayStart(6)
			} else {
				yynn1719 = 2
				for _, b := range yyq1719 {
					if b {
						yynn1719++
					}
				}
				r.EncodeMapStart(yynn1719)
				yynn1719 = 0
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1719[2] {
					yy1723 := &x.LastProbeTime
					yym1724 := z.EncBinary()
					_ = yym1724
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1723) {
					} else if yym1724 {
						z.EncBinaryMarshal(yy1723)
					} else if !yym1724 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1723)
					} else {
						z.EncFallback(yy1723)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1719[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1725 := &x.LastProbeTime
					yym1726 := z.EncBinary()
					_ = yym1726
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1725) {
					} else if yym1726 {
						z.EncBinaryMarshal(yy1725)
					} else if !yym1726 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1725)
					} else {
						z.EncFallback(yy1725)
					}
				}
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1719[3] {
					yy1728 := &x.LastTransitionTime
					yym1729 := z.EncBinary()
					_ = yym1729
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1728) {
					} else if yym1729 {
						z.EncBinaryMarshal(yy1728)
					} else if !yym1729 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1728)
					} else {
						z.EncFallback(yy1728)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1719[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1730 := &x.LastTransitionTime
					yym1731 := z.EncBinary()
					_ = yym1731
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1730) {
					} else if yym1731 {
						z.EncBinaryMarshal(yy1730)
					} else if !yym1731 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1730)
					} else {
						z.EncFallback(yy1730)
					}
				}
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1719[4] {
					yym1733 := z.EncBinary()
					_ = yym1733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1719[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1734 := z.EncBinary()
					_ = yym1734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1719[5] {
					yym1736 := z.EncBinary()
					_ = yym1736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1719[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1737 := z.EncBinary()
					_ = yym1737
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1719 || yy2arr1719 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1738 := z.DecBinary()
	_ = yym1738
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1739 := r.ContainerType()
		if yyct1739 == codecSelferValueTypeMap1234 {
			yyl1739 := r.ReadMapStart()
			if yyl1739 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1739, d)
			}
		} else if yyct1739 == codecSelferValueTypeArray1234 {
			yyl1739 := r.ReadArrayStart()
			if yyl1739 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1739, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1740Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1740Slc
	var yyhl1740 bool = l >= 0
	for yyj1740 := 0; ; yyj1740++ {
		if yyhl1740 {
			if yyj1740 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1740Slc = r.DecodeBytes(yys1740Slc, true, true)
		yys1740 := string(yys1740Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1740 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1743 := &x.LastProbeTime
				yym1744 := z.DecBinary()
				_ = yym1744
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1743) {
				} else if yym1744 {
					z.DecBinaryUnmarshal(yyv1743)
				} else if !yym1744 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1743)
				} else {
					z.DecFallback(yyv1743, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1745 := &x.LastTransitionTime
				yym1746 := z.DecBinary()
				_ = yym1746
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1745) {
				} else if yym1746 {
					z.DecBinaryUnmarshal(yyv1745)
				} else if !yym1746 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1745)
				} else {
					z.DecFallback(yyv1745, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1740)
		} // end switch yys1740
	} // end for yyj1740
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1749 int
	var yyb1749 bool
	var yyhl1749 bool = l >= 0
	yyj1749++
	if yyhl1749 {
		yyb1749 = yyj1749 > l
	} else {
		yyb1749 = r.CheckBreak()
	}
	if yyb1749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1749++
	if yyhl1749 {
		yyb1749 = yyj1749 > l
	} else {
		yyb1749 = r.CheckBreak()
	}
	if yyb1749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1749++
	if yyhl1749 {
		yyb1749 = yyj1749 > l
	} else {
		yyb1749 = r.CheckBreak()
	}
	if yyb1749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1752 := &x.LastProbeTime
		yym1753 := z.DecBinary()
		_ = yym1753
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1752) {
		} else if yym1753 {
			z.DecBinaryUnmarshal(yyv1752)
		} else if !yym1753 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1752)
		} else {
			z.DecFallback(yyv1752, false)
		}
	}
	yyj1749++
	if yyhl1749 {
		yyb1749 = yyj1749 > l
	} else {
		yyb1749 = r.CheckBreak()
	}
	if yyb1749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1754 := &x.LastTransitionTime
		yym1755 := z.DecBinary()
		_ = yym1755
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1754) {
		} else if yym1755 {
			z.DecBinaryUnmarshal(yyv1754)
		} else if !yym1755 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1754)
		} else {
			z.DecFallback(yyv1754, false)
		}
	}
	yyj1749++
	if yyhl1749 {
		yyb1749 = yyj1749 > l
	} else {
		yyb1749 = r.CheckBreak()
	}
	if yyb1749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1749++
	if yyhl1749 {
		yyb1749 = yyj1749 > l
	} else {
		yyb1749 = r.CheckBreak()
	}
	if yyb1749 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1749++
		if yyhl1749 {
			yyb1749 = yyj1749 > l
		} else {
			yyb1749 = r.CheckBreak()
		}
		if yyb1749 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1749-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1758 := z.EncBinary()
	_ = yym1758
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1759 := z.DecBinary()
	_ = yym1759
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1760 := z.EncBinary()
	_ = yym1760
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1761 := z.DecBinary()
	_ = yym1761
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1762 := z.EncBinary()
		_ = yym1762
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1763 := !z.EncBinary()
			yy2arr1763 := z.EncBasicHandle().StructToArray
			var yyq1763 [1]bool
			_, _, _ = yysep1763, yyq1763, yy2arr1763
			const yyr1763 bool = false
			var yynn1763 int
			if yyr1763 || yy2arr1763 {
				r.EncodeArrayStart(1)
			} else {
				yynn1763 = 1
				for _, b := range yyq1763 {
					if b {
						yynn1763++
					}
				}
				r.EncodeMapStart(yynn1763)
				yynn1763 = 0
			}
			if yyr1763 || yy2arr1763 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1765 := z.EncBinary()
					_ = yym1765
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1766 := z.EncBinary()
					_ = yym1766
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1763 || yy2arr1763 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1767 := z.DecBinary()
	_ = yym1767
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1768 := r.ContainerType()
		if yyct1768 == codecSelferValueTypeMap1234 {
			yyl1768 := r.ReadMapStart()
			if yyl1768 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1768, d)
			}
		} else if yyct1768 == codecSelferValueTypeArray1234 {
			yyl1768 := r.ReadArrayStart()
			if yyl1768 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1768, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1769Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1769Slc
	var yyhl1769 bool = l >= 0
	for yyj1769 := 0; ; yyj1769++ {
		if yyhl1769 {
			if yyj1769 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1769Slc = r.DecodeBytes(yys1769Slc, true, true)
		yys1769 := string(yys1769Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1769 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1770 := &x.NodeSelectorTerms
				yym1771 := z.DecBinary()
				_ = yym1771
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1770), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1769)
		} // end switch yys1769
	} // end for yyj1769
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1772 int
	var yyb1772 bool
	var yyhl1772 bool = l >= 0
	yyj1772++
	if yyhl1772 {
		yyb1772 = yyj1772 > l
	} else {
		yyb1772 = r.CheckBreak()
	}
	if yyb1772 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1773 := &x.NodeSelectorTerms
		yym1774 := z.DecBinary()
		_ = yym1774
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1773), d)
		}
	}
	for {
		yyj1772++
		if yyhl1772 {
			yyb1772 = yyj1772 > l
		} else {
			yyb1772 = r.CheckBreak()
		}
		if yyb1772 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1772-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1775 := z.EncBinary()
		_ = yym1775
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1776 := !z.EncBinary()
			yy2arr1776 := z.EncBasicHandle().StructToArray
			var yyq1776 [1]bool
			_, _, _ = yysep1776, yyq1776, yy2arr1776
			const yyr1776 bool = false
			var yynn1776 int
			if yyr1776 || yy2arr1776 {
				r.EncodeArrayStart(1)
			} else {
				yynn1776 = 1
				for _, b := range yyq1776 {
					if b {
						yynn1776++
					}
				}
				r.EncodeMapStart(yynn1776)
				yynn1776 = 0
			}
			if yyr1776 || yy2arr1776 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1778 := z.EncBinary()
					_ = yym1778
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1779 := z.EncBinary()
					_ = yym1779
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1776 || yy2arr1776 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1780 := z.DecBinary()
	_ = yym1780
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1781 := r.ContainerType()
		if yyct1781 == codecSelferValueTypeMap1234 {
			yyl1781 := r.ReadMapStart()
			if yyl1781 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1781, d)
			}
		} else if yyct1781 == codecSelferValueTypeArray1234 {
			yyl1781 := r.ReadArrayStart()
			if yyl1781 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1781, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1782Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1782Slc
	var yyhl1782 bool = l >= 0
	for yyj1782 := 0; ; yyj1782++ {
		if yyhl1782 {
			if yyj1782 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1782Slc = r.DecodeBytes(yys1782Slc, true, true)
		yys1782 := string(yys1782Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1782 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1783 := &x.MatchExpressions
				yym1784 := z.DecBinary()
				_ = yym1784
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1783), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1782)
		} // end switch yys1782
	} // end for yyj1782
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1785 int
	var yyb1785 bool
	var yyhl1785 bool = l >= 0
	yyj1785++
	if yyhl1785 {
		yyb1785 = yyj1785 > l
	} else {
		yyb1785 = r.CheckBreak()
	}
	if yyb1785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1786 := &x.MatchExpressions
		yym1787 := z.DecBinary()
		_ = yym1787
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1786), d)
		}
	}
	for {
		yyj1785++
		if yyhl1785 {
			yyb1785 = yyj1785 > l
		} else {
			yyb1785 = r.CheckBreak()
		}
		if yyb1785 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1785-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1788 := z.EncBinary()
		_ = yym1788
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1789 := !z.EncBinary()
			yy2arr1789 := z.EncBasicHandle().StructToArray
			var yyq1789 [3]bool
			_, _, _ = yysep1789, yyq1789, yy2arr1789
			const yyr1789 bool = false
			yyq1789[2] = len(x.Values) != 0
			var yynn1789 int
			if yyr1789 || yy2arr1789 {
				r.EncodeArrayStart(3)
			} else {
				yynn1789 = 2
				for _, b := range yyq1789 {
					if b {
						yynn1789++
					}
				}
				r.EncodeMapStart(yynn1789)
				yynn1789 = 0
			}
			if yyr1789 || yy2arr1789 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1791 := z.EncBinary()
				_ = yym1791
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1792 := z.EncBinary()
				_ = yym1792
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1789 || yy2arr1789 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1789 || yy2arr1789 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1789[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1795 := z.EncBinary()
						_ = yym1795
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1789[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1796 := z.EncBinary()
						_ = yym1796
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1789 || yy2arr1789 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1797 := z.DecBinary()
	_ = yym1797
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1798 := r.ContainerType()
		if yyct1798 == codecSelferValueTypeMap1234 {
			yyl1798 := r.ReadMapStart()
			if yyl1798 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1798, d)
			}
		} else if yyct1798 == codecSelferValueTypeArray1234 {
			yyl1798 := r.ReadArrayStart()
			if yyl1798 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1798, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1799Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1799Slc
	var yyhl1799 bool = l >= 0
	for yyj1799 := 0; ; yyj1799++ {
		if yyhl1799 {
			if yyj1799 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1799Slc = r.DecodeBytes(yys1799Slc, true, true)
		yys1799 := string(yys1799Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1799 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1802 := &x.Values
				yym1803 := z.DecBinary()
				_ = yym1803
				if false {
				} else {
					z.F.DecSliceStringX(yyv1802, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1799)
		} // end switch yys1799
	} // end for yyj1799
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1804 int
	var yyb1804 bool
	var yyhl1804 bool = l >= 0
	yyj1804++
	if yyhl1804 {
		yyb1804 = yyj1804 > l
	} else {
		yyb1804 = r.CheckBreak()
	}
	if yyb1804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1804++
	if yyhl1804 {
		yyb1804 = yyj1804 > l
	} else {
		yyb1804 = r.CheckBreak()
	}
	if yyb1804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1804++
	if yyhl1804 {
		yyb1804 = yyj1804 > l
	} else {
		yyb1804 = r.CheckBreak()
	}
	if yyb1804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1807 := &x.Values
		yym1808 := z.DecBinary()
		_ = yym1808
		if false {
		} else {
			z.F.DecSliceStringX(yyv1807, false, d)
		}
	}
	for {
		yyj1804++
		if yyhl1804 {
			yyb1804 = yyj1804 > l
		} else {
			yyb1804 = r.CheckBreak()
		}
		if yyb1804 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1804-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1809 := z.EncBinary()
	_ = yym1809
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1810 := z.DecBinary()
	_ = yym1810
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1811 := z.EncBinary()
		_ = yym1811
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1812 := !z.EncBinary()
			yy2arr1812 := z.EncBasicHandle().StructToArray
			var yyq1812 [3]bool
			_, _, _ = yysep1812, yyq1812, yy2arr1812
			const yyr1812 bool = false
			yyq1812[0] = x.NodeAffinity != nil
			yyq1812[1] = x.PodAffinity != nil
			yyq1812[2] = x.PodAntiAffinity != nil
			var yynn1812 int
			if yyr1812 || yy2arr1812 {
				r.EncodeArrayStart(3)
			} else {
				yynn1812 = 0
				for _, b := range yyq1812 {
					if b {
						yynn1812++
					}
				}
				r.EncodeMapStart(yynn1812)
				yynn1812 = 0
			}
			if yyr1812 || yy2arr1812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1812[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1812[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1812 || yy2arr1812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1812[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1812[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1812 || yy2arr1812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1812[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1812[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1812 || yy2arr1812 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1816 := z.DecBinary()
	_ = yym1816
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1817 := r.ContainerType()
		if yyct1817 == codecSelferValueTypeMap1234 {
			yyl1817 := r.ReadMapStart()
			if yyl1817 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1817, d)
			}
		} else if yyct1817 == codecSelferValueTypeArray1234 {
			yyl1817 := r.ReadArrayStart()
			if yyl1817 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1817, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1818Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1818Slc
	var yyhl1818 bool = l >= 0
	for yyj1818 := 0; ; yyj1818++ {
		if yyhl1818 {
			if yyj1818 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1818Slc = r.DecodeBytes(yys1818Slc, true, true)
		yys1818 := string(yys1818Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1818 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1818)
		} // end switch yys1818
	} // end for yyj1818
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1822 int
	var yyb1822 bool
	var yyhl1822 bool = l >= 0
	yyj1822++
	if yyhl1822 {
		yyb1822 = yyj1822 > l
	} else {
		yyb1822 = r.CheckBreak()
	}
	if yyb1822 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1822++
	if yyhl1822 {
		yyb1822 = yyj1822 > l
	} else {
		yyb1822 = r.CheckBreak()
	}
	if yyb1822 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1822++
	if yyhl1822 {
		yyb1822 = yyj1822 > l
	} else {
		yyb1822 = r.CheckBreak()
	}
	if yyb1822 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1822++
		if yyhl1822 {
			yyb1822 = yyj1822 > l
		} else {
			yyb1822 = r.CheckBreak()
		}
		if yyb1822 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1822-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1826 := z.EncBinary()
		_ = yym1826
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1827 := !z.EncBinary()
			yy2arr1827 := z.EncBasicHandle().StructToArray
			var yyq1827 [2]bool
			_, _, _ = yysep1827, yyq1827, yy2arr1827
			const yyr1827 bool = false
			yyq1827[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1827[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1827 int
			if yyr1827 || yy2arr1827 {
				r.EncodeArrayStart(2)
			} else {
				yynn1827 = 0
				for _, b := range yyq1827 {
					if b {
						yynn1827++
					}
				}
				r.EncodeMapStart(yynn1827)
				yynn1827 = 0
			}
			if yyr1827 || yy2arr1827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1827[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1829 := z.EncBinary()
						_ = yym1829
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1827[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1830 := z.EncBinary()
						_ = yym1830
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1827 || yy2arr1827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1827[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1832 := z.EncBinary()
						_ = yym1832
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1827[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1833 := z.EncBinary()
						_ = yym1833
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1827 || yy2arr1827 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1834 := z.DecBinary()
	_ = yym1834
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1835 := r.ContainerType()
		if yyct1835 == codecSelferValueTypeMap1234 {
			yyl1835 := r.ReadMapStart()
			if yyl1835 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1835, d)
			}
		} else if yyct1835 == codecSelferValueTypeArray1234 {
			yyl1835 := r.ReadArrayStart()
			if yyl1835 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1835, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1836Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1836Slc
	var yyhl1836 bool = l >= 0
	for yyj1836 := 0; ; yyj1836++ {
		if yyhl1836 {
			if yyj1836 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1836Slc = r.DecodeBytes(yys1836Slc, true, true)
		yys1836 := string(yys1836Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1836 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1837 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1838 := z.DecBinary()
				_ = yym1838
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1837), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1839 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1840 := z.DecBinary()
				_ = yym1840
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1839), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1836)
		} // end switch yys1836
	} // end for yyj1836
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1841 int
	var yyb1841 bool
	var yyhl1841 bool = l >= 0
	yyj1841++
	if yyhl1841 {
		yyb1841 = yyj1841 > l
	} else {
		yyb1841 = r.CheckBreak()
	}
	if yyb1841 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1842 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1843 := z.DecBinary()
		_ = yym1843
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1842), d)
		}
	}
	yyj1841++
	if yyhl1841 {
		yyb1841 = yyj1841 > l
	} else {
		yyb1841 = r.CheckBreak()
	}
	if yyb1841 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1844 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1845 := z.DecBinary()
		_ = yym1845
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1844), d)
		}
	}
	for {
		yyj1841++
		if yyhl1841 {
			yyb1841 = yyj1841 > l
		} else {
			yyb1841 = r.CheckBreak()
		}
		if yyb1841 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1841-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1846 := z.EncBinary()
		_ = yym1846
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1847 := !z.EncBinary()
			yy2arr1847 := z.EncBasicHandle().StructToArray
			var yyq1847 [2]bool
			_, _, _ = yysep1847, yyq1847, yy2arr1847
			const yyr1847 bool = false
			yyq1847[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1847[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1847 int
			if yyr1847 || yy2arr1847 {
				r.EncodeArrayStart(2)
			} else {
				yynn1847 = 0
				for _, b := range yyq1847 {
					if b {
						yynn1847++
					}
				}
				r.EncodeMapStart(yynn1847)
				yynn1847 = 0
			}
			if yyr1847 || yy2arr1847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1847[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1849 := z.EncBinary()
						_ = yym1849
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1847[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1850 := z.EncBinary()
						_ = yym1850
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1847 || yy2arr1847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1847[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1852 := z.EncBinary()
						_ = yym1852
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1847[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1853 := z.EncBinary()
						_ = yym1853
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1847 || yy2arr1847 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1854 := z.DecBinary()
	_ = yym1854
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1855 := r.ContainerType()
		if yyct1855 == codecSelferValueTypeMap1234 {
			yyl1855 := r.ReadMapStart()
			if yyl1855 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1855, d)
			}
		} else if yyct1855 == codecSelferValueTypeArray1234 {
			yyl1855 := r.ReadArrayStart()
			if yyl1855 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1855, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1856Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1856Slc
	var yyhl1856 bool = l >= 0
	for yyj1856 := 0; ; yyj1856++ {
		if yyhl1856 {
			if yyj1856 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1856Slc = r.DecodeBytes(yys1856Slc, true, true)
		yys1856 := string(yys1856Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1856 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1857 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1858 := z.DecBinary()
				_ = yym1858
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1857), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1859 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1860 := z.DecBinary()
				_ = yym1860
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1859), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1856)
		} // end switch yys1856
	} // end for yyj1856
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1861 int
	var yyb1861 bool
	var yyhl1861 bool = l >= 0
	yyj1861++
	if yyhl1861 {
		yyb1861 = yyj1861 > l
	} else {
		yyb1861 = r.CheckBreak()
	}
	if yyb1861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1862 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1863 := z.DecBinary()
		_ = yym1863
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1862), d)
		}
	}
	yyj1861++
	if yyhl1861 {
		yyb1861 = yyj1861 > l
	} else {
		yyb1861 = r.CheckBreak()
	}
	if yyb1861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1864 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1865 := z.DecBinary()
		_ = yym1865
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1864), d)
		}
	}
	for {
		yyj1861++
		if yyhl1861 {
			yyb1861 = yyj1861 > l
		} else {
			yyb1861 = r.CheckBreak()
		}
		if yyb1861 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1861-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1866 := z.EncBinary()
		_ = yym1866
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1867 := !z.EncBinary()
			yy2arr1867 := z.EncBasicHandle().StructToArray
			var yyq1867 [2]bool
			_, _, _ = yysep1867, yyq1867, yy2arr1867
			const yyr1867 bool = false
			var yynn1867 int
			if yyr1867 || yy2arr1867 {
				r.EncodeArrayStart(2)
			} else {
				yynn1867 = 2
				for _, b := range yyq1867 {
					if b {
						yynn1867++
					}
				}
				r.EncodeMapStart(yynn1867)
				yynn1867 = 0
			}
			if yyr1867 || yy2arr1867 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1869 := z.EncBinary()
				_ = yym1869
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1870 := z.EncBinary()
				_ = yym1870
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1867 || yy2arr1867 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1872 := &x.PodAffinityTerm
				yy1872.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1873 := &x.PodAffinityTerm
				yy1873.CodecEncodeSelf(e)
			}
			if yyr1867 || yy2arr1867 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1874 := z.DecBinary()
	_ = yym1874
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1875 := r.ContainerType()
		if yyct1875 == codecSelferValueTypeMap1234 {
			yyl1875 := r.ReadMapStart()
			if yyl1875 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1875, d)
			}
		} else if yyct1875 == codecSelferValueTypeArray1234 {
			yyl1875 := r.ReadArrayStart()
			if yyl1875 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1875, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1876Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1876Slc
	var yyhl1876 bool = l >= 0
	for yyj1876 := 0; ; yyj1876++ {
		if yyhl1876 {
			if yyj1876 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1876Slc = r.DecodeBytes(yys1876Slc, true, true)
		yys1876 := string(yys1876Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1876 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1878 := &x.PodAffinityTerm
				yyv1878.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1876)
		} // end switch yys1876
	} // end for yyj1876
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1879 int
	var yyb1879 bool
	var yyhl1879 bool = l >= 0
	yyj1879++
	if yyhl1879 {
		yyb1879 = yyj1879 > l
	} else {
		yyb1879 = r.CheckBreak()
	}
	if yyb1879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1879++
	if yyhl1879 {
		yyb1879 = yyj1879 > l
	} else {
		yyb1879 = r.CheckBreak()
	}
	if yyb1879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1881 := &x.PodAffinityTerm
		yyv1881.CodecDecodeSelf(d)
	}
	for {
		yyj1879++
		if yyhl1879 {
			yyb1879 = yyj1879 > l
		} else {
			yyb1879 = r.CheckBreak()
		}
		if yyb1879 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1879-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1882 := z.EncBinary()
		_ = yym1882
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1883 := !z.EncBinary()
			yy2arr1883 := z.EncBasicHandle().StructToArray
			var yyq1883 [3]bool
			_, _, _ = yysep1883, yyq1883, yy2arr1883
			const yyr1883 bool = false
			yyq1883[0] = x.LabelSelector != nil
			yyq1883[2] = x.TopologyKey != ""
			var yynn1883 int
			if yyr1883 || yy2arr1883 {
				r.EncodeArrayStart(3)
			} else {
				yynn1883 = 1
				for _, b := range yyq1883 {
					if b {
						yynn1883++
					}
				}
				r.EncodeMapStart(yynn1883)
				yynn1883 = 0
			}
			if yyr1883 || yy2arr1883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1883[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1885 := z.EncBinary()
						_ = yym1885
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1883[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1886 := z.EncBinary()
						_ = yym1886
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1883 || yy2arr1883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1888 := z.EncBinary()
					_ = yym1888
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1889 := z.EncBinary()
					_ = yym1889
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1883 || yy2arr1883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1883[2] {
					yym1891 := z.EncBinary()
					_ = yym1891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1883[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1892 := z.EncBinary()
					_ = yym1892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1883 || yy2arr1883 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1893 := z.DecBinary()
	_ = yym1893
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1894 := r.ContainerType()
		if yyct1894 == codecSelferValueTypeMap1234 {
			yyl1894 := r.ReadMapStart()
			if yyl1894 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1894, d)
			}
		} else if yyct1894 == codecSelferValueTypeArray1234 {
			yyl1894 := r.ReadArrayStart()
			if yyl1894 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1894, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1895Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1895Slc
	var yyhl1895 bool = l >= 0
	for yyj1895 := 0; ; yyj1895++ {
		if yyhl1895 {
			if yyj1895 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1895Slc = r.DecodeBytes(yys1895Slc, true, true)
		yys1895 := string(yys1895Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1895 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym1897 := z.DecBinary()
				_ = yym1897
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1898 := &x.Namespaces
				yym1899 := z.DecBinary()
				_ = yym1899
				if false {
				} else {
					z.F.DecSliceStringX(yyv1898, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1895)
		} // end switch yys1895
	} // end for yyj1895
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1901 int
	var yyb1901 bool
	var yyhl1901 bool = l >= 0
	yyj1901++
	if yyhl1901 {
		yyb1901 = yyj1901 > l
	} else {
		yyb1901 = r.CheckBreak()
	}
	if yyb1901 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym1903 := z.DecBinary()
		_ = yym1903
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1901++
	if yyhl1901 {
		yyb1901 = yyj1901 > l
	} else {
		yyb1901 = r.CheckBreak()
	}
	if yyb1901 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1904 := &x.Namespaces
		yym1905 := z.DecBinary()
		_ = yym1905
		if false {
		} else {
			z.F.DecSliceStringX(yyv1904, false, d)
		}
	}
	yyj1901++
	if yyhl1901 {
		yyb1901 = yyj1901 > l
	} else {
		yyb1901 = r.CheckBreak()
	}
	if yyb1901 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1901++
		if yyhl1901 {
			yyb1901 = yyj1901 > l
		} else {
			yyb1901 = r.CheckBreak()
		}
		if yyb1901 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1901-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1907 := z.EncBinary()
		_ = yym1907
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1908 := !z.EncBinary()
			yy2arr1908 := z.EncBasicHandle().StructToArray
			var yyq1908 [2]bool
			_, _, _ = yysep1908, yyq1908, yy2arr1908
			const yyr1908 bool = false
			yyq1908[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1908[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1908 int
			if yyr1908 || yy2arr1908 {
				r.EncodeArrayStart(2)
			} else {
				yynn1908 = 0
				for _, b := range yyq1908 {
					if b {
						yynn1908++
					}
				}
				r.EncodeMapStart(yynn1908)
				yynn1908 = 0
			}
			if yyr1908 || yy2arr1908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1908[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1908[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1908 || yy2arr1908 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1908[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1911 := z.EncBinary()
						_ = yym1911
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1908[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1912 := z.EncBinary()
						_ = yym1912
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1908 || yy2arr1908 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1913 := z.DecBinary()
	_ = yym1913
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1914 := r.ContainerType()
		if yyct1914 == codecSelferValueTypeMap1234 {
			yyl1914 := r.ReadMapStart()
			if yyl1914 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1914, d)
			}
		} else if yyct1914 == codecSelferValueTypeArray1234 {
			yyl1914 := r.ReadArrayStart()
			if yyl1914 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1914, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1915Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1915Slc
	var yyhl1915 bool = l >= 0
	for yyj1915 := 0; ; yyj1915++ {
		if yyhl1915 {
			if yyj1915 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1915Slc = r.DecodeBytes(yys1915Slc, true, true)
		yys1915 := string(yys1915Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1915 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1917 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1918 := z.DecBinary()
				_ = yym1918
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1917), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1915)
		} // end switch yys1915
	} // end for yyj1915
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1919 int
	var yyb1919 bool
	var yyhl1919 bool = l >= 0
	yyj1919++
	if yyhl1919 {
		yyb1919 = yyj1919 > l
	} else {
		yyb1919 = r.CheckBreak()
	}
	if yyb1919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1919++
	if yyhl1919 {
		yyb1919 = yyj1919 > l
	} else {
		yyb1919 = r.CheckBreak()
	}
	if yyb1919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1921 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1922 := z.DecBinary()
		_ = yym1922
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1921), d)
		}
	}
	for {
		yyj1919++
		if yyhl1919 {
			yyb1919 = yyj1919 > l
		} else {
			yyb1919 = r.CheckBreak()
		}
		if yyb1919 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1919-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1923 := z.EncBinary()
		_ = yym1923
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1924 := !z.EncBinary()
			yy2arr1924 := z.EncBasicHandle().StructToArray
			var yyq1924 [2]bool
			_, _, _ = yysep1924, yyq1924, yy2arr1924
			const yyr1924 bool = false
			var yynn1924 int
			if yyr1924 || yy2arr1924 {
				r.EncodeArrayStart(2)
			} else {
				yynn1924 = 2
				for _, b := range yyq1924 {
					if b {
						yynn1924++
					}
				}
				r.EncodeMapStart(yynn1924)
				yynn1924 = 0
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1926 := z.EncBinary()
				_ = yym1926
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1927 := z.EncBinary()
				_ = yym1927
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1929 := &x.Preference
				yy1929.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1930 := &x.Preference
				yy1930.CodecEncodeSelf(e)
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1931 := z.DecBinary()
	_ = yym1931
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1932 := r.ContainerType()
		if yyct1932 == codecSelferValueTypeMap1234 {
			yyl1932 := r.ReadMapStart()
			if yyl1932 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1932, d)
			}
		} else if yyct1932 == codecSelferValueTypeArray1234 {
			yyl1932 := r.ReadArrayStart()
			if yyl1932 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1932, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1933Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1933Slc
	var yyhl1933 bool = l >= 0
	for yyj1933 := 0; ; yyj1933++ {
		if yyhl1933 {
			if yyj1933 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1933Slc = r.DecodeBytes(yys1933Slc, true, true)
		yys1933 := string(yys1933Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1933 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1935 := &x.Preference
				yyv1935.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1933)
		} // end switch yys1933
	} // end for yyj1933
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1936 int
	var yyb1936 bool
	var yyhl1936 bool = l >= 0
	yyj1936++
	if yyhl1936 {
		yyb1936 = yyj1936 > l
	} else {
		yyb1936 = r.CheckBreak()
	}
	if yyb1936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1936++
	if yyhl1936 {
		yyb1936 = yyj1936 > l
	} else {
		yyb1936 = r.CheckBreak()
	}
	if yyb1936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1938 := &x.Preference
		yyv1938.CodecDecodeSelf(d)
	}
	for {
		yyj1936++
		if yyhl1936 {
			yyb1936 = yyj1936 > l
		} else {
			yyb1936 = r.CheckBreak()
		}
		if yyb1936 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1936-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1939 := z.EncBinary()
		_ = yym1939
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1940 := !z.EncBinary()
			yy2arr1940 := z.EncBasicHandle().StructToArray
			var yyq1940 [3]bool
			_, _, _ = yysep1940, yyq1940, yy2arr1940
			const yyr1940 bool = false
			yyq1940[1] = x.Value != ""
			var yynn1940 int
			if yyr1940 || yy2arr1940 {
				r.EncodeArrayStart(3)
			} else {
				yynn1940 = 2
				for _, b := range yyq1940 {
					if b {
						yynn1940++
					}
				}
				r.EncodeMapStart(yynn1940)
				yynn1940 = 0
			}
			if yyr1940 || yy2arr1940 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1942 := z.EncBinary()
				_ = yym1942
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1943 := z.EncBinary()
				_ = yym1943
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1940 || yy2arr1940 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1940[1] {
					yym1945 := z.EncBinary()
					_ = yym1945
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1940[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1946 := z.EncBinary()
					_ = yym1946
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1940 || yy2arr1940 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr1940 || yy2arr1940 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1948 := z.DecBinary()
	_ = yym1948
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1949 := r.ContainerType()
		if yyct1949 == codecSelferValueTypeMap1234 {
			yyl1949 := r.ReadMapStart()
			if yyl1949 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1949, d)
			}
		} else if yyct1949 == codecSelferValueTypeArray1234 {
			yyl1949 := r.ReadArrayStart()
			if yyl1949 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1949, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1950Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1950Slc
	var yyhl1950 bool = l >= 0
	for yyj1950 := 0; ; yyj1950++ {
		if yyhl1950 {
			if yyj1950 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1950Slc = r.DecodeBytes(yys1950Slc, true, true)
		yys1950 := string(yys1950Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1950 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1950)
		} // end switch yys1950
	} // end for yyj1950
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1954 int
	var yyb1954 bool
	var yyhl1954 bool = l >= 0
	yyj1954++
	if yyhl1954 {
		yyb1954 = yyj1954 > l
	} else {
		yyb1954 = r.CheckBreak()
	}
	if yyb1954 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1954++
	if yyhl1954 {
		yyb1954 = yyj1954 > l
	} else {
		yyb1954 = r.CheckBreak()
	}
	if yyb1954 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1954++
	if yyhl1954 {
		yyb1954 = yyj1954 > l
	} else {
		yyb1954 = r.CheckBreak()
	}
	if yyb1954 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1954++
		if yyhl1954 {
			yyb1954 = yyj1954 > l
		} else {
			yyb1954 = r.CheckBreak()
		}
		if yyb1954 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1954-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1958 := z.EncBinary()
	_ = yym1958
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1959 := z.DecBinary()
	_ = yym1959
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1960 := z.EncBinary()
		_ = yym1960
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1961 := !z.EncBinary()
			yy2arr1961 := z.EncBasicHandle().StructToArray
			var yyq1961 [4]bool
			_, _, _ = yysep1961, yyq1961, yy2arr1961
			const yyr1961 bool = false
			yyq1961[0] = x.Key != ""
			yyq1961[1] = x.Operator != ""
			yyq1961[2] = x.Value != ""
			yyq1961[3] = x.Effect != ""
			var yynn1961 int
			if yyr1961 || yy2arr1961 {
				r.EncodeArrayStart(4)
			} else {
				yynn1961 = 0
				for _, b := range yyq1961 {
					if b {
						yynn1961++
					}
				}
				r.EncodeMapStart(yynn1961)
				yynn1961 = 0
			}
			if yyr1961 || yy2arr1961 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1961[0] {
					yym1963 := z.EncBinary()
					_ = yym1963
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1961[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1964 := z.EncBinary()
					_ = yym1964
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr1961 || yy2arr1961 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1961[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1961[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr1961 || yy2arr1961 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1961[2] {
					yym1967 := z.EncBinary()
					_ = yym1967
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1961[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1968 := z.EncBinary()
					_ = yym1968
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1961 || yy2arr1961 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1961[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1961[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr1961 || yy2arr1961 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1970 := z.DecBinary()
	_ = yym1970
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1971 := r.ContainerType()
		if yyct1971 == codecSelferValueTypeMap1234 {
			yyl1971 := r.ReadMapStart()
			if yyl1971 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1971, d)
			}
		} else if yyct1971 == codecSelferValueTypeArray1234 {
			yyl1971 := r.ReadArrayStart()
			if yyl1971 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1971, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1972Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1972Slc
	var yyhl1972 bool = l >= 0
	for yyj1972 := 0; ; yyj1972++ {
		if yyhl1972 {
			if yyj1972 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1972Slc = r.DecodeBytes(yys1972Slc, true, true)
		yys1972 := string(yys1972Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1972 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1972)
		} // end switch yys1972
	} // end for yyj1972
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1977 int
	var yyb1977 bool
	var yyhl1977 bool = l >= 0
	yyj1977++
	if yyhl1977 {
		yyb1977 = yyj1977 > l
	} else {
		yyb1977 = r.CheckBreak()
	}
	if yyb1977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1977++
	if yyhl1977 {
		yyb1977 = yyj1977 > l
	} else {
		yyb1977 = r.CheckBreak()
	}
	if yyb1977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj1977++
	if yyhl1977 {
		yyb1977 = yyj1977 > l
	} else {
		yyb1977 = r.CheckBreak()
	}
	if yyb1977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1977++
	if yyhl1977 {
		yyb1977 = yyj1977 > l
	} else {
		yyb1977 = r.CheckBreak()
	}
	if yyb1977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1977++
		if yyhl1977 {
			yyb1977 = yyj1977 > l
		} else {
			yyb1977 = r.CheckBreak()
		}
		if yyb1977 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1977-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1982 := z.EncBinary()
	_ = yym1982
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1983 := z.DecBinary()
	_ = yym1983
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1984 := z.EncBinary()
		_ = yym1984
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1985 := !z.EncBinary()
			yy2arr1985 := z.EncBasicHandle().StructToArray
			var yyq1985 [17]bool
			_, _, _ = yysep1985, yyq1985, yy2arr1985
			const yyr1985 bool = false
			yyq1985[0] = len(x.Volumes) != 0
			yyq1985[2] = x.RestartPolicy != ""
			yyq1985[3] = x.TerminationGracePeriodSeconds != nil
			yyq1985[4] = x.ActiveDeadlineSeconds != nil
			yyq1985[5] = x.DNSPolicy != ""
			yyq1985[6] = len(x.NodeSelector) != 0
			yyq1985[7] = x.ServiceAccountName != ""
			yyq1985[8] = x.DeprecatedServiceAccount != ""
			yyq1985[9] = x.NodeName != ""
			yyq1985[10] = x.HostNetwork != false
			yyq1985[11] = x.HostPID != false
			yyq1985[12] = x.HostIPC != false
			yyq1985[13] = x.SecurityContext != nil
			yyq1985[14] = len(x.ImagePullSecrets) != 0
			yyq1985[15] = x.Hostname != ""
			yyq1985[16] = x.Subdomain != ""
			var yynn1985 int
			if yyr1985 || yy2arr1985 {
				r.EncodeArrayStart(17)
			} else {
				yynn1985 = 1
				for _, b := range yyq1985 {
					if b {
						yynn1985++
					}
				}
				r.EncodeMapStart(yynn1985)
				yynn1985 = 0
			}
			if yyr1985 || yy2arr1985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1985[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1987 := z.EncBinary()
						_ = yym1987
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1985[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1988 := z.EncBinary()
						_ = yym1988
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1985 || yy2arr1985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1990 := z.EncBinary()
					_ = yym1990
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1991 := z.EncBinary()
					_ = yym1991
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1985 || yy2arr1985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1985[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1985[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1985 || yy2arr1985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1985[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1994 := *x.TerminationGracePeriodSeconds
						yym1995 := z.EncBinary()
						_ = yym1995
						if false {
						} else {
							r.EncodeInt(int64(yy1994))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1985[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1996 := *x.TerminationGracePeriodSeconds
						yym1997 := z.EncBinary()
						_ = yym1997
						if false {
						} else {
							r.EncodeInt(int64(yy1996))
						}
					}
				}
			}
			if yyr1985 || yy2arr1985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1985[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1999 := *x.ActiveDeadlineSeconds
						yym2000 := z.EncBinary()
						_ = yym2000
						if false {
						} else {
							r.EncodeInt(int64(yy1999))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1985[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2001 := *x.ActiveDeadlineSeconds
						yym2002 := z.EncBinary()
						_ = yym2002
						if false {
						} else {
							r.EncodeInt(int64(yy2001))
						}
					}
				}
			}
			if yyr1985 || yy2arr1985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1985[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1985[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1985 || yy2arr1985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1985[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2005 := z.EncBinary()
						_ = yym2005
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1985[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2006 := z.EncBinary()
						_ = yym2006
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1985 || yy2arr1985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1985[7] {
					yym2008 := z.EncBinary()
					_ = yym2008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1985[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2009 := z.EncBinary()
					_ = yym2009
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr1985 || yy2arr1985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1985[8] {
					yym2011 := z.EncBinary()
					_ = yym2011
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1985[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2012 := z.EncBinary()
					_ = yym2012
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr1985 || yy2arr1985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1985[9] {
					yym2014 := z.EncBinary()
					_ = yym2014
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1985[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2015 := z.EncBinary()
					_ = yym2015
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1985 || yy2arr1985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1985[10] {
					yym2017 := z.EncBinary()
					_ = yym2017
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1985[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2018 := z.EncBinary()
					_ = yym2018
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1985 || yy2arr1985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1985[11] {
					yym2020 := z.EncBinary()
					_ = yym2020
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1985[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2021 := z.EncBinary()
					_ = yym2021
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1985 || yy2arr1985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1985[12] {
					yym2023 := z.EncBinary()
					_ = yym2023
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1985[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2024 := z.EncBinary()
					_ = yym2024
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1985 || yy2arr1985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1985[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1985[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1985 || yy2arr1985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1985[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2027 := z.EncBinary()
						_ = yym2027
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1985[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2028 := z.EncBinary()
						_ = yym2028
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1985 || yy2arr1985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1985[15] {
					yym2030 := z.EncBinary()
					_ = yym2030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1985[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2031 := z.EncBinary()
					_ = yym2031
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr1985 || yy2arr1985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1985[16] {
					yym2033 := z.EncBinary()
					_ = yym2033
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1985[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2034 := z.EncBinary()
					_ = yym2034
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr1985 || yy2arr1985 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2035 := z.DecBinary()
	_ = yym2035
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2036 := r.ContainerType()
		if yyct2036 == codecSelferValueTypeMap1234 {
			yyl2036 := r.ReadMapStart()
			if yyl2036 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2036, d)
			}
		} else if yyct2036 == codecSelferValueTypeArray1234 {
			yyl2036 := r.ReadArrayStart()
			if yyl2036 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2036, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2037Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2037Slc
	var yyhl2037 bool = l >= 0
	for yyj2037 := 0; ; yyj2037++ {
		if yyhl2037 {
			if yyj2037 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2037Slc = r.DecodeBytes(yys2037Slc, true, true)
		yys2037 := string(yys2037Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2037 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv2038 := &x.Volumes
				yym2039 := z.DecBinary()
				_ = yym2039
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv2038), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv2040 := &x.Containers
				yym2041 := z.DecBinary()
				_ = yym2041
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv2040), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym2044 := z.DecBinary()
				_ = yym2044
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym2046 := z.DecBinary()
				_ = yym2046
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv2048 := &x.NodeSelector
				yym2049 := z.DecBinary()
				_ = yym2049
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2048, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2057 := &x.ImagePullSecrets
				yym2058 := z.DecBinary()
				_ = yym2058
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2057), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2037)
		} // end switch yys2037
	} // end for yyj2037
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2061 int
	var yyb2061 bool
	var yyhl2061 bool = l >= 0
	yyj2061++
	if yyhl2061 {
		yyb2061 = yyj2061 > l
	} else {
		yyb2061 = r.CheckBreak()
	}
	if yyb2061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2062 := &x.Volumes
		yym2063 := z.DecBinary()
		_ = yym2063
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2062), d)
		}
	}
	yyj2061++
	if yyhl2061 {
		yyb2061 = yyj2061 > l
	} else {
		yyb2061 = r.CheckBreak()
	}
	if yyb2061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2064 := &x.Containers
		yym2065 := z.DecBinary()
		_ = yym2065
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2064), d)
		}
	}
	yyj2061++
	if yyhl2061 {
		yyb2061 = yyj2061 > l
	} else {
		yyb2061 = r.CheckBreak()
	}
	if yyb2061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2061++
	if yyhl2061 {
		yyb2061 = yyj2061 > l
	} else {
		yyb2061 = r.CheckBreak()
	}
	if yyb2061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2068 := z.DecBinary()
		_ = yym2068
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2061++
	if yyhl2061 {
		yyb2061 = yyj2061 > l
	} else {
		yyb2061 = r.CheckBreak()
	}
	if yyb2061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2070 := z.DecBinary()
		_ = yym2070
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2061++
	if yyhl2061 {
		yyb2061 = yyj2061 > l
	} else {
		yyb2061 = r.CheckBreak()
	}
	if yyb2061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2061++
	if yyhl2061 {
		yyb2061 = yyj2061 > l
	} else {
		yyb2061 = r.CheckBreak()
	}
	if yyb2061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2072 := &x.NodeSelector
		yym2073 := z.DecBinary()
		_ = yym2073
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2072, false, d)
		}
	}
	yyj2061++
	if yyhl2061 {
		yyb2061 = yyj2061 > l
	} else {
		yyb2061 = r.CheckBreak()
	}
	if yyb2061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2061++
	if yyhl2061 {
		yyb2061 = yyj2061 > l
	} else {
		yyb2061 = r.CheckBreak()
	}
	if yyb2061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj2061++
	if yyhl2061 {
		yyb2061 = yyj2061 > l
	} else {
		yyb2061 = r.CheckBreak()
	}
	if yyb2061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2061++
	if yyhl2061 {
		yyb2061 = yyj2061 > l
	} else {
		yyb2061 = r.CheckBreak()
	}
	if yyb2061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2061++
	if yyhl2061 {
		yyb2061 = yyj2061 > l
	} else {
		yyb2061 = r.CheckBreak()
	}
	if yyb2061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2061++
	if yyhl2061 {
		yyb2061 = yyj2061 > l
	} else {
		yyb2061 = r.CheckBreak()
	}
	if yyb2061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2061++
	if yyhl2061 {
		yyb2061 = yyj2061 > l
	} else {
		yyb2061 = r.CheckBreak()
	}
	if yyb2061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2061++
	if yyhl2061 {
		yyb2061 = yyj2061 > l
	} else {
		yyb2061 = r.CheckBreak()
	}
	if yyb2061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2081 := &x.ImagePullSecrets
		yym2082 := z.DecBinary()
		_ = yym2082
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2081), d)
		}
	}
	yyj2061++
	if yyhl2061 {
		yyb2061 = yyj2061 > l
	} else {
		yyb2061 = r.CheckBreak()
	}
	if yyb2061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2061++
	if yyhl2061 {
		yyb2061 = yyj2061 > l
	} else {
		yyb2061 = r.CheckBreak()
	}
	if yyb2061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj2061++
		if yyhl2061 {
			yyb2061 = yyj2061 > l
		} else {
			yyb2061 = r.CheckBreak()
		}
		if yyb2061 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2061-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2085 := z.EncBinary()
		_ = yym2085
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2086 := !z.EncBinary()
			yy2arr2086 := z.EncBasicHandle().StructToArray
			var yyq2086 [5]bool
			_, _, _ = yysep2086, yyq2086, yy2arr2086
			const yyr2086 bool = false
			yyq2086[0] = x.SELinuxOptions != nil
			yyq2086[1] = x.RunAsUser != nil
			yyq2086[2] = x.RunAsNonRoot != nil
			yyq2086[3] = len(x.SupplementalGroups) != 0
			yyq2086[4] = x.FSGroup != nil
			var yynn2086 int
			if yyr2086 || yy2arr2086 {
				r.EncodeArrayStart(5)
			} else {
				yynn2086 = 0
				for _, b := range yyq2086 {
					if b {
						yynn2086++
					}
				}
				r.EncodeMapStart(yynn2086)
				yynn2086 = 0
			}
			if yyr2086 || yy2arr2086 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2086[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2086[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2086 || yy2arr2086 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2086[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2089 := *x.RunAsUser
						yym2090 := z.EncBinary()
						_ = yym2090
						if false {
						} else {
							r.EncodeInt(int64(yy2089))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2086[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2091 := *x.RunAsUser
						yym2092 := z.EncBinary()
						_ = yym2092
						if false {
						} else {
							r.EncodeInt(int64(yy2091))
						}
					}
				}
			}
			if yyr2086 || yy2arr2086 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2086[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2094 := *x.RunAsNonRoot
						yym2095 := z.EncBinary()
						_ = yym2095
						if false {
						} else {
							r.EncodeBool(bool(yy2094))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2086[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2096 := *x.RunAsNonRoot
						yym2097 := z.EncBinary()
						_ = yym2097
						if false {
						} else {
							r.EncodeBool(bool(yy2096))
						}
					}
				}
			}
			if yyr2086 || yy2arr2086 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2086[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2099 := z.EncBinary()
						_ = yym2099
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2086[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2100 := z.EncBinary()
						_ = yym2100
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2086 || yy2arr2086 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2086[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2102 := *x.FSGroup
						yym2103 := z.EncBinary()
						_ = yym2103
						if false {
						} else {
							r.EncodeInt(int64(yy2102))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2086[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2104 := *x.FSGroup
						yym2105 := z.EncBinary()
						_ = yym2105
						if false {
						} else {
							r.EncodeInt(int64(yy2104))
						}
					}
				}
			}
			if yyr2086 || yy2arr2086 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2106 := z.DecBinary()
	_ = yym2106
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2107 := r.ContainerType()
		if yyct2107 == codecSelferValueTypeMap1234 {
			yyl2107 := r.ReadMapStart()
			if yyl2107 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2107, d)
			}
		} else if yyct2107 == codecSelferValueTypeArray1234 {
			yyl2107 := r.ReadArrayStart()
			if yyl2107 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2107, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2108Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2108Slc
	var yyhl2108 bool = l >= 0
	for yyj2108 := 0; ; yyj2108++ {
		if yyhl2108 {
			if yyj2108 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2108Slc = r.DecodeBytes(yys2108Slc, true, true)
		yys2108 := string(yys2108Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2108 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2111 := z.DecBinary()
				_ = yym2111
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2113 := z.DecBinary()
				_ = yym2113
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2114 := &x.SupplementalGroups
				yym2115 := z.DecBinary()
				_ = yym2115
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2114, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2117 := z.DecBinary()
				_ = yym2117
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2108)
		} // end switch yys2108
	} // end for yyj2108
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2118 int
	var yyb2118 bool
	var yyhl2118 bool = l >= 0
	yyj2118++
	if yyhl2118 {
		yyb2118 = yyj2118 > l
	} else {
		yyb2118 = r.CheckBreak()
	}
	if yyb2118 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2118++
	if yyhl2118 {
		yyb2118 = yyj2118 > l
	} else {
		yyb2118 = r.CheckBreak()
	}
	if yyb2118 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2121 := z.DecBinary()
		_ = yym2121
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2118++
	if yyhl2118 {
		yyb2118 = yyj2118 > l
	} else {
		yyb2118 = r.CheckBreak()
	}
	if yyb2118 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2123 := z.DecBinary()
		_ = yym2123
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2118++
	if yyhl2118 {
		yyb2118 = yyj2118 > l
	} else {
		yyb2118 = r.CheckBreak()
	}
	if yyb2118 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2124 := &x.SupplementalGroups
		yym2125 := z.DecBinary()
		_ = yym2125
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2124, false, d)
		}
	}
	yyj2118++
	if yyhl2118 {
		yyb2118 = yyj2118 > l
	} else {
		yyb2118 = r.CheckBreak()
	}
	if yyb2118 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2127 := z.DecBinary()
		_ = yym2127
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2118++
		if yyhl2118 {
			yyb2118 = yyj2118 > l
		} else {
			yyb2118 = r.CheckBreak()
		}
		if yyb2118 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2118-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2128 := z.EncBinary()
		_ = yym2128
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2129 := !z.EncBinary()
			yy2arr2129 := z.EncBasicHandle().StructToArray
			var yyq2129 [8]bool
			_, _, _ = yysep2129, yyq2129, yy2arr2129
			const yyr2129 bool = false
			yyq2129[0] = x.Phase != ""
			yyq2129[1] = len(x.Conditions) != 0
			yyq2129[2] = x.Message != ""
			yyq2129[3] = x.Reason != ""
			yyq2129[4] = x.HostIP != ""
			yyq2129[5] = x.PodIP != ""
			yyq2129[6] = x.StartTime != nil
			yyq2129[7] = len(x.ContainerStatuses) != 0
			var yynn2129 int
			if yyr2129 || yy2arr2129 {
				r.EncodeArrayStart(8)
			} else {
				yynn2129 = 0
				for _, b := range yyq2129 {
					if b {
						yynn2129++
					}
				}
				r.EncodeMapStart(yynn2129)
				yynn2129 = 0
			}
			if yyr2129 || yy2arr2129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2129[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2129[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2129 || yy2arr2129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2129[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2132 := z.EncBinary()
						_ = yym2132
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2129[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2133 := z.EncBinary()
						_ = yym2133
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2129 || yy2arr2129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2129[2] {
					yym2135 := z.EncBinary()
					_ = yym2135
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2129[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2136 := z.EncBinary()
					_ = yym2136
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2129 || yy2arr2129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2129[3] {
					yym2138 := z.EncBinary()
					_ = yym2138
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2129[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2139 := z.EncBinary()
					_ = yym2139
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2129 || yy2arr2129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2129[4] {
					yym2141 := z.EncBinary()
					_ = yym2141
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2129[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2142 := z.EncBinary()
					_ = yym2142
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2129 || yy2arr2129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2129[5] {
					yym2144 := z.EncBinary()
					_ = yym2144
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2129[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2145 := z.EncBinary()
					_ = yym2145
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2129 || yy2arr2129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2129[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2147 := z.EncBinary()
						_ = yym2147
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2147 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2147 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2129[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2148 := z.EncBinary()
						_ = yym2148
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2148 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2148 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2129 || yy2arr2129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2129[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2150 := z.EncBinary()
						_ = yym2150
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2129[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2151 := z.EncBinary()
						_ = yym2151
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2129 || yy2arr2129 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2152 := z.DecBinary()
	_ = yym2152
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2153 := r.ContainerType()
		if yyct2153 == codecSelferValueTypeMap1234 {
			yyl2153 := r.ReadMapStart()
			if yyl2153 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2153, d)
			}
		} else if yyct2153 == codecSelferValueTypeArray1234 {
			yyl2153 := r.ReadArrayStart()
			if yyl2153 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2153, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2154Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2154Slc
	var yyhl2154 bool = l >= 0
	for yyj2154 := 0; ; yyj2154++ {
		if yyhl2154 {
			if yyj2154 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2154Slc = r.DecodeBytes(yys2154Slc, true, true)
		yys2154 := string(yys2154Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2154 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2156 := &x.Conditions
				yym2157 := z.DecBinary()
				_ = yym2157
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2156), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2163 := z.DecBinary()
				_ = yym2163
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2163 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2163 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2164 := &x.ContainerStatuses
				yym2165 := z.DecBinary()
				_ = yym2165
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2164), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2154)
		} // end switch yys2154
	} // end for yyj2154
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2166 int
	var yyb2166 bool
	var yyhl2166 bool = l >= 0
	yyj2166++
	if yyhl2166 {
		yyb2166 = yyj2166 > l
	} else {
		yyb2166 = r.CheckBreak()
	}
	if yyb2166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2166++
	if yyhl2166 {
		yyb2166 = yyj2166 > l
	} else {
		yyb2166 = r.CheckBreak()
	}
	if yyb2166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2168 := &x.Conditions
		yym2169 := z.DecBinary()
		_ = yym2169
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2168), d)
		}
	}
	yyj2166++
	if yyhl2166 {
		yyb2166 = yyj2166 > l
	} else {
		yyb2166 = r.CheckBreak()
	}
	if yyb2166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2166++
	if yyhl2166 {
		yyb2166 = yyj2166 > l
	} else {
		yyb2166 = r.CheckBreak()
	}
	if yyb2166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2166++
	if yyhl2166 {
		yyb2166 = yyj2166 > l
	} else {
		yyb2166 = r.CheckBreak()
	}
	if yyb2166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2166++
	if yyhl2166 {
		yyb2166 = yyj2166 > l
	} else {
		yyb2166 = r.CheckBreak()
	}
	if yyb2166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2166++
	if yyhl2166 {
		yyb2166 = yyj2166 > l
	} else {
		yyb2166 = r.CheckBreak()
	}
	if yyb2166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2175 := z.DecBinary()
		_ = yym2175
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2175 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2175 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2166++
	if yyhl2166 {
		yyb2166 = yyj2166 > l
	} else {
		yyb2166 = r.CheckBreak()
	}
	if yyb2166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2176 := &x.ContainerStatuses
		yym2177 := z.DecBinary()
		_ = yym2177
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2176), d)
		}
	}
	for {
		yyj2166++
		if yyhl2166 {
			yyb2166 = yyj2166 > l
		} else {
			yyb2166 = r.CheckBreak()
		}
		if yyb2166 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2166-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2178 := z.EncBinary()
		_ = yym2178
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2179 := !z.EncBinary()
			yy2arr2179 := z.EncBasicHandle().StructToArray
			var yyq2179 [4]bool
			_, _, _ = yysep2179, yyq2179, yy2arr2179
			const yyr2179 bool = false
			yyq2179[0] = x.Kind != ""
			yyq2179[1] = x.APIVersion != ""
			yyq2179[2] = true
			yyq2179[3] = true
			var yynn2179 int
			if yyr2179 || yy2arr2179 {
				r.EncodeArrayStart(4)
			} else {
				yynn2179 = 0
				for _, b := range yyq2179 {
					if b {
						yynn2179++
					}
				}
				r.EncodeMapStart(yynn2179)
				yynn2179 = 0
			}
			if yyr2179 || yy2arr2179 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2179[0] {
					yym2181 := z.EncBinary()
					_ = yym2181
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2179[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2182 := z.EncBinary()
					_ = yym2182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2179 || yy2arr2179 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2179[1] {
					yym2184 := z.EncBinary()
					_ = yym2184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2179[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2185 := z.EncBinary()
					_ = yym2185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2179 || yy2arr2179 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2179[2] {
					yy2187 := &x.ObjectMeta
					yy2187.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2179[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2188 := &x.ObjectMeta
					yy2188.CodecEncodeSelf(e)
				}
			}
			if yyr2179 || yy2arr2179 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2179[3] {
					yy2190 := &x.Status
					yy2190.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2179[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2191 := &x.Status
					yy2191.CodecEncodeSelf(e)
				}
			}
			if yyr2179 || yy2arr2179 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2192 := z.DecBinary()
	_ = yym2192
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2193 := r.ContainerType()
		if yyct2193 == codecSelferValueTypeMap1234 {
			yyl2193 := r.ReadMapStart()
			if yyl2193 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2193, d)
			}
		} else if yyct2193 == codecSelferValueTypeArray1234 {
			yyl2193 := r.ReadArrayStart()
			if yyl2193 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2193, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2194Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2194Slc
	var yyhl2194 bool = l >= 0
	for yyj2194 := 0; ; yyj2194++ {
		if yyhl2194 {
			if yyj2194 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2194Slc = r.DecodeBytes(yys2194Slc, true, true)
		yys2194 := string(yys2194Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2194 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2197 := &x.ObjectMeta
				yyv2197.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2198 := &x.Status
				yyv2198.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2194)
		} // end switch yys2194
	} // end for yyj2194
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2199 int
	var yyb2199 bool
	var yyhl2199 bool = l >= 0
	yyj2199++
	if yyhl2199 {
		yyb2199 = yyj2199 > l
	} else {
		yyb2199 = r.CheckBreak()
	}
	if yyb2199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2199++
	if yyhl2199 {
		yyb2199 = yyj2199 > l
	} else {
		yyb2199 = r.CheckBreak()
	}
	if yyb2199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2199++
	if yyhl2199 {
		yyb2199 = yyj2199 > l
	} else {
		yyb2199 = r.CheckBreak()
	}
	if yyb2199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2202 := &x.ObjectMeta
		yyv2202.CodecDecodeSelf(d)
	}
	yyj2199++
	if yyhl2199 {
		yyb2199 = yyj2199 > l
	} else {
		yyb2199 = r.CheckBreak()
	}
	if yyb2199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2203 := &x.Status
		yyv2203.CodecDecodeSelf(d)
	}
	for {
		yyj2199++
		if yyhl2199 {
			yyb2199 = yyj2199 > l
		} else {
			yyb2199 = r.CheckBreak()
		}
		if yyb2199 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2199-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2204 := z.EncBinary()
		_ = yym2204
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2205 := !z.EncBinary()
			yy2arr2205 := z.EncBasicHandle().StructToArray
			var yyq2205 [5]bool
			_, _, _ = yysep2205, yyq2205, yy2arr2205
			const yyr2205 bool = false
			yyq2205[0] = x.Kind != ""
			yyq2205[1] = x.APIVersion != ""
			yyq2205[2] = true
			yyq2205[3] = true
			yyq2205[4] = true
			var yynn2205 int
			if yyr2205 || yy2arr2205 {
				r.EncodeArrayStart(5)
			} else {
				yynn2205 = 0
				for _, b := range yyq2205 {
					if b {
						yynn2205++
					}
				}
				r.EncodeMapStart(yynn2205)
				yynn2205 = 0
			}
			if yyr2205 || yy2arr2205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2205[0] {
					yym2207 := z.EncBinary()
					_ = yym2207
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2205[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2208 := z.EncBinary()
					_ = yym2208
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2205 || yy2arr2205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2205[1] {
					yym2210 := z.EncBinary()
					_ = yym2210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2205[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2211 := z.EncBinary()
					_ = yym2211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2205 || yy2arr2205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2205[2] {
					yy2213 := &x.ObjectMeta
					yy2213.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2205[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2214 := &x.ObjectMeta
					yy2214.CodecEncodeSelf(e)
				}
			}
			if yyr2205 || yy2arr2205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2205[3] {
					yy2216 := &x.Spec
					yy2216.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2205[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2217 := &x.Spec
					yy2217.CodecEncodeSelf(e)
				}
			}
			if yyr2205 || yy2arr2205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2205[4] {
					yy2219 := &x.Status
					yy2219.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2205[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2220 := &x.Status
					yy2220.CodecEncodeSelf(e)
				}
			}
			if yyr2205 || yy2arr2205 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2221 := z.DecBinary()
	_ = yym2221
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2222 := r.ContainerType()
		if yyct2222 == codecSelferValueTypeMap1234 {
			yyl2222 := r.ReadMapStart()
			if yyl2222 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2222, d)
			}
		} else if yyct2222 == codecSelferValueTypeArray1234 {
			yyl2222 := r.ReadArrayStart()
			if yyl2222 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2222, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2223Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2223Slc
	var yyhl2223 bool = l >= 0
	for yyj2223 := 0; ; yyj2223++ {
		if yyhl2223 {
			if yyj2223 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2223Slc = r.DecodeBytes(yys2223Slc, true, true)
		yys2223 := string(yys2223Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2223 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2226 := &x.ObjectMeta
				yyv2226.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2227 := &x.Spec
				yyv2227.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2228 := &x.Status
				yyv2228.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2223)
		} // end switch yys2223
	} // end for yyj2223
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2229 int
	var yyb2229 bool
	var yyhl2229 bool = l >= 0
	yyj2229++
	if yyhl2229 {
		yyb2229 = yyj2229 > l
	} else {
		yyb2229 = r.CheckBreak()
	}
	if yyb2229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2229++
	if yyhl2229 {
		yyb2229 = yyj2229 > l
	} else {
		yyb2229 = r.CheckBreak()
	}
	if yyb2229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2229++
	if yyhl2229 {
		yyb2229 = yyj2229 > l
	} else {
		yyb2229 = r.CheckBreak()
	}
	if yyb2229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2232 := &x.ObjectMeta
		yyv2232.CodecDecodeSelf(d)
	}
	yyj2229++
	if yyhl2229 {
		yyb2229 = yyj2229 > l
	} else {
		yyb2229 = r.CheckBreak()
	}
	if yyb2229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2233 := &x.Spec
		yyv2233.CodecDecodeSelf(d)
	}
	yyj2229++
	if yyhl2229 {
		yyb2229 = yyj2229 > l
	} else {
		yyb2229 = r.CheckBreak()
	}
	if yyb2229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2234 := &x.Status
		yyv2234.CodecDecodeSelf(d)
	}
	for {
		yyj2229++
		if yyhl2229 {
			yyb2229 = yyj2229 > l
		} else {
			yyb2229 = r.CheckBreak()
		}
		if yyb2229 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2229-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2235 := z.EncBinary()
		_ = yym2235
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2236 := !z.EncBinary()
			yy2arr2236 := z.EncBasicHandle().StructToArray
			var yyq2236 [4]bool
			_, _, _ = yysep2236, yyq2236, yy2arr2236
			const yyr2236 bool = false
			yyq2236[0] = x.Kind != ""
			yyq2236[1] = x.APIVersion != ""
			yyq2236[2] = true
			var yynn2236 int
			if yyr2236 || yy2arr2236 {
				r.EncodeArrayStart(4)
			} else {
				yynn2236 = 1
				for _, b := range yyq2236 {
					if b {
						yynn2236++
					}
				}
				r.EncodeMapStart(yynn2236)
				yynn2236 = 0
			}
			if yyr2236 || yy2arr2236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2236[0] {
					yym2238 := z.EncBinary()
					_ = yym2238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2236[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2239 := z.EncBinary()
					_ = yym2239
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2236 || yy2arr2236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2236[1] {
					yym2241 := z.EncBinary()
					_ = yym2241
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2236[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2242 := z.EncBinary()
					_ = yym2242
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2236 || yy2arr2236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2236[2] {
					yy2244 := &x.ListMeta
					yym2245 := z.EncBinary()
					_ = yym2245
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2244) {
					} else {
						z.EncFallback(yy2244)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2236[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2246 := &x.ListMeta
					yym2247 := z.EncBinary()
					_ = yym2247
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2246) {
					} else {
						z.EncFallback(yy2246)
					}
				}
			}
			if yyr2236 || yy2arr2236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2249 := z.EncBinary()
					_ = yym2249
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2250 := z.EncBinary()
					_ = yym2250
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr2236 || yy2arr2236 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2251 := z.DecBinary()
	_ = yym2251
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2252 := r.ContainerType()
		if yyct2252 == codecSelferValueTypeMap1234 {
			yyl2252 := r.ReadMapStart()
			if yyl2252 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2252, d)
			}
		} else if yyct2252 == codecSelferValueTypeArray1234 {
			yyl2252 := r.ReadArrayStart()
			if yyl2252 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2252, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2253Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2253Slc
	var yyhl2253 bool = l >= 0
	for yyj2253 := 0; ; yyj2253++ {
		if yyhl2253 {
			if yyj2253 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2253Slc = r.DecodeBytes(yys2253Slc, true, true)
		yys2253 := string(yys2253Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2253 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2256 := &x.ListMeta
				yym2257 := z.DecBinary()
				_ = yym2257
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2256) {
				} else {
					z.DecFallback(yyv2256, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2258 := &x.Items
				yym2259 := z.DecBinary()
				_ = yym2259
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv2258), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2253)
		} // end switch yys2253
	} // end for yyj2253
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2260 int
	var yyb2260 bool
	var yyhl2260 bool = l >= 0
	yyj2260++
	if yyhl2260 {
		yyb2260 = yyj2260 > l
	} else {
		yyb2260 = r.CheckBreak()
	}
	if yyb2260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2260++
	if yyhl2260 {
		yyb2260 = yyj2260 > l
	} else {
		yyb2260 = r.CheckBreak()
	}
	if yyb2260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2260++
	if yyhl2260 {
		yyb2260 = yyj2260 > l
	} else {
		yyb2260 = r.CheckBreak()
	}
	if yyb2260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2263 := &x.ListMeta
		yym2264 := z.DecBinary()
		_ = yym2264
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2263) {
		} else {
			z.DecFallback(yyv2263, false)
		}
	}
	yyj2260++
	if yyhl2260 {
		yyb2260 = yyj2260 > l
	} else {
		yyb2260 = r.CheckBreak()
	}
	if yyb2260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2265 := &x.Items
		yym2266 := z.DecBinary()
		_ = yym2266
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv2265), d)
		}
	}
	for {
		yyj2260++
		if yyhl2260 {
			yyb2260 = yyj2260 > l
		} else {
			yyb2260 = r.CheckBreak()
		}
		if yyb2260 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2260-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2267 := z.EncBinary()
		_ = yym2267
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2268 := !z.EncBinary()
			yy2arr2268 := z.EncBasicHandle().StructToArray
			var yyq2268 [2]bool
			_, _, _ = yysep2268, yyq2268, yy2arr2268
			const yyr2268 bool = false
			yyq2268[0] = true
			yyq2268[1] = true
			var yynn2268 int
			if yyr2268 || yy2arr2268 {
				r.EncodeArrayStart(2)
			} else {
				yynn2268 = 0
				for _, b := range yyq2268 {
					if b {
						yynn2268++
					}
				}
				r.EncodeMapStart(yynn2268)
				yynn2268 = 0
			}
			if yyr2268 || yy2arr2268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2268[0] {
					yy2270 := &x.ObjectMeta
					yy2270.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2268[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2271 := &x.ObjectMeta
					yy2271.CodecEncodeSelf(e)
				}
			}
			if yyr2268 || yy2arr2268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2268[1] {
					yy2273 := &x.Spec
					yy2273.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2268[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2274 := &x.Spec
					yy2274.CodecEncodeSelf(e)
				}
			}
			if yyr2268 || yy2arr2268 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2275 := z.DecBinary()
	_ = yym2275
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2276 := r.ContainerType()
		if yyct2276 == codecSelferValueTypeMap1234 {
			yyl2276 := r.ReadMapStart()
			if yyl2276 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2276, d)
			}
		} else if yyct2276 == codecSelferValueTypeArray1234 {
			yyl2276 := r.ReadArrayStart()
			if yyl2276 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2276, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2277Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2277Slc
	var yyhl2277 bool = l >= 0
	for yyj2277 := 0; ; yyj2277++ {
		if yyhl2277 {
			if yyj2277 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2277Slc = r.DecodeBytes(yys2277Slc, true, true)
		yys2277 := string(yys2277Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2277 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2278 := &x.ObjectMeta
				yyv2278.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2279 := &x.Spec
				yyv2279.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2277)
		} // end switch yys2277
	} // end for yyj2277
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2280 int
	var yyb2280 bool
	var yyhl2280 bool = l >= 0
	yyj2280++
	if yyhl2280 {
		yyb2280 = yyj2280 > l
	} else {
		yyb2280 = r.CheckBreak()
	}
	if yyb2280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2281 := &x.ObjectMeta
		yyv2281.CodecDecodeSelf(d)
	}
	yyj2280++
	if yyhl2280 {
		yyb2280 = yyj2280 > l
	} else {
		yyb2280 = r.CheckBreak()
	}
	if yyb2280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2282 := &x.Spec
		yyv2282.CodecDecodeSelf(d)
	}
	for {
		yyj2280++
		if yyhl2280 {
			yyb2280 = yyj2280 > l
		} else {
			yyb2280 = r.CheckBreak()
		}
		if yyb2280 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2280-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2283 := z.EncBinary()
		_ = yym2283
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2284 := !z.EncBinary()
			yy2arr2284 := z.EncBasicHandle().StructToArray
			var yyq2284 [4]bool
			_, _, _ = yysep2284, yyq2284, yy2arr2284
			const yyr2284 bool = false
			yyq2284[0] = x.Kind != ""
			yyq2284[1] = x.APIVersion != ""
			yyq2284[2] = true
			yyq2284[3] = true
			var yynn2284 int
			if yyr2284 || yy2arr2284 {
				r.EncodeArrayStart(4)
			} else {
				yynn2284 = 0
				for _, b := range yyq2284 {
					if b {
						yynn2284++
					}
				}
				r.EncodeMapStart(yynn2284)
				yynn2284 = 0
			}
			if yyr2284 || yy2arr2284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2284[0] {
					yym2286 := z.EncBinary()
					_ = yym2286
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2284[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2287 := z.EncBinary()
					_ = yym2287
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2284 || yy2arr2284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2284[1] {
					yym2289 := z.EncBinary()
					_ = yym2289
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2284[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2290 := z.EncBinary()
					_ = yym2290
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2284 || yy2arr2284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2284[2] {
					yy2292 := &x.ObjectMeta
					yy2292.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2284[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2293 := &x.ObjectMeta
					yy2293.CodecEncodeSelf(e)
				}
			}
			if yyr2284 || yy2arr2284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2284[3] {
					yy2295 := &x.Template
					yy2295.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2284[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2296 := &x.Template
					yy2296.CodecEncodeSelf(e)
				}
			}
			if yyr2284 || yy2arr2284 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2297 := z.DecBinary()
	_ = yym2297
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2298 := r.ContainerType()
		if yyct2298 == codecSelferValueTypeMap1234 {
			yyl2298 := r.ReadMapStart()
			if yyl2298 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2298, d)
			}
		} else if yyct2298 == codecSelferValueTypeArray1234 {
			yyl2298 := r.ReadArrayStart()
			if yyl2298 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2298, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2299Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2299Slc
	var yyhl2299 bool = l >= 0
	for yyj2299 := 0; ; yyj2299++ {
		if yyhl2299 {
			if yyj2299 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2299Slc = r.DecodeBytes(yys2299Slc, true, true)
		yys2299 := string(yys2299Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2299 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2302 := &x.ObjectMeta
				yyv2302.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2303 := &x.Template
				yyv2303.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2299)
		} // end switch yys2299
	} // end for yyj2299
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2304 int
	var yyb2304 bool
	var yyhl2304 bool = l >= 0
	yyj2304++
	if yyhl2304 {
		yyb2304 = yyj2304 > l
	} else {
		yyb2304 = r.CheckBreak()
	}
	if yyb2304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2304++
	if yyhl2304 {
		yyb2304 = yyj2304 > l
	} else {
		yyb2304 = r.CheckBreak()
	}
	if yyb2304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2304++
	if yyhl2304 {
		yyb2304 = yyj2304 > l
	} else {
		yyb2304 = r.CheckBreak()
	}
	if yyb2304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2307 := &x.ObjectMeta
		yyv2307.CodecDecodeSelf(d)
	}
	yyj2304++
	if yyhl2304 {
		yyb2304 = yyj2304 > l
	} else {
		yyb2304 = r.CheckBreak()
	}
	if yyb2304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2308 := &x.Template
		yyv2308.CodecDecodeSelf(d)
	}
	for {
		yyj2304++
		if yyhl2304 {
			yyb2304 = yyj2304 > l
		} else {
			yyb2304 = r.CheckBreak()
		}
		if yyb2304 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2304-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2309 := z.EncBinary()
		_ = yym2309
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2310 := !z.EncBinary()
			yy2arr2310 := z.EncBasicHandle().StructToArray
			var yyq2310 [4]bool
			_, _, _ = yysep2310, yyq2310, yy2arr2310
			const yyr2310 bool = false
			yyq2310[0] = x.Kind != ""
			yyq2310[1] = x.APIVersion != ""
			yyq2310[2] = true
			var yynn2310 int
			if yyr2310 || yy2arr2310 {
				r.EncodeArrayStart(4)
			} else {
				yynn2310 = 1
				for _, b := range yyq2310 {
					if b {
						yynn2310++
					}
				}
				r.EncodeMapStart(yynn2310)
				yynn2310 = 0
			}
			if yyr2310 || yy2arr2310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2310[0] {
					yym2312 := z.EncBinary()
					_ = yym2312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2310[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2313 := z.EncBinary()
					_ = yym2313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2310 || yy2arr2310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2310[1] {
					yym2315 := z.EncBinary()
					_ = yym2315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2310[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2316 := z.EncBinary()
					_ = yym2316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2310 || yy2arr2310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2310[2] {
					yy2318 := &x.ListMeta
					yym2319 := z.EncBinary()
					_ = yym2319
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2318) {
					} else {
						z.EncFallback(yy2318)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2310[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2320 := &x.ListMeta
					yym2321 := z.EncBinary()
					_ = yym2321
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2320) {
					} else {
						z.EncFallback(yy2320)
					}
				}
			}
			if yyr2310 || yy2arr2310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2323 := z.EncBinary()
					_ = yym2323
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2324 := z.EncBinary()
					_ = yym2324
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2310 || yy2arr2310 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2325 := z.DecBinary()
	_ = yym2325
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2326 := r.ContainerType()
		if yyct2326 == codecSelferValueTypeMap1234 {
			yyl2326 := r.ReadMapStart()
			if yyl2326 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2326, d)
			}
		} else if yyct2326 == codecSelferValueTypeArray1234 {
			yyl2326 := r.ReadArrayStart()
			if yyl2326 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2326, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2327Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2327Slc
	var yyhl2327 bool = l >= 0
	for yyj2327 := 0; ; yyj2327++ {
		if yyhl2327 {
			if yyj2327 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2327Slc = r.DecodeBytes(yys2327Slc, true, true)
		yys2327 := string(yys2327Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2327 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2330 := &x.ListMeta
				yym2331 := z.DecBinary()
				_ = yym2331
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2330) {
				} else {
					z.DecFallback(yyv2330, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2332 := &x.Items
				yym2333 := z.DecBinary()
				_ = yym2333
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2332), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2327)
		} // end switch yys2327
	} // end for yyj2327
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2334 int
	var yyb2334 bool
	var yyhl2334 bool = l >= 0
	yyj2334++
	if yyhl2334 {
		yyb2334 = yyj2334 > l
	} else {
		yyb2334 = r.CheckBreak()
	}
	if yyb2334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2334++
	if yyhl2334 {
		yyb2334 = yyj2334 > l
	} else {
		yyb2334 = r.CheckBreak()
	}
	if yyb2334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2334++
	if yyhl2334 {
		yyb2334 = yyj2334 > l
	} else {
		yyb2334 = r.CheckBreak()
	}
	if yyb2334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2337 := &x.ListMeta
		yym2338 := z.DecBinary()
		_ = yym2338
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2337) {
		} else {
			z.DecFallback(yyv2337, false)
		}
	}
	yyj2334++
	if yyhl2334 {
		yyb2334 = yyj2334 > l
	} else {
		yyb2334 = r.CheckBreak()
	}
	if yyb2334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2339 := &x.Items
		yym2340 := z.DecBinary()
		_ = yym2340
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2339), d)
		}
	}
	for {
		yyj2334++
		if yyhl2334 {
			yyb2334 = yyj2334 > l
		} else {
			yyb2334 = r.CheckBreak()
		}
		if yyb2334 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2334-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2341 := z.EncBinary()
		_ = yym2341
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2342 := !z.EncBinary()
			yy2arr2342 := z.EncBasicHandle().StructToArray
			var yyq2342 [3]bool
			_, _, _ = yysep2342, yyq2342, yy2arr2342
			const yyr2342 bool = false
			yyq2342[0] = x.Replicas != nil
			yyq2342[1] = len(x.Selector) != 0
			yyq2342[2] = x.Template != nil
			var yynn2342 int
			if yyr2342 || yy2arr2342 {
				r.EncodeArrayStart(3)
			} else {
				yynn2342 = 0
				for _, b := range yyq2342 {
					if b {
						yynn2342++
					}
				}
				r.EncodeMapStart(yynn2342)
				yynn2342 = 0
			}
			if yyr2342 || yy2arr2342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2342[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2344 := *x.Replicas
						yym2345 := z.EncBinary()
						_ = yym2345
						if false {
						} else {
							r.EncodeInt(int64(yy2344))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2342[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2346 := *x.Replicas
						yym2347 := z.EncBinary()
						_ = yym2347
						if false {
						} else {
							r.EncodeInt(int64(yy2346))
						}
					}
				}
			}
			if yyr2342 || yy2arr2342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2342[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2349 := z.EncBinary()
						_ = yym2349
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2342[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2350 := z.EncBinary()
						_ = yym2350
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2342 || yy2arr2342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2342[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2342[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2342 || yy2arr2342 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2352 := z.DecBinary()
	_ = yym2352
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2353 := r.ContainerType()
		if yyct2353 == codecSelferValueTypeMap1234 {
			yyl2353 := r.ReadMapStart()
			if yyl2353 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2353, d)
			}
		} else if yyct2353 == codecSelferValueTypeArray1234 {
			yyl2353 := r.ReadArrayStart()
			if yyl2353 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2353, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2354Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2354Slc
	var yyhl2354 bool = l >= 0
	for yyj2354 := 0; ; yyj2354++ {
		if yyhl2354 {
			if yyj2354 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2354Slc = r.DecodeBytes(yys2354Slc, true, true)
		yys2354 := string(yys2354Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2354 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym2356 := z.DecBinary()
				_ = yym2356
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2357 := &x.Selector
				yym2358 := z.DecBinary()
				_ = yym2358
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2357, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2354)
		} // end switch yys2354
	} // end for yyj2354
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2360 int
	var yyb2360 bool
	var yyhl2360 bool = l >= 0
	yyj2360++
	if yyhl2360 {
		yyb2360 = yyj2360 > l
	} else {
		yyb2360 = r.CheckBreak()
	}
	if yyb2360 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym2362 := z.DecBinary()
		_ = yym2362
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj2360++
	if yyhl2360 {
		yyb2360 = yyj2360 > l
	} else {
		yyb2360 = r.CheckBreak()
	}
	if yyb2360 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2363 := &x.Selector
		yym2364 := z.DecBinary()
		_ = yym2364
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2363, false, d)
		}
	}
	yyj2360++
	if yyhl2360 {
		yyb2360 = yyj2360 > l
	} else {
		yyb2360 = r.CheckBreak()
	}
	if yyb2360 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2360++
		if yyhl2360 {
			yyb2360 = yyj2360 > l
		} else {
			yyb2360 = r.CheckBreak()
		}
		if yyb2360 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2360-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2366 := z.EncBinary()
		_ = yym2366
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2367 := !z.EncBinary()
			yy2arr2367 := z.EncBasicHandle().StructToArray
			var yyq2367 [4]bool
			_, _, _ = yysep2367, yyq2367, yy2arr2367
			const yyr2367 bool = false
			yyq2367[1] = x.FullyLabeledReplicas != 0
			yyq2367[2] = x.ReadyReplicas != 0
			yyq2367[3] = x.ObservedGeneration != 0
			var yynn2367 int
			if yyr2367 || yy2arr2367 {
				r.EncodeArrayStart(4)
			} else {
				yynn2367 = 1
				for _, b := range yyq2367 {
					if b {
						yynn2367++
					}
				}
				r.EncodeMapStart(yynn2367)
				yynn2367 = 0
			}
			if yyr2367 || yy2arr2367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2369 := z.EncBinary()
				_ = yym2369
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2370 := z.EncBinary()
				_ = yym2370
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2367 || yy2arr2367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2367[1] {
					yym2372 := z.EncBinary()
					_ = yym2372
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2367[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2373 := z.EncBinary()
					_ = yym2373
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2367 || yy2arr2367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2367[2] {
					yym2375 := z.EncBinary()
					_ = yym2375
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2367[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2376 := z.EncBinary()
					_ = yym2376
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr2367 || yy2arr2367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2367[3] {
					yym2378 := z.EncBinary()
					_ = yym2378
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2367[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2379 := z.EncBinary()
					_ = yym2379
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2367 || yy2arr2367 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2380 := z.DecBinary()
	_ = yym2380
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2381 := r.ContainerType()
		if yyct2381 == codecSelferValueTypeMap1234 {
			yyl2381 := r.ReadMapStart()
			if yyl2381 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2381, d)
			}
		} else if yyct2381 == codecSelferValueTypeArray1234 {
			yyl2381 := r.ReadArrayStart()
			if yyl2381 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2381, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2382Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2382Slc
	var yyhl2382 bool = l >= 0
	for yyj2382 := 0; ; yyj2382++ {
		if yyhl2382 {
			if yyj2382 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2382Slc = r.DecodeBytes(yys2382Slc, true, true)
		yys2382 := string(yys2382Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2382 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2382)
		} // end switch yys2382
	} // end for yyj2382
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2387 int
	var yyb2387 bool
	var yyhl2387 bool = l >= 0
	yyj2387++
	if yyhl2387 {
		yyb2387 = yyj2387 > l
	} else {
		yyb2387 = r.CheckBreak()
	}
	if yyb2387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2387++
	if yyhl2387 {
		yyb2387 = yyj2387 > l
	} else {
		yyb2387 = r.CheckBreak()
	}
	if yyb2387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2387++
	if yyhl2387 {
		yyb2387 = yyj2387 > l
	} else {
		yyb2387 = r.CheckBreak()
	}
	if yyb2387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj2387++
	if yyhl2387 {
		yyb2387 = yyj2387 > l
	} else {
		yyb2387 = r.CheckBreak()
	}
	if yyb2387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2387++
		if yyhl2387 {
			yyb2387 = yyj2387 > l
		} else {
			yyb2387 = r.CheckBreak()
		}
		if yyb2387 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2387-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2392 := z.EncBinary()
		_ = yym2392
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2393 := !z.EncBinary()
			yy2arr2393 := z.EncBasicHandle().StructToArray
			var yyq2393 [5]bool
			_, _, _ = yysep2393, yyq2393, yy2arr2393
			const yyr2393 bool = false
			yyq2393[0] = x.Kind != ""
			yyq2393[1] = x.APIVersion != ""
			yyq2393[2] = true
			yyq2393[3] = true
			yyq2393[4] = true
			var yynn2393 int
			if yyr2393 || yy2arr2393 {
				r.EncodeArrayStart(5)
			} else {
				yynn2393 = 0
				for _, b := range yyq2393 {
					if b {
						yynn2393++
					}
				}
				r.EncodeMapStart(yynn2393)
				yynn2393 = 0
			}
			if yyr2393 || yy2arr2393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2393[0] {
					yym2395 := z.EncBinary()
					_ = yym2395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2393[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2396 := z.EncBinary()
					_ = yym2396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2393 || yy2arr2393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2393[1] {
					yym2398 := z.EncBinary()
					_ = yym2398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2393[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2399 := z.EncBinary()
					_ = yym2399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2393 || yy2arr2393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2393[2] {
					yy2401 := &x.ObjectMeta
					yy2401.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2393[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2402 := &x.ObjectMeta
					yy2402.CodecEncodeSelf(e)
				}
			}
			if yyr2393 || yy2arr2393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2393[3] {
					yy2404 := &x.Spec
					yy2404.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2393[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2405 := &x.Spec
					yy2405.CodecEncodeSelf(e)
				}
			}
			if yyr2393 || yy2arr2393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2393[4] {
					yy2407 := &x.Status
					yy2407.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2393[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2408 := &x.Status
					yy2408.CodecEncodeSelf(e)
				}
			}
			if yyr2393 || yy2arr2393 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2409 := z.DecBinary()
	_ = yym2409
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2410 := r.ContainerType()
		if yyct2410 == codecSelferValueTypeMap1234 {
			yyl2410 := r.ReadMapStart()
			if yyl2410 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2410, d)
			}
		} else if yyct2410 == codecSelferValueTypeArray1234 {
			yyl2410 := r.ReadArrayStart()
			if yyl2410 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2410, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2411Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2411Slc
	var yyhl2411 bool = l >= 0
	for yyj2411 := 0; ; yyj2411++ {
		if yyhl2411 {
			if yyj2411 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2411Slc = r.DecodeBytes(yys2411Slc, true, true)
		yys2411 := string(yys2411Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2411 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2414 := &x.ObjectMeta
				yyv2414.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2415 := &x.Spec
				yyv2415.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2416 := &x.Status
				yyv2416.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2411)
		} // end switch yys2411
	} // end for yyj2411
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2417 int
	var yyb2417 bool
	var yyhl2417 bool = l >= 0
	yyj2417++
	if yyhl2417 {
		yyb2417 = yyj2417 > l
	} else {
		yyb2417 = r.CheckBreak()
	}
	if yyb2417 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2417++
	if yyhl2417 {
		yyb2417 = yyj2417 > l
	} else {
		yyb2417 = r.CheckBreak()
	}
	if yyb2417 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2417++
	if yyhl2417 {
		yyb2417 = yyj2417 > l
	} else {
		yyb2417 = r.CheckBreak()
	}
	if yyb2417 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2420 := &x.ObjectMeta
		yyv2420.CodecDecodeSelf(d)
	}
	yyj2417++
	if yyhl2417 {
		yyb2417 = yyj2417 > l
	} else {
		yyb2417 = r.CheckBreak()
	}
	if yyb2417 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2421 := &x.Spec
		yyv2421.CodecDecodeSelf(d)
	}
	yyj2417++
	if yyhl2417 {
		yyb2417 = yyj2417 > l
	} else {
		yyb2417 = r.CheckBreak()
	}
	if yyb2417 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2422 := &x.Status
		yyv2422.CodecDecodeSelf(d)
	}
	for {
		yyj2417++
		if yyhl2417 {
			yyb2417 = yyj2417 > l
		} else {
			yyb2417 = r.CheckBreak()
		}
		if yyb2417 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2417-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2423 := z.EncBinary()
		_ = yym2423
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2424 := !z.EncBinary()
			yy2arr2424 := z.EncBasicHandle().StructToArray
			var yyq2424 [4]bool
			_, _, _ = yysep2424, yyq2424, yy2arr2424
			const yyr2424 bool = false
			yyq2424[0] = x.Kind != ""
			yyq2424[1] = x.APIVersion != ""
			yyq2424[2] = true
			var yynn2424 int
			if yyr2424 || yy2arr2424 {
				r.EncodeArrayStart(4)
			} else {
				yynn2424 = 1
				for _, b := range yyq2424 {
					if b {
						yynn2424++
					}
				}
				r.EncodeMapStart(yynn2424)
				yynn2424 = 0
			}
			if yyr2424 || yy2arr2424 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2424[0] {
					yym2426 := z.EncBinary()
					_ = yym2426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2424[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2427 := z.EncBinary()
					_ = yym2427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2424 || yy2arr2424 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2424[1] {
					yym2429 := z.EncBinary()
					_ = yym2429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2424[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2430 := z.EncBinary()
					_ = yym2430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2424 || yy2arr2424 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2424[2] {
					yy2432 := &x.ListMeta
					yym2433 := z.EncBinary()
					_ = yym2433
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2432) {
					} else {
						z.EncFallback(yy2432)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2424[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2434 := &x.ListMeta
					yym2435 := z.EncBinary()
					_ = yym2435
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2434) {
					} else {
						z.EncFallback(yy2434)
					}
				}
			}
			if yyr2424 || yy2arr2424 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2437 := z.EncBinary()
					_ = yym2437
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2438 := z.EncBinary()
					_ = yym2438
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2424 || yy2arr2424 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2439 := z.DecBinary()
	_ = yym2439
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2440 := r.ContainerType()
		if yyct2440 == codecSelferValueTypeMap1234 {
			yyl2440 := r.ReadMapStart()
			if yyl2440 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2440, d)
			}
		} else if yyct2440 == codecSelferValueTypeArray1234 {
			yyl2440 := r.ReadArrayStart()
			if yyl2440 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2440, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2441Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2441Slc
	var yyhl2441 bool = l >= 0
	for yyj2441 := 0; ; yyj2441++ {
		if yyhl2441 {
			if yyj2441 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2441Slc = r.DecodeBytes(yys2441Slc, true, true)
		yys2441 := string(yys2441Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2441 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2444 := &x.ListMeta
				yym2445 := z.DecBinary()
				_ = yym2445
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2444) {
				} else {
					z.DecFallback(yyv2444, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2446 := &x.Items
				yym2447 := z.DecBinary()
				_ = yym2447
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2446), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2441)
		} // end switch yys2441
	} // end for yyj2441
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2448 int
	var yyb2448 bool
	var yyhl2448 bool = l >= 0
	yyj2448++
	if yyhl2448 {
		yyb2448 = yyj2448 > l
	} else {
		yyb2448 = r.CheckBreak()
	}
	if yyb2448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2448++
	if yyhl2448 {
		yyb2448 = yyj2448 > l
	} else {
		yyb2448 = r.CheckBreak()
	}
	if yyb2448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2448++
	if yyhl2448 {
		yyb2448 = yyj2448 > l
	} else {
		yyb2448 = r.CheckBreak()
	}
	if yyb2448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2451 := &x.ListMeta
		yym2452 := z.DecBinary()
		_ = yym2452
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2451) {
		} else {
			z.DecFallback(yyv2451, false)
		}
	}
	yyj2448++
	if yyhl2448 {
		yyb2448 = yyj2448 > l
	} else {
		yyb2448 = r.CheckBreak()
	}
	if yyb2448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2453 := &x.Items
		yym2454 := z.DecBinary()
		_ = yym2454
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2453), d)
		}
	}
	for {
		yyj2448++
		if yyhl2448 {
			yyb2448 = yyj2448 > l
		} else {
			yyb2448 = r.CheckBreak()
		}
		if yyb2448 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2448-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2455 := z.EncBinary()
	_ = yym2455
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2456 := z.DecBinary()
	_ = yym2456
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2457 := z.EncBinary()
	_ = yym2457
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2458 := z.DecBinary()
	_ = yym2458
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2459 := z.EncBinary()
		_ = yym2459
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2460 := !z.EncBinary()
			yy2arr2460 := z.EncBasicHandle().StructToArray
			var yyq2460 [1]bool
			_, _, _ = yysep2460, yyq2460, yy2arr2460
			const yyr2460 bool = false
			yyq2460[0] = true
			var yynn2460 int
			if yyr2460 || yy2arr2460 {
				r.EncodeArrayStart(1)
			} else {
				yynn2460 = 0
				for _, b := range yyq2460 {
					if b {
						yynn2460++
					}
				}
				r.EncodeMapStart(yynn2460)
				yynn2460 = 0
			}
			if yyr2460 || yy2arr2460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2460[0] {
					yy2462 := &x.LoadBalancer
					yy2462.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2460[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2463 := &x.LoadBalancer
					yy2463.CodecEncodeSelf(e)
				}
			}
			if yyr2460 || yy2arr2460 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2464 := z.DecBinary()
	_ = yym2464
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2465 := r.ContainerType()
		if yyct2465 == codecSelferValueTypeMap1234 {
			yyl2465 := r.ReadMapStart()
			if yyl2465 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2465, d)
			}
		} else if yyct2465 == codecSelferValueTypeArray1234 {
			yyl2465 := r.ReadArrayStart()
			if yyl2465 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2465, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2466Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2466Slc
	var yyhl2466 bool = l >= 0
	for yyj2466 := 0; ; yyj2466++ {
		if yyhl2466 {
			if yyj2466 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2466Slc = r.DecodeBytes(yys2466Slc, true, true)
		yys2466 := string(yys2466Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2466 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2467 := &x.LoadBalancer
				yyv2467.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2466)
		} // end switch yys2466
	} // end for yyj2466
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2468 int
	var yyb2468 bool
	var yyhl2468 bool = l >= 0
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2469 := &x.LoadBalancer
		yyv2469.CodecDecodeSelf(d)
	}
	for {
		yyj2468++
		if yyhl2468 {
			yyb2468 = yyj2468 > l
		} else {
			yyb2468 = r.CheckBreak()
		}
		if yyb2468 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2468-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2470 := z.EncBinary()
		_ = yym2470
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2471 := !z.EncBinary()
			yy2arr2471 := z.EncBasicHandle().StructToArray
			var yyq2471 [1]bool
			_, _, _ = yysep2471, yyq2471, yy2arr2471
			const yyr2471 bool = false
			yyq2471[0] = len(x.Ingress) != 0
			var yynn2471 int
			if yyr2471 || yy2arr2471 {
				r.EncodeArrayStart(1)
			} else {
				yynn2471 = 0
				for _, b := range yyq2471 {
					if b {
						yynn2471++
					}
				}
				r.EncodeMapStart(yynn2471)
				yynn2471 = 0
			}
			if yyr2471 || yy2arr2471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2471[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2473 := z.EncBinary()
						_ = yym2473
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2471[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2474 := z.EncBinary()
						_ = yym2474
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2471 || yy2arr2471 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2475 := z.DecBinary()
	_ = yym2475
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2476 := r.ContainerType()
		if yyct2476 == codecSelferValueTypeMap1234 {
			yyl2476 := r.ReadMapStart()
			if yyl2476 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2476, d)
			}
		} else if yyct2476 == codecSelferValueTypeArray1234 {
			yyl2476 := r.ReadArrayStart()
			if yyl2476 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2476, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2477Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2477Slc
	var yyhl2477 bool = l >= 0
	for yyj2477 := 0; ; yyj2477++ {
		if yyhl2477 {
			if yyj2477 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2477Slc = r.DecodeBytes(yys2477Slc, true, true)
		yys2477 := string(yys2477Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2477 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2478 := &x.Ingress
				yym2479 := z.DecBinary()
				_ = yym2479
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2478), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2477)
		} // end switch yys2477
	} // end for yyj2477
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2480 int
	var yyb2480 bool
	var yyhl2480 bool = l >= 0
	yyj2480++
	if yyhl2480 {
		yyb2480 = yyj2480 > l
	} else {
		yyb2480 = r.CheckBreak()
	}
	if yyb2480 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2481 := &x.Ingress
		yym2482 := z.DecBinary()
		_ = yym2482
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2481), d)
		}
	}
	for {
		yyj2480++
		if yyhl2480 {
			yyb2480 = yyj2480 > l
		} else {
			yyb2480 = r.CheckBreak()
		}
		if yyb2480 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2480-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2483 := z.EncBinary()
		_ = yym2483
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2484 := !z.EncBinary()
			yy2arr2484 := z.EncBasicHandle().StructToArray
			var yyq2484 [2]bool
			_, _, _ = yysep2484, yyq2484, yy2arr2484
			const yyr2484 bool = false
			yyq2484[0] = x.IP != ""
			yyq2484[1] = x.Hostname != ""
			var yynn2484 int
			if yyr2484 || yy2arr2484 {
				r.EncodeArrayStart(2)
			} else {
				yynn2484 = 0
				for _, b := range yyq2484 {
					if b {
						yynn2484++
					}
				}
				r.EncodeMapStart(yynn2484)
				yynn2484 = 0
			}
			if yyr2484 || yy2arr2484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2484[0] {
					yym2486 := z.EncBinary()
					_ = yym2486
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2484[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2487 := z.EncBinary()
					_ = yym2487
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2484 || yy2arr2484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2484[1] {
					yym2489 := z.EncBinary()
					_ = yym2489
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2484[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2490 := z.EncBinary()
					_ = yym2490
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2484 || yy2arr2484 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2491 := z.DecBinary()
	_ = yym2491
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2492 := r.ContainerType()
		if yyct2492 == codecSelferValueTypeMap1234 {
			yyl2492 := r.ReadMapStart()
			if yyl2492 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2492, d)
			}
		} else if yyct2492 == codecSelferValueTypeArray1234 {
			yyl2492 := r.ReadArrayStart()
			if yyl2492 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2492, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2493Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2493Slc
	var yyhl2493 bool = l >= 0
	for yyj2493 := 0; ; yyj2493++ {
		if yyhl2493 {
			if yyj2493 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2493Slc = r.DecodeBytes(yys2493Slc, true, true)
		yys2493 := string(yys2493Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2493 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2493)
		} // end switch yys2493
	} // end for yyj2493
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2496 int
	var yyb2496 bool
	var yyhl2496 bool = l >= 0
	yyj2496++
	if yyhl2496 {
		yyb2496 = yyj2496 > l
	} else {
		yyb2496 = r.CheckBreak()
	}
	if yyb2496 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2496++
	if yyhl2496 {
		yyb2496 = yyj2496 > l
	} else {
		yyb2496 = r.CheckBreak()
	}
	if yyb2496 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2496++
		if yyhl2496 {
			yyb2496 = yyj2496 > l
		} else {
			yyb2496 = r.CheckBreak()
		}
		if yyb2496 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2496-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2499 := z.EncBinary()
		_ = yym2499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2500 := !z.EncBinary()
			yy2arr2500 := z.EncBasicHandle().StructToArray
			var yyq2500 [10]bool
			_, _, _ = yysep2500, yyq2500, yy2arr2500
			const yyr2500 bool = false
			yyq2500[1] = len(x.Selector) != 0
			yyq2500[2] = x.ClusterIP != ""
			yyq2500[3] = x.Type != ""
			yyq2500[4] = len(x.ExternalIPs) != 0
			yyq2500[5] = len(x.DeprecatedPublicIPs) != 0
			yyq2500[6] = x.SessionAffinity != ""
			yyq2500[7] = x.LoadBalancerIP != ""
			yyq2500[8] = len(x.LoadBalancerSourceRanges) != 0
			yyq2500[9] = x.ExternalName != ""
			var yynn2500 int
			if yyr2500 || yy2arr2500 {
				r.EncodeArrayStart(10)
			} else {
				yynn2500 = 1
				for _, b := range yyq2500 {
					if b {
						yynn2500++
					}
				}
				r.EncodeMapStart(yynn2500)
				yynn2500 = 0
			}
			if yyr2500 || yy2arr2500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2502 := z.EncBinary()
					_ = yym2502
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2503 := z.EncBinary()
					_ = yym2503
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2500 || yy2arr2500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2500[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2505 := z.EncBinary()
						_ = yym2505
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2500[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2506 := z.EncBinary()
						_ = yym2506
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2500 || yy2arr2500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2500[2] {
					yym2508 := z.EncBinary()
					_ = yym2508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2500[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2509 := z.EncBinary()
					_ = yym2509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2500 || yy2arr2500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2500[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2500[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2500 || yy2arr2500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2500[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2512 := z.EncBinary()
						_ = yym2512
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2500[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2513 := z.EncBinary()
						_ = yym2513
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2500 || yy2arr2500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2500[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2515 := z.EncBinary()
						_ = yym2515
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2500[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2516 := z.EncBinary()
						_ = yym2516
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr2500 || yy2arr2500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2500[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2500[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2500 || yy2arr2500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2500[7] {
					yym2519 := z.EncBinary()
					_ = yym2519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2500[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2520 := z.EncBinary()
					_ = yym2520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2500 || yy2arr2500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2500[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2522 := z.EncBinary()
						_ = yym2522
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2500[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2523 := z.EncBinary()
						_ = yym2523
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2500 || yy2arr2500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2500[9] {
					yym2525 := z.EncBinary()
					_ = yym2525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2500[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2526 := z.EncBinary()
					_ = yym2526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
					}
				}
			}
			if yyr2500 || yy2arr2500 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2527 := z.DecBinary()
	_ = yym2527
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2528 := r.ContainerType()
		if yyct2528 == codecSelferValueTypeMap1234 {
			yyl2528 := r.ReadMapStart()
			if yyl2528 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2528, d)
			}
		} else if yyct2528 == codecSelferValueTypeArray1234 {
			yyl2528 := r.ReadArrayStart()
			if yyl2528 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2528, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2529Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2529Slc
	var yyhl2529 bool = l >= 0
	for yyj2529 := 0; ; yyj2529++ {
		if yyhl2529 {
			if yyj2529 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2529Slc = r.DecodeBytes(yys2529Slc, true, true)
		yys2529 := string(yys2529Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2529 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2530 := &x.Ports
				yym2531 := z.DecBinary()
				_ = yym2531
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2530), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2532 := &x.Selector
				yym2533 := z.DecBinary()
				_ = yym2533
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2532, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2536 := &x.ExternalIPs
				yym2537 := z.DecBinary()
				_ = yym2537
				if false {
				} else {
					z.F.DecSliceStringX(yyv2536, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv2538 := &x.DeprecatedPublicIPs
				yym2539 := z.DecBinary()
				_ = yym2539
				if false {
				} else {
					z.F.DecSliceStringX(yyv2538, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2542 := &x.LoadBalancerSourceRanges
				yym2543 := z.DecBinary()
				_ = yym2543
				if false {
				} else {
					z.F.DecSliceStringX(yyv2542, false, d)
				}
			}
		case "externalName":
			if r.TryDecodeAsNil() {
				x.ExternalName = ""
			} else {
				x.ExternalName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2529)
		} // end switch yys2529
	} // end for yyj2529
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2545 int
	var yyb2545 bool
	var yyhl2545 bool = l >= 0
	yyj2545++
	if yyhl2545 {
		yyb2545 = yyj2545 > l
	} else {
		yyb2545 = r.CheckBreak()
	}
	if yyb2545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2546 := &x.Ports
		yym2547 := z.DecBinary()
		_ = yym2547
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2546), d)
		}
	}
	yyj2545++
	if yyhl2545 {
		yyb2545 = yyj2545 > l
	} else {
		yyb2545 = r.CheckBreak()
	}
	if yyb2545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2548 := &x.Selector
		yym2549 := z.DecBinary()
		_ = yym2549
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2548, false, d)
		}
	}
	yyj2545++
	if yyhl2545 {
		yyb2545 = yyj2545 > l
	} else {
		yyb2545 = r.CheckBreak()
	}
	if yyb2545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2545++
	if yyhl2545 {
		yyb2545 = yyj2545 > l
	} else {
		yyb2545 = r.CheckBreak()
	}
	if yyb2545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2545++
	if yyhl2545 {
		yyb2545 = yyj2545 > l
	} else {
		yyb2545 = r.CheckBreak()
	}
	if yyb2545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2552 := &x.ExternalIPs
		yym2553 := z.DecBinary()
		_ = yym2553
		if false {
		} else {
			z.F.DecSliceStringX(yyv2552, false, d)
		}
	}
	yyj2545++
	if yyhl2545 {
		yyb2545 = yyj2545 > l
	} else {
		yyb2545 = r.CheckBreak()
	}
	if yyb2545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv2554 := &x.DeprecatedPublicIPs
		yym2555 := z.DecBinary()
		_ = yym2555
		if false {
		} else {
			z.F.DecSliceStringX(yyv2554, false, d)
		}
	}
	yyj2545++
	if yyhl2545 {
		yyb2545 = yyj2545 > l
	} else {
		yyb2545 = r.CheckBreak()
	}
	if yyb2545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2545++
	if yyhl2545 {
		yyb2545 = yyj2545 > l
	} else {
		yyb2545 = r.CheckBreak()
	}
	if yyb2545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2545++
	if yyhl2545 {
		yyb2545 = yyj2545 > l
	} else {
		yyb2545 = r.CheckBreak()
	}
	if yyb2545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2558 := &x.LoadBalancerSourceRanges
		yym2559 := z.DecBinary()
		_ = yym2559
		if false {
		} else {
			z.F.DecSliceStringX(yyv2558, false, d)
		}
	}
	yyj2545++
	if yyhl2545 {
		yyb2545 = yyj2545 > l
	} else {
		yyb2545 = r.CheckBreak()
	}
	if yyb2545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalName = ""
	} else {
		x.ExternalName = string(r.DecodeString())
	}
	for {
		yyj2545++
		if yyhl2545 {
			yyb2545 = yyj2545 > l
		} else {
			yyb2545 = r.CheckBreak()
		}
		if yyb2545 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2545-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2561 := z.EncBinary()
		_ = yym2561
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2562 := !z.EncBinary()
			yy2arr2562 := z.EncBasicHandle().StructToArray
			var yyq2562 [5]bool
			_, _, _ = yysep2562, yyq2562, yy2arr2562
			const yyr2562 bool = false
			yyq2562[0] = x.Name != ""
			yyq2562[1] = x.Protocol != ""
			yyq2562[3] = true
			yyq2562[4] = x.NodePort != 0
			var yynn2562 int
			if yyr2562 || yy2arr2562 {
				r.EncodeArrayStart(5)
			} else {
				yynn2562 = 1
				for _, b := range yyq2562 {
					if b {
						yynn2562++
					}
				}
				r.EncodeMapStart(yynn2562)
				yynn2562 = 0
			}
			if yyr2562 || yy2arr2562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2562[0] {
					yym2564 := z.EncBinary()
					_ = yym2564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2562[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2565 := z.EncBinary()
					_ = yym2565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2562 || yy2arr2562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2562[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2562[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2562 || yy2arr2562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2568 := z.EncBinary()
				_ = yym2568
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2569 := z.EncBinary()
				_ = yym2569
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2562 || yy2arr2562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2562[3] {
					yy2571 := &x.TargetPort
					yym2572 := z.EncBinary()
					_ = yym2572
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2571) {
					} else if !yym2572 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2571)
					} else {
						z.EncFallback(yy2571)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2562[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2573 := &x.TargetPort
					yym2574 := z.EncBinary()
					_ = yym2574
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2573) {
					} else if !yym2574 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2573)
					} else {
						z.EncFallback(yy2573)
					}
				}
			}
			if yyr2562 || yy2arr2562 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2562[4] {
					yym2576 := z.EncBinary()
					_ = yym2576
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2562[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2577 := z.EncBinary()
					_ = yym2577
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yyr2562 || yy2arr2562 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2578 := z.DecBinary()
	_ = yym2578
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2579 := r.ContainerType()
		if yyct2579 == codecSelferValueTypeMap1234 {
			yyl2579 := r.ReadMapStart()
			if yyl2579 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2579, d)
			}
		} else if yyct2579 == codecSelferValueTypeArray1234 {
			yyl2579 := r.ReadArrayStart()
			if yyl2579 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2579, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2580Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2580Slc
	var yyhl2580 bool = l >= 0
	for yyj2580 := 0; ; yyj2580++ {
		if yyhl2580 {
			if yyj2580 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2580Slc = r.DecodeBytes(yys2580Slc, true, true)
		yys2580 := string(yys2580Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2580 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2584 := &x.TargetPort
				yym2585 := z.DecBinary()
				_ = yym2585
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2584) {
				} else if !yym2585 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2584)
				} else {
					z.DecFallback(yyv2584, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2580)
		} // end switch yys2580
	} // end for yyj2580
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2587 int
	var yyb2587 bool
	var yyhl2587 bool = l >= 0
	yyj2587++
	if yyhl2587 {
		yyb2587 = yyj2587 > l
	} else {
		yyb2587 = r.CheckBreak()
	}
	if yyb2587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2587++
	if yyhl2587 {
		yyb2587 = yyj2587 > l
	} else {
		yyb2587 = r.CheckBreak()
	}
	if yyb2587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2587++
	if yyhl2587 {
		yyb2587 = yyj2587 > l
	} else {
		yyb2587 = r.CheckBreak()
	}
	if yyb2587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2587++
	if yyhl2587 {
		yyb2587 = yyj2587 > l
	} else {
		yyb2587 = r.CheckBreak()
	}
	if yyb2587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2591 := &x.TargetPort
		yym2592 := z.DecBinary()
		_ = yym2592
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2591) {
		} else if !yym2592 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2591)
		} else {
			z.DecFallback(yyv2591, false)
		}
	}
	yyj2587++
	if yyhl2587 {
		yyb2587 = yyj2587 > l
	} else {
		yyb2587 = r.CheckBreak()
	}
	if yyb2587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2587++
		if yyhl2587 {
			yyb2587 = yyj2587 > l
		} else {
			yyb2587 = r.CheckBreak()
		}
		if yyb2587 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2587-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2594 := z.EncBinary()
		_ = yym2594
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2595 := !z.EncBinary()
			yy2arr2595 := z.EncBasicHandle().StructToArray
			var yyq2595 [5]bool
			_, _, _ = yysep2595, yyq2595, yy2arr2595
			const yyr2595 bool = false
			yyq2595[0] = x.Kind != ""
			yyq2595[1] = x.APIVersion != ""
			yyq2595[2] = true
			yyq2595[3] = true
			yyq2595[4] = true
			var yynn2595 int
			if yyr2595 || yy2arr2595 {
				r.EncodeArrayStart(5)
			} else {
				yynn2595 = 0
				for _, b := range yyq2595 {
					if b {
						yynn2595++
					}
				}
				r.EncodeMapStart(yynn2595)
				yynn2595 = 0
			}
			if yyr2595 || yy2arr2595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2595[0] {
					yym2597 := z.EncBinary()
					_ = yym2597
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2595[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2598 := z.EncBinary()
					_ = yym2598
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2595 || yy2arr2595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2595[1] {
					yym2600 := z.EncBinary()
					_ = yym2600
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2595[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2601 := z.EncBinary()
					_ = yym2601
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2595 || yy2arr2595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2595[2] {
					yy2603 := &x.ObjectMeta
					yy2603.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2595[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2604 := &x.ObjectMeta
					yy2604.CodecEncodeSelf(e)
				}
			}
			if yyr2595 || yy2arr2595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2595[3] {
					yy2606 := &x.Spec
					yy2606.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2595[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2607 := &x.Spec
					yy2607.CodecEncodeSelf(e)
				}
			}
			if yyr2595 || yy2arr2595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2595[4] {
					yy2609 := &x.Status
					yy2609.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2595[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2610 := &x.Status
					yy2610.CodecEncodeSelf(e)
				}
			}
			if yyr2595 || yy2arr2595 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2611 := z.DecBinary()
	_ = yym2611
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2612 := r.ContainerType()
		if yyct2612 == codecSelferValueTypeMap1234 {
			yyl2612 := r.ReadMapStart()
			if yyl2612 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2612, d)
			}
		} else if yyct2612 == codecSelferValueTypeArray1234 {
			yyl2612 := r.ReadArrayStart()
			if yyl2612 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2612, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2613Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2613Slc
	var yyhl2613 bool = l >= 0
	for yyj2613 := 0; ; yyj2613++ {
		if yyhl2613 {
			if yyj2613 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2613Slc = r.DecodeBytes(yys2613Slc, true, true)
		yys2613 := string(yys2613Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2613 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2616 := &x.ObjectMeta
				yyv2616.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2617 := &x.Spec
				yyv2617.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2618 := &x.Status
				yyv2618.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2613)
		} // end switch yys2613
	} // end for yyj2613
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2619 int
	var yyb2619 bool
	var yyhl2619 bool = l >= 0
	yyj2619++
	if yyhl2619 {
		yyb2619 = yyj2619 > l
	} else {
		yyb2619 = r.CheckBreak()
	}
	if yyb2619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2619++
	if yyhl2619 {
		yyb2619 = yyj2619 > l
	} else {
		yyb2619 = r.CheckBreak()
	}
	if yyb2619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2619++
	if yyhl2619 {
		yyb2619 = yyj2619 > l
	} else {
		yyb2619 = r.CheckBreak()
	}
	if yyb2619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2622 := &x.ObjectMeta
		yyv2622.CodecDecodeSelf(d)
	}
	yyj2619++
	if yyhl2619 {
		yyb2619 = yyj2619 > l
	} else {
		yyb2619 = r.CheckBreak()
	}
	if yyb2619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2623 := &x.Spec
		yyv2623.CodecDecodeSelf(d)
	}
	yyj2619++
	if yyhl2619 {
		yyb2619 = yyj2619 > l
	} else {
		yyb2619 = r.CheckBreak()
	}
	if yyb2619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2624 := &x.Status
		yyv2624.CodecDecodeSelf(d)
	}
	for {
		yyj2619++
		if yyhl2619 {
			yyb2619 = yyj2619 > l
		} else {
			yyb2619 = r.CheckBreak()
		}
		if yyb2619 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2619-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2625 := z.EncBinary()
		_ = yym2625
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2626 := !z.EncBinary()
			yy2arr2626 := z.EncBasicHandle().StructToArray
			var yyq2626 [4]bool
			_, _, _ = yysep2626, yyq2626, yy2arr2626
			const yyr2626 bool = false
			yyq2626[0] = x.Kind != ""
			yyq2626[1] = x.APIVersion != ""
			yyq2626[2] = true
			var yynn2626 int
			if yyr2626 || yy2arr2626 {
				r.EncodeArrayStart(4)
			} else {
				yynn2626 = 1
				for _, b := range yyq2626 {
					if b {
						yynn2626++
					}
				}
				r.EncodeMapStart(yynn2626)
				yynn2626 = 0
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2626[0] {
					yym2628 := z.EncBinary()
					_ = yym2628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2626[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2629 := z.EncBinary()
					_ = yym2629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2626[1] {
					yym2631 := z.EncBinary()
					_ = yym2631
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2626[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2632 := z.EncBinary()
					_ = yym2632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2626[2] {
					yy2634 := &x.ListMeta
					yym2635 := z.EncBinary()
					_ = yym2635
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2634) {
					} else {
						z.EncFallback(yy2634)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2626[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2636 := &x.ListMeta
					yym2637 := z.EncBinary()
					_ = yym2637
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2636) {
					} else {
						z.EncFallback(yy2636)
					}
				}
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2639 := z.EncBinary()
					_ = yym2639
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2640 := z.EncBinary()
					_ = yym2640
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2641 := z.DecBinary()
	_ = yym2641
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2642 := r.ContainerType()
		if yyct2642 == codecSelferValueTypeMap1234 {
			yyl2642 := r.ReadMapStart()
			if yyl2642 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2642, d)
			}
		} else if yyct2642 == codecSelferValueTypeArray1234 {
			yyl2642 := r.ReadArrayStart()
			if yyl2642 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2642, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2643Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2643Slc
	var yyhl2643 bool = l >= 0
	for yyj2643 := 0; ; yyj2643++ {
		if yyhl2643 {
			if yyj2643 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2643Slc = r.DecodeBytes(yys2643Slc, true, true)
		yys2643 := string(yys2643Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2643 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2646 := &x.ListMeta
				yym2647 := z.DecBinary()
				_ = yym2647
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2646) {
				} else {
					z.DecFallback(yyv2646, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2648 := &x.Items
				yym2649 := z.DecBinary()
				_ = yym2649
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2648), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2643)
		} // end switch yys2643
	} // end for yyj2643
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2650 int
	var yyb2650 bool
	var yyhl2650 bool = l >= 0
	yyj2650++
	if yyhl2650 {
		yyb2650 = yyj2650 > l
	} else {
		yyb2650 = r.CheckBreak()
	}
	if yyb2650 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2650++
	if yyhl2650 {
		yyb2650 = yyj2650 > l
	} else {
		yyb2650 = r.CheckBreak()
	}
	if yyb2650 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2650++
	if yyhl2650 {
		yyb2650 = yyj2650 > l
	} else {
		yyb2650 = r.CheckBreak()
	}
	if yyb2650 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2653 := &x.ListMeta
		yym2654 := z.DecBinary()
		_ = yym2654
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2653) {
		} else {
			z.DecFallback(yyv2653, false)
		}
	}
	yyj2650++
	if yyhl2650 {
		yyb2650 = yyj2650 > l
	} else {
		yyb2650 = r.CheckBreak()
	}
	if yyb2650 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2655 := &x.Items
		yym2656 := z.DecBinary()
		_ = yym2656
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2655), d)
		}
	}
	for {
		yyj2650++
		if yyhl2650 {
			yyb2650 = yyj2650 > l
		} else {
			yyb2650 = r.CheckBreak()
		}
		if yyb2650 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2650-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2657 := z.EncBinary()
		_ = yym2657
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2658 := !z.EncBinary()
			yy2arr2658 := z.EncBasicHandle().StructToArray
			var yyq2658 [5]bool
			_, _, _ = yysep2658, yyq2658, yy2arr2658
			const yyr2658 bool = false
			yyq2658[0] = x.Kind != ""
			yyq2658[1] = x.APIVersion != ""
			yyq2658[2] = true
			yyq2658[3] = len(x.Secrets) != 0
			yyq2658[4] = len(x.ImagePullSecrets) != 0
			var yynn2658 int
			if yyr2658 || yy2arr2658 {
				r.EncodeArrayStart(5)
			} else {
				yynn2658 = 0
				for _, b := range yyq2658 {
					if b {
						yynn2658++
					}
				}
				r.EncodeMapStart(yynn2658)
				yynn2658 = 0
			}
			if yyr2658 || yy2arr2658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2658[0] {
					yym2660 := z.EncBinary()
					_ = yym2660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2658[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2661 := z.EncBinary()
					_ = yym2661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2658 || yy2arr2658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2658[1] {
					yym2663 := z.EncBinary()
					_ = yym2663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2658[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2664 := z.EncBinary()
					_ = yym2664
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2658 || yy2arr2658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2658[2] {
					yy2666 := &x.ObjectMeta
					yy2666.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2658[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2667 := &x.ObjectMeta
					yy2667.CodecEncodeSelf(e)
				}
			}
			if yyr2658 || yy2arr2658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2658[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2669 := z.EncBinary()
						_ = yym2669
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2658[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2670 := z.EncBinary()
						_ = yym2670
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2658 || yy2arr2658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2658[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2672 := z.EncBinary()
						_ = yym2672
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2658[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2673 := z.EncBinary()
						_ = yym2673
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2658 || yy2arr2658 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2674 := z.DecBinary()
	_ = yym2674
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2675 := r.ContainerType()
		if yyct2675 == codecSelferValueTypeMap1234 {
			yyl2675 := r.ReadMapStart()
			if yyl2675 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2675, d)
			}
		} else if yyct2675 == codecSelferValueTypeArray1234 {
			yyl2675 := r.ReadArrayStart()
			if yyl2675 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2675, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2676Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2676Slc
	var yyhl2676 bool = l >= 0
	for yyj2676 := 0; ; yyj2676++ {
		if yyhl2676 {
			if yyj2676 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2676Slc = r.DecodeBytes(yys2676Slc, true, true)
		yys2676 := string(yys2676Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2676 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2679 := &x.ObjectMeta
				yyv2679.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2680 := &x.Secrets
				yym2681 := z.DecBinary()
				_ = yym2681
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2680), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2682 := &x.ImagePullSecrets
				yym2683 := z.DecBinary()
				_ = yym2683
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2682), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2676)
		} // end switch yys2676
	} // end for yyj2676
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2684 int
	var yyb2684 bool
	var yyhl2684 bool = l >= 0
	yyj2684++
	if yyhl2684 {
		yyb2684 = yyj2684 > l
	} else {
		yyb2684 = r.CheckBreak()
	}
	if yyb2684 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2684++
	if yyhl2684 {
		yyb2684 = yyj2684 > l
	} else {
		yyb2684 = r.CheckBreak()
	}
	if yyb2684 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2684++
	if yyhl2684 {
		yyb2684 = yyj2684 > l
	} else {
		yyb2684 = r.CheckBreak()
	}
	if yyb2684 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2687 := &x.ObjectMeta
		yyv2687.CodecDecodeSelf(d)
	}
	yyj2684++
	if yyhl2684 {
		yyb2684 = yyj2684 > l
	} else {
		yyb2684 = r.CheckBreak()
	}
	if yyb2684 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2688 := &x.Secrets
		yym2689 := z.DecBinary()
		_ = yym2689
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2688), d)
		}
	}
	yyj2684++
	if yyhl2684 {
		yyb2684 = yyj2684 > l
	} else {
		yyb2684 = r.CheckBreak()
	}
	if yyb2684 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2690 := &x.ImagePullSecrets
		yym2691 := z.DecBinary()
		_ = yym2691
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2690), d)
		}
	}
	for {
		yyj2684++
		if yyhl2684 {
			yyb2684 = yyj2684 > l
		} else {
			yyb2684 = r.CheckBreak()
		}
		if yyb2684 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2684-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2692 := z.EncBinary()
		_ = yym2692
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2693 := !z.EncBinary()
			yy2arr2693 := z.EncBasicHandle().StructToArray
			var yyq2693 [4]bool
			_, _, _ = yysep2693, yyq2693, yy2arr2693
			const yyr2693 bool = false
			yyq2693[0] = x.Kind != ""
			yyq2693[1] = x.APIVersion != ""
			yyq2693[2] = true
			var yynn2693 int
			if yyr2693 || yy2arr2693 {
				r.EncodeArrayStart(4)
			} else {
				yynn2693 = 1
				for _, b := range yyq2693 {
					if b {
						yynn2693++
					}
				}
				r.EncodeMapStart(yynn2693)
				yynn2693 = 0
			}
			if yyr2693 || yy2arr2693 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2693[0] {
					yym2695 := z.EncBinary()
					_ = yym2695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2693[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2696 := z.EncBinary()
					_ = yym2696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2693 || yy2arr2693 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2693[1] {
					yym2698 := z.EncBinary()
					_ = yym2698
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2693[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2699 := z.EncBinary()
					_ = yym2699
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2693 || yy2arr2693 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2693[2] {
					yy2701 := &x.ListMeta
					yym2702 := z.EncBinary()
					_ = yym2702
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2701) {
					} else {
						z.EncFallback(yy2701)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2693[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2703 := &x.ListMeta
					yym2704 := z.EncBinary()
					_ = yym2704
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2703) {
					} else {
						z.EncFallback(yy2703)
					}
				}
			}
			if yyr2693 || yy2arr2693 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2706 := z.EncBinary()
					_ = yym2706
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2707 := z.EncBinary()
					_ = yym2707
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2693 || yy2arr2693 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2708 := z.DecBinary()
	_ = yym2708
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2709 := r.ContainerType()
		if yyct2709 == codecSelferValueTypeMap1234 {
			yyl2709 := r.ReadMapStart()
			if yyl2709 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2709, d)
			}
		} else if yyct2709 == codecSelferValueTypeArray1234 {
			yyl2709 := r.ReadArrayStart()
			if yyl2709 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2709, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2710Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2710Slc
	var yyhl2710 bool = l >= 0
	for yyj2710 := 0; ; yyj2710++ {
		if yyhl2710 {
			if yyj2710 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2710Slc = r.DecodeBytes(yys2710Slc, true, true)
		yys2710 := string(yys2710Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2710 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2713 := &x.ListMeta
				yym2714 := z.DecBinary()
				_ = yym2714
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2713) {
				} else {
					z.DecFallback(yyv2713, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2715 := &x.Items
				yym2716 := z.DecBinary()
				_ = yym2716
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2715), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2710)
		} // end switch yys2710
	} // end for yyj2710
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2717 int
	var yyb2717 bool
	var yyhl2717 bool = l >= 0
	yyj2717++
	if yyhl2717 {
		yyb2717 = yyj2717 > l
	} else {
		yyb2717 = r.CheckBreak()
	}
	if yyb2717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2717++
	if yyhl2717 {
		yyb2717 = yyj2717 > l
	} else {
		yyb2717 = r.CheckBreak()
	}
	if yyb2717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2717++
	if yyhl2717 {
		yyb2717 = yyj2717 > l
	} else {
		yyb2717 = r.CheckBreak()
	}
	if yyb2717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2720 := &x.ListMeta
		yym2721 := z.DecBinary()
		_ = yym2721
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2720) {
		} else {
			z.DecFallback(yyv2720, false)
		}
	}
	yyj2717++
	if yyhl2717 {
		yyb2717 = yyj2717 > l
	} else {
		yyb2717 = r.CheckBreak()
	}
	if yyb2717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2722 := &x.Items
		yym2723 := z.DecBinary()
		_ = yym2723
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2722), d)
		}
	}
	for {
		yyj2717++
		if yyhl2717 {
			yyb2717 = yyj2717 > l
		} else {
			yyb2717 = r.CheckBreak()
		}
		if yyb2717 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2717-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2724 := z.EncBinary()
		_ = yym2724
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2725 := !z.EncBinary()
			yy2arr2725 := z.EncBasicHandle().StructToArray
			var yyq2725 [4]bool
			_, _, _ = yysep2725, yyq2725, yy2arr2725
			const yyr2725 bool = false
			yyq2725[0] = x.Kind != ""
			yyq2725[1] = x.APIVersion != ""
			yyq2725[2] = true
			var yynn2725 int
			if yyr2725 || yy2arr2725 {
				r.EncodeArrayStart(4)
			} else {
				yynn2725 = 1
				for _, b := range yyq2725 {
					if b {
						yynn2725++
					}
				}
				r.EncodeMapStart(yynn2725)
				yynn2725 = 0
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2725[0] {
					yym2727 := z.EncBinary()
					_ = yym2727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2725[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2728 := z.EncBinary()
					_ = yym2728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2725[1] {
					yym2730 := z.EncBinary()
					_ = yym2730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2725[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2731 := z.EncBinary()
					_ = yym2731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2725[2] {
					yy2733 := &x.ObjectMeta
					yy2733.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2725[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2734 := &x.ObjectMeta
					yy2734.CodecEncodeSelf(e)
				}
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2736 := z.EncBinary()
					_ = yym2736
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2737 := z.EncBinary()
					_ = yym2737
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2738 := z.DecBinary()
	_ = yym2738
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2739 := r.ContainerType()
		if yyct2739 == codecSelferValueTypeMap1234 {
			yyl2739 := r.ReadMapStart()
			if yyl2739 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2739, d)
			}
		} else if yyct2739 == codecSelferValueTypeArray1234 {
			yyl2739 := r.ReadArrayStart()
			if yyl2739 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2739, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2740Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2740Slc
	var yyhl2740 bool = l >= 0
	for yyj2740 := 0; ; yyj2740++ {
		if yyhl2740 {
			if yyj2740 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2740Slc = r.DecodeBytes(yys2740Slc, true, true)
		yys2740 := string(yys2740Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2740 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2743 := &x.ObjectMeta
				yyv2743.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2744 := &x.Subsets
				yym2745 := z.DecBinary()
				_ = yym2745
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2744), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2740)
		} // end switch yys2740
	} // end for yyj2740
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2746 int
	var yyb2746 bool
	var yyhl2746 bool = l >= 0
	yyj2746++
	if yyhl2746 {
		yyb2746 = yyj2746 > l
	} else {
		yyb2746 = r.CheckBreak()
	}
	if yyb2746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2746++
	if yyhl2746 {
		yyb2746 = yyj2746 > l
	} else {
		yyb2746 = r.CheckBreak()
	}
	if yyb2746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2746++
	if yyhl2746 {
		yyb2746 = yyj2746 > l
	} else {
		yyb2746 = r.CheckBreak()
	}
	if yyb2746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2749 := &x.ObjectMeta
		yyv2749.CodecDecodeSelf(d)
	}
	yyj2746++
	if yyhl2746 {
		yyb2746 = yyj2746 > l
	} else {
		yyb2746 = r.CheckBreak()
	}
	if yyb2746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2750 := &x.Subsets
		yym2751 := z.DecBinary()
		_ = yym2751
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2750), d)
		}
	}
	for {
		yyj2746++
		if yyhl2746 {
			yyb2746 = yyj2746 > l
		} else {
			yyb2746 = r.CheckBreak()
		}
		if yyb2746 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2746-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2752 := z.EncBinary()
		_ = yym2752
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2753 := !z.EncBinary()
			yy2arr2753 := z.EncBasicHandle().StructToArray
			var yyq2753 [3]bool
			_, _, _ = yysep2753, yyq2753, yy2arr2753
			const yyr2753 bool = false
			yyq2753[0] = len(x.Addresses) != 0
			yyq2753[1] = len(x.NotReadyAddresses) != 0
			yyq2753[2] = len(x.Ports) != 0
			var yynn2753 int
			if yyr2753 || yy2arr2753 {
				r.EncodeArrayStart(3)
			} else {
				yynn2753 = 0
				for _, b := range yyq2753 {
					if b {
						yynn2753++
					}
				}
				r.EncodeMapStart(yynn2753)
				yynn2753 = 0
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2753[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2755 := z.EncBinary()
						_ = yym2755
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2753[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2756 := z.EncBinary()
						_ = yym2756
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2753[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2758 := z.EncBinary()
						_ = yym2758
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2753[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2759 := z.EncBinary()
						_ = yym2759
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2753[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2761 := z.EncBinary()
						_ = yym2761
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2753[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2762 := z.EncBinary()
						_ = yym2762
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2753 || yy2arr2753 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2763 := z.DecBinary()
	_ = yym2763
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2764 := r.ContainerType()
		if yyct2764 == codecSelferValueTypeMap1234 {
			yyl2764 := r.ReadMapStart()
			if yyl2764 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2764, d)
			}
		} else if yyct2764 == codecSelferValueTypeArray1234 {
			yyl2764 := r.ReadArrayStart()
			if yyl2764 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2764, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2765Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2765Slc
	var yyhl2765 bool = l >= 0
	for yyj2765 := 0; ; yyj2765++ {
		if yyhl2765 {
			if yyj2765 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2765Slc = r.DecodeBytes(yys2765Slc, true, true)
		yys2765 := string(yys2765Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2765 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2766 := &x.Addresses
				yym2767 := z.DecBinary()
				_ = yym2767
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2766), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2768 := &x.NotReadyAddresses
				yym2769 := z.DecBinary()
				_ = yym2769
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2768), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2770 := &x.Ports
				yym2771 := z.DecBinary()
				_ = yym2771
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2770), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2765)
		} // end switch yys2765
	} // end for yyj2765
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2772 int
	var yyb2772 bool
	var yyhl2772 bool = l >= 0
	yyj2772++
	if yyhl2772 {
		yyb2772 = yyj2772 > l
	} else {
		yyb2772 = r.CheckBreak()
	}
	if yyb2772 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2773 := &x.Addresses
		yym2774 := z.DecBinary()
		_ = yym2774
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2773), d)
		}
	}
	yyj2772++
	if yyhl2772 {
		yyb2772 = yyj2772 > l
	} else {
		yyb2772 = r.CheckBreak()
	}
	if yyb2772 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2775 := &x.NotReadyAddresses
		yym2776 := z.DecBinary()
		_ = yym2776
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2775), d)
		}
	}
	yyj2772++
	if yyhl2772 {
		yyb2772 = yyj2772 > l
	} else {
		yyb2772 = r.CheckBreak()
	}
	if yyb2772 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2777 := &x.Ports
		yym2778 := z.DecBinary()
		_ = yym2778
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2777), d)
		}
	}
	for {
		yyj2772++
		if yyhl2772 {
			yyb2772 = yyj2772 > l
		} else {
			yyb2772 = r.CheckBreak()
		}
		if yyb2772 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2772-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2779 := z.EncBinary()
		_ = yym2779
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2780 := !z.EncBinary()
			yy2arr2780 := z.EncBasicHandle().StructToArray
			var yyq2780 [4]bool
			_, _, _ = yysep2780, yyq2780, yy2arr2780
			const yyr2780 bool = false
			yyq2780[1] = x.Hostname != ""
			yyq2780[2] = x.NodeName != nil
			yyq2780[3] = x.TargetRef != nil
			var yynn2780 int
			if yyr2780 || yy2arr2780 {
				r.EncodeArrayStart(4)
			} else {
				yynn2780 = 1
				for _, b := range yyq2780 {
					if b {
						yynn2780++
					}
				}
				r.EncodeMapStart(yynn2780)
				yynn2780 = 0
			}
			if yyr2780 || yy2arr2780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2782 := z.EncBinary()
				_ = yym2782
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2783 := z.EncBinary()
				_ = yym2783
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2780 || yy2arr2780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2780[1] {
					yym2785 := z.EncBinary()
					_ = yym2785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2780[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2786 := z.EncBinary()
					_ = yym2786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2780 || yy2arr2780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2780[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2788 := *x.NodeName
						yym2789 := z.EncBinary()
						_ = yym2789
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2788))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2780[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2790 := *x.NodeName
						yym2791 := z.EncBinary()
						_ = yym2791
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2790))
						}
					}
				}
			}
			if yyr2780 || yy2arr2780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2780[3] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2780[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2780 || yy2arr2780 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2793 := z.DecBinary()
	_ = yym2793
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2794 := r.ContainerType()
		if yyct2794 == codecSelferValueTypeMap1234 {
			yyl2794 := r.ReadMapStart()
			if yyl2794 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2794, d)
			}
		} else if yyct2794 == codecSelferValueTypeArray1234 {
			yyl2794 := r.ReadArrayStart()
			if yyl2794 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2794, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2795Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2795Slc
	var yyhl2795 bool = l >= 0
	for yyj2795 := 0; ; yyj2795++ {
		if yyhl2795 {
			if yyj2795 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2795Slc = r.DecodeBytes(yys2795Slc, true, true)
		yys2795 := string(yys2795Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2795 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2799 := z.DecBinary()
				_ = yym2799
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2795)
		} // end switch yys2795
	} // end for yyj2795
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2801 int
	var yyb2801 bool
	var yyhl2801 bool = l >= 0
	yyj2801++
	if yyhl2801 {
		yyb2801 = yyj2801 > l
	} else {
		yyb2801 = r.CheckBreak()
	}
	if yyb2801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2801++
	if yyhl2801 {
		yyb2801 = yyj2801 > l
	} else {
		yyb2801 = r.CheckBreak()
	}
	if yyb2801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2801++
	if yyhl2801 {
		yyb2801 = yyj2801 > l
	} else {
		yyb2801 = r.CheckBreak()
	}
	if yyb2801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2805 := z.DecBinary()
		_ = yym2805
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2801++
	if yyhl2801 {
		yyb2801 = yyj2801 > l
	} else {
		yyb2801 = r.CheckBreak()
	}
	if yyb2801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2801++
		if yyhl2801 {
			yyb2801 = yyj2801 > l
		} else {
			yyb2801 = r.CheckBreak()
		}
		if yyb2801 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2801-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2807 := z.EncBinary()
		_ = yym2807
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2808 := !z.EncBinary()
			yy2arr2808 := z.EncBasicHandle().StructToArray
			var yyq2808 [3]bool
			_, _, _ = yysep2808, yyq2808, yy2arr2808
			const yyr2808 bool = false
			yyq2808[0] = x.Name != ""
			yyq2808[2] = x.Protocol != ""
			var yynn2808 int
			if yyr2808 || yy2arr2808 {
				r.EncodeArrayStart(3)
			} else {
				yynn2808 = 1
				for _, b := range yyq2808 {
					if b {
						yynn2808++
					}
				}
				r.EncodeMapStart(yynn2808)
				yynn2808 = 0
			}
			if yyr2808 || yy2arr2808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2808[0] {
					yym2810 := z.EncBinary()
					_ = yym2810
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2808[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2811 := z.EncBinary()
					_ = yym2811
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2808 || yy2arr2808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2813 := z.EncBinary()
				_ = yym2813
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2814 := z.EncBinary()
				_ = yym2814
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2808 || yy2arr2808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2808[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2808[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2808 || yy2arr2808 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2816 := z.DecBinary()
	_ = yym2816
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2817 := r.ContainerType()
		if yyct2817 == codecSelferValueTypeMap1234 {
			yyl2817 := r.ReadMapStart()
			if yyl2817 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2817, d)
			}
		} else if yyct2817 == codecSelferValueTypeArray1234 {
			yyl2817 := r.ReadArrayStart()
			if yyl2817 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2817, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2818Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2818Slc
	var yyhl2818 bool = l >= 0
	for yyj2818 := 0; ; yyj2818++ {
		if yyhl2818 {
			if yyj2818 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2818Slc = r.DecodeBytes(yys2818Slc, true, true)
		yys2818 := string(yys2818Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2818 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2818)
		} // end switch yys2818
	} // end for yyj2818
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2822 int
	var yyb2822 bool
	var yyhl2822 bool = l >= 0
	yyj2822++
	if yyhl2822 {
		yyb2822 = yyj2822 > l
	} else {
		yyb2822 = r.CheckBreak()
	}
	if yyb2822 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2822++
	if yyhl2822 {
		yyb2822 = yyj2822 > l
	} else {
		yyb2822 = r.CheckBreak()
	}
	if yyb2822 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2822++
	if yyhl2822 {
		yyb2822 = yyj2822 > l
	} else {
		yyb2822 = r.CheckBreak()
	}
	if yyb2822 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2822++
		if yyhl2822 {
			yyb2822 = yyj2822 > l
		} else {
			yyb2822 = r.CheckBreak()
		}
		if yyb2822 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2822-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2826 := z.EncBinary()
		_ = yym2826
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2827 := !z.EncBinary()
			yy2arr2827 := z.EncBasicHandle().StructToArray
			var yyq2827 [4]bool
			_, _, _ = yysep2827, yyq2827, yy2arr2827
			const yyr2827 bool = false
			yyq2827[0] = x.Kind != ""
			yyq2827[1] = x.APIVersion != ""
			yyq2827[2] = true
			var yynn2827 int
			if yyr2827 || yy2arr2827 {
				r.EncodeArrayStart(4)
			} else {
				yynn2827 = 1
				for _, b := range yyq2827 {
					if b {
						yynn2827++
					}
				}
				r.EncodeMapStart(yynn2827)
				yynn2827 = 0
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2827[0] {
					yym2829 := z.EncBinary()
					_ = yym2829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2827[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2830 := z.EncBinary()
					_ = yym2830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2827[1] {
					yym2832 := z.EncBinary()
					_ = yym2832
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2827[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2833 := z.EncBinary()
					_ = yym2833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2827[2] {
					yy2835 := &x.ListMeta
					yym2836 := z.EncBinary()
					_ = yym2836
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2835) {
					} else {
						z.EncFallback(yy2835)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2827[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2837 := &x.ListMeta
					yym2838 := z.EncBinary()
					_ = yym2838
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2837) {
					} else {
						z.EncFallback(yy2837)
					}
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2840 := z.EncBinary()
					_ = yym2840
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2841 := z.EncBinary()
					_ = yym2841
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2827 || yy2arr2827 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2842 := z.DecBinary()
	_ = yym2842
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2843 := r.ContainerType()
		if yyct2843 == codecSelferValueTypeMap1234 {
			yyl2843 := r.ReadMapStart()
			if yyl2843 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2843, d)
			}
		} else if yyct2843 == codecSelferValueTypeArray1234 {
			yyl2843 := r.ReadArrayStart()
			if yyl2843 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2843, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2844Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2844Slc
	var yyhl2844 bool = l >= 0
	for yyj2844 := 0; ; yyj2844++ {
		if yyhl2844 {
			if yyj2844 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2844Slc = r.DecodeBytes(yys2844Slc, true, true)
		yys2844 := string(yys2844Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2844 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2847 := &x.ListMeta
				yym2848 := z.DecBinary()
				_ = yym2848
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2847) {
				} else {
					z.DecFallback(yyv2847, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2849 := &x.Items
				yym2850 := z.DecBinary()
				_ = yym2850
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2849), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2844)
		} // end switch yys2844
	} // end for yyj2844
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2851 int
	var yyb2851 bool
	var yyhl2851 bool = l >= 0
	yyj2851++
	if yyhl2851 {
		yyb2851 = yyj2851 > l
	} else {
		yyb2851 = r.CheckBreak()
	}
	if yyb2851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2851++
	if yyhl2851 {
		yyb2851 = yyj2851 > l
	} else {
		yyb2851 = r.CheckBreak()
	}
	if yyb2851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2851++
	if yyhl2851 {
		yyb2851 = yyj2851 > l
	} else {
		yyb2851 = r.CheckBreak()
	}
	if yyb2851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2854 := &x.ListMeta
		yym2855 := z.DecBinary()
		_ = yym2855
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2854) {
		} else {
			z.DecFallback(yyv2854, false)
		}
	}
	yyj2851++
	if yyhl2851 {
		yyb2851 = yyj2851 > l
	} else {
		yyb2851 = r.CheckBreak()
	}
	if yyb2851 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2856 := &x.Items
		yym2857 := z.DecBinary()
		_ = yym2857
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2856), d)
		}
	}
	for {
		yyj2851++
		if yyhl2851 {
			yyb2851 = yyj2851 > l
		} else {
			yyb2851 = r.CheckBreak()
		}
		if yyb2851 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2851-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2858 := z.EncBinary()
		_ = yym2858
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2859 := !z.EncBinary()
			yy2arr2859 := z.EncBasicHandle().StructToArray
			var yyq2859 [4]bool
			_, _, _ = yysep2859, yyq2859, yy2arr2859
			const yyr2859 bool = false
			yyq2859[0] = x.PodCIDR != ""
			yyq2859[1] = x.ExternalID != ""
			yyq2859[2] = x.ProviderID != ""
			yyq2859[3] = x.Unschedulable != false
			var yynn2859 int
			if yyr2859 || yy2arr2859 {
				r.EncodeArrayStart(4)
			} else {
				yynn2859 = 0
				for _, b := range yyq2859 {
					if b {
						yynn2859++
					}
				}
				r.EncodeMapStart(yynn2859)
				yynn2859 = 0
			}
			if yyr2859 || yy2arr2859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2859[0] {
					yym2861 := z.EncBinary()
					_ = yym2861
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2859[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2862 := z.EncBinary()
					_ = yym2862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2859 || yy2arr2859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2859[1] {
					yym2864 := z.EncBinary()
					_ = yym2864
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2859[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2865 := z.EncBinary()
					_ = yym2865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2859 || yy2arr2859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2859[2] {
					yym2867 := z.EncBinary()
					_ = yym2867
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2859[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2868 := z.EncBinary()
					_ = yym2868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2859 || yy2arr2859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2859[3] {
					yym2870 := z.EncBinary()
					_ = yym2870
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2859[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2871 := z.EncBinary()
					_ = yym2871
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2859 || yy2arr2859 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2872 := z.DecBinary()
	_ = yym2872
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2873 := r.ContainerType()
		if yyct2873 == codecSelferValueTypeMap1234 {
			yyl2873 := r.ReadMapStart()
			if yyl2873 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2873, d)
			}
		} else if yyct2873 == codecSelferValueTypeArray1234 {
			yyl2873 := r.ReadArrayStart()
			if yyl2873 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2873, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2874Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2874Slc
	var yyhl2874 bool = l >= 0
	for yyj2874 := 0; ; yyj2874++ {
		if yyhl2874 {
			if yyj2874 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2874Slc = r.DecodeBytes(yys2874Slc, true, true)
		yys2874 := string(yys2874Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2874 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2874)
		} // end switch yys2874
	} // end for yyj2874
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2879 int
	var yyb2879 bool
	var yyhl2879 bool = l >= 0
	yyj2879++
	if yyhl2879 {
		yyb2879 = yyj2879 > l
	} else {
		yyb2879 = r.CheckBreak()
	}
	if yyb2879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2879++
	if yyhl2879 {
		yyb2879 = yyj2879 > l
	} else {
		yyb2879 = r.CheckBreak()
	}
	if yyb2879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2879++
	if yyhl2879 {
		yyb2879 = yyj2879 > l
	} else {
		yyb2879 = r.CheckBreak()
	}
	if yyb2879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2879++
	if yyhl2879 {
		yyb2879 = yyj2879 > l
	} else {
		yyb2879 = r.CheckBreak()
	}
	if yyb2879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2879++
		if yyhl2879 {
			yyb2879 = yyj2879 > l
		} else {
			yyb2879 = r.CheckBreak()
		}
		if yyb2879 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2879-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2884 := z.EncBinary()
		_ = yym2884
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2885 := !z.EncBinary()
			yy2arr2885 := z.EncBasicHandle().StructToArray
			var yyq2885 [1]bool
			_, _, _ = yysep2885, yyq2885, yy2arr2885
			const yyr2885 bool = false
			var yynn2885 int
			if yyr2885 || yy2arr2885 {
				r.EncodeArrayStart(1)
			} else {
				yynn2885 = 1
				for _, b := range yyq2885 {
					if b {
						yynn2885++
					}
				}
				r.EncodeMapStart(yynn2885)
				yynn2885 = 0
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2887 := z.EncBinary()
				_ = yym2887
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2888 := z.EncBinary()
				_ = yym2888
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2889 := z.DecBinary()
	_ = yym2889
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2890 := r.ContainerType()
		if yyct2890 == codecSelferValueTypeMap1234 {
			yyl2890 := r.ReadMapStart()
			if yyl2890 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2890, d)
			}
		} else if yyct2890 == codecSelferValueTypeArray1234 {
			yyl2890 := r.ReadArrayStart()
			if yyl2890 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2890, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2891Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2891Slc
	var yyhl2891 bool = l >= 0
	for yyj2891 := 0; ; yyj2891++ {
		if yyhl2891 {
			if yyj2891 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2891Slc = r.DecodeBytes(yys2891Slc, true, true)
		yys2891 := string(yys2891Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2891 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2891)
		} // end switch yys2891
	} // end for yyj2891
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2893 int
	var yyb2893 bool
	var yyhl2893 bool = l >= 0
	yyj2893++
	if yyhl2893 {
		yyb2893 = yyj2893 > l
	} else {
		yyb2893 = r.CheckBreak()
	}
	if yyb2893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2893++
		if yyhl2893 {
			yyb2893 = yyj2893 > l
		} else {
			yyb2893 = r.CheckBreak()
		}
		if yyb2893 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2893-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2895 := z.EncBinary()
		_ = yym2895
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2896 := !z.EncBinary()
			yy2arr2896 := z.EncBasicHandle().StructToArray
			var yyq2896 [1]bool
			_, _, _ = yysep2896, yyq2896, yy2arr2896
			const yyr2896 bool = false
			yyq2896[0] = true
			var yynn2896 int
			if yyr2896 || yy2arr2896 {
				r.EncodeArrayStart(1)
			} else {
				yynn2896 = 0
				for _, b := range yyq2896 {
					if b {
						yynn2896++
					}
				}
				r.EncodeMapStart(yynn2896)
				yynn2896 = 0
			}
			if yyr2896 || yy2arr2896 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2896[0] {
					yy2898 := &x.KubeletEndpoint
					yy2898.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2896[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2899 := &x.KubeletEndpoint
					yy2899.CodecEncodeSelf(e)
				}
			}
			if yyr2896 || yy2arr2896 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2900 := z.DecBinary()
	_ = yym2900
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2901 := r.ContainerType()
		if yyct2901 == codecSelferValueTypeMap1234 {
			yyl2901 := r.ReadMapStart()
			if yyl2901 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2901, d)
			}
		} else if yyct2901 == codecSelferValueTypeArray1234 {
			yyl2901 := r.ReadArrayStart()
			if yyl2901 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2901, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2902Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2902Slc
	var yyhl2902 bool = l >= 0
	for yyj2902 := 0; ; yyj2902++ {
		if yyhl2902 {
			if yyj2902 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2902Slc = r.DecodeBytes(yys2902Slc, true, true)
		yys2902 := string(yys2902Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2902 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2903 := &x.KubeletEndpoint
				yyv2903.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2902)
		} // end switch yys2902
	} // end for yyj2902
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2904 int
	var yyb2904 bool
	var yyhl2904 bool = l >= 0
	yyj2904++
	if yyhl2904 {
		yyb2904 = yyj2904 > l
	} else {
		yyb2904 = r.CheckBreak()
	}
	if yyb2904 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2905 := &x.KubeletEndpoint
		yyv2905.CodecDecodeSelf(d)
	}
	for {
		yyj2904++
		if yyhl2904 {
			yyb2904 = yyj2904 > l
		} else {
			yyb2904 = r.CheckBreak()
		}
		if yyb2904 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2904-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2906 := z.EncBinary()
		_ = yym2906
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2907 := !z.EncBinary()
			yy2arr2907 := z.EncBasicHandle().StructToArray
			var yyq2907 [10]bool
			_, _, _ = yysep2907, yyq2907, yy2arr2907
			const yyr2907 bool = false
			var yynn2907 int
			if yyr2907 || yy2arr2907 {
				r.EncodeArrayStart(10)
			} else {
				yynn2907 = 10
				for _, b := range yyq2907 {
					if b {
						yynn2907++
					}
				}
				r.EncodeMapStart(yynn2907)
				yynn2907 = 0
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2909 := z.EncBinary()
				_ = yym2909
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2910 := z.EncBinary()
				_ = yym2910
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2912 := z.EncBinary()
				_ = yym2912
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2913 := z.EncBinary()
				_ = yym2913
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2915 := z.EncBinary()
				_ = yym2915
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2916 := z.EncBinary()
				_ = yym2916
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2918 := z.EncBinary()
				_ = yym2918
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2919 := z.EncBinary()
				_ = yym2919
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2921 := z.EncBinary()
				_ = yym2921
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2922 := z.EncBinary()
				_ = yym2922
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2924 := z.EncBinary()
				_ = yym2924
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2925 := z.EncBinary()
				_ = yym2925
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2927 := z.EncBinary()
				_ = yym2927
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2928 := z.EncBinary()
				_ = yym2928
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2930 := z.EncBinary()
				_ = yym2930
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2931 := z.EncBinary()
				_ = yym2931
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2933 := z.EncBinary()
				_ = yym2933
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2934 := z.EncBinary()
				_ = yym2934
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2936 := z.EncBinary()
				_ = yym2936
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2937 := z.EncBinary()
				_ = yym2937
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr2907 || yy2arr2907 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2938 := z.DecBinary()
	_ = yym2938
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2939 := r.ContainerType()
		if yyct2939 == codecSelferValueTypeMap1234 {
			yyl2939 := r.ReadMapStart()
			if yyl2939 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2939, d)
			}
		} else if yyct2939 == codecSelferValueTypeArray1234 {
			yyl2939 := r.ReadArrayStart()
			if yyl2939 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2939, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2940Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2940Slc
	var yyhl2940 bool = l >= 0
	for yyj2940 := 0; ; yyj2940++ {
		if yyhl2940 {
			if yyj2940 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2940Slc = r.DecodeBytes(yys2940Slc, true, true)
		yys2940 := string(yys2940Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2940 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2940)
		} // end switch yys2940
	} // end for yyj2940
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2951 int
	var yyb2951 bool
	var yyhl2951 bool = l >= 0
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj2951++
	if yyhl2951 {
		yyb2951 = yyj2951 > l
	} else {
		yyb2951 = r.CheckBreak()
	}
	if yyb2951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj2951++
		if yyhl2951 {
			yyb2951 = yyj2951 > l
		} else {
			yyb2951 = r.CheckBreak()
		}
		if yyb2951 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2951-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2962 := z.EncBinary()
		_ = yym2962
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2963 := !z.EncBinary()
			yy2arr2963 := z.EncBasicHandle().StructToArray
			var yyq2963 [10]bool
			_, _, _ = yysep2963, yyq2963, yy2arr2963
			const yyr2963 bool = false
			yyq2963[0] = len(x.Capacity) != 0
			yyq2963[1] = len(x.Allocatable) != 0
			yyq2963[2] = x.Phase != ""
			yyq2963[3] = len(x.Conditions) != 0
			yyq2963[4] = len(x.Addresses) != 0
			yyq2963[5] = true
			yyq2963[6] = true
			yyq2963[7] = len(x.Images) != 0
			yyq2963[8] = len(x.VolumesInUse) != 0
			yyq2963[9] = len(x.VolumesAttached) != 0
			var yynn2963 int
			if yyr2963 || yy2arr2963 {
				r.EncodeArrayStart(10)
			} else {
				yynn2963 = 0
				for _, b := range yyq2963 {
					if b {
						yynn2963++
					}
				}
				r.EncodeMapStart(yynn2963)
				yynn2963 = 0
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2963[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2963[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2963[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2968 := z.EncBinary()
						_ = yym2968
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2963[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2969 := z.EncBinary()
						_ = yym2969
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2971 := z.EncBinary()
						_ = yym2971
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2963[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2972 := z.EncBinary()
						_ = yym2972
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[5] {
					yy2974 := &x.DaemonEndpoints
					yy2974.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2963[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2975 := &x.DaemonEndpoints
					yy2975.CodecEncodeSelf(e)
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[6] {
					yy2977 := &x.NodeInfo
					yy2977.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2963[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2978 := &x.NodeInfo
					yy2978.CodecEncodeSelf(e)
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2980 := z.EncBinary()
						_ = yym2980
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2963[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2981 := z.EncBinary()
						_ = yym2981
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2983 := z.EncBinary()
						_ = yym2983
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2963[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2984 := z.EncBinary()
						_ = yym2984
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2963[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2986 := z.EncBinary()
						_ = yym2986
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2963[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2987 := z.EncBinary()
						_ = yym2987
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr2963 || yy2arr2963 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2988 := z.DecBinary()
	_ = yym2988
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2989 := r.ContainerType()
		if yyct2989 == codecSelferValueTypeMap1234 {
			yyl2989 := r.ReadMapStart()
			if yyl2989 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2989, d)
			}
		} else if yyct2989 == codecSelferValueTypeArray1234 {
			yyl2989 := r.ReadArrayStart()
			if yyl2989 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2989, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2990Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2990Slc
	var yyhl2990 bool = l >= 0
	for yyj2990 := 0; ; yyj2990++ {
		if yyhl2990 {
			if yyj2990 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2990Slc = r.DecodeBytes(yys2990Slc, true, true)
		yys2990 := string(yys2990Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2990 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2991 := &x.Capacity
				yyv2991.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2992 := &x.Allocatable
				yyv2992.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2994 := &x.Conditions
				yym2995 := z.DecBinary()
				_ = yym2995
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2994), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2996 := &x.Addresses
				yym2997 := z.DecBinary()
				_ = yym2997
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2996), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2998 := &x.DaemonEndpoints
				yyv2998.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2999 := &x.NodeInfo
				yyv2999.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv3000 := &x.Images
				yym3001 := z.DecBinary()
				_ = yym3001
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv3000), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv3002 := &x.VolumesInUse
				yym3003 := z.DecBinary()
				_ = yym3003
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3002), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv3004 := &x.VolumesAttached
				yym3005 := z.DecBinary()
				_ = yym3005
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3004), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2990)
		} // end switch yys2990
	} // end for yyj2990
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3006 int
	var yyb3006 bool
	var yyhl3006 bool = l >= 0
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3007 := &x.Capacity
		yyv3007.CodecDecodeSelf(d)
	}
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv3008 := &x.Allocatable
		yyv3008.CodecDecodeSelf(d)
	}
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3010 := &x.Conditions
		yym3011 := z.DecBinary()
		_ = yym3011
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv3010), d)
		}
	}
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv3012 := &x.Addresses
		yym3013 := z.DecBinary()
		_ = yym3013
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv3012), d)
		}
	}
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv3014 := &x.DaemonEndpoints
		yyv3014.CodecDecodeSelf(d)
	}
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv3015 := &x.NodeInfo
		yyv3015.CodecDecodeSelf(d)
	}
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv3016 := &x.Images
		yym3017 := z.DecBinary()
		_ = yym3017
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv3016), d)
		}
	}
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv3018 := &x.VolumesInUse
		yym3019 := z.DecBinary()
		_ = yym3019
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3018), d)
		}
	}
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv3020 := &x.VolumesAttached
		yym3021 := z.DecBinary()
		_ = yym3021
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3020), d)
		}
	}
	for {
		yyj3006++
		if yyhl3006 {
			yyb3006 = yyj3006 > l
		} else {
			yyb3006 = r.CheckBreak()
		}
		if yyb3006 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3006-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3022 := z.EncBinary()
	_ = yym3022
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3023 := z.DecBinary()
	_ = yym3023
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3024 := z.EncBinary()
		_ = yym3024
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3025 := !z.EncBinary()
			yy2arr3025 := z.EncBasicHandle().StructToArray
			var yyq3025 [2]bool
			_, _, _ = yysep3025, yyq3025, yy2arr3025
			const yyr3025 bool = false
			var yynn3025 int
			if yyr3025 || yy2arr3025 {
				r.EncodeArrayStart(2)
			} else {
				yynn3025 = 2
				for _, b := range yyq3025 {
					if b {
						yynn3025++
					}
				}
				r.EncodeMapStart(yynn3025)
				yynn3025 = 0
			}
			if yyr3025 || yy2arr3025 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr3025 || yy2arr3025 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3028 := z.EncBinary()
				_ = yym3028
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3029 := z.EncBinary()
				_ = yym3029
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr3025 || yy2arr3025 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3030 := z.DecBinary()
	_ = yym3030
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3031 := r.ContainerType()
		if yyct3031 == codecSelferValueTypeMap1234 {
			yyl3031 := r.ReadMapStart()
			if yyl3031 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3031, d)
			}
		} else if yyct3031 == codecSelferValueTypeArray1234 {
			yyl3031 := r.ReadArrayStart()
			if yyl3031 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3031, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3032Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3032Slc
	var yyhl3032 bool = l >= 0
	for yyj3032 := 0; ; yyj3032++ {
		if yyhl3032 {
			if yyj3032 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3032Slc = r.DecodeBytes(yys3032Slc, true, true)
		yys3032 := string(yys3032Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3032 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3032)
		} // end switch yys3032
	} // end for yyj3032
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3035 int
	var yyb3035 bool
	var yyhl3035 bool = l >= 0
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj3035++
		if yyhl3035 {
			yyb3035 = yyj3035 > l
		} else {
			yyb3035 = r.CheckBreak()
		}
		if yyb3035 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3035-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3038 := z.EncBinary()
		_ = yym3038
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3039 := !z.EncBinary()
			yy2arr3039 := z.EncBasicHandle().StructToArray
			var yyq3039 [1]bool
			_, _, _ = yysep3039, yyq3039, yy2arr3039
			const yyr3039 bool = false
			yyq3039[0] = len(x.PreferAvoidPods) != 0
			var yynn3039 int
			if yyr3039 || yy2arr3039 {
				r.EncodeArrayStart(1)
			} else {
				yynn3039 = 0
				for _, b := range yyq3039 {
					if b {
						yynn3039++
					}
				}
				r.EncodeMapStart(yynn3039)
				yynn3039 = 0
			}
			if yyr3039 || yy2arr3039 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3039[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3041 := z.EncBinary()
						_ = yym3041
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3039[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3042 := z.EncBinary()
						_ = yym3042
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr3039 || yy2arr3039 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3043 := z.DecBinary()
	_ = yym3043
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3044 := r.ContainerType()
		if yyct3044 == codecSelferValueTypeMap1234 {
			yyl3044 := r.ReadMapStart()
			if yyl3044 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3044, d)
			}
		} else if yyct3044 == codecSelferValueTypeArray1234 {
			yyl3044 := r.ReadArrayStart()
			if yyl3044 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3044, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3045Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3045Slc
	var yyhl3045 bool = l >= 0
	for yyj3045 := 0; ; yyj3045++ {
		if yyhl3045 {
			if yyj3045 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3045Slc = r.DecodeBytes(yys3045Slc, true, true)
		yys3045 := string(yys3045Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3045 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv3046 := &x.PreferAvoidPods
				yym3047 := z.DecBinary()
				_ = yym3047
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3046), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3045)
		} // end switch yys3045
	} // end for yyj3045
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3048 int
	var yyb3048 bool
	var yyhl3048 bool = l >= 0
	yyj3048++
	if yyhl3048 {
		yyb3048 = yyj3048 > l
	} else {
		yyb3048 = r.CheckBreak()
	}
	if yyb3048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv3049 := &x.PreferAvoidPods
		yym3050 := z.DecBinary()
		_ = yym3050
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3049), d)
		}
	}
	for {
		yyj3048++
		if yyhl3048 {
			yyb3048 = yyj3048 > l
		} else {
			yyb3048 = r.CheckBreak()
		}
		if yyb3048 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3048-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3051 := z.EncBinary()
		_ = yym3051
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3052 := !z.EncBinary()
			yy2arr3052 := z.EncBasicHandle().StructToArray
			var yyq3052 [4]bool
			_, _, _ = yysep3052, yyq3052, yy2arr3052
			const yyr3052 bool = false
			yyq3052[1] = true
			yyq3052[2] = x.Reason != ""
			yyq3052[3] = x.Message != ""
			var yynn3052 int
			if yyr3052 || yy2arr3052 {
				r.EncodeArrayStart(4)
			} else {
				yynn3052 = 1
				for _, b := range yyq3052 {
					if b {
						yynn3052++
					}
				}
				r.EncodeMapStart(yynn3052)
				yynn3052 = 0
			}
			if yyr3052 || yy2arr3052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3054 := &x.PodSignature
				yy3054.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3055 := &x.PodSignature
				yy3055.CodecEncodeSelf(e)
			}
			if yyr3052 || yy2arr3052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3052[1] {
					yy3057 := &x.EvictionTime
					yym3058 := z.EncBinary()
					_ = yym3058
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3057) {
					} else if yym3058 {
						z.EncBinaryMarshal(yy3057)
					} else if !yym3058 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3057)
					} else {
						z.EncFallback(yy3057)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3052[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3059 := &x.EvictionTime
					yym3060 := z.EncBinary()
					_ = yym3060
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3059) {
					} else if yym3060 {
						z.EncBinaryMarshal(yy3059)
					} else if !yym3060 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3059)
					} else {
						z.EncFallback(yy3059)
					}
				}
			}
			if yyr3052 || yy2arr3052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3052[2] {
					yym3062 := z.EncBinary()
					_ = yym3062
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3052[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3063 := z.EncBinary()
					_ = yym3063
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3052 || yy2arr3052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3052[3] {
					yym3065 := z.EncBinary()
					_ = yym3065
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3052[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3066 := z.EncBinary()
					_ = yym3066
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3052 || yy2arr3052 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3067 := z.DecBinary()
	_ = yym3067
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3068 := r.ContainerType()
		if yyct3068 == codecSelferValueTypeMap1234 {
			yyl3068 := r.ReadMapStart()
			if yyl3068 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3068, d)
			}
		} else if yyct3068 == codecSelferValueTypeArray1234 {
			yyl3068 := r.ReadArrayStart()
			if yyl3068 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3068, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3069Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3069Slc
	var yyhl3069 bool = l >= 0
	for yyj3069 := 0; ; yyj3069++ {
		if yyhl3069 {
			if yyj3069 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3069Slc = r.DecodeBytes(yys3069Slc, true, true)
		yys3069 := string(yys3069Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3069 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv3070 := &x.PodSignature
				yyv3070.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv3071 := &x.EvictionTime
				yym3072 := z.DecBinary()
				_ = yym3072
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3071) {
				} else if yym3072 {
					z.DecBinaryUnmarshal(yyv3071)
				} else if !yym3072 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3071)
				} else {
					z.DecFallback(yyv3071, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3069)
		} // end switch yys3069
	} // end for yyj3069
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3075 int
	var yyb3075 bool
	var yyhl3075 bool = l >= 0
	yyj3075++
	if yyhl3075 {
		yyb3075 = yyj3075 > l
	} else {
		yyb3075 = r.CheckBreak()
	}
	if yyb3075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv3076 := &x.PodSignature
		yyv3076.CodecDecodeSelf(d)
	}
	yyj3075++
	if yyhl3075 {
		yyb3075 = yyj3075 > l
	} else {
		yyb3075 = r.CheckBreak()
	}
	if yyb3075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv3077 := &x.EvictionTime
		yym3078 := z.DecBinary()
		_ = yym3078
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3077) {
		} else if yym3078 {
			z.DecBinaryUnmarshal(yyv3077)
		} else if !yym3078 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3077)
		} else {
			z.DecFallback(yyv3077, false)
		}
	}
	yyj3075++
	if yyhl3075 {
		yyb3075 = yyj3075 > l
	} else {
		yyb3075 = r.CheckBreak()
	}
	if yyb3075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3075++
	if yyhl3075 {
		yyb3075 = yyj3075 > l
	} else {
		yyb3075 = r.CheckBreak()
	}
	if yyb3075 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3075++
		if yyhl3075 {
			yyb3075 = yyj3075 > l
		} else {
			yyb3075 = r.CheckBreak()
		}
		if yyb3075 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3075-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3081 := z.EncBinary()
		_ = yym3081
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3082 := !z.EncBinary()
			yy2arr3082 := z.EncBasicHandle().StructToArray
			var yyq3082 [1]bool
			_, _, _ = yysep3082, yyq3082, yy2arr3082
			const yyr3082 bool = false
			yyq3082[0] = x.PodController != nil
			var yynn3082 int
			if yyr3082 || yy2arr3082 {
				r.EncodeArrayStart(1)
			} else {
				yynn3082 = 0
				for _, b := range yyq3082 {
					if b {
						yynn3082++
					}
				}
				r.EncodeMapStart(yynn3082)
				yynn3082 = 0
			}
			if yyr3082 || yy2arr3082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3082[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3082[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3082 || yy2arr3082 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3084 := z.DecBinary()
	_ = yym3084
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3085 := r.ContainerType()
		if yyct3085 == codecSelferValueTypeMap1234 {
			yyl3085 := r.ReadMapStart()
			if yyl3085 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3085, d)
			}
		} else if yyct3085 == codecSelferValueTypeArray1234 {
			yyl3085 := r.ReadArrayStart()
			if yyl3085 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3085, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3086Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3086Slc
	var yyhl3086 bool = l >= 0
	for yyj3086 := 0; ; yyj3086++ {
		if yyhl3086 {
			if yyj3086 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3086Slc = r.DecodeBytes(yys3086Slc, true, true)
		yys3086 := string(yys3086Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3086 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3086)
		} // end switch yys3086
	} // end for yyj3086
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3088 int
	var yyb3088 bool
	var yyhl3088 bool = l >= 0
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj3088++
		if yyhl3088 {
			yyb3088 = yyj3088 > l
		} else {
			yyb3088 = r.CheckBreak()
		}
		if yyb3088 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3088-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3090 := z.EncBinary()
		_ = yym3090
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3091 := !z.EncBinary()
			yy2arr3091 := z.EncBasicHandle().StructToArray
			var yyq3091 [2]bool
			_, _, _ = yysep3091, yyq3091, yy2arr3091
			const yyr3091 bool = false
			yyq3091[1] = x.SizeBytes != 0
			var yynn3091 int
			if yyr3091 || yy2arr3091 {
				r.EncodeArrayStart(2)
			} else {
				yynn3091 = 1
				for _, b := range yyq3091 {
					if b {
						yynn3091++
					}
				}
				r.EncodeMapStart(yynn3091)
				yynn3091 = 0
			}
			if yyr3091 || yy2arr3091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3093 := z.EncBinary()
					_ = yym3093
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3094 := z.EncBinary()
					_ = yym3094
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3091 || yy2arr3091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3091[1] {
					yym3096 := z.EncBinary()
					_ = yym3096
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3091[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3097 := z.EncBinary()
					_ = yym3097
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3091 || yy2arr3091 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3098 := z.DecBinary()
	_ = yym3098
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3099 := r.ContainerType()
		if yyct3099 == codecSelferValueTypeMap1234 {
			yyl3099 := r.ReadMapStart()
			if yyl3099 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3099, d)
			}
		} else if yyct3099 == codecSelferValueTypeArray1234 {
			yyl3099 := r.ReadArrayStart()
			if yyl3099 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3099, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3100Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3100Slc
	var yyhl3100 bool = l >= 0
	for yyj3100 := 0; ; yyj3100++ {
		if yyhl3100 {
			if yyj3100 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3100Slc = r.DecodeBytes(yys3100Slc, true, true)
		yys3100 := string(yys3100Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3100 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3101 := &x.Names
				yym3102 := z.DecBinary()
				_ = yym3102
				if false {
				} else {
					z.F.DecSliceStringX(yyv3101, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3100)
		} // end switch yys3100
	} // end for yyj3100
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3104 int
	var yyb3104 bool
	var yyhl3104 bool = l >= 0
	yyj3104++
	if yyhl3104 {
		yyb3104 = yyj3104 > l
	} else {
		yyb3104 = r.CheckBreak()
	}
	if yyb3104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3105 := &x.Names
		yym3106 := z.DecBinary()
		_ = yym3106
		if false {
		} else {
			z.F.DecSliceStringX(yyv3105, false, d)
		}
	}
	yyj3104++
	if yyhl3104 {
		yyb3104 = yyj3104 > l
	} else {
		yyb3104 = r.CheckBreak()
	}
	if yyb3104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3104++
		if yyhl3104 {
			yyb3104 = yyj3104 > l
		} else {
			yyb3104 = r.CheckBreak()
		}
		if yyb3104 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3104-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3108 := z.EncBinary()
	_ = yym3108
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3109 := z.DecBinary()
	_ = yym3109
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3110 := z.EncBinary()
	_ = yym3110
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3111 := z.DecBinary()
	_ = yym3111
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3112 := z.EncBinary()
		_ = yym3112
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3113 := !z.EncBinary()
			yy2arr3113 := z.EncBasicHandle().StructToArray
			var yyq3113 [6]bool
			_, _, _ = yysep3113, yyq3113, yy2arr3113
			const yyr3113 bool = false
			yyq3113[2] = true
			yyq3113[3] = true
			yyq3113[4] = x.Reason != ""
			yyq3113[5] = x.Message != ""
			var yynn3113 int
			if yyr3113 || yy2arr3113 {
				r.EncodeArrayStart(6)
			} else {
				yynn3113 = 2
				for _, b := range yyq3113 {
					if b {
						yynn3113++
					}
				}
				r.EncodeMapStart(yynn3113)
				yynn3113 = 0
			}
			if yyr3113 || yy2arr3113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3113 || yy2arr3113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3113 || yy2arr3113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3113[2] {
					yy3117 := &x.LastHeartbeatTime
					yym3118 := z.EncBinary()
					_ = yym3118
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3117) {
					} else if yym3118 {
						z.EncBinaryMarshal(yy3117)
					} else if !yym3118 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3117)
					} else {
						z.EncFallback(yy3117)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3113[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3119 := &x.LastHeartbeatTime
					yym3120 := z.EncBinary()
					_ = yym3120
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3119) {
					} else if yym3120 {
						z.EncBinaryMarshal(yy3119)
					} else if !yym3120 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3119)
					} else {
						z.EncFallback(yy3119)
					}
				}
			}
			if yyr3113 || yy2arr3113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3113[3] {
					yy3122 := &x.LastTransitionTime
					yym3123 := z.EncBinary()
					_ = yym3123
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3122) {
					} else if yym3123 {
						z.EncBinaryMarshal(yy3122)
					} else if !yym3123 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3122)
					} else {
						z.EncFallback(yy3122)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3113[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3124 := &x.LastTransitionTime
					yym3125 := z.EncBinary()
					_ = yym3125
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3124) {
					} else if yym3125 {
						z.EncBinaryMarshal(yy3124)
					} else if !yym3125 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3124)
					} else {
						z.EncFallback(yy3124)
					}
				}
			}
			if yyr3113 || yy2arr3113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3113[4] {
					yym3127 := z.EncBinary()
					_ = yym3127
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3113[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3128 := z.EncBinary()
					_ = yym3128
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3113 || yy2arr3113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3113[5] {
					yym3130 := z.EncBinary()
					_ = yym3130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3113[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3131 := z.EncBinary()
					_ = yym3131
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3113 || yy2arr3113 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3132 := z.DecBinary()
	_ = yym3132
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3133 := r.ContainerType()
		if yyct3133 == codecSelferValueTypeMap1234 {
			yyl3133 := r.ReadMapStart()
			if yyl3133 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3133, d)
			}
		} else if yyct3133 == codecSelferValueTypeArray1234 {
			yyl3133 := r.ReadArrayStart()
			if yyl3133 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3133, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3134Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3134Slc
	var yyhl3134 bool = l >= 0
	for yyj3134 := 0; ; yyj3134++ {
		if yyhl3134 {
			if yyj3134 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3134Slc = r.DecodeBytes(yys3134Slc, true, true)
		yys3134 := string(yys3134Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3134 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3137 := &x.LastHeartbeatTime
				yym3138 := z.DecBinary()
				_ = yym3138
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3137) {
				} else if yym3138 {
					z.DecBinaryUnmarshal(yyv3137)
				} else if !yym3138 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3137)
				} else {
					z.DecFallback(yyv3137, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3139 := &x.LastTransitionTime
				yym3140 := z.DecBinary()
				_ = yym3140
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3139) {
				} else if yym3140 {
					z.DecBinaryUnmarshal(yyv3139)
				} else if !yym3140 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3139)
				} else {
					z.DecFallback(yyv3139, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3134)
		} // end switch yys3134
	} // end for yyj3134
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3143 int
	var yyb3143 bool
	var yyhl3143 bool = l >= 0
	yyj3143++
	if yyhl3143 {
		yyb3143 = yyj3143 > l
	} else {
		yyb3143 = r.CheckBreak()
	}
	if yyb3143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3143++
	if yyhl3143 {
		yyb3143 = yyj3143 > l
	} else {
		yyb3143 = r.CheckBreak()
	}
	if yyb3143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3143++
	if yyhl3143 {
		yyb3143 = yyj3143 > l
	} else {
		yyb3143 = r.CheckBreak()
	}
	if yyb3143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3146 := &x.LastHeartbeatTime
		yym3147 := z.DecBinary()
		_ = yym3147
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3146) {
		} else if yym3147 {
			z.DecBinaryUnmarshal(yyv3146)
		} else if !yym3147 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3146)
		} else {
			z.DecFallback(yyv3146, false)
		}
	}
	yyj3143++
	if yyhl3143 {
		yyb3143 = yyj3143 > l
	} else {
		yyb3143 = r.CheckBreak()
	}
	if yyb3143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3148 := &x.LastTransitionTime
		yym3149 := z.DecBinary()
		_ = yym3149
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3148) {
		} else if yym3149 {
			z.DecBinaryUnmarshal(yyv3148)
		} else if !yym3149 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3148)
		} else {
			z.DecFallback(yyv3148, false)
		}
	}
	yyj3143++
	if yyhl3143 {
		yyb3143 = yyj3143 > l
	} else {
		yyb3143 = r.CheckBreak()
	}
	if yyb3143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3143++
	if yyhl3143 {
		yyb3143 = yyj3143 > l
	} else {
		yyb3143 = r.CheckBreak()
	}
	if yyb3143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3143++
		if yyhl3143 {
			yyb3143 = yyj3143 > l
		} else {
			yyb3143 = r.CheckBreak()
		}
		if yyb3143 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3143-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3152 := z.EncBinary()
	_ = yym3152
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3153 := z.DecBinary()
	_ = yym3153
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3154 := z.EncBinary()
		_ = yym3154
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3155 := !z.EncBinary()
			yy2arr3155 := z.EncBasicHandle().StructToArray
			var yyq3155 [2]bool
			_, _, _ = yysep3155, yyq3155, yy2arr3155
			const yyr3155 bool = false
			var yynn3155 int
			if yyr3155 || yy2arr3155 {
				r.EncodeArrayStart(2)
			} else {
				yynn3155 = 2
				for _, b := range yyq3155 {
					if b {
						yynn3155++
					}
				}
				r.EncodeMapStart(yynn3155)
				yynn3155 = 0
			}
			if yyr3155 || yy2arr3155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3155 || yy2arr3155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3158 := z.EncBinary()
				_ = yym3158
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3159 := z.EncBinary()
				_ = yym3159
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3155 || yy2arr3155 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3160 := z.DecBinary()
	_ = yym3160
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3161 := r.ContainerType()
		if yyct3161 == codecSelferValueTypeMap1234 {
			yyl3161 := r.ReadMapStart()
			if yyl3161 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3161, d)
			}
		} else if yyct3161 == codecSelferValueTypeArray1234 {
			yyl3161 := r.ReadArrayStart()
			if yyl3161 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3161, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3162Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3162Slc
	var yyhl3162 bool = l >= 0
	for yyj3162 := 0; ; yyj3162++ {
		if yyhl3162 {
			if yyj3162 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3162Slc = r.DecodeBytes(yys3162Slc, true, true)
		yys3162 := string(yys3162Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3162 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3162)
		} // end switch yys3162
	} // end for yyj3162
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3165 int
	var yyb3165 bool
	var yyhl3165 bool = l >= 0
	yyj3165++
	if yyhl3165 {
		yyb3165 = yyj3165 > l
	} else {
		yyb3165 = r.CheckBreak()
	}
	if yyb3165 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3165++
	if yyhl3165 {
		yyb3165 = yyj3165 > l
	} else {
		yyb3165 = r.CheckBreak()
	}
	if yyb3165 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3165++
		if yyhl3165 {
			yyb3165 = yyj3165 > l
		} else {
			yyb3165 = r.CheckBreak()
		}
		if yyb3165 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3165-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3168 := z.EncBinary()
	_ = yym3168
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3169 := z.DecBinary()
	_ = yym3169
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3170 := z.EncBinary()
		_ = yym3170
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3171 := z.DecBinary()
	_ = yym3171
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3172 := z.EncBinary()
		_ = yym3172
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3173 := !z.EncBinary()
			yy2arr3173 := z.EncBasicHandle().StructToArray
			var yyq3173 [5]bool
			_, _, _ = yysep3173, yyq3173, yy2arr3173
			const yyr3173 bool = false
			yyq3173[0] = x.Kind != ""
			yyq3173[1] = x.APIVersion != ""
			yyq3173[2] = true
			yyq3173[3] = true
			yyq3173[4] = true
			var yynn3173 int
			if yyr3173 || yy2arr3173 {
				r.EncodeArrayStart(5)
			} else {
				yynn3173 = 0
				for _, b := range yyq3173 {
					if b {
						yynn3173++
					}
				}
				r.EncodeMapStart(yynn3173)
				yynn3173 = 0
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3173[0] {
					yym3175 := z.EncBinary()
					_ = yym3175
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3173[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3176 := z.EncBinary()
					_ = yym3176
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3173[1] {
					yym3178 := z.EncBinary()
					_ = yym3178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3173[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3179 := z.EncBinary()
					_ = yym3179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3173[2] {
					yy3181 := &x.ObjectMeta
					yy3181.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3173[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3182 := &x.ObjectMeta
					yy3182.CodecEncodeSelf(e)
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3173[3] {
					yy3184 := &x.Spec
					yy3184.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3173[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3185 := &x.Spec
					yy3185.CodecEncodeSelf(e)
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3173[4] {
					yy3187 := &x.Status
					yy3187.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3173[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3188 := &x.Status
					yy3188.CodecEncodeSelf(e)
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3189 := z.DecBinary()
	_ = yym3189
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3190 := r.ContainerType()
		if yyct3190 == codecSelferValueTypeMap1234 {
			yyl3190 := r.ReadMapStart()
			if yyl3190 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3190, d)
			}
		} else if yyct3190 == codecSelferValueTypeArray1234 {
			yyl3190 := r.ReadArrayStart()
			if yyl3190 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3190, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3191Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3191Slc
	var yyhl3191 bool = l >= 0
	for yyj3191 := 0; ; yyj3191++ {
		if yyhl3191 {
			if yyj3191 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3191Slc = r.DecodeBytes(yys3191Slc, true, true)
		yys3191 := string(yys3191Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3191 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3194 := &x.ObjectMeta
				yyv3194.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3195 := &x.Spec
				yyv3195.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3196 := &x.Status
				yyv3196.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3191)
		} // end switch yys3191
	} // end for yyj3191
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3197 int
	var yyb3197 bool
	var yyhl3197 bool = l >= 0
	yyj3197++
	if yyhl3197 {
		yyb3197 = yyj3197 > l
	} else {
		yyb3197 = r.CheckBreak()
	}
	if yyb3197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3197++
	if yyhl3197 {
		yyb3197 = yyj3197 > l
	} else {
		yyb3197 = r.CheckBreak()
	}
	if yyb3197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3197++
	if yyhl3197 {
		yyb3197 = yyj3197 > l
	} else {
		yyb3197 = r.CheckBreak()
	}
	if yyb3197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3200 := &x.ObjectMeta
		yyv3200.CodecDecodeSelf(d)
	}
	yyj3197++
	if yyhl3197 {
		yyb3197 = yyj3197 > l
	} else {
		yyb3197 = r.CheckBreak()
	}
	if yyb3197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3201 := &x.Spec
		yyv3201.CodecDecodeSelf(d)
	}
	yyj3197++
	if yyhl3197 {
		yyb3197 = yyj3197 > l
	} else {
		yyb3197 = r.CheckBreak()
	}
	if yyb3197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3202 := &x.Status
		yyv3202.CodecDecodeSelf(d)
	}
	for {
		yyj3197++
		if yyhl3197 {
			yyb3197 = yyj3197 > l
		} else {
			yyb3197 = r.CheckBreak()
		}
		if yyb3197 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3197-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3203 := z.EncBinary()
		_ = yym3203
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3204 := !z.EncBinary()
			yy2arr3204 := z.EncBasicHandle().StructToArray
			var yyq3204 [4]bool
			_, _, _ = yysep3204, yyq3204, yy2arr3204
			const yyr3204 bool = false
			yyq3204[0] = x.Kind != ""
			yyq3204[1] = x.APIVersion != ""
			yyq3204[2] = true
			var yynn3204 int
			if yyr3204 || yy2arr3204 {
				r.EncodeArrayStart(4)
			} else {
				yynn3204 = 1
				for _, b := range yyq3204 {
					if b {
						yynn3204++
					}
				}
				r.EncodeMapStart(yynn3204)
				yynn3204 = 0
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3204[0] {
					yym3206 := z.EncBinary()
					_ = yym3206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3204[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3207 := z.EncBinary()
					_ = yym3207
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3204[1] {
					yym3209 := z.EncBinary()
					_ = yym3209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3204[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3210 := z.EncBinary()
					_ = yym3210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3204[2] {
					yy3212 := &x.ListMeta
					yym3213 := z.EncBinary()
					_ = yym3213
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3212) {
					} else {
						z.EncFallback(yy3212)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3204[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3214 := &x.ListMeta
					yym3215 := z.EncBinary()
					_ = yym3215
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3214) {
					} else {
						z.EncFallback(yy3214)
					}
				}
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3217 := z.EncBinary()
					_ = yym3217
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3218 := z.EncBinary()
					_ = yym3218
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3219 := z.DecBinary()
	_ = yym3219
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3220 := r.ContainerType()
		if yyct3220 == codecSelferValueTypeMap1234 {
			yyl3220 := r.ReadMapStart()
			if yyl3220 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3220, d)
			}
		} else if yyct3220 == codecSelferValueTypeArray1234 {
			yyl3220 := r.ReadArrayStart()
			if yyl3220 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3220, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3221Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3221Slc
	var yyhl3221 bool = l >= 0
	for yyj3221 := 0; ; yyj3221++ {
		if yyhl3221 {
			if yyj3221 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3221Slc = r.DecodeBytes(yys3221Slc, true, true)
		yys3221 := string(yys3221Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3221 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3224 := &x.ListMeta
				yym3225 := z.DecBinary()
				_ = yym3225
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3224) {
				} else {
					z.DecFallback(yyv3224, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3226 := &x.Items
				yym3227 := z.DecBinary()
				_ = yym3227
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3226), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3221)
		} // end switch yys3221
	} // end for yyj3221
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3228 int
	var yyb3228 bool
	var yyhl3228 bool = l >= 0
	yyj3228++
	if yyhl3228 {
		yyb3228 = yyj3228 > l
	} else {
		yyb3228 = r.CheckBreak()
	}
	if yyb3228 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3228++
	if yyhl3228 {
		yyb3228 = yyj3228 > l
	} else {
		yyb3228 = r.CheckBreak()
	}
	if yyb3228 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3228++
	if yyhl3228 {
		yyb3228 = yyj3228 > l
	} else {
		yyb3228 = r.CheckBreak()
	}
	if yyb3228 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3231 := &x.ListMeta
		yym3232 := z.DecBinary()
		_ = yym3232
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3231) {
		} else {
			z.DecFallback(yyv3231, false)
		}
	}
	yyj3228++
	if yyhl3228 {
		yyb3228 = yyj3228 > l
	} else {
		yyb3228 = r.CheckBreak()
	}
	if yyb3228 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3233 := &x.Items
		yym3234 := z.DecBinary()
		_ = yym3234
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3233), d)
		}
	}
	for {
		yyj3228++
		if yyhl3228 {
			yyb3228 = yyj3228 > l
		} else {
			yyb3228 = r.CheckBreak()
		}
		if yyb3228 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3228-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3235 := z.EncBinary()
	_ = yym3235
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3236 := z.DecBinary()
	_ = yym3236
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3237 := z.EncBinary()
		_ = yym3237
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3238 := !z.EncBinary()
			yy2arr3238 := z.EncBasicHandle().StructToArray
			var yyq3238 [1]bool
			_, _, _ = yysep3238, yyq3238, yy2arr3238
			const yyr3238 bool = false
			yyq3238[0] = len(x.Finalizers) != 0
			var yynn3238 int
			if yyr3238 || yy2arr3238 {
				r.EncodeArrayStart(1)
			} else {
				yynn3238 = 0
				for _, b := range yyq3238 {
					if b {
						yynn3238++
					}
				}
				r.EncodeMapStart(yynn3238)
				yynn3238 = 0
			}
			if yyr3238 || yy2arr3238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3238[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3240 := z.EncBinary()
						_ = yym3240
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3238[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym3241 := z.EncBinary()
						_ = yym3241
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yyr3238 || yy2arr3238 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3242 := z.DecBinary()
	_ = yym3242
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3243 := r.ContainerType()
		if yyct3243 == codecSelferValueTypeMap1234 {
			yyl3243 := r.ReadMapStart()
			if yyl3243 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3243, d)
			}
		} else if yyct3243 == codecSelferValueTypeArray1234 {
			yyl3243 := r.ReadArrayStart()
			if yyl3243 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3243, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3244Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3244Slc
	var yyhl3244 bool = l >= 0
	for yyj3244 := 0; ; yyj3244++ {
		if yyhl3244 {
			if yyj3244 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3244Slc = r.DecodeBytes(yys3244Slc, true, true)
		yys3244 := string(yys3244Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3244 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3245 := &x.Finalizers
				yym3246 := z.DecBinary()
				_ = yym3246
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3245), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3244)
		} // end switch yys3244
	} // end for yyj3244
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3247 int
	var yyb3247 bool
	var yyhl3247 bool = l >= 0
	yyj3247++
	if yyhl3247 {
		yyb3247 = yyj3247 > l
	} else {
		yyb3247 = r.CheckBreak()
	}
	if yyb3247 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3248 := &x.Finalizers
		yym3249 := z.DecBinary()
		_ = yym3249
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3248), d)
		}
	}
	for {
		yyj3247++
		if yyhl3247 {
			yyb3247 = yyj3247 > l
		} else {
			yyb3247 = r.CheckBreak()
		}
		if yyb3247 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3247-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3250 := z.EncBinary()
		_ = yym3250
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3251 := !z.EncBinary()
			yy2arr3251 := z.EncBasicHandle().StructToArray
			var yyq3251 [1]bool
			_, _, _ = yysep3251, yyq3251, yy2arr3251
			const yyr3251 bool = false
			yyq3251[0] = x.Phase != ""
			var yynn3251 int
			if yyr3251 || yy2arr3251 {
				r.EncodeArrayStart(1)
			} else {
				yynn3251 = 0
				for _, b := range yyq3251 {
					if b {
						yynn3251++
					}
				}
				r.EncodeMapStart(yynn3251)
				yynn3251 = 0
			}
			if yyr3251 || yy2arr3251 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3251[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3251[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3251 || yy2arr3251 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3253 := z.DecBinary()
	_ = yym3253
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3254 := r.ContainerType()
		if yyct3254 == codecSelferValueTypeMap1234 {
			yyl3254 := r.ReadMapStart()
			if yyl3254 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3254, d)
			}
		} else if yyct3254 == codecSelferValueTypeArray1234 {
			yyl3254 := r.ReadArrayStart()
			if yyl3254 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3254, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3255Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3255Slc
	var yyhl3255 bool = l >= 0
	for yyj3255 := 0; ; yyj3255++ {
		if yyhl3255 {
			if yyj3255 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3255Slc = r.DecodeBytes(yys3255Slc, true, true)
		yys3255 := string(yys3255Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3255 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3255)
		} // end switch yys3255
	} // end for yyj3255
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3257 int
	var yyb3257 bool
	var yyhl3257 bool = l >= 0
	yyj3257++
	if yyhl3257 {
		yyb3257 = yyj3257 > l
	} else {
		yyb3257 = r.CheckBreak()
	}
	if yyb3257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3257++
		if yyhl3257 {
			yyb3257 = yyj3257 > l
		} else {
			yyb3257 = r.CheckBreak()
		}
		if yyb3257 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3257-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3259 := z.EncBinary()
	_ = yym3259
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3260 := z.DecBinary()
	_ = yym3260
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3261 := z.EncBinary()
		_ = yym3261
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3262 := !z.EncBinary()
			yy2arr3262 := z.EncBasicHandle().StructToArray
			var yyq3262 [5]bool
			_, _, _ = yysep3262, yyq3262, yy2arr3262
			const yyr3262 bool = false
			yyq3262[0] = x.Kind != ""
			yyq3262[1] = x.APIVersion != ""
			yyq3262[2] = true
			yyq3262[3] = true
			yyq3262[4] = true
			var yynn3262 int
			if yyr3262 || yy2arr3262 {
				r.EncodeArrayStart(5)
			} else {
				yynn3262 = 0
				for _, b := range yyq3262 {
					if b {
						yynn3262++
					}
				}
				r.EncodeMapStart(yynn3262)
				yynn3262 = 0
			}
			if yyr3262 || yy2arr3262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3262[0] {
					yym3264 := z.EncBinary()
					_ = yym3264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3262[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3265 := z.EncBinary()
					_ = yym3265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3262 || yy2arr3262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3262[1] {
					yym3267 := z.EncBinary()
					_ = yym3267
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3262[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3268 := z.EncBinary()
					_ = yym3268
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3262 || yy2arr3262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3262[2] {
					yy3270 := &x.ObjectMeta
					yy3270.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3262[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3271 := &x.ObjectMeta
					yy3271.CodecEncodeSelf(e)
				}
			}
			if yyr3262 || yy2arr3262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3262[3] {
					yy3273 := &x.Spec
					yy3273.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3262[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3274 := &x.Spec
					yy3274.CodecEncodeSelf(e)
				}
			}
			if yyr3262 || yy2arr3262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3262[4] {
					yy3276 := &x.Status
					yy3276.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3262[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3277 := &x.Status
					yy3277.CodecEncodeSelf(e)
				}
			}
			if yyr3262 || yy2arr3262 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3278 := z.DecBinary()
	_ = yym3278
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3279 := r.ContainerType()
		if yyct3279 == codecSelferValueTypeMap1234 {
			yyl3279 := r.ReadMapStart()
			if yyl3279 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3279, d)
			}
		} else if yyct3279 == codecSelferValueTypeArray1234 {
			yyl3279 := r.ReadArrayStart()
			if yyl3279 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3279, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3280Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3280Slc
	var yyhl3280 bool = l >= 0
	for yyj3280 := 0; ; yyj3280++ {
		if yyhl3280 {
			if yyj3280 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3280Slc = r.DecodeBytes(yys3280Slc, true, true)
		yys3280 := string(yys3280Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3280 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3283 := &x.ObjectMeta
				yyv3283.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3284 := &x.Spec
				yyv3284.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3285 := &x.Status
				yyv3285.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3280)
		} // end switch yys3280
	} // end for yyj3280
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3286 int
	var yyb3286 bool
	var yyhl3286 bool = l >= 0
	yyj3286++
	if yyhl3286 {
		yyb3286 = yyj3286 > l
	} else {
		yyb3286 = r.CheckBreak()
	}
	if yyb3286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3286++
	if yyhl3286 {
		yyb3286 = yyj3286 > l
	} else {
		yyb3286 = r.CheckBreak()
	}
	if yyb3286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3286++
	if yyhl3286 {
		yyb3286 = yyj3286 > l
	} else {
		yyb3286 = r.CheckBreak()
	}
	if yyb3286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3289 := &x.ObjectMeta
		yyv3289.CodecDecodeSelf(d)
	}
	yyj3286++
	if yyhl3286 {
		yyb3286 = yyj3286 > l
	} else {
		yyb3286 = r.CheckBreak()
	}
	if yyb3286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3290 := &x.Spec
		yyv3290.CodecDecodeSelf(d)
	}
	yyj3286++
	if yyhl3286 {
		yyb3286 = yyj3286 > l
	} else {
		yyb3286 = r.CheckBreak()
	}
	if yyb3286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3291 := &x.Status
		yyv3291.CodecDecodeSelf(d)
	}
	for {
		yyj3286++
		if yyhl3286 {
			yyb3286 = yyj3286 > l
		} else {
			yyb3286 = r.CheckBreak()
		}
		if yyb3286 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3286-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3292 := z.EncBinary()
		_ = yym3292
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3293 := !z.EncBinary()
			yy2arr3293 := z.EncBasicHandle().StructToArray
			var yyq3293 [4]bool
			_, _, _ = yysep3293, yyq3293, yy2arr3293
			const yyr3293 bool = false
			yyq3293[0] = x.Kind != ""
			yyq3293[1] = x.APIVersion != ""
			yyq3293[2] = true
			var yynn3293 int
			if yyr3293 || yy2arr3293 {
				r.EncodeArrayStart(4)
			} else {
				yynn3293 = 1
				for _, b := range yyq3293 {
					if b {
						yynn3293++
					}
				}
				r.EncodeMapStart(yynn3293)
				yynn3293 = 0
			}
			if yyr3293 || yy2arr3293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3293[0] {
					yym3295 := z.EncBinary()
					_ = yym3295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3293[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3296 := z.EncBinary()
					_ = yym3296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3293 || yy2arr3293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3293[1] {
					yym3298 := z.EncBinary()
					_ = yym3298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3293[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3299 := z.EncBinary()
					_ = yym3299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3293 || yy2arr3293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3293[2] {
					yy3301 := &x.ListMeta
					yym3302 := z.EncBinary()
					_ = yym3302
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3301) {
					} else {
						z.EncFallback(yy3301)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3293[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3303 := &x.ListMeta
					yym3304 := z.EncBinary()
					_ = yym3304
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3303) {
					} else {
						z.EncFallback(yy3303)
					}
				}
			}
			if yyr3293 || yy2arr3293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3306 := z.EncBinary()
					_ = yym3306
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3307 := z.EncBinary()
					_ = yym3307
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3293 || yy2arr3293 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3308 := z.DecBinary()
	_ = yym3308
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3309 := r.ContainerType()
		if yyct3309 == codecSelferValueTypeMap1234 {
			yyl3309 := r.ReadMapStart()
			if yyl3309 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3309, d)
			}
		} else if yyct3309 == codecSelferValueTypeArray1234 {
			yyl3309 := r.ReadArrayStart()
			if yyl3309 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3309, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3310Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3310Slc
	var yyhl3310 bool = l >= 0
	for yyj3310 := 0; ; yyj3310++ {
		if yyhl3310 {
			if yyj3310 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3310Slc = r.DecodeBytes(yys3310Slc, true, true)
		yys3310 := string(yys3310Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3310 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3313 := &x.ListMeta
				yym3314 := z.DecBinary()
				_ = yym3314
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3313) {
				} else {
					z.DecFallback(yyv3313, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3315 := &x.Items
				yym3316 := z.DecBinary()
				_ = yym3316
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3315), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3310)
		} // end switch yys3310
	} // end for yyj3310
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3317 int
	var yyb3317 bool
	var yyhl3317 bool = l >= 0
	yyj3317++
	if yyhl3317 {
		yyb3317 = yyj3317 > l
	} else {
		yyb3317 = r.CheckBreak()
	}
	if yyb3317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3317++
	if yyhl3317 {
		yyb3317 = yyj3317 > l
	} else {
		yyb3317 = r.CheckBreak()
	}
	if yyb3317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3317++
	if yyhl3317 {
		yyb3317 = yyj3317 > l
	} else {
		yyb3317 = r.CheckBreak()
	}
	if yyb3317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3320 := &x.ListMeta
		yym3321 := z.DecBinary()
		_ = yym3321
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3320) {
		} else {
			z.DecFallback(yyv3320, false)
		}
	}
	yyj3317++
	if yyhl3317 {
		yyb3317 = yyj3317 > l
	} else {
		yyb3317 = r.CheckBreak()
	}
	if yyb3317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3322 := &x.Items
		yym3323 := z.DecBinary()
		_ = yym3323
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3322), d)
		}
	}
	for {
		yyj3317++
		if yyhl3317 {
			yyb3317 = yyj3317 > l
		} else {
			yyb3317 = r.CheckBreak()
		}
		if yyb3317 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3317-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3324 := z.EncBinary()
		_ = yym3324
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3325 := !z.EncBinary()
			yy2arr3325 := z.EncBasicHandle().StructToArray
			var yyq3325 [4]bool
			_, _, _ = yysep3325, yyq3325, yy2arr3325
			const yyr3325 bool = false
			yyq3325[0] = x.Kind != ""
			yyq3325[1] = x.APIVersion != ""
			yyq3325[2] = true
			var yynn3325 int
			if yyr3325 || yy2arr3325 {
				r.EncodeArrayStart(4)
			} else {
				yynn3325 = 1
				for _, b := range yyq3325 {
					if b {
						yynn3325++
					}
				}
				r.EncodeMapStart(yynn3325)
				yynn3325 = 0
			}
			if yyr3325 || yy2arr3325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3325[0] {
					yym3327 := z.EncBinary()
					_ = yym3327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3325[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3328 := z.EncBinary()
					_ = yym3328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3325 || yy2arr3325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3325[1] {
					yym3330 := z.EncBinary()
					_ = yym3330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3325[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3331 := z.EncBinary()
					_ = yym3331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3325 || yy2arr3325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3325[2] {
					yy3333 := &x.ObjectMeta
					yy3333.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3325[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3334 := &x.ObjectMeta
					yy3334.CodecEncodeSelf(e)
				}
			}
			if yyr3325 || yy2arr3325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3336 := &x.Target
				yy3336.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3337 := &x.Target
				yy3337.CodecEncodeSelf(e)
			}
			if yyr3325 || yy2arr3325 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3338 := z.DecBinary()
	_ = yym3338
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3339 := r.ContainerType()
		if yyct3339 == codecSelferValueTypeMap1234 {
			yyl3339 := r.ReadMapStart()
			if yyl3339 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3339, d)
			}
		} else if yyct3339 == codecSelferValueTypeArray1234 {
			yyl3339 := r.ReadArrayStart()
			if yyl3339 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3339, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3340Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3340Slc
	var yyhl3340 bool = l >= 0
	for yyj3340 := 0; ; yyj3340++ {
		if yyhl3340 {
			if yyj3340 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3340Slc = r.DecodeBytes(yys3340Slc, true, true)
		yys3340 := string(yys3340Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3340 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3343 := &x.ObjectMeta
				yyv3343.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3344 := &x.Target
				yyv3344.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3340)
		} // end switch yys3340
	} // end for yyj3340
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3345 int
	var yyb3345 bool
	var yyhl3345 bool = l >= 0
	yyj3345++
	if yyhl3345 {
		yyb3345 = yyj3345 > l
	} else {
		yyb3345 = r.CheckBreak()
	}
	if yyb3345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3345++
	if yyhl3345 {
		yyb3345 = yyj3345 > l
	} else {
		yyb3345 = r.CheckBreak()
	}
	if yyb3345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3345++
	if yyhl3345 {
		yyb3345 = yyj3345 > l
	} else {
		yyb3345 = r.CheckBreak()
	}
	if yyb3345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3348 := &x.ObjectMeta
		yyv3348.CodecDecodeSelf(d)
	}
	yyj3345++
	if yyhl3345 {
		yyb3345 = yyj3345 > l
	} else {
		yyb3345 = r.CheckBreak()
	}
	if yyb3345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3349 := &x.Target
		yyv3349.CodecDecodeSelf(d)
	}
	for {
		yyj3345++
		if yyhl3345 {
			yyb3345 = yyj3345 > l
		} else {
			yyb3345 = r.CheckBreak()
		}
		if yyb3345 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3345-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3350 := z.EncBinary()
		_ = yym3350
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3351 := !z.EncBinary()
			yy2arr3351 := z.EncBasicHandle().StructToArray
			var yyq3351 [1]bool
			_, _, _ = yysep3351, yyq3351, yy2arr3351
			const yyr3351 bool = false
			yyq3351[0] = x.UID != nil
			var yynn3351 int
			if yyr3351 || yy2arr3351 {
				r.EncodeArrayStart(1)
			} else {
				yynn3351 = 0
				for _, b := range yyq3351 {
					if b {
						yynn3351++
					}
				}
				r.EncodeMapStart(yynn3351)
				yynn3351 = 0
			}
			if yyr3351 || yy2arr3351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3351[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3353 := *x.UID
						yym3354 := z.EncBinary()
						_ = yym3354
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3353) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3353))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3351[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3355 := *x.UID
						yym3356 := z.EncBinary()
						_ = yym3356
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3355) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3355))
						}
					}
				}
			}
			if yyr3351 || yy2arr3351 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3357 := z.DecBinary()
	_ = yym3357
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3358 := r.ContainerType()
		if yyct3358 == codecSelferValueTypeMap1234 {
			yyl3358 := r.ReadMapStart()
			if yyl3358 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3358, d)
			}
		} else if yyct3358 == codecSelferValueTypeArray1234 {
			yyl3358 := r.ReadArrayStart()
			if yyl3358 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3358, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3359Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3359Slc
	var yyhl3359 bool = l >= 0
	for yyj3359 := 0; ; yyj3359++ {
		if yyhl3359 {
			if yyj3359 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3359Slc = r.DecodeBytes(yys3359Slc, true, true)
		yys3359 := string(yys3359Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3359 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3361 := z.DecBinary()
				_ = yym3361
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3359)
		} // end switch yys3359
	} // end for yyj3359
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3362 int
	var yyb3362 bool
	var yyhl3362 bool = l >= 0
	yyj3362++
	if yyhl3362 {
		yyb3362 = yyj3362 > l
	} else {
		yyb3362 = r.CheckBreak()
	}
	if yyb3362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3364 := z.DecBinary()
		_ = yym3364
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3362++
		if yyhl3362 {
			yyb3362 = yyj3362 > l
		} else {
			yyb3362 = r.CheckBreak()
		}
		if yyb3362 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3362-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3365 := z.EncBinary()
		_ = yym3365
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3366 := !z.EncBinary()
			yy2arr3366 := z.EncBasicHandle().StructToArray
			var yyq3366 [5]bool
			_, _, _ = yysep3366, yyq3366, yy2arr3366
			const yyr3366 bool = false
			yyq3366[0] = x.Kind != ""
			yyq3366[1] = x.APIVersion != ""
			yyq3366[2] = x.GracePeriodSeconds != nil
			yyq3366[3] = x.Preconditions != nil
			yyq3366[4] = x.OrphanDependents != nil
			var yynn3366 int
			if yyr3366 || yy2arr3366 {
				r.EncodeArrayStart(5)
			} else {
				yynn3366 = 0
				for _, b := range yyq3366 {
					if b {
						yynn3366++
					}
				}
				r.EncodeMapStart(yynn3366)
				yynn3366 = 0
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[0] {
					yym3368 := z.EncBinary()
					_ = yym3368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3366[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3369 := z.EncBinary()
					_ = yym3369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[1] {
					yym3371 := z.EncBinary()
					_ = yym3371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3366[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3372 := z.EncBinary()
					_ = yym3372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3374 := *x.GracePeriodSeconds
						yym3375 := z.EncBinary()
						_ = yym3375
						if false {
						} else {
							r.EncodeInt(int64(yy3374))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3366[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3376 := *x.GracePeriodSeconds
						yym3377 := z.EncBinary()
						_ = yym3377
						if false {
						} else {
							r.EncodeInt(int64(yy3376))
						}
					}
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3366[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3380 := *x.OrphanDependents
						yym3381 := z.EncBinary()
						_ = yym3381
						if false {
						} else {
							r.EncodeBool(bool(yy3380))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3366[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3382 := *x.OrphanDependents
						yym3383 := z.EncBinary()
						_ = yym3383
						if false {
						} else {
							r.EncodeBool(bool(yy3382))
						}
					}
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3384 := z.DecBinary()
	_ = yym3384
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3385 := r.ContainerType()
		if yyct3385 == codecSelferValueTypeMap1234 {
			yyl3385 := r.ReadMapStart()
			if yyl3385 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3385, d)
			}
		} else if yyct3385 == codecSelferValueTypeArray1234 {
			yyl3385 := r.ReadArrayStart()
			if yyl3385 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3385, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3386Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3386Slc
	var yyhl3386 bool = l >= 0
	for yyj3386 := 0; ; yyj3386++ {
		if yyhl3386 {
			if yyj3386 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3386Slc = r.DecodeBytes(yys3386Slc, true, true)
		yys3386 := string(yys3386Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3386 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3390 := z.DecBinary()
				_ = yym3390
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3393 := z.DecBinary()
				_ = yym3393
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3386)
		} // end switch yys3386
	} // end for yyj3386
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3394 int
	var yyb3394 bool
	var yyhl3394 bool = l >= 0
	yyj3394++
	if yyhl3394 {
		yyb3394 = yyj3394 > l
	} else {
		yyb3394 = r.CheckBreak()
	}
	if yyb3394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3394++
	if yyhl3394 {
		yyb3394 = yyj3394 > l
	} else {
		yyb3394 = r.CheckBreak()
	}
	if yyb3394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3394++
	if yyhl3394 {
		yyb3394 = yyj3394 > l
	} else {
		yyb3394 = r.CheckBreak()
	}
	if yyb3394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3398 := z.DecBinary()
		_ = yym3398
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3394++
	if yyhl3394 {
		yyb3394 = yyj3394 > l
	} else {
		yyb3394 = r.CheckBreak()
	}
	if yyb3394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3394++
	if yyhl3394 {
		yyb3394 = yyj3394 > l
	} else {
		yyb3394 = r.CheckBreak()
	}
	if yyb3394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3401 := z.DecBinary()
		_ = yym3401
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3394++
		if yyhl3394 {
			yyb3394 = yyj3394 > l
		} else {
			yyb3394 = r.CheckBreak()
		}
		if yyb3394 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3394-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3402 := z.EncBinary()
		_ = yym3402
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3403 := !z.EncBinary()
			yy2arr3403 := z.EncBasicHandle().StructToArray
			var yyq3403 [4]bool
			_, _, _ = yysep3403, yyq3403, yy2arr3403
			const yyr3403 bool = false
			yyq3403[0] = x.Kind != ""
			yyq3403[1] = x.APIVersion != ""
			var yynn3403 int
			if yyr3403 || yy2arr3403 {
				r.EncodeArrayStart(4)
			} else {
				yynn3403 = 2
				for _, b := range yyq3403 {
					if b {
						yynn3403++
					}
				}
				r.EncodeMapStart(yynn3403)
				yynn3403 = 0
			}
			if yyr3403 || yy2arr3403 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3403[0] {
					yym3405 := z.EncBinary()
					_ = yym3405
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3403[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3406 := z.EncBinary()
					_ = yym3406
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3403 || yy2arr3403 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3403[1] {
					yym3408 := z.EncBinary()
					_ = yym3408
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3403[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3409 := z.EncBinary()
					_ = yym3409
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3403 || yy2arr3403 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3411 := z.EncBinary()
				_ = yym3411
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3412 := z.EncBinary()
				_ = yym3412
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3403 || yy2arr3403 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3414 := z.EncBinary()
				_ = yym3414
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3415 := z.EncBinary()
				_ = yym3415
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3403 || yy2arr3403 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3416 := z.DecBinary()
	_ = yym3416
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3417 := r.ContainerType()
		if yyct3417 == codecSelferValueTypeMap1234 {
			yyl3417 := r.ReadMapStart()
			if yyl3417 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3417, d)
			}
		} else if yyct3417 == codecSelferValueTypeArray1234 {
			yyl3417 := r.ReadArrayStart()
			if yyl3417 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3417, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3418Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3418Slc
	var yyhl3418 bool = l >= 0
	for yyj3418 := 0; ; yyj3418++ {
		if yyhl3418 {
			if yyj3418 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3418Slc = r.DecodeBytes(yys3418Slc, true, true)
		yys3418 := string(yys3418Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3418 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3418)
		} // end switch yys3418
	} // end for yyj3418
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3423 int
	var yyb3423 bool
	var yyhl3423 bool = l >= 0
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3423++
		if yyhl3423 {
			yyb3423 = yyj3423 > l
		} else {
			yyb3423 = r.CheckBreak()
		}
		if yyb3423 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3423-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3428 := z.EncBinary()
		_ = yym3428
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3429 := !z.EncBinary()
			yy2arr3429 := z.EncBasicHandle().StructToArray
			var yyq3429 [7]bool
			_, _, _ = yysep3429, yyq3429, yy2arr3429
			const yyr3429 bool = false
			yyq3429[0] = x.Kind != ""
			yyq3429[1] = x.APIVersion != ""
			yyq3429[2] = x.LabelSelector != ""
			yyq3429[3] = x.FieldSelector != ""
			yyq3429[4] = x.Watch != false
			yyq3429[5] = x.ResourceVersion != ""
			yyq3429[6] = x.TimeoutSeconds != nil
			var yynn3429 int
			if yyr3429 || yy2arr3429 {
				r.EncodeArrayStart(7)
			} else {
				yynn3429 = 0
				for _, b := range yyq3429 {
					if b {
						yynn3429++
					}
				}
				r.EncodeMapStart(yynn3429)
				yynn3429 = 0
			}
			if yyr3429 || yy2arr3429 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3429[0] {
					yym3431 := z.EncBinary()
					_ = yym3431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3429[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3432 := z.EncBinary()
					_ = yym3432
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3429 || yy2arr3429 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3429[1] {
					yym3434 := z.EncBinary()
					_ = yym3434
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3429[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3435 := z.EncBinary()
					_ = yym3435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3429 || yy2arr3429 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3429[2] {
					yym3437 := z.EncBinary()
					_ = yym3437
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3429[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3438 := z.EncBinary()
					_ = yym3438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr3429 || yy2arr3429 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3429[3] {
					yym3440 := z.EncBinary()
					_ = yym3440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3429[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3441 := z.EncBinary()
					_ = yym3441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr3429 || yy2arr3429 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3429[4] {
					yym3443 := z.EncBinary()
					_ = yym3443
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3429[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3444 := z.EncBinary()
					_ = yym3444
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr3429 || yy2arr3429 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3429[5] {
					yym3446 := z.EncBinary()
					_ = yym3446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3429[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3447 := z.EncBinary()
					_ = yym3447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3429 || yy2arr3429 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3429[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3449 := *x.TimeoutSeconds
						yym3450 := z.EncBinary()
						_ = yym3450
						if false {
						} else {
							r.EncodeInt(int64(yy3449))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3429[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy3451 := *x.TimeoutSeconds
						yym3452 := z.EncBinary()
						_ = yym3452
						if false {
						} else {
							r.EncodeInt(int64(yy3451))
						}
					}
				}
			}
			if yyr3429 || yy2arr3429 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3453 := z.DecBinary()
	_ = yym3453
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3454 := r.ContainerType()
		if yyct3454 == codecSelferValueTypeMap1234 {
			yyl3454 := r.ReadMapStart()
			if yyl3454 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3454, d)
			}
		} else if yyct3454 == codecSelferValueTypeArray1234 {
			yyl3454 := r.ReadArrayStart()
			if yyl3454 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3454, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3455Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3455Slc
	var yyhl3455 bool = l >= 0
	for yyj3455 := 0; ; yyj3455++ {
		if yyhl3455 {
			if yyj3455 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3455Slc = r.DecodeBytes(yys3455Slc, true, true)
		yys3455 := string(yys3455Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3455 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3463 := z.DecBinary()
				_ = yym3463
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3455)
		} // end switch yys3455
	} // end for yyj3455
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3464 int
	var yyb3464 bool
	var yyhl3464 bool = l >= 0
	yyj3464++
	if yyhl3464 {
		yyb3464 = yyj3464 > l
	} else {
		yyb3464 = r.CheckBreak()
	}
	if yyb3464 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3464++
	if yyhl3464 {
		yyb3464 = yyj3464 > l
	} else {
		yyb3464 = r.CheckBreak()
	}
	if yyb3464 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3464++
	if yyhl3464 {
		yyb3464 = yyj3464 > l
	} else {
		yyb3464 = r.CheckBreak()
	}
	if yyb3464 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj3464++
	if yyhl3464 {
		yyb3464 = yyj3464 > l
	} else {
		yyb3464 = r.CheckBreak()
	}
	if yyb3464 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj3464++
	if yyhl3464 {
		yyb3464 = yyj3464 > l
	} else {
		yyb3464 = r.CheckBreak()
	}
	if yyb3464 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3464++
	if yyhl3464 {
		yyb3464 = yyj3464 > l
	} else {
		yyb3464 = r.CheckBreak()
	}
	if yyb3464 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3464++
	if yyhl3464 {
		yyb3464 = yyj3464 > l
	} else {
		yyb3464 = r.CheckBreak()
	}
	if yyb3464 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3472 := z.DecBinary()
		_ = yym3472
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3464++
		if yyhl3464 {
			yyb3464 = yyj3464 > l
		} else {
			yyb3464 = r.CheckBreak()
		}
		if yyb3464 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3464-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3473 := z.EncBinary()
		_ = yym3473
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3474 := !z.EncBinary()
			yy2arr3474 := z.EncBasicHandle().StructToArray
			var yyq3474 [10]bool
			_, _, _ = yysep3474, yyq3474, yy2arr3474
			const yyr3474 bool = false
			yyq3474[0] = x.Kind != ""
			yyq3474[1] = x.APIVersion != ""
			yyq3474[2] = x.Container != ""
			yyq3474[3] = x.Follow != false
			yyq3474[4] = x.Previous != false
			yyq3474[5] = x.SinceSeconds != nil
			yyq3474[6] = x.SinceTime != nil
			yyq3474[7] = x.Timestamps != false
			yyq3474[8] = x.TailLines != nil
			yyq3474[9] = x.LimitBytes != nil
			var yynn3474 int
			if yyr3474 || yy2arr3474 {
				r.EncodeArrayStart(10)
			} else {
				yynn3474 = 0
				for _, b := range yyq3474 {
					if b {
						yynn3474++
					}
				}
				r.EncodeMapStart(yynn3474)
				yynn3474 = 0
			}
			if yyr3474 || yy2arr3474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3474[0] {
					yym3476 := z.EncBinary()
					_ = yym3476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3474[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3477 := z.EncBinary()
					_ = yym3477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3474 || yy2arr3474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3474[1] {
					yym3479 := z.EncBinary()
					_ = yym3479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3474[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3480 := z.EncBinary()
					_ = yym3480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3474 || yy2arr3474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3474[2] {
					yym3482 := z.EncBinary()
					_ = yym3482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3474[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3483 := z.EncBinary()
					_ = yym3483
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3474 || yy2arr3474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3474[3] {
					yym3485 := z.EncBinary()
					_ = yym3485
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3474[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3486 := z.EncBinary()
					_ = yym3486
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr3474 || yy2arr3474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3474[4] {
					yym3488 := z.EncBinary()
					_ = yym3488
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3474[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3489 := z.EncBinary()
					_ = yym3489
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr3474 || yy2arr3474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3474[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3491 := *x.SinceSeconds
						yym3492 := z.EncBinary()
						_ = yym3492
						if false {
						} else {
							r.EncodeInt(int64(yy3491))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3474[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3493 := *x.SinceSeconds
						yym3494 := z.EncBinary()
						_ = yym3494
						if false {
						} else {
							r.EncodeInt(int64(yy3493))
						}
					}
				}
			}
			if yyr3474 || yy2arr3474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3474[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3496 := z.EncBinary()
						_ = yym3496
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3496 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3496 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3474[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3497 := z.EncBinary()
						_ = yym3497
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3497 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3497 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr3474 || yy2arr3474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3474[7] {
					yym3499 := z.EncBinary()
					_ = yym3499
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3474[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3500 := z.EncBinary()
					_ = yym3500
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr3474 || yy2arr3474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3474[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3502 := *x.TailLines
						yym3503 := z.EncBinary()
						_ = yym3503
						if false {
						} else {
							r.EncodeInt(int64(yy3502))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3474[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3504 := *x.TailLines
						yym3505 := z.EncBinary()
						_ = yym3505
						if false {
						} else {
							r.EncodeInt(int64(yy3504))
						}
					}
				}
			}
			if yyr3474 || yy2arr3474 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3474[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3507 := *x.LimitBytes
						yym3508 := z.EncBinary()
						_ = yym3508
						if false {
						} else {
							r.EncodeInt(int64(yy3507))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3474[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3509 := *x.LimitBytes
						yym3510 := z.EncBinary()
						_ = yym3510
						if false {
						} else {
							r.EncodeInt(int64(yy3509))
						}
					}
				}
			}
			if yyr3474 || yy2arr3474 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3511 := z.DecBinary()
	_ = yym3511
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3512 := r.ContainerType()
		if yyct3512 == codecSelferValueTypeMap1234 {
			yyl3512 := r.ReadMapStart()
			if yyl3512 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3512, d)
			}
		} else if yyct3512 == codecSelferValueTypeArray1234 {
			yyl3512 := r.ReadArrayStart()
			if yyl3512 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3512, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3513Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3513Slc
	var yyhl3513 bool = l >= 0
	for yyj3513 := 0; ; yyj3513++ {
		if yyhl3513 {
			if yyj3513 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3513Slc = r.DecodeBytes(yys3513Slc, true, true)
		yys3513 := string(yys3513Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3513 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3520 := z.DecBinary()
				_ = yym3520
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3522 := z.DecBinary()
				_ = yym3522
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3522 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3522 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3525 := z.DecBinary()
				_ = yym3525
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3527 := z.DecBinary()
				_ = yym3527
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3513)
		} // end switch yys3513
	} // end for yyj3513
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3528 int
	var yyb3528 bool
	var yyhl3528 bool = l >= 0
	yyj3528++
	if yyhl3528 {
		yyb3528 = yyj3528 > l
	} else {
		yyb3528 = r.CheckBreak()
	}
	if yyb3528 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3528++
	if yyhl3528 {
		yyb3528 = yyj3528 > l
	} else {
		yyb3528 = r.CheckBreak()
	}
	if yyb3528 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3528++
	if yyhl3528 {
		yyb3528 = yyj3528 > l
	} else {
		yyb3528 = r.CheckBreak()
	}
	if yyb3528 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3528++
	if yyhl3528 {
		yyb3528 = yyj3528 > l
	} else {
		yyb3528 = r.CheckBreak()
	}
	if yyb3528 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3528++
	if yyhl3528 {
		yyb3528 = yyj3528 > l
	} else {
		yyb3528 = r.CheckBreak()
	}
	if yyb3528 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3528++
	if yyhl3528 {
		yyb3528 = yyj3528 > l
	} else {
		yyb3528 = r.CheckBreak()
	}
	if yyb3528 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3535 := z.DecBinary()
		_ = yym3535
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3528++
	if yyhl3528 {
		yyb3528 = yyj3528 > l
	} else {
		yyb3528 = r.CheckBreak()
	}
	if yyb3528 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3537 := z.DecBinary()
		_ = yym3537
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3537 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3537 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3528++
	if yyhl3528 {
		yyb3528 = yyj3528 > l
	} else {
		yyb3528 = r.CheckBreak()
	}
	if yyb3528 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3528++
	if yyhl3528 {
		yyb3528 = yyj3528 > l
	} else {
		yyb3528 = r.CheckBreak()
	}
	if yyb3528 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3540 := z.DecBinary()
		_ = yym3540
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3528++
	if yyhl3528 {
		yyb3528 = yyj3528 > l
	} else {
		yyb3528 = r.CheckBreak()
	}
	if yyb3528 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3542 := z.DecBinary()
		_ = yym3542
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3528++
		if yyhl3528 {
			yyb3528 = yyj3528 > l
		} else {
			yyb3528 = r.CheckBreak()
		}
		if yyb3528 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3528-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3543 := z.EncBinary()
		_ = yym3543
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3544 := !z.EncBinary()
			yy2arr3544 := z.EncBasicHandle().StructToArray
			var yyq3544 [7]bool
			_, _, _ = yysep3544, yyq3544, yy2arr3544
			const yyr3544 bool = false
			yyq3544[0] = x.Kind != ""
			yyq3544[1] = x.APIVersion != ""
			yyq3544[2] = x.Stdin != false
			yyq3544[3] = x.Stdout != false
			yyq3544[4] = x.Stderr != false
			yyq3544[5] = x.TTY != false
			yyq3544[6] = x.Container != ""
			var yynn3544 int
			if yyr3544 || yy2arr3544 {
				r.EncodeArrayStart(7)
			} else {
				yynn3544 = 0
				for _, b := range yyq3544 {
					if b {
						yynn3544++
					}
				}
				r.EncodeMapStart(yynn3544)
				yynn3544 = 0
			}
			if yyr3544 || yy2arr3544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3544[0] {
					yym3546 := z.EncBinary()
					_ = yym3546
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3544[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3547 := z.EncBinary()
					_ = yym3547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3544 || yy2arr3544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3544[1] {
					yym3549 := z.EncBinary()
					_ = yym3549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3544[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3550 := z.EncBinary()
					_ = yym3550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3544 || yy2arr3544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3544[2] {
					yym3552 := z.EncBinary()
					_ = yym3552
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3544[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3553 := z.EncBinary()
					_ = yym3553
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3544 || yy2arr3544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3544[3] {
					yym3555 := z.EncBinary()
					_ = yym3555
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3544[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3556 := z.EncBinary()
					_ = yym3556
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3544 || yy2arr3544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3544[4] {
					yym3558 := z.EncBinary()
					_ = yym3558
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3544[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3559 := z.EncBinary()
					_ = yym3559
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3544 || yy2arr3544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3544[5] {
					yym3561 := z.EncBinary()
					_ = yym3561
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3544[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3562 := z.EncBinary()
					_ = yym3562
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3544 || yy2arr3544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3544[6] {
					yym3564 := z.EncBinary()
					_ = yym3564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3544[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3565 := z.EncBinary()
					_ = yym3565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3544 || yy2arr3544 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3566 := z.DecBinary()
	_ = yym3566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3567 := r.ContainerType()
		if yyct3567 == codecSelferValueTypeMap1234 {
			yyl3567 := r.ReadMapStart()
			if yyl3567 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3567, d)
			}
		} else if yyct3567 == codecSelferValueTypeArray1234 {
			yyl3567 := r.ReadArrayStart()
			if yyl3567 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3568Slc
	var yyhl3568 bool = l >= 0
	for yyj3568 := 0; ; yyj3568++ {
		if yyhl3568 {
			if yyj3568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3568Slc = r.DecodeBytes(yys3568Slc, true, true)
		yys3568 := string(yys3568Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3568 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3568)
		} // end switch yys3568
	} // end for yyj3568
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3576 int
	var yyb3576 bool
	var yyhl3576 bool = l >= 0
	yyj3576++
	if yyhl3576 {
		yyb3576 = yyj3576 > l
	} else {
		yyb3576 = r.CheckBreak()
	}
	if yyb3576 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3576++
	if yyhl3576 {
		yyb3576 = yyj3576 > l
	} else {
		yyb3576 = r.CheckBreak()
	}
	if yyb3576 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3576++
	if yyhl3576 {
		yyb3576 = yyj3576 > l
	} else {
		yyb3576 = r.CheckBreak()
	}
	if yyb3576 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3576++
	if yyhl3576 {
		yyb3576 = yyj3576 > l
	} else {
		yyb3576 = r.CheckBreak()
	}
	if yyb3576 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3576++
	if yyhl3576 {
		yyb3576 = yyj3576 > l
	} else {
		yyb3576 = r.CheckBreak()
	}
	if yyb3576 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3576++
	if yyhl3576 {
		yyb3576 = yyj3576 > l
	} else {
		yyb3576 = r.CheckBreak()
	}
	if yyb3576 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3576++
	if yyhl3576 {
		yyb3576 = yyj3576 > l
	} else {
		yyb3576 = r.CheckBreak()
	}
	if yyb3576 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3576++
		if yyhl3576 {
			yyb3576 = yyj3576 > l
		} else {
			yyb3576 = r.CheckBreak()
		}
		if yyb3576 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3576-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3584 := z.EncBinary()
		_ = yym3584
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3585 := !z.EncBinary()
			yy2arr3585 := z.EncBasicHandle().StructToArray
			var yyq3585 [8]bool
			_, _, _ = yysep3585, yyq3585, yy2arr3585
			const yyr3585 bool = false
			yyq3585[0] = x.Kind != ""
			yyq3585[1] = x.APIVersion != ""
			yyq3585[2] = x.Stdin != false
			yyq3585[3] = x.Stdout != false
			yyq3585[4] = x.Stderr != false
			yyq3585[5] = x.TTY != false
			yyq3585[6] = x.Container != ""
			var yynn3585 int
			if yyr3585 || yy2arr3585 {
				r.EncodeArrayStart(8)
			} else {
				yynn3585 = 1
				for _, b := range yyq3585 {
					if b {
						yynn3585++
					}
				}
				r.EncodeMapStart(yynn3585)
				yynn3585 = 0
			}
			if yyr3585 || yy2arr3585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3585[0] {
					yym3587 := z.EncBinary()
					_ = yym3587
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3585[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3588 := z.EncBinary()
					_ = yym3588
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3585 || yy2arr3585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3585[1] {
					yym3590 := z.EncBinary()
					_ = yym3590
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3585[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3591 := z.EncBinary()
					_ = yym3591
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3585 || yy2arr3585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3585[2] {
					yym3593 := z.EncBinary()
					_ = yym3593
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3585[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3594 := z.EncBinary()
					_ = yym3594
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3585 || yy2arr3585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3585[3] {
					yym3596 := z.EncBinary()
					_ = yym3596
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3585[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3597 := z.EncBinary()
					_ = yym3597
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3585 || yy2arr3585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3585[4] {
					yym3599 := z.EncBinary()
					_ = yym3599
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3585[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3600 := z.EncBinary()
					_ = yym3600
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3585 || yy2arr3585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3585[5] {
					yym3602 := z.EncBinary()
					_ = yym3602
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3585[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3603 := z.EncBinary()
					_ = yym3603
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3585 || yy2arr3585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3585[6] {
					yym3605 := z.EncBinary()
					_ = yym3605
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3585[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3606 := z.EncBinary()
					_ = yym3606
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3585 || yy2arr3585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3608 := z.EncBinary()
					_ = yym3608
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3609 := z.EncBinary()
					_ = yym3609
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3585 || yy2arr3585 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3610 := z.DecBinary()
	_ = yym3610
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3611 := r.ContainerType()
		if yyct3611 == codecSelferValueTypeMap1234 {
			yyl3611 := r.ReadMapStart()
			if yyl3611 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3611, d)
			}
		} else if yyct3611 == codecSelferValueTypeArray1234 {
			yyl3611 := r.ReadArrayStart()
			if yyl3611 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3611, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3612Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3612Slc
	var yyhl3612 bool = l >= 0
	for yyj3612 := 0; ; yyj3612++ {
		if yyhl3612 {
			if yyj3612 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3612Slc = r.DecodeBytes(yys3612Slc, true, true)
		yys3612 := string(yys3612Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3612 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3620 := &x.Command
				yym3621 := z.DecBinary()
				_ = yym3621
				if false {
				} else {
					z.F.DecSliceStringX(yyv3620, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3612)
		} // end switch yys3612
	} // end for yyj3612
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3622 int
	var yyb3622 bool
	var yyhl3622 bool = l >= 0
	yyj3622++
	if yyhl3622 {
		yyb3622 = yyj3622 > l
	} else {
		yyb3622 = r.CheckBreak()
	}
	if yyb3622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3622++
	if yyhl3622 {
		yyb3622 = yyj3622 > l
	} else {
		yyb3622 = r.CheckBreak()
	}
	if yyb3622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3622++
	if yyhl3622 {
		yyb3622 = yyj3622 > l
	} else {
		yyb3622 = r.CheckBreak()
	}
	if yyb3622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3622++
	if yyhl3622 {
		yyb3622 = yyj3622 > l
	} else {
		yyb3622 = r.CheckBreak()
	}
	if yyb3622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3622++
	if yyhl3622 {
		yyb3622 = yyj3622 > l
	} else {
		yyb3622 = r.CheckBreak()
	}
	if yyb3622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3622++
	if yyhl3622 {
		yyb3622 = yyj3622 > l
	} else {
		yyb3622 = r.CheckBreak()
	}
	if yyb3622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3622++
	if yyhl3622 {
		yyb3622 = yyj3622 > l
	} else {
		yyb3622 = r.CheckBreak()
	}
	if yyb3622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3622++
	if yyhl3622 {
		yyb3622 = yyj3622 > l
	} else {
		yyb3622 = r.CheckBreak()
	}
	if yyb3622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3630 := &x.Command
		yym3631 := z.DecBinary()
		_ = yym3631
		if false {
		} else {
			z.F.DecSliceStringX(yyv3630, false, d)
		}
	}
	for {
		yyj3622++
		if yyhl3622 {
			yyb3622 = yyj3622 > l
		} else {
			yyb3622 = r.CheckBreak()
		}
		if yyb3622 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3622-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3632 := z.EncBinary()
		_ = yym3632
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3633 := !z.EncBinary()
			yy2arr3633 := z.EncBasicHandle().StructToArray
			var yyq3633 [3]bool
			_, _, _ = yysep3633, yyq3633, yy2arr3633
			const yyr3633 bool = false
			yyq3633[0] = x.Kind != ""
			yyq3633[1] = x.APIVersion != ""
			yyq3633[2] = x.Path != ""
			var yynn3633 int
			if yyr3633 || yy2arr3633 {
				r.EncodeArrayStart(3)
			} else {
				yynn3633 = 0
				for _, b := range yyq3633 {
					if b {
						yynn3633++
					}
				}
				r.EncodeMapStart(yynn3633)
				yynn3633 = 0
			}
			if yyr3633 || yy2arr3633 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3633[0] {
					yym3635 := z.EncBinary()
					_ = yym3635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3633[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3636 := z.EncBinary()
					_ = yym3636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3633 || yy2arr3633 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3633[1] {
					yym3638 := z.EncBinary()
					_ = yym3638
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3633[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3639 := z.EncBinary()
					_ = yym3639
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3633 || yy2arr3633 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3633[2] {
					yym3641 := z.EncBinary()
					_ = yym3641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3633[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3642 := z.EncBinary()
					_ = yym3642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3633 || yy2arr3633 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3643 := z.DecBinary()
	_ = yym3643
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3644 := r.ContainerType()
		if yyct3644 == codecSelferValueTypeMap1234 {
			yyl3644 := r.ReadMapStart()
			if yyl3644 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3644, d)
			}
		} else if yyct3644 == codecSelferValueTypeArray1234 {
			yyl3644 := r.ReadArrayStart()
			if yyl3644 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3644, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3645Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3645Slc
	var yyhl3645 bool = l >= 0
	for yyj3645 := 0; ; yyj3645++ {
		if yyhl3645 {
			if yyj3645 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3645Slc = r.DecodeBytes(yys3645Slc, true, true)
		yys3645 := string(yys3645Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3645 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3645)
		} // end switch yys3645
	} // end for yyj3645
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3649 int
	var yyb3649 bool
	var yyhl3649 bool = l >= 0
	yyj3649++
	if yyhl3649 {
		yyb3649 = yyj3649 > l
	} else {
		yyb3649 = r.CheckBreak()
	}
	if yyb3649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3649++
	if yyhl3649 {
		yyb3649 = yyj3649 > l
	} else {
		yyb3649 = r.CheckBreak()
	}
	if yyb3649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3649++
	if yyhl3649 {
		yyb3649 = yyj3649 > l
	} else {
		yyb3649 = r.CheckBreak()
	}
	if yyb3649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3649++
		if yyhl3649 {
			yyb3649 = yyj3649 > l
		} else {
			yyb3649 = r.CheckBreak()
		}
		if yyb3649 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3649-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3653 := z.EncBinary()
		_ = yym3653
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3654 := !z.EncBinary()
			yy2arr3654 := z.EncBasicHandle().StructToArray
			var yyq3654 [3]bool
			_, _, _ = yysep3654, yyq3654, yy2arr3654
			const yyr3654 bool = false
			yyq3654[0] = x.Kind != ""
			yyq3654[1] = x.APIVersion != ""
			yyq3654[2] = x.Path != ""
			var yynn3654 int
			if yyr3654 || yy2arr3654 {
				r.EncodeArrayStart(3)
			} else {
				yynn3654 = 0
				for _, b := range yyq3654 {
					if b {
						yynn3654++
					}
				}
				r.EncodeMapStart(yynn3654)
				yynn3654 = 0
			}
			if yyr3654 || yy2arr3654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3654[0] {
					yym3656 := z.EncBinary()
					_ = yym3656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3654[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3657 := z.EncBinary()
					_ = yym3657
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3654 || yy2arr3654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3654[1] {
					yym3659 := z.EncBinary()
					_ = yym3659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3654[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3660 := z.EncBinary()
					_ = yym3660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3654 || yy2arr3654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3654[2] {
					yym3662 := z.EncBinary()
					_ = yym3662
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3654[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3663 := z.EncBinary()
					_ = yym3663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3654 || yy2arr3654 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3664 := z.DecBinary()
	_ = yym3664
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3665 := r.ContainerType()
		if yyct3665 == codecSelferValueTypeMap1234 {
			yyl3665 := r.ReadMapStart()
			if yyl3665 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3665, d)
			}
		} else if yyct3665 == codecSelferValueTypeArray1234 {
			yyl3665 := r.ReadArrayStart()
			if yyl3665 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3665, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3666Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3666Slc
	var yyhl3666 bool = l >= 0
	for yyj3666 := 0; ; yyj3666++ {
		if yyhl3666 {
			if yyj3666 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3666Slc = r.DecodeBytes(yys3666Slc, true, true)
		yys3666 := string(yys3666Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3666 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3666)
		} // end switch yys3666
	} // end for yyj3666
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3670 int
	var yyb3670 bool
	var yyhl3670 bool = l >= 0
	yyj3670++
	if yyhl3670 {
		yyb3670 = yyj3670 > l
	} else {
		yyb3670 = r.CheckBreak()
	}
	if yyb3670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3670++
	if yyhl3670 {
		yyb3670 = yyj3670 > l
	} else {
		yyb3670 = r.CheckBreak()
	}
	if yyb3670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3670++
	if yyhl3670 {
		yyb3670 = yyj3670 > l
	} else {
		yyb3670 = r.CheckBreak()
	}
	if yyb3670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3670++
		if yyhl3670 {
			yyb3670 = yyj3670 > l
		} else {
			yyb3670 = r.CheckBreak()
		}
		if yyb3670 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3670-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3674 := z.EncBinary()
		_ = yym3674
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3675 := !z.EncBinary()
			yy2arr3675 := z.EncBasicHandle().StructToArray
			var yyq3675 [3]bool
			_, _, _ = yysep3675, yyq3675, yy2arr3675
			const yyr3675 bool = false
			yyq3675[0] = x.Kind != ""
			yyq3675[1] = x.APIVersion != ""
			yyq3675[2] = x.Path != ""
			var yynn3675 int
			if yyr3675 || yy2arr3675 {
				r.EncodeArrayStart(3)
			} else {
				yynn3675 = 0
				for _, b := range yyq3675 {
					if b {
						yynn3675++
					}
				}
				r.EncodeMapStart(yynn3675)
				yynn3675 = 0
			}
			if yyr3675 || yy2arr3675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3675[0] {
					yym3677 := z.EncBinary()
					_ = yym3677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3675[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3678 := z.EncBinary()
					_ = yym3678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3675 || yy2arr3675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3675[1] {
					yym3680 := z.EncBinary()
					_ = yym3680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3675[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3681 := z.EncBinary()
					_ = yym3681
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3675 || yy2arr3675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3675[2] {
					yym3683 := z.EncBinary()
					_ = yym3683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3675[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3684 := z.EncBinary()
					_ = yym3684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3675 || yy2arr3675 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3685 := z.DecBinary()
	_ = yym3685
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3686 := r.ContainerType()
		if yyct3686 == codecSelferValueTypeMap1234 {
			yyl3686 := r.ReadMapStart()
			if yyl3686 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3686, d)
			}
		} else if yyct3686 == codecSelferValueTypeArray1234 {
			yyl3686 := r.ReadArrayStart()
			if yyl3686 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3686, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3687Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3687Slc
	var yyhl3687 bool = l >= 0
	for yyj3687 := 0; ; yyj3687++ {
		if yyhl3687 {
			if yyj3687 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3687Slc = r.DecodeBytes(yys3687Slc, true, true)
		yys3687 := string(yys3687Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3687 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3687)
		} // end switch yys3687
	} // end for yyj3687
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3691 int
	var yyb3691 bool
	var yyhl3691 bool = l >= 0
	yyj3691++
	if yyhl3691 {
		yyb3691 = yyj3691 > l
	} else {
		yyb3691 = r.CheckBreak()
	}
	if yyb3691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3691++
	if yyhl3691 {
		yyb3691 = yyj3691 > l
	} else {
		yyb3691 = r.CheckBreak()
	}
	if yyb3691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3691++
	if yyhl3691 {
		yyb3691 = yyj3691 > l
	} else {
		yyb3691 = r.CheckBreak()
	}
	if yyb3691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3691++
		if yyhl3691 {
			yyb3691 = yyj3691 > l
		} else {
			yyb3691 = r.CheckBreak()
		}
		if yyb3691 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3691-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3695 := z.EncBinary()
		_ = yym3695
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3696 := !z.EncBinary()
			yy2arr3696 := z.EncBasicHandle().StructToArray
			var yyq3696 [5]bool
			_, _, _ = yysep3696, yyq3696, yy2arr3696
			const yyr3696 bool = false
			yyq3696[4] = x.Controller != nil
			var yynn3696 int
			if yyr3696 || yy2arr3696 {
				r.EncodeArrayStart(5)
			} else {
				yynn3696 = 4
				for _, b := range yyq3696 {
					if b {
						yynn3696++
					}
				}
				r.EncodeMapStart(yynn3696)
				yynn3696 = 0
			}
			if yyr3696 || yy2arr3696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3698 := z.EncBinary()
				_ = yym3698
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3699 := z.EncBinary()
				_ = yym3699
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3696 || yy2arr3696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3701 := z.EncBinary()
				_ = yym3701
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3702 := z.EncBinary()
				_ = yym3702
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3696 || yy2arr3696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3704 := z.EncBinary()
				_ = yym3704
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3705 := z.EncBinary()
				_ = yym3705
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3696 || yy2arr3696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3707 := z.EncBinary()
				_ = yym3707
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3708 := z.EncBinary()
				_ = yym3708
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3696 || yy2arr3696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3696[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3710 := *x.Controller
						yym3711 := z.EncBinary()
						_ = yym3711
						if false {
						} else {
							r.EncodeBool(bool(yy3710))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3696[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3712 := *x.Controller
						yym3713 := z.EncBinary()
						_ = yym3713
						if false {
						} else {
							r.EncodeBool(bool(yy3712))
						}
					}
				}
			}
			if yyr3696 || yy2arr3696 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3714 := z.DecBinary()
	_ = yym3714
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3715 := r.ContainerType()
		if yyct3715 == codecSelferValueTypeMap1234 {
			yyl3715 := r.ReadMapStart()
			if yyl3715 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3715, d)
			}
		} else if yyct3715 == codecSelferValueTypeArray1234 {
			yyl3715 := r.ReadArrayStart()
			if yyl3715 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3715, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3716Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3716Slc
	var yyhl3716 bool = l >= 0
	for yyj3716 := 0; ; yyj3716++ {
		if yyhl3716 {
			if yyj3716 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3716Slc = r.DecodeBytes(yys3716Slc, true, true)
		yys3716 := string(yys3716Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3716 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3722 := z.DecBinary()
				_ = yym3722
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3716)
		} // end switch yys3716
	} // end for yyj3716
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3723 int
	var yyb3723 bool
	var yyhl3723 bool = l >= 0
	yyj3723++
	if yyhl3723 {
		yyb3723 = yyj3723 > l
	} else {
		yyb3723 = r.CheckBreak()
	}
	if yyb3723 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3723++
	if yyhl3723 {
		yyb3723 = yyj3723 > l
	} else {
		yyb3723 = r.CheckBreak()
	}
	if yyb3723 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3723++
	if yyhl3723 {
		yyb3723 = yyj3723 > l
	} else {
		yyb3723 = r.CheckBreak()
	}
	if yyb3723 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3723++
	if yyhl3723 {
		yyb3723 = yyj3723 > l
	} else {
		yyb3723 = r.CheckBreak()
	}
	if yyb3723 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3723++
	if yyhl3723 {
		yyb3723 = yyj3723 > l
	} else {
		yyb3723 = r.CheckBreak()
	}
	if yyb3723 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3729 := z.DecBinary()
		_ = yym3729
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3723++
		if yyhl3723 {
			yyb3723 = yyj3723 > l
		} else {
			yyb3723 = r.CheckBreak()
		}
		if yyb3723 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3723-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3730 := z.EncBinary()
		_ = yym3730
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3731 := !z.EncBinary()
			yy2arr3731 := z.EncBasicHandle().StructToArray
			var yyq3731 [7]bool
			_, _, _ = yysep3731, yyq3731, yy2arr3731
			const yyr3731 bool = false
			yyq3731[0] = x.Kind != ""
			yyq3731[1] = x.Namespace != ""
			yyq3731[2] = x.Name != ""
			yyq3731[3] = x.UID != ""
			yyq3731[4] = x.APIVersion != ""
			yyq3731[5] = x.ResourceVersion != ""
			yyq3731[6] = x.FieldPath != ""
			var yynn3731 int
			if yyr3731 || yy2arr3731 {
				r.EncodeArrayStart(7)
			} else {
				yynn3731 = 0
				for _, b := range yyq3731 {
					if b {
						yynn3731++
					}
				}
				r.EncodeMapStart(yynn3731)
				yynn3731 = 0
			}
			if yyr3731 || yy2arr3731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3731[0] {
					yym3733 := z.EncBinary()
					_ = yym3733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3731[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3734 := z.EncBinary()
					_ = yym3734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3731 || yy2arr3731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3731[1] {
					yym3736 := z.EncBinary()
					_ = yym3736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3731[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3737 := z.EncBinary()
					_ = yym3737
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3731 || yy2arr3731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3731[2] {
					yym3739 := z.EncBinary()
					_ = yym3739
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3731[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3740 := z.EncBinary()
					_ = yym3740
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3731 || yy2arr3731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3731[3] {
					yym3742 := z.EncBinary()
					_ = yym3742
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3731[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3743 := z.EncBinary()
					_ = yym3743
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3731 || yy2arr3731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3731[4] {
					yym3745 := z.EncBinary()
					_ = yym3745
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3731[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3746 := z.EncBinary()
					_ = yym3746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3731 || yy2arr3731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3731[5] {
					yym3748 := z.EncBinary()
					_ = yym3748
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3731[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3749 := z.EncBinary()
					_ = yym3749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3731 || yy2arr3731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3731[6] {
					yym3751 := z.EncBinary()
					_ = yym3751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3731[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3752 := z.EncBinary()
					_ = yym3752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3731 || yy2arr3731 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3753 := z.DecBinary()
	_ = yym3753
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3754 := r.ContainerType()
		if yyct3754 == codecSelferValueTypeMap1234 {
			yyl3754 := r.ReadMapStart()
			if yyl3754 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3754, d)
			}
		} else if yyct3754 == codecSelferValueTypeArray1234 {
			yyl3754 := r.ReadArrayStart()
			if yyl3754 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3754, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3755Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3755Slc
	var yyhl3755 bool = l >= 0
	for yyj3755 := 0; ; yyj3755++ {
		if yyhl3755 {
			if yyj3755 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3755Slc = r.DecodeBytes(yys3755Slc, true, true)
		yys3755 := string(yys3755Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3755 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3755)
		} // end switch yys3755
	} // end for yyj3755
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3763 int
	var yyb3763 bool
	var yyhl3763 bool = l >= 0
	yyj3763++
	if yyhl3763 {
		yyb3763 = yyj3763 > l
	} else {
		yyb3763 = r.CheckBreak()
	}
	if yyb3763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3763++
	if yyhl3763 {
		yyb3763 = yyj3763 > l
	} else {
		yyb3763 = r.CheckBreak()
	}
	if yyb3763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3763++
	if yyhl3763 {
		yyb3763 = yyj3763 > l
	} else {
		yyb3763 = r.CheckBreak()
	}
	if yyb3763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3763++
	if yyhl3763 {
		yyb3763 = yyj3763 > l
	} else {
		yyb3763 = r.CheckBreak()
	}
	if yyb3763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3763++
	if yyhl3763 {
		yyb3763 = yyj3763 > l
	} else {
		yyb3763 = r.CheckBreak()
	}
	if yyb3763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3763++
	if yyhl3763 {
		yyb3763 = yyj3763 > l
	} else {
		yyb3763 = r.CheckBreak()
	}
	if yyb3763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3763++
	if yyhl3763 {
		yyb3763 = yyj3763 > l
	} else {
		yyb3763 = r.CheckBreak()
	}
	if yyb3763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3763++
		if yyhl3763 {
			yyb3763 = yyj3763 > l
		} else {
			yyb3763 = r.CheckBreak()
		}
		if yyb3763 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3763-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3771 := z.EncBinary()
		_ = yym3771
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3772 := !z.EncBinary()
			yy2arr3772 := z.EncBasicHandle().StructToArray
			var yyq3772 [1]bool
			_, _, _ = yysep3772, yyq3772, yy2arr3772
			const yyr3772 bool = false
			yyq3772[0] = x.Name != ""
			var yynn3772 int
			if yyr3772 || yy2arr3772 {
				r.EncodeArrayStart(1)
			} else {
				yynn3772 = 0
				for _, b := range yyq3772 {
					if b {
						yynn3772++
					}
				}
				r.EncodeMapStart(yynn3772)
				yynn3772 = 0
			}
			if yyr3772 || yy2arr3772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3772[0] {
					yym3774 := z.EncBinary()
					_ = yym3774
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3772[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3775 := z.EncBinary()
					_ = yym3775
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3772 || yy2arr3772 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3776 := z.DecBinary()
	_ = yym3776
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3777 := r.ContainerType()
		if yyct3777 == codecSelferValueTypeMap1234 {
			yyl3777 := r.ReadMapStart()
			if yyl3777 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3777, d)
			}
		} else if yyct3777 == codecSelferValueTypeArray1234 {
			yyl3777 := r.ReadArrayStart()
			if yyl3777 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3777, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3778Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3778Slc
	var yyhl3778 bool = l >= 0
	for yyj3778 := 0; ; yyj3778++ {
		if yyhl3778 {
			if yyj3778 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3778Slc = r.DecodeBytes(yys3778Slc, true, true)
		yys3778 := string(yys3778Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3778 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3778)
		} // end switch yys3778
	} // end for yyj3778
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3780 int
	var yyb3780 bool
	var yyhl3780 bool = l >= 0
	yyj3780++
	if yyhl3780 {
		yyb3780 = yyj3780 > l
	} else {
		yyb3780 = r.CheckBreak()
	}
	if yyb3780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3780++
		if yyhl3780 {
			yyb3780 = yyj3780 > l
		} else {
			yyb3780 = r.CheckBreak()
		}
		if yyb3780 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3780-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3782 := z.EncBinary()
		_ = yym3782
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3783 := !z.EncBinary()
			yy2arr3783 := z.EncBasicHandle().StructToArray
			var yyq3783 [3]bool
			_, _, _ = yysep3783, yyq3783, yy2arr3783
			const yyr3783 bool = false
			yyq3783[0] = x.Kind != ""
			yyq3783[1] = x.APIVersion != ""
			yyq3783[2] = true
			var yynn3783 int
			if yyr3783 || yy2arr3783 {
				r.EncodeArrayStart(3)
			} else {
				yynn3783 = 0
				for _, b := range yyq3783 {
					if b {
						yynn3783++
					}
				}
				r.EncodeMapStart(yynn3783)
				yynn3783 = 0
			}
			if yyr3783 || yy2arr3783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3783[0] {
					yym3785 := z.EncBinary()
					_ = yym3785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3783[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3786 := z.EncBinary()
					_ = yym3786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3783 || yy2arr3783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3783[1] {
					yym3788 := z.EncBinary()
					_ = yym3788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3783[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3789 := z.EncBinary()
					_ = yym3789
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3783 || yy2arr3783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3783[2] {
					yy3791 := &x.Reference
					yy3791.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3783[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3792 := &x.Reference
					yy3792.CodecEncodeSelf(e)
				}
			}
			if yyr3783 || yy2arr3783 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3793 := z.DecBinary()
	_ = yym3793
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3794 := r.ContainerType()
		if yyct3794 == codecSelferValueTypeMap1234 {
			yyl3794 := r.ReadMapStart()
			if yyl3794 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3794, d)
			}
		} else if yyct3794 == codecSelferValueTypeArray1234 {
			yyl3794 := r.ReadArrayStart()
			if yyl3794 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3794, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3795Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3795Slc
	var yyhl3795 bool = l >= 0
	for yyj3795 := 0; ; yyj3795++ {
		if yyhl3795 {
			if yyj3795 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3795Slc = r.DecodeBytes(yys3795Slc, true, true)
		yys3795 := string(yys3795Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3795 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3798 := &x.Reference
				yyv3798.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3795)
		} // end switch yys3795
	} // end for yyj3795
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3799 int
	var yyb3799 bool
	var yyhl3799 bool = l >= 0
	yyj3799++
	if yyhl3799 {
		yyb3799 = yyj3799 > l
	} else {
		yyb3799 = r.CheckBreak()
	}
	if yyb3799 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3799++
	if yyhl3799 {
		yyb3799 = yyj3799 > l
	} else {
		yyb3799 = r.CheckBreak()
	}
	if yyb3799 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3799++
	if yyhl3799 {
		yyb3799 = yyj3799 > l
	} else {
		yyb3799 = r.CheckBreak()
	}
	if yyb3799 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3802 := &x.Reference
		yyv3802.CodecDecodeSelf(d)
	}
	for {
		yyj3799++
		if yyhl3799 {
			yyb3799 = yyj3799 > l
		} else {
			yyb3799 = r.CheckBreak()
		}
		if yyb3799 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3799-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3803 := z.EncBinary()
		_ = yym3803
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3804 := !z.EncBinary()
			yy2arr3804 := z.EncBasicHandle().StructToArray
			var yyq3804 [2]bool
			_, _, _ = yysep3804, yyq3804, yy2arr3804
			const yyr3804 bool = false
			yyq3804[0] = x.Component != ""
			yyq3804[1] = x.Host != ""
			var yynn3804 int
			if yyr3804 || yy2arr3804 {
				r.EncodeArrayStart(2)
			} else {
				yynn3804 = 0
				for _, b := range yyq3804 {
					if b {
						yynn3804++
					}
				}
				r.EncodeMapStart(yynn3804)
				yynn3804 = 0
			}
			if yyr3804 || yy2arr3804 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3804[0] {
					yym3806 := z.EncBinary()
					_ = yym3806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3804[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3807 := z.EncBinary()
					_ = yym3807
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3804 || yy2arr3804 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3804[1] {
					yym3809 := z.EncBinary()
					_ = yym3809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3804[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3810 := z.EncBinary()
					_ = yym3810
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3804 || yy2arr3804 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3811 := z.DecBinary()
	_ = yym3811
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3812 := r.ContainerType()
		if yyct3812 == codecSelferValueTypeMap1234 {
			yyl3812 := r.ReadMapStart()
			if yyl3812 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3812, d)
			}
		} else if yyct3812 == codecSelferValueTypeArray1234 {
			yyl3812 := r.ReadArrayStart()
			if yyl3812 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3812, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3813Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3813Slc
	var yyhl3813 bool = l >= 0
	for yyj3813 := 0; ; yyj3813++ {
		if yyhl3813 {
			if yyj3813 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3813Slc = r.DecodeBytes(yys3813Slc, true, true)
		yys3813 := string(yys3813Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3813 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3813)
		} // end switch yys3813
	} // end for yyj3813
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3816 int
	var yyb3816 bool
	var yyhl3816 bool = l >= 0
	yyj3816++
	if yyhl3816 {
		yyb3816 = yyj3816 > l
	} else {
		yyb3816 = r.CheckBreak()
	}
	if yyb3816 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3816++
	if yyhl3816 {
		yyb3816 = yyj3816 > l
	} else {
		yyb3816 = r.CheckBreak()
	}
	if yyb3816 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3816++
		if yyhl3816 {
			yyb3816 = yyj3816 > l
		} else {
			yyb3816 = r.CheckBreak()
		}
		if yyb3816 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3816-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3819 := z.EncBinary()
		_ = yym3819
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3820 := !z.EncBinary()
			yy2arr3820 := z.EncBasicHandle().StructToArray
			var yyq3820 [11]bool
			_, _, _ = yysep3820, yyq3820, yy2arr3820
			const yyr3820 bool = false
			yyq3820[0] = x.Kind != ""
			yyq3820[1] = x.APIVersion != ""
			yyq3820[4] = x.Reason != ""
			yyq3820[5] = x.Message != ""
			yyq3820[6] = true
			yyq3820[7] = true
			yyq3820[8] = true
			yyq3820[9] = x.Count != 0
			yyq3820[10] = x.Type != ""
			var yynn3820 int
			if yyr3820 || yy2arr3820 {
				r.EncodeArrayStart(11)
			} else {
				yynn3820 = 2
				for _, b := range yyq3820 {
					if b {
						yynn3820++
					}
				}
				r.EncodeMapStart(yynn3820)
				yynn3820 = 0
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3820[0] {
					yym3822 := z.EncBinary()
					_ = yym3822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3820[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3823 := z.EncBinary()
					_ = yym3823
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3820[1] {
					yym3825 := z.EncBinary()
					_ = yym3825
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3820[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3826 := z.EncBinary()
					_ = yym3826
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3828 := &x.ObjectMeta
				yy3828.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3829 := &x.ObjectMeta
				yy3829.CodecEncodeSelf(e)
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3831 := &x.InvolvedObject
				yy3831.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3832 := &x.InvolvedObject
				yy3832.CodecEncodeSelf(e)
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3820[4] {
					yym3834 := z.EncBinary()
					_ = yym3834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3820[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3835 := z.EncBinary()
					_ = yym3835
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3820[5] {
					yym3837 := z.EncBinary()
					_ = yym3837
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3820[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3838 := z.EncBinary()
					_ = yym3838
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3820[6] {
					yy3840 := &x.Source
					yy3840.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3820[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3841 := &x.Source
					yy3841.CodecEncodeSelf(e)
				}
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3820[7] {
					yy3843 := &x.FirstTimestamp
					yym3844 := z.EncBinary()
					_ = yym3844
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3843) {
					} else if yym3844 {
						z.EncBinaryMarshal(yy3843)
					} else if !yym3844 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3843)
					} else {
						z.EncFallback(yy3843)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3820[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3845 := &x.FirstTimestamp
					yym3846 := z.EncBinary()
					_ = yym3846
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3845) {
					} else if yym3846 {
						z.EncBinaryMarshal(yy3845)
					} else if !yym3846 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3845)
					} else {
						z.EncFallback(yy3845)
					}
				}
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3820[8] {
					yy3848 := &x.LastTimestamp
					yym3849 := z.EncBinary()
					_ = yym3849
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3848) {
					} else if yym3849 {
						z.EncBinaryMarshal(yy3848)
					} else if !yym3849 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3848)
					} else {
						z.EncFallback(yy3848)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3820[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3850 := &x.LastTimestamp
					yym3851 := z.EncBinary()
					_ = yym3851
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3850) {
					} else if yym3851 {
						z.EncBinaryMarshal(yy3850)
					} else if !yym3851 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3850)
					} else {
						z.EncFallback(yy3850)
					}
				}
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3820[9] {
					yym3853 := z.EncBinary()
					_ = yym3853
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3820[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3854 := z.EncBinary()
					_ = yym3854
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3820[10] {
					yym3856 := z.EncBinary()
					_ = yym3856
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3820[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3857 := z.EncBinary()
					_ = yym3857
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3858 := z.DecBinary()
	_ = yym3858
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3859 := r.ContainerType()
		if yyct3859 == codecSelferValueTypeMap1234 {
			yyl3859 := r.ReadMapStart()
			if yyl3859 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3859, d)
			}
		} else if yyct3859 == codecSelferValueTypeArray1234 {
			yyl3859 := r.ReadArrayStart()
			if yyl3859 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3859, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3860Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3860Slc
	var yyhl3860 bool = l >= 0
	for yyj3860 := 0; ; yyj3860++ {
		if yyhl3860 {
			if yyj3860 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3860Slc = r.DecodeBytes(yys3860Slc, true, true)
		yys3860 := string(yys3860Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3860 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3863 := &x.ObjectMeta
				yyv3863.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3864 := &x.InvolvedObject
				yyv3864.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3867 := &x.Source
				yyv3867.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3868 := &x.FirstTimestamp
				yym3869 := z.DecBinary()
				_ = yym3869
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3868) {
				} else if yym3869 {
					z.DecBinaryUnmarshal(yyv3868)
				} else if !yym3869 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3868)
				} else {
					z.DecFallback(yyv3868, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3870 := &x.LastTimestamp
				yym3871 := z.DecBinary()
				_ = yym3871
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3870) {
				} else if yym3871 {
					z.DecBinaryUnmarshal(yyv3870)
				} else if !yym3871 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3870)
				} else {
					z.DecFallback(yyv3870, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3860)
		} // end switch yys3860
	} // end for yyj3860
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3874 int
	var yyb3874 bool
	var yyhl3874 bool = l >= 0
	yyj3874++
	if yyhl3874 {
		yyb3874 = yyj3874 > l
	} else {
		yyb3874 = r.CheckBreak()
	}
	if yyb3874 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3874++
	if yyhl3874 {
		yyb3874 = yyj3874 > l
	} else {
		yyb3874 = r.CheckBreak()
	}
	if yyb3874 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3874++
	if yyhl3874 {
		yyb3874 = yyj3874 > l
	} else {
		yyb3874 = r.CheckBreak()
	}
	if yyb3874 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3877 := &x.ObjectMeta
		yyv3877.CodecDecodeSelf(d)
	}
	yyj3874++
	if yyhl3874 {
		yyb3874 = yyj3874 > l
	} else {
		yyb3874 = r.CheckBreak()
	}
	if yyb3874 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3878 := &x.InvolvedObject
		yyv3878.CodecDecodeSelf(d)
	}
	yyj3874++
	if yyhl3874 {
		yyb3874 = yyj3874 > l
	} else {
		yyb3874 = r.CheckBreak()
	}
	if yyb3874 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3874++
	if yyhl3874 {
		yyb3874 = yyj3874 > l
	} else {
		yyb3874 = r.CheckBreak()
	}
	if yyb3874 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3874++
	if yyhl3874 {
		yyb3874 = yyj3874 > l
	} else {
		yyb3874 = r.CheckBreak()
	}
	if yyb3874 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3881 := &x.Source
		yyv3881.CodecDecodeSelf(d)
	}
	yyj3874++
	if yyhl3874 {
		yyb3874 = yyj3874 > l
	} else {
		yyb3874 = r.CheckBreak()
	}
	if yyb3874 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3882 := &x.FirstTimestamp
		yym3883 := z.DecBinary()
		_ = yym3883
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3882) {
		} else if yym3883 {
			z.DecBinaryUnmarshal(yyv3882)
		} else if !yym3883 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3882)
		} else {
			z.DecFallback(yyv3882, false)
		}
	}
	yyj3874++
	if yyhl3874 {
		yyb3874 = yyj3874 > l
	} else {
		yyb3874 = r.CheckBreak()
	}
	if yyb3874 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3884 := &x.LastTimestamp
		yym3885 := z.DecBinary()
		_ = yym3885
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3884) {
		} else if yym3885 {
			z.DecBinaryUnmarshal(yyv3884)
		} else if !yym3885 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3884)
		} else {
			z.DecFallback(yyv3884, false)
		}
	}
	yyj3874++
	if yyhl3874 {
		yyb3874 = yyj3874 > l
	} else {
		yyb3874 = r.CheckBreak()
	}
	if yyb3874 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3874++
	if yyhl3874 {
		yyb3874 = yyj3874 > l
	} else {
		yyb3874 = r.CheckBreak()
	}
	if yyb3874 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3874++
		if yyhl3874 {
			yyb3874 = yyj3874 > l
		} else {
			yyb3874 = r.CheckBreak()
		}
		if yyb3874 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3874-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3888 := z.EncBinary()
		_ = yym3888
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3889 := !z.EncBinary()
			yy2arr3889 := z.EncBasicHandle().StructToArray
			var yyq3889 [4]bool
			_, _, _ = yysep3889, yyq3889, yy2arr3889
			const yyr3889 bool = false
			yyq3889[0] = x.Kind != ""
			yyq3889[1] = x.APIVersion != ""
			yyq3889[2] = true
			var yynn3889 int
			if yyr3889 || yy2arr3889 {
				r.EncodeArrayStart(4)
			} else {
				yynn3889 = 1
				for _, b := range yyq3889 {
					if b {
						yynn3889++
					}
				}
				r.EncodeMapStart(yynn3889)
				yynn3889 = 0
			}
			if yyr3889 || yy2arr3889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3889[0] {
					yym3891 := z.EncBinary()
					_ = yym3891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3889[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3892 := z.EncBinary()
					_ = yym3892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3889 || yy2arr3889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3889[1] {
					yym3894 := z.EncBinary()
					_ = yym3894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3889[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3895 := z.EncBinary()
					_ = yym3895
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3889 || yy2arr3889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3889[2] {
					yy3897 := &x.ListMeta
					yym3898 := z.EncBinary()
					_ = yym3898
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3897) {
					} else {
						z.EncFallback(yy3897)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3889[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3899 := &x.ListMeta
					yym3900 := z.EncBinary()
					_ = yym3900
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3899) {
					} else {
						z.EncFallback(yy3899)
					}
				}
			}
			if yyr3889 || yy2arr3889 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3902 := z.EncBinary()
					_ = yym3902
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3903 := z.EncBinary()
					_ = yym3903
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3889 || yy2arr3889 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3904 := z.DecBinary()
	_ = yym3904
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3905 := r.ContainerType()
		if yyct3905 == codecSelferValueTypeMap1234 {
			yyl3905 := r.ReadMapStart()
			if yyl3905 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3905, d)
			}
		} else if yyct3905 == codecSelferValueTypeArray1234 {
			yyl3905 := r.ReadArrayStart()
			if yyl3905 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3905, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3906Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3906Slc
	var yyhl3906 bool = l >= 0
	for yyj3906 := 0; ; yyj3906++ {
		if yyhl3906 {
			if yyj3906 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3906Slc = r.DecodeBytes(yys3906Slc, true, true)
		yys3906 := string(yys3906Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3906 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3909 := &x.ListMeta
				yym3910 := z.DecBinary()
				_ = yym3910
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3909) {
				} else {
					z.DecFallback(yyv3909, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3911 := &x.Items
				yym3912 := z.DecBinary()
				_ = yym3912
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3911), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3906)
		} // end switch yys3906
	} // end for yyj3906
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3913 int
	var yyb3913 bool
	var yyhl3913 bool = l >= 0
	yyj3913++
	if yyhl3913 {
		yyb3913 = yyj3913 > l
	} else {
		yyb3913 = r.CheckBreak()
	}
	if yyb3913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3913++
	if yyhl3913 {
		yyb3913 = yyj3913 > l
	} else {
		yyb3913 = r.CheckBreak()
	}
	if yyb3913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3913++
	if yyhl3913 {
		yyb3913 = yyj3913 > l
	} else {
		yyb3913 = r.CheckBreak()
	}
	if yyb3913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3916 := &x.ListMeta
		yym3917 := z.DecBinary()
		_ = yym3917
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3916) {
		} else {
			z.DecFallback(yyv3916, false)
		}
	}
	yyj3913++
	if yyhl3913 {
		yyb3913 = yyj3913 > l
	} else {
		yyb3913 = r.CheckBreak()
	}
	if yyb3913 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3918 := &x.Items
		yym3919 := z.DecBinary()
		_ = yym3919
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3918), d)
		}
	}
	for {
		yyj3913++
		if yyhl3913 {
			yyb3913 = yyj3913 > l
		} else {
			yyb3913 = r.CheckBreak()
		}
		if yyb3913 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3913-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3920 := z.EncBinary()
		_ = yym3920
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3921 := !z.EncBinary()
			yy2arr3921 := z.EncBasicHandle().StructToArray
			var yyq3921 [4]bool
			_, _, _ = yysep3921, yyq3921, yy2arr3921
			const yyr3921 bool = false
			yyq3921[0] = x.Kind != ""
			yyq3921[1] = x.APIVersion != ""
			yyq3921[2] = true
			var yynn3921 int
			if yyr3921 || yy2arr3921 {
				r.EncodeArrayStart(4)
			} else {
				yynn3921 = 1
				for _, b := range yyq3921 {
					if b {
						yynn3921++
					}
				}
				r.EncodeMapStart(yynn3921)
				yynn3921 = 0
			}
			if yyr3921 || yy2arr3921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3921[0] {
					yym3923 := z.EncBinary()
					_ = yym3923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3921[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3924 := z.EncBinary()
					_ = yym3924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3921 || yy2arr3921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3921[1] {
					yym3926 := z.EncBinary()
					_ = yym3926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3921[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3927 := z.EncBinary()
					_ = yym3927
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3921 || yy2arr3921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3921[2] {
					yy3929 := &x.ListMeta
					yym3930 := z.EncBinary()
					_ = yym3930
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3929) {
					} else {
						z.EncFallback(yy3929)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3921[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3931 := &x.ListMeta
					yym3932 := z.EncBinary()
					_ = yym3932
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3931) {
					} else {
						z.EncFallback(yy3931)
					}
				}
			}
			if yyr3921 || yy2arr3921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3934 := z.EncBinary()
					_ = yym3934
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3935 := z.EncBinary()
					_ = yym3935
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg5_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yyr3921 || yy2arr3921 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3936 := z.DecBinary()
	_ = yym3936
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3937 := r.ContainerType()
		if yyct3937 == codecSelferValueTypeMap1234 {
			yyl3937 := r.ReadMapStart()
			if yyl3937 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3937, d)
			}
		} else if yyct3937 == codecSelferValueTypeArray1234 {
			yyl3937 := r.ReadArrayStart()
			if yyl3937 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3937, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3938Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3938Slc
	var yyhl3938 bool = l >= 0
	for yyj3938 := 0; ; yyj3938++ {
		if yyhl3938 {
			if yyj3938 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3938Slc = r.DecodeBytes(yys3938Slc, true, true)
		yys3938 := string(yys3938Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3938 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3941 := &x.ListMeta
				yym3942 := z.DecBinary()
				_ = yym3942
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3941) {
				} else {
					z.DecFallback(yyv3941, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3943 := &x.Items
				yym3944 := z.DecBinary()
				_ = yym3944
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv3943), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3938)
		} // end switch yys3938
	} // end for yyj3938
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3945 int
	var yyb3945 bool
	var yyhl3945 bool = l >= 0
	yyj3945++
	if yyhl3945 {
		yyb3945 = yyj3945 > l
	} else {
		yyb3945 = r.CheckBreak()
	}
	if yyb3945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3945++
	if yyhl3945 {
		yyb3945 = yyj3945 > l
	} else {
		yyb3945 = r.CheckBreak()
	}
	if yyb3945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3945++
	if yyhl3945 {
		yyb3945 = yyj3945 > l
	} else {
		yyb3945 = r.CheckBreak()
	}
	if yyb3945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3948 := &x.ListMeta
		yym3949 := z.DecBinary()
		_ = yym3949
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3948) {
		} else {
			z.DecFallback(yyv3948, false)
		}
	}
	yyj3945++
	if yyhl3945 {
		yyb3945 = yyj3945 > l
	} else {
		yyb3945 = r.CheckBreak()
	}
	if yyb3945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3950 := &x.Items
		yym3951 := z.DecBinary()
		_ = yym3951
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg5_runtime.RawExtension)(yyv3950), d)
		}
	}
	for {
		yyj3945++
		if yyhl3945 {
			yyb3945 = yyj3945 > l
		} else {
			yyb3945 = r.CheckBreak()
		}
		if yyb3945 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3945-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3952 := z.EncBinary()
	_ = yym3952
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3953 := z.DecBinary()
	_ = yym3953
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3954 := z.EncBinary()
		_ = yym3954
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3955 := !z.EncBinary()
			yy2arr3955 := z.EncBasicHandle().StructToArray
			var yyq3955 [6]bool
			_, _, _ = yysep3955, yyq3955, yy2arr3955
			const yyr3955 bool = false
			yyq3955[0] = x.Type != ""
			yyq3955[1] = len(x.Max) != 0
			yyq3955[2] = len(x.Min) != 0
			yyq3955[3] = len(x.Default) != 0
			yyq3955[4] = len(x.DefaultRequest) != 0
			yyq3955[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3955 int
			if yyr3955 || yy2arr3955 {
				r.EncodeArrayStart(6)
			} else {
				yynn3955 = 0
				for _, b := range yyq3955 {
					if b {
						yynn3955++
					}
				}
				r.EncodeMapStart(yynn3955)
				yynn3955 = 0
			}
			if yyr3955 || yy2arr3955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3955[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3955[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3955 || yy2arr3955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3955[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3955[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3955 || yy2arr3955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3955[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3955[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3955 || yy2arr3955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3955[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3955[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3955 || yy2arr3955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3955[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3955[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3955 || yy2arr3955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3955[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3955[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3955 || yy2arr3955 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3962 := z.DecBinary()
	_ = yym3962
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3963 := r.ContainerType()
		if yyct3963 == codecSelferValueTypeMap1234 {
			yyl3963 := r.ReadMapStart()
			if yyl3963 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3963, d)
			}
		} else if yyct3963 == codecSelferValueTypeArray1234 {
			yyl3963 := r.ReadArrayStart()
			if yyl3963 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3963, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3964Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3964Slc
	var yyhl3964 bool = l >= 0
	for yyj3964 := 0; ; yyj3964++ {
		if yyhl3964 {
			if yyj3964 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3964Slc = r.DecodeBytes(yys3964Slc, true, true)
		yys3964 := string(yys3964Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3964 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3966 := &x.Max
				yyv3966.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3967 := &x.Min
				yyv3967.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3968 := &x.Default
				yyv3968.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3969 := &x.DefaultRequest
				yyv3969.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3970 := &x.MaxLimitRequestRatio
				yyv3970.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3964)
		} // end switch yys3964
	} // end for yyj3964
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3971 int
	var yyb3971 bool
	var yyhl3971 bool = l >= 0
	yyj3971++
	if yyhl3971 {
		yyb3971 = yyj3971 > l
	} else {
		yyb3971 = r.CheckBreak()
	}
	if yyb3971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3971++
	if yyhl3971 {
		yyb3971 = yyj3971 > l
	} else {
		yyb3971 = r.CheckBreak()
	}
	if yyb3971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3973 := &x.Max
		yyv3973.CodecDecodeSelf(d)
	}
	yyj3971++
	if yyhl3971 {
		yyb3971 = yyj3971 > l
	} else {
		yyb3971 = r.CheckBreak()
	}
	if yyb3971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3974 := &x.Min
		yyv3974.CodecDecodeSelf(d)
	}
	yyj3971++
	if yyhl3971 {
		yyb3971 = yyj3971 > l
	} else {
		yyb3971 = r.CheckBreak()
	}
	if yyb3971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3975 := &x.Default
		yyv3975.CodecDecodeSelf(d)
	}
	yyj3971++
	if yyhl3971 {
		yyb3971 = yyj3971 > l
	} else {
		yyb3971 = r.CheckBreak()
	}
	if yyb3971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3976 := &x.DefaultRequest
		yyv3976.CodecDecodeSelf(d)
	}
	yyj3971++
	if yyhl3971 {
		yyb3971 = yyj3971 > l
	} else {
		yyb3971 = r.CheckBreak()
	}
	if yyb3971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3977 := &x.MaxLimitRequestRatio
		yyv3977.CodecDecodeSelf(d)
	}
	for {
		yyj3971++
		if yyhl3971 {
			yyb3971 = yyj3971 > l
		} else {
			yyb3971 = r.CheckBreak()
		}
		if yyb3971 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3971-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3978 := z.EncBinary()
		_ = yym3978
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3979 := !z.EncBinary()
			yy2arr3979 := z.EncBasicHandle().StructToArray
			var yyq3979 [1]bool
			_, _, _ = yysep3979, yyq3979, yy2arr3979
			const yyr3979 bool = false
			var yynn3979 int
			if yyr3979 || yy2arr3979 {
				r.EncodeArrayStart(1)
			} else {
				yynn3979 = 1
				for _, b := range yyq3979 {
					if b {
						yynn3979++
					}
				}
				r.EncodeMapStart(yynn3979)
				yynn3979 = 0
			}
			if yyr3979 || yy2arr3979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3981 := z.EncBinary()
					_ = yym3981
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3982 := z.EncBinary()
					_ = yym3982
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3979 || yy2arr3979 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3983 := z.DecBinary()
	_ = yym3983
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3984 := r.ContainerType()
		if yyct3984 == codecSelferValueTypeMap1234 {
			yyl3984 := r.ReadMapStart()
			if yyl3984 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3984, d)
			}
		} else if yyct3984 == codecSelferValueTypeArray1234 {
			yyl3984 := r.ReadArrayStart()
			if yyl3984 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3984, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3985Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3985Slc
	var yyhl3985 bool = l >= 0
	for yyj3985 := 0; ; yyj3985++ {
		if yyhl3985 {
			if yyj3985 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3985Slc = r.DecodeBytes(yys3985Slc, true, true)
		yys3985 := string(yys3985Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3985 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3986 := &x.Limits
				yym3987 := z.DecBinary()
				_ = yym3987
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3986), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3985)
		} // end switch yys3985
	} // end for yyj3985
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3988 int
	var yyb3988 bool
	var yyhl3988 bool = l >= 0
	yyj3988++
	if yyhl3988 {
		yyb3988 = yyj3988 > l
	} else {
		yyb3988 = r.CheckBreak()
	}
	if yyb3988 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3989 := &x.Limits
		yym3990 := z.DecBinary()
		_ = yym3990
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3989), d)
		}
	}
	for {
		yyj3988++
		if yyhl3988 {
			yyb3988 = yyj3988 > l
		} else {
			yyb3988 = r.CheckBreak()
		}
		if yyb3988 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3988-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3991 := z.EncBinary()
		_ = yym3991
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3992 := !z.EncBinary()
			yy2arr3992 := z.EncBasicHandle().StructToArray
			var yyq3992 [4]bool
			_, _, _ = yysep3992, yyq3992, yy2arr3992
			const yyr3992 bool = false
			yyq3992[0] = x.Kind != ""
			yyq3992[1] = x.APIVersion != ""
			yyq3992[2] = true
			yyq3992[3] = true
			var yynn3992 int
			if yyr3992 || yy2arr3992 {
				r.EncodeArrayStart(4)
			} else {
				yynn3992 = 0
				for _, b := range yyq3992 {
					if b {
						yynn3992++
					}
				}
				r.EncodeMapStart(yynn3992)
				yynn3992 = 0
			}
			if yyr3992 || yy2arr3992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3992[0] {
					yym3994 := z.EncBinary()
					_ = yym3994
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3992[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3995 := z.EncBinary()
					_ = yym3995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3992 || yy2arr3992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3992[1] {
					yym3997 := z.EncBinary()
					_ = yym3997
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3992[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3998 := z.EncBinary()
					_ = yym3998
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3992 || yy2arr3992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3992[2] {
					yy4000 := &x.ObjectMeta
					yy4000.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3992[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4001 := &x.ObjectMeta
					yy4001.CodecEncodeSelf(e)
				}
			}
			if yyr3992 || yy2arr3992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3992[3] {
					yy4003 := &x.Spec
					yy4003.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3992[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4004 := &x.Spec
					yy4004.CodecEncodeSelf(e)
				}
			}
			if yyr3992 || yy2arr3992 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4005 := z.DecBinary()
	_ = yym4005
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4006 := r.ContainerType()
		if yyct4006 == codecSelferValueTypeMap1234 {
			yyl4006 := r.ReadMapStart()
			if yyl4006 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4006, d)
			}
		} else if yyct4006 == codecSelferValueTypeArray1234 {
			yyl4006 := r.ReadArrayStart()
			if yyl4006 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4006, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4007Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4007Slc
	var yyhl4007 bool = l >= 0
	for yyj4007 := 0; ; yyj4007++ {
		if yyhl4007 {
			if yyj4007 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4007Slc = r.DecodeBytes(yys4007Slc, true, true)
		yys4007 := string(yys4007Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4007 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4010 := &x.ObjectMeta
				yyv4010.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv4011 := &x.Spec
				yyv4011.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4007)
		} // end switch yys4007
	} // end for yyj4007
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4012 int
	var yyb4012 bool
	var yyhl4012 bool = l >= 0
	yyj4012++
	if yyhl4012 {
		yyb4012 = yyj4012 > l
	} else {
		yyb4012 = r.CheckBreak()
	}
	if yyb4012 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4012++
	if yyhl4012 {
		yyb4012 = yyj4012 > l
	} else {
		yyb4012 = r.CheckBreak()
	}
	if yyb4012 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4012++
	if yyhl4012 {
		yyb4012 = yyj4012 > l
	} else {
		yyb4012 = r.CheckBreak()
	}
	if yyb4012 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4015 := &x.ObjectMeta
		yyv4015.CodecDecodeSelf(d)
	}
	yyj4012++
	if yyhl4012 {
		yyb4012 = yyj4012 > l
	} else {
		yyb4012 = r.CheckBreak()
	}
	if yyb4012 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv4016 := &x.Spec
		yyv4016.CodecDecodeSelf(d)
	}
	for {
		yyj4012++
		if yyhl4012 {
			yyb4012 = yyj4012 > l
		} else {
			yyb4012 = r.CheckBreak()
		}
		if yyb4012 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4012-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4017 := z.EncBinary()
		_ = yym4017
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4018 := !z.EncBinary()
			yy2arr4018 := z.EncBasicHandle().StructToArray
			var yyq4018 [4]bool
			_, _, _ = yysep4018, yyq4018, yy2arr4018
			const yyr4018 bool = false
			yyq4018[0] = x.Kind != ""
			yyq4018[1] = x.APIVersion != ""
			yyq4018[2] = true
			var yynn4018 int
			if yyr4018 || yy2arr4018 {
				r.EncodeArrayStart(4)
			} else {
				yynn4018 = 1
				for _, b := range yyq4018 {
					if b {
						yynn4018++
					}
				}
				r.EncodeMapStart(yynn4018)
				yynn4018 = 0
			}
			if yyr4018 || yy2arr4018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4018[0] {
					yym4020 := z.EncBinary()
					_ = yym4020
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4018[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4021 := z.EncBinary()
					_ = yym4021
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4018 || yy2arr4018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4018[1] {
					yym4023 := z.EncBinary()
					_ = yym4023
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4018[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4024 := z.EncBinary()
					_ = yym4024
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4018 || yy2arr4018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4018[2] {
					yy4026 := &x.ListMeta
					yym4027 := z.EncBinary()
					_ = yym4027
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4026) {
					} else {
						z.EncFallback(yy4026)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4018[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4028 := &x.ListMeta
					yym4029 := z.EncBinary()
					_ = yym4029
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4028) {
					} else {
						z.EncFallback(yy4028)
					}
				}
			}
			if yyr4018 || yy2arr4018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4031 := z.EncBinary()
					_ = yym4031
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4032 := z.EncBinary()
					_ = yym4032
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr4018 || yy2arr4018 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4033 := z.DecBinary()
	_ = yym4033
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4034 := r.ContainerType()
		if yyct4034 == codecSelferValueTypeMap1234 {
			yyl4034 := r.ReadMapStart()
			if yyl4034 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4034, d)
			}
		} else if yyct4034 == codecSelferValueTypeArray1234 {
			yyl4034 := r.ReadArrayStart()
			if yyl4034 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4034, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4035Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4035Slc
	var yyhl4035 bool = l >= 0
	for yyj4035 := 0; ; yyj4035++ {
		if yyhl4035 {
			if yyj4035 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4035Slc = r.DecodeBytes(yys4035Slc, true, true)
		yys4035 := string(yys4035Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4035 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4038 := &x.ListMeta
				yym4039 := z.DecBinary()
				_ = yym4039
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4038) {
				} else {
					z.DecFallback(yyv4038, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4040 := &x.Items
				yym4041 := z.DecBinary()
				_ = yym4041
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv4040), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4035)
		} // end switch yys4035
	} // end for yyj4035
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4042 int
	var yyb4042 bool
	var yyhl4042 bool = l >= 0
	yyj4042++
	if yyhl4042 {
		yyb4042 = yyj4042 > l
	} else {
		yyb4042 = r.CheckBreak()
	}
	if yyb4042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4042++
	if yyhl4042 {
		yyb4042 = yyj4042 > l
	} else {
		yyb4042 = r.CheckBreak()
	}
	if yyb4042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4042++
	if yyhl4042 {
		yyb4042 = yyj4042 > l
	} else {
		yyb4042 = r.CheckBreak()
	}
	if yyb4042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4045 := &x.ListMeta
		yym4046 := z.DecBinary()
		_ = yym4046
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4045) {
		} else {
			z.DecFallback(yyv4045, false)
		}
	}
	yyj4042++
	if yyhl4042 {
		yyb4042 = yyj4042 > l
	} else {
		yyb4042 = r.CheckBreak()
	}
	if yyb4042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4047 := &x.Items
		yym4048 := z.DecBinary()
		_ = yym4048
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv4047), d)
		}
	}
	for {
		yyj4042++
		if yyhl4042 {
			yyb4042 = yyj4042 > l
		} else {
			yyb4042 = r.CheckBreak()
		}
		if yyb4042 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4042-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4049 := z.EncBinary()
	_ = yym4049
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4050 := z.DecBinary()
	_ = yym4050
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4051 := z.EncBinary()
		_ = yym4051
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4052 := !z.EncBinary()
			yy2arr4052 := z.EncBasicHandle().StructToArray
			var yyq4052 [2]bool
			_, _, _ = yysep4052, yyq4052, yy2arr4052
			const yyr4052 bool = false
			yyq4052[0] = len(x.Hard) != 0
			yyq4052[1] = len(x.Scopes) != 0
			var yynn4052 int
			if yyr4052 || yy2arr4052 {
				r.EncodeArrayStart(2)
			} else {
				yynn4052 = 0
				for _, b := range yyq4052 {
					if b {
						yynn4052++
					}
				}
				r.EncodeMapStart(yynn4052)
				yynn4052 = 0
			}
			if yyr4052 || yy2arr4052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4052[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4052[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4052 || yy2arr4052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4052[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4055 := z.EncBinary()
						_ = yym4055
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4052[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4056 := z.EncBinary()
						_ = yym4056
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr4052 || yy2arr4052 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4057 := z.DecBinary()
	_ = yym4057
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4058 := r.ContainerType()
		if yyct4058 == codecSelferValueTypeMap1234 {
			yyl4058 := r.ReadMapStart()
			if yyl4058 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4058, d)
			}
		} else if yyct4058 == codecSelferValueTypeArray1234 {
			yyl4058 := r.ReadArrayStart()
			if yyl4058 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4058, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4059Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4059Slc
	var yyhl4059 bool = l >= 0
	for yyj4059 := 0; ; yyj4059++ {
		if yyhl4059 {
			if yyj4059 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4059Slc = r.DecodeBytes(yys4059Slc, true, true)
		yys4059 := string(yys4059Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4059 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4060 := &x.Hard
				yyv4060.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv4061 := &x.Scopes
				yym4062 := z.DecBinary()
				_ = yym4062
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4061), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4059)
		} // end switch yys4059
	} // end for yyj4059
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4063 int
	var yyb4063 bool
	var yyhl4063 bool = l >= 0
	yyj4063++
	if yyhl4063 {
		yyb4063 = yyj4063 > l
	} else {
		yyb4063 = r.CheckBreak()
	}
	if yyb4063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4064 := &x.Hard
		yyv4064.CodecDecodeSelf(d)
	}
	yyj4063++
	if yyhl4063 {
		yyb4063 = yyj4063 > l
	} else {
		yyb4063 = r.CheckBreak()
	}
	if yyb4063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv4065 := &x.Scopes
		yym4066 := z.DecBinary()
		_ = yym4066
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4065), d)
		}
	}
	for {
		yyj4063++
		if yyhl4063 {
			yyb4063 = yyj4063 > l
		} else {
			yyb4063 = r.CheckBreak()
		}
		if yyb4063 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4063-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4067 := z.EncBinary()
		_ = yym4067
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4068 := !z.EncBinary()
			yy2arr4068 := z.EncBasicHandle().StructToArray
			var yyq4068 [2]bool
			_, _, _ = yysep4068, yyq4068, yy2arr4068
			const yyr4068 bool = false
			yyq4068[0] = len(x.Hard) != 0
			yyq4068[1] = len(x.Used) != 0
			var yynn4068 int
			if yyr4068 || yy2arr4068 {
				r.EncodeArrayStart(2)
			} else {
				yynn4068 = 0
				for _, b := range yyq4068 {
					if b {
						yynn4068++
					}
				}
				r.EncodeMapStart(yynn4068)
				yynn4068 = 0
			}
			if yyr4068 || yy2arr4068 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4068[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4068[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4068 || yy2arr4068 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4068[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4068[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4068 || yy2arr4068 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4071 := z.DecBinary()
	_ = yym4071
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4072 := r.ContainerType()
		if yyct4072 == codecSelferValueTypeMap1234 {
			yyl4072 := r.ReadMapStart()
			if yyl4072 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4072, d)
			}
		} else if yyct4072 == codecSelferValueTypeArray1234 {
			yyl4072 := r.ReadArrayStart()
			if yyl4072 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4072, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4073Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4073Slc
	var yyhl4073 bool = l >= 0
	for yyj4073 := 0; ; yyj4073++ {
		if yyhl4073 {
			if yyj4073 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4073Slc = r.DecodeBytes(yys4073Slc, true, true)
		yys4073 := string(yys4073Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4073 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4074 := &x.Hard
				yyv4074.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv4075 := &x.Used
				yyv4075.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4073)
		} // end switch yys4073
	} // end for yyj4073
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4076 int
	var yyb4076 bool
	var yyhl4076 bool = l >= 0
	yyj4076++
	if yyhl4076 {
		yyb4076 = yyj4076 > l
	} else {
		yyb4076 = r.CheckBreak()
	}
	if yyb4076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4077 := &x.Hard
		yyv4077.CodecDecodeSelf(d)
	}
	yyj4076++
	if yyhl4076 {
		yyb4076 = yyj4076 > l
	} else {
		yyb4076 = r.CheckBreak()
	}
	if yyb4076 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv4078 := &x.Used
		yyv4078.CodecDecodeSelf(d)
	}
	for {
		yyj4076++
		if yyhl4076 {
			yyb4076 = yyj4076 > l
		} else {
			yyb4076 = r.CheckBreak()
		}
		if yyb4076 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4076-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4079 := z.EncBinary()
		_ = yym4079
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4080 := !z.EncBinary()
			yy2arr4080 := z.EncBasicHandle().StructToArray
			var yyq4080 [5]bool
			_, _, _ = yysep4080, yyq4080, yy2arr4080
			const yyr4080 bool = false
			yyq4080[0] = x.Kind != ""
			yyq4080[1] = x.APIVersion != ""
			yyq4080[2] = true
			yyq4080[3] = true
			yyq4080[4] = true
			var yynn4080 int
			if yyr4080 || yy2arr4080 {
				r.EncodeArrayStart(5)
			} else {
				yynn4080 = 0
				for _, b := range yyq4080 {
					if b {
						yynn4080++
					}
				}
				r.EncodeMapStart(yynn4080)
				yynn4080 = 0
			}
			if yyr4080 || yy2arr4080 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4080[0] {
					yym4082 := z.EncBinary()
					_ = yym4082
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4080[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4083 := z.EncBinary()
					_ = yym4083
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4080 || yy2arr4080 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4080[1] {
					yym4085 := z.EncBinary()
					_ = yym4085
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4080[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4086 := z.EncBinary()
					_ = yym4086
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4080 || yy2arr4080 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4080[2] {
					yy4088 := &x.ObjectMeta
					yy4088.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4080[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4089 := &x.ObjectMeta
					yy4089.CodecEncodeSelf(e)
				}
			}
			if yyr4080 || yy2arr4080 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4080[3] {
					yy4091 := &x.Spec
					yy4091.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4080[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4092 := &x.Spec
					yy4092.CodecEncodeSelf(e)
				}
			}
			if yyr4080 || yy2arr4080 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4080[4] {
					yy4094 := &x.Status
					yy4094.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4080[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4095 := &x.Status
					yy4095.CodecEncodeSelf(e)
				}
			}
			if yyr4080 || yy2arr4080 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4096 := z.DecBinary()
	_ = yym4096
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4097 := r.ContainerType()
		if yyct4097 == codecSelferValueTypeMap1234 {
			yyl4097 := r.ReadMapStart()
			if yyl4097 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4097, d)
			}
		} else if yyct4097 == codecSelferValueTypeArray1234 {
			yyl4097 := r.ReadArrayStart()
			if yyl4097 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4097, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4098Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4098Slc
	var yyhl4098 bool = l >= 0
	for yyj4098 := 0; ; yyj4098++ {
		if yyhl4098 {
			if yyj4098 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4098Slc = r.DecodeBytes(yys4098Slc, true, true)
		yys4098 := string(yys4098Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4098 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4101 := &x.ObjectMeta
				yyv4101.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4102 := &x.Spec
				yyv4102.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4103 := &x.Status
				yyv4103.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4098)
		} // end switch yys4098
	} // end for yyj4098
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4104 int
	var yyb4104 bool
	var yyhl4104 bool = l >= 0
	yyj4104++
	if yyhl4104 {
		yyb4104 = yyj4104 > l
	} else {
		yyb4104 = r.CheckBreak()
	}
	if yyb4104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4104++
	if yyhl4104 {
		yyb4104 = yyj4104 > l
	} else {
		yyb4104 = r.CheckBreak()
	}
	if yyb4104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4104++
	if yyhl4104 {
		yyb4104 = yyj4104 > l
	} else {
		yyb4104 = r.CheckBreak()
	}
	if yyb4104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4107 := &x.ObjectMeta
		yyv4107.CodecDecodeSelf(d)
	}
	yyj4104++
	if yyhl4104 {
		yyb4104 = yyj4104 > l
	} else {
		yyb4104 = r.CheckBreak()
	}
	if yyb4104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4108 := &x.Spec
		yyv4108.CodecDecodeSelf(d)
	}
	yyj4104++
	if yyhl4104 {
		yyb4104 = yyj4104 > l
	} else {
		yyb4104 = r.CheckBreak()
	}
	if yyb4104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4109 := &x.Status
		yyv4109.CodecDecodeSelf(d)
	}
	for {
		yyj4104++
		if yyhl4104 {
			yyb4104 = yyj4104 > l
		} else {
			yyb4104 = r.CheckBreak()
		}
		if yyb4104 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4104-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4110 := z.EncBinary()
		_ = yym4110
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4111 := !z.EncBinary()
			yy2arr4111 := z.EncBasicHandle().StructToArray
			var yyq4111 [4]bool
			_, _, _ = yysep4111, yyq4111, yy2arr4111
			const yyr4111 bool = false
			yyq4111[0] = x.Kind != ""
			yyq4111[1] = x.APIVersion != ""
			yyq4111[2] = true
			var yynn4111 int
			if yyr4111 || yy2arr4111 {
				r.EncodeArrayStart(4)
			} else {
				yynn4111 = 1
				for _, b := range yyq4111 {
					if b {
						yynn4111++
					}
				}
				r.EncodeMapStart(yynn4111)
				yynn4111 = 0
			}
			if yyr4111 || yy2arr4111 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4111[0] {
					yym4113 := z.EncBinary()
					_ = yym4113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4111[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4114 := z.EncBinary()
					_ = yym4114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4111 || yy2arr4111 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4111[1] {
					yym4116 := z.EncBinary()
					_ = yym4116
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4111[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4117 := z.EncBinary()
					_ = yym4117
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4111 || yy2arr4111 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4111[2] {
					yy4119 := &x.ListMeta
					yym4120 := z.EncBinary()
					_ = yym4120
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4119) {
					} else {
						z.EncFallback(yy4119)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4111[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4121 := &x.ListMeta
					yym4122 := z.EncBinary()
					_ = yym4122
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4121) {
					} else {
						z.EncFallback(yy4121)
					}
				}
			}
			if yyr4111 || yy2arr4111 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4124 := z.EncBinary()
					_ = yym4124
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4125 := z.EncBinary()
					_ = yym4125
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4111 || yy2arr4111 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4126 := z.DecBinary()
	_ = yym4126
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4127 := r.ContainerType()
		if yyct4127 == codecSelferValueTypeMap1234 {
			yyl4127 := r.ReadMapStart()
			if yyl4127 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4127, d)
			}
		} else if yyct4127 == codecSelferValueTypeArray1234 {
			yyl4127 := r.ReadArrayStart()
			if yyl4127 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4127, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4128Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4128Slc
	var yyhl4128 bool = l >= 0
	for yyj4128 := 0; ; yyj4128++ {
		if yyhl4128 {
			if yyj4128 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4128Slc = r.DecodeBytes(yys4128Slc, true, true)
		yys4128 := string(yys4128Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4128 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4131 := &x.ListMeta
				yym4132 := z.DecBinary()
				_ = yym4132
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4131) {
				} else {
					z.DecFallback(yyv4131, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4133 := &x.Items
				yym4134 := z.DecBinary()
				_ = yym4134
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4133), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4128)
		} // end switch yys4128
	} // end for yyj4128
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4135 int
	var yyb4135 bool
	var yyhl4135 bool = l >= 0
	yyj4135++
	if yyhl4135 {
		yyb4135 = yyj4135 > l
	} else {
		yyb4135 = r.CheckBreak()
	}
	if yyb4135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4135++
	if yyhl4135 {
		yyb4135 = yyj4135 > l
	} else {
		yyb4135 = r.CheckBreak()
	}
	if yyb4135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4135++
	if yyhl4135 {
		yyb4135 = yyj4135 > l
	} else {
		yyb4135 = r.CheckBreak()
	}
	if yyb4135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4138 := &x.ListMeta
		yym4139 := z.DecBinary()
		_ = yym4139
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4138) {
		} else {
			z.DecFallback(yyv4138, false)
		}
	}
	yyj4135++
	if yyhl4135 {
		yyb4135 = yyj4135 > l
	} else {
		yyb4135 = r.CheckBreak()
	}
	if yyb4135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4140 := &x.Items
		yym4141 := z.DecBinary()
		_ = yym4141
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4140), d)
		}
	}
	for {
		yyj4135++
		if yyhl4135 {
			yyb4135 = yyj4135 > l
		} else {
			yyb4135 = r.CheckBreak()
		}
		if yyb4135 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4135-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4142 := z.EncBinary()
		_ = yym4142
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4143 := !z.EncBinary()
			yy2arr4143 := z.EncBasicHandle().StructToArray
			var yyq4143 [6]bool
			_, _, _ = yysep4143, yyq4143, yy2arr4143
			const yyr4143 bool = false
			yyq4143[0] = x.Kind != ""
			yyq4143[1] = x.APIVersion != ""
			yyq4143[2] = true
			yyq4143[3] = len(x.Data) != 0
			yyq4143[4] = len(x.StringData) != 0
			yyq4143[5] = x.Type != ""
			var yynn4143 int
			if yyr4143 || yy2arr4143 {
				r.EncodeArrayStart(6)
			} else {
				yynn4143 = 0
				for _, b := range yyq4143 {
					if b {
						yynn4143++
					}
				}
				r.EncodeMapStart(yynn4143)
				yynn4143 = 0
			}
			if yyr4143 || yy2arr4143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4143[0] {
					yym4145 := z.EncBinary()
					_ = yym4145
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4143[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4146 := z.EncBinary()
					_ = yym4146
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4143 || yy2arr4143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4143[1] {
					yym4148 := z.EncBinary()
					_ = yym4148
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4143[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4149 := z.EncBinary()
					_ = yym4149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4143 || yy2arr4143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4143[2] {
					yy4151 := &x.ObjectMeta
					yy4151.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4143[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4152 := &x.ObjectMeta
					yy4152.CodecEncodeSelf(e)
				}
			}
			if yyr4143 || yy2arr4143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4143[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4154 := z.EncBinary()
						_ = yym4154
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4143[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4155 := z.EncBinary()
						_ = yym4155
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4143 || yy2arr4143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4143[4] {
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4157 := z.EncBinary()
						_ = yym4157
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4143[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stringData"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StringData == nil {
						r.EncodeNil()
					} else {
						yym4158 := z.EncBinary()
						_ = yym4158
						if false {
						} else {
							z.F.EncMapStringStringV(x.StringData, false, e)
						}
					}
				}
			}
			if yyr4143 || yy2arr4143 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4143[5] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4143[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4143 || yy2arr4143 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4160 := z.DecBinary()
	_ = yym4160
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4161 := r.ContainerType()
		if yyct4161 == codecSelferValueTypeMap1234 {
			yyl4161 := r.ReadMapStart()
			if yyl4161 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4161, d)
			}
		} else if yyct4161 == codecSelferValueTypeArray1234 {
			yyl4161 := r.ReadArrayStart()
			if yyl4161 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4161, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4162Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4162Slc
	var yyhl4162 bool = l >= 0
	for yyj4162 := 0; ; yyj4162++ {
		if yyhl4162 {
			if yyj4162 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4162Slc = r.DecodeBytes(yys4162Slc, true, true)
		yys4162 := string(yys4162Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4162 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4165 := &x.ObjectMeta
				yyv4165.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4166 := &x.Data
				yym4167 := z.DecBinary()
				_ = yym4167
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4166), d)
				}
			}
		case "stringData":
			if r.TryDecodeAsNil() {
				x.StringData = nil
			} else {
				yyv4168 := &x.StringData
				yym4169 := z.DecBinary()
				_ = yym4169
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4168, false, d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4162)
		} // end switch yys4162
	} // end for yyj4162
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4171 int
	var yyb4171 bool
	var yyhl4171 bool = l >= 0
	yyj4171++
	if yyhl4171 {
		yyb4171 = yyj4171 > l
	} else {
		yyb4171 = r.CheckBreak()
	}
	if yyb4171 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4171++
	if yyhl4171 {
		yyb4171 = yyj4171 > l
	} else {
		yyb4171 = r.CheckBreak()
	}
	if yyb4171 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4171++
	if yyhl4171 {
		yyb4171 = yyj4171 > l
	} else {
		yyb4171 = r.CheckBreak()
	}
	if yyb4171 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4174 := &x.ObjectMeta
		yyv4174.CodecDecodeSelf(d)
	}
	yyj4171++
	if yyhl4171 {
		yyb4171 = yyj4171 > l
	} else {
		yyb4171 = r.CheckBreak()
	}
	if yyb4171 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4175 := &x.Data
		yym4176 := z.DecBinary()
		_ = yym4176
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4175), d)
		}
	}
	yyj4171++
	if yyhl4171 {
		yyb4171 = yyj4171 > l
	} else {
		yyb4171 = r.CheckBreak()
	}
	if yyb4171 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StringData = nil
	} else {
		yyv4177 := &x.StringData
		yym4178 := z.DecBinary()
		_ = yym4178
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4177, false, d)
		}
	}
	yyj4171++
	if yyhl4171 {
		yyb4171 = yyj4171 > l
	} else {
		yyb4171 = r.CheckBreak()
	}
	if yyb4171 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4171++
		if yyhl4171 {
			yyb4171 = yyj4171 > l
		} else {
			yyb4171 = r.CheckBreak()
		}
		if yyb4171 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4171-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4180 := z.EncBinary()
	_ = yym4180
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4181 := z.DecBinary()
	_ = yym4181
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4182 := z.EncBinary()
		_ = yym4182
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4183 := !z.EncBinary()
			yy2arr4183 := z.EncBasicHandle().StructToArray
			var yyq4183 [4]bool
			_, _, _ = yysep4183, yyq4183, yy2arr4183
			const yyr4183 bool = false
			yyq4183[0] = x.Kind != ""
			yyq4183[1] = x.APIVersion != ""
			yyq4183[2] = true
			var yynn4183 int
			if yyr4183 || yy2arr4183 {
				r.EncodeArrayStart(4)
			} else {
				yynn4183 = 1
				for _, b := range yyq4183 {
					if b {
						yynn4183++
					}
				}
				r.EncodeMapStart(yynn4183)
				yynn4183 = 0
			}
			if yyr4183 || yy2arr4183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4183[0] {
					yym4185 := z.EncBinary()
					_ = yym4185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4183[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4186 := z.EncBinary()
					_ = yym4186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4183 || yy2arr4183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4183[1] {
					yym4188 := z.EncBinary()
					_ = yym4188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4183[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4189 := z.EncBinary()
					_ = yym4189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4183 || yy2arr4183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4183[2] {
					yy4191 := &x.ListMeta
					yym4192 := z.EncBinary()
					_ = yym4192
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4191) {
					} else {
						z.EncFallback(yy4191)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4183[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4193 := &x.ListMeta
					yym4194 := z.EncBinary()
					_ = yym4194
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4193) {
					} else {
						z.EncFallback(yy4193)
					}
				}
			}
			if yyr4183 || yy2arr4183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4196 := z.EncBinary()
					_ = yym4196
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4197 := z.EncBinary()
					_ = yym4197
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4183 || yy2arr4183 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4198 := z.DecBinary()
	_ = yym4198
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4199 := r.ContainerType()
		if yyct4199 == codecSelferValueTypeMap1234 {
			yyl4199 := r.ReadMapStart()
			if yyl4199 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4199, d)
			}
		} else if yyct4199 == codecSelferValueTypeArray1234 {
			yyl4199 := r.ReadArrayStart()
			if yyl4199 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4199, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4200Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4200Slc
	var yyhl4200 bool = l >= 0
	for yyj4200 := 0; ; yyj4200++ {
		if yyhl4200 {
			if yyj4200 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4200Slc = r.DecodeBytes(yys4200Slc, true, true)
		yys4200 := string(yys4200Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4200 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4203 := &x.ListMeta
				yym4204 := z.DecBinary()
				_ = yym4204
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4203) {
				} else {
					z.DecFallback(yyv4203, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4205 := &x.Items
				yym4206 := z.DecBinary()
				_ = yym4206
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4205), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4200)
		} // end switch yys4200
	} // end for yyj4200
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4207 int
	var yyb4207 bool
	var yyhl4207 bool = l >= 0
	yyj4207++
	if yyhl4207 {
		yyb4207 = yyj4207 > l
	} else {
		yyb4207 = r.CheckBreak()
	}
	if yyb4207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4207++
	if yyhl4207 {
		yyb4207 = yyj4207 > l
	} else {
		yyb4207 = r.CheckBreak()
	}
	if yyb4207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4207++
	if yyhl4207 {
		yyb4207 = yyj4207 > l
	} else {
		yyb4207 = r.CheckBreak()
	}
	if yyb4207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4210 := &x.ListMeta
		yym4211 := z.DecBinary()
		_ = yym4211
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4210) {
		} else {
			z.DecFallback(yyv4210, false)
		}
	}
	yyj4207++
	if yyhl4207 {
		yyb4207 = yyj4207 > l
	} else {
		yyb4207 = r.CheckBreak()
	}
	if yyb4207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4212 := &x.Items
		yym4213 := z.DecBinary()
		_ = yym4213
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4212), d)
		}
	}
	for {
		yyj4207++
		if yyhl4207 {
			yyb4207 = yyj4207 > l
		} else {
			yyb4207 = r.CheckBreak()
		}
		if yyb4207 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4207-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4214 := z.EncBinary()
		_ = yym4214
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4215 := !z.EncBinary()
			yy2arr4215 := z.EncBasicHandle().StructToArray
			var yyq4215 [4]bool
			_, _, _ = yysep4215, yyq4215, yy2arr4215
			const yyr4215 bool = false
			yyq4215[0] = x.Kind != ""
			yyq4215[1] = x.APIVersion != ""
			yyq4215[2] = true
			yyq4215[3] = len(x.Data) != 0
			var yynn4215 int
			if yyr4215 || yy2arr4215 {
				r.EncodeArrayStart(4)
			} else {
				yynn4215 = 0
				for _, b := range yyq4215 {
					if b {
						yynn4215++
					}
				}
				r.EncodeMapStart(yynn4215)
				yynn4215 = 0
			}
			if yyr4215 || yy2arr4215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4215[0] {
					yym4217 := z.EncBinary()
					_ = yym4217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4215[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4218 := z.EncBinary()
					_ = yym4218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4215 || yy2arr4215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4215[1] {
					yym4220 := z.EncBinary()
					_ = yym4220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4215[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4221 := z.EncBinary()
					_ = yym4221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4215 || yy2arr4215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4215[2] {
					yy4223 := &x.ObjectMeta
					yy4223.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4215[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4224 := &x.ObjectMeta
					yy4224.CodecEncodeSelf(e)
				}
			}
			if yyr4215 || yy2arr4215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4215[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4226 := z.EncBinary()
						_ = yym4226
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4215[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4227 := z.EncBinary()
						_ = yym4227
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4215 || yy2arr4215 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4228 := z.DecBinary()
	_ = yym4228
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4229 := r.ContainerType()
		if yyct4229 == codecSelferValueTypeMap1234 {
			yyl4229 := r.ReadMapStart()
			if yyl4229 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4229, d)
			}
		} else if yyct4229 == codecSelferValueTypeArray1234 {
			yyl4229 := r.ReadArrayStart()
			if yyl4229 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4229, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4230Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4230Slc
	var yyhl4230 bool = l >= 0
	for yyj4230 := 0; ; yyj4230++ {
		if yyhl4230 {
			if yyj4230 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4230Slc = r.DecodeBytes(yys4230Slc, true, true)
		yys4230 := string(yys4230Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4230 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4233 := &x.ObjectMeta
				yyv4233.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4234 := &x.Data
				yym4235 := z.DecBinary()
				_ = yym4235
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4234, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4230)
		} // end switch yys4230
	} // end for yyj4230
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4236 int
	var yyb4236 bool
	var yyhl4236 bool = l >= 0
	yyj4236++
	if yyhl4236 {
		yyb4236 = yyj4236 > l
	} else {
		yyb4236 = r.CheckBreak()
	}
	if yyb4236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4236++
	if yyhl4236 {
		yyb4236 = yyj4236 > l
	} else {
		yyb4236 = r.CheckBreak()
	}
	if yyb4236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4236++
	if yyhl4236 {
		yyb4236 = yyj4236 > l
	} else {
		yyb4236 = r.CheckBreak()
	}
	if yyb4236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4239 := &x.ObjectMeta
		yyv4239.CodecDecodeSelf(d)
	}
	yyj4236++
	if yyhl4236 {
		yyb4236 = yyj4236 > l
	} else {
		yyb4236 = r.CheckBreak()
	}
	if yyb4236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4240 := &x.Data
		yym4241 := z.DecBinary()
		_ = yym4241
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4240, false, d)
		}
	}
	for {
		yyj4236++
		if yyhl4236 {
			yyb4236 = yyj4236 > l
		} else {
			yyb4236 = r.CheckBreak()
		}
		if yyb4236 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4236-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4242 := z.EncBinary()
		_ = yym4242
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4243 := !z.EncBinary()
			yy2arr4243 := z.EncBasicHandle().StructToArray
			var yyq4243 [4]bool
			_, _, _ = yysep4243, yyq4243, yy2arr4243
			const yyr4243 bool = false
			yyq4243[0] = x.Kind != ""
			yyq4243[1] = x.APIVersion != ""
			yyq4243[2] = true
			var yynn4243 int
			if yyr4243 || yy2arr4243 {
				r.EncodeArrayStart(4)
			} else {
				yynn4243 = 1
				for _, b := range yyq4243 {
					if b {
						yynn4243++
					}
				}
				r.EncodeMapStart(yynn4243)
				yynn4243 = 0
			}
			if yyr4243 || yy2arr4243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4243[0] {
					yym4245 := z.EncBinary()
					_ = yym4245
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4243[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4246 := z.EncBinary()
					_ = yym4246
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4243 || yy2arr4243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4243[1] {
					yym4248 := z.EncBinary()
					_ = yym4248
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4243[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4249 := z.EncBinary()
					_ = yym4249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4243 || yy2arr4243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4243[2] {
					yy4251 := &x.ListMeta
					yym4252 := z.EncBinary()
					_ = yym4252
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4251) {
					} else {
						z.EncFallback(yy4251)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4243[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4253 := &x.ListMeta
					yym4254 := z.EncBinary()
					_ = yym4254
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4253) {
					} else {
						z.EncFallback(yy4253)
					}
				}
			}
			if yyr4243 || yy2arr4243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4256 := z.EncBinary()
					_ = yym4256
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4257 := z.EncBinary()
					_ = yym4257
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4243 || yy2arr4243 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4258 := z.DecBinary()
	_ = yym4258
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4259 := r.ContainerType()
		if yyct4259 == codecSelferValueTypeMap1234 {
			yyl4259 := r.ReadMapStart()
			if yyl4259 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4259, d)
			}
		} else if yyct4259 == codecSelferValueTypeArray1234 {
			yyl4259 := r.ReadArrayStart()
			if yyl4259 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4259, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4260Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4260Slc
	var yyhl4260 bool = l >= 0
	for yyj4260 := 0; ; yyj4260++ {
		if yyhl4260 {
			if yyj4260 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4260Slc = r.DecodeBytes(yys4260Slc, true, true)
		yys4260 := string(yys4260Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4260 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4263 := &x.ListMeta
				yym4264 := z.DecBinary()
				_ = yym4264
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4263) {
				} else {
					z.DecFallback(yyv4263, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4265 := &x.Items
				yym4266 := z.DecBinary()
				_ = yym4266
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4265), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4260)
		} // end switch yys4260
	} // end for yyj4260
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4267 int
	var yyb4267 bool
	var yyhl4267 bool = l >= 0
	yyj4267++
	if yyhl4267 {
		yyb4267 = yyj4267 > l
	} else {
		yyb4267 = r.CheckBreak()
	}
	if yyb4267 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4267++
	if yyhl4267 {
		yyb4267 = yyj4267 > l
	} else {
		yyb4267 = r.CheckBreak()
	}
	if yyb4267 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4267++
	if yyhl4267 {
		yyb4267 = yyj4267 > l
	} else {
		yyb4267 = r.CheckBreak()
	}
	if yyb4267 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4270 := &x.ListMeta
		yym4271 := z.DecBinary()
		_ = yym4271
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4270) {
		} else {
			z.DecFallback(yyv4270, false)
		}
	}
	yyj4267++
	if yyhl4267 {
		yyb4267 = yyj4267 > l
	} else {
		yyb4267 = r.CheckBreak()
	}
	if yyb4267 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4272 := &x.Items
		yym4273 := z.DecBinary()
		_ = yym4273
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4272), d)
		}
	}
	for {
		yyj4267++
		if yyhl4267 {
			yyb4267 = yyj4267 > l
		} else {
			yyb4267 = r.CheckBreak()
		}
		if yyb4267 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4267-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4274 := z.EncBinary()
	_ = yym4274
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4275 := z.DecBinary()
	_ = yym4275
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4276 := z.EncBinary()
		_ = yym4276
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4277 := !z.EncBinary()
			yy2arr4277 := z.EncBasicHandle().StructToArray
			var yyq4277 [4]bool
			_, _, _ = yysep4277, yyq4277, yy2arr4277
			const yyr4277 bool = false
			yyq4277[2] = x.Message != ""
			yyq4277[3] = x.Error != ""
			var yynn4277 int
			if yyr4277 || yy2arr4277 {
				r.EncodeArrayStart(4)
			} else {
				yynn4277 = 2
				for _, b := range yyq4277 {
					if b {
						yynn4277++
					}
				}
				r.EncodeMapStart(yynn4277)
				yynn4277 = 0
			}
			if yyr4277 || yy2arr4277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4277 || yy2arr4277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4277 || yy2arr4277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4277[2] {
					yym4281 := z.EncBinary()
					_ = yym4281
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4277[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4282 := z.EncBinary()
					_ = yym4282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4277 || yy2arr4277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4277[3] {
					yym4284 := z.EncBinary()
					_ = yym4284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4277[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4285 := z.EncBinary()
					_ = yym4285
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4277 || yy2arr4277 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4286 := z.DecBinary()
	_ = yym4286
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4287 := r.ContainerType()
		if yyct4287 == codecSelferValueTypeMap1234 {
			yyl4287 := r.ReadMapStart()
			if yyl4287 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4287, d)
			}
		} else if yyct4287 == codecSelferValueTypeArray1234 {
			yyl4287 := r.ReadArrayStart()
			if yyl4287 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4287, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4288Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4288Slc
	var yyhl4288 bool = l >= 0
	for yyj4288 := 0; ; yyj4288++ {
		if yyhl4288 {
			if yyj4288 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4288Slc = r.DecodeBytes(yys4288Slc, true, true)
		yys4288 := string(yys4288Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4288 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4288)
		} // end switch yys4288
	} // end for yyj4288
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4293 int
	var yyb4293 bool
	var yyhl4293 bool = l >= 0
	yyj4293++
	if yyhl4293 {
		yyb4293 = yyj4293 > l
	} else {
		yyb4293 = r.CheckBreak()
	}
	if yyb4293 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4293++
	if yyhl4293 {
		yyb4293 = yyj4293 > l
	} else {
		yyb4293 = r.CheckBreak()
	}
	if yyb4293 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4293++
	if yyhl4293 {
		yyb4293 = yyj4293 > l
	} else {
		yyb4293 = r.CheckBreak()
	}
	if yyb4293 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4293++
	if yyhl4293 {
		yyb4293 = yyj4293 > l
	} else {
		yyb4293 = r.CheckBreak()
	}
	if yyb4293 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4293++
		if yyhl4293 {
			yyb4293 = yyj4293 > l
		} else {
			yyb4293 = r.CheckBreak()
		}
		if yyb4293 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4293-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4298 := z.EncBinary()
		_ = yym4298
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4299 := !z.EncBinary()
			yy2arr4299 := z.EncBasicHandle().StructToArray
			var yyq4299 [4]bool
			_, _, _ = yysep4299, yyq4299, yy2arr4299
			const yyr4299 bool = false
			yyq4299[0] = x.Kind != ""
			yyq4299[1] = x.APIVersion != ""
			yyq4299[2] = true
			yyq4299[3] = len(x.Conditions) != 0
			var yynn4299 int
			if yyr4299 || yy2arr4299 {
				r.EncodeArrayStart(4)
			} else {
				yynn4299 = 0
				for _, b := range yyq4299 {
					if b {
						yynn4299++
					}
				}
				r.EncodeMapStart(yynn4299)
				yynn4299 = 0
			}
			if yyr4299 || yy2arr4299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4299[0] {
					yym4301 := z.EncBinary()
					_ = yym4301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4299[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4302 := z.EncBinary()
					_ = yym4302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4299 || yy2arr4299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4299[1] {
					yym4304 := z.EncBinary()
					_ = yym4304
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4299[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4305 := z.EncBinary()
					_ = yym4305
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4299 || yy2arr4299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4299[2] {
					yy4307 := &x.ObjectMeta
					yy4307.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4299[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4308 := &x.ObjectMeta
					yy4308.CodecEncodeSelf(e)
				}
			}
			if yyr4299 || yy2arr4299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4299[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4310 := z.EncBinary()
						_ = yym4310
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4299[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4311 := z.EncBinary()
						_ = yym4311
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4299 || yy2arr4299 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4312 := z.DecBinary()
	_ = yym4312
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4313 := r.ContainerType()
		if yyct4313 == codecSelferValueTypeMap1234 {
			yyl4313 := r.ReadMapStart()
			if yyl4313 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4313, d)
			}
		} else if yyct4313 == codecSelferValueTypeArray1234 {
			yyl4313 := r.ReadArrayStart()
			if yyl4313 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4313, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4314Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4314Slc
	var yyhl4314 bool = l >= 0
	for yyj4314 := 0; ; yyj4314++ {
		if yyhl4314 {
			if yyj4314 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4314Slc = r.DecodeBytes(yys4314Slc, true, true)
		yys4314 := string(yys4314Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4314 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4317 := &x.ObjectMeta
				yyv4317.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4318 := &x.Conditions
				yym4319 := z.DecBinary()
				_ = yym4319
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4318), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4314)
		} // end switch yys4314
	} // end for yyj4314
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4320 int
	var yyb4320 bool
	var yyhl4320 bool = l >= 0
	yyj4320++
	if yyhl4320 {
		yyb4320 = yyj4320 > l
	} else {
		yyb4320 = r.CheckBreak()
	}
	if yyb4320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4320++
	if yyhl4320 {
		yyb4320 = yyj4320 > l
	} else {
		yyb4320 = r.CheckBreak()
	}
	if yyb4320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4320++
	if yyhl4320 {
		yyb4320 = yyj4320 > l
	} else {
		yyb4320 = r.CheckBreak()
	}
	if yyb4320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4323 := &x.ObjectMeta
		yyv4323.CodecDecodeSelf(d)
	}
	yyj4320++
	if yyhl4320 {
		yyb4320 = yyj4320 > l
	} else {
		yyb4320 = r.CheckBreak()
	}
	if yyb4320 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4324 := &x.Conditions
		yym4325 := z.DecBinary()
		_ = yym4325
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4324), d)
		}
	}
	for {
		yyj4320++
		if yyhl4320 {
			yyb4320 = yyj4320 > l
		} else {
			yyb4320 = r.CheckBreak()
		}
		if yyb4320 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4320-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4326 := z.EncBinary()
		_ = yym4326
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4327 := !z.EncBinary()
			yy2arr4327 := z.EncBasicHandle().StructToArray
			var yyq4327 [4]bool
			_, _, _ = yysep4327, yyq4327, yy2arr4327
			const yyr4327 bool = false
			yyq4327[0] = x.Kind != ""
			yyq4327[1] = x.APIVersion != ""
			yyq4327[2] = true
			var yynn4327 int
			if yyr4327 || yy2arr4327 {
				r.EncodeArrayStart(4)
			} else {
				yynn4327 = 1
				for _, b := range yyq4327 {
					if b {
						yynn4327++
					}
				}
				r.EncodeMapStart(yynn4327)
				yynn4327 = 0
			}
			if yyr4327 || yy2arr4327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4327[0] {
					yym4329 := z.EncBinary()
					_ = yym4329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4327[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4330 := z.EncBinary()
					_ = yym4330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4327 || yy2arr4327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4327[1] {
					yym4332 := z.EncBinary()
					_ = yym4332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4327[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4333 := z.EncBinary()
					_ = yym4333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4327 || yy2arr4327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4327[2] {
					yy4335 := &x.ListMeta
					yym4336 := z.EncBinary()
					_ = yym4336
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4335) {
					} else {
						z.EncFallback(yy4335)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4327[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4337 := &x.ListMeta
					yym4338 := z.EncBinary()
					_ = yym4338
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4337) {
					} else {
						z.EncFallback(yy4337)
					}
				}
			}
			if yyr4327 || yy2arr4327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4340 := z.EncBinary()
					_ = yym4340
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4341 := z.EncBinary()
					_ = yym4341
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4327 || yy2arr4327 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4342 := z.DecBinary()
	_ = yym4342
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4343 := r.ContainerType()
		if yyct4343 == codecSelferValueTypeMap1234 {
			yyl4343 := r.ReadMapStart()
			if yyl4343 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4343, d)
			}
		} else if yyct4343 == codecSelferValueTypeArray1234 {
			yyl4343 := r.ReadArrayStart()
			if yyl4343 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4343, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4344Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4344Slc
	var yyhl4344 bool = l >= 0
	for yyj4344 := 0; ; yyj4344++ {
		if yyhl4344 {
			if yyj4344 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4344Slc = r.DecodeBytes(yys4344Slc, true, true)
		yys4344 := string(yys4344Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4344 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4347 := &x.ListMeta
				yym4348 := z.DecBinary()
				_ = yym4348
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4347) {
				} else {
					z.DecFallback(yyv4347, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4349 := &x.Items
				yym4350 := z.DecBinary()
				_ = yym4350
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4349), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4344)
		} // end switch yys4344
	} // end for yyj4344
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4351 int
	var yyb4351 bool
	var yyhl4351 bool = l >= 0
	yyj4351++
	if yyhl4351 {
		yyb4351 = yyj4351 > l
	} else {
		yyb4351 = r.CheckBreak()
	}
	if yyb4351 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4351++
	if yyhl4351 {
		yyb4351 = yyj4351 > l
	} else {
		yyb4351 = r.CheckBreak()
	}
	if yyb4351 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4351++
	if yyhl4351 {
		yyb4351 = yyj4351 > l
	} else {
		yyb4351 = r.CheckBreak()
	}
	if yyb4351 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4354 := &x.ListMeta
		yym4355 := z.DecBinary()
		_ = yym4355
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4354) {
		} else {
			z.DecFallback(yyv4354, false)
		}
	}
	yyj4351++
	if yyhl4351 {
		yyb4351 = yyj4351 > l
	} else {
		yyb4351 = r.CheckBreak()
	}
	if yyb4351 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4356 := &x.Items
		yym4357 := z.DecBinary()
		_ = yym4357
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4356), d)
		}
	}
	for {
		yyj4351++
		if yyhl4351 {
			yyb4351 = yyj4351 > l
		} else {
			yyb4351 = r.CheckBreak()
		}
		if yyb4351 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4351-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4358 := z.EncBinary()
		_ = yym4358
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4359 := !z.EncBinary()
			yy2arr4359 := z.EncBasicHandle().StructToArray
			var yyq4359 [2]bool
			_, _, _ = yysep4359, yyq4359, yy2arr4359
			const yyr4359 bool = false
			yyq4359[0] = len(x.Items) != 0
			yyq4359[1] = x.DefaultMode != nil
			var yynn4359 int
			if yyr4359 || yy2arr4359 {
				r.EncodeArrayStart(2)
			} else {
				yynn4359 = 0
				for _, b := range yyq4359 {
					if b {
						yynn4359++
					}
				}
				r.EncodeMapStart(yynn4359)
				yynn4359 = 0
			}
			if yyr4359 || yy2arr4359 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4359[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4361 := z.EncBinary()
						_ = yym4361
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4359[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym4362 := z.EncBinary()
						_ = yym4362
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr4359 || yy2arr4359 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4359[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4364 := *x.DefaultMode
						yym4365 := z.EncBinary()
						_ = yym4365
						if false {
						} else {
							r.EncodeInt(int64(yy4364))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4359[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy4366 := *x.DefaultMode
						yym4367 := z.EncBinary()
						_ = yym4367
						if false {
						} else {
							r.EncodeInt(int64(yy4366))
						}
					}
				}
			}
			if yyr4359 || yy2arr4359 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4368 := z.DecBinary()
	_ = yym4368
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4369 := r.ContainerType()
		if yyct4369 == codecSelferValueTypeMap1234 {
			yyl4369 := r.ReadMapStart()
			if yyl4369 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4369, d)
			}
		} else if yyct4369 == codecSelferValueTypeArray1234 {
			yyl4369 := r.ReadArrayStart()
			if yyl4369 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4369, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4370Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4370Slc
	var yyhl4370 bool = l >= 0
	for yyj4370 := 0; ; yyj4370++ {
		if yyhl4370 {
			if yyj4370 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4370Slc = r.DecodeBytes(yys4370Slc, true, true)
		yys4370 := string(yys4370Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4370 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4371 := &x.Items
				yym4372 := z.DecBinary()
				_ = yym4372
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4371), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym4374 := z.DecBinary()
				_ = yym4374
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4370)
		} // end switch yys4370
	} // end for yyj4370
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4375 int
	var yyb4375 bool
	var yyhl4375 bool = l >= 0
	yyj4375++
	if yyhl4375 {
		yyb4375 = yyj4375 > l
	} else {
		yyb4375 = r.CheckBreak()
	}
	if yyb4375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4376 := &x.Items
		yym4377 := z.DecBinary()
		_ = yym4377
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv4376), d)
		}
	}
	yyj4375++
	if yyhl4375 {
		yyb4375 = yyj4375 > l
	} else {
		yyb4375 = r.CheckBreak()
	}
	if yyb4375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym4379 := z.DecBinary()
		_ = yym4379
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4375++
		if yyhl4375 {
			yyb4375 = yyj4375 > l
		} else {
			yyb4375 = r.CheckBreak()
		}
		if yyb4375 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4375-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4380 := z.EncBinary()
		_ = yym4380
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4381 := !z.EncBinary()
			yy2arr4381 := z.EncBasicHandle().StructToArray
			var yyq4381 [4]bool
			_, _, _ = yysep4381, yyq4381, yy2arr4381
			const yyr4381 bool = false
			yyq4381[1] = x.FieldRef != nil
			yyq4381[2] = x.ResourceFieldRef != nil
			yyq4381[3] = x.Mode != nil
			var yynn4381 int
			if yyr4381 || yy2arr4381 {
				r.EncodeArrayStart(4)
			} else {
				yynn4381 = 1
				for _, b := range yyq4381 {
					if b {
						yynn4381++
					}
				}
				r.EncodeMapStart(yynn4381)
				yynn4381 = 0
			}
			if yyr4381 || yy2arr4381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4383 := z.EncBinary()
				_ = yym4383
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4384 := z.EncBinary()
				_ = yym4384
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr4381 || yy2arr4381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4381[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4381[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4381 || yy2arr4381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4381[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4381[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4381 || yy2arr4381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4381[3] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4388 := *x.Mode
						yym4389 := z.EncBinary()
						_ = yym4389
						if false {
						} else {
							r.EncodeInt(int64(yy4388))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4381[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy4390 := *x.Mode
						yym4391 := z.EncBinary()
						_ = yym4391
						if false {
						} else {
							r.EncodeInt(int64(yy4390))
						}
					}
				}
			}
			if yyr4381 || yy2arr4381 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4392 := z.DecBinary()
	_ = yym4392
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4393 := r.ContainerType()
		if yyct4393 == codecSelferValueTypeMap1234 {
			yyl4393 := r.ReadMapStart()
			if yyl4393 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4393, d)
			}
		} else if yyct4393 == codecSelferValueTypeArray1234 {
			yyl4393 := r.ReadArrayStart()
			if yyl4393 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4393, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4394Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4394Slc
	var yyhl4394 bool = l >= 0
	for yyj4394 := 0; ; yyj4394++ {
		if yyhl4394 {
			if yyj4394 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4394Slc = r.DecodeBytes(yys4394Slc, true, true)
		yys4394 := string(yys4394Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4394 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym4399 := z.DecBinary()
				_ = yym4399
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4394)
		} // end switch yys4394
	} // end for yyj4394
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4400 int
	var yyb4400 bool
	var yyhl4400 bool = l >= 0
	yyj4400++
	if yyhl4400 {
		yyb4400 = yyj4400 > l
	} else {
		yyb4400 = r.CheckBreak()
	}
	if yyb4400 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj4400++
	if yyhl4400 {
		yyb4400 = yyj4400 > l
	} else {
		yyb4400 = r.CheckBreak()
	}
	if yyb4400 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj4400++
	if yyhl4400 {
		yyb4400 = yyj4400 > l
	} else {
		yyb4400 = r.CheckBreak()
	}
	if yyb4400 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj4400++
	if yyhl4400 {
		yyb4400 = yyj4400 > l
	} else {
		yyb4400 = r.CheckBreak()
	}
	if yyb4400 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym4405 := z.DecBinary()
		_ = yym4405
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj4400++
		if yyhl4400 {
			yyb4400 = yyj4400 > l
		} else {
			yyb4400 = r.CheckBreak()
		}
		if yyb4400 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4400-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4406 := z.EncBinary()
		_ = yym4406
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4407 := !z.EncBinary()
			yy2arr4407 := z.EncBasicHandle().StructToArray
			var yyq4407 [6]bool
			_, _, _ = yysep4407, yyq4407, yy2arr4407
			const yyr4407 bool = false
			yyq4407[0] = x.Capabilities != nil
			yyq4407[1] = x.Privileged != nil
			yyq4407[2] = x.SELinuxOptions != nil
			yyq4407[3] = x.RunAsUser != nil
			yyq4407[4] = x.RunAsNonRoot != nil
			yyq4407[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4407 int
			if yyr4407 || yy2arr4407 {
				r.EncodeArrayStart(6)
			} else {
				yynn4407 = 0
				for _, b := range yyq4407 {
					if b {
						yynn4407++
					}
				}
				r.EncodeMapStart(yynn4407)
				yynn4407 = 0
			}
			if yyr4407 || yy2arr4407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4407[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4407[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4407 || yy2arr4407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4407[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4410 := *x.Privileged
						yym4411 := z.EncBinary()
						_ = yym4411
						if false {
						} else {
							r.EncodeBool(bool(yy4410))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4407[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4412 := *x.Privileged
						yym4413 := z.EncBinary()
						_ = yym4413
						if false {
						} else {
							r.EncodeBool(bool(yy4412))
						}
					}
				}
			}
			if yyr4407 || yy2arr4407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4407[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4407[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4407 || yy2arr4407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4407[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4416 := *x.RunAsUser
						yym4417 := z.EncBinary()
						_ = yym4417
						if false {
						} else {
							r.EncodeInt(int64(yy4416))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4407[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4418 := *x.RunAsUser
						yym4419 := z.EncBinary()
						_ = yym4419
						if false {
						} else {
							r.EncodeInt(int64(yy4418))
						}
					}
				}
			}
			if yyr4407 || yy2arr4407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4407[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4421 := *x.RunAsNonRoot
						yym4422 := z.EncBinary()
						_ = yym4422
						if false {
						} else {
							r.EncodeBool(bool(yy4421))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4407[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4423 := *x.RunAsNonRoot
						yym4424 := z.EncBinary()
						_ = yym4424
						if false {
						} else {
							r.EncodeBool(bool(yy4423))
						}
					}
				}
			}
			if yyr4407 || yy2arr4407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4407[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4426 := *x.ReadOnlyRootFilesystem
						yym4427 := z.EncBinary()
						_ = yym4427
						if false {
						} else {
							r.EncodeBool(bool(yy4426))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4407[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4428 := *x.ReadOnlyRootFilesystem
						yym4429 := z.EncBinary()
						_ = yym4429
						if false {
						} else {
							r.EncodeBool(bool(yy4428))
						}
					}
				}
			}
			if yyr4407 || yy2arr4407 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4430 := z.DecBinary()
	_ = yym4430
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4431 := r.ContainerType()
		if yyct4431 == codecSelferValueTypeMap1234 {
			yyl4431 := r.ReadMapStart()
			if yyl4431 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4431, d)
			}
		} else if yyct4431 == codecSelferValueTypeArray1234 {
			yyl4431 := r.ReadArrayStart()
			if yyl4431 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4431, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4432Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4432Slc
	var yyhl4432 bool = l >= 0
	for yyj4432 := 0; ; yyj4432++ {
		if yyhl4432 {
			if yyj4432 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4432Slc = r.DecodeBytes(yys4432Slc, true, true)
		yys4432 := string(yys4432Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4432 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4435 := z.DecBinary()
				_ = yym4435
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4438 := z.DecBinary()
				_ = yym4438
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4440 := z.DecBinary()
				_ = yym4440
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4442 := z.DecBinary()
				_ = yym4442
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4432)
		} // end switch yys4432
	} // end for yyj4432
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4443 int
	var yyb4443 bool
	var yyhl4443 bool = l >= 0
	yyj4443++
	if yyhl4443 {
		yyb4443 = yyj4443 > l
	} else {
		yyb4443 = r.CheckBreak()
	}
	if yyb4443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4443++
	if yyhl4443 {
		yyb4443 = yyj4443 > l
	} else {
		yyb4443 = r.CheckBreak()
	}
	if yyb4443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4446 := z.DecBinary()
		_ = yym4446
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4443++
	if yyhl4443 {
		yyb4443 = yyj4443 > l
	} else {
		yyb4443 = r.CheckBreak()
	}
	if yyb4443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4443++
	if yyhl4443 {
		yyb4443 = yyj4443 > l
	} else {
		yyb4443 = r.CheckBreak()
	}
	if yyb4443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4449 := z.DecBinary()
		_ = yym4449
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4443++
	if yyhl4443 {
		yyb4443 = yyj4443 > l
	} else {
		yyb4443 = r.CheckBreak()
	}
	if yyb4443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4451 := z.DecBinary()
		_ = yym4451
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4443++
	if yyhl4443 {
		yyb4443 = yyj4443 > l
	} else {
		yyb4443 = r.CheckBreak()
	}
	if yyb4443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4453 := z.DecBinary()
		_ = yym4453
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4443++
		if yyhl4443 {
			yyb4443 = yyj4443 > l
		} else {
			yyb4443 = r.CheckBreak()
		}
		if yyb4443 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4443-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4454 := z.EncBinary()
		_ = yym4454
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4455 := !z.EncBinary()
			yy2arr4455 := z.EncBasicHandle().StructToArray
			var yyq4455 [4]bool
			_, _, _ = yysep4455, yyq4455, yy2arr4455
			const yyr4455 bool = false
			yyq4455[0] = x.User != ""
			yyq4455[1] = x.Role != ""
			yyq4455[2] = x.Type != ""
			yyq4455[3] = x.Level != ""
			var yynn4455 int
			if yyr4455 || yy2arr4455 {
				r.EncodeArrayStart(4)
			} else {
				yynn4455 = 0
				for _, b := range yyq4455 {
					if b {
						yynn4455++
					}
				}
				r.EncodeMapStart(yynn4455)
				yynn4455 = 0
			}
			if yyr4455 || yy2arr4455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4455[0] {
					yym4457 := z.EncBinary()
					_ = yym4457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4455[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4458 := z.EncBinary()
					_ = yym4458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4455 || yy2arr4455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4455[1] {
					yym4460 := z.EncBinary()
					_ = yym4460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4455[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4461 := z.EncBinary()
					_ = yym4461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4455 || yy2arr4455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4455[2] {
					yym4463 := z.EncBinary()
					_ = yym4463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4455[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4464 := z.EncBinary()
					_ = yym4464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4455 || yy2arr4455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4455[3] {
					yym4466 := z.EncBinary()
					_ = yym4466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4455[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4467 := z.EncBinary()
					_ = yym4467
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4455 || yy2arr4455 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4468 := z.DecBinary()
	_ = yym4468
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4469 := r.ContainerType()
		if yyct4469 == codecSelferValueTypeMap1234 {
			yyl4469 := r.ReadMapStart()
			if yyl4469 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4469, d)
			}
		} else if yyct4469 == codecSelferValueTypeArray1234 {
			yyl4469 := r.ReadArrayStart()
			if yyl4469 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4469, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4470Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4470Slc
	var yyhl4470 bool = l >= 0
	for yyj4470 := 0; ; yyj4470++ {
		if yyhl4470 {
			if yyj4470 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4470Slc = r.DecodeBytes(yys4470Slc, true, true)
		yys4470 := string(yys4470Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4470 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4470)
		} // end switch yys4470
	} // end for yyj4470
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4475 int
	var yyb4475 bool
	var yyhl4475 bool = l >= 0
	yyj4475++
	if yyhl4475 {
		yyb4475 = yyj4475 > l
	} else {
		yyb4475 = r.CheckBreak()
	}
	if yyb4475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4475++
	if yyhl4475 {
		yyb4475 = yyj4475 > l
	} else {
		yyb4475 = r.CheckBreak()
	}
	if yyb4475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4475++
	if yyhl4475 {
		yyb4475 = yyj4475 > l
	} else {
		yyb4475 = r.CheckBreak()
	}
	if yyb4475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4475++
	if yyhl4475 {
		yyb4475 = yyj4475 > l
	} else {
		yyb4475 = r.CheckBreak()
	}
	if yyb4475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4475++
		if yyhl4475 {
			yyb4475 = yyj4475 > l
		} else {
			yyb4475 = r.CheckBreak()
		}
		if yyb4475 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4475-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4480 := z.EncBinary()
		_ = yym4480
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4481 := !z.EncBinary()
			yy2arr4481 := z.EncBasicHandle().StructToArray
			var yyq4481 [5]bool
			_, _, _ = yysep4481, yyq4481, yy2arr4481
			const yyr4481 bool = false
			yyq4481[0] = x.Kind != ""
			yyq4481[1] = x.APIVersion != ""
			yyq4481[2] = true
			var yynn4481 int
			if yyr4481 || yy2arr4481 {
				r.EncodeArrayStart(5)
			} else {
				yynn4481 = 2
				for _, b := range yyq4481 {
					if b {
						yynn4481++
					}
				}
				r.EncodeMapStart(yynn4481)
				yynn4481 = 0
			}
			if yyr4481 || yy2arr4481 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4481[0] {
					yym4483 := z.EncBinary()
					_ = yym4483
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4481[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4484 := z.EncBinary()
					_ = yym4484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4481 || yy2arr4481 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4481[1] {
					yym4486 := z.EncBinary()
					_ = yym4486
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4481[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4487 := z.EncBinary()
					_ = yym4487
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4481 || yy2arr4481 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4481[2] {
					yy4489 := &x.ObjectMeta
					yy4489.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4481[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4490 := &x.ObjectMeta
					yy4490.CodecEncodeSelf(e)
				}
			}
			if yyr4481 || yy2arr4481 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4492 := z.EncBinary()
				_ = yym4492
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4493 := z.EncBinary()
				_ = yym4493
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4481 || yy2arr4481 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4495 := z.EncBinary()
					_ = yym4495
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4496 := z.EncBinary()
					_ = yym4496
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4481 || yy2arr4481 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4497 := z.DecBinary()
	_ = yym4497
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4498 := r.ContainerType()
		if yyct4498 == codecSelferValueTypeMap1234 {
			yyl4498 := r.ReadMapStart()
			if yyl4498 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4498, d)
			}
		} else if yyct4498 == codecSelferValueTypeArray1234 {
			yyl4498 := r.ReadArrayStart()
			if yyl4498 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4498, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4499Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4499Slc
	var yyhl4499 bool = l >= 0
	for yyj4499 := 0; ; yyj4499++ {
		if yyhl4499 {
			if yyj4499 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4499Slc = r.DecodeBytes(yys4499Slc, true, true)
		yys4499 := string(yys4499Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4499 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4502 := &x.ObjectMeta
				yyv4502.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4504 := &x.Data
				yym4505 := z.DecBinary()
				_ = yym4505
				if false {
				} else {
					*yyv4504 = r.DecodeBytes(*(*[]byte)(yyv4504), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4499)
		} // end switch yys4499
	} // end for yyj4499
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4506 int
	var yyb4506 bool
	var yyhl4506 bool = l >= 0
	yyj4506++
	if yyhl4506 {
		yyb4506 = yyj4506 > l
	} else {
		yyb4506 = r.CheckBreak()
	}
	if yyb4506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4506++
	if yyhl4506 {
		yyb4506 = yyj4506 > l
	} else {
		yyb4506 = r.CheckBreak()
	}
	if yyb4506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4506++
	if yyhl4506 {
		yyb4506 = yyj4506 > l
	} else {
		yyb4506 = r.CheckBreak()
	}
	if yyb4506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4509 := &x.ObjectMeta
		yyv4509.CodecDecodeSelf(d)
	}
	yyj4506++
	if yyhl4506 {
		yyb4506 = yyj4506 > l
	} else {
		yyb4506 = r.CheckBreak()
	}
	if yyb4506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4506++
	if yyhl4506 {
		yyb4506 = yyj4506 > l
	} else {
		yyb4506 = r.CheckBreak()
	}
	if yyb4506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4511 := &x.Data
		yym4512 := z.DecBinary()
		_ = yym4512
		if false {
		} else {
			*yyv4511 = r.DecodeBytes(*(*[]byte)(yyv4511), false, false)
		}
	}
	for {
		yyj4506++
		if yyhl4506 {
			yyb4506 = yyj4506 > l
		} else {
			yyb4506 = r.CheckBreak()
		}
		if yyb4506 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4506-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4513 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4514 := &yyv4513
		yy4514.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4515 := *v
	yyh4515, yyl4515 := z.DecSliceHelperStart()
	var yyc4515 bool
	if yyl4515 == 0 {
		if yyv4515 == nil {
			yyv4515 = []OwnerReference{}
			yyc4515 = true
		} else if len(yyv4515) != 0 {
			yyv4515 = yyv4515[:0]
			yyc4515 = true
		}
	} else if yyl4515 > 0 {
		var yyrr4515, yyrl4515 int
		var yyrt4515 bool
		if yyl4515 > cap(yyv4515) {

			yyrg4515 := len(yyv4515) > 0
			yyv24515 := yyv4515
			yyrl4515, yyrt4515 = z.DecInferLen(yyl4515, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4515 {
				if yyrl4515 <= cap(yyv4515) {
					yyv4515 = yyv4515[:yyrl4515]
				} else {
					yyv4515 = make([]OwnerReference, yyrl4515)
				}
			} else {
				yyv4515 = make([]OwnerReference, yyrl4515)
			}
			yyc4515 = true
			yyrr4515 = len(yyv4515)
			if yyrg4515 {
				copy(yyv4515, yyv24515)
			}
		} else if yyl4515 != len(yyv4515) {
			yyv4515 = yyv4515[:yyl4515]
			yyc4515 = true
		}
		yyj4515 := 0
		for ; yyj4515 < yyrr4515; yyj4515++ {
			yyh4515.ElemContainerState(yyj4515)
			if r.TryDecodeAsNil() {
				yyv4515[yyj4515] = OwnerReference{}
			} else {
				yyv4516 := &yyv4515[yyj4515]
				yyv4516.CodecDecodeSelf(d)
			}

		}
		if yyrt4515 {
			for ; yyj4515 < yyl4515; yyj4515++ {
				yyv4515 = append(yyv4515, OwnerReference{})
				yyh4515.ElemContainerState(yyj4515)
				if r.TryDecodeAsNil() {
					yyv4515[yyj4515] = OwnerReference{}
				} else {
					yyv4517 := &yyv4515[yyj4515]
					yyv4517.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4515 := 0
		for ; !r.CheckBreak(); yyj4515++ {

			if yyj4515 >= len(yyv4515) {
				yyv4515 = append(yyv4515, OwnerReference{}) // var yyz4515 OwnerReference
				yyc4515 = true
			}
			yyh4515.ElemContainerState(yyj4515)
			if yyj4515 < len(yyv4515) {
				if r.TryDecodeAsNil() {
					yyv4515[yyj4515] = OwnerReference{}
				} else {
					yyv4518 := &yyv4515[yyj4515]
					yyv4518.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4515 < len(yyv4515) {
			yyv4515 = yyv4515[:yyj4515]
			yyc4515 = true
		} else if yyj4515 == 0 && yyv4515 == nil {
			yyv4515 = []OwnerReference{}
			yyc4515 = true
		}
	}
	yyh4515.End()
	if yyc4515 {
		*v = yyv4515
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4519 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4519.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4520 := *v
	yyh4520, yyl4520 := z.DecSliceHelperStart()
	var yyc4520 bool
	if yyl4520 == 0 {
		if yyv4520 == nil {
			yyv4520 = []PersistentVolumeAccessMode{}
			yyc4520 = true
		} else if len(yyv4520) != 0 {
			yyv4520 = yyv4520[:0]
			yyc4520 = true
		}
	} else if yyl4520 > 0 {
		var yyrr4520, yyrl4520 int
		var yyrt4520 bool
		if yyl4520 > cap(yyv4520) {

			yyrl4520, yyrt4520 = z.DecInferLen(yyl4520, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4520 {
				if yyrl4520 <= cap(yyv4520) {
					yyv4520 = yyv4520[:yyrl4520]
				} else {
					yyv4520 = make([]PersistentVolumeAccessMode, yyrl4520)
				}
			} else {
				yyv4520 = make([]PersistentVolumeAccessMode, yyrl4520)
			}
			yyc4520 = true
			yyrr4520 = len(yyv4520)
		} else if yyl4520 != len(yyv4520) {
			yyv4520 = yyv4520[:yyl4520]
			yyc4520 = true
		}
		yyj4520 := 0
		for ; yyj4520 < yyrr4520; yyj4520++ {
			yyh4520.ElemContainerState(yyj4520)
			if r.TryDecodeAsNil() {
				yyv4520[yyj4520] = ""
			} else {
				yyv4520[yyj4520] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4520 {
			for ; yyj4520 < yyl4520; yyj4520++ {
				yyv4520 = append(yyv4520, "")
				yyh4520.ElemContainerState(yyj4520)
				if r.TryDecodeAsNil() {
					yyv4520[yyj4520] = ""
				} else {
					yyv4520[yyj4520] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4520 := 0
		for ; !r.CheckBreak(); yyj4520++ {

			if yyj4520 >= len(yyv4520) {
				yyv4520 = append(yyv4520, "") // var yyz4520 PersistentVolumeAccessMode
				yyc4520 = true
			}
			yyh4520.ElemContainerState(yyj4520)
			if yyj4520 < len(yyv4520) {
				if r.TryDecodeAsNil() {
					yyv4520[yyj4520] = ""
				} else {
					yyv4520[yyj4520] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4520 < len(yyv4520) {
			yyv4520 = yyv4520[:yyj4520]
			yyc4520 = true
		} else if yyj4520 == 0 && yyv4520 == nil {
			yyv4520 = []PersistentVolumeAccessMode{}
			yyc4520 = true
		}
	}
	yyh4520.End()
	if yyc4520 {
		*v = yyv4520
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4524 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4525 := &yyv4524
		yy4525.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4526 := *v
	yyh4526, yyl4526 := z.DecSliceHelperStart()
	var yyc4526 bool
	if yyl4526 == 0 {
		if yyv4526 == nil {
			yyv4526 = []PersistentVolume{}
			yyc4526 = true
		} else if len(yyv4526) != 0 {
			yyv4526 = yyv4526[:0]
			yyc4526 = true
		}
	} else if yyl4526 > 0 {
		var yyrr4526, yyrl4526 int
		var yyrt4526 bool
		if yyl4526 > cap(yyv4526) {

			yyrg4526 := len(yyv4526) > 0
			yyv24526 := yyv4526
			yyrl4526, yyrt4526 = z.DecInferLen(yyl4526, z.DecBasicHandle().MaxInitLen, 472)
			if yyrt4526 {
				if yyrl4526 <= cap(yyv4526) {
					yyv4526 = yyv4526[:yyrl4526]
				} else {
					yyv4526 = make([]PersistentVolume, yyrl4526)
				}
			} else {
				yyv4526 = make([]PersistentVolume, yyrl4526)
			}
			yyc4526 = true
			yyrr4526 = len(yyv4526)
			if yyrg4526 {
				copy(yyv4526, yyv24526)
			}
		} else if yyl4526 != len(yyv4526) {
			yyv4526 = yyv4526[:yyl4526]
			yyc4526 = true
		}
		yyj4526 := 0
		for ; yyj4526 < yyrr4526; yyj4526++ {
			yyh4526.ElemContainerState(yyj4526)
			if r.TryDecodeAsNil() {
				yyv4526[yyj4526] = PersistentVolume{}
			} else {
				yyv4527 := &yyv4526[yyj4526]
				yyv4527.CodecDecodeSelf(d)
			}

		}
		if yyrt4526 {
			for ; yyj4526 < yyl4526; yyj4526++ {
				yyv4526 = append(yyv4526, PersistentVolume{})
				yyh4526.ElemContainerState(yyj4526)
				if r.TryDecodeAsNil() {
					yyv4526[yyj4526] = PersistentVolume{}
				} else {
					yyv4528 := &yyv4526[yyj4526]
					yyv4528.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4526 := 0
		for ; !r.CheckBreak(); yyj4526++ {

			if yyj4526 >= len(yyv4526) {
				yyv4526 = append(yyv4526, PersistentVolume{}) // var yyz4526 PersistentVolume
				yyc4526 = true
			}
			yyh4526.ElemContainerState(yyj4526)
			if yyj4526 < len(yyv4526) {
				if r.TryDecodeAsNil() {
					yyv4526[yyj4526] = PersistentVolume{}
				} else {
					yyv4529 := &yyv4526[yyj4526]
					yyv4529.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4526 < len(yyv4526) {
			yyv4526 = yyv4526[:yyj4526]
			yyc4526 = true
		} else if yyj4526 == 0 && yyv4526 == nil {
			yyv4526 = []PersistentVolume{}
			yyc4526 = true
		}
	}
	yyh4526.End()
	if yyc4526 {
		*v = yyv4526
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4530 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4531 := &yyv4530
		yy4531.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4532 := *v
	yyh4532, yyl4532 := z.DecSliceHelperStart()
	var yyc4532 bool
	if yyl4532 == 0 {
		if yyv4532 == nil {
			yyv4532 = []PersistentVolumeClaim{}
			yyc4532 = true
		} else if len(yyv4532) != 0 {
			yyv4532 = yyv4532[:0]
			yyc4532 = true
		}
	} else if yyl4532 > 0 {
		var yyrr4532, yyrl4532 int
		var yyrt4532 bool
		if yyl4532 > cap(yyv4532) {

			yyrg4532 := len(yyv4532) > 0
			yyv24532 := yyv4532
			yyrl4532, yyrt4532 = z.DecInferLen(yyl4532, z.DecBasicHandle().MaxInitLen, 352)
			if yyrt4532 {
				if yyrl4532 <= cap(yyv4532) {
					yyv4532 = yyv4532[:yyrl4532]
				} else {
					yyv4532 = make([]PersistentVolumeClaim, yyrl4532)
				}
			} else {
				yyv4532 = make([]PersistentVolumeClaim, yyrl4532)
			}
			yyc4532 = true
			yyrr4532 = len(yyv4532)
			if yyrg4532 {
				copy(yyv4532, yyv24532)
			}
		} else if yyl4532 != len(yyv4532) {
			yyv4532 = yyv4532[:yyl4532]
			yyc4532 = true
		}
		yyj4532 := 0
		for ; yyj4532 < yyrr4532; yyj4532++ {
			yyh4532.ElemContainerState(yyj4532)
			if r.TryDecodeAsNil() {
				yyv4532[yyj4532] = PersistentVolumeClaim{}
			} else {
				yyv4533 := &yyv4532[yyj4532]
				yyv4533.CodecDecodeSelf(d)
			}

		}
		if yyrt4532 {
			for ; yyj4532 < yyl4532; yyj4532++ {
				yyv4532 = append(yyv4532, PersistentVolumeClaim{})
				yyh4532.ElemContainerState(yyj4532)
				if r.TryDecodeAsNil() {
					yyv4532[yyj4532] = PersistentVolumeClaim{}
				} else {
					yyv4534 := &yyv4532[yyj4532]
					yyv4534.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4532 := 0
		for ; !r.CheckBreak(); yyj4532++ {

			if yyj4532 >= len(yyv4532) {
				yyv4532 = append(yyv4532, PersistentVolumeClaim{}) // var yyz4532 PersistentVolumeClaim
				yyc4532 = true
			}
			yyh4532.ElemContainerState(yyj4532)
			if yyj4532 < len(yyv4532) {
				if r.TryDecodeAsNil() {
					yyv4532[yyj4532] = PersistentVolumeClaim{}
				} else {
					yyv4535 := &yyv4532[yyj4532]
					yyv4535.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4532 < len(yyv4532) {
			yyv4532 = yyv4532[:yyj4532]
			yyc4532 = true
		} else if yyj4532 == 0 && yyv4532 == nil {
			yyv4532 = []PersistentVolumeClaim{}
			yyc4532 = true
		}
	}
	yyh4532.End()
	if yyc4532 {
		*v = yyv4532
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4536 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4537 := &yyv4536
		yy4537.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4538 := *v
	yyh4538, yyl4538 := z.DecSliceHelperStart()
	var yyc4538 bool
	if yyl4538 == 0 {
		if yyv4538 == nil {
			yyv4538 = []KeyToPath{}
			yyc4538 = true
		} else if len(yyv4538) != 0 {
			yyv4538 = yyv4538[:0]
			yyc4538 = true
		}
	} else if yyl4538 > 0 {
		var yyrr4538, yyrl4538 int
		var yyrt4538 bool
		if yyl4538 > cap(yyv4538) {

			yyrg4538 := len(yyv4538) > 0
			yyv24538 := yyv4538
			yyrl4538, yyrt4538 = z.DecInferLen(yyl4538, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4538 {
				if yyrl4538 <= cap(yyv4538) {
					yyv4538 = yyv4538[:yyrl4538]
				} else {
					yyv4538 = make([]KeyToPath, yyrl4538)
				}
			} else {
				yyv4538 = make([]KeyToPath, yyrl4538)
			}
			yyc4538 = true
			yyrr4538 = len(yyv4538)
			if yyrg4538 {
				copy(yyv4538, yyv24538)
			}
		} else if yyl4538 != len(yyv4538) {
			yyv4538 = yyv4538[:yyl4538]
			yyc4538 = true
		}
		yyj4538 := 0
		for ; yyj4538 < yyrr4538; yyj4538++ {
			yyh4538.ElemContainerState(yyj4538)
			if r.TryDecodeAsNil() {
				yyv4538[yyj4538] = KeyToPath{}
			} else {
				yyv4539 := &yyv4538[yyj4538]
				yyv4539.CodecDecodeSelf(d)
			}

		}
		if yyrt4538 {
			for ; yyj4538 < yyl4538; yyj4538++ {
				yyv4538 = append(yyv4538, KeyToPath{})
				yyh4538.ElemContainerState(yyj4538)
				if r.TryDecodeAsNil() {
					yyv4538[yyj4538] = KeyToPath{}
				} else {
					yyv4540 := &yyv4538[yyj4538]
					yyv4540.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4538 := 0
		for ; !r.CheckBreak(); yyj4538++ {

			if yyj4538 >= len(yyv4538) {
				yyv4538 = append(yyv4538, KeyToPath{}) // var yyz4538 KeyToPath
				yyc4538 = true
			}
			yyh4538.ElemContainerState(yyj4538)
			if yyj4538 < len(yyv4538) {
				if r.TryDecodeAsNil() {
					yyv4538[yyj4538] = KeyToPath{}
				} else {
					yyv4541 := &yyv4538[yyj4538]
					yyv4541.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4538 < len(yyv4538) {
			yyv4538 = yyv4538[:yyj4538]
			yyc4538 = true
		} else if yyj4538 == 0 && yyv4538 == nil {
			yyv4538 = []KeyToPath{}
			yyc4538 = true
		}
	}
	yyh4538.End()
	if yyc4538 {
		*v = yyv4538
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4542 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4543 := &yyv4542
		yy4543.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4544 := *v
	yyh4544, yyl4544 := z.DecSliceHelperStart()
	var yyc4544 bool
	if yyl4544 == 0 {
		if yyv4544 == nil {
			yyv4544 = []HTTPHeader{}
			yyc4544 = true
		} else if len(yyv4544) != 0 {
			yyv4544 = yyv4544[:0]
			yyc4544 = true
		}
	} else if yyl4544 > 0 {
		var yyrr4544, yyrl4544 int
		var yyrt4544 bool
		if yyl4544 > cap(yyv4544) {

			yyrg4544 := len(yyv4544) > 0
			yyv24544 := yyv4544
			yyrl4544, yyrt4544 = z.DecInferLen(yyl4544, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4544 {
				if yyrl4544 <= cap(yyv4544) {
					yyv4544 = yyv4544[:yyrl4544]
				} else {
					yyv4544 = make([]HTTPHeader, yyrl4544)
				}
			} else {
				yyv4544 = make([]HTTPHeader, yyrl4544)
			}
			yyc4544 = true
			yyrr4544 = len(yyv4544)
			if yyrg4544 {
				copy(yyv4544, yyv24544)
			}
		} else if yyl4544 != len(yyv4544) {
			yyv4544 = yyv4544[:yyl4544]
			yyc4544 = true
		}
		yyj4544 := 0
		for ; yyj4544 < yyrr4544; yyj4544++ {
			yyh4544.ElemContainerState(yyj4544)
			if r.TryDecodeAsNil() {
				yyv4544[yyj4544] = HTTPHeader{}
			} else {
				yyv4545 := &yyv4544[yyj4544]
				yyv4545.CodecDecodeSelf(d)
			}

		}
		if yyrt4544 {
			for ; yyj4544 < yyl4544; yyj4544++ {
				yyv4544 = append(yyv4544, HTTPHeader{})
				yyh4544.ElemContainerState(yyj4544)
				if r.TryDecodeAsNil() {
					yyv4544[yyj4544] = HTTPHeader{}
				} else {
					yyv4546 := &yyv4544[yyj4544]
					yyv4546.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4544 := 0
		for ; !r.CheckBreak(); yyj4544++ {

			if yyj4544 >= len(yyv4544) {
				yyv4544 = append(yyv4544, HTTPHeader{}) // var yyz4544 HTTPHeader
				yyc4544 = true
			}
			yyh4544.ElemContainerState(yyj4544)
			if yyj4544 < len(yyv4544) {
				if r.TryDecodeAsNil() {
					yyv4544[yyj4544] = HTTPHeader{}
				} else {
					yyv4547 := &yyv4544[yyj4544]
					yyv4547.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4544 < len(yyv4544) {
			yyv4544 = yyv4544[:yyj4544]
			yyc4544 = true
		} else if yyj4544 == 0 && yyv4544 == nil {
			yyv4544 = []HTTPHeader{}
			yyc4544 = true
		}
	}
	yyh4544.End()
	if yyc4544 {
		*v = yyv4544
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4548 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4548.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4549 := *v
	yyh4549, yyl4549 := z.DecSliceHelperStart()
	var yyc4549 bool
	if yyl4549 == 0 {
		if yyv4549 == nil {
			yyv4549 = []Capability{}
			yyc4549 = true
		} else if len(yyv4549) != 0 {
			yyv4549 = yyv4549[:0]
			yyc4549 = true
		}
	} else if yyl4549 > 0 {
		var yyrr4549, yyrl4549 int
		var yyrt4549 bool
		if yyl4549 > cap(yyv4549) {

			yyrl4549, yyrt4549 = z.DecInferLen(yyl4549, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4549 {
				if yyrl4549 <= cap(yyv4549) {
					yyv4549 = yyv4549[:yyrl4549]
				} else {
					yyv4549 = make([]Capability, yyrl4549)
				}
			} else {
				yyv4549 = make([]Capability, yyrl4549)
			}
			yyc4549 = true
			yyrr4549 = len(yyv4549)
		} else if yyl4549 != len(yyv4549) {
			yyv4549 = yyv4549[:yyl4549]
			yyc4549 = true
		}
		yyj4549 := 0
		for ; yyj4549 < yyrr4549; yyj4549++ {
			yyh4549.ElemContainerState(yyj4549)
			if r.TryDecodeAsNil() {
				yyv4549[yyj4549] = ""
			} else {
				yyv4549[yyj4549] = Capability(r.DecodeString())
			}

		}
		if yyrt4549 {
			for ; yyj4549 < yyl4549; yyj4549++ {
				yyv4549 = append(yyv4549, "")
				yyh4549.ElemContainerState(yyj4549)
				if r.TryDecodeAsNil() {
					yyv4549[yyj4549] = ""
				} else {
					yyv4549[yyj4549] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4549 := 0
		for ; !r.CheckBreak(); yyj4549++ {

			if yyj4549 >= len(yyv4549) {
				yyv4549 = append(yyv4549, "") // var yyz4549 Capability
				yyc4549 = true
			}
			yyh4549.ElemContainerState(yyj4549)
			if yyj4549 < len(yyv4549) {
				if r.TryDecodeAsNil() {
					yyv4549[yyj4549] = ""
				} else {
					yyv4549[yyj4549] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4549 < len(yyv4549) {
			yyv4549 = yyv4549[:yyj4549]
			yyc4549 = true
		} else if yyj4549 == 0 && yyv4549 == nil {
			yyv4549 = []Capability{}
			yyc4549 = true
		}
	}
	yyh4549.End()
	if yyc4549 {
		*v = yyv4549
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4553 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4554 := &yyv4553
		yy4554.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4555 := *v
	yyh4555, yyl4555 := z.DecSliceHelperStart()
	var yyc4555 bool
	if yyl4555 == 0 {
		if yyv4555 == nil {
			yyv4555 = []ContainerPort{}
			yyc4555 = true
		} else if len(yyv4555) != 0 {
			yyv4555 = yyv4555[:0]
			yyc4555 = true
		}
	} else if yyl4555 > 0 {
		var yyrr4555, yyrl4555 int
		var yyrt4555 bool
		if yyl4555 > cap(yyv4555) {

			yyrg4555 := len(yyv4555) > 0
			yyv24555 := yyv4555
			yyrl4555, yyrt4555 = z.DecInferLen(yyl4555, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4555 {
				if yyrl4555 <= cap(yyv4555) {
					yyv4555 = yyv4555[:yyrl4555]
				} else {
					yyv4555 = make([]ContainerPort, yyrl4555)
				}
			} else {
				yyv4555 = make([]ContainerPort, yyrl4555)
			}
			yyc4555 = true
			yyrr4555 = len(yyv4555)
			if yyrg4555 {
				copy(yyv4555, yyv24555)
			}
		} else if yyl4555 != len(yyv4555) {
			yyv4555 = yyv4555[:yyl4555]
			yyc4555 = true
		}
		yyj4555 := 0
		for ; yyj4555 < yyrr4555; yyj4555++ {
			yyh4555.ElemContainerState(yyj4555)
			if r.TryDecodeAsNil() {
				yyv4555[yyj4555] = ContainerPort{}
			} else {
				yyv4556 := &yyv4555[yyj4555]
				yyv4556.CodecDecodeSelf(d)
			}

		}
		if yyrt4555 {
			for ; yyj4555 < yyl4555; yyj4555++ {
				yyv4555 = append(yyv4555, ContainerPort{})
				yyh4555.ElemContainerState(yyj4555)
				if r.TryDecodeAsNil() {
					yyv4555[yyj4555] = ContainerPort{}
				} else {
					yyv4557 := &yyv4555[yyj4555]
					yyv4557.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4555 := 0
		for ; !r.CheckBreak(); yyj4555++ {

			if yyj4555 >= len(yyv4555) {
				yyv4555 = append(yyv4555, ContainerPort{}) // var yyz4555 ContainerPort
				yyc4555 = true
			}
			yyh4555.ElemContainerState(yyj4555)
			if yyj4555 < len(yyv4555) {
				if r.TryDecodeAsNil() {
					yyv4555[yyj4555] = ContainerPort{}
				} else {
					yyv4558 := &yyv4555[yyj4555]
					yyv4558.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4555 < len(yyv4555) {
			yyv4555 = yyv4555[:yyj4555]
			yyc4555 = true
		} else if yyj4555 == 0 && yyv4555 == nil {
			yyv4555 = []ContainerPort{}
			yyc4555 = true
		}
	}
	yyh4555.End()
	if yyc4555 {
		*v = yyv4555
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4559 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4560 := &yyv4559
		yy4560.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4561 := *v
	yyh4561, yyl4561 := z.DecSliceHelperStart()
	var yyc4561 bool
	if yyl4561 == 0 {
		if yyv4561 == nil {
			yyv4561 = []EnvVar{}
			yyc4561 = true
		} else if len(yyv4561) != 0 {
			yyv4561 = yyv4561[:0]
			yyc4561 = true
		}
	} else if yyl4561 > 0 {
		var yyrr4561, yyrl4561 int
		var yyrt4561 bool
		if yyl4561 > cap(yyv4561) {

			yyrg4561 := len(yyv4561) > 0
			yyv24561 := yyv4561
			yyrl4561, yyrt4561 = z.DecInferLen(yyl4561, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4561 {
				if yyrl4561 <= cap(yyv4561) {
					yyv4561 = yyv4561[:yyrl4561]
				} else {
					yyv4561 = make([]EnvVar, yyrl4561)
				}
			} else {
				yyv4561 = make([]EnvVar, yyrl4561)
			}
			yyc4561 = true
			yyrr4561 = len(yyv4561)
			if yyrg4561 {
				copy(yyv4561, yyv24561)
			}
		} else if yyl4561 != len(yyv4561) {
			yyv4561 = yyv4561[:yyl4561]
			yyc4561 = true
		}
		yyj4561 := 0
		for ; yyj4561 < yyrr4561; yyj4561++ {
			yyh4561.ElemContainerState(yyj4561)
			if r.TryDecodeAsNil() {
				yyv4561[yyj4561] = EnvVar{}
			} else {
				yyv4562 := &yyv4561[yyj4561]
				yyv4562.CodecDecodeSelf(d)
			}

		}
		if yyrt4561 {
			for ; yyj4561 < yyl4561; yyj4561++ {
				yyv4561 = append(yyv4561, EnvVar{})
				yyh4561.ElemContainerState(yyj4561)
				if r.TryDecodeAsNil() {
					yyv4561[yyj4561] = EnvVar{}
				} else {
					yyv4563 := &yyv4561[yyj4561]
					yyv4563.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4561 := 0
		for ; !r.CheckBreak(); yyj4561++ {

			if yyj4561 >= len(yyv4561) {
				yyv4561 = append(yyv4561, EnvVar{}) // var yyz4561 EnvVar
				yyc4561 = true
			}
			yyh4561.ElemContainerState(yyj4561)
			if yyj4561 < len(yyv4561) {
				if r.TryDecodeAsNil() {
					yyv4561[yyj4561] = EnvVar{}
				} else {
					yyv4564 := &yyv4561[yyj4561]
					yyv4564.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4561 < len(yyv4561) {
			yyv4561 = yyv4561[:yyj4561]
			yyc4561 = true
		} else if yyj4561 == 0 && yyv4561 == nil {
			yyv4561 = []EnvVar{}
			yyc4561 = true
		}
	}
	yyh4561.End()
	if yyc4561 {
		*v = yyv4561
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4565 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4566 := &yyv4565
		yy4566.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4567 := *v
	yyh4567, yyl4567 := z.DecSliceHelperStart()
	var yyc4567 bool
	if yyl4567 == 0 {
		if yyv4567 == nil {
			yyv4567 = []VolumeMount{}
			yyc4567 = true
		} else if len(yyv4567) != 0 {
			yyv4567 = yyv4567[:0]
			yyc4567 = true
		}
	} else if yyl4567 > 0 {
		var yyrr4567, yyrl4567 int
		var yyrt4567 bool
		if yyl4567 > cap(yyv4567) {

			yyrg4567 := len(yyv4567) > 0
			yyv24567 := yyv4567
			yyrl4567, yyrt4567 = z.DecInferLen(yyl4567, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4567 {
				if yyrl4567 <= cap(yyv4567) {
					yyv4567 = yyv4567[:yyrl4567]
				} else {
					yyv4567 = make([]VolumeMount, yyrl4567)
				}
			} else {
				yyv4567 = make([]VolumeMount, yyrl4567)
			}
			yyc4567 = true
			yyrr4567 = len(yyv4567)
			if yyrg4567 {
				copy(yyv4567, yyv24567)
			}
		} else if yyl4567 != len(yyv4567) {
			yyv4567 = yyv4567[:yyl4567]
			yyc4567 = true
		}
		yyj4567 := 0
		for ; yyj4567 < yyrr4567; yyj4567++ {
			yyh4567.ElemContainerState(yyj4567)
			if r.TryDecodeAsNil() {
				yyv4567[yyj4567] = VolumeMount{}
			} else {
				yyv4568 := &yyv4567[yyj4567]
				yyv4568.CodecDecodeSelf(d)
			}

		}
		if yyrt4567 {
			for ; yyj4567 < yyl4567; yyj4567++ {
				yyv4567 = append(yyv4567, VolumeMount{})
				yyh4567.ElemContainerState(yyj4567)
				if r.TryDecodeAsNil() {
					yyv4567[yyj4567] = VolumeMount{}
				} else {
					yyv4569 := &yyv4567[yyj4567]
					yyv4569.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4567 := 0
		for ; !r.CheckBreak(); yyj4567++ {

			if yyj4567 >= len(yyv4567) {
				yyv4567 = append(yyv4567, VolumeMount{}) // var yyz4567 VolumeMount
				yyc4567 = true
			}
			yyh4567.ElemContainerState(yyj4567)
			if yyj4567 < len(yyv4567) {
				if r.TryDecodeAsNil() {
					yyv4567[yyj4567] = VolumeMount{}
				} else {
					yyv4570 := &yyv4567[yyj4567]
					yyv4570.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4567 < len(yyv4567) {
			yyv4567 = yyv4567[:yyj4567]
			yyc4567 = true
		} else if yyj4567 == 0 && yyv4567 == nil {
			yyv4567 = []VolumeMount{}
			yyc4567 = true
		}
	}
	yyh4567.End()
	if yyc4567 {
		*v = yyv4567
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4571 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4572 := &yyv4571
		yy4572.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4573 := *v
	yyh4573, yyl4573 := z.DecSliceHelperStart()
	var yyc4573 bool
	if yyl4573 == 0 {
		if yyv4573 == nil {
			yyv4573 = []NodeSelectorTerm{}
			yyc4573 = true
		} else if len(yyv4573) != 0 {
			yyv4573 = yyv4573[:0]
			yyc4573 = true
		}
	} else if yyl4573 > 0 {
		var yyrr4573, yyrl4573 int
		var yyrt4573 bool
		if yyl4573 > cap(yyv4573) {

			yyrg4573 := len(yyv4573) > 0
			yyv24573 := yyv4573
			yyrl4573, yyrt4573 = z.DecInferLen(yyl4573, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4573 {
				if yyrl4573 <= cap(yyv4573) {
					yyv4573 = yyv4573[:yyrl4573]
				} else {
					yyv4573 = make([]NodeSelectorTerm, yyrl4573)
				}
			} else {
				yyv4573 = make([]NodeSelectorTerm, yyrl4573)
			}
			yyc4573 = true
			yyrr4573 = len(yyv4573)
			if yyrg4573 {
				copy(yyv4573, yyv24573)
			}
		} else if yyl4573 != len(yyv4573) {
			yyv4573 = yyv4573[:yyl4573]
			yyc4573 = true
		}
		yyj4573 := 0
		for ; yyj4573 < yyrr4573; yyj4573++ {
			yyh4573.ElemContainerState(yyj4573)
			if r.TryDecodeAsNil() {
				yyv4573[yyj4573] = NodeSelectorTerm{}
			} else {
				yyv4574 := &yyv4573[yyj4573]
				yyv4574.CodecDecodeSelf(d)
			}

		}
		if yyrt4573 {
			for ; yyj4573 < yyl4573; yyj4573++ {
				yyv4573 = append(yyv4573, NodeSelectorTerm{})
				yyh4573.ElemContainerState(yyj4573)
				if r.TryDecodeAsNil() {
					yyv4573[yyj4573] = NodeSelectorTerm{}
				} else {
					yyv4575 := &yyv4573[yyj4573]
					yyv4575.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4573 := 0
		for ; !r.CheckBreak(); yyj4573++ {

			if yyj4573 >= len(yyv4573) {
				yyv4573 = append(yyv4573, NodeSelectorTerm{}) // var yyz4573 NodeSelectorTerm
				yyc4573 = true
			}
			yyh4573.ElemContainerState(yyj4573)
			if yyj4573 < len(yyv4573) {
				if r.TryDecodeAsNil() {
					yyv4573[yyj4573] = NodeSelectorTerm{}
				} else {
					yyv4576 := &yyv4573[yyj4573]
					yyv4576.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4573 < len(yyv4573) {
			yyv4573 = yyv4573[:yyj4573]
			yyc4573 = true
		} else if yyj4573 == 0 && yyv4573 == nil {
			yyv4573 = []NodeSelectorTerm{}
			yyc4573 = true
		}
	}
	yyh4573.End()
	if yyc4573 {
		*v = yyv4573
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4577 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4578 := &yyv4577
		yy4578.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4579 := *v
	yyh4579, yyl4579 := z.DecSliceHelperStart()
	var yyc4579 bool
	if yyl4579 == 0 {
		if yyv4579 == nil {
			yyv4579 = []NodeSelectorRequirement{}
			yyc4579 = true
		} else if len(yyv4579) != 0 {
			yyv4579 = yyv4579[:0]
			yyc4579 = true
		}
	} else if yyl4579 > 0 {
		var yyrr4579, yyrl4579 int
		var yyrt4579 bool
		if yyl4579 > cap(yyv4579) {

			yyrg4579 := len(yyv4579) > 0
			yyv24579 := yyv4579
			yyrl4579, yyrt4579 = z.DecInferLen(yyl4579, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4579 {
				if yyrl4579 <= cap(yyv4579) {
					yyv4579 = yyv4579[:yyrl4579]
				} else {
					yyv4579 = make([]NodeSelectorRequirement, yyrl4579)
				}
			} else {
				yyv4579 = make([]NodeSelectorRequirement, yyrl4579)
			}
			yyc4579 = true
			yyrr4579 = len(yyv4579)
			if yyrg4579 {
				copy(yyv4579, yyv24579)
			}
		} else if yyl4579 != len(yyv4579) {
			yyv4579 = yyv4579[:yyl4579]
			yyc4579 = true
		}
		yyj4579 := 0
		for ; yyj4579 < yyrr4579; yyj4579++ {
			yyh4579.ElemContainerState(yyj4579)
			if r.TryDecodeAsNil() {
				yyv4579[yyj4579] = NodeSelectorRequirement{}
			} else {
				yyv4580 := &yyv4579[yyj4579]
				yyv4580.CodecDecodeSelf(d)
			}

		}
		if yyrt4579 {
			for ; yyj4579 < yyl4579; yyj4579++ {
				yyv4579 = append(yyv4579, NodeSelectorRequirement{})
				yyh4579.ElemContainerState(yyj4579)
				if r.TryDecodeAsNil() {
					yyv4579[yyj4579] = NodeSelectorRequirement{}
				} else {
					yyv4581 := &yyv4579[yyj4579]
					yyv4581.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4579 := 0
		for ; !r.CheckBreak(); yyj4579++ {

			if yyj4579 >= len(yyv4579) {
				yyv4579 = append(yyv4579, NodeSelectorRequirement{}) // var yyz4579 NodeSelectorRequirement
				yyc4579 = true
			}
			yyh4579.ElemContainerState(yyj4579)
			if yyj4579 < len(yyv4579) {
				if r.TryDecodeAsNil() {
					yyv4579[yyj4579] = NodeSelectorRequirement{}
				} else {
					yyv4582 := &yyv4579[yyj4579]
					yyv4582.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4579 < len(yyv4579) {
			yyv4579 = yyv4579[:yyj4579]
			yyc4579 = true
		} else if yyj4579 == 0 && yyv4579 == nil {
			yyv4579 = []NodeSelectorRequirement{}
			yyc4579 = true
		}
	}
	yyh4579.End()
	if yyc4579 {
		*v = yyv4579
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4583 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4584 := &yyv4583
		yy4584.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4585 := *v
	yyh4585, yyl4585 := z.DecSliceHelperStart()
	var yyc4585 bool
	if yyl4585 == 0 {
		if yyv4585 == nil {
			yyv4585 = []PodAffinityTerm{}
			yyc4585 = true
		} else if len(yyv4585) != 0 {
			yyv4585 = yyv4585[:0]
			yyc4585 = true
		}
	} else if yyl4585 > 0 {
		var yyrr4585, yyrl4585 int
		var yyrt4585 bool
		if yyl4585 > cap(yyv4585) {

			yyrg4585 := len(yyv4585) > 0
			yyv24585 := yyv4585
			yyrl4585, yyrt4585 = z.DecInferLen(yyl4585, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4585 {
				if yyrl4585 <= cap(yyv4585) {
					yyv4585 = yyv4585[:yyrl4585]
				} else {
					yyv4585 = make([]PodAffinityTerm, yyrl4585)
				}
			} else {
				yyv4585 = make([]PodAffinityTerm, yyrl4585)
			}
			yyc4585 = true
			yyrr4585 = len(yyv4585)
			if yyrg4585 {
				copy(yyv4585, yyv24585)
			}
		} else if yyl4585 != len(yyv4585) {
			yyv4585 = yyv4585[:yyl4585]
			yyc4585 = true
		}
		yyj4585 := 0
		for ; yyj4585 < yyrr4585; yyj4585++ {
			yyh4585.ElemContainerState(yyj4585)
			if r.TryDecodeAsNil() {
				yyv4585[yyj4585] = PodAffinityTerm{}
			} else {
				yyv4586 := &yyv4585[yyj4585]
				yyv4586.CodecDecodeSelf(d)
			}

		}
		if yyrt4585 {
			for ; yyj4585 < yyl4585; yyj4585++ {
				yyv4585 = append(yyv4585, PodAffinityTerm{})
				yyh4585.ElemContainerState(yyj4585)
				if r.TryDecodeAsNil() {
					yyv4585[yyj4585] = PodAffinityTerm{}
				} else {
					yyv4587 := &yyv4585[yyj4585]
					yyv4587.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4585 := 0
		for ; !r.CheckBreak(); yyj4585++ {

			if yyj4585 >= len(yyv4585) {
				yyv4585 = append(yyv4585, PodAffinityTerm{}) // var yyz4585 PodAffinityTerm
				yyc4585 = true
			}
			yyh4585.ElemContainerState(yyj4585)
			if yyj4585 < len(yyv4585) {
				if r.TryDecodeAsNil() {
					yyv4585[yyj4585] = PodAffinityTerm{}
				} else {
					yyv4588 := &yyv4585[yyj4585]
					yyv4588.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4585 < len(yyv4585) {
			yyv4585 = yyv4585[:yyj4585]
			yyc4585 = true
		} else if yyj4585 == 0 && yyv4585 == nil {
			yyv4585 = []PodAffinityTerm{}
			yyc4585 = true
		}
	}
	yyh4585.End()
	if yyc4585 {
		*v = yyv4585
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4589 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4590 := &yyv4589
		yy4590.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4591 := *v
	yyh4591, yyl4591 := z.DecSliceHelperStart()
	var yyc4591 bool
	if yyl4591 == 0 {
		if yyv4591 == nil {
			yyv4591 = []WeightedPodAffinityTerm{}
			yyc4591 = true
		} else if len(yyv4591) != 0 {
			yyv4591 = yyv4591[:0]
			yyc4591 = true
		}
	} else if yyl4591 > 0 {
		var yyrr4591, yyrl4591 int
		var yyrt4591 bool
		if yyl4591 > cap(yyv4591) {

			yyrg4591 := len(yyv4591) > 0
			yyv24591 := yyv4591
			yyrl4591, yyrt4591 = z.DecInferLen(yyl4591, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4591 {
				if yyrl4591 <= cap(yyv4591) {
					yyv4591 = yyv4591[:yyrl4591]
				} else {
					yyv4591 = make([]WeightedPodAffinityTerm, yyrl4591)
				}
			} else {
				yyv4591 = make([]WeightedPodAffinityTerm, yyrl4591)
			}
			yyc4591 = true
			yyrr4591 = len(yyv4591)
			if yyrg4591 {
				copy(yyv4591, yyv24591)
			}
		} else if yyl4591 != len(yyv4591) {
			yyv4591 = yyv4591[:yyl4591]
			yyc4591 = true
		}
		yyj4591 := 0
		for ; yyj4591 < yyrr4591; yyj4591++ {
			yyh4591.ElemContainerState(yyj4591)
			if r.TryDecodeAsNil() {
				yyv4591[yyj4591] = WeightedPodAffinityTerm{}
			} else {
				yyv4592 := &yyv4591[yyj4591]
				yyv4592.CodecDecodeSelf(d)
			}

		}
		if yyrt4591 {
			for ; yyj4591 < yyl4591; yyj4591++ {
				yyv4591 = append(yyv4591, WeightedPodAffinityTerm{})
				yyh4591.ElemContainerState(yyj4591)
				if r.TryDecodeAsNil() {
					yyv4591[yyj4591] = WeightedPodAffinityTerm{}
				} else {
					yyv4593 := &yyv4591[yyj4591]
					yyv4593.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4591 := 0
		for ; !r.CheckBreak(); yyj4591++ {

			if yyj4591 >= len(yyv4591) {
				yyv4591 = append(yyv4591, WeightedPodAffinityTerm{}) // var yyz4591 WeightedPodAffinityTerm
				yyc4591 = true
			}
			yyh4591.ElemContainerState(yyj4591)
			if yyj4591 < len(yyv4591) {
				if r.TryDecodeAsNil() {
					yyv4591[yyj4591] = WeightedPodAffinityTerm{}
				} else {
					yyv4594 := &yyv4591[yyj4591]
					yyv4594.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4591 < len(yyv4591) {
			yyv4591 = yyv4591[:yyj4591]
			yyc4591 = true
		} else if yyj4591 == 0 && yyv4591 == nil {
			yyv4591 = []WeightedPodAffinityTerm{}
			yyc4591 = true
		}
	}
	yyh4591.End()
	if yyc4591 {
		*v = yyv4591
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4595 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4596 := &yyv4595
		yy4596.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4597 := *v
	yyh4597, yyl4597 := z.DecSliceHelperStart()
	var yyc4597 bool
	if yyl4597 == 0 {
		if yyv4597 == nil {
			yyv4597 = []PreferredSchedulingTerm{}
			yyc4597 = true
		} else if len(yyv4597) != 0 {
			yyv4597 = yyv4597[:0]
			yyc4597 = true
		}
	} else if yyl4597 > 0 {
		var yyrr4597, yyrl4597 int
		var yyrt4597 bool
		if yyl4597 > cap(yyv4597) {

			yyrg4597 := len(yyv4597) > 0
			yyv24597 := yyv4597
			yyrl4597, yyrt4597 = z.DecInferLen(yyl4597, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4597 {
				if yyrl4597 <= cap(yyv4597) {
					yyv4597 = yyv4597[:yyrl4597]
				} else {
					yyv4597 = make([]PreferredSchedulingTerm, yyrl4597)
				}
			} else {
				yyv4597 = make([]PreferredSchedulingTerm, yyrl4597)
			}
			yyc4597 = true
			yyrr4597 = len(yyv4597)
			if yyrg4597 {
				copy(yyv4597, yyv24597)
			}
		} else if yyl4597 != len(yyv4597) {
			yyv4597 = yyv4597[:yyl4597]
			yyc4597 = true
		}
		yyj4597 := 0
		for ; yyj4597 < yyrr4597; yyj4597++ {
			yyh4597.ElemContainerState(yyj4597)
			if r.TryDecodeAsNil() {
				yyv4597[yyj4597] = PreferredSchedulingTerm{}
			} else {
				yyv4598 := &yyv4597[yyj4597]
				yyv4598.CodecDecodeSelf(d)
			}

		}
		if yyrt4597 {
			for ; yyj4597 < yyl4597; yyj4597++ {
				yyv4597 = append(yyv4597, PreferredSchedulingTerm{})
				yyh4597.ElemContainerState(yyj4597)
				if r.TryDecodeAsNil() {
					yyv4597[yyj4597] = PreferredSchedulingTerm{}
				} else {
					yyv4599 := &yyv4597[yyj4597]
					yyv4599.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4597 := 0
		for ; !r.CheckBreak(); yyj4597++ {

			if yyj4597 >= len(yyv4597) {
				yyv4597 = append(yyv4597, PreferredSchedulingTerm{}) // var yyz4597 PreferredSchedulingTerm
				yyc4597 = true
			}
			yyh4597.ElemContainerState(yyj4597)
			if yyj4597 < len(yyv4597) {
				if r.TryDecodeAsNil() {
					yyv4597[yyj4597] = PreferredSchedulingTerm{}
				} else {
					yyv4600 := &yyv4597[yyj4597]
					yyv4600.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4597 < len(yyv4597) {
			yyv4597 = yyv4597[:yyj4597]
			yyc4597 = true
		} else if yyj4597 == 0 && yyv4597 == nil {
			yyv4597 = []PreferredSchedulingTerm{}
			yyc4597 = true
		}
	}
	yyh4597.End()
	if yyc4597 {
		*v = yyv4597
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4601 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4602 := &yyv4601
		yy4602.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4603 := *v
	yyh4603, yyl4603 := z.DecSliceHelperStart()
	var yyc4603 bool
	if yyl4603 == 0 {
		if yyv4603 == nil {
			yyv4603 = []Volume{}
			yyc4603 = true
		} else if len(yyv4603) != 0 {
			yyv4603 = yyv4603[:0]
			yyc4603 = true
		}
	} else if yyl4603 > 0 {
		var yyrr4603, yyrl4603 int
		var yyrt4603 bool
		if yyl4603 > cap(yyv4603) {

			yyrg4603 := len(yyv4603) > 0
			yyv24603 := yyv4603
			yyrl4603, yyrt4603 = z.DecInferLen(yyl4603, z.DecBasicHandle().MaxInitLen, 192)
			if yyrt4603 {
				if yyrl4603 <= cap(yyv4603) {
					yyv4603 = yyv4603[:yyrl4603]
				} else {
					yyv4603 = make([]Volume, yyrl4603)
				}
			} else {
				yyv4603 = make([]Volume, yyrl4603)
			}
			yyc4603 = true
			yyrr4603 = len(yyv4603)
			if yyrg4603 {
				copy(yyv4603, yyv24603)
			}
		} else if yyl4603 != len(yyv4603) {
			yyv4603 = yyv4603[:yyl4603]
			yyc4603 = true
		}
		yyj4603 := 0
		for ; yyj4603 < yyrr4603; yyj4603++ {
			yyh4603.ElemContainerState(yyj4603)
			if r.TryDecodeAsNil() {
				yyv4603[yyj4603] = Volume{}
			} else {
				yyv4604 := &yyv4603[yyj4603]
				yyv4604.CodecDecodeSelf(d)
			}

		}
		if yyrt4603 {
			for ; yyj4603 < yyl4603; yyj4603++ {
				yyv4603 = append(yyv4603, Volume{})
				yyh4603.ElemContainerState(yyj4603)
				if r.TryDecodeAsNil() {
					yyv4603[yyj4603] = Volume{}
				} else {
					yyv4605 := &yyv4603[yyj4603]
					yyv4605.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4603 := 0
		for ; !r.CheckBreak(); yyj4603++ {

			if yyj4603 >= len(yyv4603) {
				yyv4603 = append(yyv4603, Volume{}) // var yyz4603 Volume
				yyc4603 = true
			}
			yyh4603.ElemContainerState(yyj4603)
			if yyj4603 < len(yyv4603) {
				if r.TryDecodeAsNil() {
					yyv4603[yyj4603] = Volume{}
				} else {
					yyv4606 := &yyv4603[yyj4603]
					yyv4606.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4603 < len(yyv4603) {
			yyv4603 = yyv4603[:yyj4603]
			yyc4603 = true
		} else if yyj4603 == 0 && yyv4603 == nil {
			yyv4603 = []Volume{}
			yyc4603 = true
		}
	}
	yyh4603.End()
	if yyc4603 {
		*v = yyv4603
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4607 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4608 := &yyv4607
		yy4608.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4609 := *v
	yyh4609, yyl4609 := z.DecSliceHelperStart()
	var yyc4609 bool
	if yyl4609 == 0 {
		if yyv4609 == nil {
			yyv4609 = []Container{}
			yyc4609 = true
		} else if len(yyv4609) != 0 {
			yyv4609 = yyv4609[:0]
			yyc4609 = true
		}
	} else if yyl4609 > 0 {
		var yyrr4609, yyrl4609 int
		var yyrt4609 bool
		if yyl4609 > cap(yyv4609) {

			yyrg4609 := len(yyv4609) > 0
			yyv24609 := yyv4609
			yyrl4609, yyrt4609 = z.DecInferLen(yyl4609, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4609 {
				if yyrl4609 <= cap(yyv4609) {
					yyv4609 = yyv4609[:yyrl4609]
				} else {
					yyv4609 = make([]Container, yyrl4609)
				}
			} else {
				yyv4609 = make([]Container, yyrl4609)
			}
			yyc4609 = true
			yyrr4609 = len(yyv4609)
			if yyrg4609 {
				copy(yyv4609, yyv24609)
			}
		} else if yyl4609 != len(yyv4609) {
			yyv4609 = yyv4609[:yyl4609]
			yyc4609 = true
		}
		yyj4609 := 0
		for ; yyj4609 < yyrr4609; yyj4609++ {
			yyh4609.ElemContainerState(yyj4609)
			if r.TryDecodeAsNil() {
				yyv4609[yyj4609] = Container{}
			} else {
				yyv4610 := &yyv4609[yyj4609]
				yyv4610.CodecDecodeSelf(d)
			}

		}
		if yyrt4609 {
			for ; yyj4609 < yyl4609; yyj4609++ {
				yyv4609 = append(yyv4609, Container{})
				yyh4609.ElemContainerState(yyj4609)
				if r.TryDecodeAsNil() {
					yyv4609[yyj4609] = Container{}
				} else {
					yyv4611 := &yyv4609[yyj4609]
					yyv4611.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4609 := 0
		for ; !r.CheckBreak(); yyj4609++ {

			if yyj4609 >= len(yyv4609) {
				yyv4609 = append(yyv4609, Container{}) // var yyz4609 Container
				yyc4609 = true
			}
			yyh4609.ElemContainerState(yyj4609)
			if yyj4609 < len(yyv4609) {
				if r.TryDecodeAsNil() {
					yyv4609[yyj4609] = Container{}
				} else {
					yyv4612 := &yyv4609[yyj4609]
					yyv4612.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4609 < len(yyv4609) {
			yyv4609 = yyv4609[:yyj4609]
			yyc4609 = true
		} else if yyj4609 == 0 && yyv4609 == nil {
			yyv4609 = []Container{}
			yyc4609 = true
		}
	}
	yyh4609.End()
	if yyc4609 {
		*v = yyv4609
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4613 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4614 := &yyv4613
		yy4614.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4615 := *v
	yyh4615, yyl4615 := z.DecSliceHelperStart()
	var yyc4615 bool
	if yyl4615 == 0 {
		if yyv4615 == nil {
			yyv4615 = []LocalObjectReference{}
			yyc4615 = true
		} else if len(yyv4615) != 0 {
			yyv4615 = yyv4615[:0]
			yyc4615 = true
		}
	} else if yyl4615 > 0 {
		var yyrr4615, yyrl4615 int
		var yyrt4615 bool
		if yyl4615 > cap(yyv4615) {

			yyrg4615 := len(yyv4615) > 0
			yyv24615 := yyv4615
			yyrl4615, yyrt4615 = z.DecInferLen(yyl4615, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4615 {
				if yyrl4615 <= cap(yyv4615) {
					yyv4615 = yyv4615[:yyrl4615]
				} else {
					yyv4615 = make([]LocalObjectReference, yyrl4615)
				}
			} else {
				yyv4615 = make([]LocalObjectReference, yyrl4615)
			}
			yyc4615 = true
			yyrr4615 = len(yyv4615)
			if yyrg4615 {
				copy(yyv4615, yyv24615)
			}
		} else if yyl4615 != len(yyv4615) {
			yyv4615 = yyv4615[:yyl4615]
			yyc4615 = true
		}
		yyj4615 := 0
		for ; yyj4615 < yyrr4615; yyj4615++ {
			yyh4615.ElemContainerState(yyj4615)
			if r.TryDecodeAsNil() {
				yyv4615[yyj4615] = LocalObjectReference{}
			} else {
				yyv4616 := &yyv4615[yyj4615]
				yyv4616.CodecDecodeSelf(d)
			}

		}
		if yyrt4615 {
			for ; yyj4615 < yyl4615; yyj4615++ {
				yyv4615 = append(yyv4615, LocalObjectReference{})
				yyh4615.ElemContainerState(yyj4615)
				if r.TryDecodeAsNil() {
					yyv4615[yyj4615] = LocalObjectReference{}
				} else {
					yyv4617 := &yyv4615[yyj4615]
					yyv4617.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4615 := 0
		for ; !r.CheckBreak(); yyj4615++ {

			if yyj4615 >= len(yyv4615) {
				yyv4615 = append(yyv4615, LocalObjectReference{}) // var yyz4615 LocalObjectReference
				yyc4615 = true
			}
			yyh4615.ElemContainerState(yyj4615)
			if yyj4615 < len(yyv4615) {
				if r.TryDecodeAsNil() {
					yyv4615[yyj4615] = LocalObjectReference{}
				} else {
					yyv4618 := &yyv4615[yyj4615]
					yyv4618.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4615 < len(yyv4615) {
			yyv4615 = yyv4615[:yyj4615]
			yyc4615 = true
		} else if yyj4615 == 0 && yyv4615 == nil {
			yyv4615 = []LocalObjectReference{}
			yyc4615 = true
		}
	}
	yyh4615.End()
	if yyc4615 {
		*v = yyv4615
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4619 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4620 := &yyv4619
		yy4620.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4621 := *v
	yyh4621, yyl4621 := z.DecSliceHelperStart()
	var yyc4621 bool
	if yyl4621 == 0 {
		if yyv4621 == nil {
			yyv4621 = []PodCondition{}
			yyc4621 = true
		} else if len(yyv4621) != 0 {
			yyv4621 = yyv4621[:0]
			yyc4621 = true
		}
	} else if yyl4621 > 0 {
		var yyrr4621, yyrl4621 int
		var yyrt4621 bool
		if yyl4621 > cap(yyv4621) {

			yyrg4621 := len(yyv4621) > 0
			yyv24621 := yyv4621
			yyrl4621, yyrt4621 = z.DecInferLen(yyl4621, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4621 {
				if yyrl4621 <= cap(yyv4621) {
					yyv4621 = yyv4621[:yyrl4621]
				} else {
					yyv4621 = make([]PodCondition, yyrl4621)
				}
			} else {
				yyv4621 = make([]PodCondition, yyrl4621)
			}
			yyc4621 = true
			yyrr4621 = len(yyv4621)
			if yyrg4621 {
				copy(yyv4621, yyv24621)
			}
		} else if yyl4621 != len(yyv4621) {
			yyv4621 = yyv4621[:yyl4621]
			yyc4621 = true
		}
		yyj4621 := 0
		for ; yyj4621 < yyrr4621; yyj4621++ {
			yyh4621.ElemContainerState(yyj4621)
			if r.TryDecodeAsNil() {
				yyv4621[yyj4621] = PodCondition{}
			} else {
				yyv4622 := &yyv4621[yyj4621]
				yyv4622.CodecDecodeSelf(d)
			}

		}
		if yyrt4621 {
			for ; yyj4621 < yyl4621; yyj4621++ {
				yyv4621 = append(yyv4621, PodCondition{})
				yyh4621.ElemContainerState(yyj4621)
				if r.TryDecodeAsNil() {
					yyv4621[yyj4621] = PodCondition{}
				} else {
					yyv4623 := &yyv4621[yyj4621]
					yyv4623.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4621 := 0
		for ; !r.CheckBreak(); yyj4621++ {

			if yyj4621 >= len(yyv4621) {
				yyv4621 = append(yyv4621, PodCondition{}) // var yyz4621 PodCondition
				yyc4621 = true
			}
			yyh4621.ElemContainerState(yyj4621)
			if yyj4621 < len(yyv4621) {
				if r.TryDecodeAsNil() {
					yyv4621[yyj4621] = PodCondition{}
				} else {
					yyv4624 := &yyv4621[yyj4621]
					yyv4624.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4621 < len(yyv4621) {
			yyv4621 = yyv4621[:yyj4621]
			yyc4621 = true
		} else if yyj4621 == 0 && yyv4621 == nil {
			yyv4621 = []PodCondition{}
			yyc4621 = true
		}
	}
	yyh4621.End()
	if yyc4621 {
		*v = yyv4621
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4625 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4626 := &yyv4625
		yy4626.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4627 := *v
	yyh4627, yyl4627 := z.DecSliceHelperStart()
	var yyc4627 bool
	if yyl4627 == 0 {
		if yyv4627 == nil {
			yyv4627 = []ContainerStatus{}
			yyc4627 = true
		} else if len(yyv4627) != 0 {
			yyv4627 = yyv4627[:0]
			yyc4627 = true
		}
	} else if yyl4627 > 0 {
		var yyrr4627, yyrl4627 int
		var yyrt4627 bool
		if yyl4627 > cap(yyv4627) {

			yyrg4627 := len(yyv4627) > 0
			yyv24627 := yyv4627
			yyrl4627, yyrt4627 = z.DecInferLen(yyl4627, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4627 {
				if yyrl4627 <= cap(yyv4627) {
					yyv4627 = yyv4627[:yyrl4627]
				} else {
					yyv4627 = make([]ContainerStatus, yyrl4627)
				}
			} else {
				yyv4627 = make([]ContainerStatus, yyrl4627)
			}
			yyc4627 = true
			yyrr4627 = len(yyv4627)
			if yyrg4627 {
				copy(yyv4627, yyv24627)
			}
		} else if yyl4627 != len(yyv4627) {
			yyv4627 = yyv4627[:yyl4627]
			yyc4627 = true
		}
		yyj4627 := 0
		for ; yyj4627 < yyrr4627; yyj4627++ {
			yyh4627.ElemContainerState(yyj4627)
			if r.TryDecodeAsNil() {
				yyv4627[yyj4627] = ContainerStatus{}
			} else {
				yyv4628 := &yyv4627[yyj4627]
				yyv4628.CodecDecodeSelf(d)
			}

		}
		if yyrt4627 {
			for ; yyj4627 < yyl4627; yyj4627++ {
				yyv4627 = append(yyv4627, ContainerStatus{})
				yyh4627.ElemContainerState(yyj4627)
				if r.TryDecodeAsNil() {
					yyv4627[yyj4627] = ContainerStatus{}
				} else {
					yyv4629 := &yyv4627[yyj4627]
					yyv4629.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4627 := 0
		for ; !r.CheckBreak(); yyj4627++ {

			if yyj4627 >= len(yyv4627) {
				yyv4627 = append(yyv4627, ContainerStatus{}) // var yyz4627 ContainerStatus
				yyc4627 = true
			}
			yyh4627.ElemContainerState(yyj4627)
			if yyj4627 < len(yyv4627) {
				if r.TryDecodeAsNil() {
					yyv4627[yyj4627] = ContainerStatus{}
				} else {
					yyv4630 := &yyv4627[yyj4627]
					yyv4630.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4627 < len(yyv4627) {
			yyv4627 = yyv4627[:yyj4627]
			yyc4627 = true
		} else if yyj4627 == 0 && yyv4627 == nil {
			yyv4627 = []ContainerStatus{}
			yyc4627 = true
		}
	}
	yyh4627.End()
	if yyc4627 {
		*v = yyv4627
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4631 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4632 := &yyv4631
		yy4632.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4633 := *v
	yyh4633, yyl4633 := z.DecSliceHelperStart()
	var yyc4633 bool
	if yyl4633 == 0 {
		if yyv4633 == nil {
			yyv4633 = []Pod{}
			yyc4633 = true
		} else if len(yyv4633) != 0 {
			yyv4633 = yyv4633[:0]
			yyc4633 = true
		}
	} else if yyl4633 > 0 {
		var yyrr4633, yyrl4633 int
		var yyrt4633 bool
		if yyl4633 > cap(yyv4633) {

			yyrg4633 := len(yyv4633) > 0
			yyv24633 := yyv4633
			yyrl4633, yyrt4633 = z.DecInferLen(yyl4633, z.DecBasicHandle().MaxInitLen, 648)
			if yyrt4633 {
				if yyrl4633 <= cap(yyv4633) {
					yyv4633 = yyv4633[:yyrl4633]
				} else {
					yyv4633 = make([]Pod, yyrl4633)
				}
			} else {
				yyv4633 = make([]Pod, yyrl4633)
			}
			yyc4633 = true
			yyrr4633 = len(yyv4633)
			if yyrg4633 {
				copy(yyv4633, yyv24633)
			}
		} else if yyl4633 != len(yyv4633) {
			yyv4633 = yyv4633[:yyl4633]
			yyc4633 = true
		}
		yyj4633 := 0
		for ; yyj4633 < yyrr4633; yyj4633++ {
			yyh4633.ElemContainerState(yyj4633)
			if r.TryDecodeAsNil() {
				yyv4633[yyj4633] = Pod{}
			} else {
				yyv4634 := &yyv4633[yyj4633]
				yyv4634.CodecDecodeSelf(d)
			}

		}
		if yyrt4633 {
			for ; yyj4633 < yyl4633; yyj4633++ {
				yyv4633 = append(yyv4633, Pod{})
				yyh4633.ElemContainerState(yyj4633)
				if r.TryDecodeAsNil() {
					yyv4633[yyj4633] = Pod{}
				} else {
					yyv4635 := &yyv4633[yyj4633]
					yyv4635.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4633 := 0
		for ; !r.CheckBreak(); yyj4633++ {

			if yyj4633 >= len(yyv4633) {
				yyv4633 = append(yyv4633, Pod{}) // var yyz4633 Pod
				yyc4633 = true
			}
			yyh4633.ElemContainerState(yyj4633)
			if yyj4633 < len(yyv4633) {
				if r.TryDecodeAsNil() {
					yyv4633[yyj4633] = Pod{}
				} else {
					yyv4636 := &yyv4633[yyj4633]
					yyv4636.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4633 < len(yyv4633) {
			yyv4633 = yyv4633[:yyj4633]
			yyc4633 = true
		} else if yyj4633 == 0 && yyv4633 == nil {
			yyv4633 = []Pod{}
			yyc4633 = true
		}
	}
	yyh4633.End()
	if yyc4633 {
		*v = yyv4633
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4637 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4638 := &yyv4637
		yy4638.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4639 := *v
	yyh4639, yyl4639 := z.DecSliceHelperStart()
	var yyc4639 bool
	if yyl4639 == 0 {
		if yyv4639 == nil {
			yyv4639 = []PodTemplate{}
			yyc4639 = true
		} else if len(yyv4639) != 0 {
			yyv4639 = yyv4639[:0]
			yyc4639 = true
		}
	} else if yyl4639 > 0 {
		var yyrr4639, yyrl4639 int
		var yyrt4639 bool
		if yyl4639 > cap(yyv4639) {

			yyrg4639 := len(yyv4639) > 0
			yyv24639 := yyv4639
			yyrl4639, yyrt4639 = z.DecInferLen(yyl4639, z.DecBasicHandle().MaxInitLen, 696)
			if yyrt4639 {
				if yyrl4639 <= cap(yyv4639) {
					yyv4639 = yyv4639[:yyrl4639]
				} else {
					yyv4639 = make([]PodTemplate, yyrl4639)
				}
			} else {
				yyv4639 = make([]PodTemplate, yyrl4639)
			}
			yyc4639 = true
			yyrr4639 = len(yyv4639)
			if yyrg4639 {
				copy(yyv4639, yyv24639)
			}
		} else if yyl4639 != len(yyv4639) {
			yyv4639 = yyv4639[:yyl4639]
			yyc4639 = true
		}
		yyj4639 := 0
		for ; yyj4639 < yyrr4639; yyj4639++ {
			yyh4639.ElemContainerState(yyj4639)
			if r.TryDecodeAsNil() {
				yyv4639[yyj4639] = PodTemplate{}
			} else {
				yyv4640 := &yyv4639[yyj4639]
				yyv4640.CodecDecodeSelf(d)
			}

		}
		if yyrt4639 {
			for ; yyj4639 < yyl4639; yyj4639++ {
				yyv4639 = append(yyv4639, PodTemplate{})
				yyh4639.ElemContainerState(yyj4639)
				if r.TryDecodeAsNil() {
					yyv4639[yyj4639] = PodTemplate{}
				} else {
					yyv4641 := &yyv4639[yyj4639]
					yyv4641.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4639 := 0
		for ; !r.CheckBreak(); yyj4639++ {

			if yyj4639 >= len(yyv4639) {
				yyv4639 = append(yyv4639, PodTemplate{}) // var yyz4639 PodTemplate
				yyc4639 = true
			}
			yyh4639.ElemContainerState(yyj4639)
			if yyj4639 < len(yyv4639) {
				if r.TryDecodeAsNil() {
					yyv4639[yyj4639] = PodTemplate{}
				} else {
					yyv4642 := &yyv4639[yyj4639]
					yyv4642.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4639 < len(yyv4639) {
			yyv4639 = yyv4639[:yyj4639]
			yyc4639 = true
		} else if yyj4639 == 0 && yyv4639 == nil {
			yyv4639 = []PodTemplate{}
			yyc4639 = true
		}
	}
	yyh4639.End()
	if yyc4639 {
		*v = yyv4639
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4643 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4644 := &yyv4643
		yy4644.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4645 := *v
	yyh4645, yyl4645 := z.DecSliceHelperStart()
	var yyc4645 bool
	if yyl4645 == 0 {
		if yyv4645 == nil {
			yyv4645 = []ReplicationController{}
			yyc4645 = true
		} else if len(yyv4645) != 0 {
			yyv4645 = yyv4645[:0]
			yyc4645 = true
		}
	} else if yyl4645 > 0 {
		var yyrr4645, yyrl4645 int
		var yyrt4645 bool
		if yyl4645 > cap(yyv4645) {

			yyrg4645 := len(yyv4645) > 0
			yyv24645 := yyv4645
			yyrl4645, yyrt4645 = z.DecInferLen(yyl4645, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4645 {
				if yyrl4645 <= cap(yyv4645) {
					yyv4645 = yyv4645[:yyrl4645]
				} else {
					yyv4645 = make([]ReplicationController, yyrl4645)
				}
			} else {
				yyv4645 = make([]ReplicationController, yyrl4645)
			}
			yyc4645 = true
			yyrr4645 = len(yyv4645)
			if yyrg4645 {
				copy(yyv4645, yyv24645)
			}
		} else if yyl4645 != len(yyv4645) {
			yyv4645 = yyv4645[:yyl4645]
			yyc4645 = true
		}
		yyj4645 := 0
		for ; yyj4645 < yyrr4645; yyj4645++ {
			yyh4645.ElemContainerState(yyj4645)
			if r.TryDecodeAsNil() {
				yyv4645[yyj4645] = ReplicationController{}
			} else {
				yyv4646 := &yyv4645[yyj4645]
				yyv4646.CodecDecodeSelf(d)
			}

		}
		if yyrt4645 {
			for ; yyj4645 < yyl4645; yyj4645++ {
				yyv4645 = append(yyv4645, ReplicationController{})
				yyh4645.ElemContainerState(yyj4645)
				if r.TryDecodeAsNil() {
					yyv4645[yyj4645] = ReplicationController{}
				} else {
					yyv4647 := &yyv4645[yyj4645]
					yyv4647.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4645 := 0
		for ; !r.CheckBreak(); yyj4645++ {

			if yyj4645 >= len(yyv4645) {
				yyv4645 = append(yyv4645, ReplicationController{}) // var yyz4645 ReplicationController
				yyc4645 = true
			}
			yyh4645.ElemContainerState(yyj4645)
			if yyj4645 < len(yyv4645) {
				if r.TryDecodeAsNil() {
					yyv4645[yyj4645] = ReplicationController{}
				} else {
					yyv4648 := &yyv4645[yyj4645]
					yyv4648.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4645 < len(yyv4645) {
			yyv4645 = yyv4645[:yyj4645]
			yyc4645 = true
		} else if yyj4645 == 0 && yyv4645 == nil {
			yyv4645 = []ReplicationController{}
			yyc4645 = true
		}
	}
	yyh4645.End()
	if yyc4645 {
		*v = yyv4645
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4649 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4650 := &yyv4649
		yy4650.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4651 := *v
	yyh4651, yyl4651 := z.DecSliceHelperStart()
	var yyc4651 bool
	if yyl4651 == 0 {
		if yyv4651 == nil {
			yyv4651 = []LoadBalancerIngress{}
			yyc4651 = true
		} else if len(yyv4651) != 0 {
			yyv4651 = yyv4651[:0]
			yyc4651 = true
		}
	} else if yyl4651 > 0 {
		var yyrr4651, yyrl4651 int
		var yyrt4651 bool
		if yyl4651 > cap(yyv4651) {

			yyrg4651 := len(yyv4651) > 0
			yyv24651 := yyv4651
			yyrl4651, yyrt4651 = z.DecInferLen(yyl4651, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4651 {
				if yyrl4651 <= cap(yyv4651) {
					yyv4651 = yyv4651[:yyrl4651]
				} else {
					yyv4651 = make([]LoadBalancerIngress, yyrl4651)
				}
			} else {
				yyv4651 = make([]LoadBalancerIngress, yyrl4651)
			}
			yyc4651 = true
			yyrr4651 = len(yyv4651)
			if yyrg4651 {
				copy(yyv4651, yyv24651)
			}
		} else if yyl4651 != len(yyv4651) {
			yyv4651 = yyv4651[:yyl4651]
			yyc4651 = true
		}
		yyj4651 := 0
		for ; yyj4651 < yyrr4651; yyj4651++ {
			yyh4651.ElemContainerState(yyj4651)
			if r.TryDecodeAsNil() {
				yyv4651[yyj4651] = LoadBalancerIngress{}
			} else {
				yyv4652 := &yyv4651[yyj4651]
				yyv4652.CodecDecodeSelf(d)
			}

		}
		if yyrt4651 {
			for ; yyj4651 < yyl4651; yyj4651++ {
				yyv4651 = append(yyv4651, LoadBalancerIngress{})
				yyh4651.ElemContainerState(yyj4651)
				if r.TryDecodeAsNil() {
					yyv4651[yyj4651] = LoadBalancerIngress{}
				} else {
					yyv4653 := &yyv4651[yyj4651]
					yyv4653.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4651 := 0
		for ; !r.CheckBreak(); yyj4651++ {

			if yyj4651 >= len(yyv4651) {
				yyv4651 = append(yyv4651, LoadBalancerIngress{}) // var yyz4651 LoadBalancerIngress
				yyc4651 = true
			}
			yyh4651.ElemContainerState(yyj4651)
			if yyj4651 < len(yyv4651) {
				if r.TryDecodeAsNil() {
					yyv4651[yyj4651] = LoadBalancerIngress{}
				} else {
					yyv4654 := &yyv4651[yyj4651]
					yyv4654.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4651 < len(yyv4651) {
			yyv4651 = yyv4651[:yyj4651]
			yyc4651 = true
		} else if yyj4651 == 0 && yyv4651 == nil {
			yyv4651 = []LoadBalancerIngress{}
			yyc4651 = true
		}
	}
	yyh4651.End()
	if yyc4651 {
		*v = yyv4651
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4655 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4656 := &yyv4655
		yy4656.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4657 := *v
	yyh4657, yyl4657 := z.DecSliceHelperStart()
	var yyc4657 bool
	if yyl4657 == 0 {
		if yyv4657 == nil {
			yyv4657 = []ServicePort{}
			yyc4657 = true
		} else if len(yyv4657) != 0 {
			yyv4657 = yyv4657[:0]
			yyc4657 = true
		}
	} else if yyl4657 > 0 {
		var yyrr4657, yyrl4657 int
		var yyrt4657 bool
		if yyl4657 > cap(yyv4657) {

			yyrg4657 := len(yyv4657) > 0
			yyv24657 := yyv4657
			yyrl4657, yyrt4657 = z.DecInferLen(yyl4657, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4657 {
				if yyrl4657 <= cap(yyv4657) {
					yyv4657 = yyv4657[:yyrl4657]
				} else {
					yyv4657 = make([]ServicePort, yyrl4657)
				}
			} else {
				yyv4657 = make([]ServicePort, yyrl4657)
			}
			yyc4657 = true
			yyrr4657 = len(yyv4657)
			if yyrg4657 {
				copy(yyv4657, yyv24657)
			}
		} else if yyl4657 != len(yyv4657) {
			yyv4657 = yyv4657[:yyl4657]
			yyc4657 = true
		}
		yyj4657 := 0
		for ; yyj4657 < yyrr4657; yyj4657++ {
			yyh4657.ElemContainerState(yyj4657)
			if r.TryDecodeAsNil() {
				yyv4657[yyj4657] = ServicePort{}
			} else {
				yyv4658 := &yyv4657[yyj4657]
				yyv4658.CodecDecodeSelf(d)
			}

		}
		if yyrt4657 {
			for ; yyj4657 < yyl4657; yyj4657++ {
				yyv4657 = append(yyv4657, ServicePort{})
				yyh4657.ElemContainerState(yyj4657)
				if r.TryDecodeAsNil() {
					yyv4657[yyj4657] = ServicePort{}
				} else {
					yyv4659 := &yyv4657[yyj4657]
					yyv4659.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4657 := 0
		for ; !r.CheckBreak(); yyj4657++ {

			if yyj4657 >= len(yyv4657) {
				yyv4657 = append(yyv4657, ServicePort{}) // var yyz4657 ServicePort
				yyc4657 = true
			}
			yyh4657.ElemContainerState(yyj4657)
			if yyj4657 < len(yyv4657) {
				if r.TryDecodeAsNil() {
					yyv4657[yyj4657] = ServicePort{}
				} else {
					yyv4660 := &yyv4657[yyj4657]
					yyv4660.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4657 < len(yyv4657) {
			yyv4657 = yyv4657[:yyj4657]
			yyc4657 = true
		} else if yyj4657 == 0 && yyv4657 == nil {
			yyv4657 = []ServicePort{}
			yyc4657 = true
		}
	}
	yyh4657.End()
	if yyc4657 {
		*v = yyv4657
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4661 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4662 := &yyv4661
		yy4662.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4663 := *v
	yyh4663, yyl4663 := z.DecSliceHelperStart()
	var yyc4663 bool
	if yyl4663 == 0 {
		if yyv4663 == nil {
			yyv4663 = []Service{}
			yyc4663 = true
		} else if len(yyv4663) != 0 {
			yyv4663 = yyv4663[:0]
			yyc4663 = true
		}
	} else if yyl4663 > 0 {
		var yyrr4663, yyrl4663 int
		var yyrt4663 bool
		if yyl4663 > cap(yyv4663) {

			yyrg4663 := len(yyv4663) > 0
			yyv24663 := yyv4663
			yyrl4663, yyrt4663 = z.DecInferLen(yyl4663, z.DecBasicHandle().MaxInitLen, 448)
			if yyrt4663 {
				if yyrl4663 <= cap(yyv4663) {
					yyv4663 = yyv4663[:yyrl4663]
				} else {
					yyv4663 = make([]Service, yyrl4663)
				}
			} else {
				yyv4663 = make([]Service, yyrl4663)
			}
			yyc4663 = true
			yyrr4663 = len(yyv4663)
			if yyrg4663 {
				copy(yyv4663, yyv24663)
			}
		} else if yyl4663 != len(yyv4663) {
			yyv4663 = yyv4663[:yyl4663]
			yyc4663 = true
		}
		yyj4663 := 0
		for ; yyj4663 < yyrr4663; yyj4663++ {
			yyh4663.ElemContainerState(yyj4663)
			if r.TryDecodeAsNil() {
				yyv4663[yyj4663] = Service{}
			} else {
				yyv4664 := &yyv4663[yyj4663]
				yyv4664.CodecDecodeSelf(d)
			}

		}
		if yyrt4663 {
			for ; yyj4663 < yyl4663; yyj4663++ {
				yyv4663 = append(yyv4663, Service{})
				yyh4663.ElemContainerState(yyj4663)
				if r.TryDecodeAsNil() {
					yyv4663[yyj4663] = Service{}
				} else {
					yyv4665 := &yyv4663[yyj4663]
					yyv4665.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4663 := 0
		for ; !r.CheckBreak(); yyj4663++ {

			if yyj4663 >= len(yyv4663) {
				yyv4663 = append(yyv4663, Service{}) // var yyz4663 Service
				yyc4663 = true
			}
			yyh4663.ElemContainerState(yyj4663)
			if yyj4663 < len(yyv4663) {
				if r.TryDecodeAsNil() {
					yyv4663[yyj4663] = Service{}
				} else {
					yyv4666 := &yyv4663[yyj4663]
					yyv4666.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4663 < len(yyv4663) {
			yyv4663 = yyv4663[:yyj4663]
			yyc4663 = true
		} else if yyj4663 == 0 && yyv4663 == nil {
			yyv4663 = []Service{}
			yyc4663 = true
		}
	}
	yyh4663.End()
	if yyc4663 {
		*v = yyv4663
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4667 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4668 := &yyv4667
		yy4668.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4669 := *v
	yyh4669, yyl4669 := z.DecSliceHelperStart()
	var yyc4669 bool
	if yyl4669 == 0 {
		if yyv4669 == nil {
			yyv4669 = []ObjectReference{}
			yyc4669 = true
		} else if len(yyv4669) != 0 {
			yyv4669 = yyv4669[:0]
			yyc4669 = true
		}
	} else if yyl4669 > 0 {
		var yyrr4669, yyrl4669 int
		var yyrt4669 bool
		if yyl4669 > cap(yyv4669) {

			yyrg4669 := len(yyv4669) > 0
			yyv24669 := yyv4669
			yyrl4669, yyrt4669 = z.DecInferLen(yyl4669, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4669 {
				if yyrl4669 <= cap(yyv4669) {
					yyv4669 = yyv4669[:yyrl4669]
				} else {
					yyv4669 = make([]ObjectReference, yyrl4669)
				}
			} else {
				yyv4669 = make([]ObjectReference, yyrl4669)
			}
			yyc4669 = true
			yyrr4669 = len(yyv4669)
			if yyrg4669 {
				copy(yyv4669, yyv24669)
			}
		} else if yyl4669 != len(yyv4669) {
			yyv4669 = yyv4669[:yyl4669]
			yyc4669 = true
		}
		yyj4669 := 0
		for ; yyj4669 < yyrr4669; yyj4669++ {
			yyh4669.ElemContainerState(yyj4669)
			if r.TryDecodeAsNil() {
				yyv4669[yyj4669] = ObjectReference{}
			} else {
				yyv4670 := &yyv4669[yyj4669]
				yyv4670.CodecDecodeSelf(d)
			}

		}
		if yyrt4669 {
			for ; yyj4669 < yyl4669; yyj4669++ {
				yyv4669 = append(yyv4669, ObjectReference{})
				yyh4669.ElemContainerState(yyj4669)
				if r.TryDecodeAsNil() {
					yyv4669[yyj4669] = ObjectReference{}
				} else {
					yyv4671 := &yyv4669[yyj4669]
					yyv4671.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4669 := 0
		for ; !r.CheckBreak(); yyj4669++ {

			if yyj4669 >= len(yyv4669) {
				yyv4669 = append(yyv4669, ObjectReference{}) // var yyz4669 ObjectReference
				yyc4669 = true
			}
			yyh4669.ElemContainerState(yyj4669)
			if yyj4669 < len(yyv4669) {
				if r.TryDecodeAsNil() {
					yyv4669[yyj4669] = ObjectReference{}
				} else {
					yyv4672 := &yyv4669[yyj4669]
					yyv4672.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4669 < len(yyv4669) {
			yyv4669 = yyv4669[:yyj4669]
			yyc4669 = true
		} else if yyj4669 == 0 && yyv4669 == nil {
			yyv4669 = []ObjectReference{}
			yyc4669 = true
		}
	}
	yyh4669.End()
	if yyc4669 {
		*v = yyv4669
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4673 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4674 := &yyv4673
		yy4674.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4675 := *v
	yyh4675, yyl4675 := z.DecSliceHelperStart()
	var yyc4675 bool
	if yyl4675 == 0 {
		if yyv4675 == nil {
			yyv4675 = []ServiceAccount{}
			yyc4675 = true
		} else if len(yyv4675) != 0 {
			yyv4675 = yyv4675[:0]
			yyc4675 = true
		}
	} else if yyl4675 > 0 {
		var yyrr4675, yyrl4675 int
		var yyrt4675 bool
		if yyl4675 > cap(yyv4675) {

			yyrg4675 := len(yyv4675) > 0
			yyv24675 := yyv4675
			yyrl4675, yyrt4675 = z.DecInferLen(yyl4675, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4675 {
				if yyrl4675 <= cap(yyv4675) {
					yyv4675 = yyv4675[:yyrl4675]
				} else {
					yyv4675 = make([]ServiceAccount, yyrl4675)
				}
			} else {
				yyv4675 = make([]ServiceAccount, yyrl4675)
			}
			yyc4675 = true
			yyrr4675 = len(yyv4675)
			if yyrg4675 {
				copy(yyv4675, yyv24675)
			}
		} else if yyl4675 != len(yyv4675) {
			yyv4675 = yyv4675[:yyl4675]
			yyc4675 = true
		}
		yyj4675 := 0
		for ; yyj4675 < yyrr4675; yyj4675++ {
			yyh4675.ElemContainerState(yyj4675)
			if r.TryDecodeAsNil() {
				yyv4675[yyj4675] = ServiceAccount{}
			} else {
				yyv4676 := &yyv4675[yyj4675]
				yyv4676.CodecDecodeSelf(d)
			}

		}
		if yyrt4675 {
			for ; yyj4675 < yyl4675; yyj4675++ {
				yyv4675 = append(yyv4675, ServiceAccount{})
				yyh4675.ElemContainerState(yyj4675)
				if r.TryDecodeAsNil() {
					yyv4675[yyj4675] = ServiceAccount{}
				} else {
					yyv4677 := &yyv4675[yyj4675]
					yyv4677.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4675 := 0
		for ; !r.CheckBreak(); yyj4675++ {

			if yyj4675 >= len(yyv4675) {
				yyv4675 = append(yyv4675, ServiceAccount{}) // var yyz4675 ServiceAccount
				yyc4675 = true
			}
			yyh4675.ElemContainerState(yyj4675)
			if yyj4675 < len(yyv4675) {
				if r.TryDecodeAsNil() {
					yyv4675[yyj4675] = ServiceAccount{}
				} else {
					yyv4678 := &yyv4675[yyj4675]
					yyv4678.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4675 < len(yyv4675) {
			yyv4675 = yyv4675[:yyj4675]
			yyc4675 = true
		} else if yyj4675 == 0 && yyv4675 == nil {
			yyv4675 = []ServiceAccount{}
			yyc4675 = true
		}
	}
	yyh4675.End()
	if yyc4675 {
		*v = yyv4675
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4679 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4680 := &yyv4679
		yy4680.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4681 := *v
	yyh4681, yyl4681 := z.DecSliceHelperStart()
	var yyc4681 bool
	if yyl4681 == 0 {
		if yyv4681 == nil {
			yyv4681 = []EndpointSubset{}
			yyc4681 = true
		} else if len(yyv4681) != 0 {
			yyv4681 = yyv4681[:0]
			yyc4681 = true
		}
	} else if yyl4681 > 0 {
		var yyrr4681, yyrl4681 int
		var yyrt4681 bool
		if yyl4681 > cap(yyv4681) {

			yyrg4681 := len(yyv4681) > 0
			yyv24681 := yyv4681
			yyrl4681, yyrt4681 = z.DecInferLen(yyl4681, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4681 {
				if yyrl4681 <= cap(yyv4681) {
					yyv4681 = yyv4681[:yyrl4681]
				} else {
					yyv4681 = make([]EndpointSubset, yyrl4681)
				}
			} else {
				yyv4681 = make([]EndpointSubset, yyrl4681)
			}
			yyc4681 = true
			yyrr4681 = len(yyv4681)
			if yyrg4681 {
				copy(yyv4681, yyv24681)
			}
		} else if yyl4681 != len(yyv4681) {
			yyv4681 = yyv4681[:yyl4681]
			yyc4681 = true
		}
		yyj4681 := 0
		for ; yyj4681 < yyrr4681; yyj4681++ {
			yyh4681.ElemContainerState(yyj4681)
			if r.TryDecodeAsNil() {
				yyv4681[yyj4681] = EndpointSubset{}
			} else {
				yyv4682 := &yyv4681[yyj4681]
				yyv4682.CodecDecodeSelf(d)
			}

		}
		if yyrt4681 {
			for ; yyj4681 < yyl4681; yyj4681++ {
				yyv4681 = append(yyv4681, EndpointSubset{})
				yyh4681.ElemContainerState(yyj4681)
				if r.TryDecodeAsNil() {
					yyv4681[yyj4681] = EndpointSubset{}
				} else {
					yyv4683 := &yyv4681[yyj4681]
					yyv4683.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4681 := 0
		for ; !r.CheckBreak(); yyj4681++ {

			if yyj4681 >= len(yyv4681) {
				yyv4681 = append(yyv4681, EndpointSubset{}) // var yyz4681 EndpointSubset
				yyc4681 = true
			}
			yyh4681.ElemContainerState(yyj4681)
			if yyj4681 < len(yyv4681) {
				if r.TryDecodeAsNil() {
					yyv4681[yyj4681] = EndpointSubset{}
				} else {
					yyv4684 := &yyv4681[yyj4681]
					yyv4684.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4681 < len(yyv4681) {
			yyv4681 = yyv4681[:yyj4681]
			yyc4681 = true
		} else if yyj4681 == 0 && yyv4681 == nil {
			yyv4681 = []EndpointSubset{}
			yyc4681 = true
		}
	}
	yyh4681.End()
	if yyc4681 {
		*v = yyv4681
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4685 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4686 := &yyv4685
		yy4686.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4687 := *v
	yyh4687, yyl4687 := z.DecSliceHelperStart()
	var yyc4687 bool
	if yyl4687 == 0 {
		if yyv4687 == nil {
			yyv4687 = []EndpointAddress{}
			yyc4687 = true
		} else if len(yyv4687) != 0 {
			yyv4687 = yyv4687[:0]
			yyc4687 = true
		}
	} else if yyl4687 > 0 {
		var yyrr4687, yyrl4687 int
		var yyrt4687 bool
		if yyl4687 > cap(yyv4687) {

			yyrg4687 := len(yyv4687) > 0
			yyv24687 := yyv4687
			yyrl4687, yyrt4687 = z.DecInferLen(yyl4687, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4687 {
				if yyrl4687 <= cap(yyv4687) {
					yyv4687 = yyv4687[:yyrl4687]
				} else {
					yyv4687 = make([]EndpointAddress, yyrl4687)
				}
			} else {
				yyv4687 = make([]EndpointAddress, yyrl4687)
			}
			yyc4687 = true
			yyrr4687 = len(yyv4687)
			if yyrg4687 {
				copy(yyv4687, yyv24687)
			}
		} else if yyl4687 != len(yyv4687) {
			yyv4687 = yyv4687[:yyl4687]
			yyc4687 = true
		}
		yyj4687 := 0
		for ; yyj4687 < yyrr4687; yyj4687++ {
			yyh4687.ElemContainerState(yyj4687)
			if r.TryDecodeAsNil() {
				yyv4687[yyj4687] = EndpointAddress{}
			} else {
				yyv4688 := &yyv4687[yyj4687]
				yyv4688.CodecDecodeSelf(d)
			}

		}
		if yyrt4687 {
			for ; yyj4687 < yyl4687; yyj4687++ {
				yyv4687 = append(yyv4687, EndpointAddress{})
				yyh4687.ElemContainerState(yyj4687)
				if r.TryDecodeAsNil() {
					yyv4687[yyj4687] = EndpointAddress{}
				} else {
					yyv4689 := &yyv4687[yyj4687]
					yyv4689.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4687 := 0
		for ; !r.CheckBreak(); yyj4687++ {

			if yyj4687 >= len(yyv4687) {
				yyv4687 = append(yyv4687, EndpointAddress{}) // var yyz4687 EndpointAddress
				yyc4687 = true
			}
			yyh4687.ElemContainerState(yyj4687)
			if yyj4687 < len(yyv4687) {
				if r.TryDecodeAsNil() {
					yyv4687[yyj4687] = EndpointAddress{}
				} else {
					yyv4690 := &yyv4687[yyj4687]
					yyv4690.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4687 < len(yyv4687) {
			yyv4687 = yyv4687[:yyj4687]
			yyc4687 = true
		} else if yyj4687 == 0 && yyv4687 == nil {
			yyv4687 = []EndpointAddress{}
			yyc4687 = true
		}
	}
	yyh4687.End()
	if yyc4687 {
		*v = yyv4687
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4691 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4692 := &yyv4691
		yy4692.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4693 := *v
	yyh4693, yyl4693 := z.DecSliceHelperStart()
	var yyc4693 bool
	if yyl4693 == 0 {
		if yyv4693 == nil {
			yyv4693 = []EndpointPort{}
			yyc4693 = true
		} else if len(yyv4693) != 0 {
			yyv4693 = yyv4693[:0]
			yyc4693 = true
		}
	} else if yyl4693 > 0 {
		var yyrr4693, yyrl4693 int
		var yyrt4693 bool
		if yyl4693 > cap(yyv4693) {

			yyrg4693 := len(yyv4693) > 0
			yyv24693 := yyv4693
			yyrl4693, yyrt4693 = z.DecInferLen(yyl4693, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4693 {
				if yyrl4693 <= cap(yyv4693) {
					yyv4693 = yyv4693[:yyrl4693]
				} else {
					yyv4693 = make([]EndpointPort, yyrl4693)
				}
			} else {
				yyv4693 = make([]EndpointPort, yyrl4693)
			}
			yyc4693 = true
			yyrr4693 = len(yyv4693)
			if yyrg4693 {
				copy(yyv4693, yyv24693)
			}
		} else if yyl4693 != len(yyv4693) {
			yyv4693 = yyv4693[:yyl4693]
			yyc4693 = true
		}
		yyj4693 := 0
		for ; yyj4693 < yyrr4693; yyj4693++ {
			yyh4693.ElemContainerState(yyj4693)
			if r.TryDecodeAsNil() {
				yyv4693[yyj4693] = EndpointPort{}
			} else {
				yyv4694 := &yyv4693[yyj4693]
				yyv4694.CodecDecodeSelf(d)
			}

		}
		if yyrt4693 {
			for ; yyj4693 < yyl4693; yyj4693++ {
				yyv4693 = append(yyv4693, EndpointPort{})
				yyh4693.ElemContainerState(yyj4693)
				if r.TryDecodeAsNil() {
					yyv4693[yyj4693] = EndpointPort{}
				} else {
					yyv4695 := &yyv4693[yyj4693]
					yyv4695.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4693 := 0
		for ; !r.CheckBreak(); yyj4693++ {

			if yyj4693 >= len(yyv4693) {
				yyv4693 = append(yyv4693, EndpointPort{}) // var yyz4693 EndpointPort
				yyc4693 = true
			}
			yyh4693.ElemContainerState(yyj4693)
			if yyj4693 < len(yyv4693) {
				if r.TryDecodeAsNil() {
					yyv4693[yyj4693] = EndpointPort{}
				} else {
					yyv4696 := &yyv4693[yyj4693]
					yyv4696.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4693 < len(yyv4693) {
			yyv4693 = yyv4693[:yyj4693]
			yyc4693 = true
		} else if yyj4693 == 0 && yyv4693 == nil {
			yyv4693 = []EndpointPort{}
			yyc4693 = true
		}
	}
	yyh4693.End()
	if yyc4693 {
		*v = yyv4693
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4697 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4698 := &yyv4697
		yy4698.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4699 := *v
	yyh4699, yyl4699 := z.DecSliceHelperStart()
	var yyc4699 bool
	if yyl4699 == 0 {
		if yyv4699 == nil {
			yyv4699 = []Endpoints{}
			yyc4699 = true
		} else if len(yyv4699) != 0 {
			yyv4699 = yyv4699[:0]
			yyc4699 = true
		}
	} else if yyl4699 > 0 {
		var yyrr4699, yyrl4699 int
		var yyrt4699 bool
		if yyl4699 > cap(yyv4699) {

			yyrg4699 := len(yyv4699) > 0
			yyv24699 := yyv4699
			yyrl4699, yyrt4699 = z.DecInferLen(yyl4699, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4699 {
				if yyrl4699 <= cap(yyv4699) {
					yyv4699 = yyv4699[:yyrl4699]
				} else {
					yyv4699 = make([]Endpoints, yyrl4699)
				}
			} else {
				yyv4699 = make([]Endpoints, yyrl4699)
			}
			yyc4699 = true
			yyrr4699 = len(yyv4699)
			if yyrg4699 {
				copy(yyv4699, yyv24699)
			}
		} else if yyl4699 != len(yyv4699) {
			yyv4699 = yyv4699[:yyl4699]
			yyc4699 = true
		}
		yyj4699 := 0
		for ; yyj4699 < yyrr4699; yyj4699++ {
			yyh4699.ElemContainerState(yyj4699)
			if r.TryDecodeAsNil() {
				yyv4699[yyj4699] = Endpoints{}
			} else {
				yyv4700 := &yyv4699[yyj4699]
				yyv4700.CodecDecodeSelf(d)
			}

		}
		if yyrt4699 {
			for ; yyj4699 < yyl4699; yyj4699++ {
				yyv4699 = append(yyv4699, Endpoints{})
				yyh4699.ElemContainerState(yyj4699)
				if r.TryDecodeAsNil() {
					yyv4699[yyj4699] = Endpoints{}
				} else {
					yyv4701 := &yyv4699[yyj4699]
					yyv4701.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4699 := 0
		for ; !r.CheckBreak(); yyj4699++ {

			if yyj4699 >= len(yyv4699) {
				yyv4699 = append(yyv4699, Endpoints{}) // var yyz4699 Endpoints
				yyc4699 = true
			}
			yyh4699.ElemContainerState(yyj4699)
			if yyj4699 < len(yyv4699) {
				if r.TryDecodeAsNil() {
					yyv4699[yyj4699] = Endpoints{}
				} else {
					yyv4702 := &yyv4699[yyj4699]
					yyv4702.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4699 < len(yyv4699) {
			yyv4699 = yyv4699[:yyj4699]
			yyc4699 = true
		} else if yyj4699 == 0 && yyv4699 == nil {
			yyv4699 = []Endpoints{}
			yyc4699 = true
		}
	}
	yyh4699.End()
	if yyc4699 {
		*v = yyv4699
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4703 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4704 := &yyv4703
		yy4704.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4705 := *v
	yyh4705, yyl4705 := z.DecSliceHelperStart()
	var yyc4705 bool
	if yyl4705 == 0 {
		if yyv4705 == nil {
			yyv4705 = []NodeCondition{}
			yyc4705 = true
		} else if len(yyv4705) != 0 {
			yyv4705 = yyv4705[:0]
			yyc4705 = true
		}
	} else if yyl4705 > 0 {
		var yyrr4705, yyrl4705 int
		var yyrt4705 bool
		if yyl4705 > cap(yyv4705) {

			yyrg4705 := len(yyv4705) > 0
			yyv24705 := yyv4705
			yyrl4705, yyrt4705 = z.DecInferLen(yyl4705, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4705 {
				if yyrl4705 <= cap(yyv4705) {
					yyv4705 = yyv4705[:yyrl4705]
				} else {
					yyv4705 = make([]NodeCondition, yyrl4705)
				}
			} else {
				yyv4705 = make([]NodeCondition, yyrl4705)
			}
			yyc4705 = true
			yyrr4705 = len(yyv4705)
			if yyrg4705 {
				copy(yyv4705, yyv24705)
			}
		} else if yyl4705 != len(yyv4705) {
			yyv4705 = yyv4705[:yyl4705]
			yyc4705 = true
		}
		yyj4705 := 0
		for ; yyj4705 < yyrr4705; yyj4705++ {
			yyh4705.ElemContainerState(yyj4705)
			if r.TryDecodeAsNil() {
				yyv4705[yyj4705] = NodeCondition{}
			} else {
				yyv4706 := &yyv4705[yyj4705]
				yyv4706.CodecDecodeSelf(d)
			}

		}
		if yyrt4705 {
			for ; yyj4705 < yyl4705; yyj4705++ {
				yyv4705 = append(yyv4705, NodeCondition{})
				yyh4705.ElemContainerState(yyj4705)
				if r.TryDecodeAsNil() {
					yyv4705[yyj4705] = NodeCondition{}
				} else {
					yyv4707 := &yyv4705[yyj4705]
					yyv4707.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4705 := 0
		for ; !r.CheckBreak(); yyj4705++ {

			if yyj4705 >= len(yyv4705) {
				yyv4705 = append(yyv4705, NodeCondition{}) // var yyz4705 NodeCondition
				yyc4705 = true
			}
			yyh4705.ElemContainerState(yyj4705)
			if yyj4705 < len(yyv4705) {
				if r.TryDecodeAsNil() {
					yyv4705[yyj4705] = NodeCondition{}
				} else {
					yyv4708 := &yyv4705[yyj4705]
					yyv4708.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4705 < len(yyv4705) {
			yyv4705 = yyv4705[:yyj4705]
			yyc4705 = true
		} else if yyj4705 == 0 && yyv4705 == nil {
			yyv4705 = []NodeCondition{}
			yyc4705 = true
		}
	}
	yyh4705.End()
	if yyc4705 {
		*v = yyv4705
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4709 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4710 := &yyv4709
		yy4710.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4711 := *v
	yyh4711, yyl4711 := z.DecSliceHelperStart()
	var yyc4711 bool
	if yyl4711 == 0 {
		if yyv4711 == nil {
			yyv4711 = []NodeAddress{}
			yyc4711 = true
		} else if len(yyv4711) != 0 {
			yyv4711 = yyv4711[:0]
			yyc4711 = true
		}
	} else if yyl4711 > 0 {
		var yyrr4711, yyrl4711 int
		var yyrt4711 bool
		if yyl4711 > cap(yyv4711) {

			yyrg4711 := len(yyv4711) > 0
			yyv24711 := yyv4711
			yyrl4711, yyrt4711 = z.DecInferLen(yyl4711, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4711 {
				if yyrl4711 <= cap(yyv4711) {
					yyv4711 = yyv4711[:yyrl4711]
				} else {
					yyv4711 = make([]NodeAddress, yyrl4711)
				}
			} else {
				yyv4711 = make([]NodeAddress, yyrl4711)
			}
			yyc4711 = true
			yyrr4711 = len(yyv4711)
			if yyrg4711 {
				copy(yyv4711, yyv24711)
			}
		} else if yyl4711 != len(yyv4711) {
			yyv4711 = yyv4711[:yyl4711]
			yyc4711 = true
		}
		yyj4711 := 0
		for ; yyj4711 < yyrr4711; yyj4711++ {
			yyh4711.ElemContainerState(yyj4711)
			if r.TryDecodeAsNil() {
				yyv4711[yyj4711] = NodeAddress{}
			} else {
				yyv4712 := &yyv4711[yyj4711]
				yyv4712.CodecDecodeSelf(d)
			}

		}
		if yyrt4711 {
			for ; yyj4711 < yyl4711; yyj4711++ {
				yyv4711 = append(yyv4711, NodeAddress{})
				yyh4711.ElemContainerState(yyj4711)
				if r.TryDecodeAsNil() {
					yyv4711[yyj4711] = NodeAddress{}
				} else {
					yyv4713 := &yyv4711[yyj4711]
					yyv4713.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4711 := 0
		for ; !r.CheckBreak(); yyj4711++ {

			if yyj4711 >= len(yyv4711) {
				yyv4711 = append(yyv4711, NodeAddress{}) // var yyz4711 NodeAddress
				yyc4711 = true
			}
			yyh4711.ElemContainerState(yyj4711)
			if yyj4711 < len(yyv4711) {
				if r.TryDecodeAsNil() {
					yyv4711[yyj4711] = NodeAddress{}
				} else {
					yyv4714 := &yyv4711[yyj4711]
					yyv4714.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4711 < len(yyv4711) {
			yyv4711 = yyv4711[:yyj4711]
			yyc4711 = true
		} else if yyj4711 == 0 && yyv4711 == nil {
			yyv4711 = []NodeAddress{}
			yyc4711 = true
		}
	}
	yyh4711.End()
	if yyc4711 {
		*v = yyv4711
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4715 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4716 := &yyv4715
		yy4716.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4717 := *v
	yyh4717, yyl4717 := z.DecSliceHelperStart()
	var yyc4717 bool
	if yyl4717 == 0 {
		if yyv4717 == nil {
			yyv4717 = []ContainerImage{}
			yyc4717 = true
		} else if len(yyv4717) != 0 {
			yyv4717 = yyv4717[:0]
			yyc4717 = true
		}
	} else if yyl4717 > 0 {
		var yyrr4717, yyrl4717 int
		var yyrt4717 bool
		if yyl4717 > cap(yyv4717) {

			yyrg4717 := len(yyv4717) > 0
			yyv24717 := yyv4717
			yyrl4717, yyrt4717 = z.DecInferLen(yyl4717, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4717 {
				if yyrl4717 <= cap(yyv4717) {
					yyv4717 = yyv4717[:yyrl4717]
				} else {
					yyv4717 = make([]ContainerImage, yyrl4717)
				}
			} else {
				yyv4717 = make([]ContainerImage, yyrl4717)
			}
			yyc4717 = true
			yyrr4717 = len(yyv4717)
			if yyrg4717 {
				copy(yyv4717, yyv24717)
			}
		} else if yyl4717 != len(yyv4717) {
			yyv4717 = yyv4717[:yyl4717]
			yyc4717 = true
		}
		yyj4717 := 0
		for ; yyj4717 < yyrr4717; yyj4717++ {
			yyh4717.ElemContainerState(yyj4717)
			if r.TryDecodeAsNil() {
				yyv4717[yyj4717] = ContainerImage{}
			} else {
				yyv4718 := &yyv4717[yyj4717]
				yyv4718.CodecDecodeSelf(d)
			}

		}
		if yyrt4717 {
			for ; yyj4717 < yyl4717; yyj4717++ {
				yyv4717 = append(yyv4717, ContainerImage{})
				yyh4717.ElemContainerState(yyj4717)
				if r.TryDecodeAsNil() {
					yyv4717[yyj4717] = ContainerImage{}
				} else {
					yyv4719 := &yyv4717[yyj4717]
					yyv4719.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4717 := 0
		for ; !r.CheckBreak(); yyj4717++ {

			if yyj4717 >= len(yyv4717) {
				yyv4717 = append(yyv4717, ContainerImage{}) // var yyz4717 ContainerImage
				yyc4717 = true
			}
			yyh4717.ElemContainerState(yyj4717)
			if yyj4717 < len(yyv4717) {
				if r.TryDecodeAsNil() {
					yyv4717[yyj4717] = ContainerImage{}
				} else {
					yyv4720 := &yyv4717[yyj4717]
					yyv4720.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4717 < len(yyv4717) {
			yyv4717 = yyv4717[:yyj4717]
			yyc4717 = true
		} else if yyj4717 == 0 && yyv4717 == nil {
			yyv4717 = []ContainerImage{}
			yyc4717 = true
		}
	}
	yyh4717.End()
	if yyc4717 {
		*v = yyv4717
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4721 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4721.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4722 := *v
	yyh4722, yyl4722 := z.DecSliceHelperStart()
	var yyc4722 bool
	if yyl4722 == 0 {
		if yyv4722 == nil {
			yyv4722 = []UniqueVolumeName{}
			yyc4722 = true
		} else if len(yyv4722) != 0 {
			yyv4722 = yyv4722[:0]
			yyc4722 = true
		}
	} else if yyl4722 > 0 {
		var yyrr4722, yyrl4722 int
		var yyrt4722 bool
		if yyl4722 > cap(yyv4722) {

			yyrl4722, yyrt4722 = z.DecInferLen(yyl4722, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4722 {
				if yyrl4722 <= cap(yyv4722) {
					yyv4722 = yyv4722[:yyrl4722]
				} else {
					yyv4722 = make([]UniqueVolumeName, yyrl4722)
				}
			} else {
				yyv4722 = make([]UniqueVolumeName, yyrl4722)
			}
			yyc4722 = true
			yyrr4722 = len(yyv4722)
		} else if yyl4722 != len(yyv4722) {
			yyv4722 = yyv4722[:yyl4722]
			yyc4722 = true
		}
		yyj4722 := 0
		for ; yyj4722 < yyrr4722; yyj4722++ {
			yyh4722.ElemContainerState(yyj4722)
			if r.TryDecodeAsNil() {
				yyv4722[yyj4722] = ""
			} else {
				yyv4722[yyj4722] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4722 {
			for ; yyj4722 < yyl4722; yyj4722++ {
				yyv4722 = append(yyv4722, "")
				yyh4722.ElemContainerState(yyj4722)
				if r.TryDecodeAsNil() {
					yyv4722[yyj4722] = ""
				} else {
					yyv4722[yyj4722] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4722 := 0
		for ; !r.CheckBreak(); yyj4722++ {

			if yyj4722 >= len(yyv4722) {
				yyv4722 = append(yyv4722, "") // var yyz4722 UniqueVolumeName
				yyc4722 = true
			}
			yyh4722.ElemContainerState(yyj4722)
			if yyj4722 < len(yyv4722) {
				if r.TryDecodeAsNil() {
					yyv4722[yyj4722] = ""
				} else {
					yyv4722[yyj4722] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4722 < len(yyv4722) {
			yyv4722 = yyv4722[:yyj4722]
			yyc4722 = true
		} else if yyj4722 == 0 && yyv4722 == nil {
			yyv4722 = []UniqueVolumeName{}
			yyc4722 = true
		}
	}
	yyh4722.End()
	if yyc4722 {
		*v = yyv4722
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4726 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4727 := &yyv4726
		yy4727.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4728 := *v
	yyh4728, yyl4728 := z.DecSliceHelperStart()
	var yyc4728 bool
	if yyl4728 == 0 {
		if yyv4728 == nil {
			yyv4728 = []AttachedVolume{}
			yyc4728 = true
		} else if len(yyv4728) != 0 {
			yyv4728 = yyv4728[:0]
			yyc4728 = true
		}
	} else if yyl4728 > 0 {
		var yyrr4728, yyrl4728 int
		var yyrt4728 bool
		if yyl4728 > cap(yyv4728) {

			yyrg4728 := len(yyv4728) > 0
			yyv24728 := yyv4728
			yyrl4728, yyrt4728 = z.DecInferLen(yyl4728, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4728 {
				if yyrl4728 <= cap(yyv4728) {
					yyv4728 = yyv4728[:yyrl4728]
				} else {
					yyv4728 = make([]AttachedVolume, yyrl4728)
				}
			} else {
				yyv4728 = make([]AttachedVolume, yyrl4728)
			}
			yyc4728 = true
			yyrr4728 = len(yyv4728)
			if yyrg4728 {
				copy(yyv4728, yyv24728)
			}
		} else if yyl4728 != len(yyv4728) {
			yyv4728 = yyv4728[:yyl4728]
			yyc4728 = true
		}
		yyj4728 := 0
		for ; yyj4728 < yyrr4728; yyj4728++ {
			yyh4728.ElemContainerState(yyj4728)
			if r.TryDecodeAsNil() {
				yyv4728[yyj4728] = AttachedVolume{}
			} else {
				yyv4729 := &yyv4728[yyj4728]
				yyv4729.CodecDecodeSelf(d)
			}

		}
		if yyrt4728 {
			for ; yyj4728 < yyl4728; yyj4728++ {
				yyv4728 = append(yyv4728, AttachedVolume{})
				yyh4728.ElemContainerState(yyj4728)
				if r.TryDecodeAsNil() {
					yyv4728[yyj4728] = AttachedVolume{}
				} else {
					yyv4730 := &yyv4728[yyj4728]
					yyv4730.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4728 := 0
		for ; !r.CheckBreak(); yyj4728++ {

			if yyj4728 >= len(yyv4728) {
				yyv4728 = append(yyv4728, AttachedVolume{}) // var yyz4728 AttachedVolume
				yyc4728 = true
			}
			yyh4728.ElemContainerState(yyj4728)
			if yyj4728 < len(yyv4728) {
				if r.TryDecodeAsNil() {
					yyv4728[yyj4728] = AttachedVolume{}
				} else {
					yyv4731 := &yyv4728[yyj4728]
					yyv4731.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4728 < len(yyv4728) {
			yyv4728 = yyv4728[:yyj4728]
			yyc4728 = true
		} else if yyj4728 == 0 && yyv4728 == nil {
			yyv4728 = []AttachedVolume{}
			yyc4728 = true
		}
	}
	yyh4728.End()
	if yyc4728 {
		*v = yyv4728
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4732 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4733 := &yyv4732
		yy4733.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4734 := *v
	yyh4734, yyl4734 := z.DecSliceHelperStart()
	var yyc4734 bool
	if yyl4734 == 0 {
		if yyv4734 == nil {
			yyv4734 = []PreferAvoidPodsEntry{}
			yyc4734 = true
		} else if len(yyv4734) != 0 {
			yyv4734 = yyv4734[:0]
			yyc4734 = true
		}
	} else if yyl4734 > 0 {
		var yyrr4734, yyrl4734 int
		var yyrt4734 bool
		if yyl4734 > cap(yyv4734) {

			yyrg4734 := len(yyv4734) > 0
			yyv24734 := yyv4734
			yyrl4734, yyrt4734 = z.DecInferLen(yyl4734, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4734 {
				if yyrl4734 <= cap(yyv4734) {
					yyv4734 = yyv4734[:yyrl4734]
				} else {
					yyv4734 = make([]PreferAvoidPodsEntry, yyrl4734)
				}
			} else {
				yyv4734 = make([]PreferAvoidPodsEntry, yyrl4734)
			}
			yyc4734 = true
			yyrr4734 = len(yyv4734)
			if yyrg4734 {
				copy(yyv4734, yyv24734)
			}
		} else if yyl4734 != len(yyv4734) {
			yyv4734 = yyv4734[:yyl4734]
			yyc4734 = true
		}
		yyj4734 := 0
		for ; yyj4734 < yyrr4734; yyj4734++ {
			yyh4734.ElemContainerState(yyj4734)
			if r.TryDecodeAsNil() {
				yyv4734[yyj4734] = PreferAvoidPodsEntry{}
			} else {
				yyv4735 := &yyv4734[yyj4734]
				yyv4735.CodecDecodeSelf(d)
			}

		}
		if yyrt4734 {
			for ; yyj4734 < yyl4734; yyj4734++ {
				yyv4734 = append(yyv4734, PreferAvoidPodsEntry{})
				yyh4734.ElemContainerState(yyj4734)
				if r.TryDecodeAsNil() {
					yyv4734[yyj4734] = PreferAvoidPodsEntry{}
				} else {
					yyv4736 := &yyv4734[yyj4734]
					yyv4736.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4734 := 0
		for ; !r.CheckBreak(); yyj4734++ {

			if yyj4734 >= len(yyv4734) {
				yyv4734 = append(yyv4734, PreferAvoidPodsEntry{}) // var yyz4734 PreferAvoidPodsEntry
				yyc4734 = true
			}
			yyh4734.ElemContainerState(yyj4734)
			if yyj4734 < len(yyv4734) {
				if r.TryDecodeAsNil() {
					yyv4734[yyj4734] = PreferAvoidPodsEntry{}
				} else {
					yyv4737 := &yyv4734[yyj4734]
					yyv4737.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4734 < len(yyv4734) {
			yyv4734 = yyv4734[:yyj4734]
			yyc4734 = true
		} else if yyj4734 == 0 && yyv4734 == nil {
			yyv4734 = []PreferAvoidPodsEntry{}
			yyc4734 = true
		}
	}
	yyh4734.End()
	if yyc4734 {
		*v = yyv4734
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4738, yyv4738 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4738.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4739 := &yyv4738
		yym4740 := z.EncBinary()
		_ = yym4740
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4739) {
		} else if !yym4740 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4739)
		} else {
			z.EncFallback(yy4739)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4741 := *v
	yyl4741 := r.ReadMapStart()
	yybh4741 := z.DecBasicHandle()
	if yyv4741 == nil {
		yyrl4741, _ := z.DecInferLen(yyl4741, yybh4741.MaxInitLen, 72)
		yyv4741 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4741)
		*v = yyv4741
	}
	var yymk4741 ResourceName
	var yymv4741 pkg3_resource.Quantity
	var yymg4741 bool
	if yybh4741.MapValueReset {
		yymg4741 = true
	}
	if yyl4741 > 0 {
		for yyj4741 := 0; yyj4741 < yyl4741; yyj4741++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4741 = ""
			} else {
				yymk4741 = ResourceName(r.DecodeString())
			}

			if yymg4741 {
				yymv4741 = yyv4741[yymk4741]
			} else {
				yymv4741 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4741 = pkg3_resource.Quantity{}
			} else {
				yyv4743 := &yymv4741
				yym4744 := z.DecBinary()
				_ = yym4744
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4743) {
				} else if !yym4744 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4743)
				} else {
					z.DecFallback(yyv4743, false)
				}
			}

			if yyv4741 != nil {
				yyv4741[yymk4741] = yymv4741
			}
		}
	} else if yyl4741 < 0 {
		for yyj4741 := 0; !r.CheckBreak(); yyj4741++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4741 = ""
			} else {
				yymk4741 = ResourceName(r.DecodeString())
			}

			if yymg4741 {
				yymv4741 = yyv4741[yymk4741]
			} else {
				yymv4741 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4741 = pkg3_resource.Quantity{}
			} else {
				yyv4746 := &yymv4741
				yym4747 := z.DecBinary()
				_ = yym4747
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4746) {
				} else if !yym4747 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4746)
				} else {
					z.DecFallback(yyv4746, false)
				}
			}

			if yyv4741 != nil {
				yyv4741[yymk4741] = yymv4741
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4748 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4749 := &yyv4748
		yy4749.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4750 := *v
	yyh4750, yyl4750 := z.DecSliceHelperStart()
	var yyc4750 bool
	if yyl4750 == 0 {
		if yyv4750 == nil {
			yyv4750 = []Node{}
			yyc4750 = true
		} else if len(yyv4750) != 0 {
			yyv4750 = yyv4750[:0]
			yyc4750 = true
		}
	} else if yyl4750 > 0 {
		var yyrr4750, yyrl4750 int
		var yyrt4750 bool
		if yyl4750 > cap(yyv4750) {

			yyrg4750 := len(yyv4750) > 0
			yyv24750 := yyv4750
			yyrl4750, yyrt4750 = z.DecInferLen(yyl4750, z.DecBasicHandle().MaxInitLen, 616)
			if yyrt4750 {
				if yyrl4750 <= cap(yyv4750) {
					yyv4750 = yyv4750[:yyrl4750]
				} else {
					yyv4750 = make([]Node, yyrl4750)
				}
			} else {
				yyv4750 = make([]Node, yyrl4750)
			}
			yyc4750 = true
			yyrr4750 = len(yyv4750)
			if yyrg4750 {
				copy(yyv4750, yyv24750)
			}
		} else if yyl4750 != len(yyv4750) {
			yyv4750 = yyv4750[:yyl4750]
			yyc4750 = true
		}
		yyj4750 := 0
		for ; yyj4750 < yyrr4750; yyj4750++ {
			yyh4750.ElemContainerState(yyj4750)
			if r.TryDecodeAsNil() {
				yyv4750[yyj4750] = Node{}
			} else {
				yyv4751 := &yyv4750[yyj4750]
				yyv4751.CodecDecodeSelf(d)
			}

		}
		if yyrt4750 {
			for ; yyj4750 < yyl4750; yyj4750++ {
				yyv4750 = append(yyv4750, Node{})
				yyh4750.ElemContainerState(yyj4750)
				if r.TryDecodeAsNil() {
					yyv4750[yyj4750] = Node{}
				} else {
					yyv4752 := &yyv4750[yyj4750]
					yyv4752.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4750 := 0
		for ; !r.CheckBreak(); yyj4750++ {

			if yyj4750 >= len(yyv4750) {
				yyv4750 = append(yyv4750, Node{}) // var yyz4750 Node
				yyc4750 = true
			}
			yyh4750.ElemContainerState(yyj4750)
			if yyj4750 < len(yyv4750) {
				if r.TryDecodeAsNil() {
					yyv4750[yyj4750] = Node{}
				} else {
					yyv4753 := &yyv4750[yyj4750]
					yyv4753.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4750 < len(yyv4750) {
			yyv4750 = yyv4750[:yyj4750]
			yyc4750 = true
		} else if yyj4750 == 0 && yyv4750 == nil {
			yyv4750 = []Node{}
			yyc4750 = true
		}
	}
	yyh4750.End()
	if yyc4750 {
		*v = yyv4750
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4754 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4754.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4755 := *v
	yyh4755, yyl4755 := z.DecSliceHelperStart()
	var yyc4755 bool
	if yyl4755 == 0 {
		if yyv4755 == nil {
			yyv4755 = []FinalizerName{}
			yyc4755 = true
		} else if len(yyv4755) != 0 {
			yyv4755 = yyv4755[:0]
			yyc4755 = true
		}
	} else if yyl4755 > 0 {
		var yyrr4755, yyrl4755 int
		var yyrt4755 bool
		if yyl4755 > cap(yyv4755) {

			yyrl4755, yyrt4755 = z.DecInferLen(yyl4755, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4755 {
				if yyrl4755 <= cap(yyv4755) {
					yyv4755 = yyv4755[:yyrl4755]
				} else {
					yyv4755 = make([]FinalizerName, yyrl4755)
				}
			} else {
				yyv4755 = make([]FinalizerName, yyrl4755)
			}
			yyc4755 = true
			yyrr4755 = len(yyv4755)
		} else if yyl4755 != len(yyv4755) {
			yyv4755 = yyv4755[:yyl4755]
			yyc4755 = true
		}
		yyj4755 := 0
		for ; yyj4755 < yyrr4755; yyj4755++ {
			yyh4755.ElemContainerState(yyj4755)
			if r.TryDecodeAsNil() {
				yyv4755[yyj4755] = ""
			} else {
				yyv4755[yyj4755] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4755 {
			for ; yyj4755 < yyl4755; yyj4755++ {
				yyv4755 = append(yyv4755, "")
				yyh4755.ElemContainerState(yyj4755)
				if r.TryDecodeAsNil() {
					yyv4755[yyj4755] = ""
				} else {
					yyv4755[yyj4755] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4755 := 0
		for ; !r.CheckBreak(); yyj4755++ {

			if yyj4755 >= len(yyv4755) {
				yyv4755 = append(yyv4755, "") // var yyz4755 FinalizerName
				yyc4755 = true
			}
			yyh4755.ElemContainerState(yyj4755)
			if yyj4755 < len(yyv4755) {
				if r.TryDecodeAsNil() {
					yyv4755[yyj4755] = ""
				} else {
					yyv4755[yyj4755] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4755 < len(yyv4755) {
			yyv4755 = yyv4755[:yyj4755]
			yyc4755 = true
		} else if yyj4755 == 0 && yyv4755 == nil {
			yyv4755 = []FinalizerName{}
			yyc4755 = true
		}
	}
	yyh4755.End()
	if yyc4755 {
		*v = yyv4755
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4759 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4760 := &yyv4759
		yy4760.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4761 := *v
	yyh4761, yyl4761 := z.DecSliceHelperStart()
	var yyc4761 bool
	if yyl4761 == 0 {
		if yyv4761 == nil {
			yyv4761 = []Namespace{}
			yyc4761 = true
		} else if len(yyv4761) != 0 {
			yyv4761 = yyv4761[:0]
			yyc4761 = true
		}
	} else if yyl4761 > 0 {
		var yyrr4761, yyrl4761 int
		var yyrt4761 bool
		if yyl4761 > cap(yyv4761) {

			yyrg4761 := len(yyv4761) > 0
			yyv24761 := yyv4761
			yyrl4761, yyrt4761 = z.DecInferLen(yyl4761, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4761 {
				if yyrl4761 <= cap(yyv4761) {
					yyv4761 = yyv4761[:yyrl4761]
				} else {
					yyv4761 = make([]Namespace, yyrl4761)
				}
			} else {
				yyv4761 = make([]Namespace, yyrl4761)
			}
			yyc4761 = true
			yyrr4761 = len(yyv4761)
			if yyrg4761 {
				copy(yyv4761, yyv24761)
			}
		} else if yyl4761 != len(yyv4761) {
			yyv4761 = yyv4761[:yyl4761]
			yyc4761 = true
		}
		yyj4761 := 0
		for ; yyj4761 < yyrr4761; yyj4761++ {
			yyh4761.ElemContainerState(yyj4761)
			if r.TryDecodeAsNil() {
				yyv4761[yyj4761] = Namespace{}
			} else {
				yyv4762 := &yyv4761[yyj4761]
				yyv4762.CodecDecodeSelf(d)
			}

		}
		if yyrt4761 {
			for ; yyj4761 < yyl4761; yyj4761++ {
				yyv4761 = append(yyv4761, Namespace{})
				yyh4761.ElemContainerState(yyj4761)
				if r.TryDecodeAsNil() {
					yyv4761[yyj4761] = Namespace{}
				} else {
					yyv4763 := &yyv4761[yyj4761]
					yyv4763.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4761 := 0
		for ; !r.CheckBreak(); yyj4761++ {

			if yyj4761 >= len(yyv4761) {
				yyv4761 = append(yyv4761, Namespace{}) // var yyz4761 Namespace
				yyc4761 = true
			}
			yyh4761.ElemContainerState(yyj4761)
			if yyj4761 < len(yyv4761) {
				if r.TryDecodeAsNil() {
					yyv4761[yyj4761] = Namespace{}
				} else {
					yyv4764 := &yyv4761[yyj4761]
					yyv4764.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4761 < len(yyv4761) {
			yyv4761 = yyv4761[:yyj4761]
			yyc4761 = true
		} else if yyj4761 == 0 && yyv4761 == nil {
			yyv4761 = []Namespace{}
			yyc4761 = true
		}
	}
	yyh4761.End()
	if yyc4761 {
		*v = yyv4761
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4765 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4766 := &yyv4765
		yy4766.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4767 := *v
	yyh4767, yyl4767 := z.DecSliceHelperStart()
	var yyc4767 bool
	if yyl4767 == 0 {
		if yyv4767 == nil {
			yyv4767 = []Event{}
			yyc4767 = true
		} else if len(yyv4767) != 0 {
			yyv4767 = yyv4767[:0]
			yyc4767 = true
		}
	} else if yyl4767 > 0 {
		var yyrr4767, yyrl4767 int
		var yyrt4767 bool
		if yyl4767 > cap(yyv4767) {

			yyrg4767 := len(yyv4767) > 0
			yyv24767 := yyv4767
			yyrl4767, yyrt4767 = z.DecInferLen(yyl4767, z.DecBasicHandle().MaxInitLen, 488)
			if yyrt4767 {
				if yyrl4767 <= cap(yyv4767) {
					yyv4767 = yyv4767[:yyrl4767]
				} else {
					yyv4767 = make([]Event, yyrl4767)
				}
			} else {
				yyv4767 = make([]Event, yyrl4767)
			}
			yyc4767 = true
			yyrr4767 = len(yyv4767)
			if yyrg4767 {
				copy(yyv4767, yyv24767)
			}
		} else if yyl4767 != len(yyv4767) {
			yyv4767 = yyv4767[:yyl4767]
			yyc4767 = true
		}
		yyj4767 := 0
		for ; yyj4767 < yyrr4767; yyj4767++ {
			yyh4767.ElemContainerState(yyj4767)
			if r.TryDecodeAsNil() {
				yyv4767[yyj4767] = Event{}
			} else {
				yyv4768 := &yyv4767[yyj4767]
				yyv4768.CodecDecodeSelf(d)
			}

		}
		if yyrt4767 {
			for ; yyj4767 < yyl4767; yyj4767++ {
				yyv4767 = append(yyv4767, Event{})
				yyh4767.ElemContainerState(yyj4767)
				if r.TryDecodeAsNil() {
					yyv4767[yyj4767] = Event{}
				} else {
					yyv4769 := &yyv4767[yyj4767]
					yyv4769.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4767 := 0
		for ; !r.CheckBreak(); yyj4767++ {

			if yyj4767 >= len(yyv4767) {
				yyv4767 = append(yyv4767, Event{}) // var yyz4767 Event
				yyc4767 = true
			}
			yyh4767.ElemContainerState(yyj4767)
			if yyj4767 < len(yyv4767) {
				if r.TryDecodeAsNil() {
					yyv4767[yyj4767] = Event{}
				} else {
					yyv4770 := &yyv4767[yyj4767]
					yyv4770.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4767 < len(yyv4767) {
			yyv4767 = yyv4767[:yyj4767]
			yyc4767 = true
		} else if yyj4767 == 0 && yyv4767 == nil {
			yyv4767 = []Event{}
			yyc4767 = true
		}
	}
	yyh4767.End()
	if yyc4767 {
		*v = yyv4767
	}
}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg5_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4771 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4772 := &yyv4771
		yym4773 := z.EncBinary()
		_ = yym4773
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4772) {
		} else if !yym4773 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4772)
		} else {
			z.EncFallback(yy4772)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg5_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4774 := *v
	yyh4774, yyl4774 := z.DecSliceHelperStart()
	var yyc4774 bool
	if yyl4774 == 0 {
		if yyv4774 == nil {
			yyv4774 = []pkg5_runtime.RawExtension{}
			yyc4774 = true
		} else if len(yyv4774) != 0 {
			yyv4774 = yyv4774[:0]
			yyc4774 = true
		}
	} else if yyl4774 > 0 {
		var yyrr4774, yyrl4774 int
		var yyrt4774 bool
		if yyl4774 > cap(yyv4774) {

			yyrg4774 := len(yyv4774) > 0
			yyv24774 := yyv4774
			yyrl4774, yyrt4774 = z.DecInferLen(yyl4774, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4774 {
				if yyrl4774 <= cap(yyv4774) {
					yyv4774 = yyv4774[:yyrl4774]
				} else {
					yyv4774 = make([]pkg5_runtime.RawExtension, yyrl4774)
				}
			} else {
				yyv4774 = make([]pkg5_runtime.RawExtension, yyrl4774)
			}
			yyc4774 = true
			yyrr4774 = len(yyv4774)
			if yyrg4774 {
				copy(yyv4774, yyv24774)
			}
		} else if yyl4774 != len(yyv4774) {
			yyv4774 = yyv4774[:yyl4774]
			yyc4774 = true
		}
		yyj4774 := 0
		for ; yyj4774 < yyrr4774; yyj4774++ {
			yyh4774.ElemContainerState(yyj4774)
			if r.TryDecodeAsNil() {
				yyv4774[yyj4774] = pkg5_runtime.RawExtension{}
			} else {
				yyv4775 := &yyv4774[yyj4774]
				yym4776 := z.DecBinary()
				_ = yym4776
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4775) {
				} else if !yym4776 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4775)
				} else {
					z.DecFallback(yyv4775, false)
				}
			}

		}
		if yyrt4774 {
			for ; yyj4774 < yyl4774; yyj4774++ {
				yyv4774 = append(yyv4774, pkg5_runtime.RawExtension{})
				yyh4774.ElemContainerState(yyj4774)
				if r.TryDecodeAsNil() {
					yyv4774[yyj4774] = pkg5_runtime.RawExtension{}
				} else {
					yyv4777 := &yyv4774[yyj4774]
					yym4778 := z.DecBinary()
					_ = yym4778
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4777) {
					} else if !yym4778 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4777)
					} else {
						z.DecFallback(yyv4777, false)
					}
				}

			}
		}

	} else {
		yyj4774 := 0
		for ; !r.CheckBreak(); yyj4774++ {

			if yyj4774 >= len(yyv4774) {
				yyv4774 = append(yyv4774, pkg5_runtime.RawExtension{}) // var yyz4774 pkg5_runtime.RawExtension
				yyc4774 = true
			}
			yyh4774.ElemContainerState(yyj4774)
			if yyj4774 < len(yyv4774) {
				if r.TryDecodeAsNil() {
					yyv4774[yyj4774] = pkg5_runtime.RawExtension{}
				} else {
					yyv4779 := &yyv4774[yyj4774]
					yym4780 := z.DecBinary()
					_ = yym4780
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4779) {
					} else if !yym4780 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4779)
					} else {
						z.DecFallback(yyv4779, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4774 < len(yyv4774) {
			yyv4774 = yyv4774[:yyj4774]
			yyc4774 = true
		} else if yyj4774 == 0 && yyv4774 == nil {
			yyv4774 = []pkg5_runtime.RawExtension{}
			yyc4774 = true
		}
	}
	yyh4774.End()
	if yyc4774 {
		*v = yyv4774
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4781 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4782 := &yyv4781
		yy4782.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4783 := *v
	yyh4783, yyl4783 := z.DecSliceHelperStart()
	var yyc4783 bool
	if yyl4783 == 0 {
		if yyv4783 == nil {
			yyv4783 = []LimitRangeItem{}
			yyc4783 = true
		} else if len(yyv4783) != 0 {
			yyv4783 = yyv4783[:0]
			yyc4783 = true
		}
	} else if yyl4783 > 0 {
		var yyrr4783, yyrl4783 int
		var yyrt4783 bool
		if yyl4783 > cap(yyv4783) {

			yyrg4783 := len(yyv4783) > 0
			yyv24783 := yyv4783
			yyrl4783, yyrt4783 = z.DecInferLen(yyl4783, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4783 {
				if yyrl4783 <= cap(yyv4783) {
					yyv4783 = yyv4783[:yyrl4783]
				} else {
					yyv4783 = make([]LimitRangeItem, yyrl4783)
				}
			} else {
				yyv4783 = make([]LimitRangeItem, yyrl4783)
			}
			yyc4783 = true
			yyrr4783 = len(yyv4783)
			if yyrg4783 {
				copy(yyv4783, yyv24783)
			}
		} else if yyl4783 != len(yyv4783) {
			yyv4783 = yyv4783[:yyl4783]
			yyc4783 = true
		}
		yyj4783 := 0
		for ; yyj4783 < yyrr4783; yyj4783++ {
			yyh4783.ElemContainerState(yyj4783)
			if r.TryDecodeAsNil() {
				yyv4783[yyj4783] = LimitRangeItem{}
			} else {
				yyv4784 := &yyv4783[yyj4783]
				yyv4784.CodecDecodeSelf(d)
			}

		}
		if yyrt4783 {
			for ; yyj4783 < yyl4783; yyj4783++ {
				yyv4783 = append(yyv4783, LimitRangeItem{})
				yyh4783.ElemContainerState(yyj4783)
				if r.TryDecodeAsNil() {
					yyv4783[yyj4783] = LimitRangeItem{}
				} else {
					yyv4785 := &yyv4783[yyj4783]
					yyv4785.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4783 := 0
		for ; !r.CheckBreak(); yyj4783++ {

			if yyj4783 >= len(yyv4783) {
				yyv4783 = append(yyv4783, LimitRangeItem{}) // var yyz4783 LimitRangeItem
				yyc4783 = true
			}
			yyh4783.ElemContainerState(yyj4783)
			if yyj4783 < len(yyv4783) {
				if r.TryDecodeAsNil() {
					yyv4783[yyj4783] = LimitRangeItem{}
				} else {
					yyv4786 := &yyv4783[yyj4783]
					yyv4786.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4783 < len(yyv4783) {
			yyv4783 = yyv4783[:yyj4783]
			yyc4783 = true
		} else if yyj4783 == 0 && yyv4783 == nil {
			yyv4783 = []LimitRangeItem{}
			yyc4783 = true
		}
	}
	yyh4783.End()
	if yyc4783 {
		*v = yyv4783
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4787 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4788 := &yyv4787
		yy4788.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4789 := *v
	yyh4789, yyl4789 := z.DecSliceHelperStart()
	var yyc4789 bool
	if yyl4789 == 0 {
		if yyv4789 == nil {
			yyv4789 = []LimitRange{}
			yyc4789 = true
		} else if len(yyv4789) != 0 {
			yyv4789 = yyv4789[:0]
			yyc4789 = true
		}
	} else if yyl4789 > 0 {
		var yyrr4789, yyrl4789 int
		var yyrt4789 bool
		if yyl4789 > cap(yyv4789) {

			yyrg4789 := len(yyv4789) > 0
			yyv24789 := yyv4789
			yyrl4789, yyrt4789 = z.DecInferLen(yyl4789, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4789 {
				if yyrl4789 <= cap(yyv4789) {
					yyv4789 = yyv4789[:yyrl4789]
				} else {
					yyv4789 = make([]LimitRange, yyrl4789)
				}
			} else {
				yyv4789 = make([]LimitRange, yyrl4789)
			}
			yyc4789 = true
			yyrr4789 = len(yyv4789)
			if yyrg4789 {
				copy(yyv4789, yyv24789)
			}
		} else if yyl4789 != len(yyv4789) {
			yyv4789 = yyv4789[:yyl4789]
			yyc4789 = true
		}
		yyj4789 := 0
		for ; yyj4789 < yyrr4789; yyj4789++ {
			yyh4789.ElemContainerState(yyj4789)
			if r.TryDecodeAsNil() {
				yyv4789[yyj4789] = LimitRange{}
			} else {
				yyv4790 := &yyv4789[yyj4789]
				yyv4790.CodecDecodeSelf(d)
			}

		}
		if yyrt4789 {
			for ; yyj4789 < yyl4789; yyj4789++ {
				yyv4789 = append(yyv4789, LimitRange{})
				yyh4789.ElemContainerState(yyj4789)
				if r.TryDecodeAsNil() {
					yyv4789[yyj4789] = LimitRange{}
				} else {
					yyv4791 := &yyv4789[yyj4789]
					yyv4791.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4789 := 0
		for ; !r.CheckBreak(); yyj4789++ {

			if yyj4789 >= len(yyv4789) {
				yyv4789 = append(yyv4789, LimitRange{}) // var yyz4789 LimitRange
				yyc4789 = true
			}
			yyh4789.ElemContainerState(yyj4789)
			if yyj4789 < len(yyv4789) {
				if r.TryDecodeAsNil() {
					yyv4789[yyj4789] = LimitRange{}
				} else {
					yyv4792 := &yyv4789[yyj4789]
					yyv4792.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4789 < len(yyv4789) {
			yyv4789 = yyv4789[:yyj4789]
			yyc4789 = true
		} else if yyj4789 == 0 && yyv4789 == nil {
			yyv4789 = []LimitRange{}
			yyc4789 = true
		}
	}
	yyh4789.End()
	if yyc4789 {
		*v = yyv4789
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4793 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4793.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4794 := *v
	yyh4794, yyl4794 := z.DecSliceHelperStart()
	var yyc4794 bool
	if yyl4794 == 0 {
		if yyv4794 == nil {
			yyv4794 = []ResourceQuotaScope{}
			yyc4794 = true
		} else if len(yyv4794) != 0 {
			yyv4794 = yyv4794[:0]
			yyc4794 = true
		}
	} else if yyl4794 > 0 {
		var yyrr4794, yyrl4794 int
		var yyrt4794 bool
		if yyl4794 > cap(yyv4794) {

			yyrl4794, yyrt4794 = z.DecInferLen(yyl4794, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4794 {
				if yyrl4794 <= cap(yyv4794) {
					yyv4794 = yyv4794[:yyrl4794]
				} else {
					yyv4794 = make([]ResourceQuotaScope, yyrl4794)
				}
			} else {
				yyv4794 = make([]ResourceQuotaScope, yyrl4794)
			}
			yyc4794 = true
			yyrr4794 = len(yyv4794)
		} else if yyl4794 != len(yyv4794) {
			yyv4794 = yyv4794[:yyl4794]
			yyc4794 = true
		}
		yyj4794 := 0
		for ; yyj4794 < yyrr4794; yyj4794++ {
			yyh4794.ElemContainerState(yyj4794)
			if r.TryDecodeAsNil() {
				yyv4794[yyj4794] = ""
			} else {
				yyv4794[yyj4794] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4794 {
			for ; yyj4794 < yyl4794; yyj4794++ {
				yyv4794 = append(yyv4794, "")
				yyh4794.ElemContainerState(yyj4794)
				if r.TryDecodeAsNil() {
					yyv4794[yyj4794] = ""
				} else {
					yyv4794[yyj4794] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4794 := 0
		for ; !r.CheckBreak(); yyj4794++ {

			if yyj4794 >= len(yyv4794) {
				yyv4794 = append(yyv4794, "") // var yyz4794 ResourceQuotaScope
				yyc4794 = true
			}
			yyh4794.ElemContainerState(yyj4794)
			if yyj4794 < len(yyv4794) {
				if r.TryDecodeAsNil() {
					yyv4794[yyj4794] = ""
				} else {
					yyv4794[yyj4794] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4794 < len(yyv4794) {
			yyv4794 = yyv4794[:yyj4794]
			yyc4794 = true
		} else if yyj4794 == 0 && yyv4794 == nil {
			yyv4794 = []ResourceQuotaScope{}
			yyc4794 = true
		}
	}
	yyh4794.End()
	if yyc4794 {
		*v = yyv4794
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4798 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4799 := &yyv4798
		yy4799.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4800 := *v
	yyh4800, yyl4800 := z.DecSliceHelperStart()
	var yyc4800 bool
	if yyl4800 == 0 {
		if yyv4800 == nil {
			yyv4800 = []ResourceQuota{}
			yyc4800 = true
		} else if len(yyv4800) != 0 {
			yyv4800 = yyv4800[:0]
			yyc4800 = true
		}
	} else if yyl4800 > 0 {
		var yyrr4800, yyrl4800 int
		var yyrt4800 bool
		if yyl4800 > cap(yyv4800) {

			yyrg4800 := len(yyv4800) > 0
			yyv24800 := yyv4800
			yyrl4800, yyrt4800 = z.DecInferLen(yyl4800, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4800 {
				if yyrl4800 <= cap(yyv4800) {
					yyv4800 = yyv4800[:yyrl4800]
				} else {
					yyv4800 = make([]ResourceQuota, yyrl4800)
				}
			} else {
				yyv4800 = make([]ResourceQuota, yyrl4800)
			}
			yyc4800 = true
			yyrr4800 = len(yyv4800)
			if yyrg4800 {
				copy(yyv4800, yyv24800)
			}
		} else if yyl4800 != len(yyv4800) {
			yyv4800 = yyv4800[:yyl4800]
			yyc4800 = true
		}
		yyj4800 := 0
		for ; yyj4800 < yyrr4800; yyj4800++ {
			yyh4800.ElemContainerState(yyj4800)
			if r.TryDecodeAsNil() {
				yyv4800[yyj4800] = ResourceQuota{}
			} else {
				yyv4801 := &yyv4800[yyj4800]
				yyv4801.CodecDecodeSelf(d)
			}

		}
		if yyrt4800 {
			for ; yyj4800 < yyl4800; yyj4800++ {
				yyv4800 = append(yyv4800, ResourceQuota{})
				yyh4800.ElemContainerState(yyj4800)
				if r.TryDecodeAsNil() {
					yyv4800[yyj4800] = ResourceQuota{}
				} else {
					yyv4802 := &yyv4800[yyj4800]
					yyv4802.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4800 := 0
		for ; !r.CheckBreak(); yyj4800++ {

			if yyj4800 >= len(yyv4800) {
				yyv4800 = append(yyv4800, ResourceQuota{}) // var yyz4800 ResourceQuota
				yyc4800 = true
			}
			yyh4800.ElemContainerState(yyj4800)
			if yyj4800 < len(yyv4800) {
				if r.TryDecodeAsNil() {
					yyv4800[yyj4800] = ResourceQuota{}
				} else {
					yyv4803 := &yyv4800[yyj4800]
					yyv4803.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4800 < len(yyv4800) {
			yyv4800 = yyv4800[:yyj4800]
			yyc4800 = true
		} else if yyj4800 == 0 && yyv4800 == nil {
			yyv4800 = []ResourceQuota{}
			yyc4800 = true
		}
	}
	yyh4800.End()
	if yyc4800 {
		*v = yyv4800
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4804, yyv4804 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4805 := z.EncBinary()
		_ = yym4805
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4804))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4804 == nil {
			r.EncodeNil()
		} else {
			yym4806 := z.EncBinary()
			_ = yym4806
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4804))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4807 := *v
	yyl4807 := r.ReadMapStart()
	yybh4807 := z.DecBasicHandle()
	if yyv4807 == nil {
		yyrl4807, _ := z.DecInferLen(yyl4807, yybh4807.MaxInitLen, 40)
		yyv4807 = make(map[string][]uint8, yyrl4807)
		*v = yyv4807
	}
	var yymk4807 string
	var yymv4807 []uint8
	var yymg4807 bool
	if yybh4807.MapValueReset {
		yymg4807 = true
	}
	if yyl4807 > 0 {
		for yyj4807 := 0; yyj4807 < yyl4807; yyj4807++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4807 = ""
			} else {
				yymk4807 = string(r.DecodeString())
			}

			if yymg4807 {
				yymv4807 = yyv4807[yymk4807]
			} else {
				yymv4807 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4807 = nil
			} else {
				yyv4809 := &yymv4807
				yym4810 := z.DecBinary()
				_ = yym4810
				if false {
				} else {
					*yyv4809 = r.DecodeBytes(*(*[]byte)(yyv4809), false, false)
				}
			}

			if yyv4807 != nil {
				yyv4807[yymk4807] = yymv4807
			}
		}
	} else if yyl4807 < 0 {
		for yyj4807 := 0; !r.CheckBreak(); yyj4807++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4807 = ""
			} else {
				yymk4807 = string(r.DecodeString())
			}

			if yymg4807 {
				yymv4807 = yyv4807[yymk4807]
			} else {
				yymv4807 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4807 = nil
			} else {
				yyv4812 := &yymv4807
				yym4813 := z.DecBinary()
				_ = yym4813
				if false {
				} else {
					*yyv4812 = r.DecodeBytes(*(*[]byte)(yyv4812), false, false)
				}
			}

			if yyv4807 != nil {
				yyv4807[yymk4807] = yymv4807
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4814 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4815 := &yyv4814
		yy4815.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4816 := *v
	yyh4816, yyl4816 := z.DecSliceHelperStart()
	var yyc4816 bool
	if yyl4816 == 0 {
		if yyv4816 == nil {
			yyv4816 = []Secret{}
			yyc4816 = true
		} else if len(yyv4816) != 0 {
			yyv4816 = yyv4816[:0]
			yyc4816 = true
		}
	} else if yyl4816 > 0 {
		var yyrr4816, yyrl4816 int
		var yyrt4816 bool
		if yyl4816 > cap(yyv4816) {

			yyrg4816 := len(yyv4816) > 0
			yyv24816 := yyv4816
			yyrl4816, yyrt4816 = z.DecInferLen(yyl4816, z.DecBasicHandle().MaxInitLen, 272)
			if yyrt4816 {
				if yyrl4816 <= cap(yyv4816) {
					yyv4816 = yyv4816[:yyrl4816]
				} else {
					yyv4816 = make([]Secret, yyrl4816)
				}
			} else {
				yyv4816 = make([]Secret, yyrl4816)
			}
			yyc4816 = true
			yyrr4816 = len(yyv4816)
			if yyrg4816 {
				copy(yyv4816, yyv24816)
			}
		} else if yyl4816 != len(yyv4816) {
			yyv4816 = yyv4816[:yyl4816]
			yyc4816 = true
		}
		yyj4816 := 0
		for ; yyj4816 < yyrr4816; yyj4816++ {
			yyh4816.ElemContainerState(yyj4816)
			if r.TryDecodeAsNil() {
				yyv4816[yyj4816] = Secret{}
			} else {
				yyv4817 := &yyv4816[yyj4816]
				yyv4817.CodecDecodeSelf(d)
			}

		}
		if yyrt4816 {
			for ; yyj4816 < yyl4816; yyj4816++ {
				yyv4816 = append(yyv4816, Secret{})
				yyh4816.ElemContainerState(yyj4816)
				if r.TryDecodeAsNil() {
					yyv4816[yyj4816] = Secret{}
				} else {
					yyv4818 := &yyv4816[yyj4816]
					yyv4818.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4816 := 0
		for ; !r.CheckBreak(); yyj4816++ {

			if yyj4816 >= len(yyv4816) {
				yyv4816 = append(yyv4816, Secret{}) // var yyz4816 Secret
				yyc4816 = true
			}
			yyh4816.ElemContainerState(yyj4816)
			if yyj4816 < len(yyv4816) {
				if r.TryDecodeAsNil() {
					yyv4816[yyj4816] = Secret{}
				} else {
					yyv4819 := &yyv4816[yyj4816]
					yyv4819.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4816 < len(yyv4816) {
			yyv4816 = yyv4816[:yyj4816]
			yyc4816 = true
		} else if yyj4816 == 0 && yyv4816 == nil {
			yyv4816 = []Secret{}
			yyc4816 = true
		}
	}
	yyh4816.End()
	if yyc4816 {
		*v = yyv4816
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4820 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4821 := &yyv4820
		yy4821.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4822 := *v
	yyh4822, yyl4822 := z.DecSliceHelperStart()
	var yyc4822 bool
	if yyl4822 == 0 {
		if yyv4822 == nil {
			yyv4822 = []ConfigMap{}
			yyc4822 = true
		} else if len(yyv4822) != 0 {
			yyv4822 = yyv4822[:0]
			yyc4822 = true
		}
	} else if yyl4822 > 0 {
		var yyrr4822, yyrl4822 int
		var yyrt4822 bool
		if yyl4822 > cap(yyv4822) {

			yyrg4822 := len(yyv4822) > 0
			yyv24822 := yyv4822
			yyrl4822, yyrt4822 = z.DecInferLen(yyl4822, z.DecBasicHandle().MaxInitLen, 248)
			if yyrt4822 {
				if yyrl4822 <= cap(yyv4822) {
					yyv4822 = yyv4822[:yyrl4822]
				} else {
					yyv4822 = make([]ConfigMap, yyrl4822)
				}
			} else {
				yyv4822 = make([]ConfigMap, yyrl4822)
			}
			yyc4822 = true
			yyrr4822 = len(yyv4822)
			if yyrg4822 {
				copy(yyv4822, yyv24822)
			}
		} else if yyl4822 != len(yyv4822) {
			yyv4822 = yyv4822[:yyl4822]
			yyc4822 = true
		}
		yyj4822 := 0
		for ; yyj4822 < yyrr4822; yyj4822++ {
			yyh4822.ElemContainerState(yyj4822)
			if r.TryDecodeAsNil() {
				yyv4822[yyj4822] = ConfigMap{}
			} else {
				yyv4823 := &yyv4822[yyj4822]
				yyv4823.CodecDecodeSelf(d)
			}

		}
		if yyrt4822 {
			for ; yyj4822 < yyl4822; yyj4822++ {
				yyv4822 = append(yyv4822, ConfigMap{})
				yyh4822.ElemContainerState(yyj4822)
				if r.TryDecodeAsNil() {
					yyv4822[yyj4822] = ConfigMap{}
				} else {
					yyv4824 := &yyv4822[yyj4822]
					yyv4824.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4822 := 0
		for ; !r.CheckBreak(); yyj4822++ {

			if yyj4822 >= len(yyv4822) {
				yyv4822 = append(yyv4822, ConfigMap{}) // var yyz4822 ConfigMap
				yyc4822 = true
			}
			yyh4822.ElemContainerState(yyj4822)
			if yyj4822 < len(yyv4822) {
				if r.TryDecodeAsNil() {
					yyv4822[yyj4822] = ConfigMap{}
				} else {
					yyv4825 := &yyv4822[yyj4822]
					yyv4825.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4822 < len(yyv4822) {
			yyv4822 = yyv4822[:yyj4822]
			yyc4822 = true
		} else if yyj4822 == 0 && yyv4822 == nil {
			yyv4822 = []ConfigMap{}
			yyc4822 = true
		}
	}
	yyh4822.End()
	if yyc4822 {
		*v = yyv4822
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4826 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4827 := &yyv4826
		yy4827.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4828 := *v
	yyh4828, yyl4828 := z.DecSliceHelperStart()
	var yyc4828 bool
	if yyl4828 == 0 {
		if yyv4828 == nil {
			yyv4828 = []ComponentCondition{}
			yyc4828 = true
		} else if len(yyv4828) != 0 {
			yyv4828 = yyv4828[:0]
			yyc4828 = true
		}
	} else if yyl4828 > 0 {
		var yyrr4828, yyrl4828 int
		var yyrt4828 bool
		if yyl4828 > cap(yyv4828) {

			yyrg4828 := len(yyv4828) > 0
			yyv24828 := yyv4828
			yyrl4828, yyrt4828 = z.DecInferLen(yyl4828, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4828 {
				if yyrl4828 <= cap(yyv4828) {
					yyv4828 = yyv4828[:yyrl4828]
				} else {
					yyv4828 = make([]ComponentCondition, yyrl4828)
				}
			} else {
				yyv4828 = make([]ComponentCondition, yyrl4828)
			}
			yyc4828 = true
			yyrr4828 = len(yyv4828)
			if yyrg4828 {
				copy(yyv4828, yyv24828)
			}
		} else if yyl4828 != len(yyv4828) {
			yyv4828 = yyv4828[:yyl4828]
			yyc4828 = true
		}
		yyj4828 := 0
		for ; yyj4828 < yyrr4828; yyj4828++ {
			yyh4828.ElemContainerState(yyj4828)
			if r.TryDecodeAsNil() {
				yyv4828[yyj4828] = ComponentCondition{}
			} else {
				yyv4829 := &yyv4828[yyj4828]
				yyv4829.CodecDecodeSelf(d)
			}

		}
		if yyrt4828 {
			for ; yyj4828 < yyl4828; yyj4828++ {
				yyv4828 = append(yyv4828, ComponentCondition{})
				yyh4828.ElemContainerState(yyj4828)
				if r.TryDecodeAsNil() {
					yyv4828[yyj4828] = ComponentCondition{}
				} else {
					yyv4830 := &yyv4828[yyj4828]
					yyv4830.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4828 := 0
		for ; !r.CheckBreak(); yyj4828++ {

			if yyj4828 >= len(yyv4828) {
				yyv4828 = append(yyv4828, ComponentCondition{}) // var yyz4828 ComponentCondition
				yyc4828 = true
			}
			yyh4828.ElemContainerState(yyj4828)
			if yyj4828 < len(yyv4828) {
				if r.TryDecodeAsNil() {
					yyv4828[yyj4828] = ComponentCondition{}
				} else {
					yyv4831 := &yyv4828[yyj4828]
					yyv4831.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4828 < len(yyv4828) {
			yyv4828 = yyv4828[:yyj4828]
			yyc4828 = true
		} else if yyj4828 == 0 && yyv4828 == nil {
			yyv4828 = []ComponentCondition{}
			yyc4828 = true
		}
	}
	yyh4828.End()
	if yyc4828 {
		*v = yyv4828
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4832 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4833 := &yyv4832
		yy4833.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4834 := *v
	yyh4834, yyl4834 := z.DecSliceHelperStart()
	var yyc4834 bool
	if yyl4834 == 0 {
		if yyv4834 == nil {
			yyv4834 = []ComponentStatus{}
			yyc4834 = true
		} else if len(yyv4834) != 0 {
			yyv4834 = yyv4834[:0]
			yyc4834 = true
		}
	} else if yyl4834 > 0 {
		var yyrr4834, yyrl4834 int
		var yyrt4834 bool
		if yyl4834 > cap(yyv4834) {

			yyrg4834 := len(yyv4834) > 0
			yyv24834 := yyv4834
			yyrl4834, yyrt4834 = z.DecInferLen(yyl4834, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4834 {
				if yyrl4834 <= cap(yyv4834) {
					yyv4834 = yyv4834[:yyrl4834]
				} else {
					yyv4834 = make([]ComponentStatus, yyrl4834)
				}
			} else {
				yyv4834 = make([]ComponentStatus, yyrl4834)
			}
			yyc4834 = true
			yyrr4834 = len(yyv4834)
			if yyrg4834 {
				copy(yyv4834, yyv24834)
			}
		} else if yyl4834 != len(yyv4834) {
			yyv4834 = yyv4834[:yyl4834]
			yyc4834 = true
		}
		yyj4834 := 0
		for ; yyj4834 < yyrr4834; yyj4834++ {
			yyh4834.ElemContainerState(yyj4834)
			if r.TryDecodeAsNil() {
				yyv4834[yyj4834] = ComponentStatus{}
			} else {
				yyv4835 := &yyv4834[yyj4834]
				yyv4835.CodecDecodeSelf(d)
			}

		}
		if yyrt4834 {
			for ; yyj4834 < yyl4834; yyj4834++ {
				yyv4834 = append(yyv4834, ComponentStatus{})
				yyh4834.ElemContainerState(yyj4834)
				if r.TryDecodeAsNil() {
					yyv4834[yyj4834] = ComponentStatus{}
				} else {
					yyv4836 := &yyv4834[yyj4834]
					yyv4836.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4834 := 0
		for ; !r.CheckBreak(); yyj4834++ {

			if yyj4834 >= len(yyv4834) {
				yyv4834 = append(yyv4834, ComponentStatus{}) // var yyz4834 ComponentStatus
				yyc4834 = true
			}
			yyh4834.ElemContainerState(yyj4834)
			if yyj4834 < len(yyv4834) {
				if r.TryDecodeAsNil() {
					yyv4834[yyj4834] = ComponentStatus{}
				} else {
					yyv4837 := &yyv4834[yyj4834]
					yyv4837.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4834 < len(yyv4834) {
			yyv4834 = yyv4834[:yyj4834]
			yyc4834 = true
		} else if yyj4834 == 0 && yyv4834 == nil {
			yyv4834 = []ComponentStatus{}
			yyc4834 = true
		}
	}
	yyh4834.End()
	if yyc4834 {
		*v = yyv4834
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4838 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4839 := &yyv4838
		yy4839.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4840 := *v
	yyh4840, yyl4840 := z.DecSliceHelperStart()
	var yyc4840 bool
	if yyl4840 == 0 {
		if yyv4840 == nil {
			yyv4840 = []DownwardAPIVolumeFile{}
			yyc4840 = true
		} else if len(yyv4840) != 0 {
			yyv4840 = yyv4840[:0]
			yyc4840 = true
		}
	} else if yyl4840 > 0 {
		var yyrr4840, yyrl4840 int
		var yyrt4840 bool
		if yyl4840 > cap(yyv4840) {

			yyrg4840 := len(yyv4840) > 0
			yyv24840 := yyv4840
			yyrl4840, yyrt4840 = z.DecInferLen(yyl4840, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4840 {
				if yyrl4840 <= cap(yyv4840) {
					yyv4840 = yyv4840[:yyrl4840]
				} else {
					yyv4840 = make([]DownwardAPIVolumeFile, yyrl4840)
				}
			} else {
				yyv4840 = make([]DownwardAPIVolumeFile, yyrl4840)
			}
			yyc4840 = true
			yyrr4840 = len(yyv4840)
			if yyrg4840 {
				copy(yyv4840, yyv24840)
			}
		} else if yyl4840 != len(yyv4840) {
			yyv4840 = yyv4840[:yyl4840]
			yyc4840 = true
		}
		yyj4840 := 0
		for ; yyj4840 < yyrr4840; yyj4840++ {
			yyh4840.ElemContainerState(yyj4840)
			if r.TryDecodeAsNil() {
				yyv4840[yyj4840] = DownwardAPIVolumeFile{}
			} else {
				yyv4841 := &yyv4840[yyj4840]
				yyv4841.CodecDecodeSelf(d)
			}

		}
		if yyrt4840 {
			for ; yyj4840 < yyl4840; yyj4840++ {
				yyv4840 = append(yyv4840, DownwardAPIVolumeFile{})
				yyh4840.ElemContainerState(yyj4840)
				if r.TryDecodeAsNil() {
					yyv4840[yyj4840] = DownwardAPIVolumeFile{}
				} else {
					yyv4842 := &yyv4840[yyj4840]
					yyv4842.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4840 := 0
		for ; !r.CheckBreak(); yyj4840++ {

			if yyj4840 >= len(yyv4840) {
				yyv4840 = append(yyv4840, DownwardAPIVolumeFile{}) // var yyz4840 DownwardAPIVolumeFile
				yyc4840 = true
			}
			yyh4840.ElemContainerState(yyj4840)
			if yyj4840 < len(yyv4840) {
				if r.TryDecodeAsNil() {
					yyv4840[yyj4840] = DownwardAPIVolumeFile{}
				} else {
					yyv4843 := &yyv4840[yyj4840]
					yyv4843.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4840 < len(yyv4840) {
			yyv4840 = yyv4840[:yyj4840]
			yyc4840 = true
		} else if yyj4840 == 0 && yyv4840 == nil {
			yyv4840 = []DownwardAPIVolumeFile{}
			yyc4840 = true
		}
	}
	yyh4840.End()
	if yyc4840 {
		*v = yyv4840
	}
}
