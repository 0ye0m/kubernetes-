/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_fields "k8s.io/kubernetes/pkg/fields"
	pkg5_labels "k8s.io/kubernetes/pkg/labels"
	pkg7_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_fields.Selector
		var v3 pkg5_labels.Selector
		var v4 pkg7_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg4_intstr.IntOrString
		var v7 time.Time
		_, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [14]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(14)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym49 := z.DecBinary()
	_ = yym49
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct50 := r.ContainerType()
		if yyct50 == codecSelferValueTypeMap1234 {
			yyl50 := r.ReadMapStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl50, d)
			}
		} else if yyct50 == codecSelferValueTypeArray1234 {
			yyl50 := r.ReadArrayStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl50, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys51Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys51Slc
	var yyhl51 bool = l >= 0
	for yyj51 := 0; ; yyj51++ {
		if yyhl51 {
			if yyj51 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys51Slc = r.DecodeBytes(yys51Slc, true, true)
		yys51 := string(yys51Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys51 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv59 := &x.CreationTimestamp
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv59) {
				} else if yym60 {
					z.DecBinaryUnmarshal(yyv59)
				} else if !yym60 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv59)
				} else {
					z.DecFallback(yyv59, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym62 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym62 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym64 := z.DecBinary()
				_ = yym64
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv65 := &x.Labels
				yym66 := z.DecBinary()
				_ = yym66
				if false {
				} else {
					z.F.DecMapStringStringX(yyv65, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv67 := &x.Annotations
				yym68 := z.DecBinary()
				_ = yym68
				if false {
				} else {
					z.F.DecMapStringStringX(yyv67, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv69 := &x.OwnerReferences
				yym70 := z.DecBinary()
				_ = yym70
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv69), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv71 := &x.Finalizers
				yym72 := z.DecBinary()
				_ = yym72
				if false {
				} else {
					z.F.DecSliceStringX(yyv71, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys51)
		} // end switch yys51
	} // end for yyj51
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj73 int
	var yyb73 bool
	var yyhl73 bool = l >= 0
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv81 := &x.CreationTimestamp
		yym82 := z.DecBinary()
		_ = yym82
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv81) {
		} else if yym82 {
			z.DecBinaryUnmarshal(yyv81)
		} else if !yym82 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv81)
		} else {
			z.DecFallback(yyv81, false)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym84 := z.DecBinary()
		_ = yym84
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym84 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym84 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv87 := &x.Labels
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else {
			z.F.DecMapStringStringX(yyv87, false, d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv89 := &x.Annotations
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			z.F.DecMapStringStringX(yyv89, false, d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv91 := &x.OwnerReferences
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv91), d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv93 := &x.Finalizers
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecSliceStringX(yyv93, false, d)
		}
	}
	for {
		yyj73++
		if yyhl73 {
			yyb73 = yyj73 > l
		} else {
			yyb73 = r.CheckBreak()
		}
		if yyb73 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj73-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym95 := z.EncBinary()
		_ = yym95
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep96 := !z.EncBinary()
			yy2arr96 := z.EncBasicHandle().StructToArray
			var yyq96 [22]bool
			_, _, _ = yysep96, yyq96, yy2arr96
			const yyr96 bool = false
			yyq96[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq96[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq96[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq96[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq96[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq96[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq96[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq96[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq96[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq96[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq96[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq96[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq96[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq96[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq96[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq96[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq96[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq96[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq96[19] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq96[20] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq96[21] = x.VolumeSource.DockerVolume != nil && x.DockerVolume != nil
			var yynn96 int
			if yyr96 || yy2arr96 {
				r.EncodeArrayStart(22)
			} else {
				yynn96 = 1
				for _, b := range yyq96 {
					if b {
						yynn96++
					}
				}
				r.EncodeMapStart(yynn96)
				yynn96 = 0
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym98 := z.EncBinary()
				_ = yym98
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym99 := z.EncBinary()
				_ = yym99
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn100 bool
			if x.VolumeSource.HostPath == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr96 || yy2arr96 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr96 || yy2arr96 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn102 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn102 = true
				goto LABEL102
			}
		LABEL102:
			if yyr96 || yy2arr96 {
				if yyn102 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn102 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn103 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn103 = true
				goto LABEL103
			}
		LABEL103:
			if yyr96 || yy2arr96 {
				if yyn103 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn103 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn104 bool
			if x.VolumeSource.GitRepo == nil {
				yyn104 = true
				goto LABEL104
			}
		LABEL104:
			if yyr96 || yy2arr96 {
				if yyn104 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn104 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn105 bool
			if x.VolumeSource.Secret == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr96 || yy2arr96 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.NFS == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr96 || yy2arr96 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.ISCSI == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr96 || yy2arr96 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr96 || yy2arr96 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr96 || yy2arr96 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.RBD == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr96 || yy2arr96 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr96 || yy2arr96 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.Cinder == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr96 || yy2arr96 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.CephFS == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr96 || yy2arr96 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.Flocker == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr96 || yy2arr96 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr96 || yy2arr96 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.FC == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr96 || yy2arr96 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.AzureFile == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr96 || yy2arr96 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr96 || yy2arr96 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[19] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr96 || yy2arr96 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[20] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.DockerVolume == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr96 || yy2arr96 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[21] {
						if x.DockerVolume == nil {
							r.EncodeNil()
						} else {
							x.DockerVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dockerVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.DockerVolume == nil {
							r.EncodeNil()
						} else {
							x.DockerVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym121 := z.DecBinary()
	_ = yym121
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct122 := r.ContainerType()
		if yyct122 == codecSelferValueTypeMap1234 {
			yyl122 := r.ReadMapStart()
			if yyl122 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl122, d)
			}
		} else if yyct122 == codecSelferValueTypeArray1234 {
			yyl122 := r.ReadArrayStart()
			if yyl122 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl122, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys123Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys123Slc
	var yyhl123 bool = l >= 0
	for yyj123 := 0; ; yyj123++ {
		if yyhl123 {
			if yyj123 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys123Slc = r.DecodeBytes(yys123Slc, true, true)
		yys123 := string(yys123Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys123 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "dockerVolume":
			if x.VolumeSource.DockerVolume == nil {
				x.VolumeSource.DockerVolume = new(DockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DockerVolume != nil {
					x.DockerVolume = nil
				}
			} else {
				if x.DockerVolume == nil {
					x.DockerVolume = new(DockerVolumeSource)
				}
				x.DockerVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys123)
		} // end switch yys123
	} // end for yyj123
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj146 int
	var yyb146 bool
	var yyhl146 bool = l >= 0
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DockerVolume == nil {
		x.VolumeSource.DockerVolume = new(DockerVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DockerVolume != nil {
			x.DockerVolume = nil
		}
	} else {
		if x.DockerVolume == nil {
			x.DockerVolume = new(DockerVolumeSource)
		}
		x.DockerVolume.CodecDecodeSelf(d)
	}
	for {
		yyj146++
		if yyhl146 {
			yyb146 = yyj146 > l
		} else {
			yyb146 = r.CheckBreak()
		}
		if yyb146 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj146-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym169 := z.EncBinary()
		_ = yym169
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep170 := !z.EncBinary()
			yy2arr170 := z.EncBasicHandle().StructToArray
			var yyq170 [21]bool
			_, _, _ = yysep170, yyq170, yy2arr170
			const yyr170 bool = false
			yyq170[0] = x.HostPath != nil
			yyq170[1] = x.EmptyDir != nil
			yyq170[2] = x.GCEPersistentDisk != nil
			yyq170[3] = x.AWSElasticBlockStore != nil
			yyq170[4] = x.GitRepo != nil
			yyq170[5] = x.Secret != nil
			yyq170[6] = x.NFS != nil
			yyq170[7] = x.ISCSI != nil
			yyq170[8] = x.Glusterfs != nil
			yyq170[9] = x.PersistentVolumeClaim != nil
			yyq170[10] = x.RBD != nil
			yyq170[11] = x.FlexVolume != nil
			yyq170[12] = x.Cinder != nil
			yyq170[13] = x.CephFS != nil
			yyq170[14] = x.Flocker != nil
			yyq170[15] = x.DownwardAPI != nil
			yyq170[16] = x.FC != nil
			yyq170[17] = x.AzureFile != nil
			yyq170[18] = x.ConfigMap != nil
			yyq170[19] = x.VsphereVolume != nil
			yyq170[20] = x.DockerVolume != nil
			var yynn170 int
			if yyr170 || yy2arr170 {
				r.EncodeArrayStart(21)
			} else {
				yynn170 = 0
				for _, b := range yyq170 {
					if b {
						yynn170++
					}
				}
				r.EncodeMapStart(yynn170)
				yynn170 = 0
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[18] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[19] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[20] {
					if x.DockerVolume == nil {
						r.EncodeNil()
					} else {
						x.DockerVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dockerVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DockerVolume == nil {
						r.EncodeNil()
					} else {
						x.DockerVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym192 := z.DecBinary()
	_ = yym192
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct193 := r.ContainerType()
		if yyct193 == codecSelferValueTypeMap1234 {
			yyl193 := r.ReadMapStart()
			if yyl193 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl193, d)
			}
		} else if yyct193 == codecSelferValueTypeArray1234 {
			yyl193 := r.ReadArrayStart()
			if yyl193 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl193, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys194Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys194Slc
	var yyhl194 bool = l >= 0
	for yyj194 := 0; ; yyj194++ {
		if yyhl194 {
			if yyj194 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys194Slc = r.DecodeBytes(yys194Slc, true, true)
		yys194 := string(yys194Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys194 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "dockerVolume":
			if r.TryDecodeAsNil() {
				if x.DockerVolume != nil {
					x.DockerVolume = nil
				}
			} else {
				if x.DockerVolume == nil {
					x.DockerVolume = new(DockerVolumeSource)
				}
				x.DockerVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys194)
		} // end switch yys194
	} // end for yyj194
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj216 int
	var yyb216 bool
	var yyhl216 bool = l >= 0
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DockerVolume != nil {
			x.DockerVolume = nil
		}
	} else {
		if x.DockerVolume == nil {
			x.DockerVolume = new(DockerVolumeSource)
		}
		x.DockerVolume.CodecDecodeSelf(d)
	}
	for {
		yyj216++
		if yyhl216 {
			yyb216 = yyj216 > l
		} else {
			yyb216 = r.CheckBreak()
		}
		if yyb216 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj216-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym238 := z.EncBinary()
		_ = yym238
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep239 := !z.EncBinary()
			yy2arr239 := z.EncBasicHandle().StructToArray
			var yyq239 [14]bool
			_, _, _ = yysep239, yyq239, yy2arr239
			const yyr239 bool = false
			yyq239[0] = x.GCEPersistentDisk != nil
			yyq239[1] = x.AWSElasticBlockStore != nil
			yyq239[2] = x.HostPath != nil
			yyq239[3] = x.Glusterfs != nil
			yyq239[4] = x.NFS != nil
			yyq239[5] = x.RBD != nil
			yyq239[6] = x.ISCSI != nil
			yyq239[7] = x.FlexVolume != nil
			yyq239[8] = x.Cinder != nil
			yyq239[9] = x.CephFS != nil
			yyq239[10] = x.FC != nil
			yyq239[11] = x.Flocker != nil
			yyq239[12] = x.AzureFile != nil
			yyq239[13] = x.VsphereVolume != nil
			var yynn239 int
			if yyr239 || yy2arr239 {
				r.EncodeArrayStart(14)
			} else {
				yynn239 = 0
				for _, b := range yyq239 {
					if b {
						yynn239++
					}
				}
				r.EncodeMapStart(yynn239)
				yynn239 = 0
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[7] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[8] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[9] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[10] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[11] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[13] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym254 := z.DecBinary()
	_ = yym254
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct255 := r.ContainerType()
		if yyct255 == codecSelferValueTypeMap1234 {
			yyl255 := r.ReadMapStart()
			if yyl255 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl255, d)
			}
		} else if yyct255 == codecSelferValueTypeArray1234 {
			yyl255 := r.ReadArrayStart()
			if yyl255 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl255, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys256Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys256Slc
	var yyhl256 bool = l >= 0
	for yyj256 := 0; ; yyj256++ {
		if yyhl256 {
			if yyj256 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys256Slc = r.DecodeBytes(yys256Slc, true, true)
		yys256 := string(yys256Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys256 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys256)
		} // end switch yys256
	} // end for yyj256
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj271 int
	var yyb271 bool
	var yyhl271 bool = l >= 0
	yyj271++
	if yyhl271 {
		yyb271 = yyj271 > l
	} else {
		yyb271 = r.CheckBreak()
	}
	if yyb271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj271++
	if yyhl271 {
		yyb271 = yyj271 > l
	} else {
		yyb271 = r.CheckBreak()
	}
	if yyb271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj271++
	if yyhl271 {
		yyb271 = yyj271 > l
	} else {
		yyb271 = r.CheckBreak()
	}
	if yyb271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj271++
	if yyhl271 {
		yyb271 = yyj271 > l
	} else {
		yyb271 = r.CheckBreak()
	}
	if yyb271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj271++
	if yyhl271 {
		yyb271 = yyj271 > l
	} else {
		yyb271 = r.CheckBreak()
	}
	if yyb271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj271++
	if yyhl271 {
		yyb271 = yyj271 > l
	} else {
		yyb271 = r.CheckBreak()
	}
	if yyb271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj271++
	if yyhl271 {
		yyb271 = yyj271 > l
	} else {
		yyb271 = r.CheckBreak()
	}
	if yyb271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj271++
	if yyhl271 {
		yyb271 = yyj271 > l
	} else {
		yyb271 = r.CheckBreak()
	}
	if yyb271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj271++
	if yyhl271 {
		yyb271 = yyj271 > l
	} else {
		yyb271 = r.CheckBreak()
	}
	if yyb271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj271++
	if yyhl271 {
		yyb271 = yyj271 > l
	} else {
		yyb271 = r.CheckBreak()
	}
	if yyb271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj271++
	if yyhl271 {
		yyb271 = yyj271 > l
	} else {
		yyb271 = r.CheckBreak()
	}
	if yyb271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj271++
	if yyhl271 {
		yyb271 = yyj271 > l
	} else {
		yyb271 = r.CheckBreak()
	}
	if yyb271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj271++
	if yyhl271 {
		yyb271 = yyj271 > l
	} else {
		yyb271 = r.CheckBreak()
	}
	if yyb271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj271++
	if yyhl271 {
		yyb271 = yyj271 > l
	} else {
		yyb271 = r.CheckBreak()
	}
	if yyb271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj271++
		if yyhl271 {
			yyb271 = yyj271 > l
		} else {
			yyb271 = r.CheckBreak()
		}
		if yyb271 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj271-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym286 := z.EncBinary()
		_ = yym286
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep287 := !z.EncBinary()
			yy2arr287 := z.EncBasicHandle().StructToArray
			var yyq287 [2]bool
			_, _, _ = yysep287, yyq287, yy2arr287
			const yyr287 bool = false
			yyq287[1] = x.ReadOnly != false
			var yynn287 int
			if yyr287 || yy2arr287 {
				r.EncodeArrayStart(2)
			} else {
				yynn287 = 1
				for _, b := range yyq287 {
					if b {
						yynn287++
					}
				}
				r.EncodeMapStart(yynn287)
				yynn287 = 0
			}
			if yyr287 || yy2arr287 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym289 := z.EncBinary()
				_ = yym289
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym290 := z.EncBinary()
				_ = yym290
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr287 || yy2arr287 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq287[1] {
					yym292 := z.EncBinary()
					_ = yym292
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq287[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym293 := z.EncBinary()
					_ = yym293
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr287 || yy2arr287 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym294 := z.DecBinary()
	_ = yym294
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct295 := r.ContainerType()
		if yyct295 == codecSelferValueTypeMap1234 {
			yyl295 := r.ReadMapStart()
			if yyl295 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl295, d)
			}
		} else if yyct295 == codecSelferValueTypeArray1234 {
			yyl295 := r.ReadArrayStart()
			if yyl295 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl295, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys296Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys296Slc
	var yyhl296 bool = l >= 0
	for yyj296 := 0; ; yyj296++ {
		if yyhl296 {
			if yyj296 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys296Slc = r.DecodeBytes(yys296Slc, true, true)
		yys296 := string(yys296Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys296 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys296)
		} // end switch yys296
	} // end for yyj296
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj299 int
	var yyb299 bool
	var yyhl299 bool = l >= 0
	yyj299++
	if yyhl299 {
		yyb299 = yyj299 > l
	} else {
		yyb299 = r.CheckBreak()
	}
	if yyb299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj299++
	if yyhl299 {
		yyb299 = yyj299 > l
	} else {
		yyb299 = r.CheckBreak()
	}
	if yyb299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj299++
		if yyhl299 {
			yyb299 = yyj299 > l
		} else {
			yyb299 = r.CheckBreak()
		}
		if yyb299 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj299-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym302 := z.EncBinary()
		_ = yym302
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep303 := !z.EncBinary()
			yy2arr303 := z.EncBasicHandle().StructToArray
			var yyq303 [5]bool
			_, _, _ = yysep303, yyq303, yy2arr303
			const yyr303 bool = false
			yyq303[0] = x.Kind != ""
			yyq303[1] = x.APIVersion != ""
			yyq303[2] = true
			yyq303[3] = true
			yyq303[4] = true
			var yynn303 int
			if yyr303 || yy2arr303 {
				r.EncodeArrayStart(5)
			} else {
				yynn303 = 0
				for _, b := range yyq303 {
					if b {
						yynn303++
					}
				}
				r.EncodeMapStart(yynn303)
				yynn303 = 0
			}
			if yyr303 || yy2arr303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq303[0] {
					yym305 := z.EncBinary()
					_ = yym305
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq303[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym306 := z.EncBinary()
					_ = yym306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr303 || yy2arr303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq303[1] {
					yym308 := z.EncBinary()
					_ = yym308
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq303[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym309 := z.EncBinary()
					_ = yym309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr303 || yy2arr303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq303[2] {
					yy311 := &x.ObjectMeta
					yy311.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq303[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy312 := &x.ObjectMeta
					yy312.CodecEncodeSelf(e)
				}
			}
			if yyr303 || yy2arr303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq303[3] {
					yy314 := &x.Spec
					yy314.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq303[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy315 := &x.Spec
					yy315.CodecEncodeSelf(e)
				}
			}
			if yyr303 || yy2arr303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq303[4] {
					yy317 := &x.Status
					yy317.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq303[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy318 := &x.Status
					yy318.CodecEncodeSelf(e)
				}
			}
			if yyr303 || yy2arr303 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym319 := z.DecBinary()
	_ = yym319
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct320 := r.ContainerType()
		if yyct320 == codecSelferValueTypeMap1234 {
			yyl320 := r.ReadMapStart()
			if yyl320 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl320, d)
			}
		} else if yyct320 == codecSelferValueTypeArray1234 {
			yyl320 := r.ReadArrayStart()
			if yyl320 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl320, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys321Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys321Slc
	var yyhl321 bool = l >= 0
	for yyj321 := 0; ; yyj321++ {
		if yyhl321 {
			if yyj321 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys321Slc = r.DecodeBytes(yys321Slc, true, true)
		yys321 := string(yys321Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys321 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv324 := &x.ObjectMeta
				yyv324.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv325 := &x.Spec
				yyv325.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv326 := &x.Status
				yyv326.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys321)
		} // end switch yys321
	} // end for yyj321
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj327 int
	var yyb327 bool
	var yyhl327 bool = l >= 0
	yyj327++
	if yyhl327 {
		yyb327 = yyj327 > l
	} else {
		yyb327 = r.CheckBreak()
	}
	if yyb327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj327++
	if yyhl327 {
		yyb327 = yyj327 > l
	} else {
		yyb327 = r.CheckBreak()
	}
	if yyb327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj327++
	if yyhl327 {
		yyb327 = yyj327 > l
	} else {
		yyb327 = r.CheckBreak()
	}
	if yyb327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv330 := &x.ObjectMeta
		yyv330.CodecDecodeSelf(d)
	}
	yyj327++
	if yyhl327 {
		yyb327 = yyj327 > l
	} else {
		yyb327 = r.CheckBreak()
	}
	if yyb327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv331 := &x.Spec
		yyv331.CodecDecodeSelf(d)
	}
	yyj327++
	if yyhl327 {
		yyb327 = yyj327 > l
	} else {
		yyb327 = r.CheckBreak()
	}
	if yyb327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv332 := &x.Status
		yyv332.CodecDecodeSelf(d)
	}
	for {
		yyj327++
		if yyhl327 {
			yyb327 = yyj327 > l
		} else {
			yyb327 = r.CheckBreak()
		}
		if yyb327 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj327-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym333 := z.EncBinary()
		_ = yym333
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep334 := !z.EncBinary()
			yy2arr334 := z.EncBasicHandle().StructToArray
			var yyq334 [18]bool
			_, _, _ = yysep334, yyq334, yy2arr334
			const yyr334 bool = false
			yyq334[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq334[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq334[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq334[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq334[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq334[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq334[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq334[8] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq334[9] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq334[10] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq334[11] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq334[12] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq334[13] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq334[14] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq334[15] = len(x.AccessModes) != 0
			yyq334[16] = x.ClaimRef != nil
			yyq334[17] = x.PersistentVolumeReclaimPolicy != ""
			var yynn334 int
			if yyr334 || yy2arr334 {
				r.EncodeArrayStart(18)
			} else {
				yynn334 = 1
				for _, b := range yyq334 {
					if b {
						yynn334++
					}
				}
				r.EncodeMapStart(yynn334)
				yynn334 = 0
			}
			if yyr334 || yy2arr334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn336 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn336 = true
				goto LABEL336
			}
		LABEL336:
			if yyr334 || yy2arr334 {
				if yyn336 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn336 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn337 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn337 = true
				goto LABEL337
			}
		LABEL337:
			if yyr334 || yy2arr334 {
				if yyn337 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn337 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn338 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn338 = true
				goto LABEL338
			}
		LABEL338:
			if yyr334 || yy2arr334 {
				if yyn338 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn338 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn339 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn339 = true
				goto LABEL339
			}
		LABEL339:
			if yyr334 || yy2arr334 {
				if yyn339 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn339 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn340 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn340 = true
				goto LABEL340
			}
		LABEL340:
			if yyr334 || yy2arr334 {
				if yyn340 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn340 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn341 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn341 = true
				goto LABEL341
			}
		LABEL341:
			if yyr334 || yy2arr334 {
				if yyn341 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn341 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn342 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn342 = true
				goto LABEL342
			}
		LABEL342:
			if yyr334 || yy2arr334 {
				if yyn342 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn342 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn343 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn343 = true
				goto LABEL343
			}
		LABEL343:
			if yyr334 || yy2arr334 {
				if yyn343 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[8] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn343 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn344 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn344 = true
				goto LABEL344
			}
		LABEL344:
			if yyr334 || yy2arr334 {
				if yyn344 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[9] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn344 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn345 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn345 = true
				goto LABEL345
			}
		LABEL345:
			if yyr334 || yy2arr334 {
				if yyn345 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[10] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn345 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn346 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn346 = true
				goto LABEL346
			}
		LABEL346:
			if yyr334 || yy2arr334 {
				if yyn346 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[11] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn346 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn347 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn347 = true
				goto LABEL347
			}
		LABEL347:
			if yyr334 || yy2arr334 {
				if yyn347 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[12] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn347 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn348 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn348 = true
				goto LABEL348
			}
		LABEL348:
			if yyr334 || yy2arr334 {
				if yyn348 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[13] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn348 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn349 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn349 = true
				goto LABEL349
			}
		LABEL349:
			if yyr334 || yy2arr334 {
				if yyn349 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq334[14] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq334[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn349 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr334 || yy2arr334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq334[15] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym351 := z.EncBinary()
						_ = yym351
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq334[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym352 := z.EncBinary()
						_ = yym352
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr334 || yy2arr334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq334[16] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq334[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr334 || yy2arr334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq334[17] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq334[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr334 || yy2arr334 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym355 := z.DecBinary()
	_ = yym355
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct356 := r.ContainerType()
		if yyct356 == codecSelferValueTypeMap1234 {
			yyl356 := r.ReadMapStart()
			if yyl356 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl356, d)
			}
		} else if yyct356 == codecSelferValueTypeArray1234 {
			yyl356 := r.ReadArrayStart()
			if yyl356 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl356, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys357Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys357Slc
	var yyhl357 bool = l >= 0
	for yyj357 := 0; ; yyj357++ {
		if yyhl357 {
			if yyj357 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys357Slc = r.DecodeBytes(yys357Slc, true, true)
		yys357 := string(yys357Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys357 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv358 := &x.Capacity
				yyv358.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv373 := &x.AccessModes
				yym374 := z.DecBinary()
				_ = yym374
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv373), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys357)
		} // end switch yys357
	} // end for yyj357
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj377 int
	var yyb377 bool
	var yyhl377 bool = l >= 0
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv378 := &x.Capacity
		yyv378.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv393 := &x.AccessModes
		yym394 := z.DecBinary()
		_ = yym394
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv393), d)
		}
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj377++
	if yyhl377 {
		yyb377 = yyj377 > l
	} else {
		yyb377 = r.CheckBreak()
	}
	if yyb377 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj377++
		if yyhl377 {
			yyb377 = yyj377 > l
		} else {
			yyb377 = r.CheckBreak()
		}
		if yyb377 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj377-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym397 := z.EncBinary()
	_ = yym397
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym398 := z.DecBinary()
	_ = yym398
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym399 := z.EncBinary()
		_ = yym399
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep400 := !z.EncBinary()
			yy2arr400 := z.EncBasicHandle().StructToArray
			var yyq400 [3]bool
			_, _, _ = yysep400, yyq400, yy2arr400
			const yyr400 bool = false
			yyq400[0] = x.Phase != ""
			yyq400[1] = x.Message != ""
			yyq400[2] = x.Reason != ""
			var yynn400 int
			if yyr400 || yy2arr400 {
				r.EncodeArrayStart(3)
			} else {
				yynn400 = 0
				for _, b := range yyq400 {
					if b {
						yynn400++
					}
				}
				r.EncodeMapStart(yynn400)
				yynn400 = 0
			}
			if yyr400 || yy2arr400 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq400[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq400[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr400 || yy2arr400 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq400[1] {
					yym403 := z.EncBinary()
					_ = yym403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq400[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym404 := z.EncBinary()
					_ = yym404
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr400 || yy2arr400 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq400[2] {
					yym406 := z.EncBinary()
					_ = yym406
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq400[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym407 := z.EncBinary()
					_ = yym407
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr400 || yy2arr400 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym408 := z.DecBinary()
	_ = yym408
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct409 := r.ContainerType()
		if yyct409 == codecSelferValueTypeMap1234 {
			yyl409 := r.ReadMapStart()
			if yyl409 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl409, d)
			}
		} else if yyct409 == codecSelferValueTypeArray1234 {
			yyl409 := r.ReadArrayStart()
			if yyl409 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl409, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys410Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys410Slc
	var yyhl410 bool = l >= 0
	for yyj410 := 0; ; yyj410++ {
		if yyhl410 {
			if yyj410 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys410Slc = r.DecodeBytes(yys410Slc, true, true)
		yys410 := string(yys410Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys410 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys410)
		} // end switch yys410
	} // end for yyj410
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj414 int
	var yyb414 bool
	var yyhl414 bool = l >= 0
	yyj414++
	if yyhl414 {
		yyb414 = yyj414 > l
	} else {
		yyb414 = r.CheckBreak()
	}
	if yyb414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj414++
	if yyhl414 {
		yyb414 = yyj414 > l
	} else {
		yyb414 = r.CheckBreak()
	}
	if yyb414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj414++
	if yyhl414 {
		yyb414 = yyj414 > l
	} else {
		yyb414 = r.CheckBreak()
	}
	if yyb414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj414++
		if yyhl414 {
			yyb414 = yyj414 > l
		} else {
			yyb414 = r.CheckBreak()
		}
		if yyb414 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj414-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym418 := z.EncBinary()
		_ = yym418
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep419 := !z.EncBinary()
			yy2arr419 := z.EncBasicHandle().StructToArray
			var yyq419 [4]bool
			_, _, _ = yysep419, yyq419, yy2arr419
			const yyr419 bool = false
			yyq419[0] = x.Kind != ""
			yyq419[1] = x.APIVersion != ""
			yyq419[2] = true
			var yynn419 int
			if yyr419 || yy2arr419 {
				r.EncodeArrayStart(4)
			} else {
				yynn419 = 1
				for _, b := range yyq419 {
					if b {
						yynn419++
					}
				}
				r.EncodeMapStart(yynn419)
				yynn419 = 0
			}
			if yyr419 || yy2arr419 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq419[0] {
					yym421 := z.EncBinary()
					_ = yym421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq419[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr419 || yy2arr419 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq419[1] {
					yym424 := z.EncBinary()
					_ = yym424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq419[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr419 || yy2arr419 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq419[2] {
					yy427 := &x.ListMeta
					yym428 := z.EncBinary()
					_ = yym428
					if false {
					} else if z.HasExtensions() && z.EncExt(yy427) {
					} else {
						z.EncFallback(yy427)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq419[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy429 := &x.ListMeta
					yym430 := z.EncBinary()
					_ = yym430
					if false {
					} else if z.HasExtensions() && z.EncExt(yy429) {
					} else {
						z.EncFallback(yy429)
					}
				}
			}
			if yyr419 || yy2arr419 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym432 := z.EncBinary()
					_ = yym432
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr419 || yy2arr419 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym434 := z.DecBinary()
	_ = yym434
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct435 := r.ContainerType()
		if yyct435 == codecSelferValueTypeMap1234 {
			yyl435 := r.ReadMapStart()
			if yyl435 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl435, d)
			}
		} else if yyct435 == codecSelferValueTypeArray1234 {
			yyl435 := r.ReadArrayStart()
			if yyl435 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl435, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys436Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys436Slc
	var yyhl436 bool = l >= 0
	for yyj436 := 0; ; yyj436++ {
		if yyhl436 {
			if yyj436 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys436Slc = r.DecodeBytes(yys436Slc, true, true)
		yys436 := string(yys436Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys436 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv439 := &x.ListMeta
				yym440 := z.DecBinary()
				_ = yym440
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv439) {
				} else {
					z.DecFallback(yyv439, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv441 := &x.Items
				yym442 := z.DecBinary()
				_ = yym442
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv441), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys436)
		} // end switch yys436
	} // end for yyj436
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj443 int
	var yyb443 bool
	var yyhl443 bool = l >= 0
	yyj443++
	if yyhl443 {
		yyb443 = yyj443 > l
	} else {
		yyb443 = r.CheckBreak()
	}
	if yyb443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj443++
	if yyhl443 {
		yyb443 = yyj443 > l
	} else {
		yyb443 = r.CheckBreak()
	}
	if yyb443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj443++
	if yyhl443 {
		yyb443 = yyj443 > l
	} else {
		yyb443 = r.CheckBreak()
	}
	if yyb443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv446 := &x.ListMeta
		yym447 := z.DecBinary()
		_ = yym447
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv446) {
		} else {
			z.DecFallback(yyv446, false)
		}
	}
	yyj443++
	if yyhl443 {
		yyb443 = yyj443 > l
	} else {
		yyb443 = r.CheckBreak()
	}
	if yyb443 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv448 := &x.Items
		yym449 := z.DecBinary()
		_ = yym449
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv448), d)
		}
	}
	for {
		yyj443++
		if yyhl443 {
			yyb443 = yyj443 > l
		} else {
			yyb443 = r.CheckBreak()
		}
		if yyb443 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj443-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym450 := z.EncBinary()
		_ = yym450
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep451 := !z.EncBinary()
			yy2arr451 := z.EncBasicHandle().StructToArray
			var yyq451 [5]bool
			_, _, _ = yysep451, yyq451, yy2arr451
			const yyr451 bool = false
			yyq451[0] = x.Kind != ""
			yyq451[1] = x.APIVersion != ""
			yyq451[2] = true
			yyq451[3] = true
			yyq451[4] = true
			var yynn451 int
			if yyr451 || yy2arr451 {
				r.EncodeArrayStart(5)
			} else {
				yynn451 = 0
				for _, b := range yyq451 {
					if b {
						yynn451++
					}
				}
				r.EncodeMapStart(yynn451)
				yynn451 = 0
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq451[0] {
					yym453 := z.EncBinary()
					_ = yym453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq451[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym454 := z.EncBinary()
					_ = yym454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq451[1] {
					yym456 := z.EncBinary()
					_ = yym456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq451[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym457 := z.EncBinary()
					_ = yym457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq451[2] {
					yy459 := &x.ObjectMeta
					yy459.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq451[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy460 := &x.ObjectMeta
					yy460.CodecEncodeSelf(e)
				}
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq451[3] {
					yy462 := &x.Spec
					yy462.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq451[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy463 := &x.Spec
					yy463.CodecEncodeSelf(e)
				}
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq451[4] {
					yy465 := &x.Status
					yy465.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq451[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy466 := &x.Status
					yy466.CodecEncodeSelf(e)
				}
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym467 := z.DecBinary()
	_ = yym467
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct468 := r.ContainerType()
		if yyct468 == codecSelferValueTypeMap1234 {
			yyl468 := r.ReadMapStart()
			if yyl468 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl468, d)
			}
		} else if yyct468 == codecSelferValueTypeArray1234 {
			yyl468 := r.ReadArrayStart()
			if yyl468 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl468, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys469Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys469Slc
	var yyhl469 bool = l >= 0
	for yyj469 := 0; ; yyj469++ {
		if yyhl469 {
			if yyj469 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys469Slc = r.DecodeBytes(yys469Slc, true, true)
		yys469 := string(yys469Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys469 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv472 := &x.ObjectMeta
				yyv472.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv473 := &x.Spec
				yyv473.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv474 := &x.Status
				yyv474.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys469)
		} // end switch yys469
	} // end for yyj469
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj475 int
	var yyb475 bool
	var yyhl475 bool = l >= 0
	yyj475++
	if yyhl475 {
		yyb475 = yyj475 > l
	} else {
		yyb475 = r.CheckBreak()
	}
	if yyb475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj475++
	if yyhl475 {
		yyb475 = yyj475 > l
	} else {
		yyb475 = r.CheckBreak()
	}
	if yyb475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj475++
	if yyhl475 {
		yyb475 = yyj475 > l
	} else {
		yyb475 = r.CheckBreak()
	}
	if yyb475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv478 := &x.ObjectMeta
		yyv478.CodecDecodeSelf(d)
	}
	yyj475++
	if yyhl475 {
		yyb475 = yyj475 > l
	} else {
		yyb475 = r.CheckBreak()
	}
	if yyb475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv479 := &x.Spec
		yyv479.CodecDecodeSelf(d)
	}
	yyj475++
	if yyhl475 {
		yyb475 = yyj475 > l
	} else {
		yyb475 = r.CheckBreak()
	}
	if yyb475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv480 := &x.Status
		yyv480.CodecDecodeSelf(d)
	}
	for {
		yyj475++
		if yyhl475 {
			yyb475 = yyj475 > l
		} else {
			yyb475 = r.CheckBreak()
		}
		if yyb475 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj475-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym481 := z.EncBinary()
		_ = yym481
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep482 := !z.EncBinary()
			yy2arr482 := z.EncBasicHandle().StructToArray
			var yyq482 [4]bool
			_, _, _ = yysep482, yyq482, yy2arr482
			const yyr482 bool = false
			yyq482[0] = x.Kind != ""
			yyq482[1] = x.APIVersion != ""
			yyq482[2] = true
			var yynn482 int
			if yyr482 || yy2arr482 {
				r.EncodeArrayStart(4)
			} else {
				yynn482 = 1
				for _, b := range yyq482 {
					if b {
						yynn482++
					}
				}
				r.EncodeMapStart(yynn482)
				yynn482 = 0
			}
			if yyr482 || yy2arr482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq482[0] {
					yym484 := z.EncBinary()
					_ = yym484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq482[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym485 := z.EncBinary()
					_ = yym485
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr482 || yy2arr482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq482[1] {
					yym487 := z.EncBinary()
					_ = yym487
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq482[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym488 := z.EncBinary()
					_ = yym488
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr482 || yy2arr482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq482[2] {
					yy490 := &x.ListMeta
					yym491 := z.EncBinary()
					_ = yym491
					if false {
					} else if z.HasExtensions() && z.EncExt(yy490) {
					} else {
						z.EncFallback(yy490)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq482[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy492 := &x.ListMeta
					yym493 := z.EncBinary()
					_ = yym493
					if false {
					} else if z.HasExtensions() && z.EncExt(yy492) {
					} else {
						z.EncFallback(yy492)
					}
				}
			}
			if yyr482 || yy2arr482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym495 := z.EncBinary()
					_ = yym495
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym496 := z.EncBinary()
					_ = yym496
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr482 || yy2arr482 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym497 := z.DecBinary()
	_ = yym497
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct498 := r.ContainerType()
		if yyct498 == codecSelferValueTypeMap1234 {
			yyl498 := r.ReadMapStart()
			if yyl498 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl498, d)
			}
		} else if yyct498 == codecSelferValueTypeArray1234 {
			yyl498 := r.ReadArrayStart()
			if yyl498 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl498, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys499Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys499Slc
	var yyhl499 bool = l >= 0
	for yyj499 := 0; ; yyj499++ {
		if yyhl499 {
			if yyj499 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys499Slc = r.DecodeBytes(yys499Slc, true, true)
		yys499 := string(yys499Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys499 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv502 := &x.ListMeta
				yym503 := z.DecBinary()
				_ = yym503
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv502) {
				} else {
					z.DecFallback(yyv502, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv504 := &x.Items
				yym505 := z.DecBinary()
				_ = yym505
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv504), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys499)
		} // end switch yys499
	} // end for yyj499
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj506 int
	var yyb506 bool
	var yyhl506 bool = l >= 0
	yyj506++
	if yyhl506 {
		yyb506 = yyj506 > l
	} else {
		yyb506 = r.CheckBreak()
	}
	if yyb506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj506++
	if yyhl506 {
		yyb506 = yyj506 > l
	} else {
		yyb506 = r.CheckBreak()
	}
	if yyb506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj506++
	if yyhl506 {
		yyb506 = yyj506 > l
	} else {
		yyb506 = r.CheckBreak()
	}
	if yyb506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv509 := &x.ListMeta
		yym510 := z.DecBinary()
		_ = yym510
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv509) {
		} else {
			z.DecFallback(yyv509, false)
		}
	}
	yyj506++
	if yyhl506 {
		yyb506 = yyj506 > l
	} else {
		yyb506 = r.CheckBreak()
	}
	if yyb506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv511 := &x.Items
		yym512 := z.DecBinary()
		_ = yym512
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv511), d)
		}
	}
	for {
		yyj506++
		if yyhl506 {
			yyb506 = yyj506 > l
		} else {
			yyb506 = r.CheckBreak()
		}
		if yyb506 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj506-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym513 := z.EncBinary()
		_ = yym513
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep514 := !z.EncBinary()
			yy2arr514 := z.EncBasicHandle().StructToArray
			var yyq514 [4]bool
			_, _, _ = yysep514, yyq514, yy2arr514
			const yyr514 bool = false
			yyq514[0] = len(x.AccessModes) != 0
			yyq514[1] = x.Selector != nil
			yyq514[2] = true
			yyq514[3] = x.VolumeName != ""
			var yynn514 int
			if yyr514 || yy2arr514 {
				r.EncodeArrayStart(4)
			} else {
				yynn514 = 0
				for _, b := range yyq514 {
					if b {
						yynn514++
					}
				}
				r.EncodeMapStart(yynn514)
				yynn514 = 0
			}
			if yyr514 || yy2arr514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq514[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym516 := z.EncBinary()
						_ = yym516
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq514[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym517 := z.EncBinary()
						_ = yym517
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr514 || yy2arr514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq514[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym519 := z.EncBinary()
						_ = yym519
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq514[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym520 := z.EncBinary()
						_ = yym520
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr514 || yy2arr514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq514[2] {
					yy522 := &x.Resources
					yy522.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq514[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy523 := &x.Resources
					yy523.CodecEncodeSelf(e)
				}
			}
			if yyr514 || yy2arr514 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq514[3] {
					yym525 := z.EncBinary()
					_ = yym525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq514[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym526 := z.EncBinary()
					_ = yym526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr514 || yy2arr514 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym527 := z.DecBinary()
	_ = yym527
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct528 := r.ContainerType()
		if yyct528 == codecSelferValueTypeMap1234 {
			yyl528 := r.ReadMapStart()
			if yyl528 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl528, d)
			}
		} else if yyct528 == codecSelferValueTypeArray1234 {
			yyl528 := r.ReadArrayStart()
			if yyl528 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl528, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys529Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys529Slc
	var yyhl529 bool = l >= 0
	for yyj529 := 0; ; yyj529++ {
		if yyhl529 {
			if yyj529 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys529Slc = r.DecodeBytes(yys529Slc, true, true)
		yys529 := string(yys529Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys529 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv530 := &x.AccessModes
				yym531 := z.DecBinary()
				_ = yym531
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv530), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym533 := z.DecBinary()
				_ = yym533
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv534 := &x.Resources
				yyv534.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys529)
		} // end switch yys529
	} // end for yyj529
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj536 int
	var yyb536 bool
	var yyhl536 bool = l >= 0
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv537 := &x.AccessModes
		yym538 := z.DecBinary()
		_ = yym538
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv537), d)
		}
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym540 := z.DecBinary()
		_ = yym540
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv541 := &x.Resources
		yyv541.CodecDecodeSelf(d)
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj536++
		if yyhl536 {
			yyb536 = yyj536 > l
		} else {
			yyb536 = r.CheckBreak()
		}
		if yyb536 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj536-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym543 := z.EncBinary()
		_ = yym543
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep544 := !z.EncBinary()
			yy2arr544 := z.EncBasicHandle().StructToArray
			var yyq544 [3]bool
			_, _, _ = yysep544, yyq544, yy2arr544
			const yyr544 bool = false
			yyq544[0] = x.Phase != ""
			yyq544[1] = len(x.AccessModes) != 0
			yyq544[2] = len(x.Capacity) != 0
			var yynn544 int
			if yyr544 || yy2arr544 {
				r.EncodeArrayStart(3)
			} else {
				yynn544 = 0
				for _, b := range yyq544 {
					if b {
						yynn544++
					}
				}
				r.EncodeMapStart(yynn544)
				yynn544 = 0
			}
			if yyr544 || yy2arr544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq544[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq544[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr544 || yy2arr544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq544[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym547 := z.EncBinary()
						_ = yym547
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq544[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym548 := z.EncBinary()
						_ = yym548
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr544 || yy2arr544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq544[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq544[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr544 || yy2arr544 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym550 := z.DecBinary()
	_ = yym550
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct551 := r.ContainerType()
		if yyct551 == codecSelferValueTypeMap1234 {
			yyl551 := r.ReadMapStart()
			if yyl551 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl551, d)
			}
		} else if yyct551 == codecSelferValueTypeArray1234 {
			yyl551 := r.ReadArrayStart()
			if yyl551 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl551, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys552Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys552Slc
	var yyhl552 bool = l >= 0
	for yyj552 := 0; ; yyj552++ {
		if yyhl552 {
			if yyj552 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys552Slc = r.DecodeBytes(yys552Slc, true, true)
		yys552 := string(yys552Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys552 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv554 := &x.AccessModes
				yym555 := z.DecBinary()
				_ = yym555
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv554), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv556 := &x.Capacity
				yyv556.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys552)
		} // end switch yys552
	} // end for yyj552
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj557 int
	var yyb557 bool
	var yyhl557 bool = l >= 0
	yyj557++
	if yyhl557 {
		yyb557 = yyj557 > l
	} else {
		yyb557 = r.CheckBreak()
	}
	if yyb557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj557++
	if yyhl557 {
		yyb557 = yyj557 > l
	} else {
		yyb557 = r.CheckBreak()
	}
	if yyb557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv559 := &x.AccessModes
		yym560 := z.DecBinary()
		_ = yym560
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv559), d)
		}
	}
	yyj557++
	if yyhl557 {
		yyb557 = yyj557 > l
	} else {
		yyb557 = r.CheckBreak()
	}
	if yyb557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv561 := &x.Capacity
		yyv561.CodecDecodeSelf(d)
	}
	for {
		yyj557++
		if yyhl557 {
			yyb557 = yyj557 > l
		} else {
			yyb557 = r.CheckBreak()
		}
		if yyb557 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj557-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym562 := z.EncBinary()
	_ = yym562
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym563 := z.DecBinary()
	_ = yym563
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym564 := z.EncBinary()
	_ = yym564
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym565 := z.DecBinary()
	_ = yym565
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym566 := z.EncBinary()
	_ = yym566
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym567 := z.DecBinary()
	_ = yym567
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym568 := z.EncBinary()
		_ = yym568
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep569 := !z.EncBinary()
			yy2arr569 := z.EncBasicHandle().StructToArray
			var yyq569 [1]bool
			_, _, _ = yysep569, yyq569, yy2arr569
			const yyr569 bool = false
			var yynn569 int
			if yyr569 || yy2arr569 {
				r.EncodeArrayStart(1)
			} else {
				yynn569 = 1
				for _, b := range yyq569 {
					if b {
						yynn569++
					}
				}
				r.EncodeMapStart(yynn569)
				yynn569 = 0
			}
			if yyr569 || yy2arr569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym571 := z.EncBinary()
				_ = yym571
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym572 := z.EncBinary()
				_ = yym572
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr569 || yy2arr569 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym573 := z.DecBinary()
	_ = yym573
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct574 := r.ContainerType()
		if yyct574 == codecSelferValueTypeMap1234 {
			yyl574 := r.ReadMapStart()
			if yyl574 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl574, d)
			}
		} else if yyct574 == codecSelferValueTypeArray1234 {
			yyl574 := r.ReadArrayStart()
			if yyl574 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl574, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys575Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys575Slc
	var yyhl575 bool = l >= 0
	for yyj575 := 0; ; yyj575++ {
		if yyhl575 {
			if yyj575 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys575Slc = r.DecodeBytes(yys575Slc, true, true)
		yys575 := string(yys575Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys575 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys575)
		} // end switch yys575
	} // end for yyj575
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj577 int
	var yyb577 bool
	var yyhl577 bool = l >= 0
	yyj577++
	if yyhl577 {
		yyb577 = yyj577 > l
	} else {
		yyb577 = r.CheckBreak()
	}
	if yyb577 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj577++
		if yyhl577 {
			yyb577 = yyj577 > l
		} else {
			yyb577 = r.CheckBreak()
		}
		if yyb577 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj577-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym579 := z.EncBinary()
		_ = yym579
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep580 := !z.EncBinary()
			yy2arr580 := z.EncBasicHandle().StructToArray
			var yyq580 [1]bool
			_, _, _ = yysep580, yyq580, yy2arr580
			const yyr580 bool = false
			yyq580[0] = x.Medium != ""
			var yynn580 int
			if yyr580 || yy2arr580 {
				r.EncodeArrayStart(1)
			} else {
				yynn580 = 0
				for _, b := range yyq580 {
					if b {
						yynn580++
					}
				}
				r.EncodeMapStart(yynn580)
				yynn580 = 0
			}
			if yyr580 || yy2arr580 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq580[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq580[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr580 || yy2arr580 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym582 := z.DecBinary()
	_ = yym582
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct583 := r.ContainerType()
		if yyct583 == codecSelferValueTypeMap1234 {
			yyl583 := r.ReadMapStart()
			if yyl583 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl583, d)
			}
		} else if yyct583 == codecSelferValueTypeArray1234 {
			yyl583 := r.ReadArrayStart()
			if yyl583 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl583, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys584Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys584Slc
	var yyhl584 bool = l >= 0
	for yyj584 := 0; ; yyj584++ {
		if yyhl584 {
			if yyj584 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys584Slc = r.DecodeBytes(yys584Slc, true, true)
		yys584 := string(yys584Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys584 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys584)
		} // end switch yys584
	} // end for yyj584
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj586 int
	var yyb586 bool
	var yyhl586 bool = l >= 0
	yyj586++
	if yyhl586 {
		yyb586 = yyj586 > l
	} else {
		yyb586 = r.CheckBreak()
	}
	if yyb586 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj586++
		if yyhl586 {
			yyb586 = yyj586 > l
		} else {
			yyb586 = r.CheckBreak()
		}
		if yyb586 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj586-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym588 := z.EncBinary()
	_ = yym588
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym589 := z.DecBinary()
	_ = yym589
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym590 := z.EncBinary()
	_ = yym590
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym591 := z.DecBinary()
	_ = yym591
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym592 := z.EncBinary()
		_ = yym592
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep593 := !z.EncBinary()
			yy2arr593 := z.EncBasicHandle().StructToArray
			var yyq593 [4]bool
			_, _, _ = yysep593, yyq593, yy2arr593
			const yyr593 bool = false
			yyq593[1] = x.FSType != ""
			yyq593[2] = x.Partition != 0
			yyq593[3] = x.ReadOnly != false
			var yynn593 int
			if yyr593 || yy2arr593 {
				r.EncodeArrayStart(4)
			} else {
				yynn593 = 1
				for _, b := range yyq593 {
					if b {
						yynn593++
					}
				}
				r.EncodeMapStart(yynn593)
				yynn593 = 0
			}
			if yyr593 || yy2arr593 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym595 := z.EncBinary()
				_ = yym595
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym596 := z.EncBinary()
				_ = yym596
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr593 || yy2arr593 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq593[1] {
					yym598 := z.EncBinary()
					_ = yym598
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq593[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym599 := z.EncBinary()
					_ = yym599
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr593 || yy2arr593 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq593[2] {
					yym601 := z.EncBinary()
					_ = yym601
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq593[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym602 := z.EncBinary()
					_ = yym602
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr593 || yy2arr593 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq593[3] {
					yym604 := z.EncBinary()
					_ = yym604
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq593[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym605 := z.EncBinary()
					_ = yym605
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr593 || yy2arr593 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym606 := z.DecBinary()
	_ = yym606
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct607 := r.ContainerType()
		if yyct607 == codecSelferValueTypeMap1234 {
			yyl607 := r.ReadMapStart()
			if yyl607 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl607, d)
			}
		} else if yyct607 == codecSelferValueTypeArray1234 {
			yyl607 := r.ReadArrayStart()
			if yyl607 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl607, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys608Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys608Slc
	var yyhl608 bool = l >= 0
	for yyj608 := 0; ; yyj608++ {
		if yyhl608 {
			if yyj608 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys608Slc = r.DecodeBytes(yys608Slc, true, true)
		yys608 := string(yys608Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys608 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys608)
		} // end switch yys608
	} // end for yyj608
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj613 int
	var yyb613 bool
	var yyhl613 bool = l >= 0
	yyj613++
	if yyhl613 {
		yyb613 = yyj613 > l
	} else {
		yyb613 = r.CheckBreak()
	}
	if yyb613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj613++
	if yyhl613 {
		yyb613 = yyj613 > l
	} else {
		yyb613 = r.CheckBreak()
	}
	if yyb613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj613++
	if yyhl613 {
		yyb613 = yyj613 > l
	} else {
		yyb613 = r.CheckBreak()
	}
	if yyb613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj613++
	if yyhl613 {
		yyb613 = yyj613 > l
	} else {
		yyb613 = r.CheckBreak()
	}
	if yyb613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj613++
		if yyhl613 {
			yyb613 = yyj613 > l
		} else {
			yyb613 = r.CheckBreak()
		}
		if yyb613 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj613-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym618 := z.EncBinary()
		_ = yym618
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep619 := !z.EncBinary()
			yy2arr619 := z.EncBasicHandle().StructToArray
			var yyq619 [6]bool
			_, _, _ = yysep619, yyq619, yy2arr619
			const yyr619 bool = false
			yyq619[0] = x.TargetPortal != ""
			yyq619[1] = x.IQN != ""
			yyq619[2] = x.Lun != 0
			yyq619[3] = x.ISCSIInterface != ""
			yyq619[4] = x.FSType != ""
			yyq619[5] = x.ReadOnly != false
			var yynn619 int
			if yyr619 || yy2arr619 {
				r.EncodeArrayStart(6)
			} else {
				yynn619 = 0
				for _, b := range yyq619 {
					if b {
						yynn619++
					}
				}
				r.EncodeMapStart(yynn619)
				yynn619 = 0
			}
			if yyr619 || yy2arr619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq619[0] {
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq619[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr619 || yy2arr619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq619[1] {
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq619[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr619 || yy2arr619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq619[2] {
					yym627 := z.EncBinary()
					_ = yym627
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq619[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym628 := z.EncBinary()
					_ = yym628
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr619 || yy2arr619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq619[3] {
					yym630 := z.EncBinary()
					_ = yym630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq619[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym631 := z.EncBinary()
					_ = yym631
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr619 || yy2arr619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq619[4] {
					yym633 := z.EncBinary()
					_ = yym633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq619[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym634 := z.EncBinary()
					_ = yym634
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr619 || yy2arr619 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq619[5] {
					yym636 := z.EncBinary()
					_ = yym636
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq619[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym637 := z.EncBinary()
					_ = yym637
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr619 || yy2arr619 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym638 := z.DecBinary()
	_ = yym638
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct639 := r.ContainerType()
		if yyct639 == codecSelferValueTypeMap1234 {
			yyl639 := r.ReadMapStart()
			if yyl639 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl639, d)
			}
		} else if yyct639 == codecSelferValueTypeArray1234 {
			yyl639 := r.ReadArrayStart()
			if yyl639 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl639, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys640Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys640Slc
	var yyhl640 bool = l >= 0
	for yyj640 := 0; ; yyj640++ {
		if yyhl640 {
			if yyj640 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys640Slc = r.DecodeBytes(yys640Slc, true, true)
		yys640 := string(yys640Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys640 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys640)
		} // end switch yys640
	} // end for yyj640
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj647 int
	var yyb647 bool
	var yyhl647 bool = l >= 0
	yyj647++
	if yyhl647 {
		yyb647 = yyj647 > l
	} else {
		yyb647 = r.CheckBreak()
	}
	if yyb647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj647++
	if yyhl647 {
		yyb647 = yyj647 > l
	} else {
		yyb647 = r.CheckBreak()
	}
	if yyb647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj647++
	if yyhl647 {
		yyb647 = yyj647 > l
	} else {
		yyb647 = r.CheckBreak()
	}
	if yyb647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj647++
	if yyhl647 {
		yyb647 = yyj647 > l
	} else {
		yyb647 = r.CheckBreak()
	}
	if yyb647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj647++
	if yyhl647 {
		yyb647 = yyj647 > l
	} else {
		yyb647 = r.CheckBreak()
	}
	if yyb647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj647++
	if yyhl647 {
		yyb647 = yyj647 > l
	} else {
		yyb647 = r.CheckBreak()
	}
	if yyb647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj647++
		if yyhl647 {
			yyb647 = yyj647 > l
		} else {
			yyb647 = r.CheckBreak()
		}
		if yyb647 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj647-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym654 := z.EncBinary()
		_ = yym654
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep655 := !z.EncBinary()
			yy2arr655 := z.EncBasicHandle().StructToArray
			var yyq655 [4]bool
			_, _, _ = yysep655, yyq655, yy2arr655
			const yyr655 bool = false
			yyq655[2] = x.FSType != ""
			yyq655[3] = x.ReadOnly != false
			var yynn655 int
			if yyr655 || yy2arr655 {
				r.EncodeArrayStart(4)
			} else {
				yynn655 = 2
				for _, b := range yyq655 {
					if b {
						yynn655++
					}
				}
				r.EncodeMapStart(yynn655)
				yynn655 = 0
			}
			if yyr655 || yy2arr655 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym657 := z.EncBinary()
					_ = yym657
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym658 := z.EncBinary()
					_ = yym658
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr655 || yy2arr655 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy660 := *x.Lun
					yym661 := z.EncBinary()
					_ = yym661
					if false {
					} else {
						r.EncodeInt(int64(yy660))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy662 := *x.Lun
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else {
						r.EncodeInt(int64(yy662))
					}
				}
			}
			if yyr655 || yy2arr655 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq655[2] {
					yym665 := z.EncBinary()
					_ = yym665
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq655[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr655 || yy2arr655 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq655[3] {
					yym668 := z.EncBinary()
					_ = yym668
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq655[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym669 := z.EncBinary()
					_ = yym669
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr655 || yy2arr655 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym670 := z.DecBinary()
	_ = yym670
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct671 := r.ContainerType()
		if yyct671 == codecSelferValueTypeMap1234 {
			yyl671 := r.ReadMapStart()
			if yyl671 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl671, d)
			}
		} else if yyct671 == codecSelferValueTypeArray1234 {
			yyl671 := r.ReadArrayStart()
			if yyl671 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl671, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys672Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys672Slc
	var yyhl672 bool = l >= 0
	for yyj672 := 0; ; yyj672++ {
		if yyhl672 {
			if yyj672 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys672Slc = r.DecodeBytes(yys672Slc, true, true)
		yys672 := string(yys672Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys672 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv673 := &x.TargetWWNs
				yym674 := z.DecBinary()
				_ = yym674
				if false {
				} else {
					z.F.DecSliceStringX(yyv673, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym676 := z.DecBinary()
				_ = yym676
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys672)
		} // end switch yys672
	} // end for yyj672
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj679 int
	var yyb679 bool
	var yyhl679 bool = l >= 0
	yyj679++
	if yyhl679 {
		yyb679 = yyj679 > l
	} else {
		yyb679 = r.CheckBreak()
	}
	if yyb679 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv680 := &x.TargetWWNs
		yym681 := z.DecBinary()
		_ = yym681
		if false {
		} else {
			z.F.DecSliceStringX(yyv680, false, d)
		}
	}
	yyj679++
	if yyhl679 {
		yyb679 = yyj679 > l
	} else {
		yyb679 = r.CheckBreak()
	}
	if yyb679 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym683 := z.DecBinary()
		_ = yym683
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj679++
	if yyhl679 {
		yyb679 = yyj679 > l
	} else {
		yyb679 = r.CheckBreak()
	}
	if yyb679 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj679++
	if yyhl679 {
		yyb679 = yyj679 > l
	} else {
		yyb679 = r.CheckBreak()
	}
	if yyb679 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj679++
		if yyhl679 {
			yyb679 = yyj679 > l
		} else {
			yyb679 = r.CheckBreak()
		}
		if yyb679 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj679-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym686 := z.EncBinary()
		_ = yym686
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep687 := !z.EncBinary()
			yy2arr687 := z.EncBasicHandle().StructToArray
			var yyq687 [5]bool
			_, _, _ = yysep687, yyq687, yy2arr687
			const yyr687 bool = false
			yyq687[1] = x.FSType != ""
			yyq687[2] = x.SecretRef != nil
			yyq687[3] = x.ReadOnly != false
			yyq687[4] = len(x.Options) != 0
			var yynn687 int
			if yyr687 || yy2arr687 {
				r.EncodeArrayStart(5)
			} else {
				yynn687 = 1
				for _, b := range yyq687 {
					if b {
						yynn687++
					}
				}
				r.EncodeMapStart(yynn687)
				yynn687 = 0
			}
			if yyr687 || yy2arr687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym689 := z.EncBinary()
				_ = yym689
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym690 := z.EncBinary()
				_ = yym690
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr687 || yy2arr687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq687[1] {
					yym692 := z.EncBinary()
					_ = yym692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq687[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym693 := z.EncBinary()
					_ = yym693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr687 || yy2arr687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq687[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq687[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr687 || yy2arr687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq687[3] {
					yym696 := z.EncBinary()
					_ = yym696
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq687[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym697 := z.EncBinary()
					_ = yym697
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr687 || yy2arr687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq687[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym699 := z.EncBinary()
						_ = yym699
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq687[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym700 := z.EncBinary()
						_ = yym700
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr687 || yy2arr687 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym701 := z.DecBinary()
	_ = yym701
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct702 := r.ContainerType()
		if yyct702 == codecSelferValueTypeMap1234 {
			yyl702 := r.ReadMapStart()
			if yyl702 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl702, d)
			}
		} else if yyct702 == codecSelferValueTypeArray1234 {
			yyl702 := r.ReadArrayStart()
			if yyl702 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl702, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys703Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys703Slc
	var yyhl703 bool = l >= 0
	for yyj703 := 0; ; yyj703++ {
		if yyhl703 {
			if yyj703 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys703Slc = r.DecodeBytes(yys703Slc, true, true)
		yys703 := string(yys703Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys703 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv708 := &x.Options
				yym709 := z.DecBinary()
				_ = yym709
				if false {
				} else {
					z.F.DecMapStringStringX(yyv708, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys703)
		} // end switch yys703
	} // end for yyj703
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj710 int
	var yyb710 bool
	var yyhl710 bool = l >= 0
	yyj710++
	if yyhl710 {
		yyb710 = yyj710 > l
	} else {
		yyb710 = r.CheckBreak()
	}
	if yyb710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj710++
	if yyhl710 {
		yyb710 = yyj710 > l
	} else {
		yyb710 = r.CheckBreak()
	}
	if yyb710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj710++
	if yyhl710 {
		yyb710 = yyj710 > l
	} else {
		yyb710 = r.CheckBreak()
	}
	if yyb710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj710++
	if yyhl710 {
		yyb710 = yyj710 > l
	} else {
		yyb710 = r.CheckBreak()
	}
	if yyb710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj710++
	if yyhl710 {
		yyb710 = yyj710 > l
	} else {
		yyb710 = r.CheckBreak()
	}
	if yyb710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv715 := &x.Options
		yym716 := z.DecBinary()
		_ = yym716
		if false {
		} else {
			z.F.DecMapStringStringX(yyv715, false, d)
		}
	}
	for {
		yyj710++
		if yyhl710 {
			yyb710 = yyj710 > l
		} else {
			yyb710 = r.CheckBreak()
		}
		if yyb710 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj710-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym717 := z.EncBinary()
		_ = yym717
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep718 := !z.EncBinary()
			yy2arr718 := z.EncBasicHandle().StructToArray
			var yyq718 [4]bool
			_, _, _ = yysep718, yyq718, yy2arr718
			const yyr718 bool = false
			yyq718[1] = x.FSType != ""
			yyq718[2] = x.Partition != 0
			yyq718[3] = x.ReadOnly != false
			var yynn718 int
			if yyr718 || yy2arr718 {
				r.EncodeArrayStart(4)
			} else {
				yynn718 = 1
				for _, b := range yyq718 {
					if b {
						yynn718++
					}
				}
				r.EncodeMapStart(yynn718)
				yynn718 = 0
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym720 := z.EncBinary()
				_ = yym720
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym721 := z.EncBinary()
				_ = yym721
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq718[1] {
					yym723 := z.EncBinary()
					_ = yym723
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq718[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym724 := z.EncBinary()
					_ = yym724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq718[2] {
					yym726 := z.EncBinary()
					_ = yym726
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq718[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym727 := z.EncBinary()
					_ = yym727
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq718[3] {
					yym729 := z.EncBinary()
					_ = yym729
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq718[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym730 := z.EncBinary()
					_ = yym730
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym731 := z.DecBinary()
	_ = yym731
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct732 := r.ContainerType()
		if yyct732 == codecSelferValueTypeMap1234 {
			yyl732 := r.ReadMapStart()
			if yyl732 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl732, d)
			}
		} else if yyct732 == codecSelferValueTypeArray1234 {
			yyl732 := r.ReadArrayStart()
			if yyl732 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl732, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys733Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys733Slc
	var yyhl733 bool = l >= 0
	for yyj733 := 0; ; yyj733++ {
		if yyhl733 {
			if yyj733 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys733Slc = r.DecodeBytes(yys733Slc, true, true)
		yys733 := string(yys733Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys733 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys733)
		} // end switch yys733
	} // end for yyj733
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj738 int
	var yyb738 bool
	var yyhl738 bool = l >= 0
	yyj738++
	if yyhl738 {
		yyb738 = yyj738 > l
	} else {
		yyb738 = r.CheckBreak()
	}
	if yyb738 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj738++
	if yyhl738 {
		yyb738 = yyj738 > l
	} else {
		yyb738 = r.CheckBreak()
	}
	if yyb738 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj738++
	if yyhl738 {
		yyb738 = yyj738 > l
	} else {
		yyb738 = r.CheckBreak()
	}
	if yyb738 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj738++
	if yyhl738 {
		yyb738 = yyj738 > l
	} else {
		yyb738 = r.CheckBreak()
	}
	if yyb738 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj738++
		if yyhl738 {
			yyb738 = yyj738 > l
		} else {
			yyb738 = r.CheckBreak()
		}
		if yyb738 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj738-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym743 := z.EncBinary()
		_ = yym743
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep744 := !z.EncBinary()
			yy2arr744 := z.EncBasicHandle().StructToArray
			var yyq744 [3]bool
			_, _, _ = yysep744, yyq744, yy2arr744
			const yyr744 bool = false
			yyq744[1] = x.Revision != ""
			yyq744[2] = x.Directory != ""
			var yynn744 int
			if yyr744 || yy2arr744 {
				r.EncodeArrayStart(3)
			} else {
				yynn744 = 1
				for _, b := range yyq744 {
					if b {
						yynn744++
					}
				}
				r.EncodeMapStart(yynn744)
				yynn744 = 0
			}
			if yyr744 || yy2arr744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym746 := z.EncBinary()
				_ = yym746
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym747 := z.EncBinary()
				_ = yym747
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr744 || yy2arr744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq744[1] {
					yym749 := z.EncBinary()
					_ = yym749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq744[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym750 := z.EncBinary()
					_ = yym750
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr744 || yy2arr744 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq744[2] {
					yym752 := z.EncBinary()
					_ = yym752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq744[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym753 := z.EncBinary()
					_ = yym753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr744 || yy2arr744 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym754 := z.DecBinary()
	_ = yym754
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct755 := r.ContainerType()
		if yyct755 == codecSelferValueTypeMap1234 {
			yyl755 := r.ReadMapStart()
			if yyl755 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl755, d)
			}
		} else if yyct755 == codecSelferValueTypeArray1234 {
			yyl755 := r.ReadArrayStart()
			if yyl755 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl755, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys756Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys756Slc
	var yyhl756 bool = l >= 0
	for yyj756 := 0; ; yyj756++ {
		if yyhl756 {
			if yyj756 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys756Slc = r.DecodeBytes(yys756Slc, true, true)
		yys756 := string(yys756Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys756 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys756)
		} // end switch yys756
	} // end for yyj756
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj760 int
	var yyb760 bool
	var yyhl760 bool = l >= 0
	yyj760++
	if yyhl760 {
		yyb760 = yyj760 > l
	} else {
		yyb760 = r.CheckBreak()
	}
	if yyb760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj760++
	if yyhl760 {
		yyb760 = yyj760 > l
	} else {
		yyb760 = r.CheckBreak()
	}
	if yyb760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj760++
	if yyhl760 {
		yyb760 = yyj760 > l
	} else {
		yyb760 = r.CheckBreak()
	}
	if yyb760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj760++
		if yyhl760 {
			yyb760 = yyj760 > l
		} else {
			yyb760 = r.CheckBreak()
		}
		if yyb760 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj760-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym764 := z.EncBinary()
		_ = yym764
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep765 := !z.EncBinary()
			yy2arr765 := z.EncBasicHandle().StructToArray
			var yyq765 [2]bool
			_, _, _ = yysep765, yyq765, yy2arr765
			const yyr765 bool = false
			yyq765[0] = x.SecretName != ""
			yyq765[1] = len(x.Items) != 0
			var yynn765 int
			if yyr765 || yy2arr765 {
				r.EncodeArrayStart(2)
			} else {
				yynn765 = 0
				for _, b := range yyq765 {
					if b {
						yynn765++
					}
				}
				r.EncodeMapStart(yynn765)
				yynn765 = 0
			}
			if yyr765 || yy2arr765 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq765[0] {
					yym767 := z.EncBinary()
					_ = yym767
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq765[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym768 := z.EncBinary()
					_ = yym768
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr765 || yy2arr765 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq765[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym770 := z.EncBinary()
						_ = yym770
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq765[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym771 := z.EncBinary()
						_ = yym771
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr765 || yy2arr765 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym772 := z.DecBinary()
	_ = yym772
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct773 := r.ContainerType()
		if yyct773 == codecSelferValueTypeMap1234 {
			yyl773 := r.ReadMapStart()
			if yyl773 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl773, d)
			}
		} else if yyct773 == codecSelferValueTypeArray1234 {
			yyl773 := r.ReadArrayStart()
			if yyl773 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl773, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys774Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys774Slc
	var yyhl774 bool = l >= 0
	for yyj774 := 0; ; yyj774++ {
		if yyhl774 {
			if yyj774 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys774Slc = r.DecodeBytes(yys774Slc, true, true)
		yys774 := string(yys774Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys774 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv776 := &x.Items
				yym777 := z.DecBinary()
				_ = yym777
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv776), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys774)
		} // end switch yys774
	} // end for yyj774
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj778 int
	var yyb778 bool
	var yyhl778 bool = l >= 0
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv780 := &x.Items
		yym781 := z.DecBinary()
		_ = yym781
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv780), d)
		}
	}
	for {
		yyj778++
		if yyhl778 {
			yyb778 = yyj778 > l
		} else {
			yyb778 = r.CheckBreak()
		}
		if yyb778 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj778-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym782 := z.EncBinary()
		_ = yym782
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep783 := !z.EncBinary()
			yy2arr783 := z.EncBasicHandle().StructToArray
			var yyq783 [3]bool
			_, _, _ = yysep783, yyq783, yy2arr783
			const yyr783 bool = false
			yyq783[2] = x.ReadOnly != false
			var yynn783 int
			if yyr783 || yy2arr783 {
				r.EncodeArrayStart(3)
			} else {
				yynn783 = 2
				for _, b := range yyq783 {
					if b {
						yynn783++
					}
				}
				r.EncodeMapStart(yynn783)
				yynn783 = 0
			}
			if yyr783 || yy2arr783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym785 := z.EncBinary()
				_ = yym785
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym786 := z.EncBinary()
				_ = yym786
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr783 || yy2arr783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym788 := z.EncBinary()
				_ = yym788
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym789 := z.EncBinary()
				_ = yym789
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr783 || yy2arr783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq783[2] {
					yym791 := z.EncBinary()
					_ = yym791
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq783[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym792 := z.EncBinary()
					_ = yym792
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr783 || yy2arr783 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym793 := z.DecBinary()
	_ = yym793
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct794 := r.ContainerType()
		if yyct794 == codecSelferValueTypeMap1234 {
			yyl794 := r.ReadMapStart()
			if yyl794 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl794, d)
			}
		} else if yyct794 == codecSelferValueTypeArray1234 {
			yyl794 := r.ReadArrayStart()
			if yyl794 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl794, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys795Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys795Slc
	var yyhl795 bool = l >= 0
	for yyj795 := 0; ; yyj795++ {
		if yyhl795 {
			if yyj795 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys795Slc = r.DecodeBytes(yys795Slc, true, true)
		yys795 := string(yys795Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys795 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys795)
		} // end switch yys795
	} // end for yyj795
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj799 int
	var yyb799 bool
	var yyhl799 bool = l >= 0
	yyj799++
	if yyhl799 {
		yyb799 = yyj799 > l
	} else {
		yyb799 = r.CheckBreak()
	}
	if yyb799 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj799++
	if yyhl799 {
		yyb799 = yyj799 > l
	} else {
		yyb799 = r.CheckBreak()
	}
	if yyb799 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj799++
	if yyhl799 {
		yyb799 = yyj799 > l
	} else {
		yyb799 = r.CheckBreak()
	}
	if yyb799 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj799++
		if yyhl799 {
			yyb799 = yyj799 > l
		} else {
			yyb799 = r.CheckBreak()
		}
		if yyb799 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj799-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym803 := z.EncBinary()
		_ = yym803
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep804 := !z.EncBinary()
			yy2arr804 := z.EncBasicHandle().StructToArray
			var yyq804 [3]bool
			_, _, _ = yysep804, yyq804, yy2arr804
			const yyr804 bool = false
			yyq804[2] = x.ReadOnly != false
			var yynn804 int
			if yyr804 || yy2arr804 {
				r.EncodeArrayStart(3)
			} else {
				yynn804 = 2
				for _, b := range yyq804 {
					if b {
						yynn804++
					}
				}
				r.EncodeMapStart(yynn804)
				yynn804 = 0
			}
			if yyr804 || yy2arr804 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym806 := z.EncBinary()
				_ = yym806
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym807 := z.EncBinary()
				_ = yym807
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr804 || yy2arr804 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym809 := z.EncBinary()
				_ = yym809
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym810 := z.EncBinary()
				_ = yym810
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr804 || yy2arr804 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq804[2] {
					yym812 := z.EncBinary()
					_ = yym812
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq804[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym813 := z.EncBinary()
					_ = yym813
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr804 || yy2arr804 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym814 := z.DecBinary()
	_ = yym814
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct815 := r.ContainerType()
		if yyct815 == codecSelferValueTypeMap1234 {
			yyl815 := r.ReadMapStart()
			if yyl815 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl815, d)
			}
		} else if yyct815 == codecSelferValueTypeArray1234 {
			yyl815 := r.ReadArrayStart()
			if yyl815 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl815, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys816Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys816Slc
	var yyhl816 bool = l >= 0
	for yyj816 := 0; ; yyj816++ {
		if yyhl816 {
			if yyj816 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys816Slc = r.DecodeBytes(yys816Slc, true, true)
		yys816 := string(yys816Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys816 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys816)
		} // end switch yys816
	} // end for yyj816
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj820 int
	var yyb820 bool
	var yyhl820 bool = l >= 0
	yyj820++
	if yyhl820 {
		yyb820 = yyj820 > l
	} else {
		yyb820 = r.CheckBreak()
	}
	if yyb820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj820++
	if yyhl820 {
		yyb820 = yyj820 > l
	} else {
		yyb820 = r.CheckBreak()
	}
	if yyb820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj820++
	if yyhl820 {
		yyb820 = yyj820 > l
	} else {
		yyb820 = r.CheckBreak()
	}
	if yyb820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj820++
		if yyhl820 {
			yyb820 = yyj820 > l
		} else {
			yyb820 = r.CheckBreak()
		}
		if yyb820 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj820-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym824 := z.EncBinary()
		_ = yym824
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep825 := !z.EncBinary()
			yy2arr825 := z.EncBasicHandle().StructToArray
			var yyq825 [8]bool
			_, _, _ = yysep825, yyq825, yy2arr825
			const yyr825 bool = false
			yyq825[2] = x.FSType != ""
			yyq825[3] = x.RBDPool != ""
			yyq825[4] = x.RadosUser != ""
			yyq825[5] = x.Keyring != ""
			yyq825[6] = x.SecretRef != nil
			yyq825[7] = x.ReadOnly != false
			var yynn825 int
			if yyr825 || yy2arr825 {
				r.EncodeArrayStart(8)
			} else {
				yynn825 = 2
				for _, b := range yyq825 {
					if b {
						yynn825++
					}
				}
				r.EncodeMapStart(yynn825)
				yynn825 = 0
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym827 := z.EncBinary()
					_ = yym827
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym828 := z.EncBinary()
					_ = yym828
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym830 := z.EncBinary()
				_ = yym830
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym831 := z.EncBinary()
				_ = yym831
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq825[2] {
					yym833 := z.EncBinary()
					_ = yym833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq825[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym834 := z.EncBinary()
					_ = yym834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq825[3] {
					yym836 := z.EncBinary()
					_ = yym836
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq825[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym837 := z.EncBinary()
					_ = yym837
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq825[4] {
					yym839 := z.EncBinary()
					_ = yym839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq825[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym840 := z.EncBinary()
					_ = yym840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq825[5] {
					yym842 := z.EncBinary()
					_ = yym842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq825[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym843 := z.EncBinary()
					_ = yym843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq825[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq825[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq825[7] {
					yym846 := z.EncBinary()
					_ = yym846
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq825[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym847 := z.EncBinary()
					_ = yym847
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr825 || yy2arr825 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym848 := z.DecBinary()
	_ = yym848
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct849 := r.ContainerType()
		if yyct849 == codecSelferValueTypeMap1234 {
			yyl849 := r.ReadMapStart()
			if yyl849 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl849, d)
			}
		} else if yyct849 == codecSelferValueTypeArray1234 {
			yyl849 := r.ReadArrayStart()
			if yyl849 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl849, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys850Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys850Slc
	var yyhl850 bool = l >= 0
	for yyj850 := 0; ; yyj850++ {
		if yyhl850 {
			if yyj850 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys850Slc = r.DecodeBytes(yys850Slc, true, true)
		yys850 := string(yys850Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys850 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv851 := &x.CephMonitors
				yym852 := z.DecBinary()
				_ = yym852
				if false {
				} else {
					z.F.DecSliceStringX(yyv851, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys850)
		} // end switch yys850
	} // end for yyj850
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj860 int
	var yyb860 bool
	var yyhl860 bool = l >= 0
	yyj860++
	if yyhl860 {
		yyb860 = yyj860 > l
	} else {
		yyb860 = r.CheckBreak()
	}
	if yyb860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv861 := &x.CephMonitors
		yym862 := z.DecBinary()
		_ = yym862
		if false {
		} else {
			z.F.DecSliceStringX(yyv861, false, d)
		}
	}
	yyj860++
	if yyhl860 {
		yyb860 = yyj860 > l
	} else {
		yyb860 = r.CheckBreak()
	}
	if yyb860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj860++
	if yyhl860 {
		yyb860 = yyj860 > l
	} else {
		yyb860 = r.CheckBreak()
	}
	if yyb860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj860++
	if yyhl860 {
		yyb860 = yyj860 > l
	} else {
		yyb860 = r.CheckBreak()
	}
	if yyb860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj860++
	if yyhl860 {
		yyb860 = yyj860 > l
	} else {
		yyb860 = r.CheckBreak()
	}
	if yyb860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj860++
	if yyhl860 {
		yyb860 = yyj860 > l
	} else {
		yyb860 = r.CheckBreak()
	}
	if yyb860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj860++
	if yyhl860 {
		yyb860 = yyj860 > l
	} else {
		yyb860 = r.CheckBreak()
	}
	if yyb860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj860++
	if yyhl860 {
		yyb860 = yyj860 > l
	} else {
		yyb860 = r.CheckBreak()
	}
	if yyb860 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj860++
		if yyhl860 {
			yyb860 = yyj860 > l
		} else {
			yyb860 = r.CheckBreak()
		}
		if yyb860 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj860-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym870 := z.EncBinary()
		_ = yym870
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep871 := !z.EncBinary()
			yy2arr871 := z.EncBasicHandle().StructToArray
			var yyq871 [3]bool
			_, _, _ = yysep871, yyq871, yy2arr871
			const yyr871 bool = false
			yyq871[1] = x.FSType != ""
			yyq871[2] = x.ReadOnly != false
			var yynn871 int
			if yyr871 || yy2arr871 {
				r.EncodeArrayStart(3)
			} else {
				yynn871 = 1
				for _, b := range yyq871 {
					if b {
						yynn871++
					}
				}
				r.EncodeMapStart(yynn871)
				yynn871 = 0
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym873 := z.EncBinary()
				_ = yym873
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym874 := z.EncBinary()
				_ = yym874
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq871[1] {
					yym876 := z.EncBinary()
					_ = yym876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq871[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym877 := z.EncBinary()
					_ = yym877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq871[2] {
					yym879 := z.EncBinary()
					_ = yym879
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq871[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym880 := z.EncBinary()
					_ = yym880
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym881 := z.DecBinary()
	_ = yym881
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct882 := r.ContainerType()
		if yyct882 == codecSelferValueTypeMap1234 {
			yyl882 := r.ReadMapStart()
			if yyl882 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl882, d)
			}
		} else if yyct882 == codecSelferValueTypeArray1234 {
			yyl882 := r.ReadArrayStart()
			if yyl882 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl882, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys883Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys883Slc
	var yyhl883 bool = l >= 0
	for yyj883 := 0; ; yyj883++ {
		if yyhl883 {
			if yyj883 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys883Slc = r.DecodeBytes(yys883Slc, true, true)
		yys883 := string(yys883Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys883 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys883)
		} // end switch yys883
	} // end for yyj883
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj887 int
	var yyb887 bool
	var yyhl887 bool = l >= 0
	yyj887++
	if yyhl887 {
		yyb887 = yyj887 > l
	} else {
		yyb887 = r.CheckBreak()
	}
	if yyb887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj887++
	if yyhl887 {
		yyb887 = yyj887 > l
	} else {
		yyb887 = r.CheckBreak()
	}
	if yyb887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj887++
	if yyhl887 {
		yyb887 = yyj887 > l
	} else {
		yyb887 = r.CheckBreak()
	}
	if yyb887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj887++
		if yyhl887 {
			yyb887 = yyj887 > l
		} else {
			yyb887 = r.CheckBreak()
		}
		if yyb887 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj887-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym891 := z.EncBinary()
		_ = yym891
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep892 := !z.EncBinary()
			yy2arr892 := z.EncBasicHandle().StructToArray
			var yyq892 [6]bool
			_, _, _ = yysep892, yyq892, yy2arr892
			const yyr892 bool = false
			yyq892[1] = x.Path != ""
			yyq892[2] = x.User != ""
			yyq892[3] = x.SecretFile != ""
			yyq892[4] = x.SecretRef != nil
			yyq892[5] = x.ReadOnly != false
			var yynn892 int
			if yyr892 || yy2arr892 {
				r.EncodeArrayStart(6)
			} else {
				yynn892 = 1
				for _, b := range yyq892 {
					if b {
						yynn892++
					}
				}
				r.EncodeMapStart(yynn892)
				yynn892 = 0
			}
			if yyr892 || yy2arr892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym894 := z.EncBinary()
					_ = yym894
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym895 := z.EncBinary()
					_ = yym895
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr892 || yy2arr892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq892[1] {
					yym897 := z.EncBinary()
					_ = yym897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq892[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym898 := z.EncBinary()
					_ = yym898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr892 || yy2arr892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq892[2] {
					yym900 := z.EncBinary()
					_ = yym900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq892[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym901 := z.EncBinary()
					_ = yym901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr892 || yy2arr892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq892[3] {
					yym903 := z.EncBinary()
					_ = yym903
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq892[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym904 := z.EncBinary()
					_ = yym904
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr892 || yy2arr892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq892[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq892[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr892 || yy2arr892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq892[5] {
					yym907 := z.EncBinary()
					_ = yym907
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq892[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym908 := z.EncBinary()
					_ = yym908
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr892 || yy2arr892 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym909 := z.DecBinary()
	_ = yym909
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct910 := r.ContainerType()
		if yyct910 == codecSelferValueTypeMap1234 {
			yyl910 := r.ReadMapStart()
			if yyl910 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl910, d)
			}
		} else if yyct910 == codecSelferValueTypeArray1234 {
			yyl910 := r.ReadArrayStart()
			if yyl910 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl910, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys911Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys911Slc
	var yyhl911 bool = l >= 0
	for yyj911 := 0; ; yyj911++ {
		if yyhl911 {
			if yyj911 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys911Slc = r.DecodeBytes(yys911Slc, true, true)
		yys911 := string(yys911Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys911 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv912 := &x.Monitors
				yym913 := z.DecBinary()
				_ = yym913
				if false {
				} else {
					z.F.DecSliceStringX(yyv912, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys911)
		} // end switch yys911
	} // end for yyj911
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj919 int
	var yyb919 bool
	var yyhl919 bool = l >= 0
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv920 := &x.Monitors
		yym921 := z.DecBinary()
		_ = yym921
		if false {
		} else {
			z.F.DecSliceStringX(yyv920, false, d)
		}
	}
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj919++
		if yyhl919 {
			yyb919 = yyj919 > l
		} else {
			yyb919 = r.CheckBreak()
		}
		if yyb919 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj919-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym927 := z.EncBinary()
		_ = yym927
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep928 := !z.EncBinary()
			yy2arr928 := z.EncBasicHandle().StructToArray
			var yyq928 [1]bool
			_, _, _ = yysep928, yyq928, yy2arr928
			const yyr928 bool = false
			var yynn928 int
			if yyr928 || yy2arr928 {
				r.EncodeArrayStart(1)
			} else {
				yynn928 = 1
				for _, b := range yyq928 {
					if b {
						yynn928++
					}
				}
				r.EncodeMapStart(yynn928)
				yynn928 = 0
			}
			if yyr928 || yy2arr928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym930 := z.EncBinary()
				_ = yym930
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym931 := z.EncBinary()
				_ = yym931
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr928 || yy2arr928 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym932 := z.DecBinary()
	_ = yym932
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct933 := r.ContainerType()
		if yyct933 == codecSelferValueTypeMap1234 {
			yyl933 := r.ReadMapStart()
			if yyl933 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl933, d)
			}
		} else if yyct933 == codecSelferValueTypeArray1234 {
			yyl933 := r.ReadArrayStart()
			if yyl933 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl933, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys934Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys934Slc
	var yyhl934 bool = l >= 0
	for yyj934 := 0; ; yyj934++ {
		if yyhl934 {
			if yyj934 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys934Slc = r.DecodeBytes(yys934Slc, true, true)
		yys934 := string(yys934Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys934 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys934)
		} // end switch yys934
	} // end for yyj934
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj936 int
	var yyb936 bool
	var yyhl936 bool = l >= 0
	yyj936++
	if yyhl936 {
		yyb936 = yyj936 > l
	} else {
		yyb936 = r.CheckBreak()
	}
	if yyb936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj936++
		if yyhl936 {
			yyb936 = yyj936 > l
		} else {
			yyb936 = r.CheckBreak()
		}
		if yyb936 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj936-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym938 := z.EncBinary()
		_ = yym938
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep939 := !z.EncBinary()
			yy2arr939 := z.EncBasicHandle().StructToArray
			var yyq939 [1]bool
			_, _, _ = yysep939, yyq939, yy2arr939
			const yyr939 bool = false
			yyq939[0] = len(x.Items) != 0
			var yynn939 int
			if yyr939 || yy2arr939 {
				r.EncodeArrayStart(1)
			} else {
				yynn939 = 0
				for _, b := range yyq939 {
					if b {
						yynn939++
					}
				}
				r.EncodeMapStart(yynn939)
				yynn939 = 0
			}
			if yyr939 || yy2arr939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq939[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym941 := z.EncBinary()
						_ = yym941
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq939[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym942 := z.EncBinary()
						_ = yym942
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr939 || yy2arr939 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym943 := z.DecBinary()
	_ = yym943
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct944 := r.ContainerType()
		if yyct944 == codecSelferValueTypeMap1234 {
			yyl944 := r.ReadMapStart()
			if yyl944 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl944, d)
			}
		} else if yyct944 == codecSelferValueTypeArray1234 {
			yyl944 := r.ReadArrayStart()
			if yyl944 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl944, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys945Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys945Slc
	var yyhl945 bool = l >= 0
	for yyj945 := 0; ; yyj945++ {
		if yyhl945 {
			if yyj945 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys945Slc = r.DecodeBytes(yys945Slc, true, true)
		yys945 := string(yys945Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys945 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv946 := &x.Items
				yym947 := z.DecBinary()
				_ = yym947
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv946), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys945)
		} // end switch yys945
	} // end for yyj945
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj948 int
	var yyb948 bool
	var yyhl948 bool = l >= 0
	yyj948++
	if yyhl948 {
		yyb948 = yyj948 > l
	} else {
		yyb948 = r.CheckBreak()
	}
	if yyb948 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv949 := &x.Items
		yym950 := z.DecBinary()
		_ = yym950
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv949), d)
		}
	}
	for {
		yyj948++
		if yyhl948 {
			yyb948 = yyj948 > l
		} else {
			yyb948 = r.CheckBreak()
		}
		if yyb948 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj948-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym951 := z.EncBinary()
		_ = yym951
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep952 := !z.EncBinary()
			yy2arr952 := z.EncBasicHandle().StructToArray
			var yyq952 [3]bool
			_, _, _ = yysep952, yyq952, yy2arr952
			const yyr952 bool = false
			yyq952[1] = x.FieldRef != nil
			yyq952[2] = x.ResourceFieldRef != nil
			var yynn952 int
			if yyr952 || yy2arr952 {
				r.EncodeArrayStart(3)
			} else {
				yynn952 = 1
				for _, b := range yyq952 {
					if b {
						yynn952++
					}
				}
				r.EncodeMapStart(yynn952)
				yynn952 = 0
			}
			if yyr952 || yy2arr952 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym954 := z.EncBinary()
				_ = yym954
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym955 := z.EncBinary()
				_ = yym955
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr952 || yy2arr952 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq952[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq952[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr952 || yy2arr952 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq952[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq952[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr952 || yy2arr952 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym958 := z.DecBinary()
	_ = yym958
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct959 := r.ContainerType()
		if yyct959 == codecSelferValueTypeMap1234 {
			yyl959 := r.ReadMapStart()
			if yyl959 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl959, d)
			}
		} else if yyct959 == codecSelferValueTypeArray1234 {
			yyl959 := r.ReadArrayStart()
			if yyl959 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl959, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys960Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys960Slc
	var yyhl960 bool = l >= 0
	for yyj960 := 0; ; yyj960++ {
		if yyhl960 {
			if yyj960 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys960Slc = r.DecodeBytes(yys960Slc, true, true)
		yys960 := string(yys960Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys960 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys960)
		} // end switch yys960
	} // end for yyj960
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj964 int
	var yyb964 bool
	var yyhl964 bool = l >= 0
	yyj964++
	if yyhl964 {
		yyb964 = yyj964 > l
	} else {
		yyb964 = r.CheckBreak()
	}
	if yyb964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj964++
	if yyhl964 {
		yyb964 = yyj964 > l
	} else {
		yyb964 = r.CheckBreak()
	}
	if yyb964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj964++
	if yyhl964 {
		yyb964 = yyj964 > l
	} else {
		yyb964 = r.CheckBreak()
	}
	if yyb964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj964++
		if yyhl964 {
			yyb964 = yyj964 > l
		} else {
			yyb964 = r.CheckBreak()
		}
		if yyb964 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj964-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym968 := z.EncBinary()
		_ = yym968
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep969 := !z.EncBinary()
			yy2arr969 := z.EncBasicHandle().StructToArray
			var yyq969 [3]bool
			_, _, _ = yysep969, yyq969, yy2arr969
			const yyr969 bool = false
			yyq969[2] = x.ReadOnly != false
			var yynn969 int
			if yyr969 || yy2arr969 {
				r.EncodeArrayStart(3)
			} else {
				yynn969 = 2
				for _, b := range yyq969 {
					if b {
						yynn969++
					}
				}
				r.EncodeMapStart(yynn969)
				yynn969 = 0
			}
			if yyr969 || yy2arr969 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym971 := z.EncBinary()
				_ = yym971
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym972 := z.EncBinary()
				_ = yym972
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr969 || yy2arr969 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym974 := z.EncBinary()
				_ = yym974
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym975 := z.EncBinary()
				_ = yym975
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr969 || yy2arr969 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq969[2] {
					yym977 := z.EncBinary()
					_ = yym977
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq969[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym978 := z.EncBinary()
					_ = yym978
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr969 || yy2arr969 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym979 := z.DecBinary()
	_ = yym979
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct980 := r.ContainerType()
		if yyct980 == codecSelferValueTypeMap1234 {
			yyl980 := r.ReadMapStart()
			if yyl980 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl980, d)
			}
		} else if yyct980 == codecSelferValueTypeArray1234 {
			yyl980 := r.ReadArrayStart()
			if yyl980 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl980, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys981Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys981Slc
	var yyhl981 bool = l >= 0
	for yyj981 := 0; ; yyj981++ {
		if yyhl981 {
			if yyj981 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys981Slc = r.DecodeBytes(yys981Slc, true, true)
		yys981 := string(yys981Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys981 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys981)
		} // end switch yys981
	} // end for yyj981
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj985 int
	var yyb985 bool
	var yyhl985 bool = l >= 0
	yyj985++
	if yyhl985 {
		yyb985 = yyj985 > l
	} else {
		yyb985 = r.CheckBreak()
	}
	if yyb985 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj985++
	if yyhl985 {
		yyb985 = yyj985 > l
	} else {
		yyb985 = r.CheckBreak()
	}
	if yyb985 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj985++
	if yyhl985 {
		yyb985 = yyj985 > l
	} else {
		yyb985 = r.CheckBreak()
	}
	if yyb985 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj985++
		if yyhl985 {
			yyb985 = yyj985 > l
		} else {
			yyb985 = r.CheckBreak()
		}
		if yyb985 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj985-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym989 := z.EncBinary()
		_ = yym989
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep990 := !z.EncBinary()
			yy2arr990 := z.EncBasicHandle().StructToArray
			var yyq990 [2]bool
			_, _, _ = yysep990, yyq990, yy2arr990
			const yyr990 bool = false
			yyq990[1] = x.FSType != ""
			var yynn990 int
			if yyr990 || yy2arr990 {
				r.EncodeArrayStart(2)
			} else {
				yynn990 = 1
				for _, b := range yyq990 {
					if b {
						yynn990++
					}
				}
				r.EncodeMapStart(yynn990)
				yynn990 = 0
			}
			if yyr990 || yy2arr990 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym992 := z.EncBinary()
				_ = yym992
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym993 := z.EncBinary()
				_ = yym993
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr990 || yy2arr990 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq990[1] {
					yym995 := z.EncBinary()
					_ = yym995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq990[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym996 := z.EncBinary()
					_ = yym996
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr990 || yy2arr990 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym997 := z.DecBinary()
	_ = yym997
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct998 := r.ContainerType()
		if yyct998 == codecSelferValueTypeMap1234 {
			yyl998 := r.ReadMapStart()
			if yyl998 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl998, d)
			}
		} else if yyct998 == codecSelferValueTypeArray1234 {
			yyl998 := r.ReadArrayStart()
			if yyl998 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl998, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys999Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys999Slc
	var yyhl999 bool = l >= 0
	for yyj999 := 0; ; yyj999++ {
		if yyhl999 {
			if yyj999 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys999Slc = r.DecodeBytes(yys999Slc, true, true)
		yys999 := string(yys999Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys999 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys999)
		} // end switch yys999
	} // end for yyj999
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1002 int
	var yyb1002 bool
	var yyhl1002 bool = l >= 0
	yyj1002++
	if yyhl1002 {
		yyb1002 = yyj1002 > l
	} else {
		yyb1002 = r.CheckBreak()
	}
	if yyb1002 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1002++
	if yyhl1002 {
		yyb1002 = yyj1002 > l
	} else {
		yyb1002 = r.CheckBreak()
	}
	if yyb1002 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1002++
		if yyhl1002 {
			yyb1002 = yyj1002 > l
		} else {
			yyb1002 = r.CheckBreak()
		}
		if yyb1002 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1002-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1005 := z.EncBinary()
		_ = yym1005
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1006 := !z.EncBinary()
			yy2arr1006 := z.EncBasicHandle().StructToArray
			var yyq1006 [2]bool
			_, _, _ = yysep1006, yyq1006, yy2arr1006
			const yyr1006 bool = false
			yyq1006[1] = len(x.Items) != 0
			var yynn1006 int
			if yyr1006 || yy2arr1006 {
				r.EncodeArrayStart(2)
			} else {
				yynn1006 = 1
				for _, b := range yyq1006 {
					if b {
						yynn1006++
					}
				}
				r.EncodeMapStart(yynn1006)
				yynn1006 = 0
			}
			if yyr1006 || yy2arr1006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1008 := z.EncBinary()
				_ = yym1008
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1009 := z.EncBinary()
				_ = yym1009
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1006 || yy2arr1006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1006[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1011 := z.EncBinary()
						_ = yym1011
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1006[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1012 := z.EncBinary()
						_ = yym1012
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1006 || yy2arr1006 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1013 := z.DecBinary()
	_ = yym1013
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1014 := r.ContainerType()
		if yyct1014 == codecSelferValueTypeMap1234 {
			yyl1014 := r.ReadMapStart()
			if yyl1014 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1014, d)
			}
		} else if yyct1014 == codecSelferValueTypeArray1234 {
			yyl1014 := r.ReadArrayStart()
			if yyl1014 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1014, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1015Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1015Slc
	var yyhl1015 bool = l >= 0
	for yyj1015 := 0; ; yyj1015++ {
		if yyhl1015 {
			if yyj1015 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1015Slc = r.DecodeBytes(yys1015Slc, true, true)
		yys1015 := string(yys1015Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1015 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1017 := &x.Items
				yym1018 := z.DecBinary()
				_ = yym1018
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1017), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1015)
		} // end switch yys1015
	} // end for yyj1015
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1019 int
	var yyb1019 bool
	var yyhl1019 bool = l >= 0
	yyj1019++
	if yyhl1019 {
		yyb1019 = yyj1019 > l
	} else {
		yyb1019 = r.CheckBreak()
	}
	if yyb1019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1019++
	if yyhl1019 {
		yyb1019 = yyj1019 > l
	} else {
		yyb1019 = r.CheckBreak()
	}
	if yyb1019 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1021 := &x.Items
		yym1022 := z.DecBinary()
		_ = yym1022
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1021), d)
		}
	}
	for {
		yyj1019++
		if yyhl1019 {
			yyb1019 = yyj1019 > l
		} else {
			yyb1019 = r.CheckBreak()
		}
		if yyb1019 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1019-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1023 := z.EncBinary()
		_ = yym1023
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1024 := !z.EncBinary()
			yy2arr1024 := z.EncBasicHandle().StructToArray
			var yyq1024 [2]bool
			_, _, _ = yysep1024, yyq1024, yy2arr1024
			const yyr1024 bool = false
			yyq1024[1] = len(x.Options) != 0
			var yynn1024 int
			if yyr1024 || yy2arr1024 {
				r.EncodeArrayStart(2)
			} else {
				yynn1024 = 1
				for _, b := range yyq1024 {
					if b {
						yynn1024++
					}
				}
				r.EncodeMapStart(yynn1024)
				yynn1024 = 0
			}
			if yyr1024 || yy2arr1024 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1026 := z.EncBinary()
				_ = yym1026
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1027 := z.EncBinary()
				_ = yym1027
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr1024 || yy2arr1024 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1024[1] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym1029 := z.EncBinary()
						_ = yym1029
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1024[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym1030 := z.EncBinary()
						_ = yym1030
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr1024 || yy2arr1024 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1031 := z.DecBinary()
	_ = yym1031
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1032 := r.ContainerType()
		if yyct1032 == codecSelferValueTypeMap1234 {
			yyl1032 := r.ReadMapStart()
			if yyl1032 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1032, d)
			}
		} else if yyct1032 == codecSelferValueTypeArray1234 {
			yyl1032 := r.ReadArrayStart()
			if yyl1032 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1032, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1033Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1033Slc
	var yyhl1033 bool = l >= 0
	for yyj1033 := 0; ; yyj1033++ {
		if yyhl1033 {
			if yyj1033 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1033Slc = r.DecodeBytes(yys1033Slc, true, true)
		yys1033 := string(yys1033Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1033 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv1035 := &x.Options
				yym1036 := z.DecBinary()
				_ = yym1036
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1035, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1033)
		} // end switch yys1033
	} // end for yyj1033
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1037 int
	var yyb1037 bool
	var yyhl1037 bool = l >= 0
	yyj1037++
	if yyhl1037 {
		yyb1037 = yyj1037 > l
	} else {
		yyb1037 = r.CheckBreak()
	}
	if yyb1037 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj1037++
	if yyhl1037 {
		yyb1037 = yyj1037 > l
	} else {
		yyb1037 = r.CheckBreak()
	}
	if yyb1037 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv1039 := &x.Options
		yym1040 := z.DecBinary()
		_ = yym1040
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1039, false, d)
		}
	}
	for {
		yyj1037++
		if yyhl1037 {
			yyb1037 = yyj1037 > l
		} else {
			yyb1037 = r.CheckBreak()
		}
		if yyb1037 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1037-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1041 := z.EncBinary()
		_ = yym1041
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1042 := !z.EncBinary()
			yy2arr1042 := z.EncBasicHandle().StructToArray
			var yyq1042 [2]bool
			_, _, _ = yysep1042, yyq1042, yy2arr1042
			const yyr1042 bool = false
			var yynn1042 int
			if yyr1042 || yy2arr1042 {
				r.EncodeArrayStart(2)
			} else {
				yynn1042 = 2
				for _, b := range yyq1042 {
					if b {
						yynn1042++
					}
				}
				r.EncodeMapStart(yynn1042)
				yynn1042 = 0
			}
			if yyr1042 || yy2arr1042 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1044 := z.EncBinary()
				_ = yym1044
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1045 := z.EncBinary()
				_ = yym1045
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1042 || yy2arr1042 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1047 := z.EncBinary()
				_ = yym1047
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1048 := z.EncBinary()
				_ = yym1048
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1042 || yy2arr1042 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1049 := z.DecBinary()
	_ = yym1049
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1050 := r.ContainerType()
		if yyct1050 == codecSelferValueTypeMap1234 {
			yyl1050 := r.ReadMapStart()
			if yyl1050 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1050, d)
			}
		} else if yyct1050 == codecSelferValueTypeArray1234 {
			yyl1050 := r.ReadArrayStart()
			if yyl1050 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1050, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1051Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1051Slc
	var yyhl1051 bool = l >= 0
	for yyj1051 := 0; ; yyj1051++ {
		if yyhl1051 {
			if yyj1051 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1051Slc = r.DecodeBytes(yys1051Slc, true, true)
		yys1051 := string(yys1051Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1051 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1051)
		} // end switch yys1051
	} // end for yyj1051
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1054 int
	var yyb1054 bool
	var yyhl1054 bool = l >= 0
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1054++
	if yyhl1054 {
		yyb1054 = yyj1054 > l
	} else {
		yyb1054 = r.CheckBreak()
	}
	if yyb1054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj1054++
		if yyhl1054 {
			yyb1054 = yyj1054 > l
		} else {
			yyb1054 = r.CheckBreak()
		}
		if yyb1054 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1054-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1057 := z.EncBinary()
		_ = yym1057
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1058 := !z.EncBinary()
			yy2arr1058 := z.EncBasicHandle().StructToArray
			var yyq1058 [5]bool
			_, _, _ = yysep1058, yyq1058, yy2arr1058
			const yyr1058 bool = false
			yyq1058[0] = x.Name != ""
			yyq1058[1] = x.HostPort != 0
			yyq1058[3] = x.Protocol != ""
			yyq1058[4] = x.HostIP != ""
			var yynn1058 int
			if yyr1058 || yy2arr1058 {
				r.EncodeArrayStart(5)
			} else {
				yynn1058 = 1
				for _, b := range yyq1058 {
					if b {
						yynn1058++
					}
				}
				r.EncodeMapStart(yynn1058)
				yynn1058 = 0
			}
			if yyr1058 || yy2arr1058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1058[0] {
					yym1060 := z.EncBinary()
					_ = yym1060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1058[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1061 := z.EncBinary()
					_ = yym1061
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1058 || yy2arr1058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1058[1] {
					yym1063 := z.EncBinary()
					_ = yym1063
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1058[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1064 := z.EncBinary()
					_ = yym1064
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1058 || yy2arr1058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1066 := z.EncBinary()
				_ = yym1066
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1067 := z.EncBinary()
				_ = yym1067
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1058 || yy2arr1058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1058[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1058[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1058 || yy2arr1058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1058[4] {
					yym1070 := z.EncBinary()
					_ = yym1070
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1058[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1071 := z.EncBinary()
					_ = yym1071
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1058 || yy2arr1058 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1072 := z.DecBinary()
	_ = yym1072
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1073 := r.ContainerType()
		if yyct1073 == codecSelferValueTypeMap1234 {
			yyl1073 := r.ReadMapStart()
			if yyl1073 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1073, d)
			}
		} else if yyct1073 == codecSelferValueTypeArray1234 {
			yyl1073 := r.ReadArrayStart()
			if yyl1073 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1073, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1074Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1074Slc
	var yyhl1074 bool = l >= 0
	for yyj1074 := 0; ; yyj1074++ {
		if yyhl1074 {
			if yyj1074 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1074Slc = r.DecodeBytes(yys1074Slc, true, true)
		yys1074 := string(yys1074Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1074 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1074)
		} // end switch yys1074
	} // end for yyj1074
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1080 int
	var yyb1080 bool
	var yyhl1080 bool = l >= 0
	yyj1080++
	if yyhl1080 {
		yyb1080 = yyj1080 > l
	} else {
		yyb1080 = r.CheckBreak()
	}
	if yyb1080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1080++
	if yyhl1080 {
		yyb1080 = yyj1080 > l
	} else {
		yyb1080 = r.CheckBreak()
	}
	if yyb1080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1080++
	if yyhl1080 {
		yyb1080 = yyj1080 > l
	} else {
		yyb1080 = r.CheckBreak()
	}
	if yyb1080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1080++
	if yyhl1080 {
		yyb1080 = yyj1080 > l
	} else {
		yyb1080 = r.CheckBreak()
	}
	if yyb1080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1080++
	if yyhl1080 {
		yyb1080 = yyj1080 > l
	} else {
		yyb1080 = r.CheckBreak()
	}
	if yyb1080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1080++
		if yyhl1080 {
			yyb1080 = yyj1080 > l
		} else {
			yyb1080 = r.CheckBreak()
		}
		if yyb1080 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1080-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1086 := z.EncBinary()
		_ = yym1086
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1087 := !z.EncBinary()
			yy2arr1087 := z.EncBasicHandle().StructToArray
			var yyq1087 [4]bool
			_, _, _ = yysep1087, yyq1087, yy2arr1087
			const yyr1087 bool = false
			yyq1087[1] = x.ReadOnly != false
			yyq1087[3] = x.SubPath != ""
			var yynn1087 int
			if yyr1087 || yy2arr1087 {
				r.EncodeArrayStart(4)
			} else {
				yynn1087 = 2
				for _, b := range yyq1087 {
					if b {
						yynn1087++
					}
				}
				r.EncodeMapStart(yynn1087)
				yynn1087 = 0
			}
			if yyr1087 || yy2arr1087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1089 := z.EncBinary()
				_ = yym1089
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1090 := z.EncBinary()
				_ = yym1090
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1087 || yy2arr1087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1087[1] {
					yym1092 := z.EncBinary()
					_ = yym1092
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1087[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1093 := z.EncBinary()
					_ = yym1093
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1087 || yy2arr1087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1095 := z.EncBinary()
				_ = yym1095
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1096 := z.EncBinary()
				_ = yym1096
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1087 || yy2arr1087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1087[3] {
					yym1098 := z.EncBinary()
					_ = yym1098
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1087[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1099 := z.EncBinary()
					_ = yym1099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1087 || yy2arr1087 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1100 := z.DecBinary()
	_ = yym1100
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1101 := r.ContainerType()
		if yyct1101 == codecSelferValueTypeMap1234 {
			yyl1101 := r.ReadMapStart()
			if yyl1101 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1101, d)
			}
		} else if yyct1101 == codecSelferValueTypeArray1234 {
			yyl1101 := r.ReadArrayStart()
			if yyl1101 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1101, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1102Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1102Slc
	var yyhl1102 bool = l >= 0
	for yyj1102 := 0; ; yyj1102++ {
		if yyhl1102 {
			if yyj1102 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1102Slc = r.DecodeBytes(yys1102Slc, true, true)
		yys1102 := string(yys1102Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1102 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1102)
		} // end switch yys1102
	} // end for yyj1102
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1107 int
	var yyb1107 bool
	var yyhl1107 bool = l >= 0
	yyj1107++
	if yyhl1107 {
		yyb1107 = yyj1107 > l
	} else {
		yyb1107 = r.CheckBreak()
	}
	if yyb1107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1107++
	if yyhl1107 {
		yyb1107 = yyj1107 > l
	} else {
		yyb1107 = r.CheckBreak()
	}
	if yyb1107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1107++
	if yyhl1107 {
		yyb1107 = yyj1107 > l
	} else {
		yyb1107 = r.CheckBreak()
	}
	if yyb1107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1107++
	if yyhl1107 {
		yyb1107 = yyj1107 > l
	} else {
		yyb1107 = r.CheckBreak()
	}
	if yyb1107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1107++
		if yyhl1107 {
			yyb1107 = yyj1107 > l
		} else {
			yyb1107 = r.CheckBreak()
		}
		if yyb1107 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1107-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1112 := z.EncBinary()
		_ = yym1112
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1113 := !z.EncBinary()
			yy2arr1113 := z.EncBasicHandle().StructToArray
			var yyq1113 [3]bool
			_, _, _ = yysep1113, yyq1113, yy2arr1113
			const yyr1113 bool = false
			yyq1113[1] = x.Value != ""
			yyq1113[2] = x.ValueFrom != nil
			var yynn1113 int
			if yyr1113 || yy2arr1113 {
				r.EncodeArrayStart(3)
			} else {
				yynn1113 = 1
				for _, b := range yyq1113 {
					if b {
						yynn1113++
					}
				}
				r.EncodeMapStart(yynn1113)
				yynn1113 = 0
			}
			if yyr1113 || yy2arr1113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1115 := z.EncBinary()
				_ = yym1115
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1116 := z.EncBinary()
				_ = yym1116
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1113 || yy2arr1113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1113[1] {
					yym1118 := z.EncBinary()
					_ = yym1118
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1113[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1119 := z.EncBinary()
					_ = yym1119
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1113 || yy2arr1113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1113[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1113[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1113 || yy2arr1113 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1121 := z.DecBinary()
	_ = yym1121
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1122 := r.ContainerType()
		if yyct1122 == codecSelferValueTypeMap1234 {
			yyl1122 := r.ReadMapStart()
			if yyl1122 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1122, d)
			}
		} else if yyct1122 == codecSelferValueTypeArray1234 {
			yyl1122 := r.ReadArrayStart()
			if yyl1122 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1122, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1123Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1123Slc
	var yyhl1123 bool = l >= 0
	for yyj1123 := 0; ; yyj1123++ {
		if yyhl1123 {
			if yyj1123 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1123Slc = r.DecodeBytes(yys1123Slc, true, true)
		yys1123 := string(yys1123Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1123 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1123)
		} // end switch yys1123
	} // end for yyj1123
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1127 int
	var yyb1127 bool
	var yyhl1127 bool = l >= 0
	yyj1127++
	if yyhl1127 {
		yyb1127 = yyj1127 > l
	} else {
		yyb1127 = r.CheckBreak()
	}
	if yyb1127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1127++
	if yyhl1127 {
		yyb1127 = yyj1127 > l
	} else {
		yyb1127 = r.CheckBreak()
	}
	if yyb1127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1127++
	if yyhl1127 {
		yyb1127 = yyj1127 > l
	} else {
		yyb1127 = r.CheckBreak()
	}
	if yyb1127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1127++
		if yyhl1127 {
			yyb1127 = yyj1127 > l
		} else {
			yyb1127 = r.CheckBreak()
		}
		if yyb1127 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1127-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1131 := z.EncBinary()
		_ = yym1131
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1132 := !z.EncBinary()
			yy2arr1132 := z.EncBasicHandle().StructToArray
			var yyq1132 [4]bool
			_, _, _ = yysep1132, yyq1132, yy2arr1132
			const yyr1132 bool = false
			yyq1132[0] = x.FieldRef != nil
			yyq1132[1] = x.ResourceFieldRef != nil
			yyq1132[2] = x.ConfigMapKeyRef != nil
			yyq1132[3] = x.SecretKeyRef != nil
			var yynn1132 int
			if yyr1132 || yy2arr1132 {
				r.EncodeArrayStart(4)
			} else {
				yynn1132 = 0
				for _, b := range yyq1132 {
					if b {
						yynn1132++
					}
				}
				r.EncodeMapStart(yynn1132)
				yynn1132 = 0
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1132[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1132[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1132[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1132[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1132[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1132[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1132[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1132[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1132 || yy2arr1132 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1137 := z.DecBinary()
	_ = yym1137
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1138 := r.ContainerType()
		if yyct1138 == codecSelferValueTypeMap1234 {
			yyl1138 := r.ReadMapStart()
			if yyl1138 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1138, d)
			}
		} else if yyct1138 == codecSelferValueTypeArray1234 {
			yyl1138 := r.ReadArrayStart()
			if yyl1138 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1138, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1139Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1139Slc
	var yyhl1139 bool = l >= 0
	for yyj1139 := 0; ; yyj1139++ {
		if yyhl1139 {
			if yyj1139 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1139Slc = r.DecodeBytes(yys1139Slc, true, true)
		yys1139 := string(yys1139Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1139 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1139)
		} // end switch yys1139
	} // end for yyj1139
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1144 int
	var yyb1144 bool
	var yyhl1144 bool = l >= 0
	yyj1144++
	if yyhl1144 {
		yyb1144 = yyj1144 > l
	} else {
		yyb1144 = r.CheckBreak()
	}
	if yyb1144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1144++
	if yyhl1144 {
		yyb1144 = yyj1144 > l
	} else {
		yyb1144 = r.CheckBreak()
	}
	if yyb1144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1144++
	if yyhl1144 {
		yyb1144 = yyj1144 > l
	} else {
		yyb1144 = r.CheckBreak()
	}
	if yyb1144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1144++
	if yyhl1144 {
		yyb1144 = yyj1144 > l
	} else {
		yyb1144 = r.CheckBreak()
	}
	if yyb1144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1144++
		if yyhl1144 {
			yyb1144 = yyj1144 > l
		} else {
			yyb1144 = r.CheckBreak()
		}
		if yyb1144 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1144-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1149 := z.EncBinary()
		_ = yym1149
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1150 := !z.EncBinary()
			yy2arr1150 := z.EncBasicHandle().StructToArray
			var yyq1150 [2]bool
			_, _, _ = yysep1150, yyq1150, yy2arr1150
			const yyr1150 bool = false
			var yynn1150 int
			if yyr1150 || yy2arr1150 {
				r.EncodeArrayStart(2)
			} else {
				yynn1150 = 2
				for _, b := range yyq1150 {
					if b {
						yynn1150++
					}
				}
				r.EncodeMapStart(yynn1150)
				yynn1150 = 0
			}
			if yyr1150 || yy2arr1150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1152 := z.EncBinary()
				_ = yym1152
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1153 := z.EncBinary()
				_ = yym1153
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr1150 || yy2arr1150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1155 := z.EncBinary()
				_ = yym1155
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1156 := z.EncBinary()
				_ = yym1156
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1150 || yy2arr1150 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1157 := z.DecBinary()
	_ = yym1157
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1158 := r.ContainerType()
		if yyct1158 == codecSelferValueTypeMap1234 {
			yyl1158 := r.ReadMapStart()
			if yyl1158 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1158, d)
			}
		} else if yyct1158 == codecSelferValueTypeArray1234 {
			yyl1158 := r.ReadArrayStart()
			if yyl1158 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1158, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1159Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1159Slc
	var yyhl1159 bool = l >= 0
	for yyj1159 := 0; ; yyj1159++ {
		if yyhl1159 {
			if yyj1159 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1159Slc = r.DecodeBytes(yys1159Slc, true, true)
		yys1159 := string(yys1159Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1159 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1159)
		} // end switch yys1159
	} // end for yyj1159
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1162 int
	var yyb1162 bool
	var yyhl1162 bool = l >= 0
	yyj1162++
	if yyhl1162 {
		yyb1162 = yyj1162 > l
	} else {
		yyb1162 = r.CheckBreak()
	}
	if yyb1162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1162++
	if yyhl1162 {
		yyb1162 = yyj1162 > l
	} else {
		yyb1162 = r.CheckBreak()
	}
	if yyb1162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1162++
		if yyhl1162 {
			yyb1162 = yyj1162 > l
		} else {
			yyb1162 = r.CheckBreak()
		}
		if yyb1162 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1162-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1165 := z.EncBinary()
		_ = yym1165
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1166 := !z.EncBinary()
			yy2arr1166 := z.EncBasicHandle().StructToArray
			var yyq1166 [3]bool
			_, _, _ = yysep1166, yyq1166, yy2arr1166
			const yyr1166 bool = false
			yyq1166[0] = x.ContainerName != ""
			yyq1166[2] = true
			var yynn1166 int
			if yyr1166 || yy2arr1166 {
				r.EncodeArrayStart(3)
			} else {
				yynn1166 = 1
				for _, b := range yyq1166 {
					if b {
						yynn1166++
					}
				}
				r.EncodeMapStart(yynn1166)
				yynn1166 = 0
			}
			if yyr1166 || yy2arr1166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1166[0] {
					yym1168 := z.EncBinary()
					_ = yym1168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1166[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1169 := z.EncBinary()
					_ = yym1169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1166 || yy2arr1166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1171 := z.EncBinary()
				_ = yym1171
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1172 := z.EncBinary()
				_ = yym1172
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1166 || yy2arr1166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1166[2] {
					yy1174 := &x.Divisor
					yym1175 := z.EncBinary()
					_ = yym1175
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1174) {
					} else if !yym1175 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1174)
					} else {
						z.EncFallback(yy1174)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1166[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1176 := &x.Divisor
					yym1177 := z.EncBinary()
					_ = yym1177
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1176) {
					} else if !yym1177 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1176)
					} else {
						z.EncFallback(yy1176)
					}
				}
			}
			if yyr1166 || yy2arr1166 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1178 := z.DecBinary()
	_ = yym1178
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1179 := r.ContainerType()
		if yyct1179 == codecSelferValueTypeMap1234 {
			yyl1179 := r.ReadMapStart()
			if yyl1179 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1179, d)
			}
		} else if yyct1179 == codecSelferValueTypeArray1234 {
			yyl1179 := r.ReadArrayStart()
			if yyl1179 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1179, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1180Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1180Slc
	var yyhl1180 bool = l >= 0
	for yyj1180 := 0; ; yyj1180++ {
		if yyhl1180 {
			if yyj1180 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1180Slc = r.DecodeBytes(yys1180Slc, true, true)
		yys1180 := string(yys1180Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1180 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1183 := &x.Divisor
				yym1184 := z.DecBinary()
				_ = yym1184
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1183) {
				} else if !yym1184 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1183)
				} else {
					z.DecFallback(yyv1183, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1180)
		} // end switch yys1180
	} // end for yyj1180
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1185 int
	var yyb1185 bool
	var yyhl1185 bool = l >= 0
	yyj1185++
	if yyhl1185 {
		yyb1185 = yyj1185 > l
	} else {
		yyb1185 = r.CheckBreak()
	}
	if yyb1185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1185++
	if yyhl1185 {
		yyb1185 = yyj1185 > l
	} else {
		yyb1185 = r.CheckBreak()
	}
	if yyb1185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1185++
	if yyhl1185 {
		yyb1185 = yyj1185 > l
	} else {
		yyb1185 = r.CheckBreak()
	}
	if yyb1185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1188 := &x.Divisor
		yym1189 := z.DecBinary()
		_ = yym1189
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1188) {
		} else if !yym1189 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1188)
		} else {
			z.DecFallback(yyv1188, false)
		}
	}
	for {
		yyj1185++
		if yyhl1185 {
			yyb1185 = yyj1185 > l
		} else {
			yyb1185 = r.CheckBreak()
		}
		if yyb1185 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1185-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1190 := z.EncBinary()
		_ = yym1190
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1191 := !z.EncBinary()
			yy2arr1191 := z.EncBasicHandle().StructToArray
			var yyq1191 [2]bool
			_, _, _ = yysep1191, yyq1191, yy2arr1191
			const yyr1191 bool = false
			var yynn1191 int
			if yyr1191 || yy2arr1191 {
				r.EncodeArrayStart(2)
			} else {
				yynn1191 = 2
				for _, b := range yyq1191 {
					if b {
						yynn1191++
					}
				}
				r.EncodeMapStart(yynn1191)
				yynn1191 = 0
			}
			if yyr1191 || yy2arr1191 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1193 := z.EncBinary()
				_ = yym1193
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1194 := z.EncBinary()
				_ = yym1194
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1191 || yy2arr1191 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1196 := z.EncBinary()
				_ = yym1196
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1197 := z.EncBinary()
				_ = yym1197
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1191 || yy2arr1191 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1198 := z.DecBinary()
	_ = yym1198
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1199 := r.ContainerType()
		if yyct1199 == codecSelferValueTypeMap1234 {
			yyl1199 := r.ReadMapStart()
			if yyl1199 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1199, d)
			}
		} else if yyct1199 == codecSelferValueTypeArray1234 {
			yyl1199 := r.ReadArrayStart()
			if yyl1199 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1199, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1200Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1200Slc
	var yyhl1200 bool = l >= 0
	for yyj1200 := 0; ; yyj1200++ {
		if yyhl1200 {
			if yyj1200 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1200Slc = r.DecodeBytes(yys1200Slc, true, true)
		yys1200 := string(yys1200Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1200 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1200)
		} // end switch yys1200
	} // end for yyj1200
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1203 int
	var yyb1203 bool
	var yyhl1203 bool = l >= 0
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1203++
		if yyhl1203 {
			yyb1203 = yyj1203 > l
		} else {
			yyb1203 = r.CheckBreak()
		}
		if yyb1203 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1203-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1206 := z.EncBinary()
		_ = yym1206
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1207 := !z.EncBinary()
			yy2arr1207 := z.EncBasicHandle().StructToArray
			var yyq1207 [2]bool
			_, _, _ = yysep1207, yyq1207, yy2arr1207
			const yyr1207 bool = false
			var yynn1207 int
			if yyr1207 || yy2arr1207 {
				r.EncodeArrayStart(2)
			} else {
				yynn1207 = 2
				for _, b := range yyq1207 {
					if b {
						yynn1207++
					}
				}
				r.EncodeMapStart(yynn1207)
				yynn1207 = 0
			}
			if yyr1207 || yy2arr1207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1209 := z.EncBinary()
				_ = yym1209
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1210 := z.EncBinary()
				_ = yym1210
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1207 || yy2arr1207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1212 := z.EncBinary()
				_ = yym1212
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1213 := z.EncBinary()
				_ = yym1213
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1207 || yy2arr1207 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1214 := z.DecBinary()
	_ = yym1214
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1215 := r.ContainerType()
		if yyct1215 == codecSelferValueTypeMap1234 {
			yyl1215 := r.ReadMapStart()
			if yyl1215 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1215, d)
			}
		} else if yyct1215 == codecSelferValueTypeArray1234 {
			yyl1215 := r.ReadArrayStart()
			if yyl1215 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1215, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1216Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1216Slc
	var yyhl1216 bool = l >= 0
	for yyj1216 := 0; ; yyj1216++ {
		if yyhl1216 {
			if yyj1216 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1216Slc = r.DecodeBytes(yys1216Slc, true, true)
		yys1216 := string(yys1216Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1216 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1216)
		} // end switch yys1216
	} // end for yyj1216
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1219 int
	var yyb1219 bool
	var yyhl1219 bool = l >= 0
	yyj1219++
	if yyhl1219 {
		yyb1219 = yyj1219 > l
	} else {
		yyb1219 = r.CheckBreak()
	}
	if yyb1219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1219++
	if yyhl1219 {
		yyb1219 = yyj1219 > l
	} else {
		yyb1219 = r.CheckBreak()
	}
	if yyb1219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1219++
		if yyhl1219 {
			yyb1219 = yyj1219 > l
		} else {
			yyb1219 = r.CheckBreak()
		}
		if yyb1219 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1219-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1222 := z.EncBinary()
		_ = yym1222
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1223 := !z.EncBinary()
			yy2arr1223 := z.EncBasicHandle().StructToArray
			var yyq1223 [2]bool
			_, _, _ = yysep1223, yyq1223, yy2arr1223
			const yyr1223 bool = false
			var yynn1223 int
			if yyr1223 || yy2arr1223 {
				r.EncodeArrayStart(2)
			} else {
				yynn1223 = 2
				for _, b := range yyq1223 {
					if b {
						yynn1223++
					}
				}
				r.EncodeMapStart(yynn1223)
				yynn1223 = 0
			}
			if yyr1223 || yy2arr1223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1225 := z.EncBinary()
				_ = yym1225
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1226 := z.EncBinary()
				_ = yym1226
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1223 || yy2arr1223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1228 := z.EncBinary()
				_ = yym1228
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1229 := z.EncBinary()
				_ = yym1229
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1223 || yy2arr1223 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1230 := z.DecBinary()
	_ = yym1230
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1231 := r.ContainerType()
		if yyct1231 == codecSelferValueTypeMap1234 {
			yyl1231 := r.ReadMapStart()
			if yyl1231 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1231, d)
			}
		} else if yyct1231 == codecSelferValueTypeArray1234 {
			yyl1231 := r.ReadArrayStart()
			if yyl1231 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1231, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1232Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1232Slc
	var yyhl1232 bool = l >= 0
	for yyj1232 := 0; ; yyj1232++ {
		if yyhl1232 {
			if yyj1232 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1232Slc = r.DecodeBytes(yys1232Slc, true, true)
		yys1232 := string(yys1232Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1232 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1232)
		} // end switch yys1232
	} // end for yyj1232
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1235 int
	var yyb1235 bool
	var yyhl1235 bool = l >= 0
	yyj1235++
	if yyhl1235 {
		yyb1235 = yyj1235 > l
	} else {
		yyb1235 = r.CheckBreak()
	}
	if yyb1235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1235++
	if yyhl1235 {
		yyb1235 = yyj1235 > l
	} else {
		yyb1235 = r.CheckBreak()
	}
	if yyb1235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1235++
		if yyhl1235 {
			yyb1235 = yyj1235 > l
		} else {
			yyb1235 = r.CheckBreak()
		}
		if yyb1235 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1235-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1238 := z.EncBinary()
		_ = yym1238
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1239 := !z.EncBinary()
			yy2arr1239 := z.EncBasicHandle().StructToArray
			var yyq1239 [5]bool
			_, _, _ = yysep1239, yyq1239, yy2arr1239
			const yyr1239 bool = false
			yyq1239[0] = x.Path != ""
			yyq1239[1] = true
			yyq1239[2] = x.Host != ""
			yyq1239[3] = x.Scheme != ""
			yyq1239[4] = len(x.HTTPHeaders) != 0
			var yynn1239 int
			if yyr1239 || yy2arr1239 {
				r.EncodeArrayStart(5)
			} else {
				yynn1239 = 0
				for _, b := range yyq1239 {
					if b {
						yynn1239++
					}
				}
				r.EncodeMapStart(yynn1239)
				yynn1239 = 0
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[0] {
					yym1241 := z.EncBinary()
					_ = yym1241
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1239[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1242 := z.EncBinary()
					_ = yym1242
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[1] {
					yy1244 := &x.Port
					yym1245 := z.EncBinary()
					_ = yym1245
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1244) {
					} else if !yym1245 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1244)
					} else {
						z.EncFallback(yy1244)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1239[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1246 := &x.Port
					yym1247 := z.EncBinary()
					_ = yym1247
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1246) {
					} else if !yym1247 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1246)
					} else {
						z.EncFallback(yy1246)
					}
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[2] {
					yym1249 := z.EncBinary()
					_ = yym1249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1239[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1250 := z.EncBinary()
					_ = yym1250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1239[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1253 := z.EncBinary()
						_ = yym1253
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1239[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1254 := z.EncBinary()
						_ = yym1254
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1255 := z.DecBinary()
	_ = yym1255
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1256 := r.ContainerType()
		if yyct1256 == codecSelferValueTypeMap1234 {
			yyl1256 := r.ReadMapStart()
			if yyl1256 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1256, d)
			}
		} else if yyct1256 == codecSelferValueTypeArray1234 {
			yyl1256 := r.ReadArrayStart()
			if yyl1256 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1256, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1257Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1257Slc
	var yyhl1257 bool = l >= 0
	for yyj1257 := 0; ; yyj1257++ {
		if yyhl1257 {
			if yyj1257 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1257Slc = r.DecodeBytes(yys1257Slc, true, true)
		yys1257 := string(yys1257Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1257 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1259 := &x.Port
				yym1260 := z.DecBinary()
				_ = yym1260
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1259) {
				} else if !yym1260 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1259)
				} else {
					z.DecFallback(yyv1259, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1263 := &x.HTTPHeaders
				yym1264 := z.DecBinary()
				_ = yym1264
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1263), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1257)
		} // end switch yys1257
	} // end for yyj1257
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1265 int
	var yyb1265 bool
	var yyhl1265 bool = l >= 0
	yyj1265++
	if yyhl1265 {
		yyb1265 = yyj1265 > l
	} else {
		yyb1265 = r.CheckBreak()
	}
	if yyb1265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1265++
	if yyhl1265 {
		yyb1265 = yyj1265 > l
	} else {
		yyb1265 = r.CheckBreak()
	}
	if yyb1265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1267 := &x.Port
		yym1268 := z.DecBinary()
		_ = yym1268
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1267) {
		} else if !yym1268 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1267)
		} else {
			z.DecFallback(yyv1267, false)
		}
	}
	yyj1265++
	if yyhl1265 {
		yyb1265 = yyj1265 > l
	} else {
		yyb1265 = r.CheckBreak()
	}
	if yyb1265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1265++
	if yyhl1265 {
		yyb1265 = yyj1265 > l
	} else {
		yyb1265 = r.CheckBreak()
	}
	if yyb1265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1265++
	if yyhl1265 {
		yyb1265 = yyj1265 > l
	} else {
		yyb1265 = r.CheckBreak()
	}
	if yyb1265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1271 := &x.HTTPHeaders
		yym1272 := z.DecBinary()
		_ = yym1272
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1271), d)
		}
	}
	for {
		yyj1265++
		if yyhl1265 {
			yyb1265 = yyj1265 > l
		} else {
			yyb1265 = r.CheckBreak()
		}
		if yyb1265 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1265-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1273 := z.EncBinary()
	_ = yym1273
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1274 := z.DecBinary()
	_ = yym1274
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1275 := z.EncBinary()
		_ = yym1275
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1276 := !z.EncBinary()
			yy2arr1276 := z.EncBasicHandle().StructToArray
			var yyq1276 [1]bool
			_, _, _ = yysep1276, yyq1276, yy2arr1276
			const yyr1276 bool = false
			yyq1276[0] = true
			var yynn1276 int
			if yyr1276 || yy2arr1276 {
				r.EncodeArrayStart(1)
			} else {
				yynn1276 = 0
				for _, b := range yyq1276 {
					if b {
						yynn1276++
					}
				}
				r.EncodeMapStart(yynn1276)
				yynn1276 = 0
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1276[0] {
					yy1278 := &x.Port
					yym1279 := z.EncBinary()
					_ = yym1279
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1278) {
					} else if !yym1279 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1278)
					} else {
						z.EncFallback(yy1278)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1276[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1280 := &x.Port
					yym1281 := z.EncBinary()
					_ = yym1281
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1280) {
					} else if !yym1281 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1280)
					} else {
						z.EncFallback(yy1280)
					}
				}
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1282 := z.DecBinary()
	_ = yym1282
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1283 := r.ContainerType()
		if yyct1283 == codecSelferValueTypeMap1234 {
			yyl1283 := r.ReadMapStart()
			if yyl1283 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1283, d)
			}
		} else if yyct1283 == codecSelferValueTypeArray1234 {
			yyl1283 := r.ReadArrayStart()
			if yyl1283 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1283, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1284Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1284Slc
	var yyhl1284 bool = l >= 0
	for yyj1284 := 0; ; yyj1284++ {
		if yyhl1284 {
			if yyj1284 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1284Slc = r.DecodeBytes(yys1284Slc, true, true)
		yys1284 := string(yys1284Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1284 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1285 := &x.Port
				yym1286 := z.DecBinary()
				_ = yym1286
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1285) {
				} else if !yym1286 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1285)
				} else {
					z.DecFallback(yyv1285, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1284)
		} // end switch yys1284
	} // end for yyj1284
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1287 int
	var yyb1287 bool
	var yyhl1287 bool = l >= 0
	yyj1287++
	if yyhl1287 {
		yyb1287 = yyj1287 > l
	} else {
		yyb1287 = r.CheckBreak()
	}
	if yyb1287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1288 := &x.Port
		yym1289 := z.DecBinary()
		_ = yym1289
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1288) {
		} else if !yym1289 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1288)
		} else {
			z.DecFallback(yyv1288, false)
		}
	}
	for {
		yyj1287++
		if yyhl1287 {
			yyb1287 = yyj1287 > l
		} else {
			yyb1287 = r.CheckBreak()
		}
		if yyb1287 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1287-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1290 := z.EncBinary()
		_ = yym1290
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1291 := !z.EncBinary()
			yy2arr1291 := z.EncBasicHandle().StructToArray
			var yyq1291 [1]bool
			_, _, _ = yysep1291, yyq1291, yy2arr1291
			const yyr1291 bool = false
			yyq1291[0] = len(x.Command) != 0
			var yynn1291 int
			if yyr1291 || yy2arr1291 {
				r.EncodeArrayStart(1)
			} else {
				yynn1291 = 0
				for _, b := range yyq1291 {
					if b {
						yynn1291++
					}
				}
				r.EncodeMapStart(yynn1291)
				yynn1291 = 0
			}
			if yyr1291 || yy2arr1291 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1291[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1293 := z.EncBinary()
						_ = yym1293
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1291[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1294 := z.EncBinary()
						_ = yym1294
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1291 || yy2arr1291 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1295 := z.DecBinary()
	_ = yym1295
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1296 := r.ContainerType()
		if yyct1296 == codecSelferValueTypeMap1234 {
			yyl1296 := r.ReadMapStart()
			if yyl1296 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1296, d)
			}
		} else if yyct1296 == codecSelferValueTypeArray1234 {
			yyl1296 := r.ReadArrayStart()
			if yyl1296 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1296, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1297Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1297Slc
	var yyhl1297 bool = l >= 0
	for yyj1297 := 0; ; yyj1297++ {
		if yyhl1297 {
			if yyj1297 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1297Slc = r.DecodeBytes(yys1297Slc, true, true)
		yys1297 := string(yys1297Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1297 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1298 := &x.Command
				yym1299 := z.DecBinary()
				_ = yym1299
				if false {
				} else {
					z.F.DecSliceStringX(yyv1298, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1297)
		} // end switch yys1297
	} // end for yyj1297
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1300 int
	var yyb1300 bool
	var yyhl1300 bool = l >= 0
	yyj1300++
	if yyhl1300 {
		yyb1300 = yyj1300 > l
	} else {
		yyb1300 = r.CheckBreak()
	}
	if yyb1300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1301 := &x.Command
		yym1302 := z.DecBinary()
		_ = yym1302
		if false {
		} else {
			z.F.DecSliceStringX(yyv1301, false, d)
		}
	}
	for {
		yyj1300++
		if yyhl1300 {
			yyb1300 = yyj1300 > l
		} else {
			yyb1300 = r.CheckBreak()
		}
		if yyb1300 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1300-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1303 := z.EncBinary()
		_ = yym1303
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1304 := !z.EncBinary()
			yy2arr1304 := z.EncBasicHandle().StructToArray
			var yyq1304 [8]bool
			_, _, _ = yysep1304, yyq1304, yy2arr1304
			const yyr1304 bool = false
			yyq1304[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1304[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1304[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1304[3] = x.InitialDelaySeconds != 0
			yyq1304[4] = x.TimeoutSeconds != 0
			yyq1304[5] = x.PeriodSeconds != 0
			yyq1304[6] = x.SuccessThreshold != 0
			yyq1304[7] = x.FailureThreshold != 0
			var yynn1304 int
			if yyr1304 || yy2arr1304 {
				r.EncodeArrayStart(8)
			} else {
				yynn1304 = 0
				for _, b := range yyq1304 {
					if b {
						yynn1304++
					}
				}
				r.EncodeMapStart(yynn1304)
				yynn1304 = 0
			}
			var yyn1305 bool
			if x.Handler.Exec == nil {
				yyn1305 = true
				goto LABEL1305
			}
		LABEL1305:
			if yyr1304 || yy2arr1304 {
				if yyn1305 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1304[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1304[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1305 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1306 bool
			if x.Handler.HTTPGet == nil {
				yyn1306 = true
				goto LABEL1306
			}
		LABEL1306:
			if yyr1304 || yy2arr1304 {
				if yyn1306 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1304[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1304[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1306 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1307 bool
			if x.Handler.TCPSocket == nil {
				yyn1307 = true
				goto LABEL1307
			}
		LABEL1307:
			if yyr1304 || yy2arr1304 {
				if yyn1307 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1304[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1304[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1307 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1304[3] {
					yym1309 := z.EncBinary()
					_ = yym1309
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1304[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1310 := z.EncBinary()
					_ = yym1310
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1304[4] {
					yym1312 := z.EncBinary()
					_ = yym1312
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1304[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1313 := z.EncBinary()
					_ = yym1313
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1304[5] {
					yym1315 := z.EncBinary()
					_ = yym1315
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1304[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1316 := z.EncBinary()
					_ = yym1316
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1304[6] {
					yym1318 := z.EncBinary()
					_ = yym1318
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1304[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1319 := z.EncBinary()
					_ = yym1319
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1304[7] {
					yym1321 := z.EncBinary()
					_ = yym1321
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1304[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1322 := z.EncBinary()
					_ = yym1322
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1323 := z.DecBinary()
	_ = yym1323
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1324 := r.ContainerType()
		if yyct1324 == codecSelferValueTypeMap1234 {
			yyl1324 := r.ReadMapStart()
			if yyl1324 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1324, d)
			}
		} else if yyct1324 == codecSelferValueTypeArray1234 {
			yyl1324 := r.ReadArrayStart()
			if yyl1324 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1324, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1325Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1325Slc
	var yyhl1325 bool = l >= 0
	for yyj1325 := 0; ; yyj1325++ {
		if yyhl1325 {
			if yyj1325 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1325Slc = r.DecodeBytes(yys1325Slc, true, true)
		yys1325 := string(yys1325Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1325 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1325)
		} // end switch yys1325
	} // end for yyj1325
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1334 int
	var yyb1334 bool
	var yyhl1334 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1334++
		if yyhl1334 {
			yyb1334 = yyj1334 > l
		} else {
			yyb1334 = r.CheckBreak()
		}
		if yyb1334 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1334-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1343 := z.EncBinary()
	_ = yym1343
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1344 := z.DecBinary()
	_ = yym1344
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1345 := z.EncBinary()
	_ = yym1345
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1346 := z.DecBinary()
	_ = yym1346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1347 := z.EncBinary()
		_ = yym1347
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1348 := !z.EncBinary()
			yy2arr1348 := z.EncBasicHandle().StructToArray
			var yyq1348 [2]bool
			_, _, _ = yysep1348, yyq1348, yy2arr1348
			const yyr1348 bool = false
			yyq1348[0] = len(x.Add) != 0
			yyq1348[1] = len(x.Drop) != 0
			var yynn1348 int
			if yyr1348 || yy2arr1348 {
				r.EncodeArrayStart(2)
			} else {
				yynn1348 = 0
				for _, b := range yyq1348 {
					if b {
						yynn1348++
					}
				}
				r.EncodeMapStart(yynn1348)
				yynn1348 = 0
			}
			if yyr1348 || yy2arr1348 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1348[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1350 := z.EncBinary()
						_ = yym1350
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1348[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1351 := z.EncBinary()
						_ = yym1351
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1348 || yy2arr1348 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1348[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1353 := z.EncBinary()
						_ = yym1353
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1348[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1354 := z.EncBinary()
						_ = yym1354
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1348 || yy2arr1348 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1355 := z.DecBinary()
	_ = yym1355
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1356 := r.ContainerType()
		if yyct1356 == codecSelferValueTypeMap1234 {
			yyl1356 := r.ReadMapStart()
			if yyl1356 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1356, d)
			}
		} else if yyct1356 == codecSelferValueTypeArray1234 {
			yyl1356 := r.ReadArrayStart()
			if yyl1356 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1356, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1357Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1357Slc
	var yyhl1357 bool = l >= 0
	for yyj1357 := 0; ; yyj1357++ {
		if yyhl1357 {
			if yyj1357 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1357Slc = r.DecodeBytes(yys1357Slc, true, true)
		yys1357 := string(yys1357Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1357 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1358 := &x.Add
				yym1359 := z.DecBinary()
				_ = yym1359
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1358), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1360 := &x.Drop
				yym1361 := z.DecBinary()
				_ = yym1361
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1360), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1357)
		} // end switch yys1357
	} // end for yyj1357
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1362 int
	var yyb1362 bool
	var yyhl1362 bool = l >= 0
	yyj1362++
	if yyhl1362 {
		yyb1362 = yyj1362 > l
	} else {
		yyb1362 = r.CheckBreak()
	}
	if yyb1362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1363 := &x.Add
		yym1364 := z.DecBinary()
		_ = yym1364
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1363), d)
		}
	}
	yyj1362++
	if yyhl1362 {
		yyb1362 = yyj1362 > l
	} else {
		yyb1362 = r.CheckBreak()
	}
	if yyb1362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1365 := &x.Drop
		yym1366 := z.DecBinary()
		_ = yym1366
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1365), d)
		}
	}
	for {
		yyj1362++
		if yyhl1362 {
			yyb1362 = yyj1362 > l
		} else {
			yyb1362 = r.CheckBreak()
		}
		if yyb1362 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1362-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1367 := z.EncBinary()
		_ = yym1367
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1368 := !z.EncBinary()
			yy2arr1368 := z.EncBasicHandle().StructToArray
			var yyq1368 [2]bool
			_, _, _ = yysep1368, yyq1368, yy2arr1368
			const yyr1368 bool = false
			yyq1368[0] = len(x.Limits) != 0
			yyq1368[1] = len(x.Requests) != 0
			var yynn1368 int
			if yyr1368 || yy2arr1368 {
				r.EncodeArrayStart(2)
			} else {
				yynn1368 = 0
				for _, b := range yyq1368 {
					if b {
						yynn1368++
					}
				}
				r.EncodeMapStart(yynn1368)
				yynn1368 = 0
			}
			if yyr1368 || yy2arr1368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1368[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1368[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1368 || yy2arr1368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1368[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1368[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1368 || yy2arr1368 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1371 := z.DecBinary()
	_ = yym1371
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1372 := r.ContainerType()
		if yyct1372 == codecSelferValueTypeMap1234 {
			yyl1372 := r.ReadMapStart()
			if yyl1372 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1372, d)
			}
		} else if yyct1372 == codecSelferValueTypeArray1234 {
			yyl1372 := r.ReadArrayStart()
			if yyl1372 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1372, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1373Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1373Slc
	var yyhl1373 bool = l >= 0
	for yyj1373 := 0; ; yyj1373++ {
		if yyhl1373 {
			if yyj1373 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1373Slc = r.DecodeBytes(yys1373Slc, true, true)
		yys1373 := string(yys1373Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1373 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1374 := &x.Limits
				yyv1374.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1375 := &x.Requests
				yyv1375.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1373)
		} // end switch yys1373
	} // end for yyj1373
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1376 int
	var yyb1376 bool
	var yyhl1376 bool = l >= 0
	yyj1376++
	if yyhl1376 {
		yyb1376 = yyj1376 > l
	} else {
		yyb1376 = r.CheckBreak()
	}
	if yyb1376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1377 := &x.Limits
		yyv1377.CodecDecodeSelf(d)
	}
	yyj1376++
	if yyhl1376 {
		yyb1376 = yyj1376 > l
	} else {
		yyb1376 = r.CheckBreak()
	}
	if yyb1376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1378 := &x.Requests
		yyv1378.CodecDecodeSelf(d)
	}
	for {
		yyj1376++
		if yyhl1376 {
			yyb1376 = yyj1376 > l
		} else {
			yyb1376 = r.CheckBreak()
		}
		if yyb1376 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1376-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1379 := z.EncBinary()
		_ = yym1379
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1380 := !z.EncBinary()
			yy2arr1380 := z.EncBasicHandle().StructToArray
			var yyq1380 [18]bool
			_, _, _ = yysep1380, yyq1380, yy2arr1380
			const yyr1380 bool = false
			yyq1380[2] = len(x.Command) != 0
			yyq1380[3] = len(x.Args) != 0
			yyq1380[4] = x.WorkingDir != ""
			yyq1380[5] = len(x.Ports) != 0
			yyq1380[6] = len(x.Env) != 0
			yyq1380[7] = true
			yyq1380[8] = len(x.VolumeMounts) != 0
			yyq1380[9] = x.LivenessProbe != nil
			yyq1380[10] = x.ReadinessProbe != nil
			yyq1380[11] = x.Lifecycle != nil
			yyq1380[12] = x.TerminationMessagePath != ""
			yyq1380[14] = x.SecurityContext != nil
			yyq1380[15] = x.Stdin != false
			yyq1380[16] = x.StdinOnce != false
			yyq1380[17] = x.TTY != false
			var yynn1380 int
			if yyr1380 || yy2arr1380 {
				r.EncodeArrayStart(18)
			} else {
				yynn1380 = 3
				for _, b := range yyq1380 {
					if b {
						yynn1380++
					}
				}
				r.EncodeMapStart(yynn1380)
				yynn1380 = 0
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1382 := z.EncBinary()
				_ = yym1382
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1383 := z.EncBinary()
				_ = yym1383
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1385 := z.EncBinary()
				_ = yym1385
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1386 := z.EncBinary()
				_ = yym1386
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1380[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1388 := z.EncBinary()
						_ = yym1388
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1380[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1389 := z.EncBinary()
						_ = yym1389
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1380[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1391 := z.EncBinary()
						_ = yym1391
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1380[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1392 := z.EncBinary()
						_ = yym1392
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1380[4] {
					yym1394 := z.EncBinary()
					_ = yym1394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1380[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1395 := z.EncBinary()
					_ = yym1395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1380[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1397 := z.EncBinary()
						_ = yym1397
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1380[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1398 := z.EncBinary()
						_ = yym1398
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1380[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1400 := z.EncBinary()
						_ = yym1400
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1380[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1401 := z.EncBinary()
						_ = yym1401
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1380[7] {
					yy1403 := &x.Resources
					yy1403.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1380[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1404 := &x.Resources
					yy1404.CodecEncodeSelf(e)
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1380[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1406 := z.EncBinary()
						_ = yym1406
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1380[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1407 := z.EncBinary()
						_ = yym1407
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1380[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1380[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1380[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1380[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1380[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1380[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1380[12] {
					yym1412 := z.EncBinary()
					_ = yym1412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1380[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1413 := z.EncBinary()
					_ = yym1413
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1380[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1380[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1380[15] {
					yym1417 := z.EncBinary()
					_ = yym1417
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1380[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1418 := z.EncBinary()
					_ = yym1418
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1380[16] {
					yym1420 := z.EncBinary()
					_ = yym1420
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1380[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1421 := z.EncBinary()
					_ = yym1421
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1380[17] {
					yym1423 := z.EncBinary()
					_ = yym1423
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1380[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1424 := z.EncBinary()
					_ = yym1424
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1425 := z.DecBinary()
	_ = yym1425
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1426 := r.ContainerType()
		if yyct1426 == codecSelferValueTypeMap1234 {
			yyl1426 := r.ReadMapStart()
			if yyl1426 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1426, d)
			}
		} else if yyct1426 == codecSelferValueTypeArray1234 {
			yyl1426 := r.ReadArrayStart()
			if yyl1426 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1426, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1427Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1427Slc
	var yyhl1427 bool = l >= 0
	for yyj1427 := 0; ; yyj1427++ {
		if yyhl1427 {
			if yyj1427 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1427Slc = r.DecodeBytes(yys1427Slc, true, true)
		yys1427 := string(yys1427Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1427 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1430 := &x.Command
				yym1431 := z.DecBinary()
				_ = yym1431
				if false {
				} else {
					z.F.DecSliceStringX(yyv1430, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1432 := &x.Args
				yym1433 := z.DecBinary()
				_ = yym1433
				if false {
				} else {
					z.F.DecSliceStringX(yyv1432, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1435 := &x.Ports
				yym1436 := z.DecBinary()
				_ = yym1436
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1435), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1437 := &x.Env
				yym1438 := z.DecBinary()
				_ = yym1438
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1437), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1439 := &x.Resources
				yyv1439.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1440 := &x.VolumeMounts
				yym1441 := z.DecBinary()
				_ = yym1441
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1440), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1427)
		} // end switch yys1427
	} // end for yyj1427
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1451 int
	var yyb1451 bool
	var yyhl1451 bool = l >= 0
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1454 := &x.Command
		yym1455 := z.DecBinary()
		_ = yym1455
		if false {
		} else {
			z.F.DecSliceStringX(yyv1454, false, d)
		}
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1456 := &x.Args
		yym1457 := z.DecBinary()
		_ = yym1457
		if false {
		} else {
			z.F.DecSliceStringX(yyv1456, false, d)
		}
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1459 := &x.Ports
		yym1460 := z.DecBinary()
		_ = yym1460
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1459), d)
		}
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1461 := &x.Env
		yym1462 := z.DecBinary()
		_ = yym1462
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1461), d)
		}
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1463 := &x.Resources
		yyv1463.CodecDecodeSelf(d)
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1464 := &x.VolumeMounts
		yym1465 := z.DecBinary()
		_ = yym1465
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1464), d)
		}
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1451++
	if yyhl1451 {
		yyb1451 = yyj1451 > l
	} else {
		yyb1451 = r.CheckBreak()
	}
	if yyb1451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1451++
		if yyhl1451 {
			yyb1451 = yyj1451 > l
		} else {
			yyb1451 = r.CheckBreak()
		}
		if yyb1451 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1451-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1475 := z.EncBinary()
		_ = yym1475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1476 := !z.EncBinary()
			yy2arr1476 := z.EncBasicHandle().StructToArray
			var yyq1476 [3]bool
			_, _, _ = yysep1476, yyq1476, yy2arr1476
			const yyr1476 bool = false
			yyq1476[0] = x.Exec != nil
			yyq1476[1] = x.HTTPGet != nil
			yyq1476[2] = x.TCPSocket != nil
			var yynn1476 int
			if yyr1476 || yy2arr1476 {
				r.EncodeArrayStart(3)
			} else {
				yynn1476 = 0
				for _, b := range yyq1476 {
					if b {
						yynn1476++
					}
				}
				r.EncodeMapStart(yynn1476)
				yynn1476 = 0
			}
			if yyr1476 || yy2arr1476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1476[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1476[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1476 || yy2arr1476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1476[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1476[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1476 || yy2arr1476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1476[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1476[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1476 || yy2arr1476 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1480 := z.DecBinary()
	_ = yym1480
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1481 := r.ContainerType()
		if yyct1481 == codecSelferValueTypeMap1234 {
			yyl1481 := r.ReadMapStart()
			if yyl1481 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1481, d)
			}
		} else if yyct1481 == codecSelferValueTypeArray1234 {
			yyl1481 := r.ReadArrayStart()
			if yyl1481 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1481, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1482Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1482Slc
	var yyhl1482 bool = l >= 0
	for yyj1482 := 0; ; yyj1482++ {
		if yyhl1482 {
			if yyj1482 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1482Slc = r.DecodeBytes(yys1482Slc, true, true)
		yys1482 := string(yys1482Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1482 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1482)
		} // end switch yys1482
	} // end for yyj1482
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1486 int
	var yyb1486 bool
	var yyhl1486 bool = l >= 0
	yyj1486++
	if yyhl1486 {
		yyb1486 = yyj1486 > l
	} else {
		yyb1486 = r.CheckBreak()
	}
	if yyb1486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1486++
	if yyhl1486 {
		yyb1486 = yyj1486 > l
	} else {
		yyb1486 = r.CheckBreak()
	}
	if yyb1486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1486++
	if yyhl1486 {
		yyb1486 = yyj1486 > l
	} else {
		yyb1486 = r.CheckBreak()
	}
	if yyb1486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1486++
		if yyhl1486 {
			yyb1486 = yyj1486 > l
		} else {
			yyb1486 = r.CheckBreak()
		}
		if yyb1486 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1486-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1490 := z.EncBinary()
		_ = yym1490
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1491 := !z.EncBinary()
			yy2arr1491 := z.EncBasicHandle().StructToArray
			var yyq1491 [2]bool
			_, _, _ = yysep1491, yyq1491, yy2arr1491
			const yyr1491 bool = false
			yyq1491[0] = x.PostStart != nil
			yyq1491[1] = x.PreStop != nil
			var yynn1491 int
			if yyr1491 || yy2arr1491 {
				r.EncodeArrayStart(2)
			} else {
				yynn1491 = 0
				for _, b := range yyq1491 {
					if b {
						yynn1491++
					}
				}
				r.EncodeMapStart(yynn1491)
				yynn1491 = 0
			}
			if yyr1491 || yy2arr1491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1491[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1491[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1491 || yy2arr1491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1491[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1491[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1491 || yy2arr1491 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1494 := z.DecBinary()
	_ = yym1494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1495 := r.ContainerType()
		if yyct1495 == codecSelferValueTypeMap1234 {
			yyl1495 := r.ReadMapStart()
			if yyl1495 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1495, d)
			}
		} else if yyct1495 == codecSelferValueTypeArray1234 {
			yyl1495 := r.ReadArrayStart()
			if yyl1495 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1495, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1496Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1496Slc
	var yyhl1496 bool = l >= 0
	for yyj1496 := 0; ; yyj1496++ {
		if yyhl1496 {
			if yyj1496 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1496Slc = r.DecodeBytes(yys1496Slc, true, true)
		yys1496 := string(yys1496Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1496 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1496)
		} // end switch yys1496
	} // end for yyj1496
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1499 int
	var yyb1499 bool
	var yyhl1499 bool = l >= 0
	yyj1499++
	if yyhl1499 {
		yyb1499 = yyj1499 > l
	} else {
		yyb1499 = r.CheckBreak()
	}
	if yyb1499 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1499++
	if yyhl1499 {
		yyb1499 = yyj1499 > l
	} else {
		yyb1499 = r.CheckBreak()
	}
	if yyb1499 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1499++
		if yyhl1499 {
			yyb1499 = yyj1499 > l
		} else {
			yyb1499 = r.CheckBreak()
		}
		if yyb1499 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1499-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1502 := z.EncBinary()
	_ = yym1502
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1503 := z.DecBinary()
	_ = yym1503
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1504 := z.EncBinary()
		_ = yym1504
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1505 := !z.EncBinary()
			yy2arr1505 := z.EncBasicHandle().StructToArray
			var yyq1505 [2]bool
			_, _, _ = yysep1505, yyq1505, yy2arr1505
			const yyr1505 bool = false
			yyq1505[0] = x.Reason != ""
			yyq1505[1] = x.Message != ""
			var yynn1505 int
			if yyr1505 || yy2arr1505 {
				r.EncodeArrayStart(2)
			} else {
				yynn1505 = 0
				for _, b := range yyq1505 {
					if b {
						yynn1505++
					}
				}
				r.EncodeMapStart(yynn1505)
				yynn1505 = 0
			}
			if yyr1505 || yy2arr1505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1505[0] {
					yym1507 := z.EncBinary()
					_ = yym1507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1505[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1508 := z.EncBinary()
					_ = yym1508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1505 || yy2arr1505 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1505[1] {
					yym1510 := z.EncBinary()
					_ = yym1510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1505[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1511 := z.EncBinary()
					_ = yym1511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1505 || yy2arr1505 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1512 := z.DecBinary()
	_ = yym1512
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1513 := r.ContainerType()
		if yyct1513 == codecSelferValueTypeMap1234 {
			yyl1513 := r.ReadMapStart()
			if yyl1513 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1513, d)
			}
		} else if yyct1513 == codecSelferValueTypeArray1234 {
			yyl1513 := r.ReadArrayStart()
			if yyl1513 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1513, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1514Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1514Slc
	var yyhl1514 bool = l >= 0
	for yyj1514 := 0; ; yyj1514++ {
		if yyhl1514 {
			if yyj1514 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1514Slc = r.DecodeBytes(yys1514Slc, true, true)
		yys1514 := string(yys1514Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1514 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1514)
		} // end switch yys1514
	} // end for yyj1514
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1517 int
	var yyb1517 bool
	var yyhl1517 bool = l >= 0
	yyj1517++
	if yyhl1517 {
		yyb1517 = yyj1517 > l
	} else {
		yyb1517 = r.CheckBreak()
	}
	if yyb1517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1517++
	if yyhl1517 {
		yyb1517 = yyj1517 > l
	} else {
		yyb1517 = r.CheckBreak()
	}
	if yyb1517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1517++
		if yyhl1517 {
			yyb1517 = yyj1517 > l
		} else {
			yyb1517 = r.CheckBreak()
		}
		if yyb1517 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1517-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1520 := z.EncBinary()
		_ = yym1520
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1521 := !z.EncBinary()
			yy2arr1521 := z.EncBasicHandle().StructToArray
			var yyq1521 [1]bool
			_, _, _ = yysep1521, yyq1521, yy2arr1521
			const yyr1521 bool = false
			yyq1521[0] = true
			var yynn1521 int
			if yyr1521 || yy2arr1521 {
				r.EncodeArrayStart(1)
			} else {
				yynn1521 = 0
				for _, b := range yyq1521 {
					if b {
						yynn1521++
					}
				}
				r.EncodeMapStart(yynn1521)
				yynn1521 = 0
			}
			if yyr1521 || yy2arr1521 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1521[0] {
					yy1523 := &x.StartedAt
					yym1524 := z.EncBinary()
					_ = yym1524
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1523) {
					} else if yym1524 {
						z.EncBinaryMarshal(yy1523)
					} else if !yym1524 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1523)
					} else {
						z.EncFallback(yy1523)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1521[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1525 := &x.StartedAt
					yym1526 := z.EncBinary()
					_ = yym1526
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1525) {
					} else if yym1526 {
						z.EncBinaryMarshal(yy1525)
					} else if !yym1526 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1525)
					} else {
						z.EncFallback(yy1525)
					}
				}
			}
			if yyr1521 || yy2arr1521 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1527 := z.DecBinary()
	_ = yym1527
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1528 := r.ContainerType()
		if yyct1528 == codecSelferValueTypeMap1234 {
			yyl1528 := r.ReadMapStart()
			if yyl1528 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1528, d)
			}
		} else if yyct1528 == codecSelferValueTypeArray1234 {
			yyl1528 := r.ReadArrayStart()
			if yyl1528 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1528, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1529Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1529Slc
	var yyhl1529 bool = l >= 0
	for yyj1529 := 0; ; yyj1529++ {
		if yyhl1529 {
			if yyj1529 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1529Slc = r.DecodeBytes(yys1529Slc, true, true)
		yys1529 := string(yys1529Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1529 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1530 := &x.StartedAt
				yym1531 := z.DecBinary()
				_ = yym1531
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1530) {
				} else if yym1531 {
					z.DecBinaryUnmarshal(yyv1530)
				} else if !yym1531 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1530)
				} else {
					z.DecFallback(yyv1530, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1529)
		} // end switch yys1529
	} // end for yyj1529
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1532 int
	var yyb1532 bool
	var yyhl1532 bool = l >= 0
	yyj1532++
	if yyhl1532 {
		yyb1532 = yyj1532 > l
	} else {
		yyb1532 = r.CheckBreak()
	}
	if yyb1532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1533 := &x.StartedAt
		yym1534 := z.DecBinary()
		_ = yym1534
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1533) {
		} else if yym1534 {
			z.DecBinaryUnmarshal(yyv1533)
		} else if !yym1534 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1533)
		} else {
			z.DecFallback(yyv1533, false)
		}
	}
	for {
		yyj1532++
		if yyhl1532 {
			yyb1532 = yyj1532 > l
		} else {
			yyb1532 = r.CheckBreak()
		}
		if yyb1532 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1532-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1535 := z.EncBinary()
		_ = yym1535
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1536 := !z.EncBinary()
			yy2arr1536 := z.EncBasicHandle().StructToArray
			var yyq1536 [7]bool
			_, _, _ = yysep1536, yyq1536, yy2arr1536
			const yyr1536 bool = false
			yyq1536[1] = x.Signal != 0
			yyq1536[2] = x.Reason != ""
			yyq1536[3] = x.Message != ""
			yyq1536[4] = true
			yyq1536[5] = true
			yyq1536[6] = x.ContainerID != ""
			var yynn1536 int
			if yyr1536 || yy2arr1536 {
				r.EncodeArrayStart(7)
			} else {
				yynn1536 = 1
				for _, b := range yyq1536 {
					if b {
						yynn1536++
					}
				}
				r.EncodeMapStart(yynn1536)
				yynn1536 = 0
			}
			if yyr1536 || yy2arr1536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1538 := z.EncBinary()
				_ = yym1538
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1539 := z.EncBinary()
				_ = yym1539
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1536 || yy2arr1536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1536[1] {
					yym1541 := z.EncBinary()
					_ = yym1541
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1536[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1542 := z.EncBinary()
					_ = yym1542
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1536 || yy2arr1536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1536[2] {
					yym1544 := z.EncBinary()
					_ = yym1544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1536[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1545 := z.EncBinary()
					_ = yym1545
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1536 || yy2arr1536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1536[3] {
					yym1547 := z.EncBinary()
					_ = yym1547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1536[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1548 := z.EncBinary()
					_ = yym1548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1536 || yy2arr1536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1536[4] {
					yy1550 := &x.StartedAt
					yym1551 := z.EncBinary()
					_ = yym1551
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1550) {
					} else if yym1551 {
						z.EncBinaryMarshal(yy1550)
					} else if !yym1551 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1550)
					} else {
						z.EncFallback(yy1550)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1536[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1552 := &x.StartedAt
					yym1553 := z.EncBinary()
					_ = yym1553
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1552) {
					} else if yym1553 {
						z.EncBinaryMarshal(yy1552)
					} else if !yym1553 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1552)
					} else {
						z.EncFallback(yy1552)
					}
				}
			}
			if yyr1536 || yy2arr1536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1536[5] {
					yy1555 := &x.FinishedAt
					yym1556 := z.EncBinary()
					_ = yym1556
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1555) {
					} else if yym1556 {
						z.EncBinaryMarshal(yy1555)
					} else if !yym1556 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1555)
					} else {
						z.EncFallback(yy1555)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1536[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1557 := &x.FinishedAt
					yym1558 := z.EncBinary()
					_ = yym1558
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1557) {
					} else if yym1558 {
						z.EncBinaryMarshal(yy1557)
					} else if !yym1558 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1557)
					} else {
						z.EncFallback(yy1557)
					}
				}
			}
			if yyr1536 || yy2arr1536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1536[6] {
					yym1560 := z.EncBinary()
					_ = yym1560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1536[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1561 := z.EncBinary()
					_ = yym1561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1536 || yy2arr1536 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1562 := z.DecBinary()
	_ = yym1562
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1563 := r.ContainerType()
		if yyct1563 == codecSelferValueTypeMap1234 {
			yyl1563 := r.ReadMapStart()
			if yyl1563 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1563, d)
			}
		} else if yyct1563 == codecSelferValueTypeArray1234 {
			yyl1563 := r.ReadArrayStart()
			if yyl1563 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1563, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1564Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1564Slc
	var yyhl1564 bool = l >= 0
	for yyj1564 := 0; ; yyj1564++ {
		if yyhl1564 {
			if yyj1564 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1564Slc = r.DecodeBytes(yys1564Slc, true, true)
		yys1564 := string(yys1564Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1564 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1569 := &x.StartedAt
				yym1570 := z.DecBinary()
				_ = yym1570
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1569) {
				} else if yym1570 {
					z.DecBinaryUnmarshal(yyv1569)
				} else if !yym1570 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1569)
				} else {
					z.DecFallback(yyv1569, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1571 := &x.FinishedAt
				yym1572 := z.DecBinary()
				_ = yym1572
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1571) {
				} else if yym1572 {
					z.DecBinaryUnmarshal(yyv1571)
				} else if !yym1572 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1571)
				} else {
					z.DecFallback(yyv1571, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1564)
		} // end switch yys1564
	} // end for yyj1564
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1574 int
	var yyb1574 bool
	var yyhl1574 bool = l >= 0
	yyj1574++
	if yyhl1574 {
		yyb1574 = yyj1574 > l
	} else {
		yyb1574 = r.CheckBreak()
	}
	if yyb1574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1574++
	if yyhl1574 {
		yyb1574 = yyj1574 > l
	} else {
		yyb1574 = r.CheckBreak()
	}
	if yyb1574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1574++
	if yyhl1574 {
		yyb1574 = yyj1574 > l
	} else {
		yyb1574 = r.CheckBreak()
	}
	if yyb1574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1574++
	if yyhl1574 {
		yyb1574 = yyj1574 > l
	} else {
		yyb1574 = r.CheckBreak()
	}
	if yyb1574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1574++
	if yyhl1574 {
		yyb1574 = yyj1574 > l
	} else {
		yyb1574 = r.CheckBreak()
	}
	if yyb1574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1579 := &x.StartedAt
		yym1580 := z.DecBinary()
		_ = yym1580
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1579) {
		} else if yym1580 {
			z.DecBinaryUnmarshal(yyv1579)
		} else if !yym1580 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1579)
		} else {
			z.DecFallback(yyv1579, false)
		}
	}
	yyj1574++
	if yyhl1574 {
		yyb1574 = yyj1574 > l
	} else {
		yyb1574 = r.CheckBreak()
	}
	if yyb1574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1581 := &x.FinishedAt
		yym1582 := z.DecBinary()
		_ = yym1582
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1581) {
		} else if yym1582 {
			z.DecBinaryUnmarshal(yyv1581)
		} else if !yym1582 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1581)
		} else {
			z.DecFallback(yyv1581, false)
		}
	}
	yyj1574++
	if yyhl1574 {
		yyb1574 = yyj1574 > l
	} else {
		yyb1574 = r.CheckBreak()
	}
	if yyb1574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1574++
		if yyhl1574 {
			yyb1574 = yyj1574 > l
		} else {
			yyb1574 = r.CheckBreak()
		}
		if yyb1574 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1574-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1584 := z.EncBinary()
		_ = yym1584
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1585 := !z.EncBinary()
			yy2arr1585 := z.EncBasicHandle().StructToArray
			var yyq1585 [3]bool
			_, _, _ = yysep1585, yyq1585, yy2arr1585
			const yyr1585 bool = false
			yyq1585[0] = x.Waiting != nil
			yyq1585[1] = x.Running != nil
			yyq1585[2] = x.Terminated != nil
			var yynn1585 int
			if yyr1585 || yy2arr1585 {
				r.EncodeArrayStart(3)
			} else {
				yynn1585 = 0
				for _, b := range yyq1585 {
					if b {
						yynn1585++
					}
				}
				r.EncodeMapStart(yynn1585)
				yynn1585 = 0
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1585[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1585[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1585[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1585[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1585[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1585[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1589 := z.DecBinary()
	_ = yym1589
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1590 := r.ContainerType()
		if yyct1590 == codecSelferValueTypeMap1234 {
			yyl1590 := r.ReadMapStart()
			if yyl1590 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1590, d)
			}
		} else if yyct1590 == codecSelferValueTypeArray1234 {
			yyl1590 := r.ReadArrayStart()
			if yyl1590 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1590, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1591Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1591Slc
	var yyhl1591 bool = l >= 0
	for yyj1591 := 0; ; yyj1591++ {
		if yyhl1591 {
			if yyj1591 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1591Slc = r.DecodeBytes(yys1591Slc, true, true)
		yys1591 := string(yys1591Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1591 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1591)
		} // end switch yys1591
	} // end for yyj1591
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1595 int
	var yyb1595 bool
	var yyhl1595 bool = l >= 0
	yyj1595++
	if yyhl1595 {
		yyb1595 = yyj1595 > l
	} else {
		yyb1595 = r.CheckBreak()
	}
	if yyb1595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1595++
	if yyhl1595 {
		yyb1595 = yyj1595 > l
	} else {
		yyb1595 = r.CheckBreak()
	}
	if yyb1595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1595++
	if yyhl1595 {
		yyb1595 = yyj1595 > l
	} else {
		yyb1595 = r.CheckBreak()
	}
	if yyb1595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1595++
		if yyhl1595 {
			yyb1595 = yyj1595 > l
		} else {
			yyb1595 = r.CheckBreak()
		}
		if yyb1595 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1595-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1599 := z.EncBinary()
		_ = yym1599
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1600 := !z.EncBinary()
			yy2arr1600 := z.EncBasicHandle().StructToArray
			var yyq1600 [8]bool
			_, _, _ = yysep1600, yyq1600, yy2arr1600
			const yyr1600 bool = false
			yyq1600[1] = true
			yyq1600[2] = true
			yyq1600[7] = x.ContainerID != ""
			var yynn1600 int
			if yyr1600 || yy2arr1600 {
				r.EncodeArrayStart(8)
			} else {
				yynn1600 = 5
				for _, b := range yyq1600 {
					if b {
						yynn1600++
					}
				}
				r.EncodeMapStart(yynn1600)
				yynn1600 = 0
			}
			if yyr1600 || yy2arr1600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1602 := z.EncBinary()
				_ = yym1602
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1603 := z.EncBinary()
				_ = yym1603
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1600 || yy2arr1600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1600[1] {
					yy1605 := &x.State
					yy1605.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1600[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1606 := &x.State
					yy1606.CodecEncodeSelf(e)
				}
			}
			if yyr1600 || yy2arr1600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1600[2] {
					yy1608 := &x.LastTerminationState
					yy1608.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1600[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1609 := &x.LastTerminationState
					yy1609.CodecEncodeSelf(e)
				}
			}
			if yyr1600 || yy2arr1600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1611 := z.EncBinary()
				_ = yym1611
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1612 := z.EncBinary()
				_ = yym1612
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1600 || yy2arr1600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1614 := z.EncBinary()
				_ = yym1614
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1615 := z.EncBinary()
				_ = yym1615
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1600 || yy2arr1600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1617 := z.EncBinary()
				_ = yym1617
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1618 := z.EncBinary()
				_ = yym1618
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1600 || yy2arr1600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1620 := z.EncBinary()
				_ = yym1620
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1621 := z.EncBinary()
				_ = yym1621
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1600 || yy2arr1600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1600[7] {
					yym1623 := z.EncBinary()
					_ = yym1623
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1600[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1624 := z.EncBinary()
					_ = yym1624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1600 || yy2arr1600 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1625 := z.DecBinary()
	_ = yym1625
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1626 := r.ContainerType()
		if yyct1626 == codecSelferValueTypeMap1234 {
			yyl1626 := r.ReadMapStart()
			if yyl1626 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1626, d)
			}
		} else if yyct1626 == codecSelferValueTypeArray1234 {
			yyl1626 := r.ReadArrayStart()
			if yyl1626 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1626, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1627Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1627Slc
	var yyhl1627 bool = l >= 0
	for yyj1627 := 0; ; yyj1627++ {
		if yyhl1627 {
			if yyj1627 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1627Slc = r.DecodeBytes(yys1627Slc, true, true)
		yys1627 := string(yys1627Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1627 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1629 := &x.State
				yyv1629.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1630 := &x.LastTerminationState
				yyv1630.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1627)
		} // end switch yys1627
	} // end for yyj1627
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1636 int
	var yyb1636 bool
	var yyhl1636 bool = l >= 0
	yyj1636++
	if yyhl1636 {
		yyb1636 = yyj1636 > l
	} else {
		yyb1636 = r.CheckBreak()
	}
	if yyb1636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1636++
	if yyhl1636 {
		yyb1636 = yyj1636 > l
	} else {
		yyb1636 = r.CheckBreak()
	}
	if yyb1636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1638 := &x.State
		yyv1638.CodecDecodeSelf(d)
	}
	yyj1636++
	if yyhl1636 {
		yyb1636 = yyj1636 > l
	} else {
		yyb1636 = r.CheckBreak()
	}
	if yyb1636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1639 := &x.LastTerminationState
		yyv1639.CodecDecodeSelf(d)
	}
	yyj1636++
	if yyhl1636 {
		yyb1636 = yyj1636 > l
	} else {
		yyb1636 = r.CheckBreak()
	}
	if yyb1636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1636++
	if yyhl1636 {
		yyb1636 = yyj1636 > l
	} else {
		yyb1636 = r.CheckBreak()
	}
	if yyb1636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1636++
	if yyhl1636 {
		yyb1636 = yyj1636 > l
	} else {
		yyb1636 = r.CheckBreak()
	}
	if yyb1636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1636++
	if yyhl1636 {
		yyb1636 = yyj1636 > l
	} else {
		yyb1636 = r.CheckBreak()
	}
	if yyb1636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1636++
	if yyhl1636 {
		yyb1636 = yyj1636 > l
	} else {
		yyb1636 = r.CheckBreak()
	}
	if yyb1636 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1636++
		if yyhl1636 {
			yyb1636 = yyj1636 > l
		} else {
			yyb1636 = r.CheckBreak()
		}
		if yyb1636 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1636-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1645 := z.EncBinary()
	_ = yym1645
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1646 := z.DecBinary()
	_ = yym1646
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1647 := z.EncBinary()
	_ = yym1647
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1648 := z.DecBinary()
	_ = yym1648
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1649 := z.EncBinary()
		_ = yym1649
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1650 := !z.EncBinary()
			yy2arr1650 := z.EncBasicHandle().StructToArray
			var yyq1650 [6]bool
			_, _, _ = yysep1650, yyq1650, yy2arr1650
			const yyr1650 bool = false
			yyq1650[2] = true
			yyq1650[3] = true
			yyq1650[4] = x.Reason != ""
			yyq1650[5] = x.Message != ""
			var yynn1650 int
			if yyr1650 || yy2arr1650 {
				r.EncodeArrayStart(6)
			} else {
				yynn1650 = 2
				for _, b := range yyq1650 {
					if b {
						yynn1650++
					}
				}
				r.EncodeMapStart(yynn1650)
				yynn1650 = 0
			}
			if yyr1650 || yy2arr1650 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1650 || yy2arr1650 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1650 || yy2arr1650 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1650[2] {
					yy1654 := &x.LastProbeTime
					yym1655 := z.EncBinary()
					_ = yym1655
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1654) {
					} else if yym1655 {
						z.EncBinaryMarshal(yy1654)
					} else if !yym1655 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1654)
					} else {
						z.EncFallback(yy1654)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1650[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1656 := &x.LastProbeTime
					yym1657 := z.EncBinary()
					_ = yym1657
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1656) {
					} else if yym1657 {
						z.EncBinaryMarshal(yy1656)
					} else if !yym1657 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1656)
					} else {
						z.EncFallback(yy1656)
					}
				}
			}
			if yyr1650 || yy2arr1650 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1650[3] {
					yy1659 := &x.LastTransitionTime
					yym1660 := z.EncBinary()
					_ = yym1660
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1659) {
					} else if yym1660 {
						z.EncBinaryMarshal(yy1659)
					} else if !yym1660 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1659)
					} else {
						z.EncFallback(yy1659)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1650[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1661 := &x.LastTransitionTime
					yym1662 := z.EncBinary()
					_ = yym1662
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1661) {
					} else if yym1662 {
						z.EncBinaryMarshal(yy1661)
					} else if !yym1662 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1661)
					} else {
						z.EncFallback(yy1661)
					}
				}
			}
			if yyr1650 || yy2arr1650 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1650[4] {
					yym1664 := z.EncBinary()
					_ = yym1664
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1650[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1665 := z.EncBinary()
					_ = yym1665
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1650 || yy2arr1650 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1650[5] {
					yym1667 := z.EncBinary()
					_ = yym1667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1650[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1668 := z.EncBinary()
					_ = yym1668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1650 || yy2arr1650 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1669 := z.DecBinary()
	_ = yym1669
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1670 := r.ContainerType()
		if yyct1670 == codecSelferValueTypeMap1234 {
			yyl1670 := r.ReadMapStart()
			if yyl1670 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1670, d)
			}
		} else if yyct1670 == codecSelferValueTypeArray1234 {
			yyl1670 := r.ReadArrayStart()
			if yyl1670 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1670, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1671Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1671Slc
	var yyhl1671 bool = l >= 0
	for yyj1671 := 0; ; yyj1671++ {
		if yyhl1671 {
			if yyj1671 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1671Slc = r.DecodeBytes(yys1671Slc, true, true)
		yys1671 := string(yys1671Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1671 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1674 := &x.LastProbeTime
				yym1675 := z.DecBinary()
				_ = yym1675
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1674) {
				} else if yym1675 {
					z.DecBinaryUnmarshal(yyv1674)
				} else if !yym1675 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1674)
				} else {
					z.DecFallback(yyv1674, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1676 := &x.LastTransitionTime
				yym1677 := z.DecBinary()
				_ = yym1677
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1676) {
				} else if yym1677 {
					z.DecBinaryUnmarshal(yyv1676)
				} else if !yym1677 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1676)
				} else {
					z.DecFallback(yyv1676, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1671)
		} // end switch yys1671
	} // end for yyj1671
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1680 int
	var yyb1680 bool
	var yyhl1680 bool = l >= 0
	yyj1680++
	if yyhl1680 {
		yyb1680 = yyj1680 > l
	} else {
		yyb1680 = r.CheckBreak()
	}
	if yyb1680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1680++
	if yyhl1680 {
		yyb1680 = yyj1680 > l
	} else {
		yyb1680 = r.CheckBreak()
	}
	if yyb1680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1680++
	if yyhl1680 {
		yyb1680 = yyj1680 > l
	} else {
		yyb1680 = r.CheckBreak()
	}
	if yyb1680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1683 := &x.LastProbeTime
		yym1684 := z.DecBinary()
		_ = yym1684
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1683) {
		} else if yym1684 {
			z.DecBinaryUnmarshal(yyv1683)
		} else if !yym1684 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1683)
		} else {
			z.DecFallback(yyv1683, false)
		}
	}
	yyj1680++
	if yyhl1680 {
		yyb1680 = yyj1680 > l
	} else {
		yyb1680 = r.CheckBreak()
	}
	if yyb1680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1685 := &x.LastTransitionTime
		yym1686 := z.DecBinary()
		_ = yym1686
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1685) {
		} else if yym1686 {
			z.DecBinaryUnmarshal(yyv1685)
		} else if !yym1686 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1685)
		} else {
			z.DecFallback(yyv1685, false)
		}
	}
	yyj1680++
	if yyhl1680 {
		yyb1680 = yyj1680 > l
	} else {
		yyb1680 = r.CheckBreak()
	}
	if yyb1680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1680++
	if yyhl1680 {
		yyb1680 = yyj1680 > l
	} else {
		yyb1680 = r.CheckBreak()
	}
	if yyb1680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1680++
		if yyhl1680 {
			yyb1680 = yyj1680 > l
		} else {
			yyb1680 = r.CheckBreak()
		}
		if yyb1680 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1680-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1689 := z.EncBinary()
	_ = yym1689
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1690 := z.DecBinary()
	_ = yym1690
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1691 := z.EncBinary()
		_ = yym1691
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1692 := !z.EncBinary()
			yy2arr1692 := z.EncBasicHandle().StructToArray
			var yyq1692 [4]bool
			_, _, _ = yysep1692, yyq1692, yy2arr1692
			const yyr1692 bool = false
			yyq1692[0] = x.Kind != ""
			yyq1692[1] = x.APIVersion != ""
			yyq1692[2] = true
			var yynn1692 int
			if yyr1692 || yy2arr1692 {
				r.EncodeArrayStart(4)
			} else {
				yynn1692 = 1
				for _, b := range yyq1692 {
					if b {
						yynn1692++
					}
				}
				r.EncodeMapStart(yynn1692)
				yynn1692 = 0
			}
			if yyr1692 || yy2arr1692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1692[0] {
					yym1694 := z.EncBinary()
					_ = yym1694
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1692[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1695 := z.EncBinary()
					_ = yym1695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1692 || yy2arr1692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1692[1] {
					yym1697 := z.EncBinary()
					_ = yym1697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1692[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1698 := z.EncBinary()
					_ = yym1698
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1692 || yy2arr1692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1692[2] {
					yy1700 := &x.ListMeta
					yym1701 := z.EncBinary()
					_ = yym1701
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1700) {
					} else {
						z.EncFallback(yy1700)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1692[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1702 := &x.ListMeta
					yym1703 := z.EncBinary()
					_ = yym1703
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1702) {
					} else {
						z.EncFallback(yy1702)
					}
				}
			}
			if yyr1692 || yy2arr1692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1705 := z.EncBinary()
					_ = yym1705
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1706 := z.EncBinary()
					_ = yym1706
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1692 || yy2arr1692 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1707 := z.DecBinary()
	_ = yym1707
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1708 := r.ContainerType()
		if yyct1708 == codecSelferValueTypeMap1234 {
			yyl1708 := r.ReadMapStart()
			if yyl1708 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1708, d)
			}
		} else if yyct1708 == codecSelferValueTypeArray1234 {
			yyl1708 := r.ReadArrayStart()
			if yyl1708 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1708, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1709Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1709Slc
	var yyhl1709 bool = l >= 0
	for yyj1709 := 0; ; yyj1709++ {
		if yyhl1709 {
			if yyj1709 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1709Slc = r.DecodeBytes(yys1709Slc, true, true)
		yys1709 := string(yys1709Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1709 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1712 := &x.ListMeta
				yym1713 := z.DecBinary()
				_ = yym1713
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1712) {
				} else {
					z.DecFallback(yyv1712, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1714 := &x.Items
				yym1715 := z.DecBinary()
				_ = yym1715
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1714), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1709)
		} // end switch yys1709
	} // end for yyj1709
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1716 int
	var yyb1716 bool
	var yyhl1716 bool = l >= 0
	yyj1716++
	if yyhl1716 {
		yyb1716 = yyj1716 > l
	} else {
		yyb1716 = r.CheckBreak()
	}
	if yyb1716 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1716++
	if yyhl1716 {
		yyb1716 = yyj1716 > l
	} else {
		yyb1716 = r.CheckBreak()
	}
	if yyb1716 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1716++
	if yyhl1716 {
		yyb1716 = yyj1716 > l
	} else {
		yyb1716 = r.CheckBreak()
	}
	if yyb1716 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1719 := &x.ListMeta
		yym1720 := z.DecBinary()
		_ = yym1720
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1719) {
		} else {
			z.DecFallback(yyv1719, false)
		}
	}
	yyj1716++
	if yyhl1716 {
		yyb1716 = yyj1716 > l
	} else {
		yyb1716 = r.CheckBreak()
	}
	if yyb1716 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1721 := &x.Items
		yym1722 := z.DecBinary()
		_ = yym1722
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1721), d)
		}
	}
	for {
		yyj1716++
		if yyhl1716 {
			yyb1716 = yyj1716 > l
		} else {
			yyb1716 = r.CheckBreak()
		}
		if yyb1716 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1716-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1723 := z.EncBinary()
	_ = yym1723
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1724 := z.DecBinary()
	_ = yym1724
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1725 := z.EncBinary()
		_ = yym1725
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1726 := !z.EncBinary()
			yy2arr1726 := z.EncBasicHandle().StructToArray
			var yyq1726 [1]bool
			_, _, _ = yysep1726, yyq1726, yy2arr1726
			const yyr1726 bool = false
			var yynn1726 int
			if yyr1726 || yy2arr1726 {
				r.EncodeArrayStart(1)
			} else {
				yynn1726 = 1
				for _, b := range yyq1726 {
					if b {
						yynn1726++
					}
				}
				r.EncodeMapStart(yynn1726)
				yynn1726 = 0
			}
			if yyr1726 || yy2arr1726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1728 := z.EncBinary()
					_ = yym1728
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1729 := z.EncBinary()
					_ = yym1729
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1726 || yy2arr1726 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1730 := z.DecBinary()
	_ = yym1730
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1731 := r.ContainerType()
		if yyct1731 == codecSelferValueTypeMap1234 {
			yyl1731 := r.ReadMapStart()
			if yyl1731 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1731, d)
			}
		} else if yyct1731 == codecSelferValueTypeArray1234 {
			yyl1731 := r.ReadArrayStart()
			if yyl1731 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1731, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1732Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1732Slc
	var yyhl1732 bool = l >= 0
	for yyj1732 := 0; ; yyj1732++ {
		if yyhl1732 {
			if yyj1732 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1732Slc = r.DecodeBytes(yys1732Slc, true, true)
		yys1732 := string(yys1732Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1732 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1733 := &x.NodeSelectorTerms
				yym1734 := z.DecBinary()
				_ = yym1734
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1733), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1732)
		} // end switch yys1732
	} // end for yyj1732
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1735 int
	var yyb1735 bool
	var yyhl1735 bool = l >= 0
	yyj1735++
	if yyhl1735 {
		yyb1735 = yyj1735 > l
	} else {
		yyb1735 = r.CheckBreak()
	}
	if yyb1735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1736 := &x.NodeSelectorTerms
		yym1737 := z.DecBinary()
		_ = yym1737
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1736), d)
		}
	}
	for {
		yyj1735++
		if yyhl1735 {
			yyb1735 = yyj1735 > l
		} else {
			yyb1735 = r.CheckBreak()
		}
		if yyb1735 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1735-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1738 := z.EncBinary()
		_ = yym1738
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1739 := !z.EncBinary()
			yy2arr1739 := z.EncBasicHandle().StructToArray
			var yyq1739 [1]bool
			_, _, _ = yysep1739, yyq1739, yy2arr1739
			const yyr1739 bool = false
			var yynn1739 int
			if yyr1739 || yy2arr1739 {
				r.EncodeArrayStart(1)
			} else {
				yynn1739 = 1
				for _, b := range yyq1739 {
					if b {
						yynn1739++
					}
				}
				r.EncodeMapStart(yynn1739)
				yynn1739 = 0
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1741 := z.EncBinary()
					_ = yym1741
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1742 := z.EncBinary()
					_ = yym1742
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1743 := z.DecBinary()
	_ = yym1743
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1744 := r.ContainerType()
		if yyct1744 == codecSelferValueTypeMap1234 {
			yyl1744 := r.ReadMapStart()
			if yyl1744 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1744, d)
			}
		} else if yyct1744 == codecSelferValueTypeArray1234 {
			yyl1744 := r.ReadArrayStart()
			if yyl1744 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1744, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1745Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1745Slc
	var yyhl1745 bool = l >= 0
	for yyj1745 := 0; ; yyj1745++ {
		if yyhl1745 {
			if yyj1745 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1745Slc = r.DecodeBytes(yys1745Slc, true, true)
		yys1745 := string(yys1745Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1745 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1746 := &x.MatchExpressions
				yym1747 := z.DecBinary()
				_ = yym1747
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1746), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1745)
		} // end switch yys1745
	} // end for yyj1745
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1748 int
	var yyb1748 bool
	var yyhl1748 bool = l >= 0
	yyj1748++
	if yyhl1748 {
		yyb1748 = yyj1748 > l
	} else {
		yyb1748 = r.CheckBreak()
	}
	if yyb1748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1749 := &x.MatchExpressions
		yym1750 := z.DecBinary()
		_ = yym1750
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1749), d)
		}
	}
	for {
		yyj1748++
		if yyhl1748 {
			yyb1748 = yyj1748 > l
		} else {
			yyb1748 = r.CheckBreak()
		}
		if yyb1748 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1748-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1751 := z.EncBinary()
		_ = yym1751
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1752 := !z.EncBinary()
			yy2arr1752 := z.EncBasicHandle().StructToArray
			var yyq1752 [3]bool
			_, _, _ = yysep1752, yyq1752, yy2arr1752
			const yyr1752 bool = false
			yyq1752[2] = len(x.Values) != 0
			var yynn1752 int
			if yyr1752 || yy2arr1752 {
				r.EncodeArrayStart(3)
			} else {
				yynn1752 = 2
				for _, b := range yyq1752 {
					if b {
						yynn1752++
					}
				}
				r.EncodeMapStart(yynn1752)
				yynn1752 = 0
			}
			if yyr1752 || yy2arr1752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1754 := z.EncBinary()
				_ = yym1754
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1755 := z.EncBinary()
				_ = yym1755
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1752 || yy2arr1752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1752 || yy2arr1752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1752[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1758 := z.EncBinary()
						_ = yym1758
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1752[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1759 := z.EncBinary()
						_ = yym1759
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1752 || yy2arr1752 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1760 := z.DecBinary()
	_ = yym1760
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1761 := r.ContainerType()
		if yyct1761 == codecSelferValueTypeMap1234 {
			yyl1761 := r.ReadMapStart()
			if yyl1761 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1761, d)
			}
		} else if yyct1761 == codecSelferValueTypeArray1234 {
			yyl1761 := r.ReadArrayStart()
			if yyl1761 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1761, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1762Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1762Slc
	var yyhl1762 bool = l >= 0
	for yyj1762 := 0; ; yyj1762++ {
		if yyhl1762 {
			if yyj1762 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1762Slc = r.DecodeBytes(yys1762Slc, true, true)
		yys1762 := string(yys1762Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1762 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1765 := &x.Values
				yym1766 := z.DecBinary()
				_ = yym1766
				if false {
				} else {
					z.F.DecSliceStringX(yyv1765, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1762)
		} // end switch yys1762
	} // end for yyj1762
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1767 int
	var yyb1767 bool
	var yyhl1767 bool = l >= 0
	yyj1767++
	if yyhl1767 {
		yyb1767 = yyj1767 > l
	} else {
		yyb1767 = r.CheckBreak()
	}
	if yyb1767 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1767++
	if yyhl1767 {
		yyb1767 = yyj1767 > l
	} else {
		yyb1767 = r.CheckBreak()
	}
	if yyb1767 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1767++
	if yyhl1767 {
		yyb1767 = yyj1767 > l
	} else {
		yyb1767 = r.CheckBreak()
	}
	if yyb1767 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1770 := &x.Values
		yym1771 := z.DecBinary()
		_ = yym1771
		if false {
		} else {
			z.F.DecSliceStringX(yyv1770, false, d)
		}
	}
	for {
		yyj1767++
		if yyhl1767 {
			yyb1767 = yyj1767 > l
		} else {
			yyb1767 = r.CheckBreak()
		}
		if yyb1767 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1767-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1772 := z.EncBinary()
	_ = yym1772
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1773 := z.DecBinary()
	_ = yym1773
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1774 := z.EncBinary()
		_ = yym1774
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1775 := !z.EncBinary()
			yy2arr1775 := z.EncBasicHandle().StructToArray
			var yyq1775 [3]bool
			_, _, _ = yysep1775, yyq1775, yy2arr1775
			const yyr1775 bool = false
			yyq1775[0] = x.NodeAffinity != nil
			yyq1775[1] = x.PodAffinity != nil
			yyq1775[2] = x.PodAntiAffinity != nil
			var yynn1775 int
			if yyr1775 || yy2arr1775 {
				r.EncodeArrayStart(3)
			} else {
				yynn1775 = 0
				for _, b := range yyq1775 {
					if b {
						yynn1775++
					}
				}
				r.EncodeMapStart(yynn1775)
				yynn1775 = 0
			}
			if yyr1775 || yy2arr1775 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1775[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1775[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1775 || yy2arr1775 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1775[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1775[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1775 || yy2arr1775 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1775[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1775[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1775 || yy2arr1775 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1779 := z.DecBinary()
	_ = yym1779
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1780 := r.ContainerType()
		if yyct1780 == codecSelferValueTypeMap1234 {
			yyl1780 := r.ReadMapStart()
			if yyl1780 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1780, d)
			}
		} else if yyct1780 == codecSelferValueTypeArray1234 {
			yyl1780 := r.ReadArrayStart()
			if yyl1780 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1780, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1781Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1781Slc
	var yyhl1781 bool = l >= 0
	for yyj1781 := 0; ; yyj1781++ {
		if yyhl1781 {
			if yyj1781 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1781Slc = r.DecodeBytes(yys1781Slc, true, true)
		yys1781 := string(yys1781Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1781 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1781)
		} // end switch yys1781
	} // end for yyj1781
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1785 int
	var yyb1785 bool
	var yyhl1785 bool = l >= 0
	yyj1785++
	if yyhl1785 {
		yyb1785 = yyj1785 > l
	} else {
		yyb1785 = r.CheckBreak()
	}
	if yyb1785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1785++
	if yyhl1785 {
		yyb1785 = yyj1785 > l
	} else {
		yyb1785 = r.CheckBreak()
	}
	if yyb1785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1785++
	if yyhl1785 {
		yyb1785 = yyj1785 > l
	} else {
		yyb1785 = r.CheckBreak()
	}
	if yyb1785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1785++
		if yyhl1785 {
			yyb1785 = yyj1785 > l
		} else {
			yyb1785 = r.CheckBreak()
		}
		if yyb1785 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1785-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1789 := z.EncBinary()
		_ = yym1789
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1790 := !z.EncBinary()
			yy2arr1790 := z.EncBasicHandle().StructToArray
			var yyq1790 [2]bool
			_, _, _ = yysep1790, yyq1790, yy2arr1790
			const yyr1790 bool = false
			yyq1790[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1790[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1790 int
			if yyr1790 || yy2arr1790 {
				r.EncodeArrayStart(2)
			} else {
				yynn1790 = 0
				for _, b := range yyq1790 {
					if b {
						yynn1790++
					}
				}
				r.EncodeMapStart(yynn1790)
				yynn1790 = 0
			}
			if yyr1790 || yy2arr1790 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1790[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1792 := z.EncBinary()
						_ = yym1792
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1790[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1793 := z.EncBinary()
						_ = yym1793
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1790 || yy2arr1790 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1790[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1795 := z.EncBinary()
						_ = yym1795
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1790[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1796 := z.EncBinary()
						_ = yym1796
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1790 || yy2arr1790 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1797 := z.DecBinary()
	_ = yym1797
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1798 := r.ContainerType()
		if yyct1798 == codecSelferValueTypeMap1234 {
			yyl1798 := r.ReadMapStart()
			if yyl1798 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1798, d)
			}
		} else if yyct1798 == codecSelferValueTypeArray1234 {
			yyl1798 := r.ReadArrayStart()
			if yyl1798 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1798, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1799Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1799Slc
	var yyhl1799 bool = l >= 0
	for yyj1799 := 0; ; yyj1799++ {
		if yyhl1799 {
			if yyj1799 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1799Slc = r.DecodeBytes(yys1799Slc, true, true)
		yys1799 := string(yys1799Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1799 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1800 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1801 := z.DecBinary()
				_ = yym1801
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1800), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1802 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1803 := z.DecBinary()
				_ = yym1803
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1802), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1799)
		} // end switch yys1799
	} // end for yyj1799
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1804 int
	var yyb1804 bool
	var yyhl1804 bool = l >= 0
	yyj1804++
	if yyhl1804 {
		yyb1804 = yyj1804 > l
	} else {
		yyb1804 = r.CheckBreak()
	}
	if yyb1804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1805 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1806 := z.DecBinary()
		_ = yym1806
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1805), d)
		}
	}
	yyj1804++
	if yyhl1804 {
		yyb1804 = yyj1804 > l
	} else {
		yyb1804 = r.CheckBreak()
	}
	if yyb1804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1807 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1808 := z.DecBinary()
		_ = yym1808
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1807), d)
		}
	}
	for {
		yyj1804++
		if yyhl1804 {
			yyb1804 = yyj1804 > l
		} else {
			yyb1804 = r.CheckBreak()
		}
		if yyb1804 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1804-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1809 := z.EncBinary()
		_ = yym1809
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1810 := !z.EncBinary()
			yy2arr1810 := z.EncBasicHandle().StructToArray
			var yyq1810 [2]bool
			_, _, _ = yysep1810, yyq1810, yy2arr1810
			const yyr1810 bool = false
			yyq1810[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1810[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1810 int
			if yyr1810 || yy2arr1810 {
				r.EncodeArrayStart(2)
			} else {
				yynn1810 = 0
				for _, b := range yyq1810 {
					if b {
						yynn1810++
					}
				}
				r.EncodeMapStart(yynn1810)
				yynn1810 = 0
			}
			if yyr1810 || yy2arr1810 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1810[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1812 := z.EncBinary()
						_ = yym1812
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1810[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1813 := z.EncBinary()
						_ = yym1813
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1810 || yy2arr1810 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1810[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1815 := z.EncBinary()
						_ = yym1815
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1810[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1816 := z.EncBinary()
						_ = yym1816
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1810 || yy2arr1810 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1817 := z.DecBinary()
	_ = yym1817
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1818 := r.ContainerType()
		if yyct1818 == codecSelferValueTypeMap1234 {
			yyl1818 := r.ReadMapStart()
			if yyl1818 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1818, d)
			}
		} else if yyct1818 == codecSelferValueTypeArray1234 {
			yyl1818 := r.ReadArrayStart()
			if yyl1818 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1818, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1819Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1819Slc
	var yyhl1819 bool = l >= 0
	for yyj1819 := 0; ; yyj1819++ {
		if yyhl1819 {
			if yyj1819 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1819Slc = r.DecodeBytes(yys1819Slc, true, true)
		yys1819 := string(yys1819Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1819 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1820 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1821 := z.DecBinary()
				_ = yym1821
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1820), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1822 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1823 := z.DecBinary()
				_ = yym1823
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1822), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1819)
		} // end switch yys1819
	} // end for yyj1819
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1824 int
	var yyb1824 bool
	var yyhl1824 bool = l >= 0
	yyj1824++
	if yyhl1824 {
		yyb1824 = yyj1824 > l
	} else {
		yyb1824 = r.CheckBreak()
	}
	if yyb1824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1825 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1826 := z.DecBinary()
		_ = yym1826
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1825), d)
		}
	}
	yyj1824++
	if yyhl1824 {
		yyb1824 = yyj1824 > l
	} else {
		yyb1824 = r.CheckBreak()
	}
	if yyb1824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1827 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1828 := z.DecBinary()
		_ = yym1828
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1827), d)
		}
	}
	for {
		yyj1824++
		if yyhl1824 {
			yyb1824 = yyj1824 > l
		} else {
			yyb1824 = r.CheckBreak()
		}
		if yyb1824 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1824-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1829 := z.EncBinary()
		_ = yym1829
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1830 := !z.EncBinary()
			yy2arr1830 := z.EncBasicHandle().StructToArray
			var yyq1830 [2]bool
			_, _, _ = yysep1830, yyq1830, yy2arr1830
			const yyr1830 bool = false
			var yynn1830 int
			if yyr1830 || yy2arr1830 {
				r.EncodeArrayStart(2)
			} else {
				yynn1830 = 2
				for _, b := range yyq1830 {
					if b {
						yynn1830++
					}
				}
				r.EncodeMapStart(yynn1830)
				yynn1830 = 0
			}
			if yyr1830 || yy2arr1830 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1832 := z.EncBinary()
				_ = yym1832
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1833 := z.EncBinary()
				_ = yym1833
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1830 || yy2arr1830 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1835 := &x.PodAffinityTerm
				yy1835.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1836 := &x.PodAffinityTerm
				yy1836.CodecEncodeSelf(e)
			}
			if yyr1830 || yy2arr1830 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1837 := z.DecBinary()
	_ = yym1837
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1838 := r.ContainerType()
		if yyct1838 == codecSelferValueTypeMap1234 {
			yyl1838 := r.ReadMapStart()
			if yyl1838 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1838, d)
			}
		} else if yyct1838 == codecSelferValueTypeArray1234 {
			yyl1838 := r.ReadArrayStart()
			if yyl1838 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1838, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1839Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1839Slc
	var yyhl1839 bool = l >= 0
	for yyj1839 := 0; ; yyj1839++ {
		if yyhl1839 {
			if yyj1839 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1839Slc = r.DecodeBytes(yys1839Slc, true, true)
		yys1839 := string(yys1839Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1839 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1841 := &x.PodAffinityTerm
				yyv1841.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1839)
		} // end switch yys1839
	} // end for yyj1839
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1842 int
	var yyb1842 bool
	var yyhl1842 bool = l >= 0
	yyj1842++
	if yyhl1842 {
		yyb1842 = yyj1842 > l
	} else {
		yyb1842 = r.CheckBreak()
	}
	if yyb1842 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1842++
	if yyhl1842 {
		yyb1842 = yyj1842 > l
	} else {
		yyb1842 = r.CheckBreak()
	}
	if yyb1842 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1844 := &x.PodAffinityTerm
		yyv1844.CodecDecodeSelf(d)
	}
	for {
		yyj1842++
		if yyhl1842 {
			yyb1842 = yyj1842 > l
		} else {
			yyb1842 = r.CheckBreak()
		}
		if yyb1842 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1842-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1845 := z.EncBinary()
		_ = yym1845
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1846 := !z.EncBinary()
			yy2arr1846 := z.EncBasicHandle().StructToArray
			var yyq1846 [3]bool
			_, _, _ = yysep1846, yyq1846, yy2arr1846
			const yyr1846 bool = false
			yyq1846[0] = x.LabelSelector != nil
			yyq1846[2] = x.TopologyKey != ""
			var yynn1846 int
			if yyr1846 || yy2arr1846 {
				r.EncodeArrayStart(3)
			} else {
				yynn1846 = 1
				for _, b := range yyq1846 {
					if b {
						yynn1846++
					}
				}
				r.EncodeMapStart(yynn1846)
				yynn1846 = 0
			}
			if yyr1846 || yy2arr1846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1846[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1848 := z.EncBinary()
						_ = yym1848
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1846[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1849 := z.EncBinary()
						_ = yym1849
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1846 || yy2arr1846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1851 := z.EncBinary()
					_ = yym1851
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1852 := z.EncBinary()
					_ = yym1852
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1846 || yy2arr1846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1846[2] {
					yym1854 := z.EncBinary()
					_ = yym1854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1846[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1855 := z.EncBinary()
					_ = yym1855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1846 || yy2arr1846 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1856 := z.DecBinary()
	_ = yym1856
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1857 := r.ContainerType()
		if yyct1857 == codecSelferValueTypeMap1234 {
			yyl1857 := r.ReadMapStart()
			if yyl1857 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1857, d)
			}
		} else if yyct1857 == codecSelferValueTypeArray1234 {
			yyl1857 := r.ReadArrayStart()
			if yyl1857 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1857, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1858Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1858Slc
	var yyhl1858 bool = l >= 0
	for yyj1858 := 0; ; yyj1858++ {
		if yyhl1858 {
			if yyj1858 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1858Slc = r.DecodeBytes(yys1858Slc, true, true)
		yys1858 := string(yys1858Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1858 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym1860 := z.DecBinary()
				_ = yym1860
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1861 := &x.Namespaces
				yym1862 := z.DecBinary()
				_ = yym1862
				if false {
				} else {
					z.F.DecSliceStringX(yyv1861, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1858)
		} // end switch yys1858
	} // end for yyj1858
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1864 int
	var yyb1864 bool
	var yyhl1864 bool = l >= 0
	yyj1864++
	if yyhl1864 {
		yyb1864 = yyj1864 > l
	} else {
		yyb1864 = r.CheckBreak()
	}
	if yyb1864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym1866 := z.DecBinary()
		_ = yym1866
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1864++
	if yyhl1864 {
		yyb1864 = yyj1864 > l
	} else {
		yyb1864 = r.CheckBreak()
	}
	if yyb1864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1867 := &x.Namespaces
		yym1868 := z.DecBinary()
		_ = yym1868
		if false {
		} else {
			z.F.DecSliceStringX(yyv1867, false, d)
		}
	}
	yyj1864++
	if yyhl1864 {
		yyb1864 = yyj1864 > l
	} else {
		yyb1864 = r.CheckBreak()
	}
	if yyb1864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1864++
		if yyhl1864 {
			yyb1864 = yyj1864 > l
		} else {
			yyb1864 = r.CheckBreak()
		}
		if yyb1864 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1864-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1870 := z.EncBinary()
		_ = yym1870
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1871 := !z.EncBinary()
			yy2arr1871 := z.EncBasicHandle().StructToArray
			var yyq1871 [2]bool
			_, _, _ = yysep1871, yyq1871, yy2arr1871
			const yyr1871 bool = false
			yyq1871[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1871[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1871 int
			if yyr1871 || yy2arr1871 {
				r.EncodeArrayStart(2)
			} else {
				yynn1871 = 0
				for _, b := range yyq1871 {
					if b {
						yynn1871++
					}
				}
				r.EncodeMapStart(yynn1871)
				yynn1871 = 0
			}
			if yyr1871 || yy2arr1871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1871[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1871[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1871 || yy2arr1871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1871[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1874 := z.EncBinary()
						_ = yym1874
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1871[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1875 := z.EncBinary()
						_ = yym1875
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1871 || yy2arr1871 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1876 := z.DecBinary()
	_ = yym1876
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1877 := r.ContainerType()
		if yyct1877 == codecSelferValueTypeMap1234 {
			yyl1877 := r.ReadMapStart()
			if yyl1877 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1877, d)
			}
		} else if yyct1877 == codecSelferValueTypeArray1234 {
			yyl1877 := r.ReadArrayStart()
			if yyl1877 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1877, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1878Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1878Slc
	var yyhl1878 bool = l >= 0
	for yyj1878 := 0; ; yyj1878++ {
		if yyhl1878 {
			if yyj1878 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1878Slc = r.DecodeBytes(yys1878Slc, true, true)
		yys1878 := string(yys1878Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1878 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1880 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1881 := z.DecBinary()
				_ = yym1881
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1880), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1878)
		} // end switch yys1878
	} // end for yyj1878
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1882 int
	var yyb1882 bool
	var yyhl1882 bool = l >= 0
	yyj1882++
	if yyhl1882 {
		yyb1882 = yyj1882 > l
	} else {
		yyb1882 = r.CheckBreak()
	}
	if yyb1882 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1882++
	if yyhl1882 {
		yyb1882 = yyj1882 > l
	} else {
		yyb1882 = r.CheckBreak()
	}
	if yyb1882 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1884 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1885 := z.DecBinary()
		_ = yym1885
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1884), d)
		}
	}
	for {
		yyj1882++
		if yyhl1882 {
			yyb1882 = yyj1882 > l
		} else {
			yyb1882 = r.CheckBreak()
		}
		if yyb1882 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1882-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1886 := z.EncBinary()
		_ = yym1886
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1887 := !z.EncBinary()
			yy2arr1887 := z.EncBasicHandle().StructToArray
			var yyq1887 [2]bool
			_, _, _ = yysep1887, yyq1887, yy2arr1887
			const yyr1887 bool = false
			var yynn1887 int
			if yyr1887 || yy2arr1887 {
				r.EncodeArrayStart(2)
			} else {
				yynn1887 = 2
				for _, b := range yyq1887 {
					if b {
						yynn1887++
					}
				}
				r.EncodeMapStart(yynn1887)
				yynn1887 = 0
			}
			if yyr1887 || yy2arr1887 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1889 := z.EncBinary()
				_ = yym1889
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1890 := z.EncBinary()
				_ = yym1890
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1887 || yy2arr1887 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1892 := &x.Preference
				yy1892.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1893 := &x.Preference
				yy1893.CodecEncodeSelf(e)
			}
			if yyr1887 || yy2arr1887 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1894 := z.DecBinary()
	_ = yym1894
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1895 := r.ContainerType()
		if yyct1895 == codecSelferValueTypeMap1234 {
			yyl1895 := r.ReadMapStart()
			if yyl1895 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1895, d)
			}
		} else if yyct1895 == codecSelferValueTypeArray1234 {
			yyl1895 := r.ReadArrayStart()
			if yyl1895 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1895, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1896Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1896Slc
	var yyhl1896 bool = l >= 0
	for yyj1896 := 0; ; yyj1896++ {
		if yyhl1896 {
			if yyj1896 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1896Slc = r.DecodeBytes(yys1896Slc, true, true)
		yys1896 := string(yys1896Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1896 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1898 := &x.Preference
				yyv1898.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1896)
		} // end switch yys1896
	} // end for yyj1896
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1899 int
	var yyb1899 bool
	var yyhl1899 bool = l >= 0
	yyj1899++
	if yyhl1899 {
		yyb1899 = yyj1899 > l
	} else {
		yyb1899 = r.CheckBreak()
	}
	if yyb1899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1899++
	if yyhl1899 {
		yyb1899 = yyj1899 > l
	} else {
		yyb1899 = r.CheckBreak()
	}
	if yyb1899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1901 := &x.Preference
		yyv1901.CodecDecodeSelf(d)
	}
	for {
		yyj1899++
		if yyhl1899 {
			yyb1899 = yyj1899 > l
		} else {
			yyb1899 = r.CheckBreak()
		}
		if yyb1899 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1899-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1902 := z.EncBinary()
		_ = yym1902
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1903 := !z.EncBinary()
			yy2arr1903 := z.EncBasicHandle().StructToArray
			var yyq1903 [3]bool
			_, _, _ = yysep1903, yyq1903, yy2arr1903
			const yyr1903 bool = false
			yyq1903[1] = x.Value != ""
			var yynn1903 int
			if yyr1903 || yy2arr1903 {
				r.EncodeArrayStart(3)
			} else {
				yynn1903 = 2
				for _, b := range yyq1903 {
					if b {
						yynn1903++
					}
				}
				r.EncodeMapStart(yynn1903)
				yynn1903 = 0
			}
			if yyr1903 || yy2arr1903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1905 := z.EncBinary()
				_ = yym1905
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1906 := z.EncBinary()
				_ = yym1906
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1903 || yy2arr1903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1903[1] {
					yym1908 := z.EncBinary()
					_ = yym1908
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1903[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1909 := z.EncBinary()
					_ = yym1909
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1903 || yy2arr1903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr1903 || yy2arr1903 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1911 := z.DecBinary()
	_ = yym1911
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1912 := r.ContainerType()
		if yyct1912 == codecSelferValueTypeMap1234 {
			yyl1912 := r.ReadMapStart()
			if yyl1912 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1912, d)
			}
		} else if yyct1912 == codecSelferValueTypeArray1234 {
			yyl1912 := r.ReadArrayStart()
			if yyl1912 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1912, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1913Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1913Slc
	var yyhl1913 bool = l >= 0
	for yyj1913 := 0; ; yyj1913++ {
		if yyhl1913 {
			if yyj1913 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1913Slc = r.DecodeBytes(yys1913Slc, true, true)
		yys1913 := string(yys1913Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1913 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1913)
		} // end switch yys1913
	} // end for yyj1913
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1917 int
	var yyb1917 bool
	var yyhl1917 bool = l >= 0
	yyj1917++
	if yyhl1917 {
		yyb1917 = yyj1917 > l
	} else {
		yyb1917 = r.CheckBreak()
	}
	if yyb1917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1917++
	if yyhl1917 {
		yyb1917 = yyj1917 > l
	} else {
		yyb1917 = r.CheckBreak()
	}
	if yyb1917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1917++
	if yyhl1917 {
		yyb1917 = yyj1917 > l
	} else {
		yyb1917 = r.CheckBreak()
	}
	if yyb1917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1917++
		if yyhl1917 {
			yyb1917 = yyj1917 > l
		} else {
			yyb1917 = r.CheckBreak()
		}
		if yyb1917 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1917-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1921 := z.EncBinary()
	_ = yym1921
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1922 := z.DecBinary()
	_ = yym1922
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1923 := z.EncBinary()
		_ = yym1923
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1924 := !z.EncBinary()
			yy2arr1924 := z.EncBasicHandle().StructToArray
			var yyq1924 [4]bool
			_, _, _ = yysep1924, yyq1924, yy2arr1924
			const yyr1924 bool = false
			yyq1924[0] = x.Key != ""
			yyq1924[1] = x.Operator != ""
			yyq1924[2] = x.Value != ""
			yyq1924[3] = x.Effect != ""
			var yynn1924 int
			if yyr1924 || yy2arr1924 {
				r.EncodeArrayStart(4)
			} else {
				yynn1924 = 0
				for _, b := range yyq1924 {
					if b {
						yynn1924++
					}
				}
				r.EncodeMapStart(yynn1924)
				yynn1924 = 0
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1924[0] {
					yym1926 := z.EncBinary()
					_ = yym1926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1924[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1927 := z.EncBinary()
					_ = yym1927
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1924[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1924[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1924[2] {
					yym1930 := z.EncBinary()
					_ = yym1930
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1924[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1931 := z.EncBinary()
					_ = yym1931
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1924[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1924[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1933 := z.DecBinary()
	_ = yym1933
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1934 := r.ContainerType()
		if yyct1934 == codecSelferValueTypeMap1234 {
			yyl1934 := r.ReadMapStart()
			if yyl1934 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1934, d)
			}
		} else if yyct1934 == codecSelferValueTypeArray1234 {
			yyl1934 := r.ReadArrayStart()
			if yyl1934 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1934, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1935Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1935Slc
	var yyhl1935 bool = l >= 0
	for yyj1935 := 0; ; yyj1935++ {
		if yyhl1935 {
			if yyj1935 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1935Slc = r.DecodeBytes(yys1935Slc, true, true)
		yys1935 := string(yys1935Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1935 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1935)
		} // end switch yys1935
	} // end for yyj1935
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1940 int
	var yyb1940 bool
	var yyhl1940 bool = l >= 0
	yyj1940++
	if yyhl1940 {
		yyb1940 = yyj1940 > l
	} else {
		yyb1940 = r.CheckBreak()
	}
	if yyb1940 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1940++
	if yyhl1940 {
		yyb1940 = yyj1940 > l
	} else {
		yyb1940 = r.CheckBreak()
	}
	if yyb1940 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj1940++
	if yyhl1940 {
		yyb1940 = yyj1940 > l
	} else {
		yyb1940 = r.CheckBreak()
	}
	if yyb1940 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1940++
	if yyhl1940 {
		yyb1940 = yyj1940 > l
	} else {
		yyb1940 = r.CheckBreak()
	}
	if yyb1940 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1940++
		if yyhl1940 {
			yyb1940 = yyj1940 > l
		} else {
			yyb1940 = r.CheckBreak()
		}
		if yyb1940 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1940-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1945 := z.EncBinary()
	_ = yym1945
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1946 := z.DecBinary()
	_ = yym1946
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1947 := z.EncBinary()
		_ = yym1947
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1948 := !z.EncBinary()
			yy2arr1948 := z.EncBasicHandle().StructToArray
			var yyq1948 [13]bool
			_, _, _ = yysep1948, yyq1948, yy2arr1948
			const yyr1948 bool = false
			yyq1948[2] = x.RestartPolicy != ""
			yyq1948[3] = x.TerminationGracePeriodSeconds != nil
			yyq1948[4] = x.ActiveDeadlineSeconds != nil
			yyq1948[5] = x.DNSPolicy != ""
			yyq1948[6] = len(x.NodeSelector) != 0
			yyq1948[8] = x.NodeName != ""
			yyq1948[9] = x.SecurityContext != nil
			yyq1948[10] = len(x.ImagePullSecrets) != 0
			yyq1948[11] = x.Hostname != ""
			yyq1948[12] = x.Subdomain != ""
			var yynn1948 int
			if yyr1948 || yy2arr1948 {
				r.EncodeArrayStart(13)
			} else {
				yynn1948 = 3
				for _, b := range yyq1948 {
					if b {
						yynn1948++
					}
				}
				r.EncodeMapStart(yynn1948)
				yynn1948 = 0
			}
			if yyr1948 || yy2arr1948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1950 := z.EncBinary()
					_ = yym1950
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1951 := z.EncBinary()
					_ = yym1951
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr1948 || yy2arr1948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1953 := z.EncBinary()
					_ = yym1953
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1954 := z.EncBinary()
					_ = yym1954
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1948 || yy2arr1948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1948[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1948[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1948 || yy2arr1948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1948[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1957 := *x.TerminationGracePeriodSeconds
						yym1958 := z.EncBinary()
						_ = yym1958
						if false {
						} else {
							r.EncodeInt(int64(yy1957))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1948[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1959 := *x.TerminationGracePeriodSeconds
						yym1960 := z.EncBinary()
						_ = yym1960
						if false {
						} else {
							r.EncodeInt(int64(yy1959))
						}
					}
				}
			}
			if yyr1948 || yy2arr1948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1948[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1962 := *x.ActiveDeadlineSeconds
						yym1963 := z.EncBinary()
						_ = yym1963
						if false {
						} else {
							r.EncodeInt(int64(yy1962))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1948[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1964 := *x.ActiveDeadlineSeconds
						yym1965 := z.EncBinary()
						_ = yym1965
						if false {
						} else {
							r.EncodeInt(int64(yy1964))
						}
					}
				}
			}
			if yyr1948 || yy2arr1948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1948[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1948[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1948 || yy2arr1948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1948[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1968 := z.EncBinary()
						_ = yym1968
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1948[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1969 := z.EncBinary()
						_ = yym1969
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1948 || yy2arr1948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1971 := z.EncBinary()
				_ = yym1971
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1972 := z.EncBinary()
				_ = yym1972
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr1948 || yy2arr1948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1948[8] {
					yym1974 := z.EncBinary()
					_ = yym1974
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1948[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1975 := z.EncBinary()
					_ = yym1975
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1948 || yy2arr1948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1948[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1948[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1948 || yy2arr1948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1948[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1978 := z.EncBinary()
						_ = yym1978
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1948[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1979 := z.EncBinary()
						_ = yym1979
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1948 || yy2arr1948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1948[11] {
					yym1981 := z.EncBinary()
					_ = yym1981
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1948[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1982 := z.EncBinary()
					_ = yym1982
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr1948 || yy2arr1948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1948[12] {
					yym1984 := z.EncBinary()
					_ = yym1984
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1948[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1985 := z.EncBinary()
					_ = yym1985
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr1948 || yy2arr1948 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1986 := z.DecBinary()
	_ = yym1986
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1987 := r.ContainerType()
		if yyct1987 == codecSelferValueTypeMap1234 {
			yyl1987 := r.ReadMapStart()
			if yyl1987 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1987, d)
			}
		} else if yyct1987 == codecSelferValueTypeArray1234 {
			yyl1987 := r.ReadArrayStart()
			if yyl1987 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1987, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1988Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1988Slc
	var yyhl1988 bool = l >= 0
	for yyj1988 := 0; ; yyj1988++ {
		if yyhl1988 {
			if yyj1988 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1988Slc = r.DecodeBytes(yys1988Slc, true, true)
		yys1988 := string(yys1988Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1988 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1989 := &x.Volumes
				yym1990 := z.DecBinary()
				_ = yym1990
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1989), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1991 := &x.Containers
				yym1992 := z.DecBinary()
				_ = yym1992
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1991), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1995 := z.DecBinary()
				_ = yym1995
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1997 := z.DecBinary()
				_ = yym1997
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1999 := &x.NodeSelector
				yym2000 := z.DecBinary()
				_ = yym2000
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1999, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2004 := &x.ImagePullSecrets
				yym2005 := z.DecBinary()
				_ = yym2005
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2004), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1988)
		} // end switch yys1988
	} // end for yyj1988
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2008 int
	var yyb2008 bool
	var yyhl2008 bool = l >= 0
	yyj2008++
	if yyhl2008 {
		yyb2008 = yyj2008 > l
	} else {
		yyb2008 = r.CheckBreak()
	}
	if yyb2008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2009 := &x.Volumes
		yym2010 := z.DecBinary()
		_ = yym2010
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2009), d)
		}
	}
	yyj2008++
	if yyhl2008 {
		yyb2008 = yyj2008 > l
	} else {
		yyb2008 = r.CheckBreak()
	}
	if yyb2008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2011 := &x.Containers
		yym2012 := z.DecBinary()
		_ = yym2012
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2011), d)
		}
	}
	yyj2008++
	if yyhl2008 {
		yyb2008 = yyj2008 > l
	} else {
		yyb2008 = r.CheckBreak()
	}
	if yyb2008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2008++
	if yyhl2008 {
		yyb2008 = yyj2008 > l
	} else {
		yyb2008 = r.CheckBreak()
	}
	if yyb2008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2015 := z.DecBinary()
		_ = yym2015
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2008++
	if yyhl2008 {
		yyb2008 = yyj2008 > l
	} else {
		yyb2008 = r.CheckBreak()
	}
	if yyb2008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2017 := z.DecBinary()
		_ = yym2017
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2008++
	if yyhl2008 {
		yyb2008 = yyj2008 > l
	} else {
		yyb2008 = r.CheckBreak()
	}
	if yyb2008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2008++
	if yyhl2008 {
		yyb2008 = yyj2008 > l
	} else {
		yyb2008 = r.CheckBreak()
	}
	if yyb2008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2019 := &x.NodeSelector
		yym2020 := z.DecBinary()
		_ = yym2020
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2019, false, d)
		}
	}
	yyj2008++
	if yyhl2008 {
		yyb2008 = yyj2008 > l
	} else {
		yyb2008 = r.CheckBreak()
	}
	if yyb2008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2008++
	if yyhl2008 {
		yyb2008 = yyj2008 > l
	} else {
		yyb2008 = r.CheckBreak()
	}
	if yyb2008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2008++
	if yyhl2008 {
		yyb2008 = yyj2008 > l
	} else {
		yyb2008 = r.CheckBreak()
	}
	if yyb2008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2008++
	if yyhl2008 {
		yyb2008 = yyj2008 > l
	} else {
		yyb2008 = r.CheckBreak()
	}
	if yyb2008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2024 := &x.ImagePullSecrets
		yym2025 := z.DecBinary()
		_ = yym2025
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2024), d)
		}
	}
	yyj2008++
	if yyhl2008 {
		yyb2008 = yyj2008 > l
	} else {
		yyb2008 = r.CheckBreak()
	}
	if yyb2008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2008++
	if yyhl2008 {
		yyb2008 = yyj2008 > l
	} else {
		yyb2008 = r.CheckBreak()
	}
	if yyb2008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj2008++
		if yyhl2008 {
			yyb2008 = yyj2008 > l
		} else {
			yyb2008 = r.CheckBreak()
		}
		if yyb2008 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2008-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2028 := z.EncBinary()
		_ = yym2028
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2029 := !z.EncBinary()
			yy2arr2029 := z.EncBasicHandle().StructToArray
			var yyq2029 [8]bool
			_, _, _ = yysep2029, yyq2029, yy2arr2029
			const yyr2029 bool = false
			yyq2029[0] = x.HostNetwork != false
			yyq2029[1] = x.HostPID != false
			yyq2029[2] = x.HostIPC != false
			yyq2029[3] = x.SELinuxOptions != nil
			yyq2029[4] = x.RunAsUser != nil
			yyq2029[5] = x.RunAsNonRoot != nil
			yyq2029[6] = len(x.SupplementalGroups) != 0
			yyq2029[7] = x.FSGroup != nil
			var yynn2029 int
			if yyr2029 || yy2arr2029 {
				r.EncodeArrayStart(8)
			} else {
				yynn2029 = 0
				for _, b := range yyq2029 {
					if b {
						yynn2029++
					}
				}
				r.EncodeMapStart(yynn2029)
				yynn2029 = 0
			}
			if yyr2029 || yy2arr2029 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2029[0] {
					yym2031 := z.EncBinary()
					_ = yym2031
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2029[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2032 := z.EncBinary()
					_ = yym2032
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2029 || yy2arr2029 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2029[1] {
					yym2034 := z.EncBinary()
					_ = yym2034
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2029[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2035 := z.EncBinary()
					_ = yym2035
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2029 || yy2arr2029 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2029[2] {
					yym2037 := z.EncBinary()
					_ = yym2037
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2029[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2038 := z.EncBinary()
					_ = yym2038
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2029 || yy2arr2029 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2029[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2029[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2029 || yy2arr2029 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2029[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2041 := *x.RunAsUser
						yym2042 := z.EncBinary()
						_ = yym2042
						if false {
						} else {
							r.EncodeInt(int64(yy2041))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2029[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2043 := *x.RunAsUser
						yym2044 := z.EncBinary()
						_ = yym2044
						if false {
						} else {
							r.EncodeInt(int64(yy2043))
						}
					}
				}
			}
			if yyr2029 || yy2arr2029 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2029[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2046 := *x.RunAsNonRoot
						yym2047 := z.EncBinary()
						_ = yym2047
						if false {
						} else {
							r.EncodeBool(bool(yy2046))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2029[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2048 := *x.RunAsNonRoot
						yym2049 := z.EncBinary()
						_ = yym2049
						if false {
						} else {
							r.EncodeBool(bool(yy2048))
						}
					}
				}
			}
			if yyr2029 || yy2arr2029 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2029[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2051 := z.EncBinary()
						_ = yym2051
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2029[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2052 := z.EncBinary()
						_ = yym2052
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2029 || yy2arr2029 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2029[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2054 := *x.FSGroup
						yym2055 := z.EncBinary()
						_ = yym2055
						if false {
						} else {
							r.EncodeInt(int64(yy2054))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2029[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2056 := *x.FSGroup
						yym2057 := z.EncBinary()
						_ = yym2057
						if false {
						} else {
							r.EncodeInt(int64(yy2056))
						}
					}
				}
			}
			if yyr2029 || yy2arr2029 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2058 := z.DecBinary()
	_ = yym2058
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2059 := r.ContainerType()
		if yyct2059 == codecSelferValueTypeMap1234 {
			yyl2059 := r.ReadMapStart()
			if yyl2059 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2059, d)
			}
		} else if yyct2059 == codecSelferValueTypeArray1234 {
			yyl2059 := r.ReadArrayStart()
			if yyl2059 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2059, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2060Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2060Slc
	var yyhl2060 bool = l >= 0
	for yyj2060 := 0; ; yyj2060++ {
		if yyhl2060 {
			if yyj2060 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2060Slc = r.DecodeBytes(yys2060Slc, true, true)
		yys2060 := string(yys2060Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2060 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2066 := z.DecBinary()
				_ = yym2066
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2068 := z.DecBinary()
				_ = yym2068
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2069 := &x.SupplementalGroups
				yym2070 := z.DecBinary()
				_ = yym2070
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2069, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2072 := z.DecBinary()
				_ = yym2072
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2060)
		} // end switch yys2060
	} // end for yyj2060
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2073 int
	var yyb2073 bool
	var yyhl2073 bool = l >= 0
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2079 := z.DecBinary()
		_ = yym2079
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2081 := z.DecBinary()
		_ = yym2081
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2082 := &x.SupplementalGroups
		yym2083 := z.DecBinary()
		_ = yym2083
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2082, false, d)
		}
	}
	yyj2073++
	if yyhl2073 {
		yyb2073 = yyj2073 > l
	} else {
		yyb2073 = r.CheckBreak()
	}
	if yyb2073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2085 := z.DecBinary()
		_ = yym2085
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2073++
		if yyhl2073 {
			yyb2073 = yyj2073 > l
		} else {
			yyb2073 = r.CheckBreak()
		}
		if yyb2073 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2073-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2086 := z.EncBinary()
		_ = yym2086
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2087 := !z.EncBinary()
			yy2arr2087 := z.EncBasicHandle().StructToArray
			var yyq2087 [8]bool
			_, _, _ = yysep2087, yyq2087, yy2arr2087
			const yyr2087 bool = false
			yyq2087[0] = x.Phase != ""
			yyq2087[1] = len(x.Conditions) != 0
			yyq2087[2] = x.Message != ""
			yyq2087[3] = x.Reason != ""
			yyq2087[4] = x.HostIP != ""
			yyq2087[5] = x.PodIP != ""
			yyq2087[6] = x.StartTime != nil
			yyq2087[7] = len(x.ContainerStatuses) != 0
			var yynn2087 int
			if yyr2087 || yy2arr2087 {
				r.EncodeArrayStart(8)
			} else {
				yynn2087 = 0
				for _, b := range yyq2087 {
					if b {
						yynn2087++
					}
				}
				r.EncodeMapStart(yynn2087)
				yynn2087 = 0
			}
			if yyr2087 || yy2arr2087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2087[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2087[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2087 || yy2arr2087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2087[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2090 := z.EncBinary()
						_ = yym2090
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2087[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2091 := z.EncBinary()
						_ = yym2091
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2087 || yy2arr2087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2087[2] {
					yym2093 := z.EncBinary()
					_ = yym2093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2087[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2094 := z.EncBinary()
					_ = yym2094
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2087 || yy2arr2087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2087[3] {
					yym2096 := z.EncBinary()
					_ = yym2096
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2087[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2097 := z.EncBinary()
					_ = yym2097
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2087 || yy2arr2087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2087[4] {
					yym2099 := z.EncBinary()
					_ = yym2099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2087[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2100 := z.EncBinary()
					_ = yym2100
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2087 || yy2arr2087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2087[5] {
					yym2102 := z.EncBinary()
					_ = yym2102
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2087[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2103 := z.EncBinary()
					_ = yym2103
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2087 || yy2arr2087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2087[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2105 := z.EncBinary()
						_ = yym2105
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2105 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2105 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2087[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2106 := z.EncBinary()
						_ = yym2106
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2106 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2106 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2087 || yy2arr2087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2087[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2108 := z.EncBinary()
						_ = yym2108
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2087[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2109 := z.EncBinary()
						_ = yym2109
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2087 || yy2arr2087 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2110 := z.DecBinary()
	_ = yym2110
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2111 := r.ContainerType()
		if yyct2111 == codecSelferValueTypeMap1234 {
			yyl2111 := r.ReadMapStart()
			if yyl2111 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2111, d)
			}
		} else if yyct2111 == codecSelferValueTypeArray1234 {
			yyl2111 := r.ReadArrayStart()
			if yyl2111 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2111, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2112Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2112Slc
	var yyhl2112 bool = l >= 0
	for yyj2112 := 0; ; yyj2112++ {
		if yyhl2112 {
			if yyj2112 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2112Slc = r.DecodeBytes(yys2112Slc, true, true)
		yys2112 := string(yys2112Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2112 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2114 := &x.Conditions
				yym2115 := z.DecBinary()
				_ = yym2115
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2114), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2121 := z.DecBinary()
				_ = yym2121
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2121 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2121 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2122 := &x.ContainerStatuses
				yym2123 := z.DecBinary()
				_ = yym2123
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2122), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2112)
		} // end switch yys2112
	} // end for yyj2112
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2124 int
	var yyb2124 bool
	var yyhl2124 bool = l >= 0
	yyj2124++
	if yyhl2124 {
		yyb2124 = yyj2124 > l
	} else {
		yyb2124 = r.CheckBreak()
	}
	if yyb2124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2124++
	if yyhl2124 {
		yyb2124 = yyj2124 > l
	} else {
		yyb2124 = r.CheckBreak()
	}
	if yyb2124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2126 := &x.Conditions
		yym2127 := z.DecBinary()
		_ = yym2127
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2126), d)
		}
	}
	yyj2124++
	if yyhl2124 {
		yyb2124 = yyj2124 > l
	} else {
		yyb2124 = r.CheckBreak()
	}
	if yyb2124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2124++
	if yyhl2124 {
		yyb2124 = yyj2124 > l
	} else {
		yyb2124 = r.CheckBreak()
	}
	if yyb2124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2124++
	if yyhl2124 {
		yyb2124 = yyj2124 > l
	} else {
		yyb2124 = r.CheckBreak()
	}
	if yyb2124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2124++
	if yyhl2124 {
		yyb2124 = yyj2124 > l
	} else {
		yyb2124 = r.CheckBreak()
	}
	if yyb2124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2124++
	if yyhl2124 {
		yyb2124 = yyj2124 > l
	} else {
		yyb2124 = r.CheckBreak()
	}
	if yyb2124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2133 := z.DecBinary()
		_ = yym2133
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2133 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2133 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2124++
	if yyhl2124 {
		yyb2124 = yyj2124 > l
	} else {
		yyb2124 = r.CheckBreak()
	}
	if yyb2124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2134 := &x.ContainerStatuses
		yym2135 := z.DecBinary()
		_ = yym2135
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2134), d)
		}
	}
	for {
		yyj2124++
		if yyhl2124 {
			yyb2124 = yyj2124 > l
		} else {
			yyb2124 = r.CheckBreak()
		}
		if yyb2124 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2124-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2136 := z.EncBinary()
		_ = yym2136
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2137 := !z.EncBinary()
			yy2arr2137 := z.EncBasicHandle().StructToArray
			var yyq2137 [4]bool
			_, _, _ = yysep2137, yyq2137, yy2arr2137
			const yyr2137 bool = false
			yyq2137[0] = x.Kind != ""
			yyq2137[1] = x.APIVersion != ""
			yyq2137[2] = true
			yyq2137[3] = true
			var yynn2137 int
			if yyr2137 || yy2arr2137 {
				r.EncodeArrayStart(4)
			} else {
				yynn2137 = 0
				for _, b := range yyq2137 {
					if b {
						yynn2137++
					}
				}
				r.EncodeMapStart(yynn2137)
				yynn2137 = 0
			}
			if yyr2137 || yy2arr2137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2137[0] {
					yym2139 := z.EncBinary()
					_ = yym2139
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2137[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2140 := z.EncBinary()
					_ = yym2140
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2137 || yy2arr2137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2137[1] {
					yym2142 := z.EncBinary()
					_ = yym2142
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2137[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2143 := z.EncBinary()
					_ = yym2143
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2137 || yy2arr2137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2137[2] {
					yy2145 := &x.ObjectMeta
					yy2145.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2137[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2146 := &x.ObjectMeta
					yy2146.CodecEncodeSelf(e)
				}
			}
			if yyr2137 || yy2arr2137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2137[3] {
					yy2148 := &x.Status
					yy2148.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2137[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2149 := &x.Status
					yy2149.CodecEncodeSelf(e)
				}
			}
			if yyr2137 || yy2arr2137 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2150 := z.DecBinary()
	_ = yym2150
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2151 := r.ContainerType()
		if yyct2151 == codecSelferValueTypeMap1234 {
			yyl2151 := r.ReadMapStart()
			if yyl2151 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2151, d)
			}
		} else if yyct2151 == codecSelferValueTypeArray1234 {
			yyl2151 := r.ReadArrayStart()
			if yyl2151 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2151, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2152Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2152Slc
	var yyhl2152 bool = l >= 0
	for yyj2152 := 0; ; yyj2152++ {
		if yyhl2152 {
			if yyj2152 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2152Slc = r.DecodeBytes(yys2152Slc, true, true)
		yys2152 := string(yys2152Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2152 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2155 := &x.ObjectMeta
				yyv2155.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2156 := &x.Status
				yyv2156.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2152)
		} // end switch yys2152
	} // end for yyj2152
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2157 int
	var yyb2157 bool
	var yyhl2157 bool = l >= 0
	yyj2157++
	if yyhl2157 {
		yyb2157 = yyj2157 > l
	} else {
		yyb2157 = r.CheckBreak()
	}
	if yyb2157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2157++
	if yyhl2157 {
		yyb2157 = yyj2157 > l
	} else {
		yyb2157 = r.CheckBreak()
	}
	if yyb2157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2157++
	if yyhl2157 {
		yyb2157 = yyj2157 > l
	} else {
		yyb2157 = r.CheckBreak()
	}
	if yyb2157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2160 := &x.ObjectMeta
		yyv2160.CodecDecodeSelf(d)
	}
	yyj2157++
	if yyhl2157 {
		yyb2157 = yyj2157 > l
	} else {
		yyb2157 = r.CheckBreak()
	}
	if yyb2157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2161 := &x.Status
		yyv2161.CodecDecodeSelf(d)
	}
	for {
		yyj2157++
		if yyhl2157 {
			yyb2157 = yyj2157 > l
		} else {
			yyb2157 = r.CheckBreak()
		}
		if yyb2157 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2157-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2162 := z.EncBinary()
		_ = yym2162
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2163 := !z.EncBinary()
			yy2arr2163 := z.EncBasicHandle().StructToArray
			var yyq2163 [5]bool
			_, _, _ = yysep2163, yyq2163, yy2arr2163
			const yyr2163 bool = false
			yyq2163[0] = x.Kind != ""
			yyq2163[1] = x.APIVersion != ""
			yyq2163[2] = true
			yyq2163[3] = true
			yyq2163[4] = true
			var yynn2163 int
			if yyr2163 || yy2arr2163 {
				r.EncodeArrayStart(5)
			} else {
				yynn2163 = 0
				for _, b := range yyq2163 {
					if b {
						yynn2163++
					}
				}
				r.EncodeMapStart(yynn2163)
				yynn2163 = 0
			}
			if yyr2163 || yy2arr2163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2163[0] {
					yym2165 := z.EncBinary()
					_ = yym2165
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2163[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2166 := z.EncBinary()
					_ = yym2166
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2163 || yy2arr2163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2163[1] {
					yym2168 := z.EncBinary()
					_ = yym2168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2163[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2169 := z.EncBinary()
					_ = yym2169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2163 || yy2arr2163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2163[2] {
					yy2171 := &x.ObjectMeta
					yy2171.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2163[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2172 := &x.ObjectMeta
					yy2172.CodecEncodeSelf(e)
				}
			}
			if yyr2163 || yy2arr2163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2163[3] {
					yy2174 := &x.Spec
					yy2174.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2163[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2175 := &x.Spec
					yy2175.CodecEncodeSelf(e)
				}
			}
			if yyr2163 || yy2arr2163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2163[4] {
					yy2177 := &x.Status
					yy2177.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2163[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2178 := &x.Status
					yy2178.CodecEncodeSelf(e)
				}
			}
			if yyr2163 || yy2arr2163 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2179 := z.DecBinary()
	_ = yym2179
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2180 := r.ContainerType()
		if yyct2180 == codecSelferValueTypeMap1234 {
			yyl2180 := r.ReadMapStart()
			if yyl2180 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2180, d)
			}
		} else if yyct2180 == codecSelferValueTypeArray1234 {
			yyl2180 := r.ReadArrayStart()
			if yyl2180 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2180, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2181Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2181Slc
	var yyhl2181 bool = l >= 0
	for yyj2181 := 0; ; yyj2181++ {
		if yyhl2181 {
			if yyj2181 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2181Slc = r.DecodeBytes(yys2181Slc, true, true)
		yys2181 := string(yys2181Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2181 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2184 := &x.ObjectMeta
				yyv2184.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2185 := &x.Spec
				yyv2185.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2186 := &x.Status
				yyv2186.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2181)
		} // end switch yys2181
	} // end for yyj2181
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2187 int
	var yyb2187 bool
	var yyhl2187 bool = l >= 0
	yyj2187++
	if yyhl2187 {
		yyb2187 = yyj2187 > l
	} else {
		yyb2187 = r.CheckBreak()
	}
	if yyb2187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2187++
	if yyhl2187 {
		yyb2187 = yyj2187 > l
	} else {
		yyb2187 = r.CheckBreak()
	}
	if yyb2187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2187++
	if yyhl2187 {
		yyb2187 = yyj2187 > l
	} else {
		yyb2187 = r.CheckBreak()
	}
	if yyb2187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2190 := &x.ObjectMeta
		yyv2190.CodecDecodeSelf(d)
	}
	yyj2187++
	if yyhl2187 {
		yyb2187 = yyj2187 > l
	} else {
		yyb2187 = r.CheckBreak()
	}
	if yyb2187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2191 := &x.Spec
		yyv2191.CodecDecodeSelf(d)
	}
	yyj2187++
	if yyhl2187 {
		yyb2187 = yyj2187 > l
	} else {
		yyb2187 = r.CheckBreak()
	}
	if yyb2187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2192 := &x.Status
		yyv2192.CodecDecodeSelf(d)
	}
	for {
		yyj2187++
		if yyhl2187 {
			yyb2187 = yyj2187 > l
		} else {
			yyb2187 = r.CheckBreak()
		}
		if yyb2187 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2187-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2193 := z.EncBinary()
		_ = yym2193
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2194 := !z.EncBinary()
			yy2arr2194 := z.EncBasicHandle().StructToArray
			var yyq2194 [2]bool
			_, _, _ = yysep2194, yyq2194, yy2arr2194
			const yyr2194 bool = false
			yyq2194[0] = true
			yyq2194[1] = true
			var yynn2194 int
			if yyr2194 || yy2arr2194 {
				r.EncodeArrayStart(2)
			} else {
				yynn2194 = 0
				for _, b := range yyq2194 {
					if b {
						yynn2194++
					}
				}
				r.EncodeMapStart(yynn2194)
				yynn2194 = 0
			}
			if yyr2194 || yy2arr2194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2194[0] {
					yy2196 := &x.ObjectMeta
					yy2196.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2194[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2197 := &x.ObjectMeta
					yy2197.CodecEncodeSelf(e)
				}
			}
			if yyr2194 || yy2arr2194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2194[1] {
					yy2199 := &x.Spec
					yy2199.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2194[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2200 := &x.Spec
					yy2200.CodecEncodeSelf(e)
				}
			}
			if yyr2194 || yy2arr2194 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2201 := z.DecBinary()
	_ = yym2201
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2202 := r.ContainerType()
		if yyct2202 == codecSelferValueTypeMap1234 {
			yyl2202 := r.ReadMapStart()
			if yyl2202 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2202, d)
			}
		} else if yyct2202 == codecSelferValueTypeArray1234 {
			yyl2202 := r.ReadArrayStart()
			if yyl2202 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2202, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2203Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2203Slc
	var yyhl2203 bool = l >= 0
	for yyj2203 := 0; ; yyj2203++ {
		if yyhl2203 {
			if yyj2203 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2203Slc = r.DecodeBytes(yys2203Slc, true, true)
		yys2203 := string(yys2203Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2203 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2204 := &x.ObjectMeta
				yyv2204.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2205 := &x.Spec
				yyv2205.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2203)
		} // end switch yys2203
	} // end for yyj2203
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2206 int
	var yyb2206 bool
	var yyhl2206 bool = l >= 0
	yyj2206++
	if yyhl2206 {
		yyb2206 = yyj2206 > l
	} else {
		yyb2206 = r.CheckBreak()
	}
	if yyb2206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2207 := &x.ObjectMeta
		yyv2207.CodecDecodeSelf(d)
	}
	yyj2206++
	if yyhl2206 {
		yyb2206 = yyj2206 > l
	} else {
		yyb2206 = r.CheckBreak()
	}
	if yyb2206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2208 := &x.Spec
		yyv2208.CodecDecodeSelf(d)
	}
	for {
		yyj2206++
		if yyhl2206 {
			yyb2206 = yyj2206 > l
		} else {
			yyb2206 = r.CheckBreak()
		}
		if yyb2206 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2206-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2209 := z.EncBinary()
		_ = yym2209
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2210 := !z.EncBinary()
			yy2arr2210 := z.EncBasicHandle().StructToArray
			var yyq2210 [4]bool
			_, _, _ = yysep2210, yyq2210, yy2arr2210
			const yyr2210 bool = false
			yyq2210[0] = x.Kind != ""
			yyq2210[1] = x.APIVersion != ""
			yyq2210[2] = true
			yyq2210[3] = true
			var yynn2210 int
			if yyr2210 || yy2arr2210 {
				r.EncodeArrayStart(4)
			} else {
				yynn2210 = 0
				for _, b := range yyq2210 {
					if b {
						yynn2210++
					}
				}
				r.EncodeMapStart(yynn2210)
				yynn2210 = 0
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2210[0] {
					yym2212 := z.EncBinary()
					_ = yym2212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2210[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2213 := z.EncBinary()
					_ = yym2213
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2210[1] {
					yym2215 := z.EncBinary()
					_ = yym2215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2210[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2216 := z.EncBinary()
					_ = yym2216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2210[2] {
					yy2218 := &x.ObjectMeta
					yy2218.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2210[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2219 := &x.ObjectMeta
					yy2219.CodecEncodeSelf(e)
				}
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2210[3] {
					yy2221 := &x.Template
					yy2221.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2210[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2222 := &x.Template
					yy2222.CodecEncodeSelf(e)
				}
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2223 := z.DecBinary()
	_ = yym2223
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2224 := r.ContainerType()
		if yyct2224 == codecSelferValueTypeMap1234 {
			yyl2224 := r.ReadMapStart()
			if yyl2224 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2224, d)
			}
		} else if yyct2224 == codecSelferValueTypeArray1234 {
			yyl2224 := r.ReadArrayStart()
			if yyl2224 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2224, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2225Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2225Slc
	var yyhl2225 bool = l >= 0
	for yyj2225 := 0; ; yyj2225++ {
		if yyhl2225 {
			if yyj2225 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2225Slc = r.DecodeBytes(yys2225Slc, true, true)
		yys2225 := string(yys2225Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2225 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2228 := &x.ObjectMeta
				yyv2228.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2229 := &x.Template
				yyv2229.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2225)
		} // end switch yys2225
	} // end for yyj2225
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2230 int
	var yyb2230 bool
	var yyhl2230 bool = l >= 0
	yyj2230++
	if yyhl2230 {
		yyb2230 = yyj2230 > l
	} else {
		yyb2230 = r.CheckBreak()
	}
	if yyb2230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2230++
	if yyhl2230 {
		yyb2230 = yyj2230 > l
	} else {
		yyb2230 = r.CheckBreak()
	}
	if yyb2230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2230++
	if yyhl2230 {
		yyb2230 = yyj2230 > l
	} else {
		yyb2230 = r.CheckBreak()
	}
	if yyb2230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2233 := &x.ObjectMeta
		yyv2233.CodecDecodeSelf(d)
	}
	yyj2230++
	if yyhl2230 {
		yyb2230 = yyj2230 > l
	} else {
		yyb2230 = r.CheckBreak()
	}
	if yyb2230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2234 := &x.Template
		yyv2234.CodecDecodeSelf(d)
	}
	for {
		yyj2230++
		if yyhl2230 {
			yyb2230 = yyj2230 > l
		} else {
			yyb2230 = r.CheckBreak()
		}
		if yyb2230 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2230-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2235 := z.EncBinary()
		_ = yym2235
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2236 := !z.EncBinary()
			yy2arr2236 := z.EncBasicHandle().StructToArray
			var yyq2236 [4]bool
			_, _, _ = yysep2236, yyq2236, yy2arr2236
			const yyr2236 bool = false
			yyq2236[0] = x.Kind != ""
			yyq2236[1] = x.APIVersion != ""
			yyq2236[2] = true
			var yynn2236 int
			if yyr2236 || yy2arr2236 {
				r.EncodeArrayStart(4)
			} else {
				yynn2236 = 1
				for _, b := range yyq2236 {
					if b {
						yynn2236++
					}
				}
				r.EncodeMapStart(yynn2236)
				yynn2236 = 0
			}
			if yyr2236 || yy2arr2236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2236[0] {
					yym2238 := z.EncBinary()
					_ = yym2238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2236[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2239 := z.EncBinary()
					_ = yym2239
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2236 || yy2arr2236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2236[1] {
					yym2241 := z.EncBinary()
					_ = yym2241
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2236[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2242 := z.EncBinary()
					_ = yym2242
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2236 || yy2arr2236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2236[2] {
					yy2244 := &x.ListMeta
					yym2245 := z.EncBinary()
					_ = yym2245
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2244) {
					} else {
						z.EncFallback(yy2244)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2236[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2246 := &x.ListMeta
					yym2247 := z.EncBinary()
					_ = yym2247
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2246) {
					} else {
						z.EncFallback(yy2246)
					}
				}
			}
			if yyr2236 || yy2arr2236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2249 := z.EncBinary()
					_ = yym2249
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2250 := z.EncBinary()
					_ = yym2250
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2236 || yy2arr2236 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2251 := z.DecBinary()
	_ = yym2251
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2252 := r.ContainerType()
		if yyct2252 == codecSelferValueTypeMap1234 {
			yyl2252 := r.ReadMapStart()
			if yyl2252 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2252, d)
			}
		} else if yyct2252 == codecSelferValueTypeArray1234 {
			yyl2252 := r.ReadArrayStart()
			if yyl2252 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2252, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2253Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2253Slc
	var yyhl2253 bool = l >= 0
	for yyj2253 := 0; ; yyj2253++ {
		if yyhl2253 {
			if yyj2253 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2253Slc = r.DecodeBytes(yys2253Slc, true, true)
		yys2253 := string(yys2253Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2253 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2256 := &x.ListMeta
				yym2257 := z.DecBinary()
				_ = yym2257
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2256) {
				} else {
					z.DecFallback(yyv2256, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2258 := &x.Items
				yym2259 := z.DecBinary()
				_ = yym2259
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2258), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2253)
		} // end switch yys2253
	} // end for yyj2253
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2260 int
	var yyb2260 bool
	var yyhl2260 bool = l >= 0
	yyj2260++
	if yyhl2260 {
		yyb2260 = yyj2260 > l
	} else {
		yyb2260 = r.CheckBreak()
	}
	if yyb2260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2260++
	if yyhl2260 {
		yyb2260 = yyj2260 > l
	} else {
		yyb2260 = r.CheckBreak()
	}
	if yyb2260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2260++
	if yyhl2260 {
		yyb2260 = yyj2260 > l
	} else {
		yyb2260 = r.CheckBreak()
	}
	if yyb2260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2263 := &x.ListMeta
		yym2264 := z.DecBinary()
		_ = yym2264
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2263) {
		} else {
			z.DecFallback(yyv2263, false)
		}
	}
	yyj2260++
	if yyhl2260 {
		yyb2260 = yyj2260 > l
	} else {
		yyb2260 = r.CheckBreak()
	}
	if yyb2260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2265 := &x.Items
		yym2266 := z.DecBinary()
		_ = yym2266
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2265), d)
		}
	}
	for {
		yyj2260++
		if yyhl2260 {
			yyb2260 = yyj2260 > l
		} else {
			yyb2260 = r.CheckBreak()
		}
		if yyb2260 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2260-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2267 := z.EncBinary()
		_ = yym2267
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2268 := !z.EncBinary()
			yy2arr2268 := z.EncBasicHandle().StructToArray
			var yyq2268 [3]bool
			_, _, _ = yysep2268, yyq2268, yy2arr2268
			const yyr2268 bool = false
			yyq2268[2] = x.Template != nil
			var yynn2268 int
			if yyr2268 || yy2arr2268 {
				r.EncodeArrayStart(3)
			} else {
				yynn2268 = 2
				for _, b := range yyq2268 {
					if b {
						yynn2268++
					}
				}
				r.EncodeMapStart(yynn2268)
				yynn2268 = 0
			}
			if yyr2268 || yy2arr2268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2270 := z.EncBinary()
				_ = yym2270
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2271 := z.EncBinary()
				_ = yym2271
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2268 || yy2arr2268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2273 := z.EncBinary()
					_ = yym2273
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2274 := z.EncBinary()
					_ = yym2274
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2268 || yy2arr2268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2268[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2268[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2268 || yy2arr2268 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2276 := z.DecBinary()
	_ = yym2276
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2277 := r.ContainerType()
		if yyct2277 == codecSelferValueTypeMap1234 {
			yyl2277 := r.ReadMapStart()
			if yyl2277 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2277, d)
			}
		} else if yyct2277 == codecSelferValueTypeArray1234 {
			yyl2277 := r.ReadArrayStart()
			if yyl2277 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2277, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2278Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2278Slc
	var yyhl2278 bool = l >= 0
	for yyj2278 := 0; ; yyj2278++ {
		if yyhl2278 {
			if yyj2278 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2278Slc = r.DecodeBytes(yys2278Slc, true, true)
		yys2278 := string(yys2278Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2278 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2280 := &x.Selector
				yym2281 := z.DecBinary()
				_ = yym2281
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2280, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2278)
		} // end switch yys2278
	} // end for yyj2278
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2283 int
	var yyb2283 bool
	var yyhl2283 bool = l >= 0
	yyj2283++
	if yyhl2283 {
		yyb2283 = yyj2283 > l
	} else {
		yyb2283 = r.CheckBreak()
	}
	if yyb2283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2283++
	if yyhl2283 {
		yyb2283 = yyj2283 > l
	} else {
		yyb2283 = r.CheckBreak()
	}
	if yyb2283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2285 := &x.Selector
		yym2286 := z.DecBinary()
		_ = yym2286
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2285, false, d)
		}
	}
	yyj2283++
	if yyhl2283 {
		yyb2283 = yyj2283 > l
	} else {
		yyb2283 = r.CheckBreak()
	}
	if yyb2283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2283++
		if yyhl2283 {
			yyb2283 = yyj2283 > l
		} else {
			yyb2283 = r.CheckBreak()
		}
		if yyb2283 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2283-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2288 := z.EncBinary()
		_ = yym2288
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2289 := !z.EncBinary()
			yy2arr2289 := z.EncBasicHandle().StructToArray
			var yyq2289 [3]bool
			_, _, _ = yysep2289, yyq2289, yy2arr2289
			const yyr2289 bool = false
			yyq2289[1] = x.FullyLabeledReplicas != 0
			yyq2289[2] = x.ObservedGeneration != 0
			var yynn2289 int
			if yyr2289 || yy2arr2289 {
				r.EncodeArrayStart(3)
			} else {
				yynn2289 = 1
				for _, b := range yyq2289 {
					if b {
						yynn2289++
					}
				}
				r.EncodeMapStart(yynn2289)
				yynn2289 = 0
			}
			if yyr2289 || yy2arr2289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2291 := z.EncBinary()
				_ = yym2291
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2292 := z.EncBinary()
				_ = yym2292
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2289 || yy2arr2289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2289[1] {
					yym2294 := z.EncBinary()
					_ = yym2294
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2289[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2295 := z.EncBinary()
					_ = yym2295
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2289 || yy2arr2289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2289[2] {
					yym2297 := z.EncBinary()
					_ = yym2297
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2289[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2298 := z.EncBinary()
					_ = yym2298
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2289 || yy2arr2289 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2299 := z.DecBinary()
	_ = yym2299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2300 := r.ContainerType()
		if yyct2300 == codecSelferValueTypeMap1234 {
			yyl2300 := r.ReadMapStart()
			if yyl2300 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2300, d)
			}
		} else if yyct2300 == codecSelferValueTypeArray1234 {
			yyl2300 := r.ReadArrayStart()
			if yyl2300 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2301Slc
	var yyhl2301 bool = l >= 0
	for yyj2301 := 0; ; yyj2301++ {
		if yyhl2301 {
			if yyj2301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2301Slc = r.DecodeBytes(yys2301Slc, true, true)
		yys2301 := string(yys2301Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2301 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2301)
		} // end switch yys2301
	} // end for yyj2301
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2305 int
	var yyb2305 bool
	var yyhl2305 bool = l >= 0
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2305++
		if yyhl2305 {
			yyb2305 = yyj2305 > l
		} else {
			yyb2305 = r.CheckBreak()
		}
		if yyb2305 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2305-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2309 := z.EncBinary()
		_ = yym2309
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2310 := !z.EncBinary()
			yy2arr2310 := z.EncBasicHandle().StructToArray
			var yyq2310 [5]bool
			_, _, _ = yysep2310, yyq2310, yy2arr2310
			const yyr2310 bool = false
			yyq2310[0] = x.Kind != ""
			yyq2310[1] = x.APIVersion != ""
			yyq2310[2] = true
			yyq2310[3] = true
			yyq2310[4] = true
			var yynn2310 int
			if yyr2310 || yy2arr2310 {
				r.EncodeArrayStart(5)
			} else {
				yynn2310 = 0
				for _, b := range yyq2310 {
					if b {
						yynn2310++
					}
				}
				r.EncodeMapStart(yynn2310)
				yynn2310 = 0
			}
			if yyr2310 || yy2arr2310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2310[0] {
					yym2312 := z.EncBinary()
					_ = yym2312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2310[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2313 := z.EncBinary()
					_ = yym2313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2310 || yy2arr2310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2310[1] {
					yym2315 := z.EncBinary()
					_ = yym2315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2310[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2316 := z.EncBinary()
					_ = yym2316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2310 || yy2arr2310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2310[2] {
					yy2318 := &x.ObjectMeta
					yy2318.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2310[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2319 := &x.ObjectMeta
					yy2319.CodecEncodeSelf(e)
				}
			}
			if yyr2310 || yy2arr2310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2310[3] {
					yy2321 := &x.Spec
					yy2321.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2310[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2322 := &x.Spec
					yy2322.CodecEncodeSelf(e)
				}
			}
			if yyr2310 || yy2arr2310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2310[4] {
					yy2324 := &x.Status
					yy2324.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2310[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2325 := &x.Status
					yy2325.CodecEncodeSelf(e)
				}
			}
			if yyr2310 || yy2arr2310 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2326 := z.DecBinary()
	_ = yym2326
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2327 := r.ContainerType()
		if yyct2327 == codecSelferValueTypeMap1234 {
			yyl2327 := r.ReadMapStart()
			if yyl2327 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2327, d)
			}
		} else if yyct2327 == codecSelferValueTypeArray1234 {
			yyl2327 := r.ReadArrayStart()
			if yyl2327 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2327, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2328Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2328Slc
	var yyhl2328 bool = l >= 0
	for yyj2328 := 0; ; yyj2328++ {
		if yyhl2328 {
			if yyj2328 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2328Slc = r.DecodeBytes(yys2328Slc, true, true)
		yys2328 := string(yys2328Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2328 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2331 := &x.ObjectMeta
				yyv2331.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2332 := &x.Spec
				yyv2332.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2333 := &x.Status
				yyv2333.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2328)
		} // end switch yys2328
	} // end for yyj2328
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2334 int
	var yyb2334 bool
	var yyhl2334 bool = l >= 0
	yyj2334++
	if yyhl2334 {
		yyb2334 = yyj2334 > l
	} else {
		yyb2334 = r.CheckBreak()
	}
	if yyb2334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2334++
	if yyhl2334 {
		yyb2334 = yyj2334 > l
	} else {
		yyb2334 = r.CheckBreak()
	}
	if yyb2334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2334++
	if yyhl2334 {
		yyb2334 = yyj2334 > l
	} else {
		yyb2334 = r.CheckBreak()
	}
	if yyb2334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2337 := &x.ObjectMeta
		yyv2337.CodecDecodeSelf(d)
	}
	yyj2334++
	if yyhl2334 {
		yyb2334 = yyj2334 > l
	} else {
		yyb2334 = r.CheckBreak()
	}
	if yyb2334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2338 := &x.Spec
		yyv2338.CodecDecodeSelf(d)
	}
	yyj2334++
	if yyhl2334 {
		yyb2334 = yyj2334 > l
	} else {
		yyb2334 = r.CheckBreak()
	}
	if yyb2334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2339 := &x.Status
		yyv2339.CodecDecodeSelf(d)
	}
	for {
		yyj2334++
		if yyhl2334 {
			yyb2334 = yyj2334 > l
		} else {
			yyb2334 = r.CheckBreak()
		}
		if yyb2334 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2334-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2340 := z.EncBinary()
		_ = yym2340
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2341 := !z.EncBinary()
			yy2arr2341 := z.EncBasicHandle().StructToArray
			var yyq2341 [4]bool
			_, _, _ = yysep2341, yyq2341, yy2arr2341
			const yyr2341 bool = false
			yyq2341[0] = x.Kind != ""
			yyq2341[1] = x.APIVersion != ""
			yyq2341[2] = true
			var yynn2341 int
			if yyr2341 || yy2arr2341 {
				r.EncodeArrayStart(4)
			} else {
				yynn2341 = 1
				for _, b := range yyq2341 {
					if b {
						yynn2341++
					}
				}
				r.EncodeMapStart(yynn2341)
				yynn2341 = 0
			}
			if yyr2341 || yy2arr2341 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2341[0] {
					yym2343 := z.EncBinary()
					_ = yym2343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2341[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2344 := z.EncBinary()
					_ = yym2344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2341 || yy2arr2341 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2341[1] {
					yym2346 := z.EncBinary()
					_ = yym2346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2341[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2347 := z.EncBinary()
					_ = yym2347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2341 || yy2arr2341 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2341[2] {
					yy2349 := &x.ListMeta
					yym2350 := z.EncBinary()
					_ = yym2350
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2349) {
					} else {
						z.EncFallback(yy2349)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2341[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2351 := &x.ListMeta
					yym2352 := z.EncBinary()
					_ = yym2352
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2351) {
					} else {
						z.EncFallback(yy2351)
					}
				}
			}
			if yyr2341 || yy2arr2341 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2354 := z.EncBinary()
					_ = yym2354
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2355 := z.EncBinary()
					_ = yym2355
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2341 || yy2arr2341 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2356 := z.DecBinary()
	_ = yym2356
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2357 := r.ContainerType()
		if yyct2357 == codecSelferValueTypeMap1234 {
			yyl2357 := r.ReadMapStart()
			if yyl2357 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2357, d)
			}
		} else if yyct2357 == codecSelferValueTypeArray1234 {
			yyl2357 := r.ReadArrayStart()
			if yyl2357 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2357, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2358Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2358Slc
	var yyhl2358 bool = l >= 0
	for yyj2358 := 0; ; yyj2358++ {
		if yyhl2358 {
			if yyj2358 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2358Slc = r.DecodeBytes(yys2358Slc, true, true)
		yys2358 := string(yys2358Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2358 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2361 := &x.ListMeta
				yym2362 := z.DecBinary()
				_ = yym2362
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2361) {
				} else {
					z.DecFallback(yyv2361, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2363 := &x.Items
				yym2364 := z.DecBinary()
				_ = yym2364
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2363), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2358)
		} // end switch yys2358
	} // end for yyj2358
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2365 int
	var yyb2365 bool
	var yyhl2365 bool = l >= 0
	yyj2365++
	if yyhl2365 {
		yyb2365 = yyj2365 > l
	} else {
		yyb2365 = r.CheckBreak()
	}
	if yyb2365 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2365++
	if yyhl2365 {
		yyb2365 = yyj2365 > l
	} else {
		yyb2365 = r.CheckBreak()
	}
	if yyb2365 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2365++
	if yyhl2365 {
		yyb2365 = yyj2365 > l
	} else {
		yyb2365 = r.CheckBreak()
	}
	if yyb2365 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2368 := &x.ListMeta
		yym2369 := z.DecBinary()
		_ = yym2369
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2368) {
		} else {
			z.DecFallback(yyv2368, false)
		}
	}
	yyj2365++
	if yyhl2365 {
		yyb2365 = yyj2365 > l
	} else {
		yyb2365 = r.CheckBreak()
	}
	if yyb2365 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2370 := &x.Items
		yym2371 := z.DecBinary()
		_ = yym2371
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2370), d)
		}
	}
	for {
		yyj2365++
		if yyhl2365 {
			yyb2365 = yyj2365 > l
		} else {
			yyb2365 = r.CheckBreak()
		}
		if yyb2365 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2365-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2372 := z.EncBinary()
		_ = yym2372
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2373 := !z.EncBinary()
			yy2arr2373 := z.EncBasicHandle().StructToArray
			var yyq2373 [4]bool
			_, _, _ = yysep2373, yyq2373, yy2arr2373
			const yyr2373 bool = false
			yyq2373[0] = x.Kind != ""
			yyq2373[1] = x.APIVersion != ""
			yyq2373[2] = true
			var yynn2373 int
			if yyr2373 || yy2arr2373 {
				r.EncodeArrayStart(4)
			} else {
				yynn2373 = 1
				for _, b := range yyq2373 {
					if b {
						yynn2373++
					}
				}
				r.EncodeMapStart(yynn2373)
				yynn2373 = 0
			}
			if yyr2373 || yy2arr2373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2373[0] {
					yym2375 := z.EncBinary()
					_ = yym2375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2373[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2376 := z.EncBinary()
					_ = yym2376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2373 || yy2arr2373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2373[1] {
					yym2378 := z.EncBinary()
					_ = yym2378
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2373[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2379 := z.EncBinary()
					_ = yym2379
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2373 || yy2arr2373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2373[2] {
					yy2381 := &x.ListMeta
					yym2382 := z.EncBinary()
					_ = yym2382
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2381) {
					} else {
						z.EncFallback(yy2381)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2373[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2383 := &x.ListMeta
					yym2384 := z.EncBinary()
					_ = yym2384
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2383) {
					} else {
						z.EncFallback(yy2383)
					}
				}
			}
			if yyr2373 || yy2arr2373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2386 := z.EncBinary()
					_ = yym2386
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2387 := z.EncBinary()
					_ = yym2387
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2373 || yy2arr2373 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2388 := z.DecBinary()
	_ = yym2388
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2389 := r.ContainerType()
		if yyct2389 == codecSelferValueTypeMap1234 {
			yyl2389 := r.ReadMapStart()
			if yyl2389 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2389, d)
			}
		} else if yyct2389 == codecSelferValueTypeArray1234 {
			yyl2389 := r.ReadArrayStart()
			if yyl2389 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2389, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2390Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2390Slc
	var yyhl2390 bool = l >= 0
	for yyj2390 := 0; ; yyj2390++ {
		if yyhl2390 {
			if yyj2390 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2390Slc = r.DecodeBytes(yys2390Slc, true, true)
		yys2390 := string(yys2390Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2390 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2393 := &x.ListMeta
				yym2394 := z.DecBinary()
				_ = yym2394
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2393) {
				} else {
					z.DecFallback(yyv2393, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2395 := &x.Items
				yym2396 := z.DecBinary()
				_ = yym2396
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2395), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2390)
		} // end switch yys2390
	} // end for yyj2390
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2397 int
	var yyb2397 bool
	var yyhl2397 bool = l >= 0
	yyj2397++
	if yyhl2397 {
		yyb2397 = yyj2397 > l
	} else {
		yyb2397 = r.CheckBreak()
	}
	if yyb2397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2397++
	if yyhl2397 {
		yyb2397 = yyj2397 > l
	} else {
		yyb2397 = r.CheckBreak()
	}
	if yyb2397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2397++
	if yyhl2397 {
		yyb2397 = yyj2397 > l
	} else {
		yyb2397 = r.CheckBreak()
	}
	if yyb2397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2400 := &x.ListMeta
		yym2401 := z.DecBinary()
		_ = yym2401
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2400) {
		} else {
			z.DecFallback(yyv2400, false)
		}
	}
	yyj2397++
	if yyhl2397 {
		yyb2397 = yyj2397 > l
	} else {
		yyb2397 = r.CheckBreak()
	}
	if yyb2397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2402 := &x.Items
		yym2403 := z.DecBinary()
		_ = yym2403
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2402), d)
		}
	}
	for {
		yyj2397++
		if yyhl2397 {
			yyb2397 = yyj2397 > l
		} else {
			yyb2397 = r.CheckBreak()
		}
		if yyb2397 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2397-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2404 := z.EncBinary()
	_ = yym2404
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2405 := z.DecBinary()
	_ = yym2405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2406 := z.EncBinary()
	_ = yym2406
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2407 := z.DecBinary()
	_ = yym2407
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2408 := z.EncBinary()
		_ = yym2408
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2409 := !z.EncBinary()
			yy2arr2409 := z.EncBasicHandle().StructToArray
			var yyq2409 [1]bool
			_, _, _ = yysep2409, yyq2409, yy2arr2409
			const yyr2409 bool = false
			yyq2409[0] = true
			var yynn2409 int
			if yyr2409 || yy2arr2409 {
				r.EncodeArrayStart(1)
			} else {
				yynn2409 = 0
				for _, b := range yyq2409 {
					if b {
						yynn2409++
					}
				}
				r.EncodeMapStart(yynn2409)
				yynn2409 = 0
			}
			if yyr2409 || yy2arr2409 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2409[0] {
					yy2411 := &x.LoadBalancer
					yy2411.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2409[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2412 := &x.LoadBalancer
					yy2412.CodecEncodeSelf(e)
				}
			}
			if yyr2409 || yy2arr2409 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2413 := z.DecBinary()
	_ = yym2413
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2414 := r.ContainerType()
		if yyct2414 == codecSelferValueTypeMap1234 {
			yyl2414 := r.ReadMapStart()
			if yyl2414 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2414, d)
			}
		} else if yyct2414 == codecSelferValueTypeArray1234 {
			yyl2414 := r.ReadArrayStart()
			if yyl2414 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2414, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2415Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2415Slc
	var yyhl2415 bool = l >= 0
	for yyj2415 := 0; ; yyj2415++ {
		if yyhl2415 {
			if yyj2415 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2415Slc = r.DecodeBytes(yys2415Slc, true, true)
		yys2415 := string(yys2415Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2415 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2416 := &x.LoadBalancer
				yyv2416.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2415)
		} // end switch yys2415
	} // end for yyj2415
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2417 int
	var yyb2417 bool
	var yyhl2417 bool = l >= 0
	yyj2417++
	if yyhl2417 {
		yyb2417 = yyj2417 > l
	} else {
		yyb2417 = r.CheckBreak()
	}
	if yyb2417 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2418 := &x.LoadBalancer
		yyv2418.CodecDecodeSelf(d)
	}
	for {
		yyj2417++
		if yyhl2417 {
			yyb2417 = yyj2417 > l
		} else {
			yyb2417 = r.CheckBreak()
		}
		if yyb2417 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2417-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2419 := z.EncBinary()
		_ = yym2419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2420 := !z.EncBinary()
			yy2arr2420 := z.EncBasicHandle().StructToArray
			var yyq2420 [1]bool
			_, _, _ = yysep2420, yyq2420, yy2arr2420
			const yyr2420 bool = false
			yyq2420[0] = len(x.Ingress) != 0
			var yynn2420 int
			if yyr2420 || yy2arr2420 {
				r.EncodeArrayStart(1)
			} else {
				yynn2420 = 0
				for _, b := range yyq2420 {
					if b {
						yynn2420++
					}
				}
				r.EncodeMapStart(yynn2420)
				yynn2420 = 0
			}
			if yyr2420 || yy2arr2420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2420[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2422 := z.EncBinary()
						_ = yym2422
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2420[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2423 := z.EncBinary()
						_ = yym2423
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2420 || yy2arr2420 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2424 := z.DecBinary()
	_ = yym2424
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2425 := r.ContainerType()
		if yyct2425 == codecSelferValueTypeMap1234 {
			yyl2425 := r.ReadMapStart()
			if yyl2425 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2425, d)
			}
		} else if yyct2425 == codecSelferValueTypeArray1234 {
			yyl2425 := r.ReadArrayStart()
			if yyl2425 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2425, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2426Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2426Slc
	var yyhl2426 bool = l >= 0
	for yyj2426 := 0; ; yyj2426++ {
		if yyhl2426 {
			if yyj2426 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2426Slc = r.DecodeBytes(yys2426Slc, true, true)
		yys2426 := string(yys2426Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2426 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2427 := &x.Ingress
				yym2428 := z.DecBinary()
				_ = yym2428
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2427), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2426)
		} // end switch yys2426
	} // end for yyj2426
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2429 int
	var yyb2429 bool
	var yyhl2429 bool = l >= 0
	yyj2429++
	if yyhl2429 {
		yyb2429 = yyj2429 > l
	} else {
		yyb2429 = r.CheckBreak()
	}
	if yyb2429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2430 := &x.Ingress
		yym2431 := z.DecBinary()
		_ = yym2431
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2430), d)
		}
	}
	for {
		yyj2429++
		if yyhl2429 {
			yyb2429 = yyj2429 > l
		} else {
			yyb2429 = r.CheckBreak()
		}
		if yyb2429 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2429-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2432 := z.EncBinary()
		_ = yym2432
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2433 := !z.EncBinary()
			yy2arr2433 := z.EncBasicHandle().StructToArray
			var yyq2433 [2]bool
			_, _, _ = yysep2433, yyq2433, yy2arr2433
			const yyr2433 bool = false
			yyq2433[0] = x.IP != ""
			yyq2433[1] = x.Hostname != ""
			var yynn2433 int
			if yyr2433 || yy2arr2433 {
				r.EncodeArrayStart(2)
			} else {
				yynn2433 = 0
				for _, b := range yyq2433 {
					if b {
						yynn2433++
					}
				}
				r.EncodeMapStart(yynn2433)
				yynn2433 = 0
			}
			if yyr2433 || yy2arr2433 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2433[0] {
					yym2435 := z.EncBinary()
					_ = yym2435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2433[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2436 := z.EncBinary()
					_ = yym2436
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2433 || yy2arr2433 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2433[1] {
					yym2438 := z.EncBinary()
					_ = yym2438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2433[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2439 := z.EncBinary()
					_ = yym2439
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2433 || yy2arr2433 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2440 := z.DecBinary()
	_ = yym2440
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2441 := r.ContainerType()
		if yyct2441 == codecSelferValueTypeMap1234 {
			yyl2441 := r.ReadMapStart()
			if yyl2441 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2441, d)
			}
		} else if yyct2441 == codecSelferValueTypeArray1234 {
			yyl2441 := r.ReadArrayStart()
			if yyl2441 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2441, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2442Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2442Slc
	var yyhl2442 bool = l >= 0
	for yyj2442 := 0; ; yyj2442++ {
		if yyhl2442 {
			if yyj2442 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2442Slc = r.DecodeBytes(yys2442Slc, true, true)
		yys2442 := string(yys2442Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2442 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2442)
		} // end switch yys2442
	} // end for yyj2442
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2445 int
	var yyb2445 bool
	var yyhl2445 bool = l >= 0
	yyj2445++
	if yyhl2445 {
		yyb2445 = yyj2445 > l
	} else {
		yyb2445 = r.CheckBreak()
	}
	if yyb2445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2445++
	if yyhl2445 {
		yyb2445 = yyj2445 > l
	} else {
		yyb2445 = r.CheckBreak()
	}
	if yyb2445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2445++
		if yyhl2445 {
			yyb2445 = yyj2445 > l
		} else {
			yyb2445 = r.CheckBreak()
		}
		if yyb2445 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2445-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2448 := z.EncBinary()
		_ = yym2448
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2449 := !z.EncBinary()
			yy2arr2449 := z.EncBasicHandle().StructToArray
			var yyq2449 [8]bool
			_, _, _ = yysep2449, yyq2449, yy2arr2449
			const yyr2449 bool = false
			yyq2449[0] = x.Type != ""
			yyq2449[3] = x.ClusterIP != ""
			yyq2449[4] = len(x.ExternalIPs) != 0
			yyq2449[5] = x.LoadBalancerIP != ""
			yyq2449[6] = x.SessionAffinity != ""
			yyq2449[7] = len(x.LoadBalancerSourceRanges) != 0
			var yynn2449 int
			if yyr2449 || yy2arr2449 {
				r.EncodeArrayStart(8)
			} else {
				yynn2449 = 2
				for _, b := range yyq2449 {
					if b {
						yynn2449++
					}
				}
				r.EncodeMapStart(yynn2449)
				yynn2449 = 0
			}
			if yyr2449 || yy2arr2449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2449[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2449[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2449 || yy2arr2449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2452 := z.EncBinary()
					_ = yym2452
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2453 := z.EncBinary()
					_ = yym2453
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2449 || yy2arr2449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2455 := z.EncBinary()
					_ = yym2455
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2456 := z.EncBinary()
					_ = yym2456
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2449 || yy2arr2449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2449[3] {
					yym2458 := z.EncBinary()
					_ = yym2458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2449[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2459 := z.EncBinary()
					_ = yym2459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2449 || yy2arr2449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2449[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2461 := z.EncBinary()
						_ = yym2461
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2449[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2462 := z.EncBinary()
						_ = yym2462
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2449 || yy2arr2449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2449[5] {
					yym2464 := z.EncBinary()
					_ = yym2464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2449[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2465 := z.EncBinary()
					_ = yym2465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2449 || yy2arr2449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2449[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2449[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2449 || yy2arr2449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2449[7] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2468 := z.EncBinary()
						_ = yym2468
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2449[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2469 := z.EncBinary()
						_ = yym2469
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2449 || yy2arr2449 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2470 := z.DecBinary()
	_ = yym2470
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2471 := r.ContainerType()
		if yyct2471 == codecSelferValueTypeMap1234 {
			yyl2471 := r.ReadMapStart()
			if yyl2471 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2471, d)
			}
		} else if yyct2471 == codecSelferValueTypeArray1234 {
			yyl2471 := r.ReadArrayStart()
			if yyl2471 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2471, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2472Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2472Slc
	var yyhl2472 bool = l >= 0
	for yyj2472 := 0; ; yyj2472++ {
		if yyhl2472 {
			if yyj2472 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2472Slc = r.DecodeBytes(yys2472Slc, true, true)
		yys2472 := string(yys2472Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2472 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2474 := &x.Ports
				yym2475 := z.DecBinary()
				_ = yym2475
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2474), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2476 := &x.Selector
				yym2477 := z.DecBinary()
				_ = yym2477
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2476, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2479 := &x.ExternalIPs
				yym2480 := z.DecBinary()
				_ = yym2480
				if false {
				} else {
					z.F.DecSliceStringX(yyv2479, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2483 := &x.LoadBalancerSourceRanges
				yym2484 := z.DecBinary()
				_ = yym2484
				if false {
				} else {
					z.F.DecSliceStringX(yyv2483, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2472)
		} // end switch yys2472
	} // end for yyj2472
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2485 int
	var yyb2485 bool
	var yyhl2485 bool = l >= 0
	yyj2485++
	if yyhl2485 {
		yyb2485 = yyj2485 > l
	} else {
		yyb2485 = r.CheckBreak()
	}
	if yyb2485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2485++
	if yyhl2485 {
		yyb2485 = yyj2485 > l
	} else {
		yyb2485 = r.CheckBreak()
	}
	if yyb2485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2487 := &x.Ports
		yym2488 := z.DecBinary()
		_ = yym2488
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2487), d)
		}
	}
	yyj2485++
	if yyhl2485 {
		yyb2485 = yyj2485 > l
	} else {
		yyb2485 = r.CheckBreak()
	}
	if yyb2485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2489 := &x.Selector
		yym2490 := z.DecBinary()
		_ = yym2490
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2489, false, d)
		}
	}
	yyj2485++
	if yyhl2485 {
		yyb2485 = yyj2485 > l
	} else {
		yyb2485 = r.CheckBreak()
	}
	if yyb2485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2485++
	if yyhl2485 {
		yyb2485 = yyj2485 > l
	} else {
		yyb2485 = r.CheckBreak()
	}
	if yyb2485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2492 := &x.ExternalIPs
		yym2493 := z.DecBinary()
		_ = yym2493
		if false {
		} else {
			z.F.DecSliceStringX(yyv2492, false, d)
		}
	}
	yyj2485++
	if yyhl2485 {
		yyb2485 = yyj2485 > l
	} else {
		yyb2485 = r.CheckBreak()
	}
	if yyb2485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2485++
	if yyhl2485 {
		yyb2485 = yyj2485 > l
	} else {
		yyb2485 = r.CheckBreak()
	}
	if yyb2485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2485++
	if yyhl2485 {
		yyb2485 = yyj2485 > l
	} else {
		yyb2485 = r.CheckBreak()
	}
	if yyb2485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2496 := &x.LoadBalancerSourceRanges
		yym2497 := z.DecBinary()
		_ = yym2497
		if false {
		} else {
			z.F.DecSliceStringX(yyv2496, false, d)
		}
	}
	for {
		yyj2485++
		if yyhl2485 {
			yyb2485 = yyj2485 > l
		} else {
			yyb2485 = r.CheckBreak()
		}
		if yyb2485 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2485-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2498 := z.EncBinary()
		_ = yym2498
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2499 := !z.EncBinary()
			yy2arr2499 := z.EncBasicHandle().StructToArray
			var yyq2499 [5]bool
			_, _, _ = yysep2499, yyq2499, yy2arr2499
			const yyr2499 bool = false
			var yynn2499 int
			if yyr2499 || yy2arr2499 {
				r.EncodeArrayStart(5)
			} else {
				yynn2499 = 5
				for _, b := range yyq2499 {
					if b {
						yynn2499++
					}
				}
				r.EncodeMapStart(yynn2499)
				yynn2499 = 0
			}
			if yyr2499 || yy2arr2499 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2501 := z.EncBinary()
				_ = yym2501
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2502 := z.EncBinary()
				_ = yym2502
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2499 || yy2arr2499 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2499 || yy2arr2499 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2505 := z.EncBinary()
				_ = yym2505
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2506 := z.EncBinary()
				_ = yym2506
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2499 || yy2arr2499 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2508 := &x.TargetPort
				yym2509 := z.EncBinary()
				_ = yym2509
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2508) {
				} else if !yym2509 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2508)
				} else {
					z.EncFallback(yy2508)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2510 := &x.TargetPort
				yym2511 := z.EncBinary()
				_ = yym2511
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2510) {
				} else if !yym2511 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2510)
				} else {
					z.EncFallback(yy2510)
				}
			}
			if yyr2499 || yy2arr2499 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2513 := z.EncBinary()
				_ = yym2513
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2514 := z.EncBinary()
				_ = yym2514
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr2499 || yy2arr2499 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2515 := z.DecBinary()
	_ = yym2515
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2516 := r.ContainerType()
		if yyct2516 == codecSelferValueTypeMap1234 {
			yyl2516 := r.ReadMapStart()
			if yyl2516 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2516, d)
			}
		} else if yyct2516 == codecSelferValueTypeArray1234 {
			yyl2516 := r.ReadArrayStart()
			if yyl2516 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2516, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2517Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2517Slc
	var yyhl2517 bool = l >= 0
	for yyj2517 := 0; ; yyj2517++ {
		if yyhl2517 {
			if yyj2517 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2517Slc = r.DecodeBytes(yys2517Slc, true, true)
		yys2517 := string(yys2517Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2517 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2521 := &x.TargetPort
				yym2522 := z.DecBinary()
				_ = yym2522
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2521) {
				} else if !yym2522 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2521)
				} else {
					z.DecFallback(yyv2521, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2517)
		} // end switch yys2517
	} // end for yyj2517
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2524 int
	var yyb2524 bool
	var yyhl2524 bool = l >= 0
	yyj2524++
	if yyhl2524 {
		yyb2524 = yyj2524 > l
	} else {
		yyb2524 = r.CheckBreak()
	}
	if yyb2524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2524++
	if yyhl2524 {
		yyb2524 = yyj2524 > l
	} else {
		yyb2524 = r.CheckBreak()
	}
	if yyb2524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2524++
	if yyhl2524 {
		yyb2524 = yyj2524 > l
	} else {
		yyb2524 = r.CheckBreak()
	}
	if yyb2524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2524++
	if yyhl2524 {
		yyb2524 = yyj2524 > l
	} else {
		yyb2524 = r.CheckBreak()
	}
	if yyb2524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2528 := &x.TargetPort
		yym2529 := z.DecBinary()
		_ = yym2529
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2528) {
		} else if !yym2529 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2528)
		} else {
			z.DecFallback(yyv2528, false)
		}
	}
	yyj2524++
	if yyhl2524 {
		yyb2524 = yyj2524 > l
	} else {
		yyb2524 = r.CheckBreak()
	}
	if yyb2524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2524++
		if yyhl2524 {
			yyb2524 = yyj2524 > l
		} else {
			yyb2524 = r.CheckBreak()
		}
		if yyb2524 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2524-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2531 := z.EncBinary()
		_ = yym2531
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2532 := !z.EncBinary()
			yy2arr2532 := z.EncBasicHandle().StructToArray
			var yyq2532 [5]bool
			_, _, _ = yysep2532, yyq2532, yy2arr2532
			const yyr2532 bool = false
			yyq2532[0] = x.Kind != ""
			yyq2532[1] = x.APIVersion != ""
			yyq2532[2] = true
			yyq2532[3] = true
			yyq2532[4] = true
			var yynn2532 int
			if yyr2532 || yy2arr2532 {
				r.EncodeArrayStart(5)
			} else {
				yynn2532 = 0
				for _, b := range yyq2532 {
					if b {
						yynn2532++
					}
				}
				r.EncodeMapStart(yynn2532)
				yynn2532 = 0
			}
			if yyr2532 || yy2arr2532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2532[0] {
					yym2534 := z.EncBinary()
					_ = yym2534
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2532[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2535 := z.EncBinary()
					_ = yym2535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2532 || yy2arr2532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2532[1] {
					yym2537 := z.EncBinary()
					_ = yym2537
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2532[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2538 := z.EncBinary()
					_ = yym2538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2532 || yy2arr2532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2532[2] {
					yy2540 := &x.ObjectMeta
					yy2540.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2532[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2541 := &x.ObjectMeta
					yy2541.CodecEncodeSelf(e)
				}
			}
			if yyr2532 || yy2arr2532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2532[3] {
					yy2543 := &x.Spec
					yy2543.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2532[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2544 := &x.Spec
					yy2544.CodecEncodeSelf(e)
				}
			}
			if yyr2532 || yy2arr2532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2532[4] {
					yy2546 := &x.Status
					yy2546.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2532[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2547 := &x.Status
					yy2547.CodecEncodeSelf(e)
				}
			}
			if yyr2532 || yy2arr2532 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2548 := z.DecBinary()
	_ = yym2548
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2549 := r.ContainerType()
		if yyct2549 == codecSelferValueTypeMap1234 {
			yyl2549 := r.ReadMapStart()
			if yyl2549 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2549, d)
			}
		} else if yyct2549 == codecSelferValueTypeArray1234 {
			yyl2549 := r.ReadArrayStart()
			if yyl2549 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2549, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2550Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2550Slc
	var yyhl2550 bool = l >= 0
	for yyj2550 := 0; ; yyj2550++ {
		if yyhl2550 {
			if yyj2550 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2550Slc = r.DecodeBytes(yys2550Slc, true, true)
		yys2550 := string(yys2550Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2550 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2553 := &x.ObjectMeta
				yyv2553.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2554 := &x.Spec
				yyv2554.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2555 := &x.Status
				yyv2555.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2550)
		} // end switch yys2550
	} // end for yyj2550
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2556 int
	var yyb2556 bool
	var yyhl2556 bool = l >= 0
	yyj2556++
	if yyhl2556 {
		yyb2556 = yyj2556 > l
	} else {
		yyb2556 = r.CheckBreak()
	}
	if yyb2556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2556++
	if yyhl2556 {
		yyb2556 = yyj2556 > l
	} else {
		yyb2556 = r.CheckBreak()
	}
	if yyb2556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2556++
	if yyhl2556 {
		yyb2556 = yyj2556 > l
	} else {
		yyb2556 = r.CheckBreak()
	}
	if yyb2556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2559 := &x.ObjectMeta
		yyv2559.CodecDecodeSelf(d)
	}
	yyj2556++
	if yyhl2556 {
		yyb2556 = yyj2556 > l
	} else {
		yyb2556 = r.CheckBreak()
	}
	if yyb2556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2560 := &x.Spec
		yyv2560.CodecDecodeSelf(d)
	}
	yyj2556++
	if yyhl2556 {
		yyb2556 = yyj2556 > l
	} else {
		yyb2556 = r.CheckBreak()
	}
	if yyb2556 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2561 := &x.Status
		yyv2561.CodecDecodeSelf(d)
	}
	for {
		yyj2556++
		if yyhl2556 {
			yyb2556 = yyj2556 > l
		} else {
			yyb2556 = r.CheckBreak()
		}
		if yyb2556 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2556-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2562 := z.EncBinary()
		_ = yym2562
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2563 := !z.EncBinary()
			yy2arr2563 := z.EncBasicHandle().StructToArray
			var yyq2563 [5]bool
			_, _, _ = yysep2563, yyq2563, yy2arr2563
			const yyr2563 bool = false
			yyq2563[0] = x.Kind != ""
			yyq2563[1] = x.APIVersion != ""
			yyq2563[2] = true
			yyq2563[4] = len(x.ImagePullSecrets) != 0
			var yynn2563 int
			if yyr2563 || yy2arr2563 {
				r.EncodeArrayStart(5)
			} else {
				yynn2563 = 1
				for _, b := range yyq2563 {
					if b {
						yynn2563++
					}
				}
				r.EncodeMapStart(yynn2563)
				yynn2563 = 0
			}
			if yyr2563 || yy2arr2563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2563[0] {
					yym2565 := z.EncBinary()
					_ = yym2565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2563[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2566 := z.EncBinary()
					_ = yym2566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2563 || yy2arr2563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2563[1] {
					yym2568 := z.EncBinary()
					_ = yym2568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2563[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2569 := z.EncBinary()
					_ = yym2569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2563 || yy2arr2563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2563[2] {
					yy2571 := &x.ObjectMeta
					yy2571.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2563[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2572 := &x.ObjectMeta
					yy2572.CodecEncodeSelf(e)
				}
			}
			if yyr2563 || yy2arr2563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2574 := z.EncBinary()
					_ = yym2574
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2575 := z.EncBinary()
					_ = yym2575
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2563 || yy2arr2563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2563[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2577 := z.EncBinary()
						_ = yym2577
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2563[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2578 := z.EncBinary()
						_ = yym2578
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2563 || yy2arr2563 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2579 := z.DecBinary()
	_ = yym2579
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2580 := r.ContainerType()
		if yyct2580 == codecSelferValueTypeMap1234 {
			yyl2580 := r.ReadMapStart()
			if yyl2580 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2580, d)
			}
		} else if yyct2580 == codecSelferValueTypeArray1234 {
			yyl2580 := r.ReadArrayStart()
			if yyl2580 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2580, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2581Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2581Slc
	var yyhl2581 bool = l >= 0
	for yyj2581 := 0; ; yyj2581++ {
		if yyhl2581 {
			if yyj2581 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2581Slc = r.DecodeBytes(yys2581Slc, true, true)
		yys2581 := string(yys2581Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2581 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2584 := &x.ObjectMeta
				yyv2584.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2585 := &x.Secrets
				yym2586 := z.DecBinary()
				_ = yym2586
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2585), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2587 := &x.ImagePullSecrets
				yym2588 := z.DecBinary()
				_ = yym2588
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2587), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2581)
		} // end switch yys2581
	} // end for yyj2581
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2589 int
	var yyb2589 bool
	var yyhl2589 bool = l >= 0
	yyj2589++
	if yyhl2589 {
		yyb2589 = yyj2589 > l
	} else {
		yyb2589 = r.CheckBreak()
	}
	if yyb2589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2589++
	if yyhl2589 {
		yyb2589 = yyj2589 > l
	} else {
		yyb2589 = r.CheckBreak()
	}
	if yyb2589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2589++
	if yyhl2589 {
		yyb2589 = yyj2589 > l
	} else {
		yyb2589 = r.CheckBreak()
	}
	if yyb2589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2592 := &x.ObjectMeta
		yyv2592.CodecDecodeSelf(d)
	}
	yyj2589++
	if yyhl2589 {
		yyb2589 = yyj2589 > l
	} else {
		yyb2589 = r.CheckBreak()
	}
	if yyb2589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2593 := &x.Secrets
		yym2594 := z.DecBinary()
		_ = yym2594
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2593), d)
		}
	}
	yyj2589++
	if yyhl2589 {
		yyb2589 = yyj2589 > l
	} else {
		yyb2589 = r.CheckBreak()
	}
	if yyb2589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2595 := &x.ImagePullSecrets
		yym2596 := z.DecBinary()
		_ = yym2596
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2595), d)
		}
	}
	for {
		yyj2589++
		if yyhl2589 {
			yyb2589 = yyj2589 > l
		} else {
			yyb2589 = r.CheckBreak()
		}
		if yyb2589 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2589-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2597 := z.EncBinary()
		_ = yym2597
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2598 := !z.EncBinary()
			yy2arr2598 := z.EncBasicHandle().StructToArray
			var yyq2598 [4]bool
			_, _, _ = yysep2598, yyq2598, yy2arr2598
			const yyr2598 bool = false
			yyq2598[0] = x.Kind != ""
			yyq2598[1] = x.APIVersion != ""
			yyq2598[2] = true
			var yynn2598 int
			if yyr2598 || yy2arr2598 {
				r.EncodeArrayStart(4)
			} else {
				yynn2598 = 1
				for _, b := range yyq2598 {
					if b {
						yynn2598++
					}
				}
				r.EncodeMapStart(yynn2598)
				yynn2598 = 0
			}
			if yyr2598 || yy2arr2598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2598[0] {
					yym2600 := z.EncBinary()
					_ = yym2600
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2598[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2601 := z.EncBinary()
					_ = yym2601
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2598 || yy2arr2598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2598[1] {
					yym2603 := z.EncBinary()
					_ = yym2603
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2598[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2604 := z.EncBinary()
					_ = yym2604
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2598 || yy2arr2598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2598[2] {
					yy2606 := &x.ListMeta
					yym2607 := z.EncBinary()
					_ = yym2607
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2606) {
					} else {
						z.EncFallback(yy2606)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2598[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2608 := &x.ListMeta
					yym2609 := z.EncBinary()
					_ = yym2609
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2608) {
					} else {
						z.EncFallback(yy2608)
					}
				}
			}
			if yyr2598 || yy2arr2598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2611 := z.EncBinary()
					_ = yym2611
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2612 := z.EncBinary()
					_ = yym2612
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2598 || yy2arr2598 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2613 := z.DecBinary()
	_ = yym2613
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2614 := r.ContainerType()
		if yyct2614 == codecSelferValueTypeMap1234 {
			yyl2614 := r.ReadMapStart()
			if yyl2614 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2614, d)
			}
		} else if yyct2614 == codecSelferValueTypeArray1234 {
			yyl2614 := r.ReadArrayStart()
			if yyl2614 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2614, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2615Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2615Slc
	var yyhl2615 bool = l >= 0
	for yyj2615 := 0; ; yyj2615++ {
		if yyhl2615 {
			if yyj2615 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2615Slc = r.DecodeBytes(yys2615Slc, true, true)
		yys2615 := string(yys2615Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2615 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2618 := &x.ListMeta
				yym2619 := z.DecBinary()
				_ = yym2619
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2618) {
				} else {
					z.DecFallback(yyv2618, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2620 := &x.Items
				yym2621 := z.DecBinary()
				_ = yym2621
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2620), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2615)
		} // end switch yys2615
	} // end for yyj2615
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2622 int
	var yyb2622 bool
	var yyhl2622 bool = l >= 0
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2625 := &x.ListMeta
		yym2626 := z.DecBinary()
		_ = yym2626
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2625) {
		} else {
			z.DecFallback(yyv2625, false)
		}
	}
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2627 := &x.Items
		yym2628 := z.DecBinary()
		_ = yym2628
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2627), d)
		}
	}
	for {
		yyj2622++
		if yyhl2622 {
			yyb2622 = yyj2622 > l
		} else {
			yyb2622 = r.CheckBreak()
		}
		if yyb2622 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2622-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2629 := z.EncBinary()
		_ = yym2629
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2630 := !z.EncBinary()
			yy2arr2630 := z.EncBasicHandle().StructToArray
			var yyq2630 [4]bool
			_, _, _ = yysep2630, yyq2630, yy2arr2630
			const yyr2630 bool = false
			yyq2630[0] = x.Kind != ""
			yyq2630[1] = x.APIVersion != ""
			yyq2630[2] = true
			var yynn2630 int
			if yyr2630 || yy2arr2630 {
				r.EncodeArrayStart(4)
			} else {
				yynn2630 = 1
				for _, b := range yyq2630 {
					if b {
						yynn2630++
					}
				}
				r.EncodeMapStart(yynn2630)
				yynn2630 = 0
			}
			if yyr2630 || yy2arr2630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2630[0] {
					yym2632 := z.EncBinary()
					_ = yym2632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2630[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2633 := z.EncBinary()
					_ = yym2633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2630 || yy2arr2630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2630[1] {
					yym2635 := z.EncBinary()
					_ = yym2635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2630[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2636 := z.EncBinary()
					_ = yym2636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2630 || yy2arr2630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2630[2] {
					yy2638 := &x.ObjectMeta
					yy2638.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2630[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2639 := &x.ObjectMeta
					yy2639.CodecEncodeSelf(e)
				}
			}
			if yyr2630 || yy2arr2630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2641 := z.EncBinary()
					_ = yym2641
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2642 := z.EncBinary()
					_ = yym2642
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2630 || yy2arr2630 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2643 := z.DecBinary()
	_ = yym2643
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2644 := r.ContainerType()
		if yyct2644 == codecSelferValueTypeMap1234 {
			yyl2644 := r.ReadMapStart()
			if yyl2644 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2644, d)
			}
		} else if yyct2644 == codecSelferValueTypeArray1234 {
			yyl2644 := r.ReadArrayStart()
			if yyl2644 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2644, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2645Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2645Slc
	var yyhl2645 bool = l >= 0
	for yyj2645 := 0; ; yyj2645++ {
		if yyhl2645 {
			if yyj2645 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2645Slc = r.DecodeBytes(yys2645Slc, true, true)
		yys2645 := string(yys2645Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2645 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2648 := &x.ObjectMeta
				yyv2648.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2649 := &x.Subsets
				yym2650 := z.DecBinary()
				_ = yym2650
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2649), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2645)
		} // end switch yys2645
	} // end for yyj2645
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2651 int
	var yyb2651 bool
	var yyhl2651 bool = l >= 0
	yyj2651++
	if yyhl2651 {
		yyb2651 = yyj2651 > l
	} else {
		yyb2651 = r.CheckBreak()
	}
	if yyb2651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2651++
	if yyhl2651 {
		yyb2651 = yyj2651 > l
	} else {
		yyb2651 = r.CheckBreak()
	}
	if yyb2651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2651++
	if yyhl2651 {
		yyb2651 = yyj2651 > l
	} else {
		yyb2651 = r.CheckBreak()
	}
	if yyb2651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2654 := &x.ObjectMeta
		yyv2654.CodecDecodeSelf(d)
	}
	yyj2651++
	if yyhl2651 {
		yyb2651 = yyj2651 > l
	} else {
		yyb2651 = r.CheckBreak()
	}
	if yyb2651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2655 := &x.Subsets
		yym2656 := z.DecBinary()
		_ = yym2656
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2655), d)
		}
	}
	for {
		yyj2651++
		if yyhl2651 {
			yyb2651 = yyj2651 > l
		} else {
			yyb2651 = r.CheckBreak()
		}
		if yyb2651 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2651-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2657 := z.EncBinary()
		_ = yym2657
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2658 := !z.EncBinary()
			yy2arr2658 := z.EncBasicHandle().StructToArray
			var yyq2658 [3]bool
			_, _, _ = yysep2658, yyq2658, yy2arr2658
			const yyr2658 bool = false
			var yynn2658 int
			if yyr2658 || yy2arr2658 {
				r.EncodeArrayStart(3)
			} else {
				yynn2658 = 3
				for _, b := range yyq2658 {
					if b {
						yynn2658++
					}
				}
				r.EncodeMapStart(yynn2658)
				yynn2658 = 0
			}
			if yyr2658 || yy2arr2658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2660 := z.EncBinary()
					_ = yym2660
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2661 := z.EncBinary()
					_ = yym2661
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2658 || yy2arr2658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2663 := z.EncBinary()
					_ = yym2663
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2664 := z.EncBinary()
					_ = yym2664
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2658 || yy2arr2658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2666 := z.EncBinary()
					_ = yym2666
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2667 := z.EncBinary()
					_ = yym2667
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2658 || yy2arr2658 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2668 := z.DecBinary()
	_ = yym2668
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2669 := r.ContainerType()
		if yyct2669 == codecSelferValueTypeMap1234 {
			yyl2669 := r.ReadMapStart()
			if yyl2669 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2669, d)
			}
		} else if yyct2669 == codecSelferValueTypeArray1234 {
			yyl2669 := r.ReadArrayStart()
			if yyl2669 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2669, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2670Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2670Slc
	var yyhl2670 bool = l >= 0
	for yyj2670 := 0; ; yyj2670++ {
		if yyhl2670 {
			if yyj2670 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2670Slc = r.DecodeBytes(yys2670Slc, true, true)
		yys2670 := string(yys2670Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2670 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2671 := &x.Addresses
				yym2672 := z.DecBinary()
				_ = yym2672
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2671), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2673 := &x.NotReadyAddresses
				yym2674 := z.DecBinary()
				_ = yym2674
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2673), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2675 := &x.Ports
				yym2676 := z.DecBinary()
				_ = yym2676
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2675), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2670)
		} // end switch yys2670
	} // end for yyj2670
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2677 int
	var yyb2677 bool
	var yyhl2677 bool = l >= 0
	yyj2677++
	if yyhl2677 {
		yyb2677 = yyj2677 > l
	} else {
		yyb2677 = r.CheckBreak()
	}
	if yyb2677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2678 := &x.Addresses
		yym2679 := z.DecBinary()
		_ = yym2679
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2678), d)
		}
	}
	yyj2677++
	if yyhl2677 {
		yyb2677 = yyj2677 > l
	} else {
		yyb2677 = r.CheckBreak()
	}
	if yyb2677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2680 := &x.NotReadyAddresses
		yym2681 := z.DecBinary()
		_ = yym2681
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2680), d)
		}
	}
	yyj2677++
	if yyhl2677 {
		yyb2677 = yyj2677 > l
	} else {
		yyb2677 = r.CheckBreak()
	}
	if yyb2677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2682 := &x.Ports
		yym2683 := z.DecBinary()
		_ = yym2683
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2682), d)
		}
	}
	for {
		yyj2677++
		if yyhl2677 {
			yyb2677 = yyj2677 > l
		} else {
			yyb2677 = r.CheckBreak()
		}
		if yyb2677 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2677-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2684 := z.EncBinary()
		_ = yym2684
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2685 := !z.EncBinary()
			yy2arr2685 := z.EncBasicHandle().StructToArray
			var yyq2685 [4]bool
			_, _, _ = yysep2685, yyq2685, yy2arr2685
			const yyr2685 bool = false
			yyq2685[1] = x.Hostname != ""
			yyq2685[2] = x.NodeName != nil
			var yynn2685 int
			if yyr2685 || yy2arr2685 {
				r.EncodeArrayStart(4)
			} else {
				yynn2685 = 2
				for _, b := range yyq2685 {
					if b {
						yynn2685++
					}
				}
				r.EncodeMapStart(yynn2685)
				yynn2685 = 0
			}
			if yyr2685 || yy2arr2685 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2687 := z.EncBinary()
				_ = yym2687
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2688 := z.EncBinary()
				_ = yym2688
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2685 || yy2arr2685 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2685[1] {
					yym2690 := z.EncBinary()
					_ = yym2690
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2685[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2691 := z.EncBinary()
					_ = yym2691
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2685 || yy2arr2685 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2685[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2693 := *x.NodeName
						yym2694 := z.EncBinary()
						_ = yym2694
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2693))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2685[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2695 := *x.NodeName
						yym2696 := z.EncBinary()
						_ = yym2696
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2695))
						}
					}
				}
			}
			if yyr2685 || yy2arr2685 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2685 || yy2arr2685 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2698 := z.DecBinary()
	_ = yym2698
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2699 := r.ContainerType()
		if yyct2699 == codecSelferValueTypeMap1234 {
			yyl2699 := r.ReadMapStart()
			if yyl2699 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2699, d)
			}
		} else if yyct2699 == codecSelferValueTypeArray1234 {
			yyl2699 := r.ReadArrayStart()
			if yyl2699 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2699, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2700Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2700Slc
	var yyhl2700 bool = l >= 0
	for yyj2700 := 0; ; yyj2700++ {
		if yyhl2700 {
			if yyj2700 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2700Slc = r.DecodeBytes(yys2700Slc, true, true)
		yys2700 := string(yys2700Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2700 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2704 := z.DecBinary()
				_ = yym2704
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2700)
		} // end switch yys2700
	} // end for yyj2700
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2706 int
	var yyb2706 bool
	var yyhl2706 bool = l >= 0
	yyj2706++
	if yyhl2706 {
		yyb2706 = yyj2706 > l
	} else {
		yyb2706 = r.CheckBreak()
	}
	if yyb2706 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2706++
	if yyhl2706 {
		yyb2706 = yyj2706 > l
	} else {
		yyb2706 = r.CheckBreak()
	}
	if yyb2706 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2706++
	if yyhl2706 {
		yyb2706 = yyj2706 > l
	} else {
		yyb2706 = r.CheckBreak()
	}
	if yyb2706 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2710 := z.DecBinary()
		_ = yym2710
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2706++
	if yyhl2706 {
		yyb2706 = yyj2706 > l
	} else {
		yyb2706 = r.CheckBreak()
	}
	if yyb2706 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2706++
		if yyhl2706 {
			yyb2706 = yyj2706 > l
		} else {
			yyb2706 = r.CheckBreak()
		}
		if yyb2706 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2706-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2712 := z.EncBinary()
		_ = yym2712
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2713 := !z.EncBinary()
			yy2arr2713 := z.EncBasicHandle().StructToArray
			var yyq2713 [3]bool
			_, _, _ = yysep2713, yyq2713, yy2arr2713
			const yyr2713 bool = false
			var yynn2713 int
			if yyr2713 || yy2arr2713 {
				r.EncodeArrayStart(3)
			} else {
				yynn2713 = 3
				for _, b := range yyq2713 {
					if b {
						yynn2713++
					}
				}
				r.EncodeMapStart(yynn2713)
				yynn2713 = 0
			}
			if yyr2713 || yy2arr2713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2715 := z.EncBinary()
				_ = yym2715
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2716 := z.EncBinary()
				_ = yym2716
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2713 || yy2arr2713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2718 := z.EncBinary()
				_ = yym2718
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2719 := z.EncBinary()
				_ = yym2719
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2713 || yy2arr2713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2713 || yy2arr2713 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2721 := z.DecBinary()
	_ = yym2721
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2722 := r.ContainerType()
		if yyct2722 == codecSelferValueTypeMap1234 {
			yyl2722 := r.ReadMapStart()
			if yyl2722 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2722, d)
			}
		} else if yyct2722 == codecSelferValueTypeArray1234 {
			yyl2722 := r.ReadArrayStart()
			if yyl2722 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2722, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2723Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2723Slc
	var yyhl2723 bool = l >= 0
	for yyj2723 := 0; ; yyj2723++ {
		if yyhl2723 {
			if yyj2723 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2723Slc = r.DecodeBytes(yys2723Slc, true, true)
		yys2723 := string(yys2723Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2723 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2723)
		} // end switch yys2723
	} // end for yyj2723
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2727 int
	var yyb2727 bool
	var yyhl2727 bool = l >= 0
	yyj2727++
	if yyhl2727 {
		yyb2727 = yyj2727 > l
	} else {
		yyb2727 = r.CheckBreak()
	}
	if yyb2727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2727++
	if yyhl2727 {
		yyb2727 = yyj2727 > l
	} else {
		yyb2727 = r.CheckBreak()
	}
	if yyb2727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2727++
	if yyhl2727 {
		yyb2727 = yyj2727 > l
	} else {
		yyb2727 = r.CheckBreak()
	}
	if yyb2727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2727++
		if yyhl2727 {
			yyb2727 = yyj2727 > l
		} else {
			yyb2727 = r.CheckBreak()
		}
		if yyb2727 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2727-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2731 := z.EncBinary()
		_ = yym2731
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2732 := !z.EncBinary()
			yy2arr2732 := z.EncBasicHandle().StructToArray
			var yyq2732 [4]bool
			_, _, _ = yysep2732, yyq2732, yy2arr2732
			const yyr2732 bool = false
			yyq2732[0] = x.Kind != ""
			yyq2732[1] = x.APIVersion != ""
			yyq2732[2] = true
			var yynn2732 int
			if yyr2732 || yy2arr2732 {
				r.EncodeArrayStart(4)
			} else {
				yynn2732 = 1
				for _, b := range yyq2732 {
					if b {
						yynn2732++
					}
				}
				r.EncodeMapStart(yynn2732)
				yynn2732 = 0
			}
			if yyr2732 || yy2arr2732 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2732[0] {
					yym2734 := z.EncBinary()
					_ = yym2734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2732[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2735 := z.EncBinary()
					_ = yym2735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2732 || yy2arr2732 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2732[1] {
					yym2737 := z.EncBinary()
					_ = yym2737
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2732[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2738 := z.EncBinary()
					_ = yym2738
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2732 || yy2arr2732 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2732[2] {
					yy2740 := &x.ListMeta
					yym2741 := z.EncBinary()
					_ = yym2741
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2740) {
					} else {
						z.EncFallback(yy2740)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2732[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2742 := &x.ListMeta
					yym2743 := z.EncBinary()
					_ = yym2743
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2742) {
					} else {
						z.EncFallback(yy2742)
					}
				}
			}
			if yyr2732 || yy2arr2732 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2745 := z.EncBinary()
					_ = yym2745
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2746 := z.EncBinary()
					_ = yym2746
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2732 || yy2arr2732 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2747 := z.DecBinary()
	_ = yym2747
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2748 := r.ContainerType()
		if yyct2748 == codecSelferValueTypeMap1234 {
			yyl2748 := r.ReadMapStart()
			if yyl2748 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2748, d)
			}
		} else if yyct2748 == codecSelferValueTypeArray1234 {
			yyl2748 := r.ReadArrayStart()
			if yyl2748 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2748, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2749Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2749Slc
	var yyhl2749 bool = l >= 0
	for yyj2749 := 0; ; yyj2749++ {
		if yyhl2749 {
			if yyj2749 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2749Slc = r.DecodeBytes(yys2749Slc, true, true)
		yys2749 := string(yys2749Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2749 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2752 := &x.ListMeta
				yym2753 := z.DecBinary()
				_ = yym2753
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2752) {
				} else {
					z.DecFallback(yyv2752, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2754 := &x.Items
				yym2755 := z.DecBinary()
				_ = yym2755
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2754), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2749)
		} // end switch yys2749
	} // end for yyj2749
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2756 int
	var yyb2756 bool
	var yyhl2756 bool = l >= 0
	yyj2756++
	if yyhl2756 {
		yyb2756 = yyj2756 > l
	} else {
		yyb2756 = r.CheckBreak()
	}
	if yyb2756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2756++
	if yyhl2756 {
		yyb2756 = yyj2756 > l
	} else {
		yyb2756 = r.CheckBreak()
	}
	if yyb2756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2756++
	if yyhl2756 {
		yyb2756 = yyj2756 > l
	} else {
		yyb2756 = r.CheckBreak()
	}
	if yyb2756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2759 := &x.ListMeta
		yym2760 := z.DecBinary()
		_ = yym2760
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2759) {
		} else {
			z.DecFallback(yyv2759, false)
		}
	}
	yyj2756++
	if yyhl2756 {
		yyb2756 = yyj2756 > l
	} else {
		yyb2756 = r.CheckBreak()
	}
	if yyb2756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2761 := &x.Items
		yym2762 := z.DecBinary()
		_ = yym2762
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2761), d)
		}
	}
	for {
		yyj2756++
		if yyhl2756 {
			yyb2756 = yyj2756 > l
		} else {
			yyb2756 = r.CheckBreak()
		}
		if yyb2756 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2756-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2763 := z.EncBinary()
		_ = yym2763
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2764 := !z.EncBinary()
			yy2arr2764 := z.EncBasicHandle().StructToArray
			var yyq2764 [4]bool
			_, _, _ = yysep2764, yyq2764, yy2arr2764
			const yyr2764 bool = false
			yyq2764[0] = x.PodCIDR != ""
			yyq2764[1] = x.ExternalID != ""
			yyq2764[2] = x.ProviderID != ""
			yyq2764[3] = x.Unschedulable != false
			var yynn2764 int
			if yyr2764 || yy2arr2764 {
				r.EncodeArrayStart(4)
			} else {
				yynn2764 = 0
				for _, b := range yyq2764 {
					if b {
						yynn2764++
					}
				}
				r.EncodeMapStart(yynn2764)
				yynn2764 = 0
			}
			if yyr2764 || yy2arr2764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2764[0] {
					yym2766 := z.EncBinary()
					_ = yym2766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2764[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2767 := z.EncBinary()
					_ = yym2767
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2764 || yy2arr2764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2764[1] {
					yym2769 := z.EncBinary()
					_ = yym2769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2764[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2770 := z.EncBinary()
					_ = yym2770
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2764 || yy2arr2764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2764[2] {
					yym2772 := z.EncBinary()
					_ = yym2772
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2764[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2773 := z.EncBinary()
					_ = yym2773
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2764 || yy2arr2764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2764[3] {
					yym2775 := z.EncBinary()
					_ = yym2775
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2764[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2776 := z.EncBinary()
					_ = yym2776
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2764 || yy2arr2764 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2777 := z.DecBinary()
	_ = yym2777
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2778 := r.ContainerType()
		if yyct2778 == codecSelferValueTypeMap1234 {
			yyl2778 := r.ReadMapStart()
			if yyl2778 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2778, d)
			}
		} else if yyct2778 == codecSelferValueTypeArray1234 {
			yyl2778 := r.ReadArrayStart()
			if yyl2778 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2778, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2779Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2779Slc
	var yyhl2779 bool = l >= 0
	for yyj2779 := 0; ; yyj2779++ {
		if yyhl2779 {
			if yyj2779 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2779Slc = r.DecodeBytes(yys2779Slc, true, true)
		yys2779 := string(yys2779Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2779 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2779)
		} // end switch yys2779
	} // end for yyj2779
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2784 int
	var yyb2784 bool
	var yyhl2784 bool = l >= 0
	yyj2784++
	if yyhl2784 {
		yyb2784 = yyj2784 > l
	} else {
		yyb2784 = r.CheckBreak()
	}
	if yyb2784 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2784++
	if yyhl2784 {
		yyb2784 = yyj2784 > l
	} else {
		yyb2784 = r.CheckBreak()
	}
	if yyb2784 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2784++
	if yyhl2784 {
		yyb2784 = yyj2784 > l
	} else {
		yyb2784 = r.CheckBreak()
	}
	if yyb2784 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2784++
	if yyhl2784 {
		yyb2784 = yyj2784 > l
	} else {
		yyb2784 = r.CheckBreak()
	}
	if yyb2784 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2784++
		if yyhl2784 {
			yyb2784 = yyj2784 > l
		} else {
			yyb2784 = r.CheckBreak()
		}
		if yyb2784 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2784-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2789 := z.EncBinary()
		_ = yym2789
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2790 := !z.EncBinary()
			yy2arr2790 := z.EncBasicHandle().StructToArray
			var yyq2790 [1]bool
			_, _, _ = yysep2790, yyq2790, yy2arr2790
			const yyr2790 bool = false
			var yynn2790 int
			if yyr2790 || yy2arr2790 {
				r.EncodeArrayStart(1)
			} else {
				yynn2790 = 1
				for _, b := range yyq2790 {
					if b {
						yynn2790++
					}
				}
				r.EncodeMapStart(yynn2790)
				yynn2790 = 0
			}
			if yyr2790 || yy2arr2790 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2792 := z.EncBinary()
				_ = yym2792
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2793 := z.EncBinary()
				_ = yym2793
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2790 || yy2arr2790 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2794 := z.DecBinary()
	_ = yym2794
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2795 := r.ContainerType()
		if yyct2795 == codecSelferValueTypeMap1234 {
			yyl2795 := r.ReadMapStart()
			if yyl2795 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2795, d)
			}
		} else if yyct2795 == codecSelferValueTypeArray1234 {
			yyl2795 := r.ReadArrayStart()
			if yyl2795 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2795, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2796Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2796Slc
	var yyhl2796 bool = l >= 0
	for yyj2796 := 0; ; yyj2796++ {
		if yyhl2796 {
			if yyj2796 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2796Slc = r.DecodeBytes(yys2796Slc, true, true)
		yys2796 := string(yys2796Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2796 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2796)
		} // end switch yys2796
	} // end for yyj2796
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2798 int
	var yyb2798 bool
	var yyhl2798 bool = l >= 0
	yyj2798++
	if yyhl2798 {
		yyb2798 = yyj2798 > l
	} else {
		yyb2798 = r.CheckBreak()
	}
	if yyb2798 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2798++
		if yyhl2798 {
			yyb2798 = yyj2798 > l
		} else {
			yyb2798 = r.CheckBreak()
		}
		if yyb2798 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2798-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2800 := z.EncBinary()
		_ = yym2800
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2801 := !z.EncBinary()
			yy2arr2801 := z.EncBasicHandle().StructToArray
			var yyq2801 [1]bool
			_, _, _ = yysep2801, yyq2801, yy2arr2801
			const yyr2801 bool = false
			yyq2801[0] = true
			var yynn2801 int
			if yyr2801 || yy2arr2801 {
				r.EncodeArrayStart(1)
			} else {
				yynn2801 = 0
				for _, b := range yyq2801 {
					if b {
						yynn2801++
					}
				}
				r.EncodeMapStart(yynn2801)
				yynn2801 = 0
			}
			if yyr2801 || yy2arr2801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2801[0] {
					yy2803 := &x.KubeletEndpoint
					yy2803.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2801[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2804 := &x.KubeletEndpoint
					yy2804.CodecEncodeSelf(e)
				}
			}
			if yyr2801 || yy2arr2801 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2805 := z.DecBinary()
	_ = yym2805
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2806 := r.ContainerType()
		if yyct2806 == codecSelferValueTypeMap1234 {
			yyl2806 := r.ReadMapStart()
			if yyl2806 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2806, d)
			}
		} else if yyct2806 == codecSelferValueTypeArray1234 {
			yyl2806 := r.ReadArrayStart()
			if yyl2806 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2806, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2807Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2807Slc
	var yyhl2807 bool = l >= 0
	for yyj2807 := 0; ; yyj2807++ {
		if yyhl2807 {
			if yyj2807 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2807Slc = r.DecodeBytes(yys2807Slc, true, true)
		yys2807 := string(yys2807Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2807 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2808 := &x.KubeletEndpoint
				yyv2808.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2807)
		} // end switch yys2807
	} // end for yyj2807
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2809 int
	var yyb2809 bool
	var yyhl2809 bool = l >= 0
	yyj2809++
	if yyhl2809 {
		yyb2809 = yyj2809 > l
	} else {
		yyb2809 = r.CheckBreak()
	}
	if yyb2809 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2810 := &x.KubeletEndpoint
		yyv2810.CodecDecodeSelf(d)
	}
	for {
		yyj2809++
		if yyhl2809 {
			yyb2809 = yyj2809 > l
		} else {
			yyb2809 = r.CheckBreak()
		}
		if yyb2809 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2809-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2811 := z.EncBinary()
		_ = yym2811
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2812 := !z.EncBinary()
			yy2arr2812 := z.EncBasicHandle().StructToArray
			var yyq2812 [10]bool
			_, _, _ = yysep2812, yyq2812, yy2arr2812
			const yyr2812 bool = false
			var yynn2812 int
			if yyr2812 || yy2arr2812 {
				r.EncodeArrayStart(10)
			} else {
				yynn2812 = 10
				for _, b := range yyq2812 {
					if b {
						yynn2812++
					}
				}
				r.EncodeMapStart(yynn2812)
				yynn2812 = 0
			}
			if yyr2812 || yy2arr2812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2814 := z.EncBinary()
				_ = yym2814
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2815 := z.EncBinary()
				_ = yym2815
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2812 || yy2arr2812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2817 := z.EncBinary()
				_ = yym2817
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2818 := z.EncBinary()
				_ = yym2818
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2812 || yy2arr2812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2820 := z.EncBinary()
				_ = yym2820
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2821 := z.EncBinary()
				_ = yym2821
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2812 || yy2arr2812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2823 := z.EncBinary()
				_ = yym2823
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2824 := z.EncBinary()
				_ = yym2824
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2812 || yy2arr2812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2826 := z.EncBinary()
				_ = yym2826
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2827 := z.EncBinary()
				_ = yym2827
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2812 || yy2arr2812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2829 := z.EncBinary()
				_ = yym2829
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2830 := z.EncBinary()
				_ = yym2830
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2812 || yy2arr2812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2832 := z.EncBinary()
				_ = yym2832
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2833 := z.EncBinary()
				_ = yym2833
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2812 || yy2arr2812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2835 := z.EncBinary()
				_ = yym2835
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2836 := z.EncBinary()
				_ = yym2836
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2812 || yy2arr2812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2838 := z.EncBinary()
				_ = yym2838
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2839 := z.EncBinary()
				_ = yym2839
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr2812 || yy2arr2812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2841 := z.EncBinary()
				_ = yym2841
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2842 := z.EncBinary()
				_ = yym2842
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr2812 || yy2arr2812 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2843 := z.DecBinary()
	_ = yym2843
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2844 := r.ContainerType()
		if yyct2844 == codecSelferValueTypeMap1234 {
			yyl2844 := r.ReadMapStart()
			if yyl2844 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2844, d)
			}
		} else if yyct2844 == codecSelferValueTypeArray1234 {
			yyl2844 := r.ReadArrayStart()
			if yyl2844 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2844, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2845Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2845Slc
	var yyhl2845 bool = l >= 0
	for yyj2845 := 0; ; yyj2845++ {
		if yyhl2845 {
			if yyj2845 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2845Slc = r.DecodeBytes(yys2845Slc, true, true)
		yys2845 := string(yys2845Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2845 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2845)
		} // end switch yys2845
	} // end for yyj2845
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2856 int
	var yyb2856 bool
	var yyhl2856 bool = l >= 0
	yyj2856++
	if yyhl2856 {
		yyb2856 = yyj2856 > l
	} else {
		yyb2856 = r.CheckBreak()
	}
	if yyb2856 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2856++
	if yyhl2856 {
		yyb2856 = yyj2856 > l
	} else {
		yyb2856 = r.CheckBreak()
	}
	if yyb2856 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2856++
	if yyhl2856 {
		yyb2856 = yyj2856 > l
	} else {
		yyb2856 = r.CheckBreak()
	}
	if yyb2856 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2856++
	if yyhl2856 {
		yyb2856 = yyj2856 > l
	} else {
		yyb2856 = r.CheckBreak()
	}
	if yyb2856 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2856++
	if yyhl2856 {
		yyb2856 = yyj2856 > l
	} else {
		yyb2856 = r.CheckBreak()
	}
	if yyb2856 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2856++
	if yyhl2856 {
		yyb2856 = yyj2856 > l
	} else {
		yyb2856 = r.CheckBreak()
	}
	if yyb2856 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2856++
	if yyhl2856 {
		yyb2856 = yyj2856 > l
	} else {
		yyb2856 = r.CheckBreak()
	}
	if yyb2856 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2856++
	if yyhl2856 {
		yyb2856 = yyj2856 > l
	} else {
		yyb2856 = r.CheckBreak()
	}
	if yyb2856 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj2856++
	if yyhl2856 {
		yyb2856 = yyj2856 > l
	} else {
		yyb2856 = r.CheckBreak()
	}
	if yyb2856 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj2856++
	if yyhl2856 {
		yyb2856 = yyj2856 > l
	} else {
		yyb2856 = r.CheckBreak()
	}
	if yyb2856 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj2856++
		if yyhl2856 {
			yyb2856 = yyj2856 > l
		} else {
			yyb2856 = r.CheckBreak()
		}
		if yyb2856 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2856-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2867 := z.EncBinary()
		_ = yym2867
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2868 := !z.EncBinary()
			yy2arr2868 := z.EncBasicHandle().StructToArray
			var yyq2868 [10]bool
			_, _, _ = yysep2868, yyq2868, yy2arr2868
			const yyr2868 bool = false
			yyq2868[0] = len(x.Capacity) != 0
			yyq2868[1] = len(x.Allocatable) != 0
			yyq2868[2] = x.Phase != ""
			yyq2868[3] = len(x.Conditions) != 0
			yyq2868[4] = len(x.Addresses) != 0
			yyq2868[5] = true
			yyq2868[6] = true
			yyq2868[7] = len(x.Images) != 0
			yyq2868[8] = len(x.VolumesInUse) != 0
			yyq2868[9] = len(x.VolumesAttached) != 0
			var yynn2868 int
			if yyr2868 || yy2arr2868 {
				r.EncodeArrayStart(10)
			} else {
				yynn2868 = 0
				for _, b := range yyq2868 {
					if b {
						yynn2868++
					}
				}
				r.EncodeMapStart(yynn2868)
				yynn2868 = 0
			}
			if yyr2868 || yy2arr2868 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2868[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2868[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2868 || yy2arr2868 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2868[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2868[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2868 || yy2arr2868 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2868[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2868[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2868 || yy2arr2868 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2868[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2873 := z.EncBinary()
						_ = yym2873
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2868[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2874 := z.EncBinary()
						_ = yym2874
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2868 || yy2arr2868 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2868[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2876 := z.EncBinary()
						_ = yym2876
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2868[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2877 := z.EncBinary()
						_ = yym2877
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2868 || yy2arr2868 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2868[5] {
					yy2879 := &x.DaemonEndpoints
					yy2879.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2868[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2880 := &x.DaemonEndpoints
					yy2880.CodecEncodeSelf(e)
				}
			}
			if yyr2868 || yy2arr2868 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2868[6] {
					yy2882 := &x.NodeInfo
					yy2882.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2868[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2883 := &x.NodeInfo
					yy2883.CodecEncodeSelf(e)
				}
			}
			if yyr2868 || yy2arr2868 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2868[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2885 := z.EncBinary()
						_ = yym2885
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2868[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2886 := z.EncBinary()
						_ = yym2886
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr2868 || yy2arr2868 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2868[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2888 := z.EncBinary()
						_ = yym2888
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2868[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2889 := z.EncBinary()
						_ = yym2889
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr2868 || yy2arr2868 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2868[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2891 := z.EncBinary()
						_ = yym2891
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2868[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2892 := z.EncBinary()
						_ = yym2892
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr2868 || yy2arr2868 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2893 := z.DecBinary()
	_ = yym2893
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2894 := r.ContainerType()
		if yyct2894 == codecSelferValueTypeMap1234 {
			yyl2894 := r.ReadMapStart()
			if yyl2894 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2894, d)
			}
		} else if yyct2894 == codecSelferValueTypeArray1234 {
			yyl2894 := r.ReadArrayStart()
			if yyl2894 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2894, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2895Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2895Slc
	var yyhl2895 bool = l >= 0
	for yyj2895 := 0; ; yyj2895++ {
		if yyhl2895 {
			if yyj2895 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2895Slc = r.DecodeBytes(yys2895Slc, true, true)
		yys2895 := string(yys2895Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2895 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2896 := &x.Capacity
				yyv2896.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2897 := &x.Allocatable
				yyv2897.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2899 := &x.Conditions
				yym2900 := z.DecBinary()
				_ = yym2900
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2899), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2901 := &x.Addresses
				yym2902 := z.DecBinary()
				_ = yym2902
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2901), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2903 := &x.DaemonEndpoints
				yyv2903.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2904 := &x.NodeInfo
				yyv2904.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv2905 := &x.Images
				yym2906 := z.DecBinary()
				_ = yym2906
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv2905), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv2907 := &x.VolumesInUse
				yym2908 := z.DecBinary()
				_ = yym2908
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv2907), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv2909 := &x.VolumesAttached
				yym2910 := z.DecBinary()
				_ = yym2910
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv2909), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2895)
		} // end switch yys2895
	} // end for yyj2895
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2911 int
	var yyb2911 bool
	var yyhl2911 bool = l >= 0
	yyj2911++
	if yyhl2911 {
		yyb2911 = yyj2911 > l
	} else {
		yyb2911 = r.CheckBreak()
	}
	if yyb2911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2912 := &x.Capacity
		yyv2912.CodecDecodeSelf(d)
	}
	yyj2911++
	if yyhl2911 {
		yyb2911 = yyj2911 > l
	} else {
		yyb2911 = r.CheckBreak()
	}
	if yyb2911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv2913 := &x.Allocatable
		yyv2913.CodecDecodeSelf(d)
	}
	yyj2911++
	if yyhl2911 {
		yyb2911 = yyj2911 > l
	} else {
		yyb2911 = r.CheckBreak()
	}
	if yyb2911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2911++
	if yyhl2911 {
		yyb2911 = yyj2911 > l
	} else {
		yyb2911 = r.CheckBreak()
	}
	if yyb2911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2915 := &x.Conditions
		yym2916 := z.DecBinary()
		_ = yym2916
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2915), d)
		}
	}
	yyj2911++
	if yyhl2911 {
		yyb2911 = yyj2911 > l
	} else {
		yyb2911 = r.CheckBreak()
	}
	if yyb2911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2917 := &x.Addresses
		yym2918 := z.DecBinary()
		_ = yym2918
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2917), d)
		}
	}
	yyj2911++
	if yyhl2911 {
		yyb2911 = yyj2911 > l
	} else {
		yyb2911 = r.CheckBreak()
	}
	if yyb2911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2919 := &x.DaemonEndpoints
		yyv2919.CodecDecodeSelf(d)
	}
	yyj2911++
	if yyhl2911 {
		yyb2911 = yyj2911 > l
	} else {
		yyb2911 = r.CheckBreak()
	}
	if yyb2911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2920 := &x.NodeInfo
		yyv2920.CodecDecodeSelf(d)
	}
	yyj2911++
	if yyhl2911 {
		yyb2911 = yyj2911 > l
	} else {
		yyb2911 = r.CheckBreak()
	}
	if yyb2911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv2921 := &x.Images
		yym2922 := z.DecBinary()
		_ = yym2922
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv2921), d)
		}
	}
	yyj2911++
	if yyhl2911 {
		yyb2911 = yyj2911 > l
	} else {
		yyb2911 = r.CheckBreak()
	}
	if yyb2911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv2923 := &x.VolumesInUse
		yym2924 := z.DecBinary()
		_ = yym2924
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv2923), d)
		}
	}
	yyj2911++
	if yyhl2911 {
		yyb2911 = yyj2911 > l
	} else {
		yyb2911 = r.CheckBreak()
	}
	if yyb2911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv2925 := &x.VolumesAttached
		yym2926 := z.DecBinary()
		_ = yym2926
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv2925), d)
		}
	}
	for {
		yyj2911++
		if yyhl2911 {
			yyb2911 = yyj2911 > l
		} else {
			yyb2911 = r.CheckBreak()
		}
		if yyb2911 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2911-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2927 := z.EncBinary()
	_ = yym2927
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2928 := z.DecBinary()
	_ = yym2928
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2929 := z.EncBinary()
		_ = yym2929
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2930 := !z.EncBinary()
			yy2arr2930 := z.EncBasicHandle().StructToArray
			var yyq2930 [2]bool
			_, _, _ = yysep2930, yyq2930, yy2arr2930
			const yyr2930 bool = false
			var yynn2930 int
			if yyr2930 || yy2arr2930 {
				r.EncodeArrayStart(2)
			} else {
				yynn2930 = 2
				for _, b := range yyq2930 {
					if b {
						yynn2930++
					}
				}
				r.EncodeMapStart(yynn2930)
				yynn2930 = 0
			}
			if yyr2930 || yy2arr2930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr2930 || yy2arr2930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2933 := z.EncBinary()
				_ = yym2933
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2934 := z.EncBinary()
				_ = yym2934
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr2930 || yy2arr2930 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2935 := z.DecBinary()
	_ = yym2935
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2936 := r.ContainerType()
		if yyct2936 == codecSelferValueTypeMap1234 {
			yyl2936 := r.ReadMapStart()
			if yyl2936 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2936, d)
			}
		} else if yyct2936 == codecSelferValueTypeArray1234 {
			yyl2936 := r.ReadArrayStart()
			if yyl2936 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2936, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2937Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2937Slc
	var yyhl2937 bool = l >= 0
	for yyj2937 := 0; ; yyj2937++ {
		if yyhl2937 {
			if yyj2937 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2937Slc = r.DecodeBytes(yys2937Slc, true, true)
		yys2937 := string(yys2937Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2937 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2937)
		} // end switch yys2937
	} // end for yyj2937
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2940 int
	var yyb2940 bool
	var yyhl2940 bool = l >= 0
	yyj2940++
	if yyhl2940 {
		yyb2940 = yyj2940 > l
	} else {
		yyb2940 = r.CheckBreak()
	}
	if yyb2940 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj2940++
	if yyhl2940 {
		yyb2940 = yyj2940 > l
	} else {
		yyb2940 = r.CheckBreak()
	}
	if yyb2940 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj2940++
		if yyhl2940 {
			yyb2940 = yyj2940 > l
		} else {
			yyb2940 = r.CheckBreak()
		}
		if yyb2940 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2940-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2943 := z.EncBinary()
		_ = yym2943
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2944 := !z.EncBinary()
			yy2arr2944 := z.EncBasicHandle().StructToArray
			var yyq2944 [1]bool
			_, _, _ = yysep2944, yyq2944, yy2arr2944
			const yyr2944 bool = false
			yyq2944[0] = len(x.PreferAvoidPods) != 0
			var yynn2944 int
			if yyr2944 || yy2arr2944 {
				r.EncodeArrayStart(1)
			} else {
				yynn2944 = 0
				for _, b := range yyq2944 {
					if b {
						yynn2944++
					}
				}
				r.EncodeMapStart(yynn2944)
				yynn2944 = 0
			}
			if yyr2944 || yy2arr2944 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2944[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym2946 := z.EncBinary()
						_ = yym2946
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2944[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym2947 := z.EncBinary()
						_ = yym2947
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr2944 || yy2arr2944 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2948 := z.DecBinary()
	_ = yym2948
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2949 := r.ContainerType()
		if yyct2949 == codecSelferValueTypeMap1234 {
			yyl2949 := r.ReadMapStart()
			if yyl2949 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2949, d)
			}
		} else if yyct2949 == codecSelferValueTypeArray1234 {
			yyl2949 := r.ReadArrayStart()
			if yyl2949 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2949, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2950Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2950Slc
	var yyhl2950 bool = l >= 0
	for yyj2950 := 0; ; yyj2950++ {
		if yyhl2950 {
			if yyj2950 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2950Slc = r.DecodeBytes(yys2950Slc, true, true)
		yys2950 := string(yys2950Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2950 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv2951 := &x.PreferAvoidPods
				yym2952 := z.DecBinary()
				_ = yym2952
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv2951), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2950)
		} // end switch yys2950
	} // end for yyj2950
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2953 int
	var yyb2953 bool
	var yyhl2953 bool = l >= 0
	yyj2953++
	if yyhl2953 {
		yyb2953 = yyj2953 > l
	} else {
		yyb2953 = r.CheckBreak()
	}
	if yyb2953 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv2954 := &x.PreferAvoidPods
		yym2955 := z.DecBinary()
		_ = yym2955
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv2954), d)
		}
	}
	for {
		yyj2953++
		if yyhl2953 {
			yyb2953 = yyj2953 > l
		} else {
			yyb2953 = r.CheckBreak()
		}
		if yyb2953 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2953-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2956 := z.EncBinary()
		_ = yym2956
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2957 := !z.EncBinary()
			yy2arr2957 := z.EncBasicHandle().StructToArray
			var yyq2957 [4]bool
			_, _, _ = yysep2957, yyq2957, yy2arr2957
			const yyr2957 bool = false
			yyq2957[1] = true
			yyq2957[2] = x.Reason != ""
			yyq2957[3] = x.Message != ""
			var yynn2957 int
			if yyr2957 || yy2arr2957 {
				r.EncodeArrayStart(4)
			} else {
				yynn2957 = 1
				for _, b := range yyq2957 {
					if b {
						yynn2957++
					}
				}
				r.EncodeMapStart(yynn2957)
				yynn2957 = 0
			}
			if yyr2957 || yy2arr2957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2959 := &x.PodSignature
				yy2959.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2960 := &x.PodSignature
				yy2960.CodecEncodeSelf(e)
			}
			if yyr2957 || yy2arr2957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2957[1] {
					yy2962 := &x.EvictionTime
					yym2963 := z.EncBinary()
					_ = yym2963
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2962) {
					} else if yym2963 {
						z.EncBinaryMarshal(yy2962)
					} else if !yym2963 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2962)
					} else {
						z.EncFallback(yy2962)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2957[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2964 := &x.EvictionTime
					yym2965 := z.EncBinary()
					_ = yym2965
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2964) {
					} else if yym2965 {
						z.EncBinaryMarshal(yy2964)
					} else if !yym2965 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2964)
					} else {
						z.EncFallback(yy2964)
					}
				}
			}
			if yyr2957 || yy2arr2957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2957[2] {
					yym2967 := z.EncBinary()
					_ = yym2967
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2957[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2968 := z.EncBinary()
					_ = yym2968
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2957 || yy2arr2957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2957[3] {
					yym2970 := z.EncBinary()
					_ = yym2970
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2957[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2971 := z.EncBinary()
					_ = yym2971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2957 || yy2arr2957 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2972 := z.DecBinary()
	_ = yym2972
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2973 := r.ContainerType()
		if yyct2973 == codecSelferValueTypeMap1234 {
			yyl2973 := r.ReadMapStart()
			if yyl2973 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2973, d)
			}
		} else if yyct2973 == codecSelferValueTypeArray1234 {
			yyl2973 := r.ReadArrayStart()
			if yyl2973 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2973, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2974Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2974Slc
	var yyhl2974 bool = l >= 0
	for yyj2974 := 0; ; yyj2974++ {
		if yyhl2974 {
			if yyj2974 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2974Slc = r.DecodeBytes(yys2974Slc, true, true)
		yys2974 := string(yys2974Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2974 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv2975 := &x.PodSignature
				yyv2975.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv2976 := &x.EvictionTime
				yym2977 := z.DecBinary()
				_ = yym2977
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2976) {
				} else if yym2977 {
					z.DecBinaryUnmarshal(yyv2976)
				} else if !yym2977 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2976)
				} else {
					z.DecFallback(yyv2976, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2974)
		} // end switch yys2974
	} // end for yyj2974
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2980 int
	var yyb2980 bool
	var yyhl2980 bool = l >= 0
	yyj2980++
	if yyhl2980 {
		yyb2980 = yyj2980 > l
	} else {
		yyb2980 = r.CheckBreak()
	}
	if yyb2980 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv2981 := &x.PodSignature
		yyv2981.CodecDecodeSelf(d)
	}
	yyj2980++
	if yyhl2980 {
		yyb2980 = yyj2980 > l
	} else {
		yyb2980 = r.CheckBreak()
	}
	if yyb2980 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv2982 := &x.EvictionTime
		yym2983 := z.DecBinary()
		_ = yym2983
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2982) {
		} else if yym2983 {
			z.DecBinaryUnmarshal(yyv2982)
		} else if !yym2983 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2982)
		} else {
			z.DecFallback(yyv2982, false)
		}
	}
	yyj2980++
	if yyhl2980 {
		yyb2980 = yyj2980 > l
	} else {
		yyb2980 = r.CheckBreak()
	}
	if yyb2980 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2980++
	if yyhl2980 {
		yyb2980 = yyj2980 > l
	} else {
		yyb2980 = r.CheckBreak()
	}
	if yyb2980 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2980++
		if yyhl2980 {
			yyb2980 = yyj2980 > l
		} else {
			yyb2980 = r.CheckBreak()
		}
		if yyb2980 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2980-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2986 := z.EncBinary()
		_ = yym2986
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2987 := !z.EncBinary()
			yy2arr2987 := z.EncBasicHandle().StructToArray
			var yyq2987 [1]bool
			_, _, _ = yysep2987, yyq2987, yy2arr2987
			const yyr2987 bool = false
			yyq2987[0] = x.PodController != nil
			var yynn2987 int
			if yyr2987 || yy2arr2987 {
				r.EncodeArrayStart(1)
			} else {
				yynn2987 = 0
				for _, b := range yyq2987 {
					if b {
						yynn2987++
					}
				}
				r.EncodeMapStart(yynn2987)
				yynn2987 = 0
			}
			if yyr2987 || yy2arr2987 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2987[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2987[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2987 || yy2arr2987 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2989 := z.DecBinary()
	_ = yym2989
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2990 := r.ContainerType()
		if yyct2990 == codecSelferValueTypeMap1234 {
			yyl2990 := r.ReadMapStart()
			if yyl2990 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2990, d)
			}
		} else if yyct2990 == codecSelferValueTypeArray1234 {
			yyl2990 := r.ReadArrayStart()
			if yyl2990 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2990, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2991Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2991Slc
	var yyhl2991 bool = l >= 0
	for yyj2991 := 0; ; yyj2991++ {
		if yyhl2991 {
			if yyj2991 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2991Slc = r.DecodeBytes(yys2991Slc, true, true)
		yys2991 := string(yys2991Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2991 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2991)
		} // end switch yys2991
	} // end for yyj2991
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2993 int
	var yyb2993 bool
	var yyhl2993 bool = l >= 0
	yyj2993++
	if yyhl2993 {
		yyb2993 = yyj2993 > l
	} else {
		yyb2993 = r.CheckBreak()
	}
	if yyb2993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj2993++
		if yyhl2993 {
			yyb2993 = yyj2993 > l
		} else {
			yyb2993 = r.CheckBreak()
		}
		if yyb2993 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2993-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2995 := z.EncBinary()
		_ = yym2995
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2996 := !z.EncBinary()
			yy2arr2996 := z.EncBasicHandle().StructToArray
			var yyq2996 [2]bool
			_, _, _ = yysep2996, yyq2996, yy2arr2996
			const yyr2996 bool = false
			yyq2996[1] = x.SizeBytes != 0
			var yynn2996 int
			if yyr2996 || yy2arr2996 {
				r.EncodeArrayStart(2)
			} else {
				yynn2996 = 1
				for _, b := range yyq2996 {
					if b {
						yynn2996++
					}
				}
				r.EncodeMapStart(yynn2996)
				yynn2996 = 0
			}
			if yyr2996 || yy2arr2996 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym2998 := z.EncBinary()
					_ = yym2998
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym2999 := z.EncBinary()
					_ = yym2999
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr2996 || yy2arr2996 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2996[1] {
					yym3001 := z.EncBinary()
					_ = yym3001
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2996[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3002 := z.EncBinary()
					_ = yym3002
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr2996 || yy2arr2996 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3003 := z.DecBinary()
	_ = yym3003
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3004 := r.ContainerType()
		if yyct3004 == codecSelferValueTypeMap1234 {
			yyl3004 := r.ReadMapStart()
			if yyl3004 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3004, d)
			}
		} else if yyct3004 == codecSelferValueTypeArray1234 {
			yyl3004 := r.ReadArrayStart()
			if yyl3004 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3004, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3005Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3005Slc
	var yyhl3005 bool = l >= 0
	for yyj3005 := 0; ; yyj3005++ {
		if yyhl3005 {
			if yyj3005 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3005Slc = r.DecodeBytes(yys3005Slc, true, true)
		yys3005 := string(yys3005Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3005 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3006 := &x.Names
				yym3007 := z.DecBinary()
				_ = yym3007
				if false {
				} else {
					z.F.DecSliceStringX(yyv3006, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3005)
		} // end switch yys3005
	} // end for yyj3005
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3009 int
	var yyb3009 bool
	var yyhl3009 bool = l >= 0
	yyj3009++
	if yyhl3009 {
		yyb3009 = yyj3009 > l
	} else {
		yyb3009 = r.CheckBreak()
	}
	if yyb3009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3010 := &x.Names
		yym3011 := z.DecBinary()
		_ = yym3011
		if false {
		} else {
			z.F.DecSliceStringX(yyv3010, false, d)
		}
	}
	yyj3009++
	if yyhl3009 {
		yyb3009 = yyj3009 > l
	} else {
		yyb3009 = r.CheckBreak()
	}
	if yyb3009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3009++
		if yyhl3009 {
			yyb3009 = yyj3009 > l
		} else {
			yyb3009 = r.CheckBreak()
		}
		if yyb3009 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3009-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3013 := z.EncBinary()
	_ = yym3013
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3014 := z.DecBinary()
	_ = yym3014
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3015 := z.EncBinary()
	_ = yym3015
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3016 := z.DecBinary()
	_ = yym3016
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3017 := z.EncBinary()
		_ = yym3017
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3018 := !z.EncBinary()
			yy2arr3018 := z.EncBasicHandle().StructToArray
			var yyq3018 [6]bool
			_, _, _ = yysep3018, yyq3018, yy2arr3018
			const yyr3018 bool = false
			yyq3018[2] = true
			yyq3018[3] = true
			yyq3018[4] = x.Reason != ""
			yyq3018[5] = x.Message != ""
			var yynn3018 int
			if yyr3018 || yy2arr3018 {
				r.EncodeArrayStart(6)
			} else {
				yynn3018 = 2
				for _, b := range yyq3018 {
					if b {
						yynn3018++
					}
				}
				r.EncodeMapStart(yynn3018)
				yynn3018 = 0
			}
			if yyr3018 || yy2arr3018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3018 || yy2arr3018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3018 || yy2arr3018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3018[2] {
					yy3022 := &x.LastHeartbeatTime
					yym3023 := z.EncBinary()
					_ = yym3023
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3022) {
					} else if yym3023 {
						z.EncBinaryMarshal(yy3022)
					} else if !yym3023 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3022)
					} else {
						z.EncFallback(yy3022)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3018[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3024 := &x.LastHeartbeatTime
					yym3025 := z.EncBinary()
					_ = yym3025
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3024) {
					} else if yym3025 {
						z.EncBinaryMarshal(yy3024)
					} else if !yym3025 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3024)
					} else {
						z.EncFallback(yy3024)
					}
				}
			}
			if yyr3018 || yy2arr3018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3018[3] {
					yy3027 := &x.LastTransitionTime
					yym3028 := z.EncBinary()
					_ = yym3028
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3027) {
					} else if yym3028 {
						z.EncBinaryMarshal(yy3027)
					} else if !yym3028 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3027)
					} else {
						z.EncFallback(yy3027)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3018[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3029 := &x.LastTransitionTime
					yym3030 := z.EncBinary()
					_ = yym3030
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3029) {
					} else if yym3030 {
						z.EncBinaryMarshal(yy3029)
					} else if !yym3030 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3029)
					} else {
						z.EncFallback(yy3029)
					}
				}
			}
			if yyr3018 || yy2arr3018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3018[4] {
					yym3032 := z.EncBinary()
					_ = yym3032
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3018[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3033 := z.EncBinary()
					_ = yym3033
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3018 || yy2arr3018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3018[5] {
					yym3035 := z.EncBinary()
					_ = yym3035
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3018[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3036 := z.EncBinary()
					_ = yym3036
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3018 || yy2arr3018 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3037 := z.DecBinary()
	_ = yym3037
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3038 := r.ContainerType()
		if yyct3038 == codecSelferValueTypeMap1234 {
			yyl3038 := r.ReadMapStart()
			if yyl3038 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3038, d)
			}
		} else if yyct3038 == codecSelferValueTypeArray1234 {
			yyl3038 := r.ReadArrayStart()
			if yyl3038 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3038, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3039Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3039Slc
	var yyhl3039 bool = l >= 0
	for yyj3039 := 0; ; yyj3039++ {
		if yyhl3039 {
			if yyj3039 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3039Slc = r.DecodeBytes(yys3039Slc, true, true)
		yys3039 := string(yys3039Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3039 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3042 := &x.LastHeartbeatTime
				yym3043 := z.DecBinary()
				_ = yym3043
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3042) {
				} else if yym3043 {
					z.DecBinaryUnmarshal(yyv3042)
				} else if !yym3043 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3042)
				} else {
					z.DecFallback(yyv3042, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3044 := &x.LastTransitionTime
				yym3045 := z.DecBinary()
				_ = yym3045
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3044) {
				} else if yym3045 {
					z.DecBinaryUnmarshal(yyv3044)
				} else if !yym3045 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3044)
				} else {
					z.DecFallback(yyv3044, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3039)
		} // end switch yys3039
	} // end for yyj3039
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3048 int
	var yyb3048 bool
	var yyhl3048 bool = l >= 0
	yyj3048++
	if yyhl3048 {
		yyb3048 = yyj3048 > l
	} else {
		yyb3048 = r.CheckBreak()
	}
	if yyb3048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3048++
	if yyhl3048 {
		yyb3048 = yyj3048 > l
	} else {
		yyb3048 = r.CheckBreak()
	}
	if yyb3048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3048++
	if yyhl3048 {
		yyb3048 = yyj3048 > l
	} else {
		yyb3048 = r.CheckBreak()
	}
	if yyb3048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3051 := &x.LastHeartbeatTime
		yym3052 := z.DecBinary()
		_ = yym3052
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3051) {
		} else if yym3052 {
			z.DecBinaryUnmarshal(yyv3051)
		} else if !yym3052 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3051)
		} else {
			z.DecFallback(yyv3051, false)
		}
	}
	yyj3048++
	if yyhl3048 {
		yyb3048 = yyj3048 > l
	} else {
		yyb3048 = r.CheckBreak()
	}
	if yyb3048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3053 := &x.LastTransitionTime
		yym3054 := z.DecBinary()
		_ = yym3054
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3053) {
		} else if yym3054 {
			z.DecBinaryUnmarshal(yyv3053)
		} else if !yym3054 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3053)
		} else {
			z.DecFallback(yyv3053, false)
		}
	}
	yyj3048++
	if yyhl3048 {
		yyb3048 = yyj3048 > l
	} else {
		yyb3048 = r.CheckBreak()
	}
	if yyb3048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3048++
	if yyhl3048 {
		yyb3048 = yyj3048 > l
	} else {
		yyb3048 = r.CheckBreak()
	}
	if yyb3048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3048++
		if yyhl3048 {
			yyb3048 = yyj3048 > l
		} else {
			yyb3048 = r.CheckBreak()
		}
		if yyb3048 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3048-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3057 := z.EncBinary()
	_ = yym3057
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3058 := z.DecBinary()
	_ = yym3058
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3059 := z.EncBinary()
		_ = yym3059
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3060 := !z.EncBinary()
			yy2arr3060 := z.EncBasicHandle().StructToArray
			var yyq3060 [2]bool
			_, _, _ = yysep3060, yyq3060, yy2arr3060
			const yyr3060 bool = false
			var yynn3060 int
			if yyr3060 || yy2arr3060 {
				r.EncodeArrayStart(2)
			} else {
				yynn3060 = 2
				for _, b := range yyq3060 {
					if b {
						yynn3060++
					}
				}
				r.EncodeMapStart(yynn3060)
				yynn3060 = 0
			}
			if yyr3060 || yy2arr3060 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3060 || yy2arr3060 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3063 := z.EncBinary()
				_ = yym3063
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3064 := z.EncBinary()
				_ = yym3064
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3060 || yy2arr3060 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3065 := z.DecBinary()
	_ = yym3065
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3066 := r.ContainerType()
		if yyct3066 == codecSelferValueTypeMap1234 {
			yyl3066 := r.ReadMapStart()
			if yyl3066 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3066, d)
			}
		} else if yyct3066 == codecSelferValueTypeArray1234 {
			yyl3066 := r.ReadArrayStart()
			if yyl3066 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3066, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3067Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3067Slc
	var yyhl3067 bool = l >= 0
	for yyj3067 := 0; ; yyj3067++ {
		if yyhl3067 {
			if yyj3067 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3067Slc = r.DecodeBytes(yys3067Slc, true, true)
		yys3067 := string(yys3067Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3067 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3067)
		} // end switch yys3067
	} // end for yyj3067
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3070 int
	var yyb3070 bool
	var yyhl3070 bool = l >= 0
	yyj3070++
	if yyhl3070 {
		yyb3070 = yyj3070 > l
	} else {
		yyb3070 = r.CheckBreak()
	}
	if yyb3070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3070++
	if yyhl3070 {
		yyb3070 = yyj3070 > l
	} else {
		yyb3070 = r.CheckBreak()
	}
	if yyb3070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3070++
		if yyhl3070 {
			yyb3070 = yyj3070 > l
		} else {
			yyb3070 = r.CheckBreak()
		}
		if yyb3070 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3070-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3073 := z.EncBinary()
		_ = yym3073
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3074 := !z.EncBinary()
			yy2arr3074 := z.EncBasicHandle().StructToArray
			var yyq3074 [1]bool
			_, _, _ = yysep3074, yyq3074, yy2arr3074
			const yyr3074 bool = false
			yyq3074[0] = len(x.Capacity) != 0
			var yynn3074 int
			if yyr3074 || yy2arr3074 {
				r.EncodeArrayStart(1)
			} else {
				yynn3074 = 0
				for _, b := range yyq3074 {
					if b {
						yynn3074++
					}
				}
				r.EncodeMapStart(yynn3074)
				yynn3074 = 0
			}
			if yyr3074 || yy2arr3074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3074[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3074[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3074 || yy2arr3074 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3076 := z.DecBinary()
	_ = yym3076
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3077 := r.ContainerType()
		if yyct3077 == codecSelferValueTypeMap1234 {
			yyl3077 := r.ReadMapStart()
			if yyl3077 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3077, d)
			}
		} else if yyct3077 == codecSelferValueTypeArray1234 {
			yyl3077 := r.ReadArrayStart()
			if yyl3077 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3077, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3078Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3078Slc
	var yyhl3078 bool = l >= 0
	for yyj3078 := 0; ; yyj3078++ {
		if yyhl3078 {
			if yyj3078 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3078Slc = r.DecodeBytes(yys3078Slc, true, true)
		yys3078 := string(yys3078Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3078 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3079 := &x.Capacity
				yyv3079.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3078)
		} // end switch yys3078
	} // end for yyj3078
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3080 int
	var yyb3080 bool
	var yyhl3080 bool = l >= 0
	yyj3080++
	if yyhl3080 {
		yyb3080 = yyj3080 > l
	} else {
		yyb3080 = r.CheckBreak()
	}
	if yyb3080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3081 := &x.Capacity
		yyv3081.CodecDecodeSelf(d)
	}
	for {
		yyj3080++
		if yyhl3080 {
			yyb3080 = yyj3080 > l
		} else {
			yyb3080 = r.CheckBreak()
		}
		if yyb3080 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3080-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3082 := z.EncBinary()
	_ = yym3082
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3083 := z.DecBinary()
	_ = yym3083
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3084 := z.EncBinary()
		_ = yym3084
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3085 := z.DecBinary()
	_ = yym3085
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3086 := z.EncBinary()
		_ = yym3086
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3087 := !z.EncBinary()
			yy2arr3087 := z.EncBasicHandle().StructToArray
			var yyq3087 [5]bool
			_, _, _ = yysep3087, yyq3087, yy2arr3087
			const yyr3087 bool = false
			yyq3087[0] = x.Kind != ""
			yyq3087[1] = x.APIVersion != ""
			yyq3087[2] = true
			yyq3087[3] = true
			yyq3087[4] = true
			var yynn3087 int
			if yyr3087 || yy2arr3087 {
				r.EncodeArrayStart(5)
			} else {
				yynn3087 = 0
				for _, b := range yyq3087 {
					if b {
						yynn3087++
					}
				}
				r.EncodeMapStart(yynn3087)
				yynn3087 = 0
			}
			if yyr3087 || yy2arr3087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3087[0] {
					yym3089 := z.EncBinary()
					_ = yym3089
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3087[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3090 := z.EncBinary()
					_ = yym3090
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3087 || yy2arr3087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3087[1] {
					yym3092 := z.EncBinary()
					_ = yym3092
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3087[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3093 := z.EncBinary()
					_ = yym3093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3087 || yy2arr3087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3087[2] {
					yy3095 := &x.ObjectMeta
					yy3095.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3087[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3096 := &x.ObjectMeta
					yy3096.CodecEncodeSelf(e)
				}
			}
			if yyr3087 || yy2arr3087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3087[3] {
					yy3098 := &x.Spec
					yy3098.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3087[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3099 := &x.Spec
					yy3099.CodecEncodeSelf(e)
				}
			}
			if yyr3087 || yy2arr3087 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3087[4] {
					yy3101 := &x.Status
					yy3101.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3087[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3102 := &x.Status
					yy3102.CodecEncodeSelf(e)
				}
			}
			if yyr3087 || yy2arr3087 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3103 := z.DecBinary()
	_ = yym3103
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3104 := r.ContainerType()
		if yyct3104 == codecSelferValueTypeMap1234 {
			yyl3104 := r.ReadMapStart()
			if yyl3104 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3104, d)
			}
		} else if yyct3104 == codecSelferValueTypeArray1234 {
			yyl3104 := r.ReadArrayStart()
			if yyl3104 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3104, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3105Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3105Slc
	var yyhl3105 bool = l >= 0
	for yyj3105 := 0; ; yyj3105++ {
		if yyhl3105 {
			if yyj3105 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3105Slc = r.DecodeBytes(yys3105Slc, true, true)
		yys3105 := string(yys3105Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3105 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3108 := &x.ObjectMeta
				yyv3108.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3109 := &x.Spec
				yyv3109.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3110 := &x.Status
				yyv3110.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3105)
		} // end switch yys3105
	} // end for yyj3105
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3111 int
	var yyb3111 bool
	var yyhl3111 bool = l >= 0
	yyj3111++
	if yyhl3111 {
		yyb3111 = yyj3111 > l
	} else {
		yyb3111 = r.CheckBreak()
	}
	if yyb3111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3111++
	if yyhl3111 {
		yyb3111 = yyj3111 > l
	} else {
		yyb3111 = r.CheckBreak()
	}
	if yyb3111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3111++
	if yyhl3111 {
		yyb3111 = yyj3111 > l
	} else {
		yyb3111 = r.CheckBreak()
	}
	if yyb3111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3114 := &x.ObjectMeta
		yyv3114.CodecDecodeSelf(d)
	}
	yyj3111++
	if yyhl3111 {
		yyb3111 = yyj3111 > l
	} else {
		yyb3111 = r.CheckBreak()
	}
	if yyb3111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3115 := &x.Spec
		yyv3115.CodecDecodeSelf(d)
	}
	yyj3111++
	if yyhl3111 {
		yyb3111 = yyj3111 > l
	} else {
		yyb3111 = r.CheckBreak()
	}
	if yyb3111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3116 := &x.Status
		yyv3116.CodecDecodeSelf(d)
	}
	for {
		yyj3111++
		if yyhl3111 {
			yyb3111 = yyj3111 > l
		} else {
			yyb3111 = r.CheckBreak()
		}
		if yyb3111 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3111-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3117 := z.EncBinary()
		_ = yym3117
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3118 := !z.EncBinary()
			yy2arr3118 := z.EncBasicHandle().StructToArray
			var yyq3118 [4]bool
			_, _, _ = yysep3118, yyq3118, yy2arr3118
			const yyr3118 bool = false
			yyq3118[0] = x.Kind != ""
			yyq3118[1] = x.APIVersion != ""
			yyq3118[2] = true
			var yynn3118 int
			if yyr3118 || yy2arr3118 {
				r.EncodeArrayStart(4)
			} else {
				yynn3118 = 1
				for _, b := range yyq3118 {
					if b {
						yynn3118++
					}
				}
				r.EncodeMapStart(yynn3118)
				yynn3118 = 0
			}
			if yyr3118 || yy2arr3118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3118[0] {
					yym3120 := z.EncBinary()
					_ = yym3120
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3118[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3121 := z.EncBinary()
					_ = yym3121
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3118 || yy2arr3118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3118[1] {
					yym3123 := z.EncBinary()
					_ = yym3123
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3118[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3124 := z.EncBinary()
					_ = yym3124
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3118 || yy2arr3118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3118[2] {
					yy3126 := &x.ListMeta
					yym3127 := z.EncBinary()
					_ = yym3127
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3126) {
					} else {
						z.EncFallback(yy3126)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3118[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3128 := &x.ListMeta
					yym3129 := z.EncBinary()
					_ = yym3129
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3128) {
					} else {
						z.EncFallback(yy3128)
					}
				}
			}
			if yyr3118 || yy2arr3118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3131 := z.EncBinary()
					_ = yym3131
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3132 := z.EncBinary()
					_ = yym3132
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3118 || yy2arr3118 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3133 := z.DecBinary()
	_ = yym3133
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3134 := r.ContainerType()
		if yyct3134 == codecSelferValueTypeMap1234 {
			yyl3134 := r.ReadMapStart()
			if yyl3134 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3134, d)
			}
		} else if yyct3134 == codecSelferValueTypeArray1234 {
			yyl3134 := r.ReadArrayStart()
			if yyl3134 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3134, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3135Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3135Slc
	var yyhl3135 bool = l >= 0
	for yyj3135 := 0; ; yyj3135++ {
		if yyhl3135 {
			if yyj3135 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3135Slc = r.DecodeBytes(yys3135Slc, true, true)
		yys3135 := string(yys3135Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3135 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3138 := &x.ListMeta
				yym3139 := z.DecBinary()
				_ = yym3139
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3138) {
				} else {
					z.DecFallback(yyv3138, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3140 := &x.Items
				yym3141 := z.DecBinary()
				_ = yym3141
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3140), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3135)
		} // end switch yys3135
	} // end for yyj3135
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3142 int
	var yyb3142 bool
	var yyhl3142 bool = l >= 0
	yyj3142++
	if yyhl3142 {
		yyb3142 = yyj3142 > l
	} else {
		yyb3142 = r.CheckBreak()
	}
	if yyb3142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3142++
	if yyhl3142 {
		yyb3142 = yyj3142 > l
	} else {
		yyb3142 = r.CheckBreak()
	}
	if yyb3142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3142++
	if yyhl3142 {
		yyb3142 = yyj3142 > l
	} else {
		yyb3142 = r.CheckBreak()
	}
	if yyb3142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3145 := &x.ListMeta
		yym3146 := z.DecBinary()
		_ = yym3146
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3145) {
		} else {
			z.DecFallback(yyv3145, false)
		}
	}
	yyj3142++
	if yyhl3142 {
		yyb3142 = yyj3142 > l
	} else {
		yyb3142 = r.CheckBreak()
	}
	if yyb3142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3147 := &x.Items
		yym3148 := z.DecBinary()
		_ = yym3148
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3147), d)
		}
	}
	for {
		yyj3142++
		if yyhl3142 {
			yyb3142 = yyj3142 > l
		} else {
			yyb3142 = r.CheckBreak()
		}
		if yyb3142 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3142-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3149 := z.EncBinary()
		_ = yym3149
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3150 := !z.EncBinary()
			yy2arr3150 := z.EncBasicHandle().StructToArray
			var yyq3150 [1]bool
			_, _, _ = yysep3150, yyq3150, yy2arr3150
			const yyr3150 bool = false
			var yynn3150 int
			if yyr3150 || yy2arr3150 {
				r.EncodeArrayStart(1)
			} else {
				yynn3150 = 1
				for _, b := range yyq3150 {
					if b {
						yynn3150++
					}
				}
				r.EncodeMapStart(yynn3150)
				yynn3150 = 0
			}
			if yyr3150 || yy2arr3150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3152 := z.EncBinary()
					_ = yym3152
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3153 := z.EncBinary()
					_ = yym3153
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr3150 || yy2arr3150 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3154 := z.DecBinary()
	_ = yym3154
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3155 := r.ContainerType()
		if yyct3155 == codecSelferValueTypeMap1234 {
			yyl3155 := r.ReadMapStart()
			if yyl3155 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3155, d)
			}
		} else if yyct3155 == codecSelferValueTypeArray1234 {
			yyl3155 := r.ReadArrayStart()
			if yyl3155 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3155, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3156Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3156Slc
	var yyhl3156 bool = l >= 0
	for yyj3156 := 0; ; yyj3156++ {
		if yyhl3156 {
			if yyj3156 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3156Slc = r.DecodeBytes(yys3156Slc, true, true)
		yys3156 := string(yys3156Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3156 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3157 := &x.Finalizers
				yym3158 := z.DecBinary()
				_ = yym3158
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3157), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3156)
		} // end switch yys3156
	} // end for yyj3156
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3159 int
	var yyb3159 bool
	var yyhl3159 bool = l >= 0
	yyj3159++
	if yyhl3159 {
		yyb3159 = yyj3159 > l
	} else {
		yyb3159 = r.CheckBreak()
	}
	if yyb3159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3160 := &x.Finalizers
		yym3161 := z.DecBinary()
		_ = yym3161
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3160), d)
		}
	}
	for {
		yyj3159++
		if yyhl3159 {
			yyb3159 = yyj3159 > l
		} else {
			yyb3159 = r.CheckBreak()
		}
		if yyb3159 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3159-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3162 := z.EncBinary()
	_ = yym3162
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3163 := z.DecBinary()
	_ = yym3163
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3164 := z.EncBinary()
		_ = yym3164
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3165 := !z.EncBinary()
			yy2arr3165 := z.EncBasicHandle().StructToArray
			var yyq3165 [1]bool
			_, _, _ = yysep3165, yyq3165, yy2arr3165
			const yyr3165 bool = false
			yyq3165[0] = x.Phase != ""
			var yynn3165 int
			if yyr3165 || yy2arr3165 {
				r.EncodeArrayStart(1)
			} else {
				yynn3165 = 0
				for _, b := range yyq3165 {
					if b {
						yynn3165++
					}
				}
				r.EncodeMapStart(yynn3165)
				yynn3165 = 0
			}
			if yyr3165 || yy2arr3165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3165[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3165[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3165 || yy2arr3165 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3167 := z.DecBinary()
	_ = yym3167
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3168 := r.ContainerType()
		if yyct3168 == codecSelferValueTypeMap1234 {
			yyl3168 := r.ReadMapStart()
			if yyl3168 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3168, d)
			}
		} else if yyct3168 == codecSelferValueTypeArray1234 {
			yyl3168 := r.ReadArrayStart()
			if yyl3168 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3168, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3169Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3169Slc
	var yyhl3169 bool = l >= 0
	for yyj3169 := 0; ; yyj3169++ {
		if yyhl3169 {
			if yyj3169 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3169Slc = r.DecodeBytes(yys3169Slc, true, true)
		yys3169 := string(yys3169Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3169 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3169)
		} // end switch yys3169
	} // end for yyj3169
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3171 int
	var yyb3171 bool
	var yyhl3171 bool = l >= 0
	yyj3171++
	if yyhl3171 {
		yyb3171 = yyj3171 > l
	} else {
		yyb3171 = r.CheckBreak()
	}
	if yyb3171 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3171++
		if yyhl3171 {
			yyb3171 = yyj3171 > l
		} else {
			yyb3171 = r.CheckBreak()
		}
		if yyb3171 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3171-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3173 := z.EncBinary()
	_ = yym3173
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3174 := z.DecBinary()
	_ = yym3174
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3175 := z.EncBinary()
		_ = yym3175
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3176 := !z.EncBinary()
			yy2arr3176 := z.EncBasicHandle().StructToArray
			var yyq3176 [5]bool
			_, _, _ = yysep3176, yyq3176, yy2arr3176
			const yyr3176 bool = false
			yyq3176[0] = x.Kind != ""
			yyq3176[1] = x.APIVersion != ""
			yyq3176[2] = true
			yyq3176[3] = true
			yyq3176[4] = true
			var yynn3176 int
			if yyr3176 || yy2arr3176 {
				r.EncodeArrayStart(5)
			} else {
				yynn3176 = 0
				for _, b := range yyq3176 {
					if b {
						yynn3176++
					}
				}
				r.EncodeMapStart(yynn3176)
				yynn3176 = 0
			}
			if yyr3176 || yy2arr3176 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3176[0] {
					yym3178 := z.EncBinary()
					_ = yym3178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3176[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3179 := z.EncBinary()
					_ = yym3179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3176 || yy2arr3176 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3176[1] {
					yym3181 := z.EncBinary()
					_ = yym3181
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3176[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3182 := z.EncBinary()
					_ = yym3182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3176 || yy2arr3176 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3176[2] {
					yy3184 := &x.ObjectMeta
					yy3184.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3176[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3185 := &x.ObjectMeta
					yy3185.CodecEncodeSelf(e)
				}
			}
			if yyr3176 || yy2arr3176 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3176[3] {
					yy3187 := &x.Spec
					yy3187.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3176[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3188 := &x.Spec
					yy3188.CodecEncodeSelf(e)
				}
			}
			if yyr3176 || yy2arr3176 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3176[4] {
					yy3190 := &x.Status
					yy3190.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3176[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3191 := &x.Status
					yy3191.CodecEncodeSelf(e)
				}
			}
			if yyr3176 || yy2arr3176 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3192 := z.DecBinary()
	_ = yym3192
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3193 := r.ContainerType()
		if yyct3193 == codecSelferValueTypeMap1234 {
			yyl3193 := r.ReadMapStart()
			if yyl3193 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3193, d)
			}
		} else if yyct3193 == codecSelferValueTypeArray1234 {
			yyl3193 := r.ReadArrayStart()
			if yyl3193 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3193, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3194Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3194Slc
	var yyhl3194 bool = l >= 0
	for yyj3194 := 0; ; yyj3194++ {
		if yyhl3194 {
			if yyj3194 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3194Slc = r.DecodeBytes(yys3194Slc, true, true)
		yys3194 := string(yys3194Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3194 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3197 := &x.ObjectMeta
				yyv3197.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3198 := &x.Spec
				yyv3198.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3199 := &x.Status
				yyv3199.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3194)
		} // end switch yys3194
	} // end for yyj3194
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3200 int
	var yyb3200 bool
	var yyhl3200 bool = l >= 0
	yyj3200++
	if yyhl3200 {
		yyb3200 = yyj3200 > l
	} else {
		yyb3200 = r.CheckBreak()
	}
	if yyb3200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3200++
	if yyhl3200 {
		yyb3200 = yyj3200 > l
	} else {
		yyb3200 = r.CheckBreak()
	}
	if yyb3200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3200++
	if yyhl3200 {
		yyb3200 = yyj3200 > l
	} else {
		yyb3200 = r.CheckBreak()
	}
	if yyb3200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3203 := &x.ObjectMeta
		yyv3203.CodecDecodeSelf(d)
	}
	yyj3200++
	if yyhl3200 {
		yyb3200 = yyj3200 > l
	} else {
		yyb3200 = r.CheckBreak()
	}
	if yyb3200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3204 := &x.Spec
		yyv3204.CodecDecodeSelf(d)
	}
	yyj3200++
	if yyhl3200 {
		yyb3200 = yyj3200 > l
	} else {
		yyb3200 = r.CheckBreak()
	}
	if yyb3200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3205 := &x.Status
		yyv3205.CodecDecodeSelf(d)
	}
	for {
		yyj3200++
		if yyhl3200 {
			yyb3200 = yyj3200 > l
		} else {
			yyb3200 = r.CheckBreak()
		}
		if yyb3200 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3200-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3206 := z.EncBinary()
		_ = yym3206
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3207 := !z.EncBinary()
			yy2arr3207 := z.EncBasicHandle().StructToArray
			var yyq3207 [4]bool
			_, _, _ = yysep3207, yyq3207, yy2arr3207
			const yyr3207 bool = false
			yyq3207[0] = x.Kind != ""
			yyq3207[1] = x.APIVersion != ""
			yyq3207[2] = true
			var yynn3207 int
			if yyr3207 || yy2arr3207 {
				r.EncodeArrayStart(4)
			} else {
				yynn3207 = 1
				for _, b := range yyq3207 {
					if b {
						yynn3207++
					}
				}
				r.EncodeMapStart(yynn3207)
				yynn3207 = 0
			}
			if yyr3207 || yy2arr3207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3207[0] {
					yym3209 := z.EncBinary()
					_ = yym3209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3207[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3210 := z.EncBinary()
					_ = yym3210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3207 || yy2arr3207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3207[1] {
					yym3212 := z.EncBinary()
					_ = yym3212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3207[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3213 := z.EncBinary()
					_ = yym3213
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3207 || yy2arr3207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3207[2] {
					yy3215 := &x.ListMeta
					yym3216 := z.EncBinary()
					_ = yym3216
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3215) {
					} else {
						z.EncFallback(yy3215)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3207[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3217 := &x.ListMeta
					yym3218 := z.EncBinary()
					_ = yym3218
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3217) {
					} else {
						z.EncFallback(yy3217)
					}
				}
			}
			if yyr3207 || yy2arr3207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3220 := z.EncBinary()
					_ = yym3220
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3221 := z.EncBinary()
					_ = yym3221
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3207 || yy2arr3207 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3222 := z.DecBinary()
	_ = yym3222
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3223 := r.ContainerType()
		if yyct3223 == codecSelferValueTypeMap1234 {
			yyl3223 := r.ReadMapStart()
			if yyl3223 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3223, d)
			}
		} else if yyct3223 == codecSelferValueTypeArray1234 {
			yyl3223 := r.ReadArrayStart()
			if yyl3223 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3223, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3224Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3224Slc
	var yyhl3224 bool = l >= 0
	for yyj3224 := 0; ; yyj3224++ {
		if yyhl3224 {
			if yyj3224 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3224Slc = r.DecodeBytes(yys3224Slc, true, true)
		yys3224 := string(yys3224Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3224 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3227 := &x.ListMeta
				yym3228 := z.DecBinary()
				_ = yym3228
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3227) {
				} else {
					z.DecFallback(yyv3227, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3229 := &x.Items
				yym3230 := z.DecBinary()
				_ = yym3230
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3229), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3224)
		} // end switch yys3224
	} // end for yyj3224
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3231 int
	var yyb3231 bool
	var yyhl3231 bool = l >= 0
	yyj3231++
	if yyhl3231 {
		yyb3231 = yyj3231 > l
	} else {
		yyb3231 = r.CheckBreak()
	}
	if yyb3231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3231++
	if yyhl3231 {
		yyb3231 = yyj3231 > l
	} else {
		yyb3231 = r.CheckBreak()
	}
	if yyb3231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3231++
	if yyhl3231 {
		yyb3231 = yyj3231 > l
	} else {
		yyb3231 = r.CheckBreak()
	}
	if yyb3231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3234 := &x.ListMeta
		yym3235 := z.DecBinary()
		_ = yym3235
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3234) {
		} else {
			z.DecFallback(yyv3234, false)
		}
	}
	yyj3231++
	if yyhl3231 {
		yyb3231 = yyj3231 > l
	} else {
		yyb3231 = r.CheckBreak()
	}
	if yyb3231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3236 := &x.Items
		yym3237 := z.DecBinary()
		_ = yym3237
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3236), d)
		}
	}
	for {
		yyj3231++
		if yyhl3231 {
			yyb3231 = yyj3231 > l
		} else {
			yyb3231 = r.CheckBreak()
		}
		if yyb3231 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3231-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3238 := z.EncBinary()
		_ = yym3238
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3239 := !z.EncBinary()
			yy2arr3239 := z.EncBasicHandle().StructToArray
			var yyq3239 [4]bool
			_, _, _ = yysep3239, yyq3239, yy2arr3239
			const yyr3239 bool = false
			yyq3239[0] = x.Kind != ""
			yyq3239[1] = x.APIVersion != ""
			yyq3239[2] = true
			var yynn3239 int
			if yyr3239 || yy2arr3239 {
				r.EncodeArrayStart(4)
			} else {
				yynn3239 = 1
				for _, b := range yyq3239 {
					if b {
						yynn3239++
					}
				}
				r.EncodeMapStart(yynn3239)
				yynn3239 = 0
			}
			if yyr3239 || yy2arr3239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3239[0] {
					yym3241 := z.EncBinary()
					_ = yym3241
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3239[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3242 := z.EncBinary()
					_ = yym3242
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3239 || yy2arr3239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3239[1] {
					yym3244 := z.EncBinary()
					_ = yym3244
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3239[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3245 := z.EncBinary()
					_ = yym3245
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3239 || yy2arr3239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3239[2] {
					yy3247 := &x.ObjectMeta
					yy3247.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3239[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3248 := &x.ObjectMeta
					yy3248.CodecEncodeSelf(e)
				}
			}
			if yyr3239 || yy2arr3239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3250 := &x.Target
				yy3250.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3251 := &x.Target
				yy3251.CodecEncodeSelf(e)
			}
			if yyr3239 || yy2arr3239 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3252 := z.DecBinary()
	_ = yym3252
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3253 := r.ContainerType()
		if yyct3253 == codecSelferValueTypeMap1234 {
			yyl3253 := r.ReadMapStart()
			if yyl3253 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3253, d)
			}
		} else if yyct3253 == codecSelferValueTypeArray1234 {
			yyl3253 := r.ReadArrayStart()
			if yyl3253 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3253, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3254Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3254Slc
	var yyhl3254 bool = l >= 0
	for yyj3254 := 0; ; yyj3254++ {
		if yyhl3254 {
			if yyj3254 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3254Slc = r.DecodeBytes(yys3254Slc, true, true)
		yys3254 := string(yys3254Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3254 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3257 := &x.ObjectMeta
				yyv3257.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3258 := &x.Target
				yyv3258.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3254)
		} // end switch yys3254
	} // end for yyj3254
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3259 int
	var yyb3259 bool
	var yyhl3259 bool = l >= 0
	yyj3259++
	if yyhl3259 {
		yyb3259 = yyj3259 > l
	} else {
		yyb3259 = r.CheckBreak()
	}
	if yyb3259 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3259++
	if yyhl3259 {
		yyb3259 = yyj3259 > l
	} else {
		yyb3259 = r.CheckBreak()
	}
	if yyb3259 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3259++
	if yyhl3259 {
		yyb3259 = yyj3259 > l
	} else {
		yyb3259 = r.CheckBreak()
	}
	if yyb3259 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3262 := &x.ObjectMeta
		yyv3262.CodecDecodeSelf(d)
	}
	yyj3259++
	if yyhl3259 {
		yyb3259 = yyj3259 > l
	} else {
		yyb3259 = r.CheckBreak()
	}
	if yyb3259 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3263 := &x.Target
		yyv3263.CodecDecodeSelf(d)
	}
	for {
		yyj3259++
		if yyhl3259 {
			yyb3259 = yyj3259 > l
		} else {
			yyb3259 = r.CheckBreak()
		}
		if yyb3259 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3259-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3264 := z.EncBinary()
		_ = yym3264
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3265 := !z.EncBinary()
			yy2arr3265 := z.EncBasicHandle().StructToArray
			var yyq3265 [1]bool
			_, _, _ = yysep3265, yyq3265, yy2arr3265
			const yyr3265 bool = false
			yyq3265[0] = x.UID != nil
			var yynn3265 int
			if yyr3265 || yy2arr3265 {
				r.EncodeArrayStart(1)
			} else {
				yynn3265 = 0
				for _, b := range yyq3265 {
					if b {
						yynn3265++
					}
				}
				r.EncodeMapStart(yynn3265)
				yynn3265 = 0
			}
			if yyr3265 || yy2arr3265 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3265[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3267 := *x.UID
						yym3268 := z.EncBinary()
						_ = yym3268
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3267) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3267))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3265[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3269 := *x.UID
						yym3270 := z.EncBinary()
						_ = yym3270
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3269) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3269))
						}
					}
				}
			}
			if yyr3265 || yy2arr3265 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3271 := z.DecBinary()
	_ = yym3271
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3272 := r.ContainerType()
		if yyct3272 == codecSelferValueTypeMap1234 {
			yyl3272 := r.ReadMapStart()
			if yyl3272 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3272, d)
			}
		} else if yyct3272 == codecSelferValueTypeArray1234 {
			yyl3272 := r.ReadArrayStart()
			if yyl3272 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3272, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3273Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3273Slc
	var yyhl3273 bool = l >= 0
	for yyj3273 := 0; ; yyj3273++ {
		if yyhl3273 {
			if yyj3273 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3273Slc = r.DecodeBytes(yys3273Slc, true, true)
		yys3273 := string(yys3273Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3273 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3275 := z.DecBinary()
				_ = yym3275
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3273)
		} // end switch yys3273
	} // end for yyj3273
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3276 int
	var yyb3276 bool
	var yyhl3276 bool = l >= 0
	yyj3276++
	if yyhl3276 {
		yyb3276 = yyj3276 > l
	} else {
		yyb3276 = r.CheckBreak()
	}
	if yyb3276 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3278 := z.DecBinary()
		_ = yym3278
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3276++
		if yyhl3276 {
			yyb3276 = yyj3276 > l
		} else {
			yyb3276 = r.CheckBreak()
		}
		if yyb3276 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3276-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3279 := z.EncBinary()
		_ = yym3279
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3280 := !z.EncBinary()
			yy2arr3280 := z.EncBasicHandle().StructToArray
			var yyq3280 [5]bool
			_, _, _ = yysep3280, yyq3280, yy2arr3280
			const yyr3280 bool = false
			yyq3280[0] = x.Kind != ""
			yyq3280[1] = x.APIVersion != ""
			yyq3280[2] = x.GracePeriodSeconds != nil
			yyq3280[3] = x.Preconditions != nil
			yyq3280[4] = x.OrphanDependents != nil
			var yynn3280 int
			if yyr3280 || yy2arr3280 {
				r.EncodeArrayStart(5)
			} else {
				yynn3280 = 0
				for _, b := range yyq3280 {
					if b {
						yynn3280++
					}
				}
				r.EncodeMapStart(yynn3280)
				yynn3280 = 0
			}
			if yyr3280 || yy2arr3280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3280[0] {
					yym3282 := z.EncBinary()
					_ = yym3282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3280[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3283 := z.EncBinary()
					_ = yym3283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3280 || yy2arr3280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3280[1] {
					yym3285 := z.EncBinary()
					_ = yym3285
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3280[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3286 := z.EncBinary()
					_ = yym3286
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3280 || yy2arr3280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3280[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3288 := *x.GracePeriodSeconds
						yym3289 := z.EncBinary()
						_ = yym3289
						if false {
						} else {
							r.EncodeInt(int64(yy3288))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3280[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3290 := *x.GracePeriodSeconds
						yym3291 := z.EncBinary()
						_ = yym3291
						if false {
						} else {
							r.EncodeInt(int64(yy3290))
						}
					}
				}
			}
			if yyr3280 || yy2arr3280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3280[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3280[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3280 || yy2arr3280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3280[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3294 := *x.OrphanDependents
						yym3295 := z.EncBinary()
						_ = yym3295
						if false {
						} else {
							r.EncodeBool(bool(yy3294))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3280[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3296 := *x.OrphanDependents
						yym3297 := z.EncBinary()
						_ = yym3297
						if false {
						} else {
							r.EncodeBool(bool(yy3296))
						}
					}
				}
			}
			if yyr3280 || yy2arr3280 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3298 := z.DecBinary()
	_ = yym3298
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3299 := r.ContainerType()
		if yyct3299 == codecSelferValueTypeMap1234 {
			yyl3299 := r.ReadMapStart()
			if yyl3299 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3299, d)
			}
		} else if yyct3299 == codecSelferValueTypeArray1234 {
			yyl3299 := r.ReadArrayStart()
			if yyl3299 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3299, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3300Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3300Slc
	var yyhl3300 bool = l >= 0
	for yyj3300 := 0; ; yyj3300++ {
		if yyhl3300 {
			if yyj3300 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3300Slc = r.DecodeBytes(yys3300Slc, true, true)
		yys3300 := string(yys3300Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3300 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3304 := z.DecBinary()
				_ = yym3304
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3307 := z.DecBinary()
				_ = yym3307
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3300)
		} // end switch yys3300
	} // end for yyj3300
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3308 int
	var yyb3308 bool
	var yyhl3308 bool = l >= 0
	yyj3308++
	if yyhl3308 {
		yyb3308 = yyj3308 > l
	} else {
		yyb3308 = r.CheckBreak()
	}
	if yyb3308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3308++
	if yyhl3308 {
		yyb3308 = yyj3308 > l
	} else {
		yyb3308 = r.CheckBreak()
	}
	if yyb3308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3308++
	if yyhl3308 {
		yyb3308 = yyj3308 > l
	} else {
		yyb3308 = r.CheckBreak()
	}
	if yyb3308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3312 := z.DecBinary()
		_ = yym3312
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3308++
	if yyhl3308 {
		yyb3308 = yyj3308 > l
	} else {
		yyb3308 = r.CheckBreak()
	}
	if yyb3308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3308++
	if yyhl3308 {
		yyb3308 = yyj3308 > l
	} else {
		yyb3308 = r.CheckBreak()
	}
	if yyb3308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3315 := z.DecBinary()
		_ = yym3315
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3308++
		if yyhl3308 {
			yyb3308 = yyj3308 > l
		} else {
			yyb3308 = r.CheckBreak()
		}
		if yyb3308 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3308-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3316 := z.EncBinary()
		_ = yym3316
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3317 := !z.EncBinary()
			yy2arr3317 := z.EncBasicHandle().StructToArray
			var yyq3317 [4]bool
			_, _, _ = yysep3317, yyq3317, yy2arr3317
			const yyr3317 bool = false
			yyq3317[0] = x.Kind != ""
			yyq3317[1] = x.APIVersion != ""
			var yynn3317 int
			if yyr3317 || yy2arr3317 {
				r.EncodeArrayStart(4)
			} else {
				yynn3317 = 2
				for _, b := range yyq3317 {
					if b {
						yynn3317++
					}
				}
				r.EncodeMapStart(yynn3317)
				yynn3317 = 0
			}
			if yyr3317 || yy2arr3317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3317[0] {
					yym3319 := z.EncBinary()
					_ = yym3319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3317[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3320 := z.EncBinary()
					_ = yym3320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3317 || yy2arr3317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3317[1] {
					yym3322 := z.EncBinary()
					_ = yym3322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3317[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3323 := z.EncBinary()
					_ = yym3323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3317 || yy2arr3317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3325 := z.EncBinary()
				_ = yym3325
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3326 := z.EncBinary()
				_ = yym3326
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3317 || yy2arr3317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3328 := z.EncBinary()
				_ = yym3328
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3329 := z.EncBinary()
				_ = yym3329
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3317 || yy2arr3317 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3330 := z.DecBinary()
	_ = yym3330
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3331 := r.ContainerType()
		if yyct3331 == codecSelferValueTypeMap1234 {
			yyl3331 := r.ReadMapStart()
			if yyl3331 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3331, d)
			}
		} else if yyct3331 == codecSelferValueTypeArray1234 {
			yyl3331 := r.ReadArrayStart()
			if yyl3331 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3331, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3332Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3332Slc
	var yyhl3332 bool = l >= 0
	for yyj3332 := 0; ; yyj3332++ {
		if yyhl3332 {
			if yyj3332 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3332Slc = r.DecodeBytes(yys3332Slc, true, true)
		yys3332 := string(yys3332Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3332 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3332)
		} // end switch yys3332
	} // end for yyj3332
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3337 int
	var yyb3337 bool
	var yyhl3337 bool = l >= 0
	yyj3337++
	if yyhl3337 {
		yyb3337 = yyj3337 > l
	} else {
		yyb3337 = r.CheckBreak()
	}
	if yyb3337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3337++
	if yyhl3337 {
		yyb3337 = yyj3337 > l
	} else {
		yyb3337 = r.CheckBreak()
	}
	if yyb3337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3337++
	if yyhl3337 {
		yyb3337 = yyj3337 > l
	} else {
		yyb3337 = r.CheckBreak()
	}
	if yyb3337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3337++
	if yyhl3337 {
		yyb3337 = yyj3337 > l
	} else {
		yyb3337 = r.CheckBreak()
	}
	if yyb3337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3337++
		if yyhl3337 {
			yyb3337 = yyj3337 > l
		} else {
			yyb3337 = r.CheckBreak()
		}
		if yyb3337 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3337-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3342 := z.EncBinary()
		_ = yym3342
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3343 := !z.EncBinary()
			yy2arr3343 := z.EncBasicHandle().StructToArray
			var yyq3343 [7]bool
			_, _, _ = yysep3343, yyq3343, yy2arr3343
			const yyr3343 bool = false
			yyq3343[0] = x.Kind != ""
			yyq3343[1] = x.APIVersion != ""
			var yynn3343 int
			if yyr3343 || yy2arr3343 {
				r.EncodeArrayStart(7)
			} else {
				yynn3343 = 5
				for _, b := range yyq3343 {
					if b {
						yynn3343++
					}
				}
				r.EncodeMapStart(yynn3343)
				yynn3343 = 0
			}
			if yyr3343 || yy2arr3343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3343[0] {
					yym3345 := z.EncBinary()
					_ = yym3345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3343[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3346 := z.EncBinary()
					_ = yym3346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3343 || yy2arr3343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3343[1] {
					yym3348 := z.EncBinary()
					_ = yym3348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3343[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3349 := z.EncBinary()
					_ = yym3349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3343 || yy2arr3343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3351 := z.EncBinary()
					_ = yym3351
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3352 := z.EncBinary()
					_ = yym3352
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr3343 || yy2arr3343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3354 := z.EncBinary()
					_ = yym3354
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3355 := z.EncBinary()
					_ = yym3355
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr3343 || yy2arr3343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3357 := z.EncBinary()
				_ = yym3357
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3358 := z.EncBinary()
				_ = yym3358
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr3343 || yy2arr3343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3360 := z.EncBinary()
				_ = yym3360
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3361 := z.EncBinary()
				_ = yym3361
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr3343 || yy2arr3343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3363 := *x.TimeoutSeconds
					yym3364 := z.EncBinary()
					_ = yym3364
					if false {
					} else {
						r.EncodeInt(int64(yy3363))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3365 := *x.TimeoutSeconds
					yym3366 := z.EncBinary()
					_ = yym3366
					if false {
					} else {
						r.EncodeInt(int64(yy3365))
					}
				}
			}
			if yyr3343 || yy2arr3343 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3367 := z.DecBinary()
	_ = yym3367
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3368 := r.ContainerType()
		if yyct3368 == codecSelferValueTypeMap1234 {
			yyl3368 := r.ReadMapStart()
			if yyl3368 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3368, d)
			}
		} else if yyct3368 == codecSelferValueTypeArray1234 {
			yyl3368 := r.ReadArrayStart()
			if yyl3368 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3368, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3369Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3369Slc
	var yyhl3369 bool = l >= 0
	for yyj3369 := 0; ; yyj3369++ {
		if yyhl3369 {
			if yyj3369 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3369Slc = r.DecodeBytes(yys3369Slc, true, true)
		yys3369 := string(yys3369Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3369 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv3372 := &x.LabelSelector
				yym3373 := z.DecBinary()
				_ = yym3373
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3372) {
				} else {
					z.DecFallback(yyv3372, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv3374 := &x.FieldSelector
				yym3375 := z.DecBinary()
				_ = yym3375
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3374) {
				} else {
					z.DecFallback(yyv3374, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3379 := z.DecBinary()
				_ = yym3379
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3369)
		} // end switch yys3369
	} // end for yyj3369
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3380 int
	var yyb3380 bool
	var yyhl3380 bool = l >= 0
	yyj3380++
	if yyhl3380 {
		yyb3380 = yyj3380 > l
	} else {
		yyb3380 = r.CheckBreak()
	}
	if yyb3380 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3380++
	if yyhl3380 {
		yyb3380 = yyj3380 > l
	} else {
		yyb3380 = r.CheckBreak()
	}
	if yyb3380 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3380++
	if yyhl3380 {
		yyb3380 = yyj3380 > l
	} else {
		yyb3380 = r.CheckBreak()
	}
	if yyb3380 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv3383 := &x.LabelSelector
		yym3384 := z.DecBinary()
		_ = yym3384
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3383) {
		} else {
			z.DecFallback(yyv3383, true)
		}
	}
	yyj3380++
	if yyhl3380 {
		yyb3380 = yyj3380 > l
	} else {
		yyb3380 = r.CheckBreak()
	}
	if yyb3380 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv3385 := &x.FieldSelector
		yym3386 := z.DecBinary()
		_ = yym3386
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3385) {
		} else {
			z.DecFallback(yyv3385, true)
		}
	}
	yyj3380++
	if yyhl3380 {
		yyb3380 = yyj3380 > l
	} else {
		yyb3380 = r.CheckBreak()
	}
	if yyb3380 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3380++
	if yyhl3380 {
		yyb3380 = yyj3380 > l
	} else {
		yyb3380 = r.CheckBreak()
	}
	if yyb3380 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3380++
	if yyhl3380 {
		yyb3380 = yyj3380 > l
	} else {
		yyb3380 = r.CheckBreak()
	}
	if yyb3380 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3390 := z.DecBinary()
		_ = yym3390
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3380++
		if yyhl3380 {
			yyb3380 = yyj3380 > l
		} else {
			yyb3380 = r.CheckBreak()
		}
		if yyb3380 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3380-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3391 := z.EncBinary()
		_ = yym3391
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3392 := !z.EncBinary()
			yy2arr3392 := z.EncBasicHandle().StructToArray
			var yyq3392 [10]bool
			_, _, _ = yysep3392, yyq3392, yy2arr3392
			const yyr3392 bool = false
			yyq3392[0] = x.Kind != ""
			yyq3392[1] = x.APIVersion != ""
			var yynn3392 int
			if yyr3392 || yy2arr3392 {
				r.EncodeArrayStart(10)
			} else {
				yynn3392 = 8
				for _, b := range yyq3392 {
					if b {
						yynn3392++
					}
				}
				r.EncodeMapStart(yynn3392)
				yynn3392 = 0
			}
			if yyr3392 || yy2arr3392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3392[0] {
					yym3394 := z.EncBinary()
					_ = yym3394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3392[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3395 := z.EncBinary()
					_ = yym3395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3392 || yy2arr3392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3392[1] {
					yym3397 := z.EncBinary()
					_ = yym3397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3392[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3398 := z.EncBinary()
					_ = yym3398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3392 || yy2arr3392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3400 := z.EncBinary()
				_ = yym3400
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3401 := z.EncBinary()
				_ = yym3401
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3392 || yy2arr3392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3403 := z.EncBinary()
				_ = yym3403
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3404 := z.EncBinary()
				_ = yym3404
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr3392 || yy2arr3392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3406 := z.EncBinary()
				_ = yym3406
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3407 := z.EncBinary()
				_ = yym3407
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr3392 || yy2arr3392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3409 := *x.SinceSeconds
					yym3410 := z.EncBinary()
					_ = yym3410
					if false {
					} else {
						r.EncodeInt(int64(yy3409))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3411 := *x.SinceSeconds
					yym3412 := z.EncBinary()
					_ = yym3412
					if false {
					} else {
						r.EncodeInt(int64(yy3411))
					}
				}
			}
			if yyr3392 || yy2arr3392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3414 := z.EncBinary()
					_ = yym3414
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3414 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3414 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3415 := z.EncBinary()
					_ = yym3415
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3415 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3415 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr3392 || yy2arr3392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3417 := z.EncBinary()
				_ = yym3417
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3418 := z.EncBinary()
				_ = yym3418
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr3392 || yy2arr3392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3420 := *x.TailLines
					yym3421 := z.EncBinary()
					_ = yym3421
					if false {
					} else {
						r.EncodeInt(int64(yy3420))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3422 := *x.TailLines
					yym3423 := z.EncBinary()
					_ = yym3423
					if false {
					} else {
						r.EncodeInt(int64(yy3422))
					}
				}
			}
			if yyr3392 || yy2arr3392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3425 := *x.LimitBytes
					yym3426 := z.EncBinary()
					_ = yym3426
					if false {
					} else {
						r.EncodeInt(int64(yy3425))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3427 := *x.LimitBytes
					yym3428 := z.EncBinary()
					_ = yym3428
					if false {
					} else {
						r.EncodeInt(int64(yy3427))
					}
				}
			}
			if yyr3392 || yy2arr3392 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3429 := z.DecBinary()
	_ = yym3429
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3430 := r.ContainerType()
		if yyct3430 == codecSelferValueTypeMap1234 {
			yyl3430 := r.ReadMapStart()
			if yyl3430 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3430, d)
			}
		} else if yyct3430 == codecSelferValueTypeArray1234 {
			yyl3430 := r.ReadArrayStart()
			if yyl3430 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3430, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3431Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3431Slc
	var yyhl3431 bool = l >= 0
	for yyj3431 := 0; ; yyj3431++ {
		if yyhl3431 {
			if yyj3431 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3431Slc = r.DecodeBytes(yys3431Slc, true, true)
		yys3431 := string(yys3431Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3431 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3438 := z.DecBinary()
				_ = yym3438
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3440 := z.DecBinary()
				_ = yym3440
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3440 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3440 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3443 := z.DecBinary()
				_ = yym3443
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3445 := z.DecBinary()
				_ = yym3445
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3431)
		} // end switch yys3431
	} // end for yyj3431
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3446 int
	var yyb3446 bool
	var yyhl3446 bool = l >= 0
	yyj3446++
	if yyhl3446 {
		yyb3446 = yyj3446 > l
	} else {
		yyb3446 = r.CheckBreak()
	}
	if yyb3446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3446++
	if yyhl3446 {
		yyb3446 = yyj3446 > l
	} else {
		yyb3446 = r.CheckBreak()
	}
	if yyb3446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3446++
	if yyhl3446 {
		yyb3446 = yyj3446 > l
	} else {
		yyb3446 = r.CheckBreak()
	}
	if yyb3446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3446++
	if yyhl3446 {
		yyb3446 = yyj3446 > l
	} else {
		yyb3446 = r.CheckBreak()
	}
	if yyb3446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3446++
	if yyhl3446 {
		yyb3446 = yyj3446 > l
	} else {
		yyb3446 = r.CheckBreak()
	}
	if yyb3446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3446++
	if yyhl3446 {
		yyb3446 = yyj3446 > l
	} else {
		yyb3446 = r.CheckBreak()
	}
	if yyb3446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3453 := z.DecBinary()
		_ = yym3453
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3446++
	if yyhl3446 {
		yyb3446 = yyj3446 > l
	} else {
		yyb3446 = r.CheckBreak()
	}
	if yyb3446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3455 := z.DecBinary()
		_ = yym3455
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3455 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3455 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3446++
	if yyhl3446 {
		yyb3446 = yyj3446 > l
	} else {
		yyb3446 = r.CheckBreak()
	}
	if yyb3446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3446++
	if yyhl3446 {
		yyb3446 = yyj3446 > l
	} else {
		yyb3446 = r.CheckBreak()
	}
	if yyb3446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3458 := z.DecBinary()
		_ = yym3458
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3446++
	if yyhl3446 {
		yyb3446 = yyj3446 > l
	} else {
		yyb3446 = r.CheckBreak()
	}
	if yyb3446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3460 := z.DecBinary()
		_ = yym3460
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3446++
		if yyhl3446 {
			yyb3446 = yyj3446 > l
		} else {
			yyb3446 = r.CheckBreak()
		}
		if yyb3446 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3446-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3461 := z.EncBinary()
		_ = yym3461
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3462 := !z.EncBinary()
			yy2arr3462 := z.EncBasicHandle().StructToArray
			var yyq3462 [7]bool
			_, _, _ = yysep3462, yyq3462, yy2arr3462
			const yyr3462 bool = false
			yyq3462[0] = x.Kind != ""
			yyq3462[1] = x.APIVersion != ""
			yyq3462[2] = x.Stdin != false
			yyq3462[3] = x.Stdout != false
			yyq3462[4] = x.Stderr != false
			yyq3462[5] = x.TTY != false
			yyq3462[6] = x.Container != ""
			var yynn3462 int
			if yyr3462 || yy2arr3462 {
				r.EncodeArrayStart(7)
			} else {
				yynn3462 = 0
				for _, b := range yyq3462 {
					if b {
						yynn3462++
					}
				}
				r.EncodeMapStart(yynn3462)
				yynn3462 = 0
			}
			if yyr3462 || yy2arr3462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3462[0] {
					yym3464 := z.EncBinary()
					_ = yym3464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3462[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3465 := z.EncBinary()
					_ = yym3465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3462 || yy2arr3462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3462[1] {
					yym3467 := z.EncBinary()
					_ = yym3467
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3462[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3468 := z.EncBinary()
					_ = yym3468
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3462 || yy2arr3462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3462[2] {
					yym3470 := z.EncBinary()
					_ = yym3470
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3462[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3471 := z.EncBinary()
					_ = yym3471
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3462 || yy2arr3462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3462[3] {
					yym3473 := z.EncBinary()
					_ = yym3473
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3462[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3474 := z.EncBinary()
					_ = yym3474
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3462 || yy2arr3462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3462[4] {
					yym3476 := z.EncBinary()
					_ = yym3476
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3462[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3477 := z.EncBinary()
					_ = yym3477
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3462 || yy2arr3462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3462[5] {
					yym3479 := z.EncBinary()
					_ = yym3479
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3462[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3480 := z.EncBinary()
					_ = yym3480
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3462 || yy2arr3462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3462[6] {
					yym3482 := z.EncBinary()
					_ = yym3482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3462[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3483 := z.EncBinary()
					_ = yym3483
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3462 || yy2arr3462 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3484 := z.DecBinary()
	_ = yym3484
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3485 := r.ContainerType()
		if yyct3485 == codecSelferValueTypeMap1234 {
			yyl3485 := r.ReadMapStart()
			if yyl3485 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3485, d)
			}
		} else if yyct3485 == codecSelferValueTypeArray1234 {
			yyl3485 := r.ReadArrayStart()
			if yyl3485 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3485, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3486Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3486Slc
	var yyhl3486 bool = l >= 0
	for yyj3486 := 0; ; yyj3486++ {
		if yyhl3486 {
			if yyj3486 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3486Slc = r.DecodeBytes(yys3486Slc, true, true)
		yys3486 := string(yys3486Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3486 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3486)
		} // end switch yys3486
	} // end for yyj3486
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3494 int
	var yyb3494 bool
	var yyhl3494 bool = l >= 0
	yyj3494++
	if yyhl3494 {
		yyb3494 = yyj3494 > l
	} else {
		yyb3494 = r.CheckBreak()
	}
	if yyb3494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3494++
	if yyhl3494 {
		yyb3494 = yyj3494 > l
	} else {
		yyb3494 = r.CheckBreak()
	}
	if yyb3494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3494++
	if yyhl3494 {
		yyb3494 = yyj3494 > l
	} else {
		yyb3494 = r.CheckBreak()
	}
	if yyb3494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3494++
	if yyhl3494 {
		yyb3494 = yyj3494 > l
	} else {
		yyb3494 = r.CheckBreak()
	}
	if yyb3494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3494++
	if yyhl3494 {
		yyb3494 = yyj3494 > l
	} else {
		yyb3494 = r.CheckBreak()
	}
	if yyb3494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3494++
	if yyhl3494 {
		yyb3494 = yyj3494 > l
	} else {
		yyb3494 = r.CheckBreak()
	}
	if yyb3494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3494++
	if yyhl3494 {
		yyb3494 = yyj3494 > l
	} else {
		yyb3494 = r.CheckBreak()
	}
	if yyb3494 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3494++
		if yyhl3494 {
			yyb3494 = yyj3494 > l
		} else {
			yyb3494 = r.CheckBreak()
		}
		if yyb3494 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3494-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3502 := z.EncBinary()
		_ = yym3502
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3503 := !z.EncBinary()
			yy2arr3503 := z.EncBasicHandle().StructToArray
			var yyq3503 [8]bool
			_, _, _ = yysep3503, yyq3503, yy2arr3503
			const yyr3503 bool = false
			yyq3503[0] = x.Kind != ""
			yyq3503[1] = x.APIVersion != ""
			var yynn3503 int
			if yyr3503 || yy2arr3503 {
				r.EncodeArrayStart(8)
			} else {
				yynn3503 = 6
				for _, b := range yyq3503 {
					if b {
						yynn3503++
					}
				}
				r.EncodeMapStart(yynn3503)
				yynn3503 = 0
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3503[0] {
					yym3505 := z.EncBinary()
					_ = yym3505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3503[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3506 := z.EncBinary()
					_ = yym3506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3503[1] {
					yym3508 := z.EncBinary()
					_ = yym3508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3503[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3509 := z.EncBinary()
					_ = yym3509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3511 := z.EncBinary()
				_ = yym3511
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3512 := z.EncBinary()
				_ = yym3512
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3514 := z.EncBinary()
				_ = yym3514
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3515 := z.EncBinary()
				_ = yym3515
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3517 := z.EncBinary()
				_ = yym3517
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3518 := z.EncBinary()
				_ = yym3518
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3520 := z.EncBinary()
				_ = yym3520
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3521 := z.EncBinary()
				_ = yym3521
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3523 := z.EncBinary()
				_ = yym3523
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3524 := z.EncBinary()
				_ = yym3524
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3526 := z.EncBinary()
					_ = yym3526
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3527 := z.EncBinary()
					_ = yym3527
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3503 || yy2arr3503 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3528 := z.DecBinary()
	_ = yym3528
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3529 := r.ContainerType()
		if yyct3529 == codecSelferValueTypeMap1234 {
			yyl3529 := r.ReadMapStart()
			if yyl3529 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3529, d)
			}
		} else if yyct3529 == codecSelferValueTypeArray1234 {
			yyl3529 := r.ReadArrayStart()
			if yyl3529 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3529, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3530Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3530Slc
	var yyhl3530 bool = l >= 0
	for yyj3530 := 0; ; yyj3530++ {
		if yyhl3530 {
			if yyj3530 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3530Slc = r.DecodeBytes(yys3530Slc, true, true)
		yys3530 := string(yys3530Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3530 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3538 := &x.Command
				yym3539 := z.DecBinary()
				_ = yym3539
				if false {
				} else {
					z.F.DecSliceStringX(yyv3538, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3530)
		} // end switch yys3530
	} // end for yyj3530
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3540 int
	var yyb3540 bool
	var yyhl3540 bool = l >= 0
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3548 := &x.Command
		yym3549 := z.DecBinary()
		_ = yym3549
		if false {
		} else {
			z.F.DecSliceStringX(yyv3548, false, d)
		}
	}
	for {
		yyj3540++
		if yyhl3540 {
			yyb3540 = yyj3540 > l
		} else {
			yyb3540 = r.CheckBreak()
		}
		if yyb3540 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3540-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3550 := z.EncBinary()
		_ = yym3550
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3551 := !z.EncBinary()
			yy2arr3551 := z.EncBasicHandle().StructToArray
			var yyq3551 [3]bool
			_, _, _ = yysep3551, yyq3551, yy2arr3551
			const yyr3551 bool = false
			yyq3551[0] = x.Kind != ""
			yyq3551[1] = x.APIVersion != ""
			var yynn3551 int
			if yyr3551 || yy2arr3551 {
				r.EncodeArrayStart(3)
			} else {
				yynn3551 = 1
				for _, b := range yyq3551 {
					if b {
						yynn3551++
					}
				}
				r.EncodeMapStart(yynn3551)
				yynn3551 = 0
			}
			if yyr3551 || yy2arr3551 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3551[0] {
					yym3553 := z.EncBinary()
					_ = yym3553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3551[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3554 := z.EncBinary()
					_ = yym3554
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3551 || yy2arr3551 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3551[1] {
					yym3556 := z.EncBinary()
					_ = yym3556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3551[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3557 := z.EncBinary()
					_ = yym3557
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3551 || yy2arr3551 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3559 := z.EncBinary()
				_ = yym3559
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3560 := z.EncBinary()
				_ = yym3560
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3551 || yy2arr3551 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3561 := z.DecBinary()
	_ = yym3561
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3562 := r.ContainerType()
		if yyct3562 == codecSelferValueTypeMap1234 {
			yyl3562 := r.ReadMapStart()
			if yyl3562 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3562, d)
			}
		} else if yyct3562 == codecSelferValueTypeArray1234 {
			yyl3562 := r.ReadArrayStart()
			if yyl3562 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3562, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3563Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3563Slc
	var yyhl3563 bool = l >= 0
	for yyj3563 := 0; ; yyj3563++ {
		if yyhl3563 {
			if yyj3563 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3563Slc = r.DecodeBytes(yys3563Slc, true, true)
		yys3563 := string(yys3563Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3563 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3563)
		} // end switch yys3563
	} // end for yyj3563
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3567 int
	var yyb3567 bool
	var yyhl3567 bool = l >= 0
	yyj3567++
	if yyhl3567 {
		yyb3567 = yyj3567 > l
	} else {
		yyb3567 = r.CheckBreak()
	}
	if yyb3567 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3567++
	if yyhl3567 {
		yyb3567 = yyj3567 > l
	} else {
		yyb3567 = r.CheckBreak()
	}
	if yyb3567 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3567++
	if yyhl3567 {
		yyb3567 = yyj3567 > l
	} else {
		yyb3567 = r.CheckBreak()
	}
	if yyb3567 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3567++
		if yyhl3567 {
			yyb3567 = yyj3567 > l
		} else {
			yyb3567 = r.CheckBreak()
		}
		if yyb3567 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3567-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3571 := z.EncBinary()
		_ = yym3571
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3572 := !z.EncBinary()
			yy2arr3572 := z.EncBasicHandle().StructToArray
			var yyq3572 [3]bool
			_, _, _ = yysep3572, yyq3572, yy2arr3572
			const yyr3572 bool = false
			yyq3572[0] = x.Kind != ""
			yyq3572[1] = x.APIVersion != ""
			var yynn3572 int
			if yyr3572 || yy2arr3572 {
				r.EncodeArrayStart(3)
			} else {
				yynn3572 = 1
				for _, b := range yyq3572 {
					if b {
						yynn3572++
					}
				}
				r.EncodeMapStart(yynn3572)
				yynn3572 = 0
			}
			if yyr3572 || yy2arr3572 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3572[0] {
					yym3574 := z.EncBinary()
					_ = yym3574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3572[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3575 := z.EncBinary()
					_ = yym3575
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3572 || yy2arr3572 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3572[1] {
					yym3577 := z.EncBinary()
					_ = yym3577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3572[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3578 := z.EncBinary()
					_ = yym3578
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3572 || yy2arr3572 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3580 := z.EncBinary()
				_ = yym3580
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3581 := z.EncBinary()
				_ = yym3581
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3572 || yy2arr3572 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3582 := z.DecBinary()
	_ = yym3582
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3583 := r.ContainerType()
		if yyct3583 == codecSelferValueTypeMap1234 {
			yyl3583 := r.ReadMapStart()
			if yyl3583 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3583, d)
			}
		} else if yyct3583 == codecSelferValueTypeArray1234 {
			yyl3583 := r.ReadArrayStart()
			if yyl3583 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3583, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3584Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3584Slc
	var yyhl3584 bool = l >= 0
	for yyj3584 := 0; ; yyj3584++ {
		if yyhl3584 {
			if yyj3584 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3584Slc = r.DecodeBytes(yys3584Slc, true, true)
		yys3584 := string(yys3584Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3584 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3584)
		} // end switch yys3584
	} // end for yyj3584
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3588 int
	var yyb3588 bool
	var yyhl3588 bool = l >= 0
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3588++
	if yyhl3588 {
		yyb3588 = yyj3588 > l
	} else {
		yyb3588 = r.CheckBreak()
	}
	if yyb3588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3588++
		if yyhl3588 {
			yyb3588 = yyj3588 > l
		} else {
			yyb3588 = r.CheckBreak()
		}
		if yyb3588 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3588-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3592 := z.EncBinary()
		_ = yym3592
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3593 := !z.EncBinary()
			yy2arr3593 := z.EncBasicHandle().StructToArray
			var yyq3593 [3]bool
			_, _, _ = yysep3593, yyq3593, yy2arr3593
			const yyr3593 bool = false
			yyq3593[0] = x.Kind != ""
			yyq3593[1] = x.APIVersion != ""
			var yynn3593 int
			if yyr3593 || yy2arr3593 {
				r.EncodeArrayStart(3)
			} else {
				yynn3593 = 1
				for _, b := range yyq3593 {
					if b {
						yynn3593++
					}
				}
				r.EncodeMapStart(yynn3593)
				yynn3593 = 0
			}
			if yyr3593 || yy2arr3593 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3593[0] {
					yym3595 := z.EncBinary()
					_ = yym3595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3593[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3596 := z.EncBinary()
					_ = yym3596
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3593 || yy2arr3593 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3593[1] {
					yym3598 := z.EncBinary()
					_ = yym3598
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3593[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3599 := z.EncBinary()
					_ = yym3599
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3593 || yy2arr3593 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3601 := z.EncBinary()
				_ = yym3601
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3602 := z.EncBinary()
				_ = yym3602
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3593 || yy2arr3593 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3603 := z.DecBinary()
	_ = yym3603
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3604 := r.ContainerType()
		if yyct3604 == codecSelferValueTypeMap1234 {
			yyl3604 := r.ReadMapStart()
			if yyl3604 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3604, d)
			}
		} else if yyct3604 == codecSelferValueTypeArray1234 {
			yyl3604 := r.ReadArrayStart()
			if yyl3604 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3604, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3605Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3605Slc
	var yyhl3605 bool = l >= 0
	for yyj3605 := 0; ; yyj3605++ {
		if yyhl3605 {
			if yyj3605 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3605Slc = r.DecodeBytes(yys3605Slc, true, true)
		yys3605 := string(yys3605Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3605 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3605)
		} // end switch yys3605
	} // end for yyj3605
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3609 int
	var yyb3609 bool
	var yyhl3609 bool = l >= 0
	yyj3609++
	if yyhl3609 {
		yyb3609 = yyj3609 > l
	} else {
		yyb3609 = r.CheckBreak()
	}
	if yyb3609 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3609++
	if yyhl3609 {
		yyb3609 = yyj3609 > l
	} else {
		yyb3609 = r.CheckBreak()
	}
	if yyb3609 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3609++
	if yyhl3609 {
		yyb3609 = yyj3609 > l
	} else {
		yyb3609 = r.CheckBreak()
	}
	if yyb3609 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3609++
		if yyhl3609 {
			yyb3609 = yyj3609 > l
		} else {
			yyb3609 = r.CheckBreak()
		}
		if yyb3609 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3609-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3613 := z.EncBinary()
		_ = yym3613
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3614 := !z.EncBinary()
			yy2arr3614 := z.EncBasicHandle().StructToArray
			var yyq3614 [5]bool
			_, _, _ = yysep3614, yyq3614, yy2arr3614
			const yyr3614 bool = false
			yyq3614[4] = x.Controller != nil
			var yynn3614 int
			if yyr3614 || yy2arr3614 {
				r.EncodeArrayStart(5)
			} else {
				yynn3614 = 4
				for _, b := range yyq3614 {
					if b {
						yynn3614++
					}
				}
				r.EncodeMapStart(yynn3614)
				yynn3614 = 0
			}
			if yyr3614 || yy2arr3614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3616 := z.EncBinary()
				_ = yym3616
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3617 := z.EncBinary()
				_ = yym3617
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3614 || yy2arr3614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3619 := z.EncBinary()
				_ = yym3619
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3620 := z.EncBinary()
				_ = yym3620
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3614 || yy2arr3614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3622 := z.EncBinary()
				_ = yym3622
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3623 := z.EncBinary()
				_ = yym3623
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3614 || yy2arr3614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3625 := z.EncBinary()
				_ = yym3625
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3626 := z.EncBinary()
				_ = yym3626
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3614 || yy2arr3614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3614[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3628 := *x.Controller
						yym3629 := z.EncBinary()
						_ = yym3629
						if false {
						} else {
							r.EncodeBool(bool(yy3628))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3614[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3630 := *x.Controller
						yym3631 := z.EncBinary()
						_ = yym3631
						if false {
						} else {
							r.EncodeBool(bool(yy3630))
						}
					}
				}
			}
			if yyr3614 || yy2arr3614 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3632 := z.DecBinary()
	_ = yym3632
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3633 := r.ContainerType()
		if yyct3633 == codecSelferValueTypeMap1234 {
			yyl3633 := r.ReadMapStart()
			if yyl3633 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3633, d)
			}
		} else if yyct3633 == codecSelferValueTypeArray1234 {
			yyl3633 := r.ReadArrayStart()
			if yyl3633 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3633, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3634Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3634Slc
	var yyhl3634 bool = l >= 0
	for yyj3634 := 0; ; yyj3634++ {
		if yyhl3634 {
			if yyj3634 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3634Slc = r.DecodeBytes(yys3634Slc, true, true)
		yys3634 := string(yys3634Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3634 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3640 := z.DecBinary()
				_ = yym3640
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3634)
		} // end switch yys3634
	} // end for yyj3634
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3641 int
	var yyb3641 bool
	var yyhl3641 bool = l >= 0
	yyj3641++
	if yyhl3641 {
		yyb3641 = yyj3641 > l
	} else {
		yyb3641 = r.CheckBreak()
	}
	if yyb3641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3641++
	if yyhl3641 {
		yyb3641 = yyj3641 > l
	} else {
		yyb3641 = r.CheckBreak()
	}
	if yyb3641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3641++
	if yyhl3641 {
		yyb3641 = yyj3641 > l
	} else {
		yyb3641 = r.CheckBreak()
	}
	if yyb3641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3641++
	if yyhl3641 {
		yyb3641 = yyj3641 > l
	} else {
		yyb3641 = r.CheckBreak()
	}
	if yyb3641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3641++
	if yyhl3641 {
		yyb3641 = yyj3641 > l
	} else {
		yyb3641 = r.CheckBreak()
	}
	if yyb3641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3647 := z.DecBinary()
		_ = yym3647
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3641++
		if yyhl3641 {
			yyb3641 = yyj3641 > l
		} else {
			yyb3641 = r.CheckBreak()
		}
		if yyb3641 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3641-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3648 := z.EncBinary()
		_ = yym3648
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3649 := !z.EncBinary()
			yy2arr3649 := z.EncBasicHandle().StructToArray
			var yyq3649 [7]bool
			_, _, _ = yysep3649, yyq3649, yy2arr3649
			const yyr3649 bool = false
			yyq3649[0] = x.Kind != ""
			yyq3649[1] = x.Namespace != ""
			yyq3649[2] = x.Name != ""
			yyq3649[3] = x.UID != ""
			yyq3649[4] = x.APIVersion != ""
			yyq3649[5] = x.ResourceVersion != ""
			yyq3649[6] = x.FieldPath != ""
			var yynn3649 int
			if yyr3649 || yy2arr3649 {
				r.EncodeArrayStart(7)
			} else {
				yynn3649 = 0
				for _, b := range yyq3649 {
					if b {
						yynn3649++
					}
				}
				r.EncodeMapStart(yynn3649)
				yynn3649 = 0
			}
			if yyr3649 || yy2arr3649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3649[0] {
					yym3651 := z.EncBinary()
					_ = yym3651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3649[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3652 := z.EncBinary()
					_ = yym3652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3649 || yy2arr3649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3649[1] {
					yym3654 := z.EncBinary()
					_ = yym3654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3649[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3655 := z.EncBinary()
					_ = yym3655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3649 || yy2arr3649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3649[2] {
					yym3657 := z.EncBinary()
					_ = yym3657
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3649[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3658 := z.EncBinary()
					_ = yym3658
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3649 || yy2arr3649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3649[3] {
					yym3660 := z.EncBinary()
					_ = yym3660
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3649[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3661 := z.EncBinary()
					_ = yym3661
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3649 || yy2arr3649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3649[4] {
					yym3663 := z.EncBinary()
					_ = yym3663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3649[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3664 := z.EncBinary()
					_ = yym3664
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3649 || yy2arr3649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3649[5] {
					yym3666 := z.EncBinary()
					_ = yym3666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3649[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3667 := z.EncBinary()
					_ = yym3667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3649 || yy2arr3649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3649[6] {
					yym3669 := z.EncBinary()
					_ = yym3669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3649[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3670 := z.EncBinary()
					_ = yym3670
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3649 || yy2arr3649 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3671 := z.DecBinary()
	_ = yym3671
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3672 := r.ContainerType()
		if yyct3672 == codecSelferValueTypeMap1234 {
			yyl3672 := r.ReadMapStart()
			if yyl3672 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3672, d)
			}
		} else if yyct3672 == codecSelferValueTypeArray1234 {
			yyl3672 := r.ReadArrayStart()
			if yyl3672 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3672, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3673Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3673Slc
	var yyhl3673 bool = l >= 0
	for yyj3673 := 0; ; yyj3673++ {
		if yyhl3673 {
			if yyj3673 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3673Slc = r.DecodeBytes(yys3673Slc, true, true)
		yys3673 := string(yys3673Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3673 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3673)
		} // end switch yys3673
	} // end for yyj3673
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3681 int
	var yyb3681 bool
	var yyhl3681 bool = l >= 0
	yyj3681++
	if yyhl3681 {
		yyb3681 = yyj3681 > l
	} else {
		yyb3681 = r.CheckBreak()
	}
	if yyb3681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3681++
	if yyhl3681 {
		yyb3681 = yyj3681 > l
	} else {
		yyb3681 = r.CheckBreak()
	}
	if yyb3681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3681++
	if yyhl3681 {
		yyb3681 = yyj3681 > l
	} else {
		yyb3681 = r.CheckBreak()
	}
	if yyb3681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3681++
	if yyhl3681 {
		yyb3681 = yyj3681 > l
	} else {
		yyb3681 = r.CheckBreak()
	}
	if yyb3681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3681++
	if yyhl3681 {
		yyb3681 = yyj3681 > l
	} else {
		yyb3681 = r.CheckBreak()
	}
	if yyb3681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3681++
	if yyhl3681 {
		yyb3681 = yyj3681 > l
	} else {
		yyb3681 = r.CheckBreak()
	}
	if yyb3681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3681++
	if yyhl3681 {
		yyb3681 = yyj3681 > l
	} else {
		yyb3681 = r.CheckBreak()
	}
	if yyb3681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3681++
		if yyhl3681 {
			yyb3681 = yyj3681 > l
		} else {
			yyb3681 = r.CheckBreak()
		}
		if yyb3681 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3681-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3689 := z.EncBinary()
		_ = yym3689
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3690 := !z.EncBinary()
			yy2arr3690 := z.EncBasicHandle().StructToArray
			var yyq3690 [1]bool
			_, _, _ = yysep3690, yyq3690, yy2arr3690
			const yyr3690 bool = false
			var yynn3690 int
			if yyr3690 || yy2arr3690 {
				r.EncodeArrayStart(1)
			} else {
				yynn3690 = 1
				for _, b := range yyq3690 {
					if b {
						yynn3690++
					}
				}
				r.EncodeMapStart(yynn3690)
				yynn3690 = 0
			}
			if yyr3690 || yy2arr3690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3692 := z.EncBinary()
				_ = yym3692
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3693 := z.EncBinary()
				_ = yym3693
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3690 || yy2arr3690 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3694 := z.DecBinary()
	_ = yym3694
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3695 := r.ContainerType()
		if yyct3695 == codecSelferValueTypeMap1234 {
			yyl3695 := r.ReadMapStart()
			if yyl3695 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3695, d)
			}
		} else if yyct3695 == codecSelferValueTypeArray1234 {
			yyl3695 := r.ReadArrayStart()
			if yyl3695 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3695, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3696Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3696Slc
	var yyhl3696 bool = l >= 0
	for yyj3696 := 0; ; yyj3696++ {
		if yyhl3696 {
			if yyj3696 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3696Slc = r.DecodeBytes(yys3696Slc, true, true)
		yys3696 := string(yys3696Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3696 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3696)
		} // end switch yys3696
	} // end for yyj3696
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3698 int
	var yyb3698 bool
	var yyhl3698 bool = l >= 0
	yyj3698++
	if yyhl3698 {
		yyb3698 = yyj3698 > l
	} else {
		yyb3698 = r.CheckBreak()
	}
	if yyb3698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3698++
		if yyhl3698 {
			yyb3698 = yyj3698 > l
		} else {
			yyb3698 = r.CheckBreak()
		}
		if yyb3698 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3698-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3700 := z.EncBinary()
		_ = yym3700
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3701 := !z.EncBinary()
			yy2arr3701 := z.EncBasicHandle().StructToArray
			var yyq3701 [3]bool
			_, _, _ = yysep3701, yyq3701, yy2arr3701
			const yyr3701 bool = false
			yyq3701[0] = x.Kind != ""
			yyq3701[1] = x.APIVersion != ""
			yyq3701[2] = true
			var yynn3701 int
			if yyr3701 || yy2arr3701 {
				r.EncodeArrayStart(3)
			} else {
				yynn3701 = 0
				for _, b := range yyq3701 {
					if b {
						yynn3701++
					}
				}
				r.EncodeMapStart(yynn3701)
				yynn3701 = 0
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3701[0] {
					yym3703 := z.EncBinary()
					_ = yym3703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3701[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3704 := z.EncBinary()
					_ = yym3704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3701[1] {
					yym3706 := z.EncBinary()
					_ = yym3706
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3701[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3707 := z.EncBinary()
					_ = yym3707
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3701[2] {
					yy3709 := &x.Reference
					yy3709.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3701[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3710 := &x.Reference
					yy3710.CodecEncodeSelf(e)
				}
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3711 := z.DecBinary()
	_ = yym3711
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3712 := r.ContainerType()
		if yyct3712 == codecSelferValueTypeMap1234 {
			yyl3712 := r.ReadMapStart()
			if yyl3712 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3712, d)
			}
		} else if yyct3712 == codecSelferValueTypeArray1234 {
			yyl3712 := r.ReadArrayStart()
			if yyl3712 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3712, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3713Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3713Slc
	var yyhl3713 bool = l >= 0
	for yyj3713 := 0; ; yyj3713++ {
		if yyhl3713 {
			if yyj3713 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3713Slc = r.DecodeBytes(yys3713Slc, true, true)
		yys3713 := string(yys3713Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3713 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3716 := &x.Reference
				yyv3716.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3713)
		} // end switch yys3713
	} // end for yyj3713
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3717 int
	var yyb3717 bool
	var yyhl3717 bool = l >= 0
	yyj3717++
	if yyhl3717 {
		yyb3717 = yyj3717 > l
	} else {
		yyb3717 = r.CheckBreak()
	}
	if yyb3717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3717++
	if yyhl3717 {
		yyb3717 = yyj3717 > l
	} else {
		yyb3717 = r.CheckBreak()
	}
	if yyb3717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3717++
	if yyhl3717 {
		yyb3717 = yyj3717 > l
	} else {
		yyb3717 = r.CheckBreak()
	}
	if yyb3717 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3720 := &x.Reference
		yyv3720.CodecDecodeSelf(d)
	}
	for {
		yyj3717++
		if yyhl3717 {
			yyb3717 = yyj3717 > l
		} else {
			yyb3717 = r.CheckBreak()
		}
		if yyb3717 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3717-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3721 := z.EncBinary()
		_ = yym3721
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3722 := !z.EncBinary()
			yy2arr3722 := z.EncBasicHandle().StructToArray
			var yyq3722 [2]bool
			_, _, _ = yysep3722, yyq3722, yy2arr3722
			const yyr3722 bool = false
			yyq3722[0] = x.Component != ""
			yyq3722[1] = x.Host != ""
			var yynn3722 int
			if yyr3722 || yy2arr3722 {
				r.EncodeArrayStart(2)
			} else {
				yynn3722 = 0
				for _, b := range yyq3722 {
					if b {
						yynn3722++
					}
				}
				r.EncodeMapStart(yynn3722)
				yynn3722 = 0
			}
			if yyr3722 || yy2arr3722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3722[0] {
					yym3724 := z.EncBinary()
					_ = yym3724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3722[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3725 := z.EncBinary()
					_ = yym3725
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3722 || yy2arr3722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3722[1] {
					yym3727 := z.EncBinary()
					_ = yym3727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3722[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3728 := z.EncBinary()
					_ = yym3728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3722 || yy2arr3722 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3729 := z.DecBinary()
	_ = yym3729
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3730 := r.ContainerType()
		if yyct3730 == codecSelferValueTypeMap1234 {
			yyl3730 := r.ReadMapStart()
			if yyl3730 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3730, d)
			}
		} else if yyct3730 == codecSelferValueTypeArray1234 {
			yyl3730 := r.ReadArrayStart()
			if yyl3730 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3730, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3731Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3731Slc
	var yyhl3731 bool = l >= 0
	for yyj3731 := 0; ; yyj3731++ {
		if yyhl3731 {
			if yyj3731 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3731Slc = r.DecodeBytes(yys3731Slc, true, true)
		yys3731 := string(yys3731Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3731 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3731)
		} // end switch yys3731
	} // end for yyj3731
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3734 int
	var yyb3734 bool
	var yyhl3734 bool = l >= 0
	yyj3734++
	if yyhl3734 {
		yyb3734 = yyj3734 > l
	} else {
		yyb3734 = r.CheckBreak()
	}
	if yyb3734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3734++
	if yyhl3734 {
		yyb3734 = yyj3734 > l
	} else {
		yyb3734 = r.CheckBreak()
	}
	if yyb3734 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3734++
		if yyhl3734 {
			yyb3734 = yyj3734 > l
		} else {
			yyb3734 = r.CheckBreak()
		}
		if yyb3734 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3734-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3737 := z.EncBinary()
		_ = yym3737
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3738 := !z.EncBinary()
			yy2arr3738 := z.EncBasicHandle().StructToArray
			var yyq3738 [11]bool
			_, _, _ = yysep3738, yyq3738, yy2arr3738
			const yyr3738 bool = false
			yyq3738[0] = x.Kind != ""
			yyq3738[1] = x.APIVersion != ""
			yyq3738[2] = true
			yyq3738[3] = true
			yyq3738[4] = x.Reason != ""
			yyq3738[5] = x.Message != ""
			yyq3738[6] = true
			yyq3738[7] = true
			yyq3738[8] = true
			yyq3738[9] = x.Count != 0
			yyq3738[10] = x.Type != ""
			var yynn3738 int
			if yyr3738 || yy2arr3738 {
				r.EncodeArrayStart(11)
			} else {
				yynn3738 = 0
				for _, b := range yyq3738 {
					if b {
						yynn3738++
					}
				}
				r.EncodeMapStart(yynn3738)
				yynn3738 = 0
			}
			if yyr3738 || yy2arr3738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3738[0] {
					yym3740 := z.EncBinary()
					_ = yym3740
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3738[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3741 := z.EncBinary()
					_ = yym3741
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3738 || yy2arr3738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3738[1] {
					yym3743 := z.EncBinary()
					_ = yym3743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3738[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3744 := z.EncBinary()
					_ = yym3744
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3738 || yy2arr3738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3738[2] {
					yy3746 := &x.ObjectMeta
					yy3746.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3738[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3747 := &x.ObjectMeta
					yy3747.CodecEncodeSelf(e)
				}
			}
			if yyr3738 || yy2arr3738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3738[3] {
					yy3749 := &x.InvolvedObject
					yy3749.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3738[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3750 := &x.InvolvedObject
					yy3750.CodecEncodeSelf(e)
				}
			}
			if yyr3738 || yy2arr3738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3738[4] {
					yym3752 := z.EncBinary()
					_ = yym3752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3738[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3753 := z.EncBinary()
					_ = yym3753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3738 || yy2arr3738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3738[5] {
					yym3755 := z.EncBinary()
					_ = yym3755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3738[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3756 := z.EncBinary()
					_ = yym3756
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3738 || yy2arr3738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3738[6] {
					yy3758 := &x.Source
					yy3758.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3738[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3759 := &x.Source
					yy3759.CodecEncodeSelf(e)
				}
			}
			if yyr3738 || yy2arr3738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3738[7] {
					yy3761 := &x.FirstTimestamp
					yym3762 := z.EncBinary()
					_ = yym3762
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3761) {
					} else if yym3762 {
						z.EncBinaryMarshal(yy3761)
					} else if !yym3762 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3761)
					} else {
						z.EncFallback(yy3761)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3738[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3763 := &x.FirstTimestamp
					yym3764 := z.EncBinary()
					_ = yym3764
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3763) {
					} else if yym3764 {
						z.EncBinaryMarshal(yy3763)
					} else if !yym3764 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3763)
					} else {
						z.EncFallback(yy3763)
					}
				}
			}
			if yyr3738 || yy2arr3738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3738[8] {
					yy3766 := &x.LastTimestamp
					yym3767 := z.EncBinary()
					_ = yym3767
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3766) {
					} else if yym3767 {
						z.EncBinaryMarshal(yy3766)
					} else if !yym3767 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3766)
					} else {
						z.EncFallback(yy3766)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3738[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3768 := &x.LastTimestamp
					yym3769 := z.EncBinary()
					_ = yym3769
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3768) {
					} else if yym3769 {
						z.EncBinaryMarshal(yy3768)
					} else if !yym3769 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3768)
					} else {
						z.EncFallback(yy3768)
					}
				}
			}
			if yyr3738 || yy2arr3738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3738[9] {
					yym3771 := z.EncBinary()
					_ = yym3771
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3738[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3772 := z.EncBinary()
					_ = yym3772
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3738 || yy2arr3738 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3738[10] {
					yym3774 := z.EncBinary()
					_ = yym3774
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3738[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3775 := z.EncBinary()
					_ = yym3775
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3738 || yy2arr3738 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3776 := z.DecBinary()
	_ = yym3776
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3777 := r.ContainerType()
		if yyct3777 == codecSelferValueTypeMap1234 {
			yyl3777 := r.ReadMapStart()
			if yyl3777 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3777, d)
			}
		} else if yyct3777 == codecSelferValueTypeArray1234 {
			yyl3777 := r.ReadArrayStart()
			if yyl3777 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3777, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3778Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3778Slc
	var yyhl3778 bool = l >= 0
	for yyj3778 := 0; ; yyj3778++ {
		if yyhl3778 {
			if yyj3778 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3778Slc = r.DecodeBytes(yys3778Slc, true, true)
		yys3778 := string(yys3778Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3778 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3781 := &x.ObjectMeta
				yyv3781.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3782 := &x.InvolvedObject
				yyv3782.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3785 := &x.Source
				yyv3785.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3786 := &x.FirstTimestamp
				yym3787 := z.DecBinary()
				_ = yym3787
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3786) {
				} else if yym3787 {
					z.DecBinaryUnmarshal(yyv3786)
				} else if !yym3787 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3786)
				} else {
					z.DecFallback(yyv3786, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3788 := &x.LastTimestamp
				yym3789 := z.DecBinary()
				_ = yym3789
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3788) {
				} else if yym3789 {
					z.DecBinaryUnmarshal(yyv3788)
				} else if !yym3789 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3788)
				} else {
					z.DecFallback(yyv3788, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3778)
		} // end switch yys3778
	} // end for yyj3778
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3792 int
	var yyb3792 bool
	var yyhl3792 bool = l >= 0
	yyj3792++
	if yyhl3792 {
		yyb3792 = yyj3792 > l
	} else {
		yyb3792 = r.CheckBreak()
	}
	if yyb3792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3792++
	if yyhl3792 {
		yyb3792 = yyj3792 > l
	} else {
		yyb3792 = r.CheckBreak()
	}
	if yyb3792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3792++
	if yyhl3792 {
		yyb3792 = yyj3792 > l
	} else {
		yyb3792 = r.CheckBreak()
	}
	if yyb3792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3795 := &x.ObjectMeta
		yyv3795.CodecDecodeSelf(d)
	}
	yyj3792++
	if yyhl3792 {
		yyb3792 = yyj3792 > l
	} else {
		yyb3792 = r.CheckBreak()
	}
	if yyb3792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3796 := &x.InvolvedObject
		yyv3796.CodecDecodeSelf(d)
	}
	yyj3792++
	if yyhl3792 {
		yyb3792 = yyj3792 > l
	} else {
		yyb3792 = r.CheckBreak()
	}
	if yyb3792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3792++
	if yyhl3792 {
		yyb3792 = yyj3792 > l
	} else {
		yyb3792 = r.CheckBreak()
	}
	if yyb3792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3792++
	if yyhl3792 {
		yyb3792 = yyj3792 > l
	} else {
		yyb3792 = r.CheckBreak()
	}
	if yyb3792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3799 := &x.Source
		yyv3799.CodecDecodeSelf(d)
	}
	yyj3792++
	if yyhl3792 {
		yyb3792 = yyj3792 > l
	} else {
		yyb3792 = r.CheckBreak()
	}
	if yyb3792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3800 := &x.FirstTimestamp
		yym3801 := z.DecBinary()
		_ = yym3801
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3800) {
		} else if yym3801 {
			z.DecBinaryUnmarshal(yyv3800)
		} else if !yym3801 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3800)
		} else {
			z.DecFallback(yyv3800, false)
		}
	}
	yyj3792++
	if yyhl3792 {
		yyb3792 = yyj3792 > l
	} else {
		yyb3792 = r.CheckBreak()
	}
	if yyb3792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3802 := &x.LastTimestamp
		yym3803 := z.DecBinary()
		_ = yym3803
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3802) {
		} else if yym3803 {
			z.DecBinaryUnmarshal(yyv3802)
		} else if !yym3803 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3802)
		} else {
			z.DecFallback(yyv3802, false)
		}
	}
	yyj3792++
	if yyhl3792 {
		yyb3792 = yyj3792 > l
	} else {
		yyb3792 = r.CheckBreak()
	}
	if yyb3792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3792++
	if yyhl3792 {
		yyb3792 = yyj3792 > l
	} else {
		yyb3792 = r.CheckBreak()
	}
	if yyb3792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3792++
		if yyhl3792 {
			yyb3792 = yyj3792 > l
		} else {
			yyb3792 = r.CheckBreak()
		}
		if yyb3792 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3792-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3806 := z.EncBinary()
		_ = yym3806
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3807 := !z.EncBinary()
			yy2arr3807 := z.EncBasicHandle().StructToArray
			var yyq3807 [4]bool
			_, _, _ = yysep3807, yyq3807, yy2arr3807
			const yyr3807 bool = false
			yyq3807[0] = x.Kind != ""
			yyq3807[1] = x.APIVersion != ""
			yyq3807[2] = true
			var yynn3807 int
			if yyr3807 || yy2arr3807 {
				r.EncodeArrayStart(4)
			} else {
				yynn3807 = 1
				for _, b := range yyq3807 {
					if b {
						yynn3807++
					}
				}
				r.EncodeMapStart(yynn3807)
				yynn3807 = 0
			}
			if yyr3807 || yy2arr3807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3807[0] {
					yym3809 := z.EncBinary()
					_ = yym3809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3807[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3810 := z.EncBinary()
					_ = yym3810
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3807 || yy2arr3807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3807[1] {
					yym3812 := z.EncBinary()
					_ = yym3812
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3807[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3813 := z.EncBinary()
					_ = yym3813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3807 || yy2arr3807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3807[2] {
					yy3815 := &x.ListMeta
					yym3816 := z.EncBinary()
					_ = yym3816
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3815) {
					} else {
						z.EncFallback(yy3815)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3807[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3817 := &x.ListMeta
					yym3818 := z.EncBinary()
					_ = yym3818
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3817) {
					} else {
						z.EncFallback(yy3817)
					}
				}
			}
			if yyr3807 || yy2arr3807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3820 := z.EncBinary()
					_ = yym3820
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3821 := z.EncBinary()
					_ = yym3821
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3807 || yy2arr3807 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3822 := z.DecBinary()
	_ = yym3822
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3823 := r.ContainerType()
		if yyct3823 == codecSelferValueTypeMap1234 {
			yyl3823 := r.ReadMapStart()
			if yyl3823 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3823, d)
			}
		} else if yyct3823 == codecSelferValueTypeArray1234 {
			yyl3823 := r.ReadArrayStart()
			if yyl3823 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3823, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3824Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3824Slc
	var yyhl3824 bool = l >= 0
	for yyj3824 := 0; ; yyj3824++ {
		if yyhl3824 {
			if yyj3824 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3824Slc = r.DecodeBytes(yys3824Slc, true, true)
		yys3824 := string(yys3824Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3824 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3827 := &x.ListMeta
				yym3828 := z.DecBinary()
				_ = yym3828
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3827) {
				} else {
					z.DecFallback(yyv3827, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3829 := &x.Items
				yym3830 := z.DecBinary()
				_ = yym3830
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3829), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3824)
		} // end switch yys3824
	} // end for yyj3824
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3831 int
	var yyb3831 bool
	var yyhl3831 bool = l >= 0
	yyj3831++
	if yyhl3831 {
		yyb3831 = yyj3831 > l
	} else {
		yyb3831 = r.CheckBreak()
	}
	if yyb3831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3831++
	if yyhl3831 {
		yyb3831 = yyj3831 > l
	} else {
		yyb3831 = r.CheckBreak()
	}
	if yyb3831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3831++
	if yyhl3831 {
		yyb3831 = yyj3831 > l
	} else {
		yyb3831 = r.CheckBreak()
	}
	if yyb3831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3834 := &x.ListMeta
		yym3835 := z.DecBinary()
		_ = yym3835
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3834) {
		} else {
			z.DecFallback(yyv3834, false)
		}
	}
	yyj3831++
	if yyhl3831 {
		yyb3831 = yyj3831 > l
	} else {
		yyb3831 = r.CheckBreak()
	}
	if yyb3831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3836 := &x.Items
		yym3837 := z.DecBinary()
		_ = yym3837
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3836), d)
		}
	}
	for {
		yyj3831++
		if yyhl3831 {
			yyb3831 = yyj3831 > l
		} else {
			yyb3831 = r.CheckBreak()
		}
		if yyb3831 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3831-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3838 := z.EncBinary()
		_ = yym3838
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3839 := !z.EncBinary()
			yy2arr3839 := z.EncBasicHandle().StructToArray
			var yyq3839 [4]bool
			_, _, _ = yysep3839, yyq3839, yy2arr3839
			const yyr3839 bool = false
			yyq3839[0] = x.Kind != ""
			yyq3839[1] = x.APIVersion != ""
			yyq3839[2] = true
			var yynn3839 int
			if yyr3839 || yy2arr3839 {
				r.EncodeArrayStart(4)
			} else {
				yynn3839 = 1
				for _, b := range yyq3839 {
					if b {
						yynn3839++
					}
				}
				r.EncodeMapStart(yynn3839)
				yynn3839 = 0
			}
			if yyr3839 || yy2arr3839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3839[0] {
					yym3841 := z.EncBinary()
					_ = yym3841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3839[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3842 := z.EncBinary()
					_ = yym3842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3839 || yy2arr3839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3839[1] {
					yym3844 := z.EncBinary()
					_ = yym3844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3839[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3845 := z.EncBinary()
					_ = yym3845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3839 || yy2arr3839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3839[2] {
					yy3847 := &x.ListMeta
					yym3848 := z.EncBinary()
					_ = yym3848
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3847) {
					} else {
						z.EncFallback(yy3847)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3839[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3849 := &x.ListMeta
					yym3850 := z.EncBinary()
					_ = yym3850
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3849) {
					} else {
						z.EncFallback(yy3849)
					}
				}
			}
			if yyr3839 || yy2arr3839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3852 := z.EncBinary()
					_ = yym3852
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3853 := z.EncBinary()
					_ = yym3853
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr3839 || yy2arr3839 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3854 := z.DecBinary()
	_ = yym3854
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3855 := r.ContainerType()
		if yyct3855 == codecSelferValueTypeMap1234 {
			yyl3855 := r.ReadMapStart()
			if yyl3855 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3855, d)
			}
		} else if yyct3855 == codecSelferValueTypeArray1234 {
			yyl3855 := r.ReadArrayStart()
			if yyl3855 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3855, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3856Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3856Slc
	var yyhl3856 bool = l >= 0
	for yyj3856 := 0; ; yyj3856++ {
		if yyhl3856 {
			if yyj3856 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3856Slc = r.DecodeBytes(yys3856Slc, true, true)
		yys3856 := string(yys3856Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3856 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3859 := &x.ListMeta
				yym3860 := z.DecBinary()
				_ = yym3860
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3859) {
				} else {
					z.DecFallback(yyv3859, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3861 := &x.Items
				yym3862 := z.DecBinary()
				_ = yym3862
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv3861), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3856)
		} // end switch yys3856
	} // end for yyj3856
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3863 int
	var yyb3863 bool
	var yyhl3863 bool = l >= 0
	yyj3863++
	if yyhl3863 {
		yyb3863 = yyj3863 > l
	} else {
		yyb3863 = r.CheckBreak()
	}
	if yyb3863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3863++
	if yyhl3863 {
		yyb3863 = yyj3863 > l
	} else {
		yyb3863 = r.CheckBreak()
	}
	if yyb3863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3863++
	if yyhl3863 {
		yyb3863 = yyj3863 > l
	} else {
		yyb3863 = r.CheckBreak()
	}
	if yyb3863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3866 := &x.ListMeta
		yym3867 := z.DecBinary()
		_ = yym3867
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3866) {
		} else {
			z.DecFallback(yyv3866, false)
		}
	}
	yyj3863++
	if yyhl3863 {
		yyb3863 = yyj3863 > l
	} else {
		yyb3863 = r.CheckBreak()
	}
	if yyb3863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3868 := &x.Items
		yym3869 := z.DecBinary()
		_ = yym3869
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv3868), d)
		}
	}
	for {
		yyj3863++
		if yyhl3863 {
			yyb3863 = yyj3863 > l
		} else {
			yyb3863 = r.CheckBreak()
		}
		if yyb3863 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3863-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3870 := z.EncBinary()
	_ = yym3870
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3871 := z.DecBinary()
	_ = yym3871
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3872 := z.EncBinary()
		_ = yym3872
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3873 := !z.EncBinary()
			yy2arr3873 := z.EncBasicHandle().StructToArray
			var yyq3873 [6]bool
			_, _, _ = yysep3873, yyq3873, yy2arr3873
			const yyr3873 bool = false
			yyq3873[0] = x.Type != ""
			yyq3873[1] = len(x.Max) != 0
			yyq3873[2] = len(x.Min) != 0
			yyq3873[3] = len(x.Default) != 0
			yyq3873[4] = len(x.DefaultRequest) != 0
			yyq3873[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3873 int
			if yyr3873 || yy2arr3873 {
				r.EncodeArrayStart(6)
			} else {
				yynn3873 = 0
				for _, b := range yyq3873 {
					if b {
						yynn3873++
					}
				}
				r.EncodeMapStart(yynn3873)
				yynn3873 = 0
			}
			if yyr3873 || yy2arr3873 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3873[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3873[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3873 || yy2arr3873 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3873[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3873[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3873 || yy2arr3873 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3873[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3873[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3873 || yy2arr3873 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3873[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3873[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3873 || yy2arr3873 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3873[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3873[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3873 || yy2arr3873 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3873[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3873[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3873 || yy2arr3873 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3880 := z.DecBinary()
	_ = yym3880
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3881 := r.ContainerType()
		if yyct3881 == codecSelferValueTypeMap1234 {
			yyl3881 := r.ReadMapStart()
			if yyl3881 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3881, d)
			}
		} else if yyct3881 == codecSelferValueTypeArray1234 {
			yyl3881 := r.ReadArrayStart()
			if yyl3881 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3881, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3882Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3882Slc
	var yyhl3882 bool = l >= 0
	for yyj3882 := 0; ; yyj3882++ {
		if yyhl3882 {
			if yyj3882 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3882Slc = r.DecodeBytes(yys3882Slc, true, true)
		yys3882 := string(yys3882Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3882 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3884 := &x.Max
				yyv3884.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3885 := &x.Min
				yyv3885.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3886 := &x.Default
				yyv3886.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3887 := &x.DefaultRequest
				yyv3887.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3888 := &x.MaxLimitRequestRatio
				yyv3888.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3882)
		} // end switch yys3882
	} // end for yyj3882
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3889 int
	var yyb3889 bool
	var yyhl3889 bool = l >= 0
	yyj3889++
	if yyhl3889 {
		yyb3889 = yyj3889 > l
	} else {
		yyb3889 = r.CheckBreak()
	}
	if yyb3889 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3889++
	if yyhl3889 {
		yyb3889 = yyj3889 > l
	} else {
		yyb3889 = r.CheckBreak()
	}
	if yyb3889 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3891 := &x.Max
		yyv3891.CodecDecodeSelf(d)
	}
	yyj3889++
	if yyhl3889 {
		yyb3889 = yyj3889 > l
	} else {
		yyb3889 = r.CheckBreak()
	}
	if yyb3889 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3892 := &x.Min
		yyv3892.CodecDecodeSelf(d)
	}
	yyj3889++
	if yyhl3889 {
		yyb3889 = yyj3889 > l
	} else {
		yyb3889 = r.CheckBreak()
	}
	if yyb3889 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3893 := &x.Default
		yyv3893.CodecDecodeSelf(d)
	}
	yyj3889++
	if yyhl3889 {
		yyb3889 = yyj3889 > l
	} else {
		yyb3889 = r.CheckBreak()
	}
	if yyb3889 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3894 := &x.DefaultRequest
		yyv3894.CodecDecodeSelf(d)
	}
	yyj3889++
	if yyhl3889 {
		yyb3889 = yyj3889 > l
	} else {
		yyb3889 = r.CheckBreak()
	}
	if yyb3889 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3895 := &x.MaxLimitRequestRatio
		yyv3895.CodecDecodeSelf(d)
	}
	for {
		yyj3889++
		if yyhl3889 {
			yyb3889 = yyj3889 > l
		} else {
			yyb3889 = r.CheckBreak()
		}
		if yyb3889 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3889-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3896 := z.EncBinary()
		_ = yym3896
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3897 := !z.EncBinary()
			yy2arr3897 := z.EncBasicHandle().StructToArray
			var yyq3897 [1]bool
			_, _, _ = yysep3897, yyq3897, yy2arr3897
			const yyr3897 bool = false
			var yynn3897 int
			if yyr3897 || yy2arr3897 {
				r.EncodeArrayStart(1)
			} else {
				yynn3897 = 1
				for _, b := range yyq3897 {
					if b {
						yynn3897++
					}
				}
				r.EncodeMapStart(yynn3897)
				yynn3897 = 0
			}
			if yyr3897 || yy2arr3897 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3899 := z.EncBinary()
					_ = yym3899
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3900 := z.EncBinary()
					_ = yym3900
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3897 || yy2arr3897 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3901 := z.DecBinary()
	_ = yym3901
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3902 := r.ContainerType()
		if yyct3902 == codecSelferValueTypeMap1234 {
			yyl3902 := r.ReadMapStart()
			if yyl3902 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3902, d)
			}
		} else if yyct3902 == codecSelferValueTypeArray1234 {
			yyl3902 := r.ReadArrayStart()
			if yyl3902 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3902, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3903Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3903Slc
	var yyhl3903 bool = l >= 0
	for yyj3903 := 0; ; yyj3903++ {
		if yyhl3903 {
			if yyj3903 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3903Slc = r.DecodeBytes(yys3903Slc, true, true)
		yys3903 := string(yys3903Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3903 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3904 := &x.Limits
				yym3905 := z.DecBinary()
				_ = yym3905
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3904), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3903)
		} // end switch yys3903
	} // end for yyj3903
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3906 int
	var yyb3906 bool
	var yyhl3906 bool = l >= 0
	yyj3906++
	if yyhl3906 {
		yyb3906 = yyj3906 > l
	} else {
		yyb3906 = r.CheckBreak()
	}
	if yyb3906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3907 := &x.Limits
		yym3908 := z.DecBinary()
		_ = yym3908
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3907), d)
		}
	}
	for {
		yyj3906++
		if yyhl3906 {
			yyb3906 = yyj3906 > l
		} else {
			yyb3906 = r.CheckBreak()
		}
		if yyb3906 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3906-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3909 := z.EncBinary()
		_ = yym3909
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3910 := !z.EncBinary()
			yy2arr3910 := z.EncBasicHandle().StructToArray
			var yyq3910 [4]bool
			_, _, _ = yysep3910, yyq3910, yy2arr3910
			const yyr3910 bool = false
			yyq3910[0] = x.Kind != ""
			yyq3910[1] = x.APIVersion != ""
			yyq3910[2] = true
			yyq3910[3] = true
			var yynn3910 int
			if yyr3910 || yy2arr3910 {
				r.EncodeArrayStart(4)
			} else {
				yynn3910 = 0
				for _, b := range yyq3910 {
					if b {
						yynn3910++
					}
				}
				r.EncodeMapStart(yynn3910)
				yynn3910 = 0
			}
			if yyr3910 || yy2arr3910 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3910[0] {
					yym3912 := z.EncBinary()
					_ = yym3912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3910[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3913 := z.EncBinary()
					_ = yym3913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3910 || yy2arr3910 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3910[1] {
					yym3915 := z.EncBinary()
					_ = yym3915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3910[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3916 := z.EncBinary()
					_ = yym3916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3910 || yy2arr3910 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3910[2] {
					yy3918 := &x.ObjectMeta
					yy3918.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3910[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3919 := &x.ObjectMeta
					yy3919.CodecEncodeSelf(e)
				}
			}
			if yyr3910 || yy2arr3910 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3910[3] {
					yy3921 := &x.Spec
					yy3921.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3910[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3922 := &x.Spec
					yy3922.CodecEncodeSelf(e)
				}
			}
			if yyr3910 || yy2arr3910 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3923 := z.DecBinary()
	_ = yym3923
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3924 := r.ContainerType()
		if yyct3924 == codecSelferValueTypeMap1234 {
			yyl3924 := r.ReadMapStart()
			if yyl3924 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3924, d)
			}
		} else if yyct3924 == codecSelferValueTypeArray1234 {
			yyl3924 := r.ReadArrayStart()
			if yyl3924 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3924, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3925Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3925Slc
	var yyhl3925 bool = l >= 0
	for yyj3925 := 0; ; yyj3925++ {
		if yyhl3925 {
			if yyj3925 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3925Slc = r.DecodeBytes(yys3925Slc, true, true)
		yys3925 := string(yys3925Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3925 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3928 := &x.ObjectMeta
				yyv3928.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3929 := &x.Spec
				yyv3929.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3925)
		} // end switch yys3925
	} // end for yyj3925
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3930 int
	var yyb3930 bool
	var yyhl3930 bool = l >= 0
	yyj3930++
	if yyhl3930 {
		yyb3930 = yyj3930 > l
	} else {
		yyb3930 = r.CheckBreak()
	}
	if yyb3930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3930++
	if yyhl3930 {
		yyb3930 = yyj3930 > l
	} else {
		yyb3930 = r.CheckBreak()
	}
	if yyb3930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3930++
	if yyhl3930 {
		yyb3930 = yyj3930 > l
	} else {
		yyb3930 = r.CheckBreak()
	}
	if yyb3930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3933 := &x.ObjectMeta
		yyv3933.CodecDecodeSelf(d)
	}
	yyj3930++
	if yyhl3930 {
		yyb3930 = yyj3930 > l
	} else {
		yyb3930 = r.CheckBreak()
	}
	if yyb3930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3934 := &x.Spec
		yyv3934.CodecDecodeSelf(d)
	}
	for {
		yyj3930++
		if yyhl3930 {
			yyb3930 = yyj3930 > l
		} else {
			yyb3930 = r.CheckBreak()
		}
		if yyb3930 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3930-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3935 := z.EncBinary()
		_ = yym3935
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3936 := !z.EncBinary()
			yy2arr3936 := z.EncBasicHandle().StructToArray
			var yyq3936 [4]bool
			_, _, _ = yysep3936, yyq3936, yy2arr3936
			const yyr3936 bool = false
			yyq3936[0] = x.Kind != ""
			yyq3936[1] = x.APIVersion != ""
			yyq3936[2] = true
			var yynn3936 int
			if yyr3936 || yy2arr3936 {
				r.EncodeArrayStart(4)
			} else {
				yynn3936 = 1
				for _, b := range yyq3936 {
					if b {
						yynn3936++
					}
				}
				r.EncodeMapStart(yynn3936)
				yynn3936 = 0
			}
			if yyr3936 || yy2arr3936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3936[0] {
					yym3938 := z.EncBinary()
					_ = yym3938
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3936[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3939 := z.EncBinary()
					_ = yym3939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3936 || yy2arr3936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3936[1] {
					yym3941 := z.EncBinary()
					_ = yym3941
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3936[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3942 := z.EncBinary()
					_ = yym3942
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3936 || yy2arr3936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3936[2] {
					yy3944 := &x.ListMeta
					yym3945 := z.EncBinary()
					_ = yym3945
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3944) {
					} else {
						z.EncFallback(yy3944)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3936[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3946 := &x.ListMeta
					yym3947 := z.EncBinary()
					_ = yym3947
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3946) {
					} else {
						z.EncFallback(yy3946)
					}
				}
			}
			if yyr3936 || yy2arr3936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3949 := z.EncBinary()
					_ = yym3949
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3950 := z.EncBinary()
					_ = yym3950
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr3936 || yy2arr3936 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3951 := z.DecBinary()
	_ = yym3951
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3952 := r.ContainerType()
		if yyct3952 == codecSelferValueTypeMap1234 {
			yyl3952 := r.ReadMapStart()
			if yyl3952 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3952, d)
			}
		} else if yyct3952 == codecSelferValueTypeArray1234 {
			yyl3952 := r.ReadArrayStart()
			if yyl3952 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3952, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3953Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3953Slc
	var yyhl3953 bool = l >= 0
	for yyj3953 := 0; ; yyj3953++ {
		if yyhl3953 {
			if yyj3953 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3953Slc = r.DecodeBytes(yys3953Slc, true, true)
		yys3953 := string(yys3953Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3953 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3956 := &x.ListMeta
				yym3957 := z.DecBinary()
				_ = yym3957
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3956) {
				} else {
					z.DecFallback(yyv3956, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3958 := &x.Items
				yym3959 := z.DecBinary()
				_ = yym3959
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3958), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3953)
		} // end switch yys3953
	} // end for yyj3953
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3960 int
	var yyb3960 bool
	var yyhl3960 bool = l >= 0
	yyj3960++
	if yyhl3960 {
		yyb3960 = yyj3960 > l
	} else {
		yyb3960 = r.CheckBreak()
	}
	if yyb3960 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3960++
	if yyhl3960 {
		yyb3960 = yyj3960 > l
	} else {
		yyb3960 = r.CheckBreak()
	}
	if yyb3960 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3960++
	if yyhl3960 {
		yyb3960 = yyj3960 > l
	} else {
		yyb3960 = r.CheckBreak()
	}
	if yyb3960 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3963 := &x.ListMeta
		yym3964 := z.DecBinary()
		_ = yym3964
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3963) {
		} else {
			z.DecFallback(yyv3963, false)
		}
	}
	yyj3960++
	if yyhl3960 {
		yyb3960 = yyj3960 > l
	} else {
		yyb3960 = r.CheckBreak()
	}
	if yyb3960 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3965 := &x.Items
		yym3966 := z.DecBinary()
		_ = yym3966
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3965), d)
		}
	}
	for {
		yyj3960++
		if yyhl3960 {
			yyb3960 = yyj3960 > l
		} else {
			yyb3960 = r.CheckBreak()
		}
		if yyb3960 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3960-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3967 := z.EncBinary()
	_ = yym3967
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3968 := z.DecBinary()
	_ = yym3968
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3969 := z.EncBinary()
		_ = yym3969
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3970 := !z.EncBinary()
			yy2arr3970 := z.EncBasicHandle().StructToArray
			var yyq3970 [2]bool
			_, _, _ = yysep3970, yyq3970, yy2arr3970
			const yyr3970 bool = false
			yyq3970[0] = len(x.Hard) != 0
			yyq3970[1] = len(x.Scopes) != 0
			var yynn3970 int
			if yyr3970 || yy2arr3970 {
				r.EncodeArrayStart(2)
			} else {
				yynn3970 = 0
				for _, b := range yyq3970 {
					if b {
						yynn3970++
					}
				}
				r.EncodeMapStart(yynn3970)
				yynn3970 = 0
			}
			if yyr3970 || yy2arr3970 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3970[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3970[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3970 || yy2arr3970 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3970[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym3973 := z.EncBinary()
						_ = yym3973
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3970[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym3974 := z.EncBinary()
						_ = yym3974
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr3970 || yy2arr3970 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3975 := z.DecBinary()
	_ = yym3975
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3976 := r.ContainerType()
		if yyct3976 == codecSelferValueTypeMap1234 {
			yyl3976 := r.ReadMapStart()
			if yyl3976 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3976, d)
			}
		} else if yyct3976 == codecSelferValueTypeArray1234 {
			yyl3976 := r.ReadArrayStart()
			if yyl3976 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3976, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3977Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3977Slc
	var yyhl3977 bool = l >= 0
	for yyj3977 := 0; ; yyj3977++ {
		if yyhl3977 {
			if yyj3977 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3977Slc = r.DecodeBytes(yys3977Slc, true, true)
		yys3977 := string(yys3977Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3977 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3978 := &x.Hard
				yyv3978.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv3979 := &x.Scopes
				yym3980 := z.DecBinary()
				_ = yym3980
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv3979), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3977)
		} // end switch yys3977
	} // end for yyj3977
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3981 int
	var yyb3981 bool
	var yyhl3981 bool = l >= 0
	yyj3981++
	if yyhl3981 {
		yyb3981 = yyj3981 > l
	} else {
		yyb3981 = r.CheckBreak()
	}
	if yyb3981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3982 := &x.Hard
		yyv3982.CodecDecodeSelf(d)
	}
	yyj3981++
	if yyhl3981 {
		yyb3981 = yyj3981 > l
	} else {
		yyb3981 = r.CheckBreak()
	}
	if yyb3981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv3983 := &x.Scopes
		yym3984 := z.DecBinary()
		_ = yym3984
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv3983), d)
		}
	}
	for {
		yyj3981++
		if yyhl3981 {
			yyb3981 = yyj3981 > l
		} else {
			yyb3981 = r.CheckBreak()
		}
		if yyb3981 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3981-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3985 := z.EncBinary()
		_ = yym3985
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3986 := !z.EncBinary()
			yy2arr3986 := z.EncBasicHandle().StructToArray
			var yyq3986 [2]bool
			_, _, _ = yysep3986, yyq3986, yy2arr3986
			const yyr3986 bool = false
			yyq3986[0] = len(x.Hard) != 0
			yyq3986[1] = len(x.Used) != 0
			var yynn3986 int
			if yyr3986 || yy2arr3986 {
				r.EncodeArrayStart(2)
			} else {
				yynn3986 = 0
				for _, b := range yyq3986 {
					if b {
						yynn3986++
					}
				}
				r.EncodeMapStart(yynn3986)
				yynn3986 = 0
			}
			if yyr3986 || yy2arr3986 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3986[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3986[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3986 || yy2arr3986 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3986[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3986[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3986 || yy2arr3986 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3989 := z.DecBinary()
	_ = yym3989
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3990 := r.ContainerType()
		if yyct3990 == codecSelferValueTypeMap1234 {
			yyl3990 := r.ReadMapStart()
			if yyl3990 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3990, d)
			}
		} else if yyct3990 == codecSelferValueTypeArray1234 {
			yyl3990 := r.ReadArrayStart()
			if yyl3990 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3990, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3991Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3991Slc
	var yyhl3991 bool = l >= 0
	for yyj3991 := 0; ; yyj3991++ {
		if yyhl3991 {
			if yyj3991 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3991Slc = r.DecodeBytes(yys3991Slc, true, true)
		yys3991 := string(yys3991Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3991 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3992 := &x.Hard
				yyv3992.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3993 := &x.Used
				yyv3993.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3991)
		} // end switch yys3991
	} // end for yyj3991
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3994 int
	var yyb3994 bool
	var yyhl3994 bool = l >= 0
	yyj3994++
	if yyhl3994 {
		yyb3994 = yyj3994 > l
	} else {
		yyb3994 = r.CheckBreak()
	}
	if yyb3994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3995 := &x.Hard
		yyv3995.CodecDecodeSelf(d)
	}
	yyj3994++
	if yyhl3994 {
		yyb3994 = yyj3994 > l
	} else {
		yyb3994 = r.CheckBreak()
	}
	if yyb3994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3996 := &x.Used
		yyv3996.CodecDecodeSelf(d)
	}
	for {
		yyj3994++
		if yyhl3994 {
			yyb3994 = yyj3994 > l
		} else {
			yyb3994 = r.CheckBreak()
		}
		if yyb3994 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3994-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3997 := z.EncBinary()
		_ = yym3997
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3998 := !z.EncBinary()
			yy2arr3998 := z.EncBasicHandle().StructToArray
			var yyq3998 [5]bool
			_, _, _ = yysep3998, yyq3998, yy2arr3998
			const yyr3998 bool = false
			yyq3998[0] = x.Kind != ""
			yyq3998[1] = x.APIVersion != ""
			yyq3998[2] = true
			yyq3998[3] = true
			yyq3998[4] = true
			var yynn3998 int
			if yyr3998 || yy2arr3998 {
				r.EncodeArrayStart(5)
			} else {
				yynn3998 = 0
				for _, b := range yyq3998 {
					if b {
						yynn3998++
					}
				}
				r.EncodeMapStart(yynn3998)
				yynn3998 = 0
			}
			if yyr3998 || yy2arr3998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3998[0] {
					yym4000 := z.EncBinary()
					_ = yym4000
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3998[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4001 := z.EncBinary()
					_ = yym4001
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3998 || yy2arr3998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3998[1] {
					yym4003 := z.EncBinary()
					_ = yym4003
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3998[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4004 := z.EncBinary()
					_ = yym4004
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3998 || yy2arr3998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3998[2] {
					yy4006 := &x.ObjectMeta
					yy4006.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3998[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4007 := &x.ObjectMeta
					yy4007.CodecEncodeSelf(e)
				}
			}
			if yyr3998 || yy2arr3998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3998[3] {
					yy4009 := &x.Spec
					yy4009.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3998[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4010 := &x.Spec
					yy4010.CodecEncodeSelf(e)
				}
			}
			if yyr3998 || yy2arr3998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3998[4] {
					yy4012 := &x.Status
					yy4012.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3998[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4013 := &x.Status
					yy4013.CodecEncodeSelf(e)
				}
			}
			if yyr3998 || yy2arr3998 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4014 := z.DecBinary()
	_ = yym4014
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4015 := r.ContainerType()
		if yyct4015 == codecSelferValueTypeMap1234 {
			yyl4015 := r.ReadMapStart()
			if yyl4015 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4015, d)
			}
		} else if yyct4015 == codecSelferValueTypeArray1234 {
			yyl4015 := r.ReadArrayStart()
			if yyl4015 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4015, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4016Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4016Slc
	var yyhl4016 bool = l >= 0
	for yyj4016 := 0; ; yyj4016++ {
		if yyhl4016 {
			if yyj4016 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4016Slc = r.DecodeBytes(yys4016Slc, true, true)
		yys4016 := string(yys4016Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4016 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4019 := &x.ObjectMeta
				yyv4019.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4020 := &x.Spec
				yyv4020.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4021 := &x.Status
				yyv4021.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4016)
		} // end switch yys4016
	} // end for yyj4016
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4022 int
	var yyb4022 bool
	var yyhl4022 bool = l >= 0
	yyj4022++
	if yyhl4022 {
		yyb4022 = yyj4022 > l
	} else {
		yyb4022 = r.CheckBreak()
	}
	if yyb4022 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4022++
	if yyhl4022 {
		yyb4022 = yyj4022 > l
	} else {
		yyb4022 = r.CheckBreak()
	}
	if yyb4022 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4022++
	if yyhl4022 {
		yyb4022 = yyj4022 > l
	} else {
		yyb4022 = r.CheckBreak()
	}
	if yyb4022 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4025 := &x.ObjectMeta
		yyv4025.CodecDecodeSelf(d)
	}
	yyj4022++
	if yyhl4022 {
		yyb4022 = yyj4022 > l
	} else {
		yyb4022 = r.CheckBreak()
	}
	if yyb4022 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4026 := &x.Spec
		yyv4026.CodecDecodeSelf(d)
	}
	yyj4022++
	if yyhl4022 {
		yyb4022 = yyj4022 > l
	} else {
		yyb4022 = r.CheckBreak()
	}
	if yyb4022 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4027 := &x.Status
		yyv4027.CodecDecodeSelf(d)
	}
	for {
		yyj4022++
		if yyhl4022 {
			yyb4022 = yyj4022 > l
		} else {
			yyb4022 = r.CheckBreak()
		}
		if yyb4022 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4022-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4028 := z.EncBinary()
		_ = yym4028
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4029 := !z.EncBinary()
			yy2arr4029 := z.EncBasicHandle().StructToArray
			var yyq4029 [4]bool
			_, _, _ = yysep4029, yyq4029, yy2arr4029
			const yyr4029 bool = false
			yyq4029[0] = x.Kind != ""
			yyq4029[1] = x.APIVersion != ""
			yyq4029[2] = true
			var yynn4029 int
			if yyr4029 || yy2arr4029 {
				r.EncodeArrayStart(4)
			} else {
				yynn4029 = 1
				for _, b := range yyq4029 {
					if b {
						yynn4029++
					}
				}
				r.EncodeMapStart(yynn4029)
				yynn4029 = 0
			}
			if yyr4029 || yy2arr4029 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4029[0] {
					yym4031 := z.EncBinary()
					_ = yym4031
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4029[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4032 := z.EncBinary()
					_ = yym4032
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4029 || yy2arr4029 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4029[1] {
					yym4034 := z.EncBinary()
					_ = yym4034
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4029[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4035 := z.EncBinary()
					_ = yym4035
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4029 || yy2arr4029 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4029[2] {
					yy4037 := &x.ListMeta
					yym4038 := z.EncBinary()
					_ = yym4038
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4037) {
					} else {
						z.EncFallback(yy4037)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4029[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4039 := &x.ListMeta
					yym4040 := z.EncBinary()
					_ = yym4040
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4039) {
					} else {
						z.EncFallback(yy4039)
					}
				}
			}
			if yyr4029 || yy2arr4029 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4042 := z.EncBinary()
					_ = yym4042
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4043 := z.EncBinary()
					_ = yym4043
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4029 || yy2arr4029 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4044 := z.DecBinary()
	_ = yym4044
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4045 := r.ContainerType()
		if yyct4045 == codecSelferValueTypeMap1234 {
			yyl4045 := r.ReadMapStart()
			if yyl4045 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4045, d)
			}
		} else if yyct4045 == codecSelferValueTypeArray1234 {
			yyl4045 := r.ReadArrayStart()
			if yyl4045 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4045, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4046Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4046Slc
	var yyhl4046 bool = l >= 0
	for yyj4046 := 0; ; yyj4046++ {
		if yyhl4046 {
			if yyj4046 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4046Slc = r.DecodeBytes(yys4046Slc, true, true)
		yys4046 := string(yys4046Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4046 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4049 := &x.ListMeta
				yym4050 := z.DecBinary()
				_ = yym4050
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4049) {
				} else {
					z.DecFallback(yyv4049, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4051 := &x.Items
				yym4052 := z.DecBinary()
				_ = yym4052
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4051), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4046)
		} // end switch yys4046
	} // end for yyj4046
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4053 int
	var yyb4053 bool
	var yyhl4053 bool = l >= 0
	yyj4053++
	if yyhl4053 {
		yyb4053 = yyj4053 > l
	} else {
		yyb4053 = r.CheckBreak()
	}
	if yyb4053 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4053++
	if yyhl4053 {
		yyb4053 = yyj4053 > l
	} else {
		yyb4053 = r.CheckBreak()
	}
	if yyb4053 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4053++
	if yyhl4053 {
		yyb4053 = yyj4053 > l
	} else {
		yyb4053 = r.CheckBreak()
	}
	if yyb4053 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4056 := &x.ListMeta
		yym4057 := z.DecBinary()
		_ = yym4057
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4056) {
		} else {
			z.DecFallback(yyv4056, false)
		}
	}
	yyj4053++
	if yyhl4053 {
		yyb4053 = yyj4053 > l
	} else {
		yyb4053 = r.CheckBreak()
	}
	if yyb4053 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4058 := &x.Items
		yym4059 := z.DecBinary()
		_ = yym4059
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4058), d)
		}
	}
	for {
		yyj4053++
		if yyhl4053 {
			yyb4053 = yyj4053 > l
		} else {
			yyb4053 = r.CheckBreak()
		}
		if yyb4053 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4053-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4060 := z.EncBinary()
		_ = yym4060
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4061 := !z.EncBinary()
			yy2arr4061 := z.EncBasicHandle().StructToArray
			var yyq4061 [5]bool
			_, _, _ = yysep4061, yyq4061, yy2arr4061
			const yyr4061 bool = false
			yyq4061[0] = x.Kind != ""
			yyq4061[1] = x.APIVersion != ""
			yyq4061[2] = true
			yyq4061[3] = len(x.Data) != 0
			yyq4061[4] = x.Type != ""
			var yynn4061 int
			if yyr4061 || yy2arr4061 {
				r.EncodeArrayStart(5)
			} else {
				yynn4061 = 0
				for _, b := range yyq4061 {
					if b {
						yynn4061++
					}
				}
				r.EncodeMapStart(yynn4061)
				yynn4061 = 0
			}
			if yyr4061 || yy2arr4061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4061[0] {
					yym4063 := z.EncBinary()
					_ = yym4063
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4061[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4064 := z.EncBinary()
					_ = yym4064
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4061 || yy2arr4061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4061[1] {
					yym4066 := z.EncBinary()
					_ = yym4066
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4061[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4067 := z.EncBinary()
					_ = yym4067
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4061 || yy2arr4061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4061[2] {
					yy4069 := &x.ObjectMeta
					yy4069.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4061[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4070 := &x.ObjectMeta
					yy4070.CodecEncodeSelf(e)
				}
			}
			if yyr4061 || yy2arr4061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4061[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4072 := z.EncBinary()
						_ = yym4072
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4061[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4073 := z.EncBinary()
						_ = yym4073
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4061 || yy2arr4061 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4061[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4061[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4061 || yy2arr4061 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4075 := z.DecBinary()
	_ = yym4075
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4076 := r.ContainerType()
		if yyct4076 == codecSelferValueTypeMap1234 {
			yyl4076 := r.ReadMapStart()
			if yyl4076 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4076, d)
			}
		} else if yyct4076 == codecSelferValueTypeArray1234 {
			yyl4076 := r.ReadArrayStart()
			if yyl4076 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4076, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4077Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4077Slc
	var yyhl4077 bool = l >= 0
	for yyj4077 := 0; ; yyj4077++ {
		if yyhl4077 {
			if yyj4077 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4077Slc = r.DecodeBytes(yys4077Slc, true, true)
		yys4077 := string(yys4077Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4077 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4080 := &x.ObjectMeta
				yyv4080.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4081 := &x.Data
				yym4082 := z.DecBinary()
				_ = yym4082
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4081), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4077)
		} // end switch yys4077
	} // end for yyj4077
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4084 int
	var yyb4084 bool
	var yyhl4084 bool = l >= 0
	yyj4084++
	if yyhl4084 {
		yyb4084 = yyj4084 > l
	} else {
		yyb4084 = r.CheckBreak()
	}
	if yyb4084 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4084++
	if yyhl4084 {
		yyb4084 = yyj4084 > l
	} else {
		yyb4084 = r.CheckBreak()
	}
	if yyb4084 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4084++
	if yyhl4084 {
		yyb4084 = yyj4084 > l
	} else {
		yyb4084 = r.CheckBreak()
	}
	if yyb4084 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4087 := &x.ObjectMeta
		yyv4087.CodecDecodeSelf(d)
	}
	yyj4084++
	if yyhl4084 {
		yyb4084 = yyj4084 > l
	} else {
		yyb4084 = r.CheckBreak()
	}
	if yyb4084 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4088 := &x.Data
		yym4089 := z.DecBinary()
		_ = yym4089
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4088), d)
		}
	}
	yyj4084++
	if yyhl4084 {
		yyb4084 = yyj4084 > l
	} else {
		yyb4084 = r.CheckBreak()
	}
	if yyb4084 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4084++
		if yyhl4084 {
			yyb4084 = yyj4084 > l
		} else {
			yyb4084 = r.CheckBreak()
		}
		if yyb4084 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4084-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4091 := z.EncBinary()
	_ = yym4091
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4092 := z.DecBinary()
	_ = yym4092
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4093 := z.EncBinary()
		_ = yym4093
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4094 := !z.EncBinary()
			yy2arr4094 := z.EncBasicHandle().StructToArray
			var yyq4094 [4]bool
			_, _, _ = yysep4094, yyq4094, yy2arr4094
			const yyr4094 bool = false
			yyq4094[0] = x.Kind != ""
			yyq4094[1] = x.APIVersion != ""
			yyq4094[2] = true
			var yynn4094 int
			if yyr4094 || yy2arr4094 {
				r.EncodeArrayStart(4)
			} else {
				yynn4094 = 1
				for _, b := range yyq4094 {
					if b {
						yynn4094++
					}
				}
				r.EncodeMapStart(yynn4094)
				yynn4094 = 0
			}
			if yyr4094 || yy2arr4094 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4094[0] {
					yym4096 := z.EncBinary()
					_ = yym4096
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4094[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4097 := z.EncBinary()
					_ = yym4097
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4094 || yy2arr4094 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4094[1] {
					yym4099 := z.EncBinary()
					_ = yym4099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4094[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4100 := z.EncBinary()
					_ = yym4100
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4094 || yy2arr4094 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4094[2] {
					yy4102 := &x.ListMeta
					yym4103 := z.EncBinary()
					_ = yym4103
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4102) {
					} else {
						z.EncFallback(yy4102)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4094[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4104 := &x.ListMeta
					yym4105 := z.EncBinary()
					_ = yym4105
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4104) {
					} else {
						z.EncFallback(yy4104)
					}
				}
			}
			if yyr4094 || yy2arr4094 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4107 := z.EncBinary()
					_ = yym4107
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4108 := z.EncBinary()
					_ = yym4108
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4094 || yy2arr4094 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4109 := z.DecBinary()
	_ = yym4109
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4110 := r.ContainerType()
		if yyct4110 == codecSelferValueTypeMap1234 {
			yyl4110 := r.ReadMapStart()
			if yyl4110 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4110, d)
			}
		} else if yyct4110 == codecSelferValueTypeArray1234 {
			yyl4110 := r.ReadArrayStart()
			if yyl4110 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4110, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4111Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4111Slc
	var yyhl4111 bool = l >= 0
	for yyj4111 := 0; ; yyj4111++ {
		if yyhl4111 {
			if yyj4111 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4111Slc = r.DecodeBytes(yys4111Slc, true, true)
		yys4111 := string(yys4111Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4111 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4114 := &x.ListMeta
				yym4115 := z.DecBinary()
				_ = yym4115
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4114) {
				} else {
					z.DecFallback(yyv4114, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4116 := &x.Items
				yym4117 := z.DecBinary()
				_ = yym4117
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4116), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4111)
		} // end switch yys4111
	} // end for yyj4111
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4118 int
	var yyb4118 bool
	var yyhl4118 bool = l >= 0
	yyj4118++
	if yyhl4118 {
		yyb4118 = yyj4118 > l
	} else {
		yyb4118 = r.CheckBreak()
	}
	if yyb4118 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4118++
	if yyhl4118 {
		yyb4118 = yyj4118 > l
	} else {
		yyb4118 = r.CheckBreak()
	}
	if yyb4118 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4118++
	if yyhl4118 {
		yyb4118 = yyj4118 > l
	} else {
		yyb4118 = r.CheckBreak()
	}
	if yyb4118 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4121 := &x.ListMeta
		yym4122 := z.DecBinary()
		_ = yym4122
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4121) {
		} else {
			z.DecFallback(yyv4121, false)
		}
	}
	yyj4118++
	if yyhl4118 {
		yyb4118 = yyj4118 > l
	} else {
		yyb4118 = r.CheckBreak()
	}
	if yyb4118 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4123 := &x.Items
		yym4124 := z.DecBinary()
		_ = yym4124
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4123), d)
		}
	}
	for {
		yyj4118++
		if yyhl4118 {
			yyb4118 = yyj4118 > l
		} else {
			yyb4118 = r.CheckBreak()
		}
		if yyb4118 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4118-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4125 := z.EncBinary()
		_ = yym4125
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4126 := !z.EncBinary()
			yy2arr4126 := z.EncBasicHandle().StructToArray
			var yyq4126 [4]bool
			_, _, _ = yysep4126, yyq4126, yy2arr4126
			const yyr4126 bool = false
			yyq4126[0] = x.Kind != ""
			yyq4126[1] = x.APIVersion != ""
			yyq4126[2] = true
			yyq4126[3] = len(x.Data) != 0
			var yynn4126 int
			if yyr4126 || yy2arr4126 {
				r.EncodeArrayStart(4)
			} else {
				yynn4126 = 0
				for _, b := range yyq4126 {
					if b {
						yynn4126++
					}
				}
				r.EncodeMapStart(yynn4126)
				yynn4126 = 0
			}
			if yyr4126 || yy2arr4126 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4126[0] {
					yym4128 := z.EncBinary()
					_ = yym4128
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4126[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4129 := z.EncBinary()
					_ = yym4129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4126 || yy2arr4126 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4126[1] {
					yym4131 := z.EncBinary()
					_ = yym4131
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4126[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4132 := z.EncBinary()
					_ = yym4132
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4126 || yy2arr4126 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4126[2] {
					yy4134 := &x.ObjectMeta
					yy4134.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4126[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4135 := &x.ObjectMeta
					yy4135.CodecEncodeSelf(e)
				}
			}
			if yyr4126 || yy2arr4126 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4126[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4137 := z.EncBinary()
						_ = yym4137
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4126[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4138 := z.EncBinary()
						_ = yym4138
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4126 || yy2arr4126 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4139 := z.DecBinary()
	_ = yym4139
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4140 := r.ContainerType()
		if yyct4140 == codecSelferValueTypeMap1234 {
			yyl4140 := r.ReadMapStart()
			if yyl4140 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4140, d)
			}
		} else if yyct4140 == codecSelferValueTypeArray1234 {
			yyl4140 := r.ReadArrayStart()
			if yyl4140 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4140, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4141Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4141Slc
	var yyhl4141 bool = l >= 0
	for yyj4141 := 0; ; yyj4141++ {
		if yyhl4141 {
			if yyj4141 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4141Slc = r.DecodeBytes(yys4141Slc, true, true)
		yys4141 := string(yys4141Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4141 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4144 := &x.ObjectMeta
				yyv4144.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4145 := &x.Data
				yym4146 := z.DecBinary()
				_ = yym4146
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4145, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4141)
		} // end switch yys4141
	} // end for yyj4141
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4147 int
	var yyb4147 bool
	var yyhl4147 bool = l >= 0
	yyj4147++
	if yyhl4147 {
		yyb4147 = yyj4147 > l
	} else {
		yyb4147 = r.CheckBreak()
	}
	if yyb4147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4147++
	if yyhl4147 {
		yyb4147 = yyj4147 > l
	} else {
		yyb4147 = r.CheckBreak()
	}
	if yyb4147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4147++
	if yyhl4147 {
		yyb4147 = yyj4147 > l
	} else {
		yyb4147 = r.CheckBreak()
	}
	if yyb4147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4150 := &x.ObjectMeta
		yyv4150.CodecDecodeSelf(d)
	}
	yyj4147++
	if yyhl4147 {
		yyb4147 = yyj4147 > l
	} else {
		yyb4147 = r.CheckBreak()
	}
	if yyb4147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4151 := &x.Data
		yym4152 := z.DecBinary()
		_ = yym4152
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4151, false, d)
		}
	}
	for {
		yyj4147++
		if yyhl4147 {
			yyb4147 = yyj4147 > l
		} else {
			yyb4147 = r.CheckBreak()
		}
		if yyb4147 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4147-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4153 := z.EncBinary()
		_ = yym4153
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4154 := !z.EncBinary()
			yy2arr4154 := z.EncBasicHandle().StructToArray
			var yyq4154 [4]bool
			_, _, _ = yysep4154, yyq4154, yy2arr4154
			const yyr4154 bool = false
			yyq4154[0] = x.Kind != ""
			yyq4154[1] = x.APIVersion != ""
			yyq4154[2] = true
			var yynn4154 int
			if yyr4154 || yy2arr4154 {
				r.EncodeArrayStart(4)
			} else {
				yynn4154 = 1
				for _, b := range yyq4154 {
					if b {
						yynn4154++
					}
				}
				r.EncodeMapStart(yynn4154)
				yynn4154 = 0
			}
			if yyr4154 || yy2arr4154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4154[0] {
					yym4156 := z.EncBinary()
					_ = yym4156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4154[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4157 := z.EncBinary()
					_ = yym4157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4154 || yy2arr4154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4154[1] {
					yym4159 := z.EncBinary()
					_ = yym4159
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4154[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4160 := z.EncBinary()
					_ = yym4160
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4154 || yy2arr4154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4154[2] {
					yy4162 := &x.ListMeta
					yym4163 := z.EncBinary()
					_ = yym4163
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4162) {
					} else {
						z.EncFallback(yy4162)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4154[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4164 := &x.ListMeta
					yym4165 := z.EncBinary()
					_ = yym4165
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4164) {
					} else {
						z.EncFallback(yy4164)
					}
				}
			}
			if yyr4154 || yy2arr4154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4167 := z.EncBinary()
					_ = yym4167
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4168 := z.EncBinary()
					_ = yym4168
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4154 || yy2arr4154 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4169 := z.DecBinary()
	_ = yym4169
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4170 := r.ContainerType()
		if yyct4170 == codecSelferValueTypeMap1234 {
			yyl4170 := r.ReadMapStart()
			if yyl4170 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4170, d)
			}
		} else if yyct4170 == codecSelferValueTypeArray1234 {
			yyl4170 := r.ReadArrayStart()
			if yyl4170 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4170, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4171Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4171Slc
	var yyhl4171 bool = l >= 0
	for yyj4171 := 0; ; yyj4171++ {
		if yyhl4171 {
			if yyj4171 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4171Slc = r.DecodeBytes(yys4171Slc, true, true)
		yys4171 := string(yys4171Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4171 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4174 := &x.ListMeta
				yym4175 := z.DecBinary()
				_ = yym4175
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4174) {
				} else {
					z.DecFallback(yyv4174, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4176 := &x.Items
				yym4177 := z.DecBinary()
				_ = yym4177
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4176), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4171)
		} // end switch yys4171
	} // end for yyj4171
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4178 int
	var yyb4178 bool
	var yyhl4178 bool = l >= 0
	yyj4178++
	if yyhl4178 {
		yyb4178 = yyj4178 > l
	} else {
		yyb4178 = r.CheckBreak()
	}
	if yyb4178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4178++
	if yyhl4178 {
		yyb4178 = yyj4178 > l
	} else {
		yyb4178 = r.CheckBreak()
	}
	if yyb4178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4178++
	if yyhl4178 {
		yyb4178 = yyj4178 > l
	} else {
		yyb4178 = r.CheckBreak()
	}
	if yyb4178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4181 := &x.ListMeta
		yym4182 := z.DecBinary()
		_ = yym4182
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4181) {
		} else {
			z.DecFallback(yyv4181, false)
		}
	}
	yyj4178++
	if yyhl4178 {
		yyb4178 = yyj4178 > l
	} else {
		yyb4178 = r.CheckBreak()
	}
	if yyb4178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4183 := &x.Items
		yym4184 := z.DecBinary()
		_ = yym4184
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4183), d)
		}
	}
	for {
		yyj4178++
		if yyhl4178 {
			yyb4178 = yyj4178 > l
		} else {
			yyb4178 = r.CheckBreak()
		}
		if yyb4178 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4178-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4185 := z.EncBinary()
	_ = yym4185
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4186 := z.DecBinary()
	_ = yym4186
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4187 := z.EncBinary()
	_ = yym4187
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4188 := z.DecBinary()
	_ = yym4188
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4189 := z.EncBinary()
		_ = yym4189
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4190 := !z.EncBinary()
			yy2arr4190 := z.EncBasicHandle().StructToArray
			var yyq4190 [4]bool
			_, _, _ = yysep4190, yyq4190, yy2arr4190
			const yyr4190 bool = false
			yyq4190[2] = x.Message != ""
			yyq4190[3] = x.Error != ""
			var yynn4190 int
			if yyr4190 || yy2arr4190 {
				r.EncodeArrayStart(4)
			} else {
				yynn4190 = 2
				for _, b := range yyq4190 {
					if b {
						yynn4190++
					}
				}
				r.EncodeMapStart(yynn4190)
				yynn4190 = 0
			}
			if yyr4190 || yy2arr4190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4190 || yy2arr4190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4190 || yy2arr4190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4190[2] {
					yym4194 := z.EncBinary()
					_ = yym4194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4190[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4195 := z.EncBinary()
					_ = yym4195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4190 || yy2arr4190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4190[3] {
					yym4197 := z.EncBinary()
					_ = yym4197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4190[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4198 := z.EncBinary()
					_ = yym4198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4190 || yy2arr4190 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4199 := z.DecBinary()
	_ = yym4199
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4200 := r.ContainerType()
		if yyct4200 == codecSelferValueTypeMap1234 {
			yyl4200 := r.ReadMapStart()
			if yyl4200 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4200, d)
			}
		} else if yyct4200 == codecSelferValueTypeArray1234 {
			yyl4200 := r.ReadArrayStart()
			if yyl4200 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4200, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4201Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4201Slc
	var yyhl4201 bool = l >= 0
	for yyj4201 := 0; ; yyj4201++ {
		if yyhl4201 {
			if yyj4201 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4201Slc = r.DecodeBytes(yys4201Slc, true, true)
		yys4201 := string(yys4201Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4201 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4201)
		} // end switch yys4201
	} // end for yyj4201
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4206 int
	var yyb4206 bool
	var yyhl4206 bool = l >= 0
	yyj4206++
	if yyhl4206 {
		yyb4206 = yyj4206 > l
	} else {
		yyb4206 = r.CheckBreak()
	}
	if yyb4206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4206++
	if yyhl4206 {
		yyb4206 = yyj4206 > l
	} else {
		yyb4206 = r.CheckBreak()
	}
	if yyb4206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4206++
	if yyhl4206 {
		yyb4206 = yyj4206 > l
	} else {
		yyb4206 = r.CheckBreak()
	}
	if yyb4206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4206++
	if yyhl4206 {
		yyb4206 = yyj4206 > l
	} else {
		yyb4206 = r.CheckBreak()
	}
	if yyb4206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4206++
		if yyhl4206 {
			yyb4206 = yyj4206 > l
		} else {
			yyb4206 = r.CheckBreak()
		}
		if yyb4206 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4206-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4211 := z.EncBinary()
		_ = yym4211
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4212 := !z.EncBinary()
			yy2arr4212 := z.EncBasicHandle().StructToArray
			var yyq4212 [4]bool
			_, _, _ = yysep4212, yyq4212, yy2arr4212
			const yyr4212 bool = false
			yyq4212[0] = x.Kind != ""
			yyq4212[1] = x.APIVersion != ""
			yyq4212[2] = true
			yyq4212[3] = len(x.Conditions) != 0
			var yynn4212 int
			if yyr4212 || yy2arr4212 {
				r.EncodeArrayStart(4)
			} else {
				yynn4212 = 0
				for _, b := range yyq4212 {
					if b {
						yynn4212++
					}
				}
				r.EncodeMapStart(yynn4212)
				yynn4212 = 0
			}
			if yyr4212 || yy2arr4212 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4212[0] {
					yym4214 := z.EncBinary()
					_ = yym4214
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4212[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4215 := z.EncBinary()
					_ = yym4215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4212 || yy2arr4212 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4212[1] {
					yym4217 := z.EncBinary()
					_ = yym4217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4212[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4218 := z.EncBinary()
					_ = yym4218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4212 || yy2arr4212 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4212[2] {
					yy4220 := &x.ObjectMeta
					yy4220.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4212[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4221 := &x.ObjectMeta
					yy4221.CodecEncodeSelf(e)
				}
			}
			if yyr4212 || yy2arr4212 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4212[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4223 := z.EncBinary()
						_ = yym4223
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4212[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4224 := z.EncBinary()
						_ = yym4224
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4212 || yy2arr4212 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4225 := z.DecBinary()
	_ = yym4225
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4226 := r.ContainerType()
		if yyct4226 == codecSelferValueTypeMap1234 {
			yyl4226 := r.ReadMapStart()
			if yyl4226 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4226, d)
			}
		} else if yyct4226 == codecSelferValueTypeArray1234 {
			yyl4226 := r.ReadArrayStart()
			if yyl4226 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4226, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4227Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4227Slc
	var yyhl4227 bool = l >= 0
	for yyj4227 := 0; ; yyj4227++ {
		if yyhl4227 {
			if yyj4227 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4227Slc = r.DecodeBytes(yys4227Slc, true, true)
		yys4227 := string(yys4227Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4227 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4230 := &x.ObjectMeta
				yyv4230.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4231 := &x.Conditions
				yym4232 := z.DecBinary()
				_ = yym4232
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4231), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4227)
		} // end switch yys4227
	} // end for yyj4227
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4233 int
	var yyb4233 bool
	var yyhl4233 bool = l >= 0
	yyj4233++
	if yyhl4233 {
		yyb4233 = yyj4233 > l
	} else {
		yyb4233 = r.CheckBreak()
	}
	if yyb4233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4233++
	if yyhl4233 {
		yyb4233 = yyj4233 > l
	} else {
		yyb4233 = r.CheckBreak()
	}
	if yyb4233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4233++
	if yyhl4233 {
		yyb4233 = yyj4233 > l
	} else {
		yyb4233 = r.CheckBreak()
	}
	if yyb4233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4236 := &x.ObjectMeta
		yyv4236.CodecDecodeSelf(d)
	}
	yyj4233++
	if yyhl4233 {
		yyb4233 = yyj4233 > l
	} else {
		yyb4233 = r.CheckBreak()
	}
	if yyb4233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4237 := &x.Conditions
		yym4238 := z.DecBinary()
		_ = yym4238
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4237), d)
		}
	}
	for {
		yyj4233++
		if yyhl4233 {
			yyb4233 = yyj4233 > l
		} else {
			yyb4233 = r.CheckBreak()
		}
		if yyb4233 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4233-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4239 := z.EncBinary()
		_ = yym4239
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4240 := !z.EncBinary()
			yy2arr4240 := z.EncBasicHandle().StructToArray
			var yyq4240 [4]bool
			_, _, _ = yysep4240, yyq4240, yy2arr4240
			const yyr4240 bool = false
			yyq4240[0] = x.Kind != ""
			yyq4240[1] = x.APIVersion != ""
			yyq4240[2] = true
			var yynn4240 int
			if yyr4240 || yy2arr4240 {
				r.EncodeArrayStart(4)
			} else {
				yynn4240 = 1
				for _, b := range yyq4240 {
					if b {
						yynn4240++
					}
				}
				r.EncodeMapStart(yynn4240)
				yynn4240 = 0
			}
			if yyr4240 || yy2arr4240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4240[0] {
					yym4242 := z.EncBinary()
					_ = yym4242
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4240[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4243 := z.EncBinary()
					_ = yym4243
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4240 || yy2arr4240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4240[1] {
					yym4245 := z.EncBinary()
					_ = yym4245
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4240[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4246 := z.EncBinary()
					_ = yym4246
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4240 || yy2arr4240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4240[2] {
					yy4248 := &x.ListMeta
					yym4249 := z.EncBinary()
					_ = yym4249
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4248) {
					} else {
						z.EncFallback(yy4248)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4240[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4250 := &x.ListMeta
					yym4251 := z.EncBinary()
					_ = yym4251
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4250) {
					} else {
						z.EncFallback(yy4250)
					}
				}
			}
			if yyr4240 || yy2arr4240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4253 := z.EncBinary()
					_ = yym4253
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4254 := z.EncBinary()
					_ = yym4254
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4240 || yy2arr4240 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4255 := z.DecBinary()
	_ = yym4255
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4256 := r.ContainerType()
		if yyct4256 == codecSelferValueTypeMap1234 {
			yyl4256 := r.ReadMapStart()
			if yyl4256 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4256, d)
			}
		} else if yyct4256 == codecSelferValueTypeArray1234 {
			yyl4256 := r.ReadArrayStart()
			if yyl4256 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4256, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4257Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4257Slc
	var yyhl4257 bool = l >= 0
	for yyj4257 := 0; ; yyj4257++ {
		if yyhl4257 {
			if yyj4257 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4257Slc = r.DecodeBytes(yys4257Slc, true, true)
		yys4257 := string(yys4257Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4257 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4260 := &x.ListMeta
				yym4261 := z.DecBinary()
				_ = yym4261
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4260) {
				} else {
					z.DecFallback(yyv4260, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4262 := &x.Items
				yym4263 := z.DecBinary()
				_ = yym4263
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4262), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4257)
		} // end switch yys4257
	} // end for yyj4257
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4264 int
	var yyb4264 bool
	var yyhl4264 bool = l >= 0
	yyj4264++
	if yyhl4264 {
		yyb4264 = yyj4264 > l
	} else {
		yyb4264 = r.CheckBreak()
	}
	if yyb4264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4264++
	if yyhl4264 {
		yyb4264 = yyj4264 > l
	} else {
		yyb4264 = r.CheckBreak()
	}
	if yyb4264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4264++
	if yyhl4264 {
		yyb4264 = yyj4264 > l
	} else {
		yyb4264 = r.CheckBreak()
	}
	if yyb4264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4267 := &x.ListMeta
		yym4268 := z.DecBinary()
		_ = yym4268
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4267) {
		} else {
			z.DecFallback(yyv4267, false)
		}
	}
	yyj4264++
	if yyhl4264 {
		yyb4264 = yyj4264 > l
	} else {
		yyb4264 = r.CheckBreak()
	}
	if yyb4264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4269 := &x.Items
		yym4270 := z.DecBinary()
		_ = yym4270
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4269), d)
		}
	}
	for {
		yyj4264++
		if yyhl4264 {
			yyb4264 = yyj4264 > l
		} else {
			yyb4264 = r.CheckBreak()
		}
		if yyb4264 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4264-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4271 := z.EncBinary()
		_ = yym4271
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4272 := !z.EncBinary()
			yy2arr4272 := z.EncBasicHandle().StructToArray
			var yyq4272 [6]bool
			_, _, _ = yysep4272, yyq4272, yy2arr4272
			const yyr4272 bool = false
			yyq4272[0] = x.Capabilities != nil
			yyq4272[1] = x.Privileged != nil
			yyq4272[2] = x.SELinuxOptions != nil
			yyq4272[3] = x.RunAsUser != nil
			yyq4272[4] = x.RunAsNonRoot != nil
			yyq4272[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4272 int
			if yyr4272 || yy2arr4272 {
				r.EncodeArrayStart(6)
			} else {
				yynn4272 = 0
				for _, b := range yyq4272 {
					if b {
						yynn4272++
					}
				}
				r.EncodeMapStart(yynn4272)
				yynn4272 = 0
			}
			if yyr4272 || yy2arr4272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4272[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4272[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4272 || yy2arr4272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4272[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4275 := *x.Privileged
						yym4276 := z.EncBinary()
						_ = yym4276
						if false {
						} else {
							r.EncodeBool(bool(yy4275))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4272[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4277 := *x.Privileged
						yym4278 := z.EncBinary()
						_ = yym4278
						if false {
						} else {
							r.EncodeBool(bool(yy4277))
						}
					}
				}
			}
			if yyr4272 || yy2arr4272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4272[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4272[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4272 || yy2arr4272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4272[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4281 := *x.RunAsUser
						yym4282 := z.EncBinary()
						_ = yym4282
						if false {
						} else {
							r.EncodeInt(int64(yy4281))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4272[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4283 := *x.RunAsUser
						yym4284 := z.EncBinary()
						_ = yym4284
						if false {
						} else {
							r.EncodeInt(int64(yy4283))
						}
					}
				}
			}
			if yyr4272 || yy2arr4272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4272[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4286 := *x.RunAsNonRoot
						yym4287 := z.EncBinary()
						_ = yym4287
						if false {
						} else {
							r.EncodeBool(bool(yy4286))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4272[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4288 := *x.RunAsNonRoot
						yym4289 := z.EncBinary()
						_ = yym4289
						if false {
						} else {
							r.EncodeBool(bool(yy4288))
						}
					}
				}
			}
			if yyr4272 || yy2arr4272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4272[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4291 := *x.ReadOnlyRootFilesystem
						yym4292 := z.EncBinary()
						_ = yym4292
						if false {
						} else {
							r.EncodeBool(bool(yy4291))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4272[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4293 := *x.ReadOnlyRootFilesystem
						yym4294 := z.EncBinary()
						_ = yym4294
						if false {
						} else {
							r.EncodeBool(bool(yy4293))
						}
					}
				}
			}
			if yyr4272 || yy2arr4272 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4295 := z.DecBinary()
	_ = yym4295
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4296 := r.ContainerType()
		if yyct4296 == codecSelferValueTypeMap1234 {
			yyl4296 := r.ReadMapStart()
			if yyl4296 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4296, d)
			}
		} else if yyct4296 == codecSelferValueTypeArray1234 {
			yyl4296 := r.ReadArrayStart()
			if yyl4296 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4296, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4297Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4297Slc
	var yyhl4297 bool = l >= 0
	for yyj4297 := 0; ; yyj4297++ {
		if yyhl4297 {
			if yyj4297 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4297Slc = r.DecodeBytes(yys4297Slc, true, true)
		yys4297 := string(yys4297Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4297 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4300 := z.DecBinary()
				_ = yym4300
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4303 := z.DecBinary()
				_ = yym4303
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4305 := z.DecBinary()
				_ = yym4305
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4307 := z.DecBinary()
				_ = yym4307
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4297)
		} // end switch yys4297
	} // end for yyj4297
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4308 int
	var yyb4308 bool
	var yyhl4308 bool = l >= 0
	yyj4308++
	if yyhl4308 {
		yyb4308 = yyj4308 > l
	} else {
		yyb4308 = r.CheckBreak()
	}
	if yyb4308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4308++
	if yyhl4308 {
		yyb4308 = yyj4308 > l
	} else {
		yyb4308 = r.CheckBreak()
	}
	if yyb4308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4311 := z.DecBinary()
		_ = yym4311
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4308++
	if yyhl4308 {
		yyb4308 = yyj4308 > l
	} else {
		yyb4308 = r.CheckBreak()
	}
	if yyb4308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4308++
	if yyhl4308 {
		yyb4308 = yyj4308 > l
	} else {
		yyb4308 = r.CheckBreak()
	}
	if yyb4308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4314 := z.DecBinary()
		_ = yym4314
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4308++
	if yyhl4308 {
		yyb4308 = yyj4308 > l
	} else {
		yyb4308 = r.CheckBreak()
	}
	if yyb4308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4316 := z.DecBinary()
		_ = yym4316
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4308++
	if yyhl4308 {
		yyb4308 = yyj4308 > l
	} else {
		yyb4308 = r.CheckBreak()
	}
	if yyb4308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4318 := z.DecBinary()
		_ = yym4318
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4308++
		if yyhl4308 {
			yyb4308 = yyj4308 > l
		} else {
			yyb4308 = r.CheckBreak()
		}
		if yyb4308 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4308-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4319 := z.EncBinary()
		_ = yym4319
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4320 := !z.EncBinary()
			yy2arr4320 := z.EncBasicHandle().StructToArray
			var yyq4320 [4]bool
			_, _, _ = yysep4320, yyq4320, yy2arr4320
			const yyr4320 bool = false
			yyq4320[0] = x.User != ""
			yyq4320[1] = x.Role != ""
			yyq4320[2] = x.Type != ""
			yyq4320[3] = x.Level != ""
			var yynn4320 int
			if yyr4320 || yy2arr4320 {
				r.EncodeArrayStart(4)
			} else {
				yynn4320 = 0
				for _, b := range yyq4320 {
					if b {
						yynn4320++
					}
				}
				r.EncodeMapStart(yynn4320)
				yynn4320 = 0
			}
			if yyr4320 || yy2arr4320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4320[0] {
					yym4322 := z.EncBinary()
					_ = yym4322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4320[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4323 := z.EncBinary()
					_ = yym4323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4320 || yy2arr4320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4320[1] {
					yym4325 := z.EncBinary()
					_ = yym4325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4320[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4326 := z.EncBinary()
					_ = yym4326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4320 || yy2arr4320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4320[2] {
					yym4328 := z.EncBinary()
					_ = yym4328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4320[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4329 := z.EncBinary()
					_ = yym4329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4320 || yy2arr4320 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4320[3] {
					yym4331 := z.EncBinary()
					_ = yym4331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4320[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4332 := z.EncBinary()
					_ = yym4332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4320 || yy2arr4320 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4333 := z.DecBinary()
	_ = yym4333
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4334 := r.ContainerType()
		if yyct4334 == codecSelferValueTypeMap1234 {
			yyl4334 := r.ReadMapStart()
			if yyl4334 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4334, d)
			}
		} else if yyct4334 == codecSelferValueTypeArray1234 {
			yyl4334 := r.ReadArrayStart()
			if yyl4334 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4334, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4335Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4335Slc
	var yyhl4335 bool = l >= 0
	for yyj4335 := 0; ; yyj4335++ {
		if yyhl4335 {
			if yyj4335 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4335Slc = r.DecodeBytes(yys4335Slc, true, true)
		yys4335 := string(yys4335Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4335 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4335)
		} // end switch yys4335
	} // end for yyj4335
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4340 int
	var yyb4340 bool
	var yyhl4340 bool = l >= 0
	yyj4340++
	if yyhl4340 {
		yyb4340 = yyj4340 > l
	} else {
		yyb4340 = r.CheckBreak()
	}
	if yyb4340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4340++
	if yyhl4340 {
		yyb4340 = yyj4340 > l
	} else {
		yyb4340 = r.CheckBreak()
	}
	if yyb4340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4340++
	if yyhl4340 {
		yyb4340 = yyj4340 > l
	} else {
		yyb4340 = r.CheckBreak()
	}
	if yyb4340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4340++
	if yyhl4340 {
		yyb4340 = yyj4340 > l
	} else {
		yyb4340 = r.CheckBreak()
	}
	if yyb4340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4340++
		if yyhl4340 {
			yyb4340 = yyj4340 > l
		} else {
			yyb4340 = r.CheckBreak()
		}
		if yyb4340 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4340-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4345 := z.EncBinary()
		_ = yym4345
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4346 := !z.EncBinary()
			yy2arr4346 := z.EncBasicHandle().StructToArray
			var yyq4346 [5]bool
			_, _, _ = yysep4346, yyq4346, yy2arr4346
			const yyr4346 bool = false
			yyq4346[0] = x.Kind != ""
			yyq4346[1] = x.APIVersion != ""
			yyq4346[2] = true
			var yynn4346 int
			if yyr4346 || yy2arr4346 {
				r.EncodeArrayStart(5)
			} else {
				yynn4346 = 2
				for _, b := range yyq4346 {
					if b {
						yynn4346++
					}
				}
				r.EncodeMapStart(yynn4346)
				yynn4346 = 0
			}
			if yyr4346 || yy2arr4346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4346[0] {
					yym4348 := z.EncBinary()
					_ = yym4348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4346[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4349 := z.EncBinary()
					_ = yym4349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4346 || yy2arr4346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4346[1] {
					yym4351 := z.EncBinary()
					_ = yym4351
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4346[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4352 := z.EncBinary()
					_ = yym4352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4346 || yy2arr4346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4346[2] {
					yy4354 := &x.ObjectMeta
					yy4354.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4346[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4355 := &x.ObjectMeta
					yy4355.CodecEncodeSelf(e)
				}
			}
			if yyr4346 || yy2arr4346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4357 := z.EncBinary()
				_ = yym4357
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4358 := z.EncBinary()
				_ = yym4358
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4346 || yy2arr4346 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4360 := z.EncBinary()
					_ = yym4360
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4361 := z.EncBinary()
					_ = yym4361
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4346 || yy2arr4346 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4362 := z.DecBinary()
	_ = yym4362
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4363 := r.ContainerType()
		if yyct4363 == codecSelferValueTypeMap1234 {
			yyl4363 := r.ReadMapStart()
			if yyl4363 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4363, d)
			}
		} else if yyct4363 == codecSelferValueTypeArray1234 {
			yyl4363 := r.ReadArrayStart()
			if yyl4363 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4363, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4364Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4364Slc
	var yyhl4364 bool = l >= 0
	for yyj4364 := 0; ; yyj4364++ {
		if yyhl4364 {
			if yyj4364 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4364Slc = r.DecodeBytes(yys4364Slc, true, true)
		yys4364 := string(yys4364Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4364 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4367 := &x.ObjectMeta
				yyv4367.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4369 := &x.Data
				yym4370 := z.DecBinary()
				_ = yym4370
				if false {
				} else {
					*yyv4369 = r.DecodeBytes(*(*[]byte)(yyv4369), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4364)
		} // end switch yys4364
	} // end for yyj4364
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4371 int
	var yyb4371 bool
	var yyhl4371 bool = l >= 0
	yyj4371++
	if yyhl4371 {
		yyb4371 = yyj4371 > l
	} else {
		yyb4371 = r.CheckBreak()
	}
	if yyb4371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4371++
	if yyhl4371 {
		yyb4371 = yyj4371 > l
	} else {
		yyb4371 = r.CheckBreak()
	}
	if yyb4371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4371++
	if yyhl4371 {
		yyb4371 = yyj4371 > l
	} else {
		yyb4371 = r.CheckBreak()
	}
	if yyb4371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4374 := &x.ObjectMeta
		yyv4374.CodecDecodeSelf(d)
	}
	yyj4371++
	if yyhl4371 {
		yyb4371 = yyj4371 > l
	} else {
		yyb4371 = r.CheckBreak()
	}
	if yyb4371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4371++
	if yyhl4371 {
		yyb4371 = yyj4371 > l
	} else {
		yyb4371 = r.CheckBreak()
	}
	if yyb4371 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4376 := &x.Data
		yym4377 := z.DecBinary()
		_ = yym4377
		if false {
		} else {
			*yyv4376 = r.DecodeBytes(*(*[]byte)(yyv4376), false, false)
		}
	}
	for {
		yyj4371++
		if yyhl4371 {
			yyb4371 = yyj4371 > l
		} else {
			yyb4371 = r.CheckBreak()
		}
		if yyb4371 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4371-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4378 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4379 := &yyv4378
		yy4379.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4380 := *v
	yyh4380, yyl4380 := z.DecSliceHelperStart()
	var yyc4380 bool
	if yyl4380 == 0 {
		if yyv4380 == nil {
			yyv4380 = []OwnerReference{}
			yyc4380 = true
		} else if len(yyv4380) != 0 {
			yyv4380 = yyv4380[:0]
			yyc4380 = true
		}
	} else if yyl4380 > 0 {
		var yyrr4380, yyrl4380 int
		var yyrt4380 bool
		if yyl4380 > cap(yyv4380) {

			yyrg4380 := len(yyv4380) > 0
			yyv24380 := yyv4380
			yyrl4380, yyrt4380 = z.DecInferLen(yyl4380, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4380 {
				if yyrl4380 <= cap(yyv4380) {
					yyv4380 = yyv4380[:yyrl4380]
				} else {
					yyv4380 = make([]OwnerReference, yyrl4380)
				}
			} else {
				yyv4380 = make([]OwnerReference, yyrl4380)
			}
			yyc4380 = true
			yyrr4380 = len(yyv4380)
			if yyrg4380 {
				copy(yyv4380, yyv24380)
			}
		} else if yyl4380 != len(yyv4380) {
			yyv4380 = yyv4380[:yyl4380]
			yyc4380 = true
		}
		yyj4380 := 0
		for ; yyj4380 < yyrr4380; yyj4380++ {
			yyh4380.ElemContainerState(yyj4380)
			if r.TryDecodeAsNil() {
				yyv4380[yyj4380] = OwnerReference{}
			} else {
				yyv4381 := &yyv4380[yyj4380]
				yyv4381.CodecDecodeSelf(d)
			}

		}
		if yyrt4380 {
			for ; yyj4380 < yyl4380; yyj4380++ {
				yyv4380 = append(yyv4380, OwnerReference{})
				yyh4380.ElemContainerState(yyj4380)
				if r.TryDecodeAsNil() {
					yyv4380[yyj4380] = OwnerReference{}
				} else {
					yyv4382 := &yyv4380[yyj4380]
					yyv4382.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4380 := 0
		for ; !r.CheckBreak(); yyj4380++ {

			if yyj4380 >= len(yyv4380) {
				yyv4380 = append(yyv4380, OwnerReference{}) // var yyz4380 OwnerReference
				yyc4380 = true
			}
			yyh4380.ElemContainerState(yyj4380)
			if yyj4380 < len(yyv4380) {
				if r.TryDecodeAsNil() {
					yyv4380[yyj4380] = OwnerReference{}
				} else {
					yyv4383 := &yyv4380[yyj4380]
					yyv4383.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4380 < len(yyv4380) {
			yyv4380 = yyv4380[:yyj4380]
			yyc4380 = true
		} else if yyj4380 == 0 && yyv4380 == nil {
			yyv4380 = []OwnerReference{}
			yyc4380 = true
		}
	}
	yyh4380.End()
	if yyc4380 {
		*v = yyv4380
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4384 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4384.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4385 := *v
	yyh4385, yyl4385 := z.DecSliceHelperStart()
	var yyc4385 bool
	if yyl4385 == 0 {
		if yyv4385 == nil {
			yyv4385 = []PersistentVolumeAccessMode{}
			yyc4385 = true
		} else if len(yyv4385) != 0 {
			yyv4385 = yyv4385[:0]
			yyc4385 = true
		}
	} else if yyl4385 > 0 {
		var yyrr4385, yyrl4385 int
		var yyrt4385 bool
		if yyl4385 > cap(yyv4385) {

			yyrl4385, yyrt4385 = z.DecInferLen(yyl4385, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4385 {
				if yyrl4385 <= cap(yyv4385) {
					yyv4385 = yyv4385[:yyrl4385]
				} else {
					yyv4385 = make([]PersistentVolumeAccessMode, yyrl4385)
				}
			} else {
				yyv4385 = make([]PersistentVolumeAccessMode, yyrl4385)
			}
			yyc4385 = true
			yyrr4385 = len(yyv4385)
		} else if yyl4385 != len(yyv4385) {
			yyv4385 = yyv4385[:yyl4385]
			yyc4385 = true
		}
		yyj4385 := 0
		for ; yyj4385 < yyrr4385; yyj4385++ {
			yyh4385.ElemContainerState(yyj4385)
			if r.TryDecodeAsNil() {
				yyv4385[yyj4385] = ""
			} else {
				yyv4385[yyj4385] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4385 {
			for ; yyj4385 < yyl4385; yyj4385++ {
				yyv4385 = append(yyv4385, "")
				yyh4385.ElemContainerState(yyj4385)
				if r.TryDecodeAsNil() {
					yyv4385[yyj4385] = ""
				} else {
					yyv4385[yyj4385] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4385 := 0
		for ; !r.CheckBreak(); yyj4385++ {

			if yyj4385 >= len(yyv4385) {
				yyv4385 = append(yyv4385, "") // var yyz4385 PersistentVolumeAccessMode
				yyc4385 = true
			}
			yyh4385.ElemContainerState(yyj4385)
			if yyj4385 < len(yyv4385) {
				if r.TryDecodeAsNil() {
					yyv4385[yyj4385] = ""
				} else {
					yyv4385[yyj4385] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4385 < len(yyv4385) {
			yyv4385 = yyv4385[:yyj4385]
			yyc4385 = true
		} else if yyj4385 == 0 && yyv4385 == nil {
			yyv4385 = []PersistentVolumeAccessMode{}
			yyc4385 = true
		}
	}
	yyh4385.End()
	if yyc4385 {
		*v = yyv4385
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4389 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4390 := &yyv4389
		yy4390.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4391 := *v
	yyh4391, yyl4391 := z.DecSliceHelperStart()
	var yyc4391 bool
	if yyl4391 == 0 {
		if yyv4391 == nil {
			yyv4391 = []PersistentVolume{}
			yyc4391 = true
		} else if len(yyv4391) != 0 {
			yyv4391 = yyv4391[:0]
			yyc4391 = true
		}
	} else if yyl4391 > 0 {
		var yyrr4391, yyrl4391 int
		var yyrt4391 bool
		if yyl4391 > cap(yyv4391) {

			yyrg4391 := len(yyv4391) > 0
			yyv24391 := yyv4391
			yyrl4391, yyrt4391 = z.DecInferLen(yyl4391, z.DecBasicHandle().MaxInitLen, 456)
			if yyrt4391 {
				if yyrl4391 <= cap(yyv4391) {
					yyv4391 = yyv4391[:yyrl4391]
				} else {
					yyv4391 = make([]PersistentVolume, yyrl4391)
				}
			} else {
				yyv4391 = make([]PersistentVolume, yyrl4391)
			}
			yyc4391 = true
			yyrr4391 = len(yyv4391)
			if yyrg4391 {
				copy(yyv4391, yyv24391)
			}
		} else if yyl4391 != len(yyv4391) {
			yyv4391 = yyv4391[:yyl4391]
			yyc4391 = true
		}
		yyj4391 := 0
		for ; yyj4391 < yyrr4391; yyj4391++ {
			yyh4391.ElemContainerState(yyj4391)
			if r.TryDecodeAsNil() {
				yyv4391[yyj4391] = PersistentVolume{}
			} else {
				yyv4392 := &yyv4391[yyj4391]
				yyv4392.CodecDecodeSelf(d)
			}

		}
		if yyrt4391 {
			for ; yyj4391 < yyl4391; yyj4391++ {
				yyv4391 = append(yyv4391, PersistentVolume{})
				yyh4391.ElemContainerState(yyj4391)
				if r.TryDecodeAsNil() {
					yyv4391[yyj4391] = PersistentVolume{}
				} else {
					yyv4393 := &yyv4391[yyj4391]
					yyv4393.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4391 := 0
		for ; !r.CheckBreak(); yyj4391++ {

			if yyj4391 >= len(yyv4391) {
				yyv4391 = append(yyv4391, PersistentVolume{}) // var yyz4391 PersistentVolume
				yyc4391 = true
			}
			yyh4391.ElemContainerState(yyj4391)
			if yyj4391 < len(yyv4391) {
				if r.TryDecodeAsNil() {
					yyv4391[yyj4391] = PersistentVolume{}
				} else {
					yyv4394 := &yyv4391[yyj4391]
					yyv4394.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4391 < len(yyv4391) {
			yyv4391 = yyv4391[:yyj4391]
			yyc4391 = true
		} else if yyj4391 == 0 && yyv4391 == nil {
			yyv4391 = []PersistentVolume{}
			yyc4391 = true
		}
	}
	yyh4391.End()
	if yyc4391 {
		*v = yyv4391
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4395 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4396 := &yyv4395
		yy4396.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4397 := *v
	yyh4397, yyl4397 := z.DecSliceHelperStart()
	var yyc4397 bool
	if yyl4397 == 0 {
		if yyv4397 == nil {
			yyv4397 = []PersistentVolumeClaim{}
			yyc4397 = true
		} else if len(yyv4397) != 0 {
			yyv4397 = yyv4397[:0]
			yyc4397 = true
		}
	} else if yyl4397 > 0 {
		var yyrr4397, yyrl4397 int
		var yyrt4397 bool
		if yyl4397 > cap(yyv4397) {

			yyrg4397 := len(yyv4397) > 0
			yyv24397 := yyv4397
			yyrl4397, yyrt4397 = z.DecInferLen(yyl4397, z.DecBasicHandle().MaxInitLen, 352)
			if yyrt4397 {
				if yyrl4397 <= cap(yyv4397) {
					yyv4397 = yyv4397[:yyrl4397]
				} else {
					yyv4397 = make([]PersistentVolumeClaim, yyrl4397)
				}
			} else {
				yyv4397 = make([]PersistentVolumeClaim, yyrl4397)
			}
			yyc4397 = true
			yyrr4397 = len(yyv4397)
			if yyrg4397 {
				copy(yyv4397, yyv24397)
			}
		} else if yyl4397 != len(yyv4397) {
			yyv4397 = yyv4397[:yyl4397]
			yyc4397 = true
		}
		yyj4397 := 0
		for ; yyj4397 < yyrr4397; yyj4397++ {
			yyh4397.ElemContainerState(yyj4397)
			if r.TryDecodeAsNil() {
				yyv4397[yyj4397] = PersistentVolumeClaim{}
			} else {
				yyv4398 := &yyv4397[yyj4397]
				yyv4398.CodecDecodeSelf(d)
			}

		}
		if yyrt4397 {
			for ; yyj4397 < yyl4397; yyj4397++ {
				yyv4397 = append(yyv4397, PersistentVolumeClaim{})
				yyh4397.ElemContainerState(yyj4397)
				if r.TryDecodeAsNil() {
					yyv4397[yyj4397] = PersistentVolumeClaim{}
				} else {
					yyv4399 := &yyv4397[yyj4397]
					yyv4399.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4397 := 0
		for ; !r.CheckBreak(); yyj4397++ {

			if yyj4397 >= len(yyv4397) {
				yyv4397 = append(yyv4397, PersistentVolumeClaim{}) // var yyz4397 PersistentVolumeClaim
				yyc4397 = true
			}
			yyh4397.ElemContainerState(yyj4397)
			if yyj4397 < len(yyv4397) {
				if r.TryDecodeAsNil() {
					yyv4397[yyj4397] = PersistentVolumeClaim{}
				} else {
					yyv4400 := &yyv4397[yyj4397]
					yyv4400.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4397 < len(yyv4397) {
			yyv4397 = yyv4397[:yyj4397]
			yyc4397 = true
		} else if yyj4397 == 0 && yyv4397 == nil {
			yyv4397 = []PersistentVolumeClaim{}
			yyc4397 = true
		}
	}
	yyh4397.End()
	if yyc4397 {
		*v = yyv4397
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4401 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4402 := &yyv4401
		yy4402.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4403 := *v
	yyh4403, yyl4403 := z.DecSliceHelperStart()
	var yyc4403 bool
	if yyl4403 == 0 {
		if yyv4403 == nil {
			yyv4403 = []KeyToPath{}
			yyc4403 = true
		} else if len(yyv4403) != 0 {
			yyv4403 = yyv4403[:0]
			yyc4403 = true
		}
	} else if yyl4403 > 0 {
		var yyrr4403, yyrl4403 int
		var yyrt4403 bool
		if yyl4403 > cap(yyv4403) {

			yyrg4403 := len(yyv4403) > 0
			yyv24403 := yyv4403
			yyrl4403, yyrt4403 = z.DecInferLen(yyl4403, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4403 {
				if yyrl4403 <= cap(yyv4403) {
					yyv4403 = yyv4403[:yyrl4403]
				} else {
					yyv4403 = make([]KeyToPath, yyrl4403)
				}
			} else {
				yyv4403 = make([]KeyToPath, yyrl4403)
			}
			yyc4403 = true
			yyrr4403 = len(yyv4403)
			if yyrg4403 {
				copy(yyv4403, yyv24403)
			}
		} else if yyl4403 != len(yyv4403) {
			yyv4403 = yyv4403[:yyl4403]
			yyc4403 = true
		}
		yyj4403 := 0
		for ; yyj4403 < yyrr4403; yyj4403++ {
			yyh4403.ElemContainerState(yyj4403)
			if r.TryDecodeAsNil() {
				yyv4403[yyj4403] = KeyToPath{}
			} else {
				yyv4404 := &yyv4403[yyj4403]
				yyv4404.CodecDecodeSelf(d)
			}

		}
		if yyrt4403 {
			for ; yyj4403 < yyl4403; yyj4403++ {
				yyv4403 = append(yyv4403, KeyToPath{})
				yyh4403.ElemContainerState(yyj4403)
				if r.TryDecodeAsNil() {
					yyv4403[yyj4403] = KeyToPath{}
				} else {
					yyv4405 := &yyv4403[yyj4403]
					yyv4405.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4403 := 0
		for ; !r.CheckBreak(); yyj4403++ {

			if yyj4403 >= len(yyv4403) {
				yyv4403 = append(yyv4403, KeyToPath{}) // var yyz4403 KeyToPath
				yyc4403 = true
			}
			yyh4403.ElemContainerState(yyj4403)
			if yyj4403 < len(yyv4403) {
				if r.TryDecodeAsNil() {
					yyv4403[yyj4403] = KeyToPath{}
				} else {
					yyv4406 := &yyv4403[yyj4403]
					yyv4406.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4403 < len(yyv4403) {
			yyv4403 = yyv4403[:yyj4403]
			yyc4403 = true
		} else if yyj4403 == 0 && yyv4403 == nil {
			yyv4403 = []KeyToPath{}
			yyc4403 = true
		}
	}
	yyh4403.End()
	if yyc4403 {
		*v = yyv4403
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4407 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4408 := &yyv4407
		yy4408.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4409 := *v
	yyh4409, yyl4409 := z.DecSliceHelperStart()
	var yyc4409 bool
	if yyl4409 == 0 {
		if yyv4409 == nil {
			yyv4409 = []DownwardAPIVolumeFile{}
			yyc4409 = true
		} else if len(yyv4409) != 0 {
			yyv4409 = yyv4409[:0]
			yyc4409 = true
		}
	} else if yyl4409 > 0 {
		var yyrr4409, yyrl4409 int
		var yyrt4409 bool
		if yyl4409 > cap(yyv4409) {

			yyrg4409 := len(yyv4409) > 0
			yyv24409 := yyv4409
			yyrl4409, yyrt4409 = z.DecInferLen(yyl4409, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4409 {
				if yyrl4409 <= cap(yyv4409) {
					yyv4409 = yyv4409[:yyrl4409]
				} else {
					yyv4409 = make([]DownwardAPIVolumeFile, yyrl4409)
				}
			} else {
				yyv4409 = make([]DownwardAPIVolumeFile, yyrl4409)
			}
			yyc4409 = true
			yyrr4409 = len(yyv4409)
			if yyrg4409 {
				copy(yyv4409, yyv24409)
			}
		} else if yyl4409 != len(yyv4409) {
			yyv4409 = yyv4409[:yyl4409]
			yyc4409 = true
		}
		yyj4409 := 0
		for ; yyj4409 < yyrr4409; yyj4409++ {
			yyh4409.ElemContainerState(yyj4409)
			if r.TryDecodeAsNil() {
				yyv4409[yyj4409] = DownwardAPIVolumeFile{}
			} else {
				yyv4410 := &yyv4409[yyj4409]
				yyv4410.CodecDecodeSelf(d)
			}

		}
		if yyrt4409 {
			for ; yyj4409 < yyl4409; yyj4409++ {
				yyv4409 = append(yyv4409, DownwardAPIVolumeFile{})
				yyh4409.ElemContainerState(yyj4409)
				if r.TryDecodeAsNil() {
					yyv4409[yyj4409] = DownwardAPIVolumeFile{}
				} else {
					yyv4411 := &yyv4409[yyj4409]
					yyv4411.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4409 := 0
		for ; !r.CheckBreak(); yyj4409++ {

			if yyj4409 >= len(yyv4409) {
				yyv4409 = append(yyv4409, DownwardAPIVolumeFile{}) // var yyz4409 DownwardAPIVolumeFile
				yyc4409 = true
			}
			yyh4409.ElemContainerState(yyj4409)
			if yyj4409 < len(yyv4409) {
				if r.TryDecodeAsNil() {
					yyv4409[yyj4409] = DownwardAPIVolumeFile{}
				} else {
					yyv4412 := &yyv4409[yyj4409]
					yyv4412.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4409 < len(yyv4409) {
			yyv4409 = yyv4409[:yyj4409]
			yyc4409 = true
		} else if yyj4409 == 0 && yyv4409 == nil {
			yyv4409 = []DownwardAPIVolumeFile{}
			yyc4409 = true
		}
	}
	yyh4409.End()
	if yyc4409 {
		*v = yyv4409
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4413 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4414 := &yyv4413
		yy4414.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4415 := *v
	yyh4415, yyl4415 := z.DecSliceHelperStart()
	var yyc4415 bool
	if yyl4415 == 0 {
		if yyv4415 == nil {
			yyv4415 = []HTTPHeader{}
			yyc4415 = true
		} else if len(yyv4415) != 0 {
			yyv4415 = yyv4415[:0]
			yyc4415 = true
		}
	} else if yyl4415 > 0 {
		var yyrr4415, yyrl4415 int
		var yyrt4415 bool
		if yyl4415 > cap(yyv4415) {

			yyrg4415 := len(yyv4415) > 0
			yyv24415 := yyv4415
			yyrl4415, yyrt4415 = z.DecInferLen(yyl4415, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4415 {
				if yyrl4415 <= cap(yyv4415) {
					yyv4415 = yyv4415[:yyrl4415]
				} else {
					yyv4415 = make([]HTTPHeader, yyrl4415)
				}
			} else {
				yyv4415 = make([]HTTPHeader, yyrl4415)
			}
			yyc4415 = true
			yyrr4415 = len(yyv4415)
			if yyrg4415 {
				copy(yyv4415, yyv24415)
			}
		} else if yyl4415 != len(yyv4415) {
			yyv4415 = yyv4415[:yyl4415]
			yyc4415 = true
		}
		yyj4415 := 0
		for ; yyj4415 < yyrr4415; yyj4415++ {
			yyh4415.ElemContainerState(yyj4415)
			if r.TryDecodeAsNil() {
				yyv4415[yyj4415] = HTTPHeader{}
			} else {
				yyv4416 := &yyv4415[yyj4415]
				yyv4416.CodecDecodeSelf(d)
			}

		}
		if yyrt4415 {
			for ; yyj4415 < yyl4415; yyj4415++ {
				yyv4415 = append(yyv4415, HTTPHeader{})
				yyh4415.ElemContainerState(yyj4415)
				if r.TryDecodeAsNil() {
					yyv4415[yyj4415] = HTTPHeader{}
				} else {
					yyv4417 := &yyv4415[yyj4415]
					yyv4417.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4415 := 0
		for ; !r.CheckBreak(); yyj4415++ {

			if yyj4415 >= len(yyv4415) {
				yyv4415 = append(yyv4415, HTTPHeader{}) // var yyz4415 HTTPHeader
				yyc4415 = true
			}
			yyh4415.ElemContainerState(yyj4415)
			if yyj4415 < len(yyv4415) {
				if r.TryDecodeAsNil() {
					yyv4415[yyj4415] = HTTPHeader{}
				} else {
					yyv4418 := &yyv4415[yyj4415]
					yyv4418.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4415 < len(yyv4415) {
			yyv4415 = yyv4415[:yyj4415]
			yyc4415 = true
		} else if yyj4415 == 0 && yyv4415 == nil {
			yyv4415 = []HTTPHeader{}
			yyc4415 = true
		}
	}
	yyh4415.End()
	if yyc4415 {
		*v = yyv4415
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4419 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4419.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4420 := *v
	yyh4420, yyl4420 := z.DecSliceHelperStart()
	var yyc4420 bool
	if yyl4420 == 0 {
		if yyv4420 == nil {
			yyv4420 = []Capability{}
			yyc4420 = true
		} else if len(yyv4420) != 0 {
			yyv4420 = yyv4420[:0]
			yyc4420 = true
		}
	} else if yyl4420 > 0 {
		var yyrr4420, yyrl4420 int
		var yyrt4420 bool
		if yyl4420 > cap(yyv4420) {

			yyrl4420, yyrt4420 = z.DecInferLen(yyl4420, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4420 {
				if yyrl4420 <= cap(yyv4420) {
					yyv4420 = yyv4420[:yyrl4420]
				} else {
					yyv4420 = make([]Capability, yyrl4420)
				}
			} else {
				yyv4420 = make([]Capability, yyrl4420)
			}
			yyc4420 = true
			yyrr4420 = len(yyv4420)
		} else if yyl4420 != len(yyv4420) {
			yyv4420 = yyv4420[:yyl4420]
			yyc4420 = true
		}
		yyj4420 := 0
		for ; yyj4420 < yyrr4420; yyj4420++ {
			yyh4420.ElemContainerState(yyj4420)
			if r.TryDecodeAsNil() {
				yyv4420[yyj4420] = ""
			} else {
				yyv4420[yyj4420] = Capability(r.DecodeString())
			}

		}
		if yyrt4420 {
			for ; yyj4420 < yyl4420; yyj4420++ {
				yyv4420 = append(yyv4420, "")
				yyh4420.ElemContainerState(yyj4420)
				if r.TryDecodeAsNil() {
					yyv4420[yyj4420] = ""
				} else {
					yyv4420[yyj4420] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4420 := 0
		for ; !r.CheckBreak(); yyj4420++ {

			if yyj4420 >= len(yyv4420) {
				yyv4420 = append(yyv4420, "") // var yyz4420 Capability
				yyc4420 = true
			}
			yyh4420.ElemContainerState(yyj4420)
			if yyj4420 < len(yyv4420) {
				if r.TryDecodeAsNil() {
					yyv4420[yyj4420] = ""
				} else {
					yyv4420[yyj4420] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4420 < len(yyv4420) {
			yyv4420 = yyv4420[:yyj4420]
			yyc4420 = true
		} else if yyj4420 == 0 && yyv4420 == nil {
			yyv4420 = []Capability{}
			yyc4420 = true
		}
	}
	yyh4420.End()
	if yyc4420 {
		*v = yyv4420
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4424 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4425 := &yyv4424
		yy4425.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4426 := *v
	yyh4426, yyl4426 := z.DecSliceHelperStart()
	var yyc4426 bool
	if yyl4426 == 0 {
		if yyv4426 == nil {
			yyv4426 = []ContainerPort{}
			yyc4426 = true
		} else if len(yyv4426) != 0 {
			yyv4426 = yyv4426[:0]
			yyc4426 = true
		}
	} else if yyl4426 > 0 {
		var yyrr4426, yyrl4426 int
		var yyrt4426 bool
		if yyl4426 > cap(yyv4426) {

			yyrg4426 := len(yyv4426) > 0
			yyv24426 := yyv4426
			yyrl4426, yyrt4426 = z.DecInferLen(yyl4426, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4426 {
				if yyrl4426 <= cap(yyv4426) {
					yyv4426 = yyv4426[:yyrl4426]
				} else {
					yyv4426 = make([]ContainerPort, yyrl4426)
				}
			} else {
				yyv4426 = make([]ContainerPort, yyrl4426)
			}
			yyc4426 = true
			yyrr4426 = len(yyv4426)
			if yyrg4426 {
				copy(yyv4426, yyv24426)
			}
		} else if yyl4426 != len(yyv4426) {
			yyv4426 = yyv4426[:yyl4426]
			yyc4426 = true
		}
		yyj4426 := 0
		for ; yyj4426 < yyrr4426; yyj4426++ {
			yyh4426.ElemContainerState(yyj4426)
			if r.TryDecodeAsNil() {
				yyv4426[yyj4426] = ContainerPort{}
			} else {
				yyv4427 := &yyv4426[yyj4426]
				yyv4427.CodecDecodeSelf(d)
			}

		}
		if yyrt4426 {
			for ; yyj4426 < yyl4426; yyj4426++ {
				yyv4426 = append(yyv4426, ContainerPort{})
				yyh4426.ElemContainerState(yyj4426)
				if r.TryDecodeAsNil() {
					yyv4426[yyj4426] = ContainerPort{}
				} else {
					yyv4428 := &yyv4426[yyj4426]
					yyv4428.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4426 := 0
		for ; !r.CheckBreak(); yyj4426++ {

			if yyj4426 >= len(yyv4426) {
				yyv4426 = append(yyv4426, ContainerPort{}) // var yyz4426 ContainerPort
				yyc4426 = true
			}
			yyh4426.ElemContainerState(yyj4426)
			if yyj4426 < len(yyv4426) {
				if r.TryDecodeAsNil() {
					yyv4426[yyj4426] = ContainerPort{}
				} else {
					yyv4429 := &yyv4426[yyj4426]
					yyv4429.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4426 < len(yyv4426) {
			yyv4426 = yyv4426[:yyj4426]
			yyc4426 = true
		} else if yyj4426 == 0 && yyv4426 == nil {
			yyv4426 = []ContainerPort{}
			yyc4426 = true
		}
	}
	yyh4426.End()
	if yyc4426 {
		*v = yyv4426
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4430 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4431 := &yyv4430
		yy4431.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4432 := *v
	yyh4432, yyl4432 := z.DecSliceHelperStart()
	var yyc4432 bool
	if yyl4432 == 0 {
		if yyv4432 == nil {
			yyv4432 = []EnvVar{}
			yyc4432 = true
		} else if len(yyv4432) != 0 {
			yyv4432 = yyv4432[:0]
			yyc4432 = true
		}
	} else if yyl4432 > 0 {
		var yyrr4432, yyrl4432 int
		var yyrt4432 bool
		if yyl4432 > cap(yyv4432) {

			yyrg4432 := len(yyv4432) > 0
			yyv24432 := yyv4432
			yyrl4432, yyrt4432 = z.DecInferLen(yyl4432, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4432 {
				if yyrl4432 <= cap(yyv4432) {
					yyv4432 = yyv4432[:yyrl4432]
				} else {
					yyv4432 = make([]EnvVar, yyrl4432)
				}
			} else {
				yyv4432 = make([]EnvVar, yyrl4432)
			}
			yyc4432 = true
			yyrr4432 = len(yyv4432)
			if yyrg4432 {
				copy(yyv4432, yyv24432)
			}
		} else if yyl4432 != len(yyv4432) {
			yyv4432 = yyv4432[:yyl4432]
			yyc4432 = true
		}
		yyj4432 := 0
		for ; yyj4432 < yyrr4432; yyj4432++ {
			yyh4432.ElemContainerState(yyj4432)
			if r.TryDecodeAsNil() {
				yyv4432[yyj4432] = EnvVar{}
			} else {
				yyv4433 := &yyv4432[yyj4432]
				yyv4433.CodecDecodeSelf(d)
			}

		}
		if yyrt4432 {
			for ; yyj4432 < yyl4432; yyj4432++ {
				yyv4432 = append(yyv4432, EnvVar{})
				yyh4432.ElemContainerState(yyj4432)
				if r.TryDecodeAsNil() {
					yyv4432[yyj4432] = EnvVar{}
				} else {
					yyv4434 := &yyv4432[yyj4432]
					yyv4434.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4432 := 0
		for ; !r.CheckBreak(); yyj4432++ {

			if yyj4432 >= len(yyv4432) {
				yyv4432 = append(yyv4432, EnvVar{}) // var yyz4432 EnvVar
				yyc4432 = true
			}
			yyh4432.ElemContainerState(yyj4432)
			if yyj4432 < len(yyv4432) {
				if r.TryDecodeAsNil() {
					yyv4432[yyj4432] = EnvVar{}
				} else {
					yyv4435 := &yyv4432[yyj4432]
					yyv4435.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4432 < len(yyv4432) {
			yyv4432 = yyv4432[:yyj4432]
			yyc4432 = true
		} else if yyj4432 == 0 && yyv4432 == nil {
			yyv4432 = []EnvVar{}
			yyc4432 = true
		}
	}
	yyh4432.End()
	if yyc4432 {
		*v = yyv4432
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4436 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4437 := &yyv4436
		yy4437.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4438 := *v
	yyh4438, yyl4438 := z.DecSliceHelperStart()
	var yyc4438 bool
	if yyl4438 == 0 {
		if yyv4438 == nil {
			yyv4438 = []VolumeMount{}
			yyc4438 = true
		} else if len(yyv4438) != 0 {
			yyv4438 = yyv4438[:0]
			yyc4438 = true
		}
	} else if yyl4438 > 0 {
		var yyrr4438, yyrl4438 int
		var yyrt4438 bool
		if yyl4438 > cap(yyv4438) {

			yyrg4438 := len(yyv4438) > 0
			yyv24438 := yyv4438
			yyrl4438, yyrt4438 = z.DecInferLen(yyl4438, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4438 {
				if yyrl4438 <= cap(yyv4438) {
					yyv4438 = yyv4438[:yyrl4438]
				} else {
					yyv4438 = make([]VolumeMount, yyrl4438)
				}
			} else {
				yyv4438 = make([]VolumeMount, yyrl4438)
			}
			yyc4438 = true
			yyrr4438 = len(yyv4438)
			if yyrg4438 {
				copy(yyv4438, yyv24438)
			}
		} else if yyl4438 != len(yyv4438) {
			yyv4438 = yyv4438[:yyl4438]
			yyc4438 = true
		}
		yyj4438 := 0
		for ; yyj4438 < yyrr4438; yyj4438++ {
			yyh4438.ElemContainerState(yyj4438)
			if r.TryDecodeAsNil() {
				yyv4438[yyj4438] = VolumeMount{}
			} else {
				yyv4439 := &yyv4438[yyj4438]
				yyv4439.CodecDecodeSelf(d)
			}

		}
		if yyrt4438 {
			for ; yyj4438 < yyl4438; yyj4438++ {
				yyv4438 = append(yyv4438, VolumeMount{})
				yyh4438.ElemContainerState(yyj4438)
				if r.TryDecodeAsNil() {
					yyv4438[yyj4438] = VolumeMount{}
				} else {
					yyv4440 := &yyv4438[yyj4438]
					yyv4440.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4438 := 0
		for ; !r.CheckBreak(); yyj4438++ {

			if yyj4438 >= len(yyv4438) {
				yyv4438 = append(yyv4438, VolumeMount{}) // var yyz4438 VolumeMount
				yyc4438 = true
			}
			yyh4438.ElemContainerState(yyj4438)
			if yyj4438 < len(yyv4438) {
				if r.TryDecodeAsNil() {
					yyv4438[yyj4438] = VolumeMount{}
				} else {
					yyv4441 := &yyv4438[yyj4438]
					yyv4441.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4438 < len(yyv4438) {
			yyv4438 = yyv4438[:yyj4438]
			yyc4438 = true
		} else if yyj4438 == 0 && yyv4438 == nil {
			yyv4438 = []VolumeMount{}
			yyc4438 = true
		}
	}
	yyh4438.End()
	if yyc4438 {
		*v = yyv4438
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4442 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4443 := &yyv4442
		yy4443.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4444 := *v
	yyh4444, yyl4444 := z.DecSliceHelperStart()
	var yyc4444 bool
	if yyl4444 == 0 {
		if yyv4444 == nil {
			yyv4444 = []Pod{}
			yyc4444 = true
		} else if len(yyv4444) != 0 {
			yyv4444 = yyv4444[:0]
			yyc4444 = true
		}
	} else if yyl4444 > 0 {
		var yyrr4444, yyrl4444 int
		var yyrt4444 bool
		if yyl4444 > cap(yyv4444) {

			yyrg4444 := len(yyv4444) > 0
			yyv24444 := yyv4444
			yyrl4444, yyrt4444 = z.DecInferLen(yyl4444, z.DecBasicHandle().MaxInitLen, 624)
			if yyrt4444 {
				if yyrl4444 <= cap(yyv4444) {
					yyv4444 = yyv4444[:yyrl4444]
				} else {
					yyv4444 = make([]Pod, yyrl4444)
				}
			} else {
				yyv4444 = make([]Pod, yyrl4444)
			}
			yyc4444 = true
			yyrr4444 = len(yyv4444)
			if yyrg4444 {
				copy(yyv4444, yyv24444)
			}
		} else if yyl4444 != len(yyv4444) {
			yyv4444 = yyv4444[:yyl4444]
			yyc4444 = true
		}
		yyj4444 := 0
		for ; yyj4444 < yyrr4444; yyj4444++ {
			yyh4444.ElemContainerState(yyj4444)
			if r.TryDecodeAsNil() {
				yyv4444[yyj4444] = Pod{}
			} else {
				yyv4445 := &yyv4444[yyj4444]
				yyv4445.CodecDecodeSelf(d)
			}

		}
		if yyrt4444 {
			for ; yyj4444 < yyl4444; yyj4444++ {
				yyv4444 = append(yyv4444, Pod{})
				yyh4444.ElemContainerState(yyj4444)
				if r.TryDecodeAsNil() {
					yyv4444[yyj4444] = Pod{}
				} else {
					yyv4446 := &yyv4444[yyj4444]
					yyv4446.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4444 := 0
		for ; !r.CheckBreak(); yyj4444++ {

			if yyj4444 >= len(yyv4444) {
				yyv4444 = append(yyv4444, Pod{}) // var yyz4444 Pod
				yyc4444 = true
			}
			yyh4444.ElemContainerState(yyj4444)
			if yyj4444 < len(yyv4444) {
				if r.TryDecodeAsNil() {
					yyv4444[yyj4444] = Pod{}
				} else {
					yyv4447 := &yyv4444[yyj4444]
					yyv4447.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4444 < len(yyv4444) {
			yyv4444 = yyv4444[:yyj4444]
			yyc4444 = true
		} else if yyj4444 == 0 && yyv4444 == nil {
			yyv4444 = []Pod{}
			yyc4444 = true
		}
	}
	yyh4444.End()
	if yyc4444 {
		*v = yyv4444
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4448 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4449 := &yyv4448
		yy4449.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4450 := *v
	yyh4450, yyl4450 := z.DecSliceHelperStart()
	var yyc4450 bool
	if yyl4450 == 0 {
		if yyv4450 == nil {
			yyv4450 = []NodeSelectorTerm{}
			yyc4450 = true
		} else if len(yyv4450) != 0 {
			yyv4450 = yyv4450[:0]
			yyc4450 = true
		}
	} else if yyl4450 > 0 {
		var yyrr4450, yyrl4450 int
		var yyrt4450 bool
		if yyl4450 > cap(yyv4450) {

			yyrg4450 := len(yyv4450) > 0
			yyv24450 := yyv4450
			yyrl4450, yyrt4450 = z.DecInferLen(yyl4450, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4450 {
				if yyrl4450 <= cap(yyv4450) {
					yyv4450 = yyv4450[:yyrl4450]
				} else {
					yyv4450 = make([]NodeSelectorTerm, yyrl4450)
				}
			} else {
				yyv4450 = make([]NodeSelectorTerm, yyrl4450)
			}
			yyc4450 = true
			yyrr4450 = len(yyv4450)
			if yyrg4450 {
				copy(yyv4450, yyv24450)
			}
		} else if yyl4450 != len(yyv4450) {
			yyv4450 = yyv4450[:yyl4450]
			yyc4450 = true
		}
		yyj4450 := 0
		for ; yyj4450 < yyrr4450; yyj4450++ {
			yyh4450.ElemContainerState(yyj4450)
			if r.TryDecodeAsNil() {
				yyv4450[yyj4450] = NodeSelectorTerm{}
			} else {
				yyv4451 := &yyv4450[yyj4450]
				yyv4451.CodecDecodeSelf(d)
			}

		}
		if yyrt4450 {
			for ; yyj4450 < yyl4450; yyj4450++ {
				yyv4450 = append(yyv4450, NodeSelectorTerm{})
				yyh4450.ElemContainerState(yyj4450)
				if r.TryDecodeAsNil() {
					yyv4450[yyj4450] = NodeSelectorTerm{}
				} else {
					yyv4452 := &yyv4450[yyj4450]
					yyv4452.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4450 := 0
		for ; !r.CheckBreak(); yyj4450++ {

			if yyj4450 >= len(yyv4450) {
				yyv4450 = append(yyv4450, NodeSelectorTerm{}) // var yyz4450 NodeSelectorTerm
				yyc4450 = true
			}
			yyh4450.ElemContainerState(yyj4450)
			if yyj4450 < len(yyv4450) {
				if r.TryDecodeAsNil() {
					yyv4450[yyj4450] = NodeSelectorTerm{}
				} else {
					yyv4453 := &yyv4450[yyj4450]
					yyv4453.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4450 < len(yyv4450) {
			yyv4450 = yyv4450[:yyj4450]
			yyc4450 = true
		} else if yyj4450 == 0 && yyv4450 == nil {
			yyv4450 = []NodeSelectorTerm{}
			yyc4450 = true
		}
	}
	yyh4450.End()
	if yyc4450 {
		*v = yyv4450
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4454 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4455 := &yyv4454
		yy4455.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4456 := *v
	yyh4456, yyl4456 := z.DecSliceHelperStart()
	var yyc4456 bool
	if yyl4456 == 0 {
		if yyv4456 == nil {
			yyv4456 = []NodeSelectorRequirement{}
			yyc4456 = true
		} else if len(yyv4456) != 0 {
			yyv4456 = yyv4456[:0]
			yyc4456 = true
		}
	} else if yyl4456 > 0 {
		var yyrr4456, yyrl4456 int
		var yyrt4456 bool
		if yyl4456 > cap(yyv4456) {

			yyrg4456 := len(yyv4456) > 0
			yyv24456 := yyv4456
			yyrl4456, yyrt4456 = z.DecInferLen(yyl4456, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4456 {
				if yyrl4456 <= cap(yyv4456) {
					yyv4456 = yyv4456[:yyrl4456]
				} else {
					yyv4456 = make([]NodeSelectorRequirement, yyrl4456)
				}
			} else {
				yyv4456 = make([]NodeSelectorRequirement, yyrl4456)
			}
			yyc4456 = true
			yyrr4456 = len(yyv4456)
			if yyrg4456 {
				copy(yyv4456, yyv24456)
			}
		} else if yyl4456 != len(yyv4456) {
			yyv4456 = yyv4456[:yyl4456]
			yyc4456 = true
		}
		yyj4456 := 0
		for ; yyj4456 < yyrr4456; yyj4456++ {
			yyh4456.ElemContainerState(yyj4456)
			if r.TryDecodeAsNil() {
				yyv4456[yyj4456] = NodeSelectorRequirement{}
			} else {
				yyv4457 := &yyv4456[yyj4456]
				yyv4457.CodecDecodeSelf(d)
			}

		}
		if yyrt4456 {
			for ; yyj4456 < yyl4456; yyj4456++ {
				yyv4456 = append(yyv4456, NodeSelectorRequirement{})
				yyh4456.ElemContainerState(yyj4456)
				if r.TryDecodeAsNil() {
					yyv4456[yyj4456] = NodeSelectorRequirement{}
				} else {
					yyv4458 := &yyv4456[yyj4456]
					yyv4458.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4456 := 0
		for ; !r.CheckBreak(); yyj4456++ {

			if yyj4456 >= len(yyv4456) {
				yyv4456 = append(yyv4456, NodeSelectorRequirement{}) // var yyz4456 NodeSelectorRequirement
				yyc4456 = true
			}
			yyh4456.ElemContainerState(yyj4456)
			if yyj4456 < len(yyv4456) {
				if r.TryDecodeAsNil() {
					yyv4456[yyj4456] = NodeSelectorRequirement{}
				} else {
					yyv4459 := &yyv4456[yyj4456]
					yyv4459.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4456 < len(yyv4456) {
			yyv4456 = yyv4456[:yyj4456]
			yyc4456 = true
		} else if yyj4456 == 0 && yyv4456 == nil {
			yyv4456 = []NodeSelectorRequirement{}
			yyc4456 = true
		}
	}
	yyh4456.End()
	if yyc4456 {
		*v = yyv4456
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4460 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4461 := &yyv4460
		yy4461.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4462 := *v
	yyh4462, yyl4462 := z.DecSliceHelperStart()
	var yyc4462 bool
	if yyl4462 == 0 {
		if yyv4462 == nil {
			yyv4462 = []PodAffinityTerm{}
			yyc4462 = true
		} else if len(yyv4462) != 0 {
			yyv4462 = yyv4462[:0]
			yyc4462 = true
		}
	} else if yyl4462 > 0 {
		var yyrr4462, yyrl4462 int
		var yyrt4462 bool
		if yyl4462 > cap(yyv4462) {

			yyrg4462 := len(yyv4462) > 0
			yyv24462 := yyv4462
			yyrl4462, yyrt4462 = z.DecInferLen(yyl4462, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4462 {
				if yyrl4462 <= cap(yyv4462) {
					yyv4462 = yyv4462[:yyrl4462]
				} else {
					yyv4462 = make([]PodAffinityTerm, yyrl4462)
				}
			} else {
				yyv4462 = make([]PodAffinityTerm, yyrl4462)
			}
			yyc4462 = true
			yyrr4462 = len(yyv4462)
			if yyrg4462 {
				copy(yyv4462, yyv24462)
			}
		} else if yyl4462 != len(yyv4462) {
			yyv4462 = yyv4462[:yyl4462]
			yyc4462 = true
		}
		yyj4462 := 0
		for ; yyj4462 < yyrr4462; yyj4462++ {
			yyh4462.ElemContainerState(yyj4462)
			if r.TryDecodeAsNil() {
				yyv4462[yyj4462] = PodAffinityTerm{}
			} else {
				yyv4463 := &yyv4462[yyj4462]
				yyv4463.CodecDecodeSelf(d)
			}

		}
		if yyrt4462 {
			for ; yyj4462 < yyl4462; yyj4462++ {
				yyv4462 = append(yyv4462, PodAffinityTerm{})
				yyh4462.ElemContainerState(yyj4462)
				if r.TryDecodeAsNil() {
					yyv4462[yyj4462] = PodAffinityTerm{}
				} else {
					yyv4464 := &yyv4462[yyj4462]
					yyv4464.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4462 := 0
		for ; !r.CheckBreak(); yyj4462++ {

			if yyj4462 >= len(yyv4462) {
				yyv4462 = append(yyv4462, PodAffinityTerm{}) // var yyz4462 PodAffinityTerm
				yyc4462 = true
			}
			yyh4462.ElemContainerState(yyj4462)
			if yyj4462 < len(yyv4462) {
				if r.TryDecodeAsNil() {
					yyv4462[yyj4462] = PodAffinityTerm{}
				} else {
					yyv4465 := &yyv4462[yyj4462]
					yyv4465.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4462 < len(yyv4462) {
			yyv4462 = yyv4462[:yyj4462]
			yyc4462 = true
		} else if yyj4462 == 0 && yyv4462 == nil {
			yyv4462 = []PodAffinityTerm{}
			yyc4462 = true
		}
	}
	yyh4462.End()
	if yyc4462 {
		*v = yyv4462
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4466 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4467 := &yyv4466
		yy4467.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4468 := *v
	yyh4468, yyl4468 := z.DecSliceHelperStart()
	var yyc4468 bool
	if yyl4468 == 0 {
		if yyv4468 == nil {
			yyv4468 = []WeightedPodAffinityTerm{}
			yyc4468 = true
		} else if len(yyv4468) != 0 {
			yyv4468 = yyv4468[:0]
			yyc4468 = true
		}
	} else if yyl4468 > 0 {
		var yyrr4468, yyrl4468 int
		var yyrt4468 bool
		if yyl4468 > cap(yyv4468) {

			yyrg4468 := len(yyv4468) > 0
			yyv24468 := yyv4468
			yyrl4468, yyrt4468 = z.DecInferLen(yyl4468, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4468 {
				if yyrl4468 <= cap(yyv4468) {
					yyv4468 = yyv4468[:yyrl4468]
				} else {
					yyv4468 = make([]WeightedPodAffinityTerm, yyrl4468)
				}
			} else {
				yyv4468 = make([]WeightedPodAffinityTerm, yyrl4468)
			}
			yyc4468 = true
			yyrr4468 = len(yyv4468)
			if yyrg4468 {
				copy(yyv4468, yyv24468)
			}
		} else if yyl4468 != len(yyv4468) {
			yyv4468 = yyv4468[:yyl4468]
			yyc4468 = true
		}
		yyj4468 := 0
		for ; yyj4468 < yyrr4468; yyj4468++ {
			yyh4468.ElemContainerState(yyj4468)
			if r.TryDecodeAsNil() {
				yyv4468[yyj4468] = WeightedPodAffinityTerm{}
			} else {
				yyv4469 := &yyv4468[yyj4468]
				yyv4469.CodecDecodeSelf(d)
			}

		}
		if yyrt4468 {
			for ; yyj4468 < yyl4468; yyj4468++ {
				yyv4468 = append(yyv4468, WeightedPodAffinityTerm{})
				yyh4468.ElemContainerState(yyj4468)
				if r.TryDecodeAsNil() {
					yyv4468[yyj4468] = WeightedPodAffinityTerm{}
				} else {
					yyv4470 := &yyv4468[yyj4468]
					yyv4470.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4468 := 0
		for ; !r.CheckBreak(); yyj4468++ {

			if yyj4468 >= len(yyv4468) {
				yyv4468 = append(yyv4468, WeightedPodAffinityTerm{}) // var yyz4468 WeightedPodAffinityTerm
				yyc4468 = true
			}
			yyh4468.ElemContainerState(yyj4468)
			if yyj4468 < len(yyv4468) {
				if r.TryDecodeAsNil() {
					yyv4468[yyj4468] = WeightedPodAffinityTerm{}
				} else {
					yyv4471 := &yyv4468[yyj4468]
					yyv4471.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4468 < len(yyv4468) {
			yyv4468 = yyv4468[:yyj4468]
			yyc4468 = true
		} else if yyj4468 == 0 && yyv4468 == nil {
			yyv4468 = []WeightedPodAffinityTerm{}
			yyc4468 = true
		}
	}
	yyh4468.End()
	if yyc4468 {
		*v = yyv4468
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4472 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4473 := &yyv4472
		yy4473.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4474 := *v
	yyh4474, yyl4474 := z.DecSliceHelperStart()
	var yyc4474 bool
	if yyl4474 == 0 {
		if yyv4474 == nil {
			yyv4474 = []PreferredSchedulingTerm{}
			yyc4474 = true
		} else if len(yyv4474) != 0 {
			yyv4474 = yyv4474[:0]
			yyc4474 = true
		}
	} else if yyl4474 > 0 {
		var yyrr4474, yyrl4474 int
		var yyrt4474 bool
		if yyl4474 > cap(yyv4474) {

			yyrg4474 := len(yyv4474) > 0
			yyv24474 := yyv4474
			yyrl4474, yyrt4474 = z.DecInferLen(yyl4474, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4474 {
				if yyrl4474 <= cap(yyv4474) {
					yyv4474 = yyv4474[:yyrl4474]
				} else {
					yyv4474 = make([]PreferredSchedulingTerm, yyrl4474)
				}
			} else {
				yyv4474 = make([]PreferredSchedulingTerm, yyrl4474)
			}
			yyc4474 = true
			yyrr4474 = len(yyv4474)
			if yyrg4474 {
				copy(yyv4474, yyv24474)
			}
		} else if yyl4474 != len(yyv4474) {
			yyv4474 = yyv4474[:yyl4474]
			yyc4474 = true
		}
		yyj4474 := 0
		for ; yyj4474 < yyrr4474; yyj4474++ {
			yyh4474.ElemContainerState(yyj4474)
			if r.TryDecodeAsNil() {
				yyv4474[yyj4474] = PreferredSchedulingTerm{}
			} else {
				yyv4475 := &yyv4474[yyj4474]
				yyv4475.CodecDecodeSelf(d)
			}

		}
		if yyrt4474 {
			for ; yyj4474 < yyl4474; yyj4474++ {
				yyv4474 = append(yyv4474, PreferredSchedulingTerm{})
				yyh4474.ElemContainerState(yyj4474)
				if r.TryDecodeAsNil() {
					yyv4474[yyj4474] = PreferredSchedulingTerm{}
				} else {
					yyv4476 := &yyv4474[yyj4474]
					yyv4476.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4474 := 0
		for ; !r.CheckBreak(); yyj4474++ {

			if yyj4474 >= len(yyv4474) {
				yyv4474 = append(yyv4474, PreferredSchedulingTerm{}) // var yyz4474 PreferredSchedulingTerm
				yyc4474 = true
			}
			yyh4474.ElemContainerState(yyj4474)
			if yyj4474 < len(yyv4474) {
				if r.TryDecodeAsNil() {
					yyv4474[yyj4474] = PreferredSchedulingTerm{}
				} else {
					yyv4477 := &yyv4474[yyj4474]
					yyv4477.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4474 < len(yyv4474) {
			yyv4474 = yyv4474[:yyj4474]
			yyc4474 = true
		} else if yyj4474 == 0 && yyv4474 == nil {
			yyv4474 = []PreferredSchedulingTerm{}
			yyc4474 = true
		}
	}
	yyh4474.End()
	if yyc4474 {
		*v = yyv4474
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4478 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4479 := &yyv4478
		yy4479.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4480 := *v
	yyh4480, yyl4480 := z.DecSliceHelperStart()
	var yyc4480 bool
	if yyl4480 == 0 {
		if yyv4480 == nil {
			yyv4480 = []Volume{}
			yyc4480 = true
		} else if len(yyv4480) != 0 {
			yyv4480 = yyv4480[:0]
			yyc4480 = true
		}
	} else if yyl4480 > 0 {
		var yyrr4480, yyrl4480 int
		var yyrt4480 bool
		if yyl4480 > cap(yyv4480) {

			yyrg4480 := len(yyv4480) > 0
			yyv24480 := yyv4480
			yyrl4480, yyrt4480 = z.DecInferLen(yyl4480, z.DecBasicHandle().MaxInitLen, 184)
			if yyrt4480 {
				if yyrl4480 <= cap(yyv4480) {
					yyv4480 = yyv4480[:yyrl4480]
				} else {
					yyv4480 = make([]Volume, yyrl4480)
				}
			} else {
				yyv4480 = make([]Volume, yyrl4480)
			}
			yyc4480 = true
			yyrr4480 = len(yyv4480)
			if yyrg4480 {
				copy(yyv4480, yyv24480)
			}
		} else if yyl4480 != len(yyv4480) {
			yyv4480 = yyv4480[:yyl4480]
			yyc4480 = true
		}
		yyj4480 := 0
		for ; yyj4480 < yyrr4480; yyj4480++ {
			yyh4480.ElemContainerState(yyj4480)
			if r.TryDecodeAsNil() {
				yyv4480[yyj4480] = Volume{}
			} else {
				yyv4481 := &yyv4480[yyj4480]
				yyv4481.CodecDecodeSelf(d)
			}

		}
		if yyrt4480 {
			for ; yyj4480 < yyl4480; yyj4480++ {
				yyv4480 = append(yyv4480, Volume{})
				yyh4480.ElemContainerState(yyj4480)
				if r.TryDecodeAsNil() {
					yyv4480[yyj4480] = Volume{}
				} else {
					yyv4482 := &yyv4480[yyj4480]
					yyv4482.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4480 := 0
		for ; !r.CheckBreak(); yyj4480++ {

			if yyj4480 >= len(yyv4480) {
				yyv4480 = append(yyv4480, Volume{}) // var yyz4480 Volume
				yyc4480 = true
			}
			yyh4480.ElemContainerState(yyj4480)
			if yyj4480 < len(yyv4480) {
				if r.TryDecodeAsNil() {
					yyv4480[yyj4480] = Volume{}
				} else {
					yyv4483 := &yyv4480[yyj4480]
					yyv4483.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4480 < len(yyv4480) {
			yyv4480 = yyv4480[:yyj4480]
			yyc4480 = true
		} else if yyj4480 == 0 && yyv4480 == nil {
			yyv4480 = []Volume{}
			yyc4480 = true
		}
	}
	yyh4480.End()
	if yyc4480 {
		*v = yyv4480
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4484 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4485 := &yyv4484
		yy4485.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4486 := *v
	yyh4486, yyl4486 := z.DecSliceHelperStart()
	var yyc4486 bool
	if yyl4486 == 0 {
		if yyv4486 == nil {
			yyv4486 = []Container{}
			yyc4486 = true
		} else if len(yyv4486) != 0 {
			yyv4486 = yyv4486[:0]
			yyc4486 = true
		}
	} else if yyl4486 > 0 {
		var yyrr4486, yyrl4486 int
		var yyrt4486 bool
		if yyl4486 > cap(yyv4486) {

			yyrg4486 := len(yyv4486) > 0
			yyv24486 := yyv4486
			yyrl4486, yyrt4486 = z.DecInferLen(yyl4486, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4486 {
				if yyrl4486 <= cap(yyv4486) {
					yyv4486 = yyv4486[:yyrl4486]
				} else {
					yyv4486 = make([]Container, yyrl4486)
				}
			} else {
				yyv4486 = make([]Container, yyrl4486)
			}
			yyc4486 = true
			yyrr4486 = len(yyv4486)
			if yyrg4486 {
				copy(yyv4486, yyv24486)
			}
		} else if yyl4486 != len(yyv4486) {
			yyv4486 = yyv4486[:yyl4486]
			yyc4486 = true
		}
		yyj4486 := 0
		for ; yyj4486 < yyrr4486; yyj4486++ {
			yyh4486.ElemContainerState(yyj4486)
			if r.TryDecodeAsNil() {
				yyv4486[yyj4486] = Container{}
			} else {
				yyv4487 := &yyv4486[yyj4486]
				yyv4487.CodecDecodeSelf(d)
			}

		}
		if yyrt4486 {
			for ; yyj4486 < yyl4486; yyj4486++ {
				yyv4486 = append(yyv4486, Container{})
				yyh4486.ElemContainerState(yyj4486)
				if r.TryDecodeAsNil() {
					yyv4486[yyj4486] = Container{}
				} else {
					yyv4488 := &yyv4486[yyj4486]
					yyv4488.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4486 := 0
		for ; !r.CheckBreak(); yyj4486++ {

			if yyj4486 >= len(yyv4486) {
				yyv4486 = append(yyv4486, Container{}) // var yyz4486 Container
				yyc4486 = true
			}
			yyh4486.ElemContainerState(yyj4486)
			if yyj4486 < len(yyv4486) {
				if r.TryDecodeAsNil() {
					yyv4486[yyj4486] = Container{}
				} else {
					yyv4489 := &yyv4486[yyj4486]
					yyv4489.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4486 < len(yyv4486) {
			yyv4486 = yyv4486[:yyj4486]
			yyc4486 = true
		} else if yyj4486 == 0 && yyv4486 == nil {
			yyv4486 = []Container{}
			yyc4486 = true
		}
	}
	yyh4486.End()
	if yyc4486 {
		*v = yyv4486
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4490 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4491 := &yyv4490
		yy4491.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4492 := *v
	yyh4492, yyl4492 := z.DecSliceHelperStart()
	var yyc4492 bool
	if yyl4492 == 0 {
		if yyv4492 == nil {
			yyv4492 = []LocalObjectReference{}
			yyc4492 = true
		} else if len(yyv4492) != 0 {
			yyv4492 = yyv4492[:0]
			yyc4492 = true
		}
	} else if yyl4492 > 0 {
		var yyrr4492, yyrl4492 int
		var yyrt4492 bool
		if yyl4492 > cap(yyv4492) {

			yyrg4492 := len(yyv4492) > 0
			yyv24492 := yyv4492
			yyrl4492, yyrt4492 = z.DecInferLen(yyl4492, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4492 {
				if yyrl4492 <= cap(yyv4492) {
					yyv4492 = yyv4492[:yyrl4492]
				} else {
					yyv4492 = make([]LocalObjectReference, yyrl4492)
				}
			} else {
				yyv4492 = make([]LocalObjectReference, yyrl4492)
			}
			yyc4492 = true
			yyrr4492 = len(yyv4492)
			if yyrg4492 {
				copy(yyv4492, yyv24492)
			}
		} else if yyl4492 != len(yyv4492) {
			yyv4492 = yyv4492[:yyl4492]
			yyc4492 = true
		}
		yyj4492 := 0
		for ; yyj4492 < yyrr4492; yyj4492++ {
			yyh4492.ElemContainerState(yyj4492)
			if r.TryDecodeAsNil() {
				yyv4492[yyj4492] = LocalObjectReference{}
			} else {
				yyv4493 := &yyv4492[yyj4492]
				yyv4493.CodecDecodeSelf(d)
			}

		}
		if yyrt4492 {
			for ; yyj4492 < yyl4492; yyj4492++ {
				yyv4492 = append(yyv4492, LocalObjectReference{})
				yyh4492.ElemContainerState(yyj4492)
				if r.TryDecodeAsNil() {
					yyv4492[yyj4492] = LocalObjectReference{}
				} else {
					yyv4494 := &yyv4492[yyj4492]
					yyv4494.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4492 := 0
		for ; !r.CheckBreak(); yyj4492++ {

			if yyj4492 >= len(yyv4492) {
				yyv4492 = append(yyv4492, LocalObjectReference{}) // var yyz4492 LocalObjectReference
				yyc4492 = true
			}
			yyh4492.ElemContainerState(yyj4492)
			if yyj4492 < len(yyv4492) {
				if r.TryDecodeAsNil() {
					yyv4492[yyj4492] = LocalObjectReference{}
				} else {
					yyv4495 := &yyv4492[yyj4492]
					yyv4495.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4492 < len(yyv4492) {
			yyv4492 = yyv4492[:yyj4492]
			yyc4492 = true
		} else if yyj4492 == 0 && yyv4492 == nil {
			yyv4492 = []LocalObjectReference{}
			yyc4492 = true
		}
	}
	yyh4492.End()
	if yyc4492 {
		*v = yyv4492
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4496 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4497 := &yyv4496
		yy4497.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4498 := *v
	yyh4498, yyl4498 := z.DecSliceHelperStart()
	var yyc4498 bool
	if yyl4498 == 0 {
		if yyv4498 == nil {
			yyv4498 = []PodCondition{}
			yyc4498 = true
		} else if len(yyv4498) != 0 {
			yyv4498 = yyv4498[:0]
			yyc4498 = true
		}
	} else if yyl4498 > 0 {
		var yyrr4498, yyrl4498 int
		var yyrt4498 bool
		if yyl4498 > cap(yyv4498) {

			yyrg4498 := len(yyv4498) > 0
			yyv24498 := yyv4498
			yyrl4498, yyrt4498 = z.DecInferLen(yyl4498, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4498 {
				if yyrl4498 <= cap(yyv4498) {
					yyv4498 = yyv4498[:yyrl4498]
				} else {
					yyv4498 = make([]PodCondition, yyrl4498)
				}
			} else {
				yyv4498 = make([]PodCondition, yyrl4498)
			}
			yyc4498 = true
			yyrr4498 = len(yyv4498)
			if yyrg4498 {
				copy(yyv4498, yyv24498)
			}
		} else if yyl4498 != len(yyv4498) {
			yyv4498 = yyv4498[:yyl4498]
			yyc4498 = true
		}
		yyj4498 := 0
		for ; yyj4498 < yyrr4498; yyj4498++ {
			yyh4498.ElemContainerState(yyj4498)
			if r.TryDecodeAsNil() {
				yyv4498[yyj4498] = PodCondition{}
			} else {
				yyv4499 := &yyv4498[yyj4498]
				yyv4499.CodecDecodeSelf(d)
			}

		}
		if yyrt4498 {
			for ; yyj4498 < yyl4498; yyj4498++ {
				yyv4498 = append(yyv4498, PodCondition{})
				yyh4498.ElemContainerState(yyj4498)
				if r.TryDecodeAsNil() {
					yyv4498[yyj4498] = PodCondition{}
				} else {
					yyv4500 := &yyv4498[yyj4498]
					yyv4500.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4498 := 0
		for ; !r.CheckBreak(); yyj4498++ {

			if yyj4498 >= len(yyv4498) {
				yyv4498 = append(yyv4498, PodCondition{}) // var yyz4498 PodCondition
				yyc4498 = true
			}
			yyh4498.ElemContainerState(yyj4498)
			if yyj4498 < len(yyv4498) {
				if r.TryDecodeAsNil() {
					yyv4498[yyj4498] = PodCondition{}
				} else {
					yyv4501 := &yyv4498[yyj4498]
					yyv4501.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4498 < len(yyv4498) {
			yyv4498 = yyv4498[:yyj4498]
			yyc4498 = true
		} else if yyj4498 == 0 && yyv4498 == nil {
			yyv4498 = []PodCondition{}
			yyc4498 = true
		}
	}
	yyh4498.End()
	if yyc4498 {
		*v = yyv4498
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4502 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4503 := &yyv4502
		yy4503.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4504 := *v
	yyh4504, yyl4504 := z.DecSliceHelperStart()
	var yyc4504 bool
	if yyl4504 == 0 {
		if yyv4504 == nil {
			yyv4504 = []ContainerStatus{}
			yyc4504 = true
		} else if len(yyv4504) != 0 {
			yyv4504 = yyv4504[:0]
			yyc4504 = true
		}
	} else if yyl4504 > 0 {
		var yyrr4504, yyrl4504 int
		var yyrt4504 bool
		if yyl4504 > cap(yyv4504) {

			yyrg4504 := len(yyv4504) > 0
			yyv24504 := yyv4504
			yyrl4504, yyrt4504 = z.DecInferLen(yyl4504, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4504 {
				if yyrl4504 <= cap(yyv4504) {
					yyv4504 = yyv4504[:yyrl4504]
				} else {
					yyv4504 = make([]ContainerStatus, yyrl4504)
				}
			} else {
				yyv4504 = make([]ContainerStatus, yyrl4504)
			}
			yyc4504 = true
			yyrr4504 = len(yyv4504)
			if yyrg4504 {
				copy(yyv4504, yyv24504)
			}
		} else if yyl4504 != len(yyv4504) {
			yyv4504 = yyv4504[:yyl4504]
			yyc4504 = true
		}
		yyj4504 := 0
		for ; yyj4504 < yyrr4504; yyj4504++ {
			yyh4504.ElemContainerState(yyj4504)
			if r.TryDecodeAsNil() {
				yyv4504[yyj4504] = ContainerStatus{}
			} else {
				yyv4505 := &yyv4504[yyj4504]
				yyv4505.CodecDecodeSelf(d)
			}

		}
		if yyrt4504 {
			for ; yyj4504 < yyl4504; yyj4504++ {
				yyv4504 = append(yyv4504, ContainerStatus{})
				yyh4504.ElemContainerState(yyj4504)
				if r.TryDecodeAsNil() {
					yyv4504[yyj4504] = ContainerStatus{}
				} else {
					yyv4506 := &yyv4504[yyj4504]
					yyv4506.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4504 := 0
		for ; !r.CheckBreak(); yyj4504++ {

			if yyj4504 >= len(yyv4504) {
				yyv4504 = append(yyv4504, ContainerStatus{}) // var yyz4504 ContainerStatus
				yyc4504 = true
			}
			yyh4504.ElemContainerState(yyj4504)
			if yyj4504 < len(yyv4504) {
				if r.TryDecodeAsNil() {
					yyv4504[yyj4504] = ContainerStatus{}
				} else {
					yyv4507 := &yyv4504[yyj4504]
					yyv4507.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4504 < len(yyv4504) {
			yyv4504 = yyv4504[:yyj4504]
			yyc4504 = true
		} else if yyj4504 == 0 && yyv4504 == nil {
			yyv4504 = []ContainerStatus{}
			yyc4504 = true
		}
	}
	yyh4504.End()
	if yyc4504 {
		*v = yyv4504
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4508 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4509 := &yyv4508
		yy4509.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4510 := *v
	yyh4510, yyl4510 := z.DecSliceHelperStart()
	var yyc4510 bool
	if yyl4510 == 0 {
		if yyv4510 == nil {
			yyv4510 = []PodTemplate{}
			yyc4510 = true
		} else if len(yyv4510) != 0 {
			yyv4510 = yyv4510[:0]
			yyc4510 = true
		}
	} else if yyl4510 > 0 {
		var yyrr4510, yyrl4510 int
		var yyrt4510 bool
		if yyl4510 > cap(yyv4510) {

			yyrg4510 := len(yyv4510) > 0
			yyv24510 := yyv4510
			yyrl4510, yyrt4510 = z.DecInferLen(yyl4510, z.DecBasicHandle().MaxInitLen, 672)
			if yyrt4510 {
				if yyrl4510 <= cap(yyv4510) {
					yyv4510 = yyv4510[:yyrl4510]
				} else {
					yyv4510 = make([]PodTemplate, yyrl4510)
				}
			} else {
				yyv4510 = make([]PodTemplate, yyrl4510)
			}
			yyc4510 = true
			yyrr4510 = len(yyv4510)
			if yyrg4510 {
				copy(yyv4510, yyv24510)
			}
		} else if yyl4510 != len(yyv4510) {
			yyv4510 = yyv4510[:yyl4510]
			yyc4510 = true
		}
		yyj4510 := 0
		for ; yyj4510 < yyrr4510; yyj4510++ {
			yyh4510.ElemContainerState(yyj4510)
			if r.TryDecodeAsNil() {
				yyv4510[yyj4510] = PodTemplate{}
			} else {
				yyv4511 := &yyv4510[yyj4510]
				yyv4511.CodecDecodeSelf(d)
			}

		}
		if yyrt4510 {
			for ; yyj4510 < yyl4510; yyj4510++ {
				yyv4510 = append(yyv4510, PodTemplate{})
				yyh4510.ElemContainerState(yyj4510)
				if r.TryDecodeAsNil() {
					yyv4510[yyj4510] = PodTemplate{}
				} else {
					yyv4512 := &yyv4510[yyj4510]
					yyv4512.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4510 := 0
		for ; !r.CheckBreak(); yyj4510++ {

			if yyj4510 >= len(yyv4510) {
				yyv4510 = append(yyv4510, PodTemplate{}) // var yyz4510 PodTemplate
				yyc4510 = true
			}
			yyh4510.ElemContainerState(yyj4510)
			if yyj4510 < len(yyv4510) {
				if r.TryDecodeAsNil() {
					yyv4510[yyj4510] = PodTemplate{}
				} else {
					yyv4513 := &yyv4510[yyj4510]
					yyv4513.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4510 < len(yyv4510) {
			yyv4510 = yyv4510[:yyj4510]
			yyc4510 = true
		} else if yyj4510 == 0 && yyv4510 == nil {
			yyv4510 = []PodTemplate{}
			yyc4510 = true
		}
	}
	yyh4510.End()
	if yyc4510 {
		*v = yyv4510
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4514 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4515 := &yyv4514
		yy4515.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4516 := *v
	yyh4516, yyl4516 := z.DecSliceHelperStart()
	var yyc4516 bool
	if yyl4516 == 0 {
		if yyv4516 == nil {
			yyv4516 = []ReplicationController{}
			yyc4516 = true
		} else if len(yyv4516) != 0 {
			yyv4516 = yyv4516[:0]
			yyc4516 = true
		}
	} else if yyl4516 > 0 {
		var yyrr4516, yyrl4516 int
		var yyrt4516 bool
		if yyl4516 > cap(yyv4516) {

			yyrg4516 := len(yyv4516) > 0
			yyv24516 := yyv4516
			yyrl4516, yyrt4516 = z.DecInferLen(yyl4516, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4516 {
				if yyrl4516 <= cap(yyv4516) {
					yyv4516 = yyv4516[:yyrl4516]
				} else {
					yyv4516 = make([]ReplicationController, yyrl4516)
				}
			} else {
				yyv4516 = make([]ReplicationController, yyrl4516)
			}
			yyc4516 = true
			yyrr4516 = len(yyv4516)
			if yyrg4516 {
				copy(yyv4516, yyv24516)
			}
		} else if yyl4516 != len(yyv4516) {
			yyv4516 = yyv4516[:yyl4516]
			yyc4516 = true
		}
		yyj4516 := 0
		for ; yyj4516 < yyrr4516; yyj4516++ {
			yyh4516.ElemContainerState(yyj4516)
			if r.TryDecodeAsNil() {
				yyv4516[yyj4516] = ReplicationController{}
			} else {
				yyv4517 := &yyv4516[yyj4516]
				yyv4517.CodecDecodeSelf(d)
			}

		}
		if yyrt4516 {
			for ; yyj4516 < yyl4516; yyj4516++ {
				yyv4516 = append(yyv4516, ReplicationController{})
				yyh4516.ElemContainerState(yyj4516)
				if r.TryDecodeAsNil() {
					yyv4516[yyj4516] = ReplicationController{}
				} else {
					yyv4518 := &yyv4516[yyj4516]
					yyv4518.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4516 := 0
		for ; !r.CheckBreak(); yyj4516++ {

			if yyj4516 >= len(yyv4516) {
				yyv4516 = append(yyv4516, ReplicationController{}) // var yyz4516 ReplicationController
				yyc4516 = true
			}
			yyh4516.ElemContainerState(yyj4516)
			if yyj4516 < len(yyv4516) {
				if r.TryDecodeAsNil() {
					yyv4516[yyj4516] = ReplicationController{}
				} else {
					yyv4519 := &yyv4516[yyj4516]
					yyv4519.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4516 < len(yyv4516) {
			yyv4516 = yyv4516[:yyj4516]
			yyc4516 = true
		} else if yyj4516 == 0 && yyv4516 == nil {
			yyv4516 = []ReplicationController{}
			yyc4516 = true
		}
	}
	yyh4516.End()
	if yyc4516 {
		*v = yyv4516
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4520 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4521 := &yyv4520
		yy4521.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4522 := *v
	yyh4522, yyl4522 := z.DecSliceHelperStart()
	var yyc4522 bool
	if yyl4522 == 0 {
		if yyv4522 == nil {
			yyv4522 = []Service{}
			yyc4522 = true
		} else if len(yyv4522) != 0 {
			yyv4522 = yyv4522[:0]
			yyc4522 = true
		}
	} else if yyl4522 > 0 {
		var yyrr4522, yyrl4522 int
		var yyrt4522 bool
		if yyl4522 > cap(yyv4522) {

			yyrg4522 := len(yyv4522) > 0
			yyv24522 := yyv4522
			yyrl4522, yyrt4522 = z.DecInferLen(yyl4522, z.DecBasicHandle().MaxInitLen, 408)
			if yyrt4522 {
				if yyrl4522 <= cap(yyv4522) {
					yyv4522 = yyv4522[:yyrl4522]
				} else {
					yyv4522 = make([]Service, yyrl4522)
				}
			} else {
				yyv4522 = make([]Service, yyrl4522)
			}
			yyc4522 = true
			yyrr4522 = len(yyv4522)
			if yyrg4522 {
				copy(yyv4522, yyv24522)
			}
		} else if yyl4522 != len(yyv4522) {
			yyv4522 = yyv4522[:yyl4522]
			yyc4522 = true
		}
		yyj4522 := 0
		for ; yyj4522 < yyrr4522; yyj4522++ {
			yyh4522.ElemContainerState(yyj4522)
			if r.TryDecodeAsNil() {
				yyv4522[yyj4522] = Service{}
			} else {
				yyv4523 := &yyv4522[yyj4522]
				yyv4523.CodecDecodeSelf(d)
			}

		}
		if yyrt4522 {
			for ; yyj4522 < yyl4522; yyj4522++ {
				yyv4522 = append(yyv4522, Service{})
				yyh4522.ElemContainerState(yyj4522)
				if r.TryDecodeAsNil() {
					yyv4522[yyj4522] = Service{}
				} else {
					yyv4524 := &yyv4522[yyj4522]
					yyv4524.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4522 := 0
		for ; !r.CheckBreak(); yyj4522++ {

			if yyj4522 >= len(yyv4522) {
				yyv4522 = append(yyv4522, Service{}) // var yyz4522 Service
				yyc4522 = true
			}
			yyh4522.ElemContainerState(yyj4522)
			if yyj4522 < len(yyv4522) {
				if r.TryDecodeAsNil() {
					yyv4522[yyj4522] = Service{}
				} else {
					yyv4525 := &yyv4522[yyj4522]
					yyv4525.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4522 < len(yyv4522) {
			yyv4522 = yyv4522[:yyj4522]
			yyc4522 = true
		} else if yyj4522 == 0 && yyv4522 == nil {
			yyv4522 = []Service{}
			yyc4522 = true
		}
	}
	yyh4522.End()
	if yyc4522 {
		*v = yyv4522
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4526 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4527 := &yyv4526
		yy4527.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4528 := *v
	yyh4528, yyl4528 := z.DecSliceHelperStart()
	var yyc4528 bool
	if yyl4528 == 0 {
		if yyv4528 == nil {
			yyv4528 = []LoadBalancerIngress{}
			yyc4528 = true
		} else if len(yyv4528) != 0 {
			yyv4528 = yyv4528[:0]
			yyc4528 = true
		}
	} else if yyl4528 > 0 {
		var yyrr4528, yyrl4528 int
		var yyrt4528 bool
		if yyl4528 > cap(yyv4528) {

			yyrg4528 := len(yyv4528) > 0
			yyv24528 := yyv4528
			yyrl4528, yyrt4528 = z.DecInferLen(yyl4528, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4528 {
				if yyrl4528 <= cap(yyv4528) {
					yyv4528 = yyv4528[:yyrl4528]
				} else {
					yyv4528 = make([]LoadBalancerIngress, yyrl4528)
				}
			} else {
				yyv4528 = make([]LoadBalancerIngress, yyrl4528)
			}
			yyc4528 = true
			yyrr4528 = len(yyv4528)
			if yyrg4528 {
				copy(yyv4528, yyv24528)
			}
		} else if yyl4528 != len(yyv4528) {
			yyv4528 = yyv4528[:yyl4528]
			yyc4528 = true
		}
		yyj4528 := 0
		for ; yyj4528 < yyrr4528; yyj4528++ {
			yyh4528.ElemContainerState(yyj4528)
			if r.TryDecodeAsNil() {
				yyv4528[yyj4528] = LoadBalancerIngress{}
			} else {
				yyv4529 := &yyv4528[yyj4528]
				yyv4529.CodecDecodeSelf(d)
			}

		}
		if yyrt4528 {
			for ; yyj4528 < yyl4528; yyj4528++ {
				yyv4528 = append(yyv4528, LoadBalancerIngress{})
				yyh4528.ElemContainerState(yyj4528)
				if r.TryDecodeAsNil() {
					yyv4528[yyj4528] = LoadBalancerIngress{}
				} else {
					yyv4530 := &yyv4528[yyj4528]
					yyv4530.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4528 := 0
		for ; !r.CheckBreak(); yyj4528++ {

			if yyj4528 >= len(yyv4528) {
				yyv4528 = append(yyv4528, LoadBalancerIngress{}) // var yyz4528 LoadBalancerIngress
				yyc4528 = true
			}
			yyh4528.ElemContainerState(yyj4528)
			if yyj4528 < len(yyv4528) {
				if r.TryDecodeAsNil() {
					yyv4528[yyj4528] = LoadBalancerIngress{}
				} else {
					yyv4531 := &yyv4528[yyj4528]
					yyv4531.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4528 < len(yyv4528) {
			yyv4528 = yyv4528[:yyj4528]
			yyc4528 = true
		} else if yyj4528 == 0 && yyv4528 == nil {
			yyv4528 = []LoadBalancerIngress{}
			yyc4528 = true
		}
	}
	yyh4528.End()
	if yyc4528 {
		*v = yyv4528
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4532 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4533 := &yyv4532
		yy4533.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4534 := *v
	yyh4534, yyl4534 := z.DecSliceHelperStart()
	var yyc4534 bool
	if yyl4534 == 0 {
		if yyv4534 == nil {
			yyv4534 = []ServicePort{}
			yyc4534 = true
		} else if len(yyv4534) != 0 {
			yyv4534 = yyv4534[:0]
			yyc4534 = true
		}
	} else if yyl4534 > 0 {
		var yyrr4534, yyrl4534 int
		var yyrt4534 bool
		if yyl4534 > cap(yyv4534) {

			yyrg4534 := len(yyv4534) > 0
			yyv24534 := yyv4534
			yyrl4534, yyrt4534 = z.DecInferLen(yyl4534, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4534 {
				if yyrl4534 <= cap(yyv4534) {
					yyv4534 = yyv4534[:yyrl4534]
				} else {
					yyv4534 = make([]ServicePort, yyrl4534)
				}
			} else {
				yyv4534 = make([]ServicePort, yyrl4534)
			}
			yyc4534 = true
			yyrr4534 = len(yyv4534)
			if yyrg4534 {
				copy(yyv4534, yyv24534)
			}
		} else if yyl4534 != len(yyv4534) {
			yyv4534 = yyv4534[:yyl4534]
			yyc4534 = true
		}
		yyj4534 := 0
		for ; yyj4534 < yyrr4534; yyj4534++ {
			yyh4534.ElemContainerState(yyj4534)
			if r.TryDecodeAsNil() {
				yyv4534[yyj4534] = ServicePort{}
			} else {
				yyv4535 := &yyv4534[yyj4534]
				yyv4535.CodecDecodeSelf(d)
			}

		}
		if yyrt4534 {
			for ; yyj4534 < yyl4534; yyj4534++ {
				yyv4534 = append(yyv4534, ServicePort{})
				yyh4534.ElemContainerState(yyj4534)
				if r.TryDecodeAsNil() {
					yyv4534[yyj4534] = ServicePort{}
				} else {
					yyv4536 := &yyv4534[yyj4534]
					yyv4536.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4534 := 0
		for ; !r.CheckBreak(); yyj4534++ {

			if yyj4534 >= len(yyv4534) {
				yyv4534 = append(yyv4534, ServicePort{}) // var yyz4534 ServicePort
				yyc4534 = true
			}
			yyh4534.ElemContainerState(yyj4534)
			if yyj4534 < len(yyv4534) {
				if r.TryDecodeAsNil() {
					yyv4534[yyj4534] = ServicePort{}
				} else {
					yyv4537 := &yyv4534[yyj4534]
					yyv4537.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4534 < len(yyv4534) {
			yyv4534 = yyv4534[:yyj4534]
			yyc4534 = true
		} else if yyj4534 == 0 && yyv4534 == nil {
			yyv4534 = []ServicePort{}
			yyc4534 = true
		}
	}
	yyh4534.End()
	if yyc4534 {
		*v = yyv4534
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4538 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4539 := &yyv4538
		yy4539.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4540 := *v
	yyh4540, yyl4540 := z.DecSliceHelperStart()
	var yyc4540 bool
	if yyl4540 == 0 {
		if yyv4540 == nil {
			yyv4540 = []ObjectReference{}
			yyc4540 = true
		} else if len(yyv4540) != 0 {
			yyv4540 = yyv4540[:0]
			yyc4540 = true
		}
	} else if yyl4540 > 0 {
		var yyrr4540, yyrl4540 int
		var yyrt4540 bool
		if yyl4540 > cap(yyv4540) {

			yyrg4540 := len(yyv4540) > 0
			yyv24540 := yyv4540
			yyrl4540, yyrt4540 = z.DecInferLen(yyl4540, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4540 {
				if yyrl4540 <= cap(yyv4540) {
					yyv4540 = yyv4540[:yyrl4540]
				} else {
					yyv4540 = make([]ObjectReference, yyrl4540)
				}
			} else {
				yyv4540 = make([]ObjectReference, yyrl4540)
			}
			yyc4540 = true
			yyrr4540 = len(yyv4540)
			if yyrg4540 {
				copy(yyv4540, yyv24540)
			}
		} else if yyl4540 != len(yyv4540) {
			yyv4540 = yyv4540[:yyl4540]
			yyc4540 = true
		}
		yyj4540 := 0
		for ; yyj4540 < yyrr4540; yyj4540++ {
			yyh4540.ElemContainerState(yyj4540)
			if r.TryDecodeAsNil() {
				yyv4540[yyj4540] = ObjectReference{}
			} else {
				yyv4541 := &yyv4540[yyj4540]
				yyv4541.CodecDecodeSelf(d)
			}

		}
		if yyrt4540 {
			for ; yyj4540 < yyl4540; yyj4540++ {
				yyv4540 = append(yyv4540, ObjectReference{})
				yyh4540.ElemContainerState(yyj4540)
				if r.TryDecodeAsNil() {
					yyv4540[yyj4540] = ObjectReference{}
				} else {
					yyv4542 := &yyv4540[yyj4540]
					yyv4542.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4540 := 0
		for ; !r.CheckBreak(); yyj4540++ {

			if yyj4540 >= len(yyv4540) {
				yyv4540 = append(yyv4540, ObjectReference{}) // var yyz4540 ObjectReference
				yyc4540 = true
			}
			yyh4540.ElemContainerState(yyj4540)
			if yyj4540 < len(yyv4540) {
				if r.TryDecodeAsNil() {
					yyv4540[yyj4540] = ObjectReference{}
				} else {
					yyv4543 := &yyv4540[yyj4540]
					yyv4543.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4540 < len(yyv4540) {
			yyv4540 = yyv4540[:yyj4540]
			yyc4540 = true
		} else if yyj4540 == 0 && yyv4540 == nil {
			yyv4540 = []ObjectReference{}
			yyc4540 = true
		}
	}
	yyh4540.End()
	if yyc4540 {
		*v = yyv4540
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4544 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4545 := &yyv4544
		yy4545.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4546 := *v
	yyh4546, yyl4546 := z.DecSliceHelperStart()
	var yyc4546 bool
	if yyl4546 == 0 {
		if yyv4546 == nil {
			yyv4546 = []ServiceAccount{}
			yyc4546 = true
		} else if len(yyv4546) != 0 {
			yyv4546 = yyv4546[:0]
			yyc4546 = true
		}
	} else if yyl4546 > 0 {
		var yyrr4546, yyrl4546 int
		var yyrt4546 bool
		if yyl4546 > cap(yyv4546) {

			yyrg4546 := len(yyv4546) > 0
			yyv24546 := yyv4546
			yyrl4546, yyrt4546 = z.DecInferLen(yyl4546, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4546 {
				if yyrl4546 <= cap(yyv4546) {
					yyv4546 = yyv4546[:yyrl4546]
				} else {
					yyv4546 = make([]ServiceAccount, yyrl4546)
				}
			} else {
				yyv4546 = make([]ServiceAccount, yyrl4546)
			}
			yyc4546 = true
			yyrr4546 = len(yyv4546)
			if yyrg4546 {
				copy(yyv4546, yyv24546)
			}
		} else if yyl4546 != len(yyv4546) {
			yyv4546 = yyv4546[:yyl4546]
			yyc4546 = true
		}
		yyj4546 := 0
		for ; yyj4546 < yyrr4546; yyj4546++ {
			yyh4546.ElemContainerState(yyj4546)
			if r.TryDecodeAsNil() {
				yyv4546[yyj4546] = ServiceAccount{}
			} else {
				yyv4547 := &yyv4546[yyj4546]
				yyv4547.CodecDecodeSelf(d)
			}

		}
		if yyrt4546 {
			for ; yyj4546 < yyl4546; yyj4546++ {
				yyv4546 = append(yyv4546, ServiceAccount{})
				yyh4546.ElemContainerState(yyj4546)
				if r.TryDecodeAsNil() {
					yyv4546[yyj4546] = ServiceAccount{}
				} else {
					yyv4548 := &yyv4546[yyj4546]
					yyv4548.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4546 := 0
		for ; !r.CheckBreak(); yyj4546++ {

			if yyj4546 >= len(yyv4546) {
				yyv4546 = append(yyv4546, ServiceAccount{}) // var yyz4546 ServiceAccount
				yyc4546 = true
			}
			yyh4546.ElemContainerState(yyj4546)
			if yyj4546 < len(yyv4546) {
				if r.TryDecodeAsNil() {
					yyv4546[yyj4546] = ServiceAccount{}
				} else {
					yyv4549 := &yyv4546[yyj4546]
					yyv4549.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4546 < len(yyv4546) {
			yyv4546 = yyv4546[:yyj4546]
			yyc4546 = true
		} else if yyj4546 == 0 && yyv4546 == nil {
			yyv4546 = []ServiceAccount{}
			yyc4546 = true
		}
	}
	yyh4546.End()
	if yyc4546 {
		*v = yyv4546
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4550 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4551 := &yyv4550
		yy4551.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4552 := *v
	yyh4552, yyl4552 := z.DecSliceHelperStart()
	var yyc4552 bool
	if yyl4552 == 0 {
		if yyv4552 == nil {
			yyv4552 = []EndpointSubset{}
			yyc4552 = true
		} else if len(yyv4552) != 0 {
			yyv4552 = yyv4552[:0]
			yyc4552 = true
		}
	} else if yyl4552 > 0 {
		var yyrr4552, yyrl4552 int
		var yyrt4552 bool
		if yyl4552 > cap(yyv4552) {

			yyrg4552 := len(yyv4552) > 0
			yyv24552 := yyv4552
			yyrl4552, yyrt4552 = z.DecInferLen(yyl4552, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4552 {
				if yyrl4552 <= cap(yyv4552) {
					yyv4552 = yyv4552[:yyrl4552]
				} else {
					yyv4552 = make([]EndpointSubset, yyrl4552)
				}
			} else {
				yyv4552 = make([]EndpointSubset, yyrl4552)
			}
			yyc4552 = true
			yyrr4552 = len(yyv4552)
			if yyrg4552 {
				copy(yyv4552, yyv24552)
			}
		} else if yyl4552 != len(yyv4552) {
			yyv4552 = yyv4552[:yyl4552]
			yyc4552 = true
		}
		yyj4552 := 0
		for ; yyj4552 < yyrr4552; yyj4552++ {
			yyh4552.ElemContainerState(yyj4552)
			if r.TryDecodeAsNil() {
				yyv4552[yyj4552] = EndpointSubset{}
			} else {
				yyv4553 := &yyv4552[yyj4552]
				yyv4553.CodecDecodeSelf(d)
			}

		}
		if yyrt4552 {
			for ; yyj4552 < yyl4552; yyj4552++ {
				yyv4552 = append(yyv4552, EndpointSubset{})
				yyh4552.ElemContainerState(yyj4552)
				if r.TryDecodeAsNil() {
					yyv4552[yyj4552] = EndpointSubset{}
				} else {
					yyv4554 := &yyv4552[yyj4552]
					yyv4554.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4552 := 0
		for ; !r.CheckBreak(); yyj4552++ {

			if yyj4552 >= len(yyv4552) {
				yyv4552 = append(yyv4552, EndpointSubset{}) // var yyz4552 EndpointSubset
				yyc4552 = true
			}
			yyh4552.ElemContainerState(yyj4552)
			if yyj4552 < len(yyv4552) {
				if r.TryDecodeAsNil() {
					yyv4552[yyj4552] = EndpointSubset{}
				} else {
					yyv4555 := &yyv4552[yyj4552]
					yyv4555.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4552 < len(yyv4552) {
			yyv4552 = yyv4552[:yyj4552]
			yyc4552 = true
		} else if yyj4552 == 0 && yyv4552 == nil {
			yyv4552 = []EndpointSubset{}
			yyc4552 = true
		}
	}
	yyh4552.End()
	if yyc4552 {
		*v = yyv4552
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4556 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4557 := &yyv4556
		yy4557.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4558 := *v
	yyh4558, yyl4558 := z.DecSliceHelperStart()
	var yyc4558 bool
	if yyl4558 == 0 {
		if yyv4558 == nil {
			yyv4558 = []EndpointAddress{}
			yyc4558 = true
		} else if len(yyv4558) != 0 {
			yyv4558 = yyv4558[:0]
			yyc4558 = true
		}
	} else if yyl4558 > 0 {
		var yyrr4558, yyrl4558 int
		var yyrt4558 bool
		if yyl4558 > cap(yyv4558) {

			yyrg4558 := len(yyv4558) > 0
			yyv24558 := yyv4558
			yyrl4558, yyrt4558 = z.DecInferLen(yyl4558, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4558 {
				if yyrl4558 <= cap(yyv4558) {
					yyv4558 = yyv4558[:yyrl4558]
				} else {
					yyv4558 = make([]EndpointAddress, yyrl4558)
				}
			} else {
				yyv4558 = make([]EndpointAddress, yyrl4558)
			}
			yyc4558 = true
			yyrr4558 = len(yyv4558)
			if yyrg4558 {
				copy(yyv4558, yyv24558)
			}
		} else if yyl4558 != len(yyv4558) {
			yyv4558 = yyv4558[:yyl4558]
			yyc4558 = true
		}
		yyj4558 := 0
		for ; yyj4558 < yyrr4558; yyj4558++ {
			yyh4558.ElemContainerState(yyj4558)
			if r.TryDecodeAsNil() {
				yyv4558[yyj4558] = EndpointAddress{}
			} else {
				yyv4559 := &yyv4558[yyj4558]
				yyv4559.CodecDecodeSelf(d)
			}

		}
		if yyrt4558 {
			for ; yyj4558 < yyl4558; yyj4558++ {
				yyv4558 = append(yyv4558, EndpointAddress{})
				yyh4558.ElemContainerState(yyj4558)
				if r.TryDecodeAsNil() {
					yyv4558[yyj4558] = EndpointAddress{}
				} else {
					yyv4560 := &yyv4558[yyj4558]
					yyv4560.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4558 := 0
		for ; !r.CheckBreak(); yyj4558++ {

			if yyj4558 >= len(yyv4558) {
				yyv4558 = append(yyv4558, EndpointAddress{}) // var yyz4558 EndpointAddress
				yyc4558 = true
			}
			yyh4558.ElemContainerState(yyj4558)
			if yyj4558 < len(yyv4558) {
				if r.TryDecodeAsNil() {
					yyv4558[yyj4558] = EndpointAddress{}
				} else {
					yyv4561 := &yyv4558[yyj4558]
					yyv4561.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4558 < len(yyv4558) {
			yyv4558 = yyv4558[:yyj4558]
			yyc4558 = true
		} else if yyj4558 == 0 && yyv4558 == nil {
			yyv4558 = []EndpointAddress{}
			yyc4558 = true
		}
	}
	yyh4558.End()
	if yyc4558 {
		*v = yyv4558
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4562 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4563 := &yyv4562
		yy4563.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4564 := *v
	yyh4564, yyl4564 := z.DecSliceHelperStart()
	var yyc4564 bool
	if yyl4564 == 0 {
		if yyv4564 == nil {
			yyv4564 = []EndpointPort{}
			yyc4564 = true
		} else if len(yyv4564) != 0 {
			yyv4564 = yyv4564[:0]
			yyc4564 = true
		}
	} else if yyl4564 > 0 {
		var yyrr4564, yyrl4564 int
		var yyrt4564 bool
		if yyl4564 > cap(yyv4564) {

			yyrg4564 := len(yyv4564) > 0
			yyv24564 := yyv4564
			yyrl4564, yyrt4564 = z.DecInferLen(yyl4564, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4564 {
				if yyrl4564 <= cap(yyv4564) {
					yyv4564 = yyv4564[:yyrl4564]
				} else {
					yyv4564 = make([]EndpointPort, yyrl4564)
				}
			} else {
				yyv4564 = make([]EndpointPort, yyrl4564)
			}
			yyc4564 = true
			yyrr4564 = len(yyv4564)
			if yyrg4564 {
				copy(yyv4564, yyv24564)
			}
		} else if yyl4564 != len(yyv4564) {
			yyv4564 = yyv4564[:yyl4564]
			yyc4564 = true
		}
		yyj4564 := 0
		for ; yyj4564 < yyrr4564; yyj4564++ {
			yyh4564.ElemContainerState(yyj4564)
			if r.TryDecodeAsNil() {
				yyv4564[yyj4564] = EndpointPort{}
			} else {
				yyv4565 := &yyv4564[yyj4564]
				yyv4565.CodecDecodeSelf(d)
			}

		}
		if yyrt4564 {
			for ; yyj4564 < yyl4564; yyj4564++ {
				yyv4564 = append(yyv4564, EndpointPort{})
				yyh4564.ElemContainerState(yyj4564)
				if r.TryDecodeAsNil() {
					yyv4564[yyj4564] = EndpointPort{}
				} else {
					yyv4566 := &yyv4564[yyj4564]
					yyv4566.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4564 := 0
		for ; !r.CheckBreak(); yyj4564++ {

			if yyj4564 >= len(yyv4564) {
				yyv4564 = append(yyv4564, EndpointPort{}) // var yyz4564 EndpointPort
				yyc4564 = true
			}
			yyh4564.ElemContainerState(yyj4564)
			if yyj4564 < len(yyv4564) {
				if r.TryDecodeAsNil() {
					yyv4564[yyj4564] = EndpointPort{}
				} else {
					yyv4567 := &yyv4564[yyj4564]
					yyv4567.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4564 < len(yyv4564) {
			yyv4564 = yyv4564[:yyj4564]
			yyc4564 = true
		} else if yyj4564 == 0 && yyv4564 == nil {
			yyv4564 = []EndpointPort{}
			yyc4564 = true
		}
	}
	yyh4564.End()
	if yyc4564 {
		*v = yyv4564
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4568 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4569 := &yyv4568
		yy4569.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4570 := *v
	yyh4570, yyl4570 := z.DecSliceHelperStart()
	var yyc4570 bool
	if yyl4570 == 0 {
		if yyv4570 == nil {
			yyv4570 = []Endpoints{}
			yyc4570 = true
		} else if len(yyv4570) != 0 {
			yyv4570 = yyv4570[:0]
			yyc4570 = true
		}
	} else if yyl4570 > 0 {
		var yyrr4570, yyrl4570 int
		var yyrt4570 bool
		if yyl4570 > cap(yyv4570) {

			yyrg4570 := len(yyv4570) > 0
			yyv24570 := yyv4570
			yyrl4570, yyrt4570 = z.DecInferLen(yyl4570, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4570 {
				if yyrl4570 <= cap(yyv4570) {
					yyv4570 = yyv4570[:yyrl4570]
				} else {
					yyv4570 = make([]Endpoints, yyrl4570)
				}
			} else {
				yyv4570 = make([]Endpoints, yyrl4570)
			}
			yyc4570 = true
			yyrr4570 = len(yyv4570)
			if yyrg4570 {
				copy(yyv4570, yyv24570)
			}
		} else if yyl4570 != len(yyv4570) {
			yyv4570 = yyv4570[:yyl4570]
			yyc4570 = true
		}
		yyj4570 := 0
		for ; yyj4570 < yyrr4570; yyj4570++ {
			yyh4570.ElemContainerState(yyj4570)
			if r.TryDecodeAsNil() {
				yyv4570[yyj4570] = Endpoints{}
			} else {
				yyv4571 := &yyv4570[yyj4570]
				yyv4571.CodecDecodeSelf(d)
			}

		}
		if yyrt4570 {
			for ; yyj4570 < yyl4570; yyj4570++ {
				yyv4570 = append(yyv4570, Endpoints{})
				yyh4570.ElemContainerState(yyj4570)
				if r.TryDecodeAsNil() {
					yyv4570[yyj4570] = Endpoints{}
				} else {
					yyv4572 := &yyv4570[yyj4570]
					yyv4572.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4570 := 0
		for ; !r.CheckBreak(); yyj4570++ {

			if yyj4570 >= len(yyv4570) {
				yyv4570 = append(yyv4570, Endpoints{}) // var yyz4570 Endpoints
				yyc4570 = true
			}
			yyh4570.ElemContainerState(yyj4570)
			if yyj4570 < len(yyv4570) {
				if r.TryDecodeAsNil() {
					yyv4570[yyj4570] = Endpoints{}
				} else {
					yyv4573 := &yyv4570[yyj4570]
					yyv4573.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4570 < len(yyv4570) {
			yyv4570 = yyv4570[:yyj4570]
			yyc4570 = true
		} else if yyj4570 == 0 && yyv4570 == nil {
			yyv4570 = []Endpoints{}
			yyc4570 = true
		}
	}
	yyh4570.End()
	if yyc4570 {
		*v = yyv4570
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4574 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4575 := &yyv4574
		yy4575.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4576 := *v
	yyh4576, yyl4576 := z.DecSliceHelperStart()
	var yyc4576 bool
	if yyl4576 == 0 {
		if yyv4576 == nil {
			yyv4576 = []NodeCondition{}
			yyc4576 = true
		} else if len(yyv4576) != 0 {
			yyv4576 = yyv4576[:0]
			yyc4576 = true
		}
	} else if yyl4576 > 0 {
		var yyrr4576, yyrl4576 int
		var yyrt4576 bool
		if yyl4576 > cap(yyv4576) {

			yyrg4576 := len(yyv4576) > 0
			yyv24576 := yyv4576
			yyrl4576, yyrt4576 = z.DecInferLen(yyl4576, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4576 {
				if yyrl4576 <= cap(yyv4576) {
					yyv4576 = yyv4576[:yyrl4576]
				} else {
					yyv4576 = make([]NodeCondition, yyrl4576)
				}
			} else {
				yyv4576 = make([]NodeCondition, yyrl4576)
			}
			yyc4576 = true
			yyrr4576 = len(yyv4576)
			if yyrg4576 {
				copy(yyv4576, yyv24576)
			}
		} else if yyl4576 != len(yyv4576) {
			yyv4576 = yyv4576[:yyl4576]
			yyc4576 = true
		}
		yyj4576 := 0
		for ; yyj4576 < yyrr4576; yyj4576++ {
			yyh4576.ElemContainerState(yyj4576)
			if r.TryDecodeAsNil() {
				yyv4576[yyj4576] = NodeCondition{}
			} else {
				yyv4577 := &yyv4576[yyj4576]
				yyv4577.CodecDecodeSelf(d)
			}

		}
		if yyrt4576 {
			for ; yyj4576 < yyl4576; yyj4576++ {
				yyv4576 = append(yyv4576, NodeCondition{})
				yyh4576.ElemContainerState(yyj4576)
				if r.TryDecodeAsNil() {
					yyv4576[yyj4576] = NodeCondition{}
				} else {
					yyv4578 := &yyv4576[yyj4576]
					yyv4578.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4576 := 0
		for ; !r.CheckBreak(); yyj4576++ {

			if yyj4576 >= len(yyv4576) {
				yyv4576 = append(yyv4576, NodeCondition{}) // var yyz4576 NodeCondition
				yyc4576 = true
			}
			yyh4576.ElemContainerState(yyj4576)
			if yyj4576 < len(yyv4576) {
				if r.TryDecodeAsNil() {
					yyv4576[yyj4576] = NodeCondition{}
				} else {
					yyv4579 := &yyv4576[yyj4576]
					yyv4579.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4576 < len(yyv4576) {
			yyv4576 = yyv4576[:yyj4576]
			yyc4576 = true
		} else if yyj4576 == 0 && yyv4576 == nil {
			yyv4576 = []NodeCondition{}
			yyc4576 = true
		}
	}
	yyh4576.End()
	if yyc4576 {
		*v = yyv4576
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4580 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4581 := &yyv4580
		yy4581.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4582 := *v
	yyh4582, yyl4582 := z.DecSliceHelperStart()
	var yyc4582 bool
	if yyl4582 == 0 {
		if yyv4582 == nil {
			yyv4582 = []NodeAddress{}
			yyc4582 = true
		} else if len(yyv4582) != 0 {
			yyv4582 = yyv4582[:0]
			yyc4582 = true
		}
	} else if yyl4582 > 0 {
		var yyrr4582, yyrl4582 int
		var yyrt4582 bool
		if yyl4582 > cap(yyv4582) {

			yyrg4582 := len(yyv4582) > 0
			yyv24582 := yyv4582
			yyrl4582, yyrt4582 = z.DecInferLen(yyl4582, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4582 {
				if yyrl4582 <= cap(yyv4582) {
					yyv4582 = yyv4582[:yyrl4582]
				} else {
					yyv4582 = make([]NodeAddress, yyrl4582)
				}
			} else {
				yyv4582 = make([]NodeAddress, yyrl4582)
			}
			yyc4582 = true
			yyrr4582 = len(yyv4582)
			if yyrg4582 {
				copy(yyv4582, yyv24582)
			}
		} else if yyl4582 != len(yyv4582) {
			yyv4582 = yyv4582[:yyl4582]
			yyc4582 = true
		}
		yyj4582 := 0
		for ; yyj4582 < yyrr4582; yyj4582++ {
			yyh4582.ElemContainerState(yyj4582)
			if r.TryDecodeAsNil() {
				yyv4582[yyj4582] = NodeAddress{}
			} else {
				yyv4583 := &yyv4582[yyj4582]
				yyv4583.CodecDecodeSelf(d)
			}

		}
		if yyrt4582 {
			for ; yyj4582 < yyl4582; yyj4582++ {
				yyv4582 = append(yyv4582, NodeAddress{})
				yyh4582.ElemContainerState(yyj4582)
				if r.TryDecodeAsNil() {
					yyv4582[yyj4582] = NodeAddress{}
				} else {
					yyv4584 := &yyv4582[yyj4582]
					yyv4584.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4582 := 0
		for ; !r.CheckBreak(); yyj4582++ {

			if yyj4582 >= len(yyv4582) {
				yyv4582 = append(yyv4582, NodeAddress{}) // var yyz4582 NodeAddress
				yyc4582 = true
			}
			yyh4582.ElemContainerState(yyj4582)
			if yyj4582 < len(yyv4582) {
				if r.TryDecodeAsNil() {
					yyv4582[yyj4582] = NodeAddress{}
				} else {
					yyv4585 := &yyv4582[yyj4582]
					yyv4585.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4582 < len(yyv4582) {
			yyv4582 = yyv4582[:yyj4582]
			yyc4582 = true
		} else if yyj4582 == 0 && yyv4582 == nil {
			yyv4582 = []NodeAddress{}
			yyc4582 = true
		}
	}
	yyh4582.End()
	if yyc4582 {
		*v = yyv4582
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4586 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4587 := &yyv4586
		yy4587.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4588 := *v
	yyh4588, yyl4588 := z.DecSliceHelperStart()
	var yyc4588 bool
	if yyl4588 == 0 {
		if yyv4588 == nil {
			yyv4588 = []ContainerImage{}
			yyc4588 = true
		} else if len(yyv4588) != 0 {
			yyv4588 = yyv4588[:0]
			yyc4588 = true
		}
	} else if yyl4588 > 0 {
		var yyrr4588, yyrl4588 int
		var yyrt4588 bool
		if yyl4588 > cap(yyv4588) {

			yyrg4588 := len(yyv4588) > 0
			yyv24588 := yyv4588
			yyrl4588, yyrt4588 = z.DecInferLen(yyl4588, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4588 {
				if yyrl4588 <= cap(yyv4588) {
					yyv4588 = yyv4588[:yyrl4588]
				} else {
					yyv4588 = make([]ContainerImage, yyrl4588)
				}
			} else {
				yyv4588 = make([]ContainerImage, yyrl4588)
			}
			yyc4588 = true
			yyrr4588 = len(yyv4588)
			if yyrg4588 {
				copy(yyv4588, yyv24588)
			}
		} else if yyl4588 != len(yyv4588) {
			yyv4588 = yyv4588[:yyl4588]
			yyc4588 = true
		}
		yyj4588 := 0
		for ; yyj4588 < yyrr4588; yyj4588++ {
			yyh4588.ElemContainerState(yyj4588)
			if r.TryDecodeAsNil() {
				yyv4588[yyj4588] = ContainerImage{}
			} else {
				yyv4589 := &yyv4588[yyj4588]
				yyv4589.CodecDecodeSelf(d)
			}

		}
		if yyrt4588 {
			for ; yyj4588 < yyl4588; yyj4588++ {
				yyv4588 = append(yyv4588, ContainerImage{})
				yyh4588.ElemContainerState(yyj4588)
				if r.TryDecodeAsNil() {
					yyv4588[yyj4588] = ContainerImage{}
				} else {
					yyv4590 := &yyv4588[yyj4588]
					yyv4590.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4588 := 0
		for ; !r.CheckBreak(); yyj4588++ {

			if yyj4588 >= len(yyv4588) {
				yyv4588 = append(yyv4588, ContainerImage{}) // var yyz4588 ContainerImage
				yyc4588 = true
			}
			yyh4588.ElemContainerState(yyj4588)
			if yyj4588 < len(yyv4588) {
				if r.TryDecodeAsNil() {
					yyv4588[yyj4588] = ContainerImage{}
				} else {
					yyv4591 := &yyv4588[yyj4588]
					yyv4591.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4588 < len(yyv4588) {
			yyv4588 = yyv4588[:yyj4588]
			yyc4588 = true
		} else if yyj4588 == 0 && yyv4588 == nil {
			yyv4588 = []ContainerImage{}
			yyc4588 = true
		}
	}
	yyh4588.End()
	if yyc4588 {
		*v = yyv4588
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4592 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4592.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4593 := *v
	yyh4593, yyl4593 := z.DecSliceHelperStart()
	var yyc4593 bool
	if yyl4593 == 0 {
		if yyv4593 == nil {
			yyv4593 = []UniqueVolumeName{}
			yyc4593 = true
		} else if len(yyv4593) != 0 {
			yyv4593 = yyv4593[:0]
			yyc4593 = true
		}
	} else if yyl4593 > 0 {
		var yyrr4593, yyrl4593 int
		var yyrt4593 bool
		if yyl4593 > cap(yyv4593) {

			yyrl4593, yyrt4593 = z.DecInferLen(yyl4593, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4593 {
				if yyrl4593 <= cap(yyv4593) {
					yyv4593 = yyv4593[:yyrl4593]
				} else {
					yyv4593 = make([]UniqueVolumeName, yyrl4593)
				}
			} else {
				yyv4593 = make([]UniqueVolumeName, yyrl4593)
			}
			yyc4593 = true
			yyrr4593 = len(yyv4593)
		} else if yyl4593 != len(yyv4593) {
			yyv4593 = yyv4593[:yyl4593]
			yyc4593 = true
		}
		yyj4593 := 0
		for ; yyj4593 < yyrr4593; yyj4593++ {
			yyh4593.ElemContainerState(yyj4593)
			if r.TryDecodeAsNil() {
				yyv4593[yyj4593] = ""
			} else {
				yyv4593[yyj4593] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4593 {
			for ; yyj4593 < yyl4593; yyj4593++ {
				yyv4593 = append(yyv4593, "")
				yyh4593.ElemContainerState(yyj4593)
				if r.TryDecodeAsNil() {
					yyv4593[yyj4593] = ""
				} else {
					yyv4593[yyj4593] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4593 := 0
		for ; !r.CheckBreak(); yyj4593++ {

			if yyj4593 >= len(yyv4593) {
				yyv4593 = append(yyv4593, "") // var yyz4593 UniqueVolumeName
				yyc4593 = true
			}
			yyh4593.ElemContainerState(yyj4593)
			if yyj4593 < len(yyv4593) {
				if r.TryDecodeAsNil() {
					yyv4593[yyj4593] = ""
				} else {
					yyv4593[yyj4593] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4593 < len(yyv4593) {
			yyv4593 = yyv4593[:yyj4593]
			yyc4593 = true
		} else if yyj4593 == 0 && yyv4593 == nil {
			yyv4593 = []UniqueVolumeName{}
			yyc4593 = true
		}
	}
	yyh4593.End()
	if yyc4593 {
		*v = yyv4593
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4597 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4598 := &yyv4597
		yy4598.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4599 := *v
	yyh4599, yyl4599 := z.DecSliceHelperStart()
	var yyc4599 bool
	if yyl4599 == 0 {
		if yyv4599 == nil {
			yyv4599 = []AttachedVolume{}
			yyc4599 = true
		} else if len(yyv4599) != 0 {
			yyv4599 = yyv4599[:0]
			yyc4599 = true
		}
	} else if yyl4599 > 0 {
		var yyrr4599, yyrl4599 int
		var yyrt4599 bool
		if yyl4599 > cap(yyv4599) {

			yyrg4599 := len(yyv4599) > 0
			yyv24599 := yyv4599
			yyrl4599, yyrt4599 = z.DecInferLen(yyl4599, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4599 {
				if yyrl4599 <= cap(yyv4599) {
					yyv4599 = yyv4599[:yyrl4599]
				} else {
					yyv4599 = make([]AttachedVolume, yyrl4599)
				}
			} else {
				yyv4599 = make([]AttachedVolume, yyrl4599)
			}
			yyc4599 = true
			yyrr4599 = len(yyv4599)
			if yyrg4599 {
				copy(yyv4599, yyv24599)
			}
		} else if yyl4599 != len(yyv4599) {
			yyv4599 = yyv4599[:yyl4599]
			yyc4599 = true
		}
		yyj4599 := 0
		for ; yyj4599 < yyrr4599; yyj4599++ {
			yyh4599.ElemContainerState(yyj4599)
			if r.TryDecodeAsNil() {
				yyv4599[yyj4599] = AttachedVolume{}
			} else {
				yyv4600 := &yyv4599[yyj4599]
				yyv4600.CodecDecodeSelf(d)
			}

		}
		if yyrt4599 {
			for ; yyj4599 < yyl4599; yyj4599++ {
				yyv4599 = append(yyv4599, AttachedVolume{})
				yyh4599.ElemContainerState(yyj4599)
				if r.TryDecodeAsNil() {
					yyv4599[yyj4599] = AttachedVolume{}
				} else {
					yyv4601 := &yyv4599[yyj4599]
					yyv4601.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4599 := 0
		for ; !r.CheckBreak(); yyj4599++ {

			if yyj4599 >= len(yyv4599) {
				yyv4599 = append(yyv4599, AttachedVolume{}) // var yyz4599 AttachedVolume
				yyc4599 = true
			}
			yyh4599.ElemContainerState(yyj4599)
			if yyj4599 < len(yyv4599) {
				if r.TryDecodeAsNil() {
					yyv4599[yyj4599] = AttachedVolume{}
				} else {
					yyv4602 := &yyv4599[yyj4599]
					yyv4602.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4599 < len(yyv4599) {
			yyv4599 = yyv4599[:yyj4599]
			yyc4599 = true
		} else if yyj4599 == 0 && yyv4599 == nil {
			yyv4599 = []AttachedVolume{}
			yyc4599 = true
		}
	}
	yyh4599.End()
	if yyc4599 {
		*v = yyv4599
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4603 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4604 := &yyv4603
		yy4604.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4605 := *v
	yyh4605, yyl4605 := z.DecSliceHelperStart()
	var yyc4605 bool
	if yyl4605 == 0 {
		if yyv4605 == nil {
			yyv4605 = []PreferAvoidPodsEntry{}
			yyc4605 = true
		} else if len(yyv4605) != 0 {
			yyv4605 = yyv4605[:0]
			yyc4605 = true
		}
	} else if yyl4605 > 0 {
		var yyrr4605, yyrl4605 int
		var yyrt4605 bool
		if yyl4605 > cap(yyv4605) {

			yyrg4605 := len(yyv4605) > 0
			yyv24605 := yyv4605
			yyrl4605, yyrt4605 = z.DecInferLen(yyl4605, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4605 {
				if yyrl4605 <= cap(yyv4605) {
					yyv4605 = yyv4605[:yyrl4605]
				} else {
					yyv4605 = make([]PreferAvoidPodsEntry, yyrl4605)
				}
			} else {
				yyv4605 = make([]PreferAvoidPodsEntry, yyrl4605)
			}
			yyc4605 = true
			yyrr4605 = len(yyv4605)
			if yyrg4605 {
				copy(yyv4605, yyv24605)
			}
		} else if yyl4605 != len(yyv4605) {
			yyv4605 = yyv4605[:yyl4605]
			yyc4605 = true
		}
		yyj4605 := 0
		for ; yyj4605 < yyrr4605; yyj4605++ {
			yyh4605.ElemContainerState(yyj4605)
			if r.TryDecodeAsNil() {
				yyv4605[yyj4605] = PreferAvoidPodsEntry{}
			} else {
				yyv4606 := &yyv4605[yyj4605]
				yyv4606.CodecDecodeSelf(d)
			}

		}
		if yyrt4605 {
			for ; yyj4605 < yyl4605; yyj4605++ {
				yyv4605 = append(yyv4605, PreferAvoidPodsEntry{})
				yyh4605.ElemContainerState(yyj4605)
				if r.TryDecodeAsNil() {
					yyv4605[yyj4605] = PreferAvoidPodsEntry{}
				} else {
					yyv4607 := &yyv4605[yyj4605]
					yyv4607.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4605 := 0
		for ; !r.CheckBreak(); yyj4605++ {

			if yyj4605 >= len(yyv4605) {
				yyv4605 = append(yyv4605, PreferAvoidPodsEntry{}) // var yyz4605 PreferAvoidPodsEntry
				yyc4605 = true
			}
			yyh4605.ElemContainerState(yyj4605)
			if yyj4605 < len(yyv4605) {
				if r.TryDecodeAsNil() {
					yyv4605[yyj4605] = PreferAvoidPodsEntry{}
				} else {
					yyv4608 := &yyv4605[yyj4605]
					yyv4608.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4605 < len(yyv4605) {
			yyv4605 = yyv4605[:yyj4605]
			yyc4605 = true
		} else if yyj4605 == 0 && yyv4605 == nil {
			yyv4605 = []PreferAvoidPodsEntry{}
			yyc4605 = true
		}
	}
	yyh4605.End()
	if yyc4605 {
		*v = yyv4605
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4609, yyv4609 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4609.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4610 := &yyv4609
		yym4611 := z.EncBinary()
		_ = yym4611
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4610) {
		} else if !yym4611 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4610)
		} else {
			z.EncFallback(yy4610)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4612 := *v
	yyl4612 := r.ReadMapStart()
	yybh4612 := z.DecBasicHandle()
	if yyv4612 == nil {
		yyrl4612, _ := z.DecInferLen(yyl4612, yybh4612.MaxInitLen, 72)
		yyv4612 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4612)
		*v = yyv4612
	}
	var yymk4612 ResourceName
	var yymv4612 pkg3_resource.Quantity
	var yymg4612 bool
	if yybh4612.MapValueReset {
		yymg4612 = true
	}
	if yyl4612 > 0 {
		for yyj4612 := 0; yyj4612 < yyl4612; yyj4612++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4612 = ""
			} else {
				yymk4612 = ResourceName(r.DecodeString())
			}

			if yymg4612 {
				yymv4612 = yyv4612[yymk4612]
			} else {
				yymv4612 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4612 = pkg3_resource.Quantity{}
			} else {
				yyv4614 := &yymv4612
				yym4615 := z.DecBinary()
				_ = yym4615
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4614) {
				} else if !yym4615 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4614)
				} else {
					z.DecFallback(yyv4614, false)
				}
			}

			if yyv4612 != nil {
				yyv4612[yymk4612] = yymv4612
			}
		}
	} else if yyl4612 < 0 {
		for yyj4612 := 0; !r.CheckBreak(); yyj4612++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4612 = ""
			} else {
				yymk4612 = ResourceName(r.DecodeString())
			}

			if yymg4612 {
				yymv4612 = yyv4612[yymk4612]
			} else {
				yymv4612 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4612 = pkg3_resource.Quantity{}
			} else {
				yyv4617 := &yymv4612
				yym4618 := z.DecBinary()
				_ = yym4618
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4617) {
				} else if !yym4618 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4617)
				} else {
					z.DecFallback(yyv4617, false)
				}
			}

			if yyv4612 != nil {
				yyv4612[yymk4612] = yymv4612
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4619 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4620 := &yyv4619
		yy4620.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4621 := *v
	yyh4621, yyl4621 := z.DecSliceHelperStart()
	var yyc4621 bool
	if yyl4621 == 0 {
		if yyv4621 == nil {
			yyv4621 = []Node{}
			yyc4621 = true
		} else if len(yyv4621) != 0 {
			yyv4621 = yyv4621[:0]
			yyc4621 = true
		}
	} else if yyl4621 > 0 {
		var yyrr4621, yyrl4621 int
		var yyrt4621 bool
		if yyl4621 > cap(yyv4621) {

			yyrg4621 := len(yyv4621) > 0
			yyv24621 := yyv4621
			yyrl4621, yyrt4621 = z.DecInferLen(yyl4621, z.DecBasicHandle().MaxInitLen, 616)
			if yyrt4621 {
				if yyrl4621 <= cap(yyv4621) {
					yyv4621 = yyv4621[:yyrl4621]
				} else {
					yyv4621 = make([]Node, yyrl4621)
				}
			} else {
				yyv4621 = make([]Node, yyrl4621)
			}
			yyc4621 = true
			yyrr4621 = len(yyv4621)
			if yyrg4621 {
				copy(yyv4621, yyv24621)
			}
		} else if yyl4621 != len(yyv4621) {
			yyv4621 = yyv4621[:yyl4621]
			yyc4621 = true
		}
		yyj4621 := 0
		for ; yyj4621 < yyrr4621; yyj4621++ {
			yyh4621.ElemContainerState(yyj4621)
			if r.TryDecodeAsNil() {
				yyv4621[yyj4621] = Node{}
			} else {
				yyv4622 := &yyv4621[yyj4621]
				yyv4622.CodecDecodeSelf(d)
			}

		}
		if yyrt4621 {
			for ; yyj4621 < yyl4621; yyj4621++ {
				yyv4621 = append(yyv4621, Node{})
				yyh4621.ElemContainerState(yyj4621)
				if r.TryDecodeAsNil() {
					yyv4621[yyj4621] = Node{}
				} else {
					yyv4623 := &yyv4621[yyj4621]
					yyv4623.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4621 := 0
		for ; !r.CheckBreak(); yyj4621++ {

			if yyj4621 >= len(yyv4621) {
				yyv4621 = append(yyv4621, Node{}) // var yyz4621 Node
				yyc4621 = true
			}
			yyh4621.ElemContainerState(yyj4621)
			if yyj4621 < len(yyv4621) {
				if r.TryDecodeAsNil() {
					yyv4621[yyj4621] = Node{}
				} else {
					yyv4624 := &yyv4621[yyj4621]
					yyv4624.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4621 < len(yyv4621) {
			yyv4621 = yyv4621[:yyj4621]
			yyc4621 = true
		} else if yyj4621 == 0 && yyv4621 == nil {
			yyv4621 = []Node{}
			yyc4621 = true
		}
	}
	yyh4621.End()
	if yyc4621 {
		*v = yyv4621
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4625 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4625.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4626 := *v
	yyh4626, yyl4626 := z.DecSliceHelperStart()
	var yyc4626 bool
	if yyl4626 == 0 {
		if yyv4626 == nil {
			yyv4626 = []FinalizerName{}
			yyc4626 = true
		} else if len(yyv4626) != 0 {
			yyv4626 = yyv4626[:0]
			yyc4626 = true
		}
	} else if yyl4626 > 0 {
		var yyrr4626, yyrl4626 int
		var yyrt4626 bool
		if yyl4626 > cap(yyv4626) {

			yyrl4626, yyrt4626 = z.DecInferLen(yyl4626, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4626 {
				if yyrl4626 <= cap(yyv4626) {
					yyv4626 = yyv4626[:yyrl4626]
				} else {
					yyv4626 = make([]FinalizerName, yyrl4626)
				}
			} else {
				yyv4626 = make([]FinalizerName, yyrl4626)
			}
			yyc4626 = true
			yyrr4626 = len(yyv4626)
		} else if yyl4626 != len(yyv4626) {
			yyv4626 = yyv4626[:yyl4626]
			yyc4626 = true
		}
		yyj4626 := 0
		for ; yyj4626 < yyrr4626; yyj4626++ {
			yyh4626.ElemContainerState(yyj4626)
			if r.TryDecodeAsNil() {
				yyv4626[yyj4626] = ""
			} else {
				yyv4626[yyj4626] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4626 {
			for ; yyj4626 < yyl4626; yyj4626++ {
				yyv4626 = append(yyv4626, "")
				yyh4626.ElemContainerState(yyj4626)
				if r.TryDecodeAsNil() {
					yyv4626[yyj4626] = ""
				} else {
					yyv4626[yyj4626] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4626 := 0
		for ; !r.CheckBreak(); yyj4626++ {

			if yyj4626 >= len(yyv4626) {
				yyv4626 = append(yyv4626, "") // var yyz4626 FinalizerName
				yyc4626 = true
			}
			yyh4626.ElemContainerState(yyj4626)
			if yyj4626 < len(yyv4626) {
				if r.TryDecodeAsNil() {
					yyv4626[yyj4626] = ""
				} else {
					yyv4626[yyj4626] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4626 < len(yyv4626) {
			yyv4626 = yyv4626[:yyj4626]
			yyc4626 = true
		} else if yyj4626 == 0 && yyv4626 == nil {
			yyv4626 = []FinalizerName{}
			yyc4626 = true
		}
	}
	yyh4626.End()
	if yyc4626 {
		*v = yyv4626
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4630 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4631 := &yyv4630
		yy4631.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4632 := *v
	yyh4632, yyl4632 := z.DecSliceHelperStart()
	var yyc4632 bool
	if yyl4632 == 0 {
		if yyv4632 == nil {
			yyv4632 = []Namespace{}
			yyc4632 = true
		} else if len(yyv4632) != 0 {
			yyv4632 = yyv4632[:0]
			yyc4632 = true
		}
	} else if yyl4632 > 0 {
		var yyrr4632, yyrl4632 int
		var yyrt4632 bool
		if yyl4632 > cap(yyv4632) {

			yyrg4632 := len(yyv4632) > 0
			yyv24632 := yyv4632
			yyrl4632, yyrt4632 = z.DecInferLen(yyl4632, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4632 {
				if yyrl4632 <= cap(yyv4632) {
					yyv4632 = yyv4632[:yyrl4632]
				} else {
					yyv4632 = make([]Namespace, yyrl4632)
				}
			} else {
				yyv4632 = make([]Namespace, yyrl4632)
			}
			yyc4632 = true
			yyrr4632 = len(yyv4632)
			if yyrg4632 {
				copy(yyv4632, yyv24632)
			}
		} else if yyl4632 != len(yyv4632) {
			yyv4632 = yyv4632[:yyl4632]
			yyc4632 = true
		}
		yyj4632 := 0
		for ; yyj4632 < yyrr4632; yyj4632++ {
			yyh4632.ElemContainerState(yyj4632)
			if r.TryDecodeAsNil() {
				yyv4632[yyj4632] = Namespace{}
			} else {
				yyv4633 := &yyv4632[yyj4632]
				yyv4633.CodecDecodeSelf(d)
			}

		}
		if yyrt4632 {
			for ; yyj4632 < yyl4632; yyj4632++ {
				yyv4632 = append(yyv4632, Namespace{})
				yyh4632.ElemContainerState(yyj4632)
				if r.TryDecodeAsNil() {
					yyv4632[yyj4632] = Namespace{}
				} else {
					yyv4634 := &yyv4632[yyj4632]
					yyv4634.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4632 := 0
		for ; !r.CheckBreak(); yyj4632++ {

			if yyj4632 >= len(yyv4632) {
				yyv4632 = append(yyv4632, Namespace{}) // var yyz4632 Namespace
				yyc4632 = true
			}
			yyh4632.ElemContainerState(yyj4632)
			if yyj4632 < len(yyv4632) {
				if r.TryDecodeAsNil() {
					yyv4632[yyj4632] = Namespace{}
				} else {
					yyv4635 := &yyv4632[yyj4632]
					yyv4635.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4632 < len(yyv4632) {
			yyv4632 = yyv4632[:yyj4632]
			yyc4632 = true
		} else if yyj4632 == 0 && yyv4632 == nil {
			yyv4632 = []Namespace{}
			yyc4632 = true
		}
	}
	yyh4632.End()
	if yyc4632 {
		*v = yyv4632
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4636 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4637 := &yyv4636
		yy4637.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4638 := *v
	yyh4638, yyl4638 := z.DecSliceHelperStart()
	var yyc4638 bool
	if yyl4638 == 0 {
		if yyv4638 == nil {
			yyv4638 = []Event{}
			yyc4638 = true
		} else if len(yyv4638) != 0 {
			yyv4638 = yyv4638[:0]
			yyc4638 = true
		}
	} else if yyl4638 > 0 {
		var yyrr4638, yyrl4638 int
		var yyrt4638 bool
		if yyl4638 > cap(yyv4638) {

			yyrg4638 := len(yyv4638) > 0
			yyv24638 := yyv4638
			yyrl4638, yyrt4638 = z.DecInferLen(yyl4638, z.DecBasicHandle().MaxInitLen, 488)
			if yyrt4638 {
				if yyrl4638 <= cap(yyv4638) {
					yyv4638 = yyv4638[:yyrl4638]
				} else {
					yyv4638 = make([]Event, yyrl4638)
				}
			} else {
				yyv4638 = make([]Event, yyrl4638)
			}
			yyc4638 = true
			yyrr4638 = len(yyv4638)
			if yyrg4638 {
				copy(yyv4638, yyv24638)
			}
		} else if yyl4638 != len(yyv4638) {
			yyv4638 = yyv4638[:yyl4638]
			yyc4638 = true
		}
		yyj4638 := 0
		for ; yyj4638 < yyrr4638; yyj4638++ {
			yyh4638.ElemContainerState(yyj4638)
			if r.TryDecodeAsNil() {
				yyv4638[yyj4638] = Event{}
			} else {
				yyv4639 := &yyv4638[yyj4638]
				yyv4639.CodecDecodeSelf(d)
			}

		}
		if yyrt4638 {
			for ; yyj4638 < yyl4638; yyj4638++ {
				yyv4638 = append(yyv4638, Event{})
				yyh4638.ElemContainerState(yyj4638)
				if r.TryDecodeAsNil() {
					yyv4638[yyj4638] = Event{}
				} else {
					yyv4640 := &yyv4638[yyj4638]
					yyv4640.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4638 := 0
		for ; !r.CheckBreak(); yyj4638++ {

			if yyj4638 >= len(yyv4638) {
				yyv4638 = append(yyv4638, Event{}) // var yyz4638 Event
				yyc4638 = true
			}
			yyh4638.ElemContainerState(yyj4638)
			if yyj4638 < len(yyv4638) {
				if r.TryDecodeAsNil() {
					yyv4638[yyj4638] = Event{}
				} else {
					yyv4641 := &yyv4638[yyj4638]
					yyv4641.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4638 < len(yyv4638) {
			yyv4638 = yyv4638[:yyj4638]
			yyc4638 = true
		} else if yyj4638 == 0 && yyv4638 == nil {
			yyv4638 = []Event{}
			yyc4638 = true
		}
	}
	yyh4638.End()
	if yyc4638 {
		*v = yyv4638
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg7_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4642 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv4642 == nil {
			r.EncodeNil()
		} else {
			yym4643 := z.EncBinary()
			_ = yym4643
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv4642) {
			} else {
				z.EncFallback(yyv4642)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg7_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4644 := *v
	yyh4644, yyl4644 := z.DecSliceHelperStart()
	var yyc4644 bool
	if yyl4644 == 0 {
		if yyv4644 == nil {
			yyv4644 = []pkg7_runtime.Object{}
			yyc4644 = true
		} else if len(yyv4644) != 0 {
			yyv4644 = yyv4644[:0]
			yyc4644 = true
		}
	} else if yyl4644 > 0 {
		var yyrr4644, yyrl4644 int
		var yyrt4644 bool
		if yyl4644 > cap(yyv4644) {

			yyrg4644 := len(yyv4644) > 0
			yyv24644 := yyv4644
			yyrl4644, yyrt4644 = z.DecInferLen(yyl4644, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4644 {
				if yyrl4644 <= cap(yyv4644) {
					yyv4644 = yyv4644[:yyrl4644]
				} else {
					yyv4644 = make([]pkg7_runtime.Object, yyrl4644)
				}
			} else {
				yyv4644 = make([]pkg7_runtime.Object, yyrl4644)
			}
			yyc4644 = true
			yyrr4644 = len(yyv4644)
			if yyrg4644 {
				copy(yyv4644, yyv24644)
			}
		} else if yyl4644 != len(yyv4644) {
			yyv4644 = yyv4644[:yyl4644]
			yyc4644 = true
		}
		yyj4644 := 0
		for ; yyj4644 < yyrr4644; yyj4644++ {
			yyh4644.ElemContainerState(yyj4644)
			if r.TryDecodeAsNil() {
				yyv4644[yyj4644] = nil
			} else {
				yyv4645 := &yyv4644[yyj4644]
				yym4646 := z.DecBinary()
				_ = yym4646
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4645) {
				} else {
					z.DecFallback(yyv4645, true)
				}
			}

		}
		if yyrt4644 {
			for ; yyj4644 < yyl4644; yyj4644++ {
				yyv4644 = append(yyv4644, nil)
				yyh4644.ElemContainerState(yyj4644)
				if r.TryDecodeAsNil() {
					yyv4644[yyj4644] = nil
				} else {
					yyv4647 := &yyv4644[yyj4644]
					yym4648 := z.DecBinary()
					_ = yym4648
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4647) {
					} else {
						z.DecFallback(yyv4647, true)
					}
				}

			}
		}

	} else {
		yyj4644 := 0
		for ; !r.CheckBreak(); yyj4644++ {

			if yyj4644 >= len(yyv4644) {
				yyv4644 = append(yyv4644, nil) // var yyz4644 pkg7_runtime.Object
				yyc4644 = true
			}
			yyh4644.ElemContainerState(yyj4644)
			if yyj4644 < len(yyv4644) {
				if r.TryDecodeAsNil() {
					yyv4644[yyj4644] = nil
				} else {
					yyv4649 := &yyv4644[yyj4644]
					yym4650 := z.DecBinary()
					_ = yym4650
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4649) {
					} else {
						z.DecFallback(yyv4649, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4644 < len(yyv4644) {
			yyv4644 = yyv4644[:yyj4644]
			yyc4644 = true
		} else if yyj4644 == 0 && yyv4644 == nil {
			yyv4644 = []pkg7_runtime.Object{}
			yyc4644 = true
		}
	}
	yyh4644.End()
	if yyc4644 {
		*v = yyv4644
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4651 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4652 := &yyv4651
		yy4652.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4653 := *v
	yyh4653, yyl4653 := z.DecSliceHelperStart()
	var yyc4653 bool
	if yyl4653 == 0 {
		if yyv4653 == nil {
			yyv4653 = []LimitRangeItem{}
			yyc4653 = true
		} else if len(yyv4653) != 0 {
			yyv4653 = yyv4653[:0]
			yyc4653 = true
		}
	} else if yyl4653 > 0 {
		var yyrr4653, yyrl4653 int
		var yyrt4653 bool
		if yyl4653 > cap(yyv4653) {

			yyrg4653 := len(yyv4653) > 0
			yyv24653 := yyv4653
			yyrl4653, yyrt4653 = z.DecInferLen(yyl4653, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4653 {
				if yyrl4653 <= cap(yyv4653) {
					yyv4653 = yyv4653[:yyrl4653]
				} else {
					yyv4653 = make([]LimitRangeItem, yyrl4653)
				}
			} else {
				yyv4653 = make([]LimitRangeItem, yyrl4653)
			}
			yyc4653 = true
			yyrr4653 = len(yyv4653)
			if yyrg4653 {
				copy(yyv4653, yyv24653)
			}
		} else if yyl4653 != len(yyv4653) {
			yyv4653 = yyv4653[:yyl4653]
			yyc4653 = true
		}
		yyj4653 := 0
		for ; yyj4653 < yyrr4653; yyj4653++ {
			yyh4653.ElemContainerState(yyj4653)
			if r.TryDecodeAsNil() {
				yyv4653[yyj4653] = LimitRangeItem{}
			} else {
				yyv4654 := &yyv4653[yyj4653]
				yyv4654.CodecDecodeSelf(d)
			}

		}
		if yyrt4653 {
			for ; yyj4653 < yyl4653; yyj4653++ {
				yyv4653 = append(yyv4653, LimitRangeItem{})
				yyh4653.ElemContainerState(yyj4653)
				if r.TryDecodeAsNil() {
					yyv4653[yyj4653] = LimitRangeItem{}
				} else {
					yyv4655 := &yyv4653[yyj4653]
					yyv4655.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4653 := 0
		for ; !r.CheckBreak(); yyj4653++ {

			if yyj4653 >= len(yyv4653) {
				yyv4653 = append(yyv4653, LimitRangeItem{}) // var yyz4653 LimitRangeItem
				yyc4653 = true
			}
			yyh4653.ElemContainerState(yyj4653)
			if yyj4653 < len(yyv4653) {
				if r.TryDecodeAsNil() {
					yyv4653[yyj4653] = LimitRangeItem{}
				} else {
					yyv4656 := &yyv4653[yyj4653]
					yyv4656.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4653 < len(yyv4653) {
			yyv4653 = yyv4653[:yyj4653]
			yyc4653 = true
		} else if yyj4653 == 0 && yyv4653 == nil {
			yyv4653 = []LimitRangeItem{}
			yyc4653 = true
		}
	}
	yyh4653.End()
	if yyc4653 {
		*v = yyv4653
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4657 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4658 := &yyv4657
		yy4658.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4659 := *v
	yyh4659, yyl4659 := z.DecSliceHelperStart()
	var yyc4659 bool
	if yyl4659 == 0 {
		if yyv4659 == nil {
			yyv4659 = []LimitRange{}
			yyc4659 = true
		} else if len(yyv4659) != 0 {
			yyv4659 = yyv4659[:0]
			yyc4659 = true
		}
	} else if yyl4659 > 0 {
		var yyrr4659, yyrl4659 int
		var yyrt4659 bool
		if yyl4659 > cap(yyv4659) {

			yyrg4659 := len(yyv4659) > 0
			yyv24659 := yyv4659
			yyrl4659, yyrt4659 = z.DecInferLen(yyl4659, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4659 {
				if yyrl4659 <= cap(yyv4659) {
					yyv4659 = yyv4659[:yyrl4659]
				} else {
					yyv4659 = make([]LimitRange, yyrl4659)
				}
			} else {
				yyv4659 = make([]LimitRange, yyrl4659)
			}
			yyc4659 = true
			yyrr4659 = len(yyv4659)
			if yyrg4659 {
				copy(yyv4659, yyv24659)
			}
		} else if yyl4659 != len(yyv4659) {
			yyv4659 = yyv4659[:yyl4659]
			yyc4659 = true
		}
		yyj4659 := 0
		for ; yyj4659 < yyrr4659; yyj4659++ {
			yyh4659.ElemContainerState(yyj4659)
			if r.TryDecodeAsNil() {
				yyv4659[yyj4659] = LimitRange{}
			} else {
				yyv4660 := &yyv4659[yyj4659]
				yyv4660.CodecDecodeSelf(d)
			}

		}
		if yyrt4659 {
			for ; yyj4659 < yyl4659; yyj4659++ {
				yyv4659 = append(yyv4659, LimitRange{})
				yyh4659.ElemContainerState(yyj4659)
				if r.TryDecodeAsNil() {
					yyv4659[yyj4659] = LimitRange{}
				} else {
					yyv4661 := &yyv4659[yyj4659]
					yyv4661.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4659 := 0
		for ; !r.CheckBreak(); yyj4659++ {

			if yyj4659 >= len(yyv4659) {
				yyv4659 = append(yyv4659, LimitRange{}) // var yyz4659 LimitRange
				yyc4659 = true
			}
			yyh4659.ElemContainerState(yyj4659)
			if yyj4659 < len(yyv4659) {
				if r.TryDecodeAsNil() {
					yyv4659[yyj4659] = LimitRange{}
				} else {
					yyv4662 := &yyv4659[yyj4659]
					yyv4662.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4659 < len(yyv4659) {
			yyv4659 = yyv4659[:yyj4659]
			yyc4659 = true
		} else if yyj4659 == 0 && yyv4659 == nil {
			yyv4659 = []LimitRange{}
			yyc4659 = true
		}
	}
	yyh4659.End()
	if yyc4659 {
		*v = yyv4659
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4663 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4663.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4664 := *v
	yyh4664, yyl4664 := z.DecSliceHelperStart()
	var yyc4664 bool
	if yyl4664 == 0 {
		if yyv4664 == nil {
			yyv4664 = []ResourceQuotaScope{}
			yyc4664 = true
		} else if len(yyv4664) != 0 {
			yyv4664 = yyv4664[:0]
			yyc4664 = true
		}
	} else if yyl4664 > 0 {
		var yyrr4664, yyrl4664 int
		var yyrt4664 bool
		if yyl4664 > cap(yyv4664) {

			yyrl4664, yyrt4664 = z.DecInferLen(yyl4664, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4664 {
				if yyrl4664 <= cap(yyv4664) {
					yyv4664 = yyv4664[:yyrl4664]
				} else {
					yyv4664 = make([]ResourceQuotaScope, yyrl4664)
				}
			} else {
				yyv4664 = make([]ResourceQuotaScope, yyrl4664)
			}
			yyc4664 = true
			yyrr4664 = len(yyv4664)
		} else if yyl4664 != len(yyv4664) {
			yyv4664 = yyv4664[:yyl4664]
			yyc4664 = true
		}
		yyj4664 := 0
		for ; yyj4664 < yyrr4664; yyj4664++ {
			yyh4664.ElemContainerState(yyj4664)
			if r.TryDecodeAsNil() {
				yyv4664[yyj4664] = ""
			} else {
				yyv4664[yyj4664] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4664 {
			for ; yyj4664 < yyl4664; yyj4664++ {
				yyv4664 = append(yyv4664, "")
				yyh4664.ElemContainerState(yyj4664)
				if r.TryDecodeAsNil() {
					yyv4664[yyj4664] = ""
				} else {
					yyv4664[yyj4664] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4664 := 0
		for ; !r.CheckBreak(); yyj4664++ {

			if yyj4664 >= len(yyv4664) {
				yyv4664 = append(yyv4664, "") // var yyz4664 ResourceQuotaScope
				yyc4664 = true
			}
			yyh4664.ElemContainerState(yyj4664)
			if yyj4664 < len(yyv4664) {
				if r.TryDecodeAsNil() {
					yyv4664[yyj4664] = ""
				} else {
					yyv4664[yyj4664] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4664 < len(yyv4664) {
			yyv4664 = yyv4664[:yyj4664]
			yyc4664 = true
		} else if yyj4664 == 0 && yyv4664 == nil {
			yyv4664 = []ResourceQuotaScope{}
			yyc4664 = true
		}
	}
	yyh4664.End()
	if yyc4664 {
		*v = yyv4664
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4668 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4669 := &yyv4668
		yy4669.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4670 := *v
	yyh4670, yyl4670 := z.DecSliceHelperStart()
	var yyc4670 bool
	if yyl4670 == 0 {
		if yyv4670 == nil {
			yyv4670 = []ResourceQuota{}
			yyc4670 = true
		} else if len(yyv4670) != 0 {
			yyv4670 = yyv4670[:0]
			yyc4670 = true
		}
	} else if yyl4670 > 0 {
		var yyrr4670, yyrl4670 int
		var yyrt4670 bool
		if yyl4670 > cap(yyv4670) {

			yyrg4670 := len(yyv4670) > 0
			yyv24670 := yyv4670
			yyrl4670, yyrt4670 = z.DecInferLen(yyl4670, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4670 {
				if yyrl4670 <= cap(yyv4670) {
					yyv4670 = yyv4670[:yyrl4670]
				} else {
					yyv4670 = make([]ResourceQuota, yyrl4670)
				}
			} else {
				yyv4670 = make([]ResourceQuota, yyrl4670)
			}
			yyc4670 = true
			yyrr4670 = len(yyv4670)
			if yyrg4670 {
				copy(yyv4670, yyv24670)
			}
		} else if yyl4670 != len(yyv4670) {
			yyv4670 = yyv4670[:yyl4670]
			yyc4670 = true
		}
		yyj4670 := 0
		for ; yyj4670 < yyrr4670; yyj4670++ {
			yyh4670.ElemContainerState(yyj4670)
			if r.TryDecodeAsNil() {
				yyv4670[yyj4670] = ResourceQuota{}
			} else {
				yyv4671 := &yyv4670[yyj4670]
				yyv4671.CodecDecodeSelf(d)
			}

		}
		if yyrt4670 {
			for ; yyj4670 < yyl4670; yyj4670++ {
				yyv4670 = append(yyv4670, ResourceQuota{})
				yyh4670.ElemContainerState(yyj4670)
				if r.TryDecodeAsNil() {
					yyv4670[yyj4670] = ResourceQuota{}
				} else {
					yyv4672 := &yyv4670[yyj4670]
					yyv4672.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4670 := 0
		for ; !r.CheckBreak(); yyj4670++ {

			if yyj4670 >= len(yyv4670) {
				yyv4670 = append(yyv4670, ResourceQuota{}) // var yyz4670 ResourceQuota
				yyc4670 = true
			}
			yyh4670.ElemContainerState(yyj4670)
			if yyj4670 < len(yyv4670) {
				if r.TryDecodeAsNil() {
					yyv4670[yyj4670] = ResourceQuota{}
				} else {
					yyv4673 := &yyv4670[yyj4670]
					yyv4673.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4670 < len(yyv4670) {
			yyv4670 = yyv4670[:yyj4670]
			yyc4670 = true
		} else if yyj4670 == 0 && yyv4670 == nil {
			yyv4670 = []ResourceQuota{}
			yyc4670 = true
		}
	}
	yyh4670.End()
	if yyc4670 {
		*v = yyv4670
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4674, yyv4674 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4675 := z.EncBinary()
		_ = yym4675
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4674))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4674 == nil {
			r.EncodeNil()
		} else {
			yym4676 := z.EncBinary()
			_ = yym4676
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4674))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4677 := *v
	yyl4677 := r.ReadMapStart()
	yybh4677 := z.DecBasicHandle()
	if yyv4677 == nil {
		yyrl4677, _ := z.DecInferLen(yyl4677, yybh4677.MaxInitLen, 40)
		yyv4677 = make(map[string][]uint8, yyrl4677)
		*v = yyv4677
	}
	var yymk4677 string
	var yymv4677 []uint8
	var yymg4677 bool
	if yybh4677.MapValueReset {
		yymg4677 = true
	}
	if yyl4677 > 0 {
		for yyj4677 := 0; yyj4677 < yyl4677; yyj4677++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4677 = ""
			} else {
				yymk4677 = string(r.DecodeString())
			}

			if yymg4677 {
				yymv4677 = yyv4677[yymk4677]
			} else {
				yymv4677 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4677 = nil
			} else {
				yyv4679 := &yymv4677
				yym4680 := z.DecBinary()
				_ = yym4680
				if false {
				} else {
					*yyv4679 = r.DecodeBytes(*(*[]byte)(yyv4679), false, false)
				}
			}

			if yyv4677 != nil {
				yyv4677[yymk4677] = yymv4677
			}
		}
	} else if yyl4677 < 0 {
		for yyj4677 := 0; !r.CheckBreak(); yyj4677++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4677 = ""
			} else {
				yymk4677 = string(r.DecodeString())
			}

			if yymg4677 {
				yymv4677 = yyv4677[yymk4677]
			} else {
				yymv4677 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4677 = nil
			} else {
				yyv4682 := &yymv4677
				yym4683 := z.DecBinary()
				_ = yym4683
				if false {
				} else {
					*yyv4682 = r.DecodeBytes(*(*[]byte)(yyv4682), false, false)
				}
			}

			if yyv4677 != nil {
				yyv4677[yymk4677] = yymv4677
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4684 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4685 := &yyv4684
		yy4685.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4686 := *v
	yyh4686, yyl4686 := z.DecSliceHelperStart()
	var yyc4686 bool
	if yyl4686 == 0 {
		if yyv4686 == nil {
			yyv4686 = []Secret{}
			yyc4686 = true
		} else if len(yyv4686) != 0 {
			yyv4686 = yyv4686[:0]
			yyc4686 = true
		}
	} else if yyl4686 > 0 {
		var yyrr4686, yyrl4686 int
		var yyrt4686 bool
		if yyl4686 > cap(yyv4686) {

			yyrg4686 := len(yyv4686) > 0
			yyv24686 := yyv4686
			yyrl4686, yyrt4686 = z.DecInferLen(yyl4686, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4686 {
				if yyrl4686 <= cap(yyv4686) {
					yyv4686 = yyv4686[:yyrl4686]
				} else {
					yyv4686 = make([]Secret, yyrl4686)
				}
			} else {
				yyv4686 = make([]Secret, yyrl4686)
			}
			yyc4686 = true
			yyrr4686 = len(yyv4686)
			if yyrg4686 {
				copy(yyv4686, yyv24686)
			}
		} else if yyl4686 != len(yyv4686) {
			yyv4686 = yyv4686[:yyl4686]
			yyc4686 = true
		}
		yyj4686 := 0
		for ; yyj4686 < yyrr4686; yyj4686++ {
			yyh4686.ElemContainerState(yyj4686)
			if r.TryDecodeAsNil() {
				yyv4686[yyj4686] = Secret{}
			} else {
				yyv4687 := &yyv4686[yyj4686]
				yyv4687.CodecDecodeSelf(d)
			}

		}
		if yyrt4686 {
			for ; yyj4686 < yyl4686; yyj4686++ {
				yyv4686 = append(yyv4686, Secret{})
				yyh4686.ElemContainerState(yyj4686)
				if r.TryDecodeAsNil() {
					yyv4686[yyj4686] = Secret{}
				} else {
					yyv4688 := &yyv4686[yyj4686]
					yyv4688.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4686 := 0
		for ; !r.CheckBreak(); yyj4686++ {

			if yyj4686 >= len(yyv4686) {
				yyv4686 = append(yyv4686, Secret{}) // var yyz4686 Secret
				yyc4686 = true
			}
			yyh4686.ElemContainerState(yyj4686)
			if yyj4686 < len(yyv4686) {
				if r.TryDecodeAsNil() {
					yyv4686[yyj4686] = Secret{}
				} else {
					yyv4689 := &yyv4686[yyj4686]
					yyv4689.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4686 < len(yyv4686) {
			yyv4686 = yyv4686[:yyj4686]
			yyc4686 = true
		} else if yyj4686 == 0 && yyv4686 == nil {
			yyv4686 = []Secret{}
			yyc4686 = true
		}
	}
	yyh4686.End()
	if yyc4686 {
		*v = yyv4686
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4690 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4691 := &yyv4690
		yy4691.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4692 := *v
	yyh4692, yyl4692 := z.DecSliceHelperStart()
	var yyc4692 bool
	if yyl4692 == 0 {
		if yyv4692 == nil {
			yyv4692 = []ConfigMap{}
			yyc4692 = true
		} else if len(yyv4692) != 0 {
			yyv4692 = yyv4692[:0]
			yyc4692 = true
		}
	} else if yyl4692 > 0 {
		var yyrr4692, yyrl4692 int
		var yyrt4692 bool
		if yyl4692 > cap(yyv4692) {

			yyrg4692 := len(yyv4692) > 0
			yyv24692 := yyv4692
			yyrl4692, yyrt4692 = z.DecInferLen(yyl4692, z.DecBasicHandle().MaxInitLen, 248)
			if yyrt4692 {
				if yyrl4692 <= cap(yyv4692) {
					yyv4692 = yyv4692[:yyrl4692]
				} else {
					yyv4692 = make([]ConfigMap, yyrl4692)
				}
			} else {
				yyv4692 = make([]ConfigMap, yyrl4692)
			}
			yyc4692 = true
			yyrr4692 = len(yyv4692)
			if yyrg4692 {
				copy(yyv4692, yyv24692)
			}
		} else if yyl4692 != len(yyv4692) {
			yyv4692 = yyv4692[:yyl4692]
			yyc4692 = true
		}
		yyj4692 := 0
		for ; yyj4692 < yyrr4692; yyj4692++ {
			yyh4692.ElemContainerState(yyj4692)
			if r.TryDecodeAsNil() {
				yyv4692[yyj4692] = ConfigMap{}
			} else {
				yyv4693 := &yyv4692[yyj4692]
				yyv4693.CodecDecodeSelf(d)
			}

		}
		if yyrt4692 {
			for ; yyj4692 < yyl4692; yyj4692++ {
				yyv4692 = append(yyv4692, ConfigMap{})
				yyh4692.ElemContainerState(yyj4692)
				if r.TryDecodeAsNil() {
					yyv4692[yyj4692] = ConfigMap{}
				} else {
					yyv4694 := &yyv4692[yyj4692]
					yyv4694.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4692 := 0
		for ; !r.CheckBreak(); yyj4692++ {

			if yyj4692 >= len(yyv4692) {
				yyv4692 = append(yyv4692, ConfigMap{}) // var yyz4692 ConfigMap
				yyc4692 = true
			}
			yyh4692.ElemContainerState(yyj4692)
			if yyj4692 < len(yyv4692) {
				if r.TryDecodeAsNil() {
					yyv4692[yyj4692] = ConfigMap{}
				} else {
					yyv4695 := &yyv4692[yyj4692]
					yyv4695.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4692 < len(yyv4692) {
			yyv4692 = yyv4692[:yyj4692]
			yyc4692 = true
		} else if yyj4692 == 0 && yyv4692 == nil {
			yyv4692 = []ConfigMap{}
			yyc4692 = true
		}
	}
	yyh4692.End()
	if yyc4692 {
		*v = yyv4692
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4696 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4697 := &yyv4696
		yy4697.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4698 := *v
	yyh4698, yyl4698 := z.DecSliceHelperStart()
	var yyc4698 bool
	if yyl4698 == 0 {
		if yyv4698 == nil {
			yyv4698 = []ComponentCondition{}
			yyc4698 = true
		} else if len(yyv4698) != 0 {
			yyv4698 = yyv4698[:0]
			yyc4698 = true
		}
	} else if yyl4698 > 0 {
		var yyrr4698, yyrl4698 int
		var yyrt4698 bool
		if yyl4698 > cap(yyv4698) {

			yyrg4698 := len(yyv4698) > 0
			yyv24698 := yyv4698
			yyrl4698, yyrt4698 = z.DecInferLen(yyl4698, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4698 {
				if yyrl4698 <= cap(yyv4698) {
					yyv4698 = yyv4698[:yyrl4698]
				} else {
					yyv4698 = make([]ComponentCondition, yyrl4698)
				}
			} else {
				yyv4698 = make([]ComponentCondition, yyrl4698)
			}
			yyc4698 = true
			yyrr4698 = len(yyv4698)
			if yyrg4698 {
				copy(yyv4698, yyv24698)
			}
		} else if yyl4698 != len(yyv4698) {
			yyv4698 = yyv4698[:yyl4698]
			yyc4698 = true
		}
		yyj4698 := 0
		for ; yyj4698 < yyrr4698; yyj4698++ {
			yyh4698.ElemContainerState(yyj4698)
			if r.TryDecodeAsNil() {
				yyv4698[yyj4698] = ComponentCondition{}
			} else {
				yyv4699 := &yyv4698[yyj4698]
				yyv4699.CodecDecodeSelf(d)
			}

		}
		if yyrt4698 {
			for ; yyj4698 < yyl4698; yyj4698++ {
				yyv4698 = append(yyv4698, ComponentCondition{})
				yyh4698.ElemContainerState(yyj4698)
				if r.TryDecodeAsNil() {
					yyv4698[yyj4698] = ComponentCondition{}
				} else {
					yyv4700 := &yyv4698[yyj4698]
					yyv4700.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4698 := 0
		for ; !r.CheckBreak(); yyj4698++ {

			if yyj4698 >= len(yyv4698) {
				yyv4698 = append(yyv4698, ComponentCondition{}) // var yyz4698 ComponentCondition
				yyc4698 = true
			}
			yyh4698.ElemContainerState(yyj4698)
			if yyj4698 < len(yyv4698) {
				if r.TryDecodeAsNil() {
					yyv4698[yyj4698] = ComponentCondition{}
				} else {
					yyv4701 := &yyv4698[yyj4698]
					yyv4701.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4698 < len(yyv4698) {
			yyv4698 = yyv4698[:yyj4698]
			yyc4698 = true
		} else if yyj4698 == 0 && yyv4698 == nil {
			yyv4698 = []ComponentCondition{}
			yyc4698 = true
		}
	}
	yyh4698.End()
	if yyc4698 {
		*v = yyv4698
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4702 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4703 := &yyv4702
		yy4703.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4704 := *v
	yyh4704, yyl4704 := z.DecSliceHelperStart()
	var yyc4704 bool
	if yyl4704 == 0 {
		if yyv4704 == nil {
			yyv4704 = []ComponentStatus{}
			yyc4704 = true
		} else if len(yyv4704) != 0 {
			yyv4704 = yyv4704[:0]
			yyc4704 = true
		}
	} else if yyl4704 > 0 {
		var yyrr4704, yyrl4704 int
		var yyrt4704 bool
		if yyl4704 > cap(yyv4704) {

			yyrg4704 := len(yyv4704) > 0
			yyv24704 := yyv4704
			yyrl4704, yyrt4704 = z.DecInferLen(yyl4704, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4704 {
				if yyrl4704 <= cap(yyv4704) {
					yyv4704 = yyv4704[:yyrl4704]
				} else {
					yyv4704 = make([]ComponentStatus, yyrl4704)
				}
			} else {
				yyv4704 = make([]ComponentStatus, yyrl4704)
			}
			yyc4704 = true
			yyrr4704 = len(yyv4704)
			if yyrg4704 {
				copy(yyv4704, yyv24704)
			}
		} else if yyl4704 != len(yyv4704) {
			yyv4704 = yyv4704[:yyl4704]
			yyc4704 = true
		}
		yyj4704 := 0
		for ; yyj4704 < yyrr4704; yyj4704++ {
			yyh4704.ElemContainerState(yyj4704)
			if r.TryDecodeAsNil() {
				yyv4704[yyj4704] = ComponentStatus{}
			} else {
				yyv4705 := &yyv4704[yyj4704]
				yyv4705.CodecDecodeSelf(d)
			}

		}
		if yyrt4704 {
			for ; yyj4704 < yyl4704; yyj4704++ {
				yyv4704 = append(yyv4704, ComponentStatus{})
				yyh4704.ElemContainerState(yyj4704)
				if r.TryDecodeAsNil() {
					yyv4704[yyj4704] = ComponentStatus{}
				} else {
					yyv4706 := &yyv4704[yyj4704]
					yyv4706.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4704 := 0
		for ; !r.CheckBreak(); yyj4704++ {

			if yyj4704 >= len(yyv4704) {
				yyv4704 = append(yyv4704, ComponentStatus{}) // var yyz4704 ComponentStatus
				yyc4704 = true
			}
			yyh4704.ElemContainerState(yyj4704)
			if yyj4704 < len(yyv4704) {
				if r.TryDecodeAsNil() {
					yyv4704[yyj4704] = ComponentStatus{}
				} else {
					yyv4707 := &yyv4704[yyj4704]
					yyv4707.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4704 < len(yyv4704) {
			yyv4704 = yyv4704[:yyj4704]
			yyc4704 = true
		} else if yyj4704 == 0 && yyv4704 == nil {
			yyv4704 = []ComponentStatus{}
			yyc4704 = true
		}
	}
	yyh4704.End()
	if yyc4704 {
		*v = yyv4704
	}
}
