/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_fields "k8s.io/kubernetes/pkg/fields"
	pkg5_labels "k8s.io/kubernetes/pkg/labels"
	pkg7_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_fields.Selector
		var v3 pkg5_labels.Selector
		var v4 pkg7_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg4_intstr.IntOrString
		var v7 time.Time
		_, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			yyq2[14] = x.ClusterName != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[14] {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv62 := &x.CreationTimestamp
				yym63 := z.DecBinary()
				_ = yym63
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv62) {
				} else if yym63 {
					z.DecBinaryUnmarshal(yyv62)
				} else if !yym63 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv62)
				} else {
					z.DecFallback(yyv62, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym65 := z.DecBinary()
				_ = yym65
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym65 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym65 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym67 := z.DecBinary()
				_ = yym67
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv68 := &x.Labels
				yym69 := z.DecBinary()
				_ = yym69
				if false {
				} else {
					z.F.DecMapStringStringX(yyv68, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv70 := &x.Annotations
				yym71 := z.DecBinary()
				_ = yym71
				if false {
				} else {
					z.F.DecMapStringStringX(yyv70, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv72 := &x.OwnerReferences
				yym73 := z.DecBinary()
				_ = yym73
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv72), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv74 := &x.Finalizers
				yym75 := z.DecBinary()
				_ = yym75
				if false {
				} else {
					z.F.DecSliceStringX(yyv74, false, d)
				}
			}
		case "clusterName":
			if r.TryDecodeAsNil() {
				x.ClusterName = ""
			} else {
				x.ClusterName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj77 int
	var yyb77 bool
	var yyhl77 bool = l >= 0
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv85 := &x.CreationTimestamp
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv85) {
		} else if yym86 {
			z.DecBinaryUnmarshal(yyv85)
		} else if !yym86 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv85)
		} else {
			z.DecFallback(yyv85, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym88 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym88 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv91 := &x.Labels
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			z.F.DecMapStringStringX(yyv91, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv93 := &x.Annotations
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecMapStringStringX(yyv93, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv95 := &x.OwnerReferences
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv95), d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv97 := &x.Finalizers
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			z.F.DecSliceStringX(yyv97, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterName = ""
	} else {
		x.ClusterName = string(r.DecodeString())
	}
	for {
		yyj77++
		if yyhl77 {
			yyb77 = yyj77 > l
		} else {
			yyb77 = r.CheckBreak()
		}
		if yyb77 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj77-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym100 := z.EncBinary()
		_ = yym100
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep101 := !z.EncBinary()
			yy2arr101 := z.EncBasicHandle().StructToArray
			var yyq101 [24]bool
			_, _, _ = yysep101, yyq101, yy2arr101
			const yyr101 bool = false
			yyq101[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq101[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq101[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq101[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq101[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq101[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq101[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq101[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq101[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq101[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq101[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq101[12] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq101[13] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq101[14] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq101[15] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq101[16] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq101[17] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq101[18] = x.VolumeSource.FC != nil && x.FC != nil
			yyq101[19] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq101[20] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq101[21] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq101[22] = x.VolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq101[23] = x.VolumeSource.LibStorage != nil && x.LibStorage != nil
			var yynn101 int
			if yyr101 || yy2arr101 {
				r.EncodeArrayStart(24)
			} else {
				yynn101 = 1
				for _, b := range yyq101 {
					if b {
						yynn101++
					}
				}
				r.EncodeMapStart(yynn101)
				yynn101 = 0
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym103 := z.EncBinary()
				_ = yym103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym104 := z.EncBinary()
				_ = yym104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn105 bool
			if x.VolumeSource.HostPath == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr101 || yy2arr101 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr101 || yy2arr101 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr101 || yy2arr101 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr101 || yy2arr101 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.GitRepo == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr101 || yy2arr101 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.Secret == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr101 || yy2arr101 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.NFS == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr101 || yy2arr101 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.ISCSI == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr101 || yy2arr101 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr101 || yy2arr101 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr101 || yy2arr101 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.RBD == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr101 || yy2arr101 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.Quobyte == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr101 || yy2arr101 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[12] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr101 || yy2arr101 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[13] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.Cinder == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr101 || yy2arr101 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[14] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.CephFS == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr101 || yy2arr101 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[15] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.Flocker == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr101 || yy2arr101 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[16] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr101 || yy2arr101 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[17] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.FC == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr101 || yy2arr101 {
				if yyn122 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[18] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.AzureFile == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr101 || yy2arr101 {
				if yyn123 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[19] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr101 || yy2arr101 {
				if yyn124 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[20] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr101 || yy2arr101 {
				if yyn125 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[21] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn126 bool
			if x.VolumeSource.AzureDisk == nil {
				yyn126 = true
				goto LABEL126
			}
		LABEL126:
			if yyr101 || yy2arr101 {
				if yyn126 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[22] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn126 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn127 bool
			if x.VolumeSource.LibStorage == nil {
				yyn127 = true
				goto LABEL127
			}
		LABEL127:
			if yyr101 || yy2arr101 {
				if yyn127 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[23] {
						if x.LibStorage == nil {
							r.EncodeNil()
						} else {
							x.LibStorage.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("libStorage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn127 {
						r.EncodeNil()
					} else {
						if x.LibStorage == nil {
							r.EncodeNil()
						} else {
							x.LibStorage.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym128 := z.DecBinary()
	_ = yym128
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct129 := r.ContainerType()
		if yyct129 == codecSelferValueTypeMap1234 {
			yyl129 := r.ReadMapStart()
			if yyl129 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl129, d)
			}
		} else if yyct129 == codecSelferValueTypeArray1234 {
			yyl129 := r.ReadArrayStart()
			if yyl129 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl129, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys130Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys130Slc
	var yyhl130 bool = l >= 0
	for yyj130 := 0; ; yyj130++ {
		if yyhl130 {
			if yyj130 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys130Slc = r.DecodeBytes(yys130Slc, true, true)
		yys130 := string(yys130Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys130 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.VolumeSource.AzureDisk == nil {
				x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "libStorage":
			if x.VolumeSource.LibStorage == nil {
				x.VolumeSource.LibStorage = new(LibStorageVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.LibStorage != nil {
					x.LibStorage = nil
				}
			} else {
				if x.LibStorage == nil {
					x.LibStorage = new(LibStorageVolumeSource)
				}
				x.LibStorage.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys130)
		} // end switch yys130
	} // end for yyj130
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj155 int
	var yyb155 bool
	var yyhl155 bool = l >= 0
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureDisk == nil {
		x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.LibStorage == nil {
		x.VolumeSource.LibStorage = new(LibStorageVolumeSource)
	}
	yyj155++
	if yyhl155 {
		yyb155 = yyj155 > l
	} else {
		yyb155 = r.CheckBreak()
	}
	if yyb155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LibStorage != nil {
			x.LibStorage = nil
		}
	} else {
		if x.LibStorage == nil {
			x.LibStorage = new(LibStorageVolumeSource)
		}
		x.LibStorage.CodecDecodeSelf(d)
	}
	for {
		yyj155++
		if yyhl155 {
			yyb155 = yyj155 > l
		} else {
			yyb155 = r.CheckBreak()
		}
		if yyb155 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj155-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym180 := z.EncBinary()
		_ = yym180
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep181 := !z.EncBinary()
			yy2arr181 := z.EncBasicHandle().StructToArray
			var yyq181 [23]bool
			_, _, _ = yysep181, yyq181, yy2arr181
			const yyr181 bool = false
			yyq181[0] = x.HostPath != nil
			yyq181[1] = x.EmptyDir != nil
			yyq181[2] = x.GCEPersistentDisk != nil
			yyq181[3] = x.AWSElasticBlockStore != nil
			yyq181[4] = x.GitRepo != nil
			yyq181[5] = x.Secret != nil
			yyq181[6] = x.NFS != nil
			yyq181[7] = x.ISCSI != nil
			yyq181[8] = x.Glusterfs != nil
			yyq181[9] = x.PersistentVolumeClaim != nil
			yyq181[10] = x.RBD != nil
			yyq181[11] = x.Quobyte != nil
			yyq181[12] = x.FlexVolume != nil
			yyq181[13] = x.Cinder != nil
			yyq181[14] = x.CephFS != nil
			yyq181[15] = x.Flocker != nil
			yyq181[16] = x.DownwardAPI != nil
			yyq181[17] = x.FC != nil
			yyq181[18] = x.AzureFile != nil
			yyq181[19] = x.ConfigMap != nil
			yyq181[20] = x.VsphereVolume != nil
			yyq181[21] = x.AzureDisk != nil
			yyq181[22] = x.LibStorage != nil
			var yynn181 int
			if yyr181 || yy2arr181 {
				r.EncodeArrayStart(23)
			} else {
				yynn181 = 0
				for _, b := range yyq181 {
					if b {
						yynn181++
					}
				}
				r.EncodeMapStart(yynn181)
				yynn181 = 0
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[11] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[12] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[13] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[14] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[15] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[16] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[17] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[18] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[19] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[20] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[21] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[22] {
					if x.LibStorage == nil {
						r.EncodeNil()
					} else {
						x.LibStorage.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("libStorage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LibStorage == nil {
						r.EncodeNil()
					} else {
						x.LibStorage.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym205 := z.DecBinary()
	_ = yym205
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct206 := r.ContainerType()
		if yyct206 == codecSelferValueTypeMap1234 {
			yyl206 := r.ReadMapStart()
			if yyl206 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl206, d)
			}
		} else if yyct206 == codecSelferValueTypeArray1234 {
			yyl206 := r.ReadArrayStart()
			if yyl206 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl206, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys207Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys207Slc
	var yyhl207 bool = l >= 0
	for yyj207 := 0; ; yyj207++ {
		if yyhl207 {
			if yyj207 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys207Slc = r.DecodeBytes(yys207Slc, true, true)
		yys207 := string(yys207Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys207 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "libStorage":
			if r.TryDecodeAsNil() {
				if x.LibStorage != nil {
					x.LibStorage = nil
				}
			} else {
				if x.LibStorage == nil {
					x.LibStorage = new(LibStorageVolumeSource)
				}
				x.LibStorage.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys207)
		} // end switch yys207
	} // end for yyj207
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj231 int
	var yyb231 bool
	var yyhl231 bool = l >= 0
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LibStorage != nil {
			x.LibStorage = nil
		}
	} else {
		if x.LibStorage == nil {
			x.LibStorage = new(LibStorageVolumeSource)
		}
		x.LibStorage.CodecDecodeSelf(d)
	}
	for {
		yyj231++
		if yyhl231 {
			yyb231 = yyj231 > l
		} else {
			yyb231 = r.CheckBreak()
		}
		if yyb231 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj231-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym255 := z.EncBinary()
		_ = yym255
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep256 := !z.EncBinary()
			yy2arr256 := z.EncBasicHandle().StructToArray
			var yyq256 [17]bool
			_, _, _ = yysep256, yyq256, yy2arr256
			const yyr256 bool = false
			yyq256[0] = x.GCEPersistentDisk != nil
			yyq256[1] = x.AWSElasticBlockStore != nil
			yyq256[2] = x.HostPath != nil
			yyq256[3] = x.Glusterfs != nil
			yyq256[4] = x.NFS != nil
			yyq256[5] = x.RBD != nil
			yyq256[6] = x.Quobyte != nil
			yyq256[7] = x.ISCSI != nil
			yyq256[8] = x.FlexVolume != nil
			yyq256[9] = x.Cinder != nil
			yyq256[10] = x.CephFS != nil
			yyq256[11] = x.FC != nil
			yyq256[12] = x.Flocker != nil
			yyq256[13] = x.AzureFile != nil
			yyq256[14] = x.VsphereVolume != nil
			yyq256[15] = x.AzureDisk != nil
			yyq256[16] = x.LibStorage != nil
			var yynn256 int
			if yyr256 || yy2arr256 {
				r.EncodeArrayStart(17)
			} else {
				yynn256 = 0
				for _, b := range yyq256 {
					if b {
						yynn256++
					}
				}
				r.EncodeMapStart(yynn256)
				yynn256 = 0
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[6] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[8] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[9] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[10] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[11] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[12] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[13] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[14] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[15] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[16] {
					if x.LibStorage == nil {
						r.EncodeNil()
					} else {
						x.LibStorage.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("libStorage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LibStorage == nil {
						r.EncodeNil()
					} else {
						x.LibStorage.CodecEncodeSelf(e)
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym274 := z.DecBinary()
	_ = yym274
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct275 := r.ContainerType()
		if yyct275 == codecSelferValueTypeMap1234 {
			yyl275 := r.ReadMapStart()
			if yyl275 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl275, d)
			}
		} else if yyct275 == codecSelferValueTypeArray1234 {
			yyl275 := r.ReadArrayStart()
			if yyl275 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl275, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys276Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys276Slc
	var yyhl276 bool = l >= 0
	for yyj276 := 0; ; yyj276++ {
		if yyhl276 {
			if yyj276 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys276Slc = r.DecodeBytes(yys276Slc, true, true)
		yys276 := string(yys276Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys276 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "libStorage":
			if r.TryDecodeAsNil() {
				if x.LibStorage != nil {
					x.LibStorage = nil
				}
			} else {
				if x.LibStorage == nil {
					x.LibStorage = new(LibStorageVolumeSource)
				}
				x.LibStorage.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys276)
		} // end switch yys276
	} // end for yyj276
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj294 int
	var yyb294 bool
	var yyhl294 bool = l >= 0
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj294++
	if yyhl294 {
		yyb294 = yyj294 > l
	} else {
		yyb294 = r.CheckBreak()
	}
	if yyb294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LibStorage != nil {
			x.LibStorage = nil
		}
	} else {
		if x.LibStorage == nil {
			x.LibStorage = new(LibStorageVolumeSource)
		}
		x.LibStorage.CodecDecodeSelf(d)
	}
	for {
		yyj294++
		if yyhl294 {
			yyb294 = yyj294 > l
		} else {
			yyb294 = r.CheckBreak()
		}
		if yyb294 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj294-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym312 := z.EncBinary()
		_ = yym312
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep313 := !z.EncBinary()
			yy2arr313 := z.EncBasicHandle().StructToArray
			var yyq313 [2]bool
			_, _, _ = yysep313, yyq313, yy2arr313
			const yyr313 bool = false
			yyq313[1] = x.ReadOnly != false
			var yynn313 int
			if yyr313 || yy2arr313 {
				r.EncodeArrayStart(2)
			} else {
				yynn313 = 1
				for _, b := range yyq313 {
					if b {
						yynn313++
					}
				}
				r.EncodeMapStart(yynn313)
				yynn313 = 0
			}
			if yyr313 || yy2arr313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym315 := z.EncBinary()
				_ = yym315
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym316 := z.EncBinary()
				_ = yym316
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr313 || yy2arr313 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq313[1] {
					yym318 := z.EncBinary()
					_ = yym318
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq313[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym319 := z.EncBinary()
					_ = yym319
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr313 || yy2arr313 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym320 := z.DecBinary()
	_ = yym320
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct321 := r.ContainerType()
		if yyct321 == codecSelferValueTypeMap1234 {
			yyl321 := r.ReadMapStart()
			if yyl321 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl321, d)
			}
		} else if yyct321 == codecSelferValueTypeArray1234 {
			yyl321 := r.ReadArrayStart()
			if yyl321 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl321, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys322Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys322Slc
	var yyhl322 bool = l >= 0
	for yyj322 := 0; ; yyj322++ {
		if yyhl322 {
			if yyj322 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys322Slc = r.DecodeBytes(yys322Slc, true, true)
		yys322 := string(yys322Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys322 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys322)
		} // end switch yys322
	} // end for yyj322
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj325 int
	var yyb325 bool
	var yyhl325 bool = l >= 0
	yyj325++
	if yyhl325 {
		yyb325 = yyj325 > l
	} else {
		yyb325 = r.CheckBreak()
	}
	if yyb325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj325++
	if yyhl325 {
		yyb325 = yyj325 > l
	} else {
		yyb325 = r.CheckBreak()
	}
	if yyb325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj325++
		if yyhl325 {
			yyb325 = yyj325 > l
		} else {
			yyb325 = r.CheckBreak()
		}
		if yyb325 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj325-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym328 := z.EncBinary()
		_ = yym328
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep329 := !z.EncBinary()
			yy2arr329 := z.EncBasicHandle().StructToArray
			var yyq329 [5]bool
			_, _, _ = yysep329, yyq329, yy2arr329
			const yyr329 bool = false
			yyq329[0] = x.Kind != ""
			yyq329[1] = x.APIVersion != ""
			yyq329[2] = true
			yyq329[3] = true
			yyq329[4] = true
			var yynn329 int
			if yyr329 || yy2arr329 {
				r.EncodeArrayStart(5)
			} else {
				yynn329 = 0
				for _, b := range yyq329 {
					if b {
						yynn329++
					}
				}
				r.EncodeMapStart(yynn329)
				yynn329 = 0
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[0] {
					yym331 := z.EncBinary()
					_ = yym331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq329[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym332 := z.EncBinary()
					_ = yym332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[1] {
					yym334 := z.EncBinary()
					_ = yym334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq329[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym335 := z.EncBinary()
					_ = yym335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[2] {
					yy337 := &x.ObjectMeta
					yy337.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq329[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy338 := &x.ObjectMeta
					yy338.CodecEncodeSelf(e)
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[3] {
					yy340 := &x.Spec
					yy340.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq329[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy341 := &x.Spec
					yy341.CodecEncodeSelf(e)
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq329[4] {
					yy343 := &x.Status
					yy343.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq329[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy344 := &x.Status
					yy344.CodecEncodeSelf(e)
				}
			}
			if yyr329 || yy2arr329 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym345 := z.DecBinary()
	_ = yym345
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct346 := r.ContainerType()
		if yyct346 == codecSelferValueTypeMap1234 {
			yyl346 := r.ReadMapStart()
			if yyl346 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl346, d)
			}
		} else if yyct346 == codecSelferValueTypeArray1234 {
			yyl346 := r.ReadArrayStart()
			if yyl346 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl346, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys347Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys347Slc
	var yyhl347 bool = l >= 0
	for yyj347 := 0; ; yyj347++ {
		if yyhl347 {
			if yyj347 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys347Slc = r.DecodeBytes(yys347Slc, true, true)
		yys347 := string(yys347Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys347 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv350 := &x.ObjectMeta
				yyv350.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv351 := &x.Spec
				yyv351.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv352 := &x.Status
				yyv352.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys347)
		} // end switch yys347
	} // end for yyj347
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj353 int
	var yyb353 bool
	var yyhl353 bool = l >= 0
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv356 := &x.ObjectMeta
		yyv356.CodecDecodeSelf(d)
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv357 := &x.Spec
		yyv357.CodecDecodeSelf(d)
	}
	yyj353++
	if yyhl353 {
		yyb353 = yyj353 > l
	} else {
		yyb353 = r.CheckBreak()
	}
	if yyb353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv358 := &x.Status
		yyv358.CodecDecodeSelf(d)
	}
	for {
		yyj353++
		if yyhl353 {
			yyb353 = yyj353 > l
		} else {
			yyb353 = r.CheckBreak()
		}
		if yyb353 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj353-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym359 := z.EncBinary()
		_ = yym359
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep360 := !z.EncBinary()
			yy2arr360 := z.EncBasicHandle().StructToArray
			var yyq360 [21]bool
			_, _, _ = yysep360, yyq360, yy2arr360
			const yyr360 bool = false
			yyq360[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq360[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq360[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq360[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq360[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq360[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq360[7] = x.PersistentVolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq360[8] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq360[9] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq360[10] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq360[11] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq360[12] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq360[13] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq360[14] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq360[15] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq360[16] = x.PersistentVolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq360[17] = x.PersistentVolumeSource.LibStorage != nil && x.LibStorage != nil
			yyq360[18] = len(x.AccessModes) != 0
			yyq360[19] = x.ClaimRef != nil
			yyq360[20] = x.PersistentVolumeReclaimPolicy != ""
			var yynn360 int
			if yyr360 || yy2arr360 {
				r.EncodeArrayStart(21)
			} else {
				yynn360 = 1
				for _, b := range yyq360 {
					if b {
						yynn360++
					}
				}
				r.EncodeMapStart(yynn360)
				yynn360 = 0
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn362 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn362 = true
				goto LABEL362
			}
		LABEL362:
			if yyr360 || yy2arr360 {
				if yyn362 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn362 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn363 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn363 = true
				goto LABEL363
			}
		LABEL363:
			if yyr360 || yy2arr360 {
				if yyn363 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn363 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn364 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn364 = true
				goto LABEL364
			}
		LABEL364:
			if yyr360 || yy2arr360 {
				if yyn364 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn364 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn365 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn365 = true
				goto LABEL365
			}
		LABEL365:
			if yyr360 || yy2arr360 {
				if yyn365 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn365 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn366 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn366 = true
				goto LABEL366
			}
		LABEL366:
			if yyr360 || yy2arr360 {
				if yyn366 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn366 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn367 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn367 = true
				goto LABEL367
			}
		LABEL367:
			if yyr360 || yy2arr360 {
				if yyn367 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn367 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn368 bool
			if x.PersistentVolumeSource.Quobyte == nil {
				yyn368 = true
				goto LABEL368
			}
		LABEL368:
			if yyr360 || yy2arr360 {
				if yyn368 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[7] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn368 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn369 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn369 = true
				goto LABEL369
			}
		LABEL369:
			if yyr360 || yy2arr360 {
				if yyn369 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn369 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn370 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn370 = true
				goto LABEL370
			}
		LABEL370:
			if yyr360 || yy2arr360 {
				if yyn370 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[9] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn370 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn371 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn371 = true
				goto LABEL371
			}
		LABEL371:
			if yyr360 || yy2arr360 {
				if yyn371 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[10] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn371 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn372 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn372 = true
				goto LABEL372
			}
		LABEL372:
			if yyr360 || yy2arr360 {
				if yyn372 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[11] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn372 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn373 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn373 = true
				goto LABEL373
			}
		LABEL373:
			if yyr360 || yy2arr360 {
				if yyn373 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[12] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn373 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn374 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn374 = true
				goto LABEL374
			}
		LABEL374:
			if yyr360 || yy2arr360 {
				if yyn374 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[13] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn374 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn375 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn375 = true
				goto LABEL375
			}
		LABEL375:
			if yyr360 || yy2arr360 {
				if yyn375 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[14] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn375 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn376 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn376 = true
				goto LABEL376
			}
		LABEL376:
			if yyr360 || yy2arr360 {
				if yyn376 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[15] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn376 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn377 bool
			if x.PersistentVolumeSource.AzureDisk == nil {
				yyn377 = true
				goto LABEL377
			}
		LABEL377:
			if yyr360 || yy2arr360 {
				if yyn377 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[16] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn377 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn378 bool
			if x.PersistentVolumeSource.LibStorage == nil {
				yyn378 = true
				goto LABEL378
			}
		LABEL378:
			if yyr360 || yy2arr360 {
				if yyn378 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq360[17] {
						if x.LibStorage == nil {
							r.EncodeNil()
						} else {
							x.LibStorage.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq360[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("libStorage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn378 {
						r.EncodeNil()
					} else {
						if x.LibStorage == nil {
							r.EncodeNil()
						} else {
							x.LibStorage.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[18] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym380 := z.EncBinary()
						_ = yym380
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq360[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym381 := z.EncBinary()
						_ = yym381
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[19] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq360[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[20] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq360[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym384 := z.DecBinary()
	_ = yym384
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct385 := r.ContainerType()
		if yyct385 == codecSelferValueTypeMap1234 {
			yyl385 := r.ReadMapStart()
			if yyl385 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl385, d)
			}
		} else if yyct385 == codecSelferValueTypeArray1234 {
			yyl385 := r.ReadArrayStart()
			if yyl385 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl385, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys386Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys386Slc
	var yyhl386 bool = l >= 0
	for yyj386 := 0; ; yyj386++ {
		if yyhl386 {
			if yyj386 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys386Slc = r.DecodeBytes(yys386Slc, true, true)
		yys386 := string(yys386Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys386 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv387 := &x.Capacity
				yyv387.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.PersistentVolumeSource.Quobyte == nil {
				x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.PersistentVolumeSource.AzureDisk == nil {
				x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "libStorage":
			if x.PersistentVolumeSource.LibStorage == nil {
				x.PersistentVolumeSource.LibStorage = new(LibStorageVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.LibStorage != nil {
					x.LibStorage = nil
				}
			} else {
				if x.LibStorage == nil {
					x.LibStorage = new(LibStorageVolumeSource)
				}
				x.LibStorage.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv405 := &x.AccessModes
				yym406 := z.DecBinary()
				_ = yym406
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv405), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys386)
		} // end switch yys386
	} // end for yyj386
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj409 int
	var yyb409 bool
	var yyhl409 bool = l >= 0
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv410 := &x.Capacity
		yyv410.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Quobyte == nil {
		x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureDisk == nil {
		x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.LibStorage == nil {
		x.PersistentVolumeSource.LibStorage = new(LibStorageVolumeSource)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LibStorage != nil {
			x.LibStorage = nil
		}
	} else {
		if x.LibStorage == nil {
			x.LibStorage = new(LibStorageVolumeSource)
		}
		x.LibStorage.CodecDecodeSelf(d)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv428 := &x.AccessModes
		yym429 := z.DecBinary()
		_ = yym429
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv428), d)
		}
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj409++
	if yyhl409 {
		yyb409 = yyj409 > l
	} else {
		yyb409 = r.CheckBreak()
	}
	if yyb409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj409++
		if yyhl409 {
			yyb409 = yyj409 > l
		} else {
			yyb409 = r.CheckBreak()
		}
		if yyb409 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj409-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym432 := z.EncBinary()
	_ = yym432
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym433 := z.DecBinary()
	_ = yym433
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym434 := z.EncBinary()
		_ = yym434
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep435 := !z.EncBinary()
			yy2arr435 := z.EncBasicHandle().StructToArray
			var yyq435 [3]bool
			_, _, _ = yysep435, yyq435, yy2arr435
			const yyr435 bool = false
			yyq435[0] = x.Phase != ""
			yyq435[1] = x.Message != ""
			yyq435[2] = x.Reason != ""
			var yynn435 int
			if yyr435 || yy2arr435 {
				r.EncodeArrayStart(3)
			} else {
				yynn435 = 0
				for _, b := range yyq435 {
					if b {
						yynn435++
					}
				}
				r.EncodeMapStart(yynn435)
				yynn435 = 0
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq435[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq435[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq435[1] {
					yym438 := z.EncBinary()
					_ = yym438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq435[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym439 := z.EncBinary()
					_ = yym439
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq435[2] {
					yym441 := z.EncBinary()
					_ = yym441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq435[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym442 := z.EncBinary()
					_ = yym442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym443 := z.DecBinary()
	_ = yym443
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct444 := r.ContainerType()
		if yyct444 == codecSelferValueTypeMap1234 {
			yyl444 := r.ReadMapStart()
			if yyl444 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl444, d)
			}
		} else if yyct444 == codecSelferValueTypeArray1234 {
			yyl444 := r.ReadArrayStart()
			if yyl444 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl444, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys445Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys445Slc
	var yyhl445 bool = l >= 0
	for yyj445 := 0; ; yyj445++ {
		if yyhl445 {
			if yyj445 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys445Slc = r.DecodeBytes(yys445Slc, true, true)
		yys445 := string(yys445Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys445 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys445)
		} // end switch yys445
	} // end for yyj445
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj449 int
	var yyb449 bool
	var yyhl449 bool = l >= 0
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj449++
		if yyhl449 {
			yyb449 = yyj449 > l
		} else {
			yyb449 = r.CheckBreak()
		}
		if yyb449 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj449-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym453 := z.EncBinary()
		_ = yym453
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep454 := !z.EncBinary()
			yy2arr454 := z.EncBasicHandle().StructToArray
			var yyq454 [4]bool
			_, _, _ = yysep454, yyq454, yy2arr454
			const yyr454 bool = false
			yyq454[0] = x.Kind != ""
			yyq454[1] = x.APIVersion != ""
			yyq454[2] = true
			var yynn454 int
			if yyr454 || yy2arr454 {
				r.EncodeArrayStart(4)
			} else {
				yynn454 = 1
				for _, b := range yyq454 {
					if b {
						yynn454++
					}
				}
				r.EncodeMapStart(yynn454)
				yynn454 = 0
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq454[0] {
					yym456 := z.EncBinary()
					_ = yym456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq454[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym457 := z.EncBinary()
					_ = yym457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq454[1] {
					yym459 := z.EncBinary()
					_ = yym459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq454[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq454[2] {
					yy462 := &x.ListMeta
					yym463 := z.EncBinary()
					_ = yym463
					if false {
					} else if z.HasExtensions() && z.EncExt(yy462) {
					} else {
						z.EncFallback(yy462)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq454[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy464 := &x.ListMeta
					yym465 := z.EncBinary()
					_ = yym465
					if false {
					} else if z.HasExtensions() && z.EncExt(yy464) {
					} else {
						z.EncFallback(yy464)
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym467 := z.EncBinary()
					_ = yym467
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym468 := z.EncBinary()
					_ = yym468
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym469 := z.DecBinary()
	_ = yym469
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct470 := r.ContainerType()
		if yyct470 == codecSelferValueTypeMap1234 {
			yyl470 := r.ReadMapStart()
			if yyl470 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl470, d)
			}
		} else if yyct470 == codecSelferValueTypeArray1234 {
			yyl470 := r.ReadArrayStart()
			if yyl470 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl470, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys471Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys471Slc
	var yyhl471 bool = l >= 0
	for yyj471 := 0; ; yyj471++ {
		if yyhl471 {
			if yyj471 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys471Slc = r.DecodeBytes(yys471Slc, true, true)
		yys471 := string(yys471Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys471 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv474 := &x.ListMeta
				yym475 := z.DecBinary()
				_ = yym475
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv474) {
				} else {
					z.DecFallback(yyv474, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv476 := &x.Items
				yym477 := z.DecBinary()
				_ = yym477
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv476), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys471)
		} // end switch yys471
	} // end for yyj471
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj478 int
	var yyb478 bool
	var yyhl478 bool = l >= 0
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv481 := &x.ListMeta
		yym482 := z.DecBinary()
		_ = yym482
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv481) {
		} else {
			z.DecFallback(yyv481, false)
		}
	}
	yyj478++
	if yyhl478 {
		yyb478 = yyj478 > l
	} else {
		yyb478 = r.CheckBreak()
	}
	if yyb478 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv483 := &x.Items
		yym484 := z.DecBinary()
		_ = yym484
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv483), d)
		}
	}
	for {
		yyj478++
		if yyhl478 {
			yyb478 = yyj478 > l
		} else {
			yyb478 = r.CheckBreak()
		}
		if yyb478 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj478-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym485 := z.EncBinary()
		_ = yym485
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep486 := !z.EncBinary()
			yy2arr486 := z.EncBasicHandle().StructToArray
			var yyq486 [5]bool
			_, _, _ = yysep486, yyq486, yy2arr486
			const yyr486 bool = false
			yyq486[0] = x.Kind != ""
			yyq486[1] = x.APIVersion != ""
			yyq486[2] = true
			yyq486[3] = true
			yyq486[4] = true
			var yynn486 int
			if yyr486 || yy2arr486 {
				r.EncodeArrayStart(5)
			} else {
				yynn486 = 0
				for _, b := range yyq486 {
					if b {
						yynn486++
					}
				}
				r.EncodeMapStart(yynn486)
				yynn486 = 0
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[0] {
					yym488 := z.EncBinary()
					_ = yym488
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq486[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym489 := z.EncBinary()
					_ = yym489
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[1] {
					yym491 := z.EncBinary()
					_ = yym491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq486[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym492 := z.EncBinary()
					_ = yym492
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[2] {
					yy494 := &x.ObjectMeta
					yy494.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq486[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy495 := &x.ObjectMeta
					yy495.CodecEncodeSelf(e)
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[3] {
					yy497 := &x.Spec
					yy497.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq486[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy498 := &x.Spec
					yy498.CodecEncodeSelf(e)
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq486[4] {
					yy500 := &x.Status
					yy500.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq486[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy501 := &x.Status
					yy501.CodecEncodeSelf(e)
				}
			}
			if yyr486 || yy2arr486 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym502 := z.DecBinary()
	_ = yym502
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct503 := r.ContainerType()
		if yyct503 == codecSelferValueTypeMap1234 {
			yyl503 := r.ReadMapStart()
			if yyl503 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl503, d)
			}
		} else if yyct503 == codecSelferValueTypeArray1234 {
			yyl503 := r.ReadArrayStart()
			if yyl503 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl503, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys504Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys504Slc
	var yyhl504 bool = l >= 0
	for yyj504 := 0; ; yyj504++ {
		if yyhl504 {
			if yyj504 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys504Slc = r.DecodeBytes(yys504Slc, true, true)
		yys504 := string(yys504Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys504 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv507 := &x.ObjectMeta
				yyv507.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv508 := &x.Spec
				yyv508.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv509 := &x.Status
				yyv509.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys504)
		} // end switch yys504
	} // end for yyj504
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj510 int
	var yyb510 bool
	var yyhl510 bool = l >= 0
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv513 := &x.ObjectMeta
		yyv513.CodecDecodeSelf(d)
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv514 := &x.Spec
		yyv514.CodecDecodeSelf(d)
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv515 := &x.Status
		yyv515.CodecDecodeSelf(d)
	}
	for {
		yyj510++
		if yyhl510 {
			yyb510 = yyj510 > l
		} else {
			yyb510 = r.CheckBreak()
		}
		if yyb510 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj510-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym516 := z.EncBinary()
		_ = yym516
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep517 := !z.EncBinary()
			yy2arr517 := z.EncBasicHandle().StructToArray
			var yyq517 [4]bool
			_, _, _ = yysep517, yyq517, yy2arr517
			const yyr517 bool = false
			yyq517[0] = x.Kind != ""
			yyq517[1] = x.APIVersion != ""
			yyq517[2] = true
			var yynn517 int
			if yyr517 || yy2arr517 {
				r.EncodeArrayStart(4)
			} else {
				yynn517 = 1
				for _, b := range yyq517 {
					if b {
						yynn517++
					}
				}
				r.EncodeMapStart(yynn517)
				yynn517 = 0
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq517[0] {
					yym519 := z.EncBinary()
					_ = yym519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq517[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym520 := z.EncBinary()
					_ = yym520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq517[1] {
					yym522 := z.EncBinary()
					_ = yym522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq517[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym523 := z.EncBinary()
					_ = yym523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq517[2] {
					yy525 := &x.ListMeta
					yym526 := z.EncBinary()
					_ = yym526
					if false {
					} else if z.HasExtensions() && z.EncExt(yy525) {
					} else {
						z.EncFallback(yy525)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq517[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy527 := &x.ListMeta
					yym528 := z.EncBinary()
					_ = yym528
					if false {
					} else if z.HasExtensions() && z.EncExt(yy527) {
					} else {
						z.EncFallback(yy527)
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym530 := z.EncBinary()
					_ = yym530
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym531 := z.EncBinary()
					_ = yym531
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym532 := z.DecBinary()
	_ = yym532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct533 := r.ContainerType()
		if yyct533 == codecSelferValueTypeMap1234 {
			yyl533 := r.ReadMapStart()
			if yyl533 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl533, d)
			}
		} else if yyct533 == codecSelferValueTypeArray1234 {
			yyl533 := r.ReadArrayStart()
			if yyl533 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl533, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys534Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys534Slc
	var yyhl534 bool = l >= 0
	for yyj534 := 0; ; yyj534++ {
		if yyhl534 {
			if yyj534 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys534Slc = r.DecodeBytes(yys534Slc, true, true)
		yys534 := string(yys534Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys534 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv537 := &x.ListMeta
				yym538 := z.DecBinary()
				_ = yym538
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv537) {
				} else {
					z.DecFallback(yyv537, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv539 := &x.Items
				yym540 := z.DecBinary()
				_ = yym540
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv539), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys534)
		} // end switch yys534
	} // end for yyj534
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj541 int
	var yyb541 bool
	var yyhl541 bool = l >= 0
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv544 := &x.ListMeta
		yym545 := z.DecBinary()
		_ = yym545
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv544) {
		} else {
			z.DecFallback(yyv544, false)
		}
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv546 := &x.Items
		yym547 := z.DecBinary()
		_ = yym547
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv546), d)
		}
	}
	for {
		yyj541++
		if yyhl541 {
			yyb541 = yyj541 > l
		} else {
			yyb541 = r.CheckBreak()
		}
		if yyb541 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj541-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym548 := z.EncBinary()
		_ = yym548
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep549 := !z.EncBinary()
			yy2arr549 := z.EncBasicHandle().StructToArray
			var yyq549 [4]bool
			_, _, _ = yysep549, yyq549, yy2arr549
			const yyr549 bool = false
			yyq549[0] = len(x.AccessModes) != 0
			yyq549[1] = x.Selector != nil
			yyq549[2] = true
			yyq549[3] = x.VolumeName != ""
			var yynn549 int
			if yyr549 || yy2arr549 {
				r.EncodeArrayStart(4)
			} else {
				yynn549 = 0
				for _, b := range yyq549 {
					if b {
						yynn549++
					}
				}
				r.EncodeMapStart(yynn549)
				yynn549 = 0
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym551 := z.EncBinary()
						_ = yym551
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq549[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym552 := z.EncBinary()
						_ = yym552
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym554 := z.EncBinary()
						_ = yym554
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq549[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym555 := z.EncBinary()
						_ = yym555
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[2] {
					yy557 := &x.Resources
					yy557.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq549[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy558 := &x.Resources
					yy558.CodecEncodeSelf(e)
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq549[3] {
					yym560 := z.EncBinary()
					_ = yym560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq549[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym561 := z.EncBinary()
					_ = yym561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr549 || yy2arr549 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym562 := z.DecBinary()
	_ = yym562
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct563 := r.ContainerType()
		if yyct563 == codecSelferValueTypeMap1234 {
			yyl563 := r.ReadMapStart()
			if yyl563 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl563, d)
			}
		} else if yyct563 == codecSelferValueTypeArray1234 {
			yyl563 := r.ReadArrayStart()
			if yyl563 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl563, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys564Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys564Slc
	var yyhl564 bool = l >= 0
	for yyj564 := 0; ; yyj564++ {
		if yyhl564 {
			if yyj564 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys564Slc = r.DecodeBytes(yys564Slc, true, true)
		yys564 := string(yys564Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys564 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv565 := &x.AccessModes
				yym566 := z.DecBinary()
				_ = yym566
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv565), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym568 := z.DecBinary()
				_ = yym568
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv569 := &x.Resources
				yyv569.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys564)
		} // end switch yys564
	} // end for yyj564
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj571 int
	var yyb571 bool
	var yyhl571 bool = l >= 0
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv572 := &x.AccessModes
		yym573 := z.DecBinary()
		_ = yym573
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv572), d)
		}
	}
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym575 := z.DecBinary()
		_ = yym575
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv576 := &x.Resources
		yyv576.CodecDecodeSelf(d)
	}
	yyj571++
	if yyhl571 {
		yyb571 = yyj571 > l
	} else {
		yyb571 = r.CheckBreak()
	}
	if yyb571 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj571++
		if yyhl571 {
			yyb571 = yyj571 > l
		} else {
			yyb571 = r.CheckBreak()
		}
		if yyb571 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj571-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym578 := z.EncBinary()
		_ = yym578
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep579 := !z.EncBinary()
			yy2arr579 := z.EncBasicHandle().StructToArray
			var yyq579 [3]bool
			_, _, _ = yysep579, yyq579, yy2arr579
			const yyr579 bool = false
			yyq579[0] = x.Phase != ""
			yyq579[1] = len(x.AccessModes) != 0
			yyq579[2] = len(x.Capacity) != 0
			var yynn579 int
			if yyr579 || yy2arr579 {
				r.EncodeArrayStart(3)
			} else {
				yynn579 = 0
				for _, b := range yyq579 {
					if b {
						yynn579++
					}
				}
				r.EncodeMapStart(yynn579)
				yynn579 = 0
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq579[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq579[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq579[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym582 := z.EncBinary()
						_ = yym582
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq579[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym583 := z.EncBinary()
						_ = yym583
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq579[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq579[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr579 || yy2arr579 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym585 := z.DecBinary()
	_ = yym585
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct586 := r.ContainerType()
		if yyct586 == codecSelferValueTypeMap1234 {
			yyl586 := r.ReadMapStart()
			if yyl586 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl586, d)
			}
		} else if yyct586 == codecSelferValueTypeArray1234 {
			yyl586 := r.ReadArrayStart()
			if yyl586 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl586, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys587Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys587Slc
	var yyhl587 bool = l >= 0
	for yyj587 := 0; ; yyj587++ {
		if yyhl587 {
			if yyj587 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys587Slc = r.DecodeBytes(yys587Slc, true, true)
		yys587 := string(yys587Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys587 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv589 := &x.AccessModes
				yym590 := z.DecBinary()
				_ = yym590
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv589), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv591 := &x.Capacity
				yyv591.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys587)
		} // end switch yys587
	} // end for yyj587
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj592 int
	var yyb592 bool
	var yyhl592 bool = l >= 0
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv594 := &x.AccessModes
		yym595 := z.DecBinary()
		_ = yym595
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv594), d)
		}
	}
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv596 := &x.Capacity
		yyv596.CodecDecodeSelf(d)
	}
	for {
		yyj592++
		if yyhl592 {
			yyb592 = yyj592 > l
		} else {
			yyb592 = r.CheckBreak()
		}
		if yyb592 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj592-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym597 := z.EncBinary()
	_ = yym597
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym598 := z.DecBinary()
	_ = yym598
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym599 := z.EncBinary()
	_ = yym599
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym600 := z.DecBinary()
	_ = yym600
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym601 := z.EncBinary()
	_ = yym601
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym602 := z.DecBinary()
	_ = yym602
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym603 := z.EncBinary()
		_ = yym603
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep604 := !z.EncBinary()
			yy2arr604 := z.EncBasicHandle().StructToArray
			var yyq604 [1]bool
			_, _, _ = yysep604, yyq604, yy2arr604
			const yyr604 bool = false
			var yynn604 int
			if yyr604 || yy2arr604 {
				r.EncodeArrayStart(1)
			} else {
				yynn604 = 1
				for _, b := range yyq604 {
					if b {
						yynn604++
					}
				}
				r.EncodeMapStart(yynn604)
				yynn604 = 0
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym606 := z.EncBinary()
				_ = yym606
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym607 := z.EncBinary()
				_ = yym607
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr604 || yy2arr604 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym608 := z.DecBinary()
	_ = yym608
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct609 := r.ContainerType()
		if yyct609 == codecSelferValueTypeMap1234 {
			yyl609 := r.ReadMapStart()
			if yyl609 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl609, d)
			}
		} else if yyct609 == codecSelferValueTypeArray1234 {
			yyl609 := r.ReadArrayStart()
			if yyl609 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl609, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys610Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys610Slc
	var yyhl610 bool = l >= 0
	for yyj610 := 0; ; yyj610++ {
		if yyhl610 {
			if yyj610 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys610Slc = r.DecodeBytes(yys610Slc, true, true)
		yys610 := string(yys610Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys610 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys610)
		} // end switch yys610
	} // end for yyj610
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj612 int
	var yyb612 bool
	var yyhl612 bool = l >= 0
	yyj612++
	if yyhl612 {
		yyb612 = yyj612 > l
	} else {
		yyb612 = r.CheckBreak()
	}
	if yyb612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj612++
		if yyhl612 {
			yyb612 = yyj612 > l
		} else {
			yyb612 = r.CheckBreak()
		}
		if yyb612 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj612-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym614 := z.EncBinary()
		_ = yym614
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep615 := !z.EncBinary()
			yy2arr615 := z.EncBasicHandle().StructToArray
			var yyq615 [1]bool
			_, _, _ = yysep615, yyq615, yy2arr615
			const yyr615 bool = false
			yyq615[0] = x.Medium != ""
			var yynn615 int
			if yyr615 || yy2arr615 {
				r.EncodeArrayStart(1)
			} else {
				yynn615 = 0
				for _, b := range yyq615 {
					if b {
						yynn615++
					}
				}
				r.EncodeMapStart(yynn615)
				yynn615 = 0
			}
			if yyr615 || yy2arr615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq615[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq615[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr615 || yy2arr615 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym617 := z.DecBinary()
	_ = yym617
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct618 := r.ContainerType()
		if yyct618 == codecSelferValueTypeMap1234 {
			yyl618 := r.ReadMapStart()
			if yyl618 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl618, d)
			}
		} else if yyct618 == codecSelferValueTypeArray1234 {
			yyl618 := r.ReadArrayStart()
			if yyl618 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl618, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys619Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys619Slc
	var yyhl619 bool = l >= 0
	for yyj619 := 0; ; yyj619++ {
		if yyhl619 {
			if yyj619 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys619Slc = r.DecodeBytes(yys619Slc, true, true)
		yys619 := string(yys619Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys619 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys619)
		} // end switch yys619
	} // end for yyj619
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj621 int
	var yyb621 bool
	var yyhl621 bool = l >= 0
	yyj621++
	if yyhl621 {
		yyb621 = yyj621 > l
	} else {
		yyb621 = r.CheckBreak()
	}
	if yyb621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj621++
		if yyhl621 {
			yyb621 = yyj621 > l
		} else {
			yyb621 = r.CheckBreak()
		}
		if yyb621 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj621-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym623 := z.EncBinary()
	_ = yym623
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym624 := z.DecBinary()
	_ = yym624
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym625 := z.EncBinary()
	_ = yym625
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym626 := z.DecBinary()
	_ = yym626
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym627 := z.EncBinary()
		_ = yym627
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep628 := !z.EncBinary()
			yy2arr628 := z.EncBasicHandle().StructToArray
			var yyq628 [4]bool
			_, _, _ = yysep628, yyq628, yy2arr628
			const yyr628 bool = false
			yyq628[1] = x.FSType != ""
			yyq628[2] = x.Partition != 0
			yyq628[3] = x.ReadOnly != false
			var yynn628 int
			if yyr628 || yy2arr628 {
				r.EncodeArrayStart(4)
			} else {
				yynn628 = 1
				for _, b := range yyq628 {
					if b {
						yynn628++
					}
				}
				r.EncodeMapStart(yynn628)
				yynn628 = 0
			}
			if yyr628 || yy2arr628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym630 := z.EncBinary()
				_ = yym630
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym631 := z.EncBinary()
				_ = yym631
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr628 || yy2arr628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq628[1] {
					yym633 := z.EncBinary()
					_ = yym633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq628[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym634 := z.EncBinary()
					_ = yym634
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr628 || yy2arr628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq628[2] {
					yym636 := z.EncBinary()
					_ = yym636
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq628[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym637 := z.EncBinary()
					_ = yym637
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr628 || yy2arr628 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq628[3] {
					yym639 := z.EncBinary()
					_ = yym639
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq628[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym640 := z.EncBinary()
					_ = yym640
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr628 || yy2arr628 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym641 := z.DecBinary()
	_ = yym641
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct642 := r.ContainerType()
		if yyct642 == codecSelferValueTypeMap1234 {
			yyl642 := r.ReadMapStart()
			if yyl642 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl642, d)
			}
		} else if yyct642 == codecSelferValueTypeArray1234 {
			yyl642 := r.ReadArrayStart()
			if yyl642 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl642, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys643Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys643Slc
	var yyhl643 bool = l >= 0
	for yyj643 := 0; ; yyj643++ {
		if yyhl643 {
			if yyj643 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys643Slc = r.DecodeBytes(yys643Slc, true, true)
		yys643 := string(yys643Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys643 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys643)
		} // end switch yys643
	} // end for yyj643
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj648 int
	var yyb648 bool
	var yyhl648 bool = l >= 0
	yyj648++
	if yyhl648 {
		yyb648 = yyj648 > l
	} else {
		yyb648 = r.CheckBreak()
	}
	if yyb648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj648++
	if yyhl648 {
		yyb648 = yyj648 > l
	} else {
		yyb648 = r.CheckBreak()
	}
	if yyb648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj648++
	if yyhl648 {
		yyb648 = yyj648 > l
	} else {
		yyb648 = r.CheckBreak()
	}
	if yyb648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj648++
	if yyhl648 {
		yyb648 = yyj648 > l
	} else {
		yyb648 = r.CheckBreak()
	}
	if yyb648 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj648++
		if yyhl648 {
			yyb648 = yyj648 > l
		} else {
			yyb648 = r.CheckBreak()
		}
		if yyb648 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj648-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym653 := z.EncBinary()
		_ = yym653
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep654 := !z.EncBinary()
			yy2arr654 := z.EncBasicHandle().StructToArray
			var yyq654 [6]bool
			_, _, _ = yysep654, yyq654, yy2arr654
			const yyr654 bool = false
			yyq654[0] = x.TargetPortal != ""
			yyq654[1] = x.IQN != ""
			yyq654[2] = x.Lun != 0
			yyq654[3] = x.ISCSIInterface != ""
			yyq654[4] = x.FSType != ""
			yyq654[5] = x.ReadOnly != false
			var yynn654 int
			if yyr654 || yy2arr654 {
				r.EncodeArrayStart(6)
			} else {
				yynn654 = 0
				for _, b := range yyq654 {
					if b {
						yynn654++
					}
				}
				r.EncodeMapStart(yynn654)
				yynn654 = 0
			}
			if yyr654 || yy2arr654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq654[0] {
					yym656 := z.EncBinary()
					_ = yym656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq654[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym657 := z.EncBinary()
					_ = yym657
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr654 || yy2arr654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq654[1] {
					yym659 := z.EncBinary()
					_ = yym659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq654[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym660 := z.EncBinary()
					_ = yym660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr654 || yy2arr654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq654[2] {
					yym662 := z.EncBinary()
					_ = yym662
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq654[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr654 || yy2arr654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq654[3] {
					yym665 := z.EncBinary()
					_ = yym665
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq654[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr654 || yy2arr654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq654[4] {
					yym668 := z.EncBinary()
					_ = yym668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq654[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym669 := z.EncBinary()
					_ = yym669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr654 || yy2arr654 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq654[5] {
					yym671 := z.EncBinary()
					_ = yym671
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq654[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr654 || yy2arr654 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym673 := z.DecBinary()
	_ = yym673
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct674 := r.ContainerType()
		if yyct674 == codecSelferValueTypeMap1234 {
			yyl674 := r.ReadMapStart()
			if yyl674 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl674, d)
			}
		} else if yyct674 == codecSelferValueTypeArray1234 {
			yyl674 := r.ReadArrayStart()
			if yyl674 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl674, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys675Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys675Slc
	var yyhl675 bool = l >= 0
	for yyj675 := 0; ; yyj675++ {
		if yyhl675 {
			if yyj675 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys675Slc = r.DecodeBytes(yys675Slc, true, true)
		yys675 := string(yys675Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys675 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys675)
		} // end switch yys675
	} // end for yyj675
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj682 int
	var yyb682 bool
	var yyhl682 bool = l >= 0
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj682++
		if yyhl682 {
			yyb682 = yyj682 > l
		} else {
			yyb682 = r.CheckBreak()
		}
		if yyb682 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj682-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym689 := z.EncBinary()
		_ = yym689
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep690 := !z.EncBinary()
			yy2arr690 := z.EncBasicHandle().StructToArray
			var yyq690 [4]bool
			_, _, _ = yysep690, yyq690, yy2arr690
			const yyr690 bool = false
			yyq690[2] = x.FSType != ""
			yyq690[3] = x.ReadOnly != false
			var yynn690 int
			if yyr690 || yy2arr690 {
				r.EncodeArrayStart(4)
			} else {
				yynn690 = 2
				for _, b := range yyq690 {
					if b {
						yynn690++
					}
				}
				r.EncodeMapStart(yynn690)
				yynn690 = 0
			}
			if yyr690 || yy2arr690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym692 := z.EncBinary()
					_ = yym692
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym693 := z.EncBinary()
					_ = yym693
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr690 || yy2arr690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy695 := *x.Lun
					yym696 := z.EncBinary()
					_ = yym696
					if false {
					} else {
						r.EncodeInt(int64(yy695))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy697 := *x.Lun
					yym698 := z.EncBinary()
					_ = yym698
					if false {
					} else {
						r.EncodeInt(int64(yy697))
					}
				}
			}
			if yyr690 || yy2arr690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq690[2] {
					yym700 := z.EncBinary()
					_ = yym700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq690[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym701 := z.EncBinary()
					_ = yym701
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr690 || yy2arr690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq690[3] {
					yym703 := z.EncBinary()
					_ = yym703
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq690[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym704 := z.EncBinary()
					_ = yym704
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr690 || yy2arr690 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym705 := z.DecBinary()
	_ = yym705
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct706 := r.ContainerType()
		if yyct706 == codecSelferValueTypeMap1234 {
			yyl706 := r.ReadMapStart()
			if yyl706 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl706, d)
			}
		} else if yyct706 == codecSelferValueTypeArray1234 {
			yyl706 := r.ReadArrayStart()
			if yyl706 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl706, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys707Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys707Slc
	var yyhl707 bool = l >= 0
	for yyj707 := 0; ; yyj707++ {
		if yyhl707 {
			if yyj707 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys707Slc = r.DecodeBytes(yys707Slc, true, true)
		yys707 := string(yys707Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys707 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv708 := &x.TargetWWNs
				yym709 := z.DecBinary()
				_ = yym709
				if false {
				} else {
					z.F.DecSliceStringX(yyv708, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym711 := z.DecBinary()
				_ = yym711
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys707)
		} // end switch yys707
	} // end for yyj707
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj714 int
	var yyb714 bool
	var yyhl714 bool = l >= 0
	yyj714++
	if yyhl714 {
		yyb714 = yyj714 > l
	} else {
		yyb714 = r.CheckBreak()
	}
	if yyb714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv715 := &x.TargetWWNs
		yym716 := z.DecBinary()
		_ = yym716
		if false {
		} else {
			z.F.DecSliceStringX(yyv715, false, d)
		}
	}
	yyj714++
	if yyhl714 {
		yyb714 = yyj714 > l
	} else {
		yyb714 = r.CheckBreak()
	}
	if yyb714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym718 := z.DecBinary()
		_ = yym718
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj714++
	if yyhl714 {
		yyb714 = yyj714 > l
	} else {
		yyb714 = r.CheckBreak()
	}
	if yyb714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj714++
	if yyhl714 {
		yyb714 = yyj714 > l
	} else {
		yyb714 = r.CheckBreak()
	}
	if yyb714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj714++
		if yyhl714 {
			yyb714 = yyj714 > l
		} else {
			yyb714 = r.CheckBreak()
		}
		if yyb714 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj714-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym721 := z.EncBinary()
		_ = yym721
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep722 := !z.EncBinary()
			yy2arr722 := z.EncBasicHandle().StructToArray
			var yyq722 [5]bool
			_, _, _ = yysep722, yyq722, yy2arr722
			const yyr722 bool = false
			yyq722[1] = x.FSType != ""
			yyq722[2] = x.SecretRef != nil
			yyq722[3] = x.ReadOnly != false
			yyq722[4] = len(x.Options) != 0
			var yynn722 int
			if yyr722 || yy2arr722 {
				r.EncodeArrayStart(5)
			} else {
				yynn722 = 1
				for _, b := range yyq722 {
					if b {
						yynn722++
					}
				}
				r.EncodeMapStart(yynn722)
				yynn722 = 0
			}
			if yyr722 || yy2arr722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr722 || yy2arr722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq722[1] {
					yym727 := z.EncBinary()
					_ = yym727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq722[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym728 := z.EncBinary()
					_ = yym728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr722 || yy2arr722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq722[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq722[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr722 || yy2arr722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq722[3] {
					yym731 := z.EncBinary()
					_ = yym731
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq722[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym732 := z.EncBinary()
					_ = yym732
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr722 || yy2arr722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq722[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym734 := z.EncBinary()
						_ = yym734
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq722[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym735 := z.EncBinary()
						_ = yym735
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr722 || yy2arr722 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym736 := z.DecBinary()
	_ = yym736
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct737 := r.ContainerType()
		if yyct737 == codecSelferValueTypeMap1234 {
			yyl737 := r.ReadMapStart()
			if yyl737 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl737, d)
			}
		} else if yyct737 == codecSelferValueTypeArray1234 {
			yyl737 := r.ReadArrayStart()
			if yyl737 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl737, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys738Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys738Slc
	var yyhl738 bool = l >= 0
	for yyj738 := 0; ; yyj738++ {
		if yyhl738 {
			if yyj738 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys738Slc = r.DecodeBytes(yys738Slc, true, true)
		yys738 := string(yys738Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys738 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv743 := &x.Options
				yym744 := z.DecBinary()
				_ = yym744
				if false {
				} else {
					z.F.DecMapStringStringX(yyv743, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys738)
		} // end switch yys738
	} // end for yyj738
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj745 int
	var yyb745 bool
	var yyhl745 bool = l >= 0
	yyj745++
	if yyhl745 {
		yyb745 = yyj745 > l
	} else {
		yyb745 = r.CheckBreak()
	}
	if yyb745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj745++
	if yyhl745 {
		yyb745 = yyj745 > l
	} else {
		yyb745 = r.CheckBreak()
	}
	if yyb745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj745++
	if yyhl745 {
		yyb745 = yyj745 > l
	} else {
		yyb745 = r.CheckBreak()
	}
	if yyb745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj745++
	if yyhl745 {
		yyb745 = yyj745 > l
	} else {
		yyb745 = r.CheckBreak()
	}
	if yyb745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj745++
	if yyhl745 {
		yyb745 = yyj745 > l
	} else {
		yyb745 = r.CheckBreak()
	}
	if yyb745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv750 := &x.Options
		yym751 := z.DecBinary()
		_ = yym751
		if false {
		} else {
			z.F.DecMapStringStringX(yyv750, false, d)
		}
	}
	for {
		yyj745++
		if yyhl745 {
			yyb745 = yyj745 > l
		} else {
			yyb745 = r.CheckBreak()
		}
		if yyb745 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj745-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym752 := z.EncBinary()
		_ = yym752
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep753 := !z.EncBinary()
			yy2arr753 := z.EncBasicHandle().StructToArray
			var yyq753 [4]bool
			_, _, _ = yysep753, yyq753, yy2arr753
			const yyr753 bool = false
			yyq753[1] = x.FSType != ""
			yyq753[2] = x.Partition != 0
			yyq753[3] = x.ReadOnly != false
			var yynn753 int
			if yyr753 || yy2arr753 {
				r.EncodeArrayStart(4)
			} else {
				yynn753 = 1
				for _, b := range yyq753 {
					if b {
						yynn753++
					}
				}
				r.EncodeMapStart(yynn753)
				yynn753 = 0
			}
			if yyr753 || yy2arr753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym755 := z.EncBinary()
				_ = yym755
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym756 := z.EncBinary()
				_ = yym756
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr753 || yy2arr753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq753[1] {
					yym758 := z.EncBinary()
					_ = yym758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq753[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym759 := z.EncBinary()
					_ = yym759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr753 || yy2arr753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq753[2] {
					yym761 := z.EncBinary()
					_ = yym761
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq753[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym762 := z.EncBinary()
					_ = yym762
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr753 || yy2arr753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq753[3] {
					yym764 := z.EncBinary()
					_ = yym764
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq753[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym765 := z.EncBinary()
					_ = yym765
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr753 || yy2arr753 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym766 := z.DecBinary()
	_ = yym766
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct767 := r.ContainerType()
		if yyct767 == codecSelferValueTypeMap1234 {
			yyl767 := r.ReadMapStart()
			if yyl767 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl767, d)
			}
		} else if yyct767 == codecSelferValueTypeArray1234 {
			yyl767 := r.ReadArrayStart()
			if yyl767 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl767, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys768Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys768Slc
	var yyhl768 bool = l >= 0
	for yyj768 := 0; ; yyj768++ {
		if yyhl768 {
			if yyj768 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys768Slc = r.DecodeBytes(yys768Slc, true, true)
		yys768 := string(yys768Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys768 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys768)
		} // end switch yys768
	} // end for yyj768
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj773 int
	var yyb773 bool
	var yyhl773 bool = l >= 0
	yyj773++
	if yyhl773 {
		yyb773 = yyj773 > l
	} else {
		yyb773 = r.CheckBreak()
	}
	if yyb773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj773++
	if yyhl773 {
		yyb773 = yyj773 > l
	} else {
		yyb773 = r.CheckBreak()
	}
	if yyb773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj773++
	if yyhl773 {
		yyb773 = yyj773 > l
	} else {
		yyb773 = r.CheckBreak()
	}
	if yyb773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj773++
	if yyhl773 {
		yyb773 = yyj773 > l
	} else {
		yyb773 = r.CheckBreak()
	}
	if yyb773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj773++
		if yyhl773 {
			yyb773 = yyj773 > l
		} else {
			yyb773 = r.CheckBreak()
		}
		if yyb773 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj773-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym778 := z.EncBinary()
		_ = yym778
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep779 := !z.EncBinary()
			yy2arr779 := z.EncBasicHandle().StructToArray
			var yyq779 [3]bool
			_, _, _ = yysep779, yyq779, yy2arr779
			const yyr779 bool = false
			yyq779[1] = x.Revision != ""
			yyq779[2] = x.Directory != ""
			var yynn779 int
			if yyr779 || yy2arr779 {
				r.EncodeArrayStart(3)
			} else {
				yynn779 = 1
				for _, b := range yyq779 {
					if b {
						yynn779++
					}
				}
				r.EncodeMapStart(yynn779)
				yynn779 = 0
			}
			if yyr779 || yy2arr779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym781 := z.EncBinary()
				_ = yym781
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym782 := z.EncBinary()
				_ = yym782
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr779 || yy2arr779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq779[1] {
					yym784 := z.EncBinary()
					_ = yym784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq779[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym785 := z.EncBinary()
					_ = yym785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr779 || yy2arr779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq779[2] {
					yym787 := z.EncBinary()
					_ = yym787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq779[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr779 || yy2arr779 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym789 := z.DecBinary()
	_ = yym789
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct790 := r.ContainerType()
		if yyct790 == codecSelferValueTypeMap1234 {
			yyl790 := r.ReadMapStart()
			if yyl790 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl790, d)
			}
		} else if yyct790 == codecSelferValueTypeArray1234 {
			yyl790 := r.ReadArrayStart()
			if yyl790 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl790, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys791Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys791Slc
	var yyhl791 bool = l >= 0
	for yyj791 := 0; ; yyj791++ {
		if yyhl791 {
			if yyj791 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys791Slc = r.DecodeBytes(yys791Slc, true, true)
		yys791 := string(yys791Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys791 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys791)
		} // end switch yys791
	} // end for yyj791
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj795 int
	var yyb795 bool
	var yyhl795 bool = l >= 0
	yyj795++
	if yyhl795 {
		yyb795 = yyj795 > l
	} else {
		yyb795 = r.CheckBreak()
	}
	if yyb795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj795++
	if yyhl795 {
		yyb795 = yyj795 > l
	} else {
		yyb795 = r.CheckBreak()
	}
	if yyb795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj795++
	if yyhl795 {
		yyb795 = yyj795 > l
	} else {
		yyb795 = r.CheckBreak()
	}
	if yyb795 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj795++
		if yyhl795 {
			yyb795 = yyj795 > l
		} else {
			yyb795 = r.CheckBreak()
		}
		if yyb795 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj795-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym799 := z.EncBinary()
		_ = yym799
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep800 := !z.EncBinary()
			yy2arr800 := z.EncBasicHandle().StructToArray
			var yyq800 [3]bool
			_, _, _ = yysep800, yyq800, yy2arr800
			const yyr800 bool = false
			yyq800[0] = x.SecretName != ""
			yyq800[1] = len(x.Items) != 0
			yyq800[2] = x.DefaultMode != nil
			var yynn800 int
			if yyr800 || yy2arr800 {
				r.EncodeArrayStart(3)
			} else {
				yynn800 = 0
				for _, b := range yyq800 {
					if b {
						yynn800++
					}
				}
				r.EncodeMapStart(yynn800)
				yynn800 = 0
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq800[0] {
					yym802 := z.EncBinary()
					_ = yym802
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq800[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym803 := z.EncBinary()
					_ = yym803
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq800[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym805 := z.EncBinary()
						_ = yym805
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq800[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym806 := z.EncBinary()
						_ = yym806
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq800[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy808 := *x.DefaultMode
						yym809 := z.EncBinary()
						_ = yym809
						if false {
						} else {
							r.EncodeInt(int64(yy808))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq800[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy810 := *x.DefaultMode
						yym811 := z.EncBinary()
						_ = yym811
						if false {
						} else {
							r.EncodeInt(int64(yy810))
						}
					}
				}
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym812 := z.DecBinary()
	_ = yym812
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct813 := r.ContainerType()
		if yyct813 == codecSelferValueTypeMap1234 {
			yyl813 := r.ReadMapStart()
			if yyl813 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl813, d)
			}
		} else if yyct813 == codecSelferValueTypeArray1234 {
			yyl813 := r.ReadArrayStart()
			if yyl813 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl813, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys814Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys814Slc
	var yyhl814 bool = l >= 0
	for yyj814 := 0; ; yyj814++ {
		if yyhl814 {
			if yyj814 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys814Slc = r.DecodeBytes(yys814Slc, true, true)
		yys814 := string(yys814Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys814 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv816 := &x.Items
				yym817 := z.DecBinary()
				_ = yym817
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv816), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym819 := z.DecBinary()
				_ = yym819
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys814)
		} // end switch yys814
	} // end for yyj814
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj820 int
	var yyb820 bool
	var yyhl820 bool = l >= 0
	yyj820++
	if yyhl820 {
		yyb820 = yyj820 > l
	} else {
		yyb820 = r.CheckBreak()
	}
	if yyb820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj820++
	if yyhl820 {
		yyb820 = yyj820 > l
	} else {
		yyb820 = r.CheckBreak()
	}
	if yyb820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv822 := &x.Items
		yym823 := z.DecBinary()
		_ = yym823
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv822), d)
		}
	}
	yyj820++
	if yyhl820 {
		yyb820 = yyj820 > l
	} else {
		yyb820 = r.CheckBreak()
	}
	if yyb820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym825 := z.DecBinary()
		_ = yym825
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj820++
		if yyhl820 {
			yyb820 = yyj820 > l
		} else {
			yyb820 = r.CheckBreak()
		}
		if yyb820 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj820-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym826 := z.EncBinary()
		_ = yym826
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep827 := !z.EncBinary()
			yy2arr827 := z.EncBasicHandle().StructToArray
			var yyq827 [3]bool
			_, _, _ = yysep827, yyq827, yy2arr827
			const yyr827 bool = false
			yyq827[2] = x.ReadOnly != false
			var yynn827 int
			if yyr827 || yy2arr827 {
				r.EncodeArrayStart(3)
			} else {
				yynn827 = 2
				for _, b := range yyq827 {
					if b {
						yynn827++
					}
				}
				r.EncodeMapStart(yynn827)
				yynn827 = 0
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym829 := z.EncBinary()
				_ = yym829
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym830 := z.EncBinary()
				_ = yym830
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym832 := z.EncBinary()
				_ = yym832
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym833 := z.EncBinary()
				_ = yym833
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq827[2] {
					yym835 := z.EncBinary()
					_ = yym835
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq827[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym836 := z.EncBinary()
					_ = yym836
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym837 := z.DecBinary()
	_ = yym837
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct838 := r.ContainerType()
		if yyct838 == codecSelferValueTypeMap1234 {
			yyl838 := r.ReadMapStart()
			if yyl838 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl838, d)
			}
		} else if yyct838 == codecSelferValueTypeArray1234 {
			yyl838 := r.ReadArrayStart()
			if yyl838 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl838, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys839Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys839Slc
	var yyhl839 bool = l >= 0
	for yyj839 := 0; ; yyj839++ {
		if yyhl839 {
			if yyj839 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys839Slc = r.DecodeBytes(yys839Slc, true, true)
		yys839 := string(yys839Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys839 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys839)
		} // end switch yys839
	} // end for yyj839
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj843 int
	var yyb843 bool
	var yyhl843 bool = l >= 0
	yyj843++
	if yyhl843 {
		yyb843 = yyj843 > l
	} else {
		yyb843 = r.CheckBreak()
	}
	if yyb843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj843++
	if yyhl843 {
		yyb843 = yyj843 > l
	} else {
		yyb843 = r.CheckBreak()
	}
	if yyb843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj843++
	if yyhl843 {
		yyb843 = yyj843 > l
	} else {
		yyb843 = r.CheckBreak()
	}
	if yyb843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj843++
		if yyhl843 {
			yyb843 = yyj843 > l
		} else {
			yyb843 = r.CheckBreak()
		}
		if yyb843 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj843-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *QuobyteVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym847 := z.EncBinary()
		_ = yym847
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep848 := !z.EncBinary()
			yy2arr848 := z.EncBasicHandle().StructToArray
			var yyq848 [5]bool
			_, _, _ = yysep848, yyq848, yy2arr848
			const yyr848 bool = false
			yyq848[2] = x.ReadOnly != false
			yyq848[3] = x.User != ""
			yyq848[4] = x.Group != ""
			var yynn848 int
			if yyr848 || yy2arr848 {
				r.EncodeArrayStart(5)
			} else {
				yynn848 = 2
				for _, b := range yyq848 {
					if b {
						yynn848++
					}
				}
				r.EncodeMapStart(yynn848)
				yynn848 = 0
			}
			if yyr848 || yy2arr848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym850 := z.EncBinary()
				_ = yym850
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("registry"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym851 := z.EncBinary()
				_ = yym851
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			}
			if yyr848 || yy2arr848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym853 := z.EncBinary()
				_ = yym853
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volume"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym854 := z.EncBinary()
				_ = yym854
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			}
			if yyr848 || yy2arr848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq848[2] {
					yym856 := z.EncBinary()
					_ = yym856
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq848[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym857 := z.EncBinary()
					_ = yym857
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr848 || yy2arr848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq848[3] {
					yym859 := z.EncBinary()
					_ = yym859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq848[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym860 := z.EncBinary()
					_ = yym860
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr848 || yy2arr848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq848[4] {
					yym862 := z.EncBinary()
					_ = yym862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq848[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym863 := z.EncBinary()
					_ = yym863
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				}
			}
			if yyr848 || yy2arr848 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *QuobyteVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym864 := z.DecBinary()
	_ = yym864
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct865 := r.ContainerType()
		if yyct865 == codecSelferValueTypeMap1234 {
			yyl865 := r.ReadMapStart()
			if yyl865 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl865, d)
			}
		} else if yyct865 == codecSelferValueTypeArray1234 {
			yyl865 := r.ReadArrayStart()
			if yyl865 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl865, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys866Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys866Slc
	var yyhl866 bool = l >= 0
	for yyj866 := 0; ; yyj866++ {
		if yyhl866 {
			if yyj866 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys866Slc = r.DecodeBytes(yys866Slc, true, true)
		yys866 := string(yys866Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys866 {
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = string(r.DecodeString())
			}
		case "volume":
			if r.TryDecodeAsNil() {
				x.Volume = ""
			} else {
				x.Volume = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				x.Group = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys866)
		} // end switch yys866
	} // end for yyj866
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj872 int
	var yyb872 bool
	var yyhl872 bool = l >= 0
	yyj872++
	if yyhl872 {
		yyb872 = yyj872 > l
	} else {
		yyb872 = r.CheckBreak()
	}
	if yyb872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = string(r.DecodeString())
	}
	yyj872++
	if yyhl872 {
		yyb872 = yyj872 > l
	} else {
		yyb872 = r.CheckBreak()
	}
	if yyb872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volume = ""
	} else {
		x.Volume = string(r.DecodeString())
	}
	yyj872++
	if yyhl872 {
		yyb872 = yyj872 > l
	} else {
		yyb872 = r.CheckBreak()
	}
	if yyb872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj872++
	if yyhl872 {
		yyb872 = yyj872 > l
	} else {
		yyb872 = r.CheckBreak()
	}
	if yyb872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj872++
	if yyhl872 {
		yyb872 = yyj872 > l
	} else {
		yyb872 = r.CheckBreak()
	}
	if yyb872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		x.Group = string(r.DecodeString())
	}
	for {
		yyj872++
		if yyhl872 {
			yyb872 = yyj872 > l
		} else {
			yyb872 = r.CheckBreak()
		}
		if yyb872 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj872-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym878 := z.EncBinary()
		_ = yym878
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep879 := !z.EncBinary()
			yy2arr879 := z.EncBasicHandle().StructToArray
			var yyq879 [3]bool
			_, _, _ = yysep879, yyq879, yy2arr879
			const yyr879 bool = false
			yyq879[2] = x.ReadOnly != false
			var yynn879 int
			if yyr879 || yy2arr879 {
				r.EncodeArrayStart(3)
			} else {
				yynn879 = 2
				for _, b := range yyq879 {
					if b {
						yynn879++
					}
				}
				r.EncodeMapStart(yynn879)
				yynn879 = 0
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym881 := z.EncBinary()
				_ = yym881
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym882 := z.EncBinary()
				_ = yym882
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym884 := z.EncBinary()
				_ = yym884
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym885 := z.EncBinary()
				_ = yym885
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq879[2] {
					yym887 := z.EncBinary()
					_ = yym887
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq879[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym888 := z.EncBinary()
					_ = yym888
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym889 := z.DecBinary()
	_ = yym889
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct890 := r.ContainerType()
		if yyct890 == codecSelferValueTypeMap1234 {
			yyl890 := r.ReadMapStart()
			if yyl890 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl890, d)
			}
		} else if yyct890 == codecSelferValueTypeArray1234 {
			yyl890 := r.ReadArrayStart()
			if yyl890 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl890, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys891Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys891Slc
	var yyhl891 bool = l >= 0
	for yyj891 := 0; ; yyj891++ {
		if yyhl891 {
			if yyj891 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys891Slc = r.DecodeBytes(yys891Slc, true, true)
		yys891 := string(yys891Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys891 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys891)
		} // end switch yys891
	} // end for yyj891
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj895 int
	var yyb895 bool
	var yyhl895 bool = l >= 0
	yyj895++
	if yyhl895 {
		yyb895 = yyj895 > l
	} else {
		yyb895 = r.CheckBreak()
	}
	if yyb895 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj895++
	if yyhl895 {
		yyb895 = yyj895 > l
	} else {
		yyb895 = r.CheckBreak()
	}
	if yyb895 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj895++
	if yyhl895 {
		yyb895 = yyj895 > l
	} else {
		yyb895 = r.CheckBreak()
	}
	if yyb895 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj895++
		if yyhl895 {
			yyb895 = yyj895 > l
		} else {
			yyb895 = r.CheckBreak()
		}
		if yyb895 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj895-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym899 := z.EncBinary()
		_ = yym899
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep900 := !z.EncBinary()
			yy2arr900 := z.EncBasicHandle().StructToArray
			var yyq900 [8]bool
			_, _, _ = yysep900, yyq900, yy2arr900
			const yyr900 bool = false
			yyq900[2] = x.FSType != ""
			yyq900[3] = x.RBDPool != ""
			yyq900[4] = x.RadosUser != ""
			yyq900[5] = x.Keyring != ""
			yyq900[6] = x.SecretRef != nil
			yyq900[7] = x.ReadOnly != false
			var yynn900 int
			if yyr900 || yy2arr900 {
				r.EncodeArrayStart(8)
			} else {
				yynn900 = 2
				for _, b := range yyq900 {
					if b {
						yynn900++
					}
				}
				r.EncodeMapStart(yynn900)
				yynn900 = 0
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym902 := z.EncBinary()
					_ = yym902
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym903 := z.EncBinary()
					_ = yym903
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym905 := z.EncBinary()
				_ = yym905
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym906 := z.EncBinary()
				_ = yym906
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq900[2] {
					yym908 := z.EncBinary()
					_ = yym908
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq900[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym909 := z.EncBinary()
					_ = yym909
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq900[3] {
					yym911 := z.EncBinary()
					_ = yym911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq900[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym912 := z.EncBinary()
					_ = yym912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq900[4] {
					yym914 := z.EncBinary()
					_ = yym914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq900[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym915 := z.EncBinary()
					_ = yym915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq900[5] {
					yym917 := z.EncBinary()
					_ = yym917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq900[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym918 := z.EncBinary()
					_ = yym918
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq900[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq900[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq900[7] {
					yym921 := z.EncBinary()
					_ = yym921
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq900[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym922 := z.EncBinary()
					_ = yym922
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym923 := z.DecBinary()
	_ = yym923
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct924 := r.ContainerType()
		if yyct924 == codecSelferValueTypeMap1234 {
			yyl924 := r.ReadMapStart()
			if yyl924 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl924, d)
			}
		} else if yyct924 == codecSelferValueTypeArray1234 {
			yyl924 := r.ReadArrayStart()
			if yyl924 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl924, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys925Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys925Slc
	var yyhl925 bool = l >= 0
	for yyj925 := 0; ; yyj925++ {
		if yyhl925 {
			if yyj925 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys925Slc = r.DecodeBytes(yys925Slc, true, true)
		yys925 := string(yys925Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys925 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv926 := &x.CephMonitors
				yym927 := z.DecBinary()
				_ = yym927
				if false {
				} else {
					z.F.DecSliceStringX(yyv926, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys925)
		} // end switch yys925
	} // end for yyj925
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj935 int
	var yyb935 bool
	var yyhl935 bool = l >= 0
	yyj935++
	if yyhl935 {
		yyb935 = yyj935 > l
	} else {
		yyb935 = r.CheckBreak()
	}
	if yyb935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv936 := &x.CephMonitors
		yym937 := z.DecBinary()
		_ = yym937
		if false {
		} else {
			z.F.DecSliceStringX(yyv936, false, d)
		}
	}
	yyj935++
	if yyhl935 {
		yyb935 = yyj935 > l
	} else {
		yyb935 = r.CheckBreak()
	}
	if yyb935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj935++
	if yyhl935 {
		yyb935 = yyj935 > l
	} else {
		yyb935 = r.CheckBreak()
	}
	if yyb935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj935++
	if yyhl935 {
		yyb935 = yyj935 > l
	} else {
		yyb935 = r.CheckBreak()
	}
	if yyb935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj935++
	if yyhl935 {
		yyb935 = yyj935 > l
	} else {
		yyb935 = r.CheckBreak()
	}
	if yyb935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj935++
	if yyhl935 {
		yyb935 = yyj935 > l
	} else {
		yyb935 = r.CheckBreak()
	}
	if yyb935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj935++
	if yyhl935 {
		yyb935 = yyj935 > l
	} else {
		yyb935 = r.CheckBreak()
	}
	if yyb935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj935++
	if yyhl935 {
		yyb935 = yyj935 > l
	} else {
		yyb935 = r.CheckBreak()
	}
	if yyb935 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj935++
		if yyhl935 {
			yyb935 = yyj935 > l
		} else {
			yyb935 = r.CheckBreak()
		}
		if yyb935 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj935-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym945 := z.EncBinary()
		_ = yym945
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep946 := !z.EncBinary()
			yy2arr946 := z.EncBasicHandle().StructToArray
			var yyq946 [3]bool
			_, _, _ = yysep946, yyq946, yy2arr946
			const yyr946 bool = false
			yyq946[1] = x.FSType != ""
			yyq946[2] = x.ReadOnly != false
			var yynn946 int
			if yyr946 || yy2arr946 {
				r.EncodeArrayStart(3)
			} else {
				yynn946 = 1
				for _, b := range yyq946 {
					if b {
						yynn946++
					}
				}
				r.EncodeMapStart(yynn946)
				yynn946 = 0
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym948 := z.EncBinary()
				_ = yym948
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym949 := z.EncBinary()
				_ = yym949
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq946[1] {
					yym951 := z.EncBinary()
					_ = yym951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq946[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym952 := z.EncBinary()
					_ = yym952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq946[2] {
					yym954 := z.EncBinary()
					_ = yym954
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq946[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym955 := z.EncBinary()
					_ = yym955
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr946 || yy2arr946 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym956 := z.DecBinary()
	_ = yym956
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct957 := r.ContainerType()
		if yyct957 == codecSelferValueTypeMap1234 {
			yyl957 := r.ReadMapStart()
			if yyl957 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl957, d)
			}
		} else if yyct957 == codecSelferValueTypeArray1234 {
			yyl957 := r.ReadArrayStart()
			if yyl957 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl957, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys958Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys958Slc
	var yyhl958 bool = l >= 0
	for yyj958 := 0; ; yyj958++ {
		if yyhl958 {
			if yyj958 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys958Slc = r.DecodeBytes(yys958Slc, true, true)
		yys958 := string(yys958Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys958 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys958)
		} // end switch yys958
	} // end for yyj958
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj962 int
	var yyb962 bool
	var yyhl962 bool = l >= 0
	yyj962++
	if yyhl962 {
		yyb962 = yyj962 > l
	} else {
		yyb962 = r.CheckBreak()
	}
	if yyb962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj962++
	if yyhl962 {
		yyb962 = yyj962 > l
	} else {
		yyb962 = r.CheckBreak()
	}
	if yyb962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj962++
	if yyhl962 {
		yyb962 = yyj962 > l
	} else {
		yyb962 = r.CheckBreak()
	}
	if yyb962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj962++
		if yyhl962 {
			yyb962 = yyj962 > l
		} else {
			yyb962 = r.CheckBreak()
		}
		if yyb962 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj962-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym966 := z.EncBinary()
		_ = yym966
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep967 := !z.EncBinary()
			yy2arr967 := z.EncBasicHandle().StructToArray
			var yyq967 [6]bool
			_, _, _ = yysep967, yyq967, yy2arr967
			const yyr967 bool = false
			yyq967[1] = x.Path != ""
			yyq967[2] = x.User != ""
			yyq967[3] = x.SecretFile != ""
			yyq967[4] = x.SecretRef != nil
			yyq967[5] = x.ReadOnly != false
			var yynn967 int
			if yyr967 || yy2arr967 {
				r.EncodeArrayStart(6)
			} else {
				yynn967 = 1
				for _, b := range yyq967 {
					if b {
						yynn967++
					}
				}
				r.EncodeMapStart(yynn967)
				yynn967 = 0
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym969 := z.EncBinary()
					_ = yym969
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym970 := z.EncBinary()
					_ = yym970
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq967[1] {
					yym972 := z.EncBinary()
					_ = yym972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq967[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym973 := z.EncBinary()
					_ = yym973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq967[2] {
					yym975 := z.EncBinary()
					_ = yym975
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq967[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym976 := z.EncBinary()
					_ = yym976
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq967[3] {
					yym978 := z.EncBinary()
					_ = yym978
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq967[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym979 := z.EncBinary()
					_ = yym979
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq967[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq967[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq967[5] {
					yym982 := z.EncBinary()
					_ = yym982
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq967[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym983 := z.EncBinary()
					_ = yym983
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym984 := z.DecBinary()
	_ = yym984
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct985 := r.ContainerType()
		if yyct985 == codecSelferValueTypeMap1234 {
			yyl985 := r.ReadMapStart()
			if yyl985 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl985, d)
			}
		} else if yyct985 == codecSelferValueTypeArray1234 {
			yyl985 := r.ReadArrayStart()
			if yyl985 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl985, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys986Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys986Slc
	var yyhl986 bool = l >= 0
	for yyj986 := 0; ; yyj986++ {
		if yyhl986 {
			if yyj986 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys986Slc = r.DecodeBytes(yys986Slc, true, true)
		yys986 := string(yys986Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys986 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv987 := &x.Monitors
				yym988 := z.DecBinary()
				_ = yym988
				if false {
				} else {
					z.F.DecSliceStringX(yyv987, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys986)
		} // end switch yys986
	} // end for yyj986
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj994 int
	var yyb994 bool
	var yyhl994 bool = l >= 0
	yyj994++
	if yyhl994 {
		yyb994 = yyj994 > l
	} else {
		yyb994 = r.CheckBreak()
	}
	if yyb994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv995 := &x.Monitors
		yym996 := z.DecBinary()
		_ = yym996
		if false {
		} else {
			z.F.DecSliceStringX(yyv995, false, d)
		}
	}
	yyj994++
	if yyhl994 {
		yyb994 = yyj994 > l
	} else {
		yyb994 = r.CheckBreak()
	}
	if yyb994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj994++
	if yyhl994 {
		yyb994 = yyj994 > l
	} else {
		yyb994 = r.CheckBreak()
	}
	if yyb994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj994++
	if yyhl994 {
		yyb994 = yyj994 > l
	} else {
		yyb994 = r.CheckBreak()
	}
	if yyb994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj994++
	if yyhl994 {
		yyb994 = yyj994 > l
	} else {
		yyb994 = r.CheckBreak()
	}
	if yyb994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj994++
	if yyhl994 {
		yyb994 = yyj994 > l
	} else {
		yyb994 = r.CheckBreak()
	}
	if yyb994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj994++
		if yyhl994 {
			yyb994 = yyj994 > l
		} else {
			yyb994 = r.CheckBreak()
		}
		if yyb994 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj994-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1002 := z.EncBinary()
		_ = yym1002
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1003 := !z.EncBinary()
			yy2arr1003 := z.EncBasicHandle().StructToArray
			var yyq1003 [1]bool
			_, _, _ = yysep1003, yyq1003, yy2arr1003
			const yyr1003 bool = false
			var yynn1003 int
			if yyr1003 || yy2arr1003 {
				r.EncodeArrayStart(1)
			} else {
				yynn1003 = 1
				for _, b := range yyq1003 {
					if b {
						yynn1003++
					}
				}
				r.EncodeMapStart(yynn1003)
				yynn1003 = 0
			}
			if yyr1003 || yy2arr1003 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1005 := z.EncBinary()
				_ = yym1005
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1006 := z.EncBinary()
				_ = yym1006
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr1003 || yy2arr1003 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1007 := z.DecBinary()
	_ = yym1007
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1008 := r.ContainerType()
		if yyct1008 == codecSelferValueTypeMap1234 {
			yyl1008 := r.ReadMapStart()
			if yyl1008 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1008, d)
			}
		} else if yyct1008 == codecSelferValueTypeArray1234 {
			yyl1008 := r.ReadArrayStart()
			if yyl1008 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1008, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1009Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1009Slc
	var yyhl1009 bool = l >= 0
	for yyj1009 := 0; ; yyj1009++ {
		if yyhl1009 {
			if yyj1009 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1009Slc = r.DecodeBytes(yys1009Slc, true, true)
		yys1009 := string(yys1009Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1009 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1009)
		} // end switch yys1009
	} // end for yyj1009
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1011 int
	var yyb1011 bool
	var yyhl1011 bool = l >= 0
	yyj1011++
	if yyhl1011 {
		yyb1011 = yyj1011 > l
	} else {
		yyb1011 = r.CheckBreak()
	}
	if yyb1011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj1011++
		if yyhl1011 {
			yyb1011 = yyj1011 > l
		} else {
			yyb1011 = r.CheckBreak()
		}
		if yyb1011 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1011-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1013 := z.EncBinary()
		_ = yym1013
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1014 := !z.EncBinary()
			yy2arr1014 := z.EncBasicHandle().StructToArray
			var yyq1014 [2]bool
			_, _, _ = yysep1014, yyq1014, yy2arr1014
			const yyr1014 bool = false
			yyq1014[0] = len(x.Items) != 0
			yyq1014[1] = x.DefaultMode != nil
			var yynn1014 int
			if yyr1014 || yy2arr1014 {
				r.EncodeArrayStart(2)
			} else {
				yynn1014 = 0
				for _, b := range yyq1014 {
					if b {
						yynn1014++
					}
				}
				r.EncodeMapStart(yynn1014)
				yynn1014 = 0
			}
			if yyr1014 || yy2arr1014 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1014[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1016 := z.EncBinary()
						_ = yym1016
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1014[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1017 := z.EncBinary()
						_ = yym1017
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr1014 || yy2arr1014 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1014[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1019 := *x.DefaultMode
						yym1020 := z.EncBinary()
						_ = yym1020
						if false {
						} else {
							r.EncodeInt(int64(yy1019))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1014[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1021 := *x.DefaultMode
						yym1022 := z.EncBinary()
						_ = yym1022
						if false {
						} else {
							r.EncodeInt(int64(yy1021))
						}
					}
				}
			}
			if yyr1014 || yy2arr1014 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1023 := z.DecBinary()
	_ = yym1023
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1024 := r.ContainerType()
		if yyct1024 == codecSelferValueTypeMap1234 {
			yyl1024 := r.ReadMapStart()
			if yyl1024 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1024, d)
			}
		} else if yyct1024 == codecSelferValueTypeArray1234 {
			yyl1024 := r.ReadArrayStart()
			if yyl1024 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1024, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1025Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1025Slc
	var yyhl1025 bool = l >= 0
	for yyj1025 := 0; ; yyj1025++ {
		if yyhl1025 {
			if yyj1025 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1025Slc = r.DecodeBytes(yys1025Slc, true, true)
		yys1025 := string(yys1025Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1025 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1026 := &x.Items
				yym1027 := z.DecBinary()
				_ = yym1027
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv1026), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1029 := z.DecBinary()
				_ = yym1029
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1025)
		} // end switch yys1025
	} // end for yyj1025
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1030 int
	var yyb1030 bool
	var yyhl1030 bool = l >= 0
	yyj1030++
	if yyhl1030 {
		yyb1030 = yyj1030 > l
	} else {
		yyb1030 = r.CheckBreak()
	}
	if yyb1030 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1031 := &x.Items
		yym1032 := z.DecBinary()
		_ = yym1032
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv1031), d)
		}
	}
	yyj1030++
	if yyhl1030 {
		yyb1030 = yyj1030 > l
	} else {
		yyb1030 = r.CheckBreak()
	}
	if yyb1030 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1034 := z.DecBinary()
		_ = yym1034
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1030++
		if yyhl1030 {
			yyb1030 = yyj1030 > l
		} else {
			yyb1030 = r.CheckBreak()
		}
		if yyb1030 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1030-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1035 := z.EncBinary()
		_ = yym1035
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1036 := !z.EncBinary()
			yy2arr1036 := z.EncBasicHandle().StructToArray
			var yyq1036 [4]bool
			_, _, _ = yysep1036, yyq1036, yy2arr1036
			const yyr1036 bool = false
			yyq1036[1] = x.FieldRef != nil
			yyq1036[2] = x.ResourceFieldRef != nil
			yyq1036[3] = x.Mode != nil
			var yynn1036 int
			if yyr1036 || yy2arr1036 {
				r.EncodeArrayStart(4)
			} else {
				yynn1036 = 1
				for _, b := range yyq1036 {
					if b {
						yynn1036++
					}
				}
				r.EncodeMapStart(yynn1036)
				yynn1036 = 0
			}
			if yyr1036 || yy2arr1036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1038 := z.EncBinary()
				_ = yym1038
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1039 := z.EncBinary()
				_ = yym1039
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1036 || yy2arr1036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1036[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1036[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1036 || yy2arr1036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1036[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1036[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1036 || yy2arr1036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1036[3] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1043 := *x.Mode
						yym1044 := z.EncBinary()
						_ = yym1044
						if false {
						} else {
							r.EncodeInt(int64(yy1043))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1036[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1045 := *x.Mode
						yym1046 := z.EncBinary()
						_ = yym1046
						if false {
						} else {
							r.EncodeInt(int64(yy1045))
						}
					}
				}
			}
			if yyr1036 || yy2arr1036 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1047 := z.DecBinary()
	_ = yym1047
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1048 := r.ContainerType()
		if yyct1048 == codecSelferValueTypeMap1234 {
			yyl1048 := r.ReadMapStart()
			if yyl1048 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1048, d)
			}
		} else if yyct1048 == codecSelferValueTypeArray1234 {
			yyl1048 := r.ReadArrayStart()
			if yyl1048 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1048, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1049Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1049Slc
	var yyhl1049 bool = l >= 0
	for yyj1049 := 0; ; yyj1049++ {
		if yyhl1049 {
			if yyj1049 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1049Slc = r.DecodeBytes(yys1049Slc, true, true)
		yys1049 := string(yys1049Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1049 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1054 := z.DecBinary()
				_ = yym1054
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1049)
		} // end switch yys1049
	} // end for yyj1049
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1055 int
	var yyb1055 bool
	var yyhl1055 bool = l >= 0
	yyj1055++
	if yyhl1055 {
		yyb1055 = yyj1055 > l
	} else {
		yyb1055 = r.CheckBreak()
	}
	if yyb1055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1055++
	if yyhl1055 {
		yyb1055 = yyj1055 > l
	} else {
		yyb1055 = r.CheckBreak()
	}
	if yyb1055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1055++
	if yyhl1055 {
		yyb1055 = yyj1055 > l
	} else {
		yyb1055 = r.CheckBreak()
	}
	if yyb1055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1055++
	if yyhl1055 {
		yyb1055 = yyj1055 > l
	} else {
		yyb1055 = r.CheckBreak()
	}
	if yyb1055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1060 := z.DecBinary()
		_ = yym1060
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1055++
		if yyhl1055 {
			yyb1055 = yyj1055 > l
		} else {
			yyb1055 = r.CheckBreak()
		}
		if yyb1055 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1055-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1061 := z.EncBinary()
		_ = yym1061
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1062 := !z.EncBinary()
			yy2arr1062 := z.EncBasicHandle().StructToArray
			var yyq1062 [3]bool
			_, _, _ = yysep1062, yyq1062, yy2arr1062
			const yyr1062 bool = false
			yyq1062[2] = x.ReadOnly != false
			var yynn1062 int
			if yyr1062 || yy2arr1062 {
				r.EncodeArrayStart(3)
			} else {
				yynn1062 = 2
				for _, b := range yyq1062 {
					if b {
						yynn1062++
					}
				}
				r.EncodeMapStart(yynn1062)
				yynn1062 = 0
			}
			if yyr1062 || yy2arr1062 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1064 := z.EncBinary()
				_ = yym1064
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1065 := z.EncBinary()
				_ = yym1065
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr1062 || yy2arr1062 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1067 := z.EncBinary()
				_ = yym1067
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1068 := z.EncBinary()
				_ = yym1068
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr1062 || yy2arr1062 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1062[2] {
					yym1070 := z.EncBinary()
					_ = yym1070
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1062[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1071 := z.EncBinary()
					_ = yym1071
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1062 || yy2arr1062 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1072 := z.DecBinary()
	_ = yym1072
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1073 := r.ContainerType()
		if yyct1073 == codecSelferValueTypeMap1234 {
			yyl1073 := r.ReadMapStart()
			if yyl1073 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1073, d)
			}
		} else if yyct1073 == codecSelferValueTypeArray1234 {
			yyl1073 := r.ReadArrayStart()
			if yyl1073 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1073, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1074Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1074Slc
	var yyhl1074 bool = l >= 0
	for yyj1074 := 0; ; yyj1074++ {
		if yyhl1074 {
			if yyj1074 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1074Slc = r.DecodeBytes(yys1074Slc, true, true)
		yys1074 := string(yys1074Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1074 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1074)
		} // end switch yys1074
	} // end for yyj1074
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1078 int
	var yyb1078 bool
	var yyhl1078 bool = l >= 0
	yyj1078++
	if yyhl1078 {
		yyb1078 = yyj1078 > l
	} else {
		yyb1078 = r.CheckBreak()
	}
	if yyb1078 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1078++
	if yyhl1078 {
		yyb1078 = yyj1078 > l
	} else {
		yyb1078 = r.CheckBreak()
	}
	if yyb1078 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1078++
	if yyhl1078 {
		yyb1078 = yyj1078 > l
	} else {
		yyb1078 = r.CheckBreak()
	}
	if yyb1078 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1078++
		if yyhl1078 {
			yyb1078 = yyj1078 > l
		} else {
			yyb1078 = r.CheckBreak()
		}
		if yyb1078 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1078-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1082 := z.EncBinary()
		_ = yym1082
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1083 := !z.EncBinary()
			yy2arr1083 := z.EncBasicHandle().StructToArray
			var yyq1083 [2]bool
			_, _, _ = yysep1083, yyq1083, yy2arr1083
			const yyr1083 bool = false
			yyq1083[1] = x.FSType != ""
			var yynn1083 int
			if yyr1083 || yy2arr1083 {
				r.EncodeArrayStart(2)
			} else {
				yynn1083 = 1
				for _, b := range yyq1083 {
					if b {
						yynn1083++
					}
				}
				r.EncodeMapStart(yynn1083)
				yynn1083 = 0
			}
			if yyr1083 || yy2arr1083 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1085 := z.EncBinary()
				_ = yym1085
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1086 := z.EncBinary()
				_ = yym1086
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1083 || yy2arr1083 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1083[1] {
					yym1088 := z.EncBinary()
					_ = yym1088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1083[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1089 := z.EncBinary()
					_ = yym1089
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1083 || yy2arr1083 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1090 := z.DecBinary()
	_ = yym1090
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1091 := r.ContainerType()
		if yyct1091 == codecSelferValueTypeMap1234 {
			yyl1091 := r.ReadMapStart()
			if yyl1091 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1091, d)
			}
		} else if yyct1091 == codecSelferValueTypeArray1234 {
			yyl1091 := r.ReadArrayStart()
			if yyl1091 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1091, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1092Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1092Slc
	var yyhl1092 bool = l >= 0
	for yyj1092 := 0; ; yyj1092++ {
		if yyhl1092 {
			if yyj1092 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1092Slc = r.DecodeBytes(yys1092Slc, true, true)
		yys1092 := string(yys1092Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1092 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1092)
		} // end switch yys1092
	} // end for yyj1092
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1095 int
	var yyb1095 bool
	var yyhl1095 bool = l >= 0
	yyj1095++
	if yyhl1095 {
		yyb1095 = yyj1095 > l
	} else {
		yyb1095 = r.CheckBreak()
	}
	if yyb1095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1095++
	if yyhl1095 {
		yyb1095 = yyj1095 > l
	} else {
		yyb1095 = r.CheckBreak()
	}
	if yyb1095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1095++
		if yyhl1095 {
			yyb1095 = yyj1095 > l
		} else {
			yyb1095 = r.CheckBreak()
		}
		if yyb1095 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1095-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x AzureDataDiskCachingMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1098 := z.EncBinary()
	_ = yym1098
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *AzureDataDiskCachingMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1099 := z.DecBinary()
	_ = yym1099
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AzureDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1100 := z.EncBinary()
		_ = yym1100
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1101 := !z.EncBinary()
			yy2arr1101 := z.EncBasicHandle().StructToArray
			var yyq1101 [5]bool
			_, _, _ = yysep1101, yyq1101, yy2arr1101
			const yyr1101 bool = false
			yyq1101[2] = x.CachingMode != nil
			yyq1101[3] = x.FSType != nil
			yyq1101[4] = x.ReadOnly != nil
			var yynn1101 int
			if yyr1101 || yy2arr1101 {
				r.EncodeArrayStart(5)
			} else {
				yynn1101 = 2
				for _, b := range yyq1101 {
					if b {
						yynn1101++
					}
				}
				r.EncodeMapStart(yynn1101)
				yynn1101 = 0
			}
			if yyr1101 || yy2arr1101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1103 := z.EncBinary()
				_ = yym1103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1104 := z.EncBinary()
				_ = yym1104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			}
			if yyr1101 || yy2arr1101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1106 := z.EncBinary()
				_ = yym1106
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskURI"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1107 := z.EncBinary()
				_ = yym1107
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			}
			if yyr1101 || yy2arr1101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1101[2] {
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1109 := *x.CachingMode
						yy1109.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1101[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cachingMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1110 := *x.CachingMode
						yy1110.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1101 || yy2arr1101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1101[3] {
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1112 := *x.FSType
						yym1113 := z.EncBinary()
						_ = yym1113
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1112))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1101[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1114 := *x.FSType
						yym1115 := z.EncBinary()
						_ = yym1115
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1114))
						}
					}
				}
			}
			if yyr1101 || yy2arr1101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1101[4] {
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1117 := *x.ReadOnly
						yym1118 := z.EncBinary()
						_ = yym1118
						if false {
						} else {
							r.EncodeBool(bool(yy1117))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1101[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1119 := *x.ReadOnly
						yym1120 := z.EncBinary()
						_ = yym1120
						if false {
						} else {
							r.EncodeBool(bool(yy1119))
						}
					}
				}
			}
			if yyr1101 || yy2arr1101 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1121 := z.DecBinary()
	_ = yym1121
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1122 := r.ContainerType()
		if yyct1122 == codecSelferValueTypeMap1234 {
			yyl1122 := r.ReadMapStart()
			if yyl1122 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1122, d)
			}
		} else if yyct1122 == codecSelferValueTypeArray1234 {
			yyl1122 := r.ReadArrayStart()
			if yyl1122 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1122, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1123Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1123Slc
	var yyhl1123 bool = l >= 0
	for yyj1123 := 0; ; yyj1123++ {
		if yyhl1123 {
			if yyj1123 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1123Slc = r.DecodeBytes(yys1123Slc, true, true)
		yys1123 := string(yys1123Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1123 {
		case "diskName":
			if r.TryDecodeAsNil() {
				x.DiskName = ""
			} else {
				x.DiskName = string(r.DecodeString())
			}
		case "diskURI":
			if r.TryDecodeAsNil() {
				x.DataDiskURI = ""
			} else {
				x.DataDiskURI = string(r.DecodeString())
			}
		case "cachingMode":
			if r.TryDecodeAsNil() {
				if x.CachingMode != nil {
					x.CachingMode = nil
				}
			} else {
				if x.CachingMode == nil {
					x.CachingMode = new(AzureDataDiskCachingMode)
				}
				x.CachingMode.CodecDecodeSelf(d)
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				if x.FSType != nil {
					x.FSType = nil
				}
			} else {
				if x.FSType == nil {
					x.FSType = new(string)
				}
				yym1128 := z.DecBinary()
				_ = yym1128
				if false {
				} else {
					*((*string)(x.FSType)) = r.DecodeString()
				}
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				if x.ReadOnly != nil {
					x.ReadOnly = nil
				}
			} else {
				if x.ReadOnly == nil {
					x.ReadOnly = new(bool)
				}
				yym1130 := z.DecBinary()
				_ = yym1130
				if false {
				} else {
					*((*bool)(x.ReadOnly)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1123)
		} // end switch yys1123
	} // end for yyj1123
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1131 int
	var yyb1131 bool
	var yyhl1131 bool = l >= 0
	yyj1131++
	if yyhl1131 {
		yyb1131 = yyj1131 > l
	} else {
		yyb1131 = r.CheckBreak()
	}
	if yyb1131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DiskName = ""
	} else {
		x.DiskName = string(r.DecodeString())
	}
	yyj1131++
	if yyhl1131 {
		yyb1131 = yyj1131 > l
	} else {
		yyb1131 = r.CheckBreak()
	}
	if yyb1131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DataDiskURI = ""
	} else {
		x.DataDiskURI = string(r.DecodeString())
	}
	yyj1131++
	if yyhl1131 {
		yyb1131 = yyj1131 > l
	} else {
		yyb1131 = r.CheckBreak()
	}
	if yyb1131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CachingMode != nil {
			x.CachingMode = nil
		}
	} else {
		if x.CachingMode == nil {
			x.CachingMode = new(AzureDataDiskCachingMode)
		}
		x.CachingMode.CodecDecodeSelf(d)
	}
	yyj1131++
	if yyhl1131 {
		yyb1131 = yyj1131 > l
	} else {
		yyb1131 = r.CheckBreak()
	}
	if yyb1131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSType != nil {
			x.FSType = nil
		}
	} else {
		if x.FSType == nil {
			x.FSType = new(string)
		}
		yym1136 := z.DecBinary()
		_ = yym1136
		if false {
		} else {
			*((*string)(x.FSType)) = r.DecodeString()
		}
	}
	yyj1131++
	if yyhl1131 {
		yyb1131 = yyj1131 > l
	} else {
		yyb1131 = r.CheckBreak()
	}
	if yyb1131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnly != nil {
			x.ReadOnly = nil
		}
	} else {
		if x.ReadOnly == nil {
			x.ReadOnly = new(bool)
		}
		yym1138 := z.DecBinary()
		_ = yym1138
		if false {
		} else {
			*((*bool)(x.ReadOnly)) = r.DecodeBool()
		}
	}
	for {
		yyj1131++
		if yyhl1131 {
			yyb1131 = yyj1131 > l
		} else {
			yyb1131 = r.CheckBreak()
		}
		if yyb1131 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1131-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LibStorageVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1139 := z.EncBinary()
		_ = yym1139
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1140 := !z.EncBinary()
			yy2arr1140 := z.EncBasicHandle().StructToArray
			var yyq1140 [6]bool
			_, _, _ = yysep1140, yyq1140, yy2arr1140
			const yyr1140 bool = false
			yyq1140[2] = len(x.Options) != 0
			yyq1140[4] = x.FSType != ""
			yyq1140[5] = x.ReadOnly != false
			var yynn1140 int
			if yyr1140 || yy2arr1140 {
				r.EncodeArrayStart(6)
			} else {
				yynn1140 = 3
				for _, b := range yyq1140 {
					if b {
						yynn1140++
					}
				}
				r.EncodeMapStart(yynn1140)
				yynn1140 = 0
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1142 := z.EncBinary()
				_ = yym1142
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Host))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("host"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1143 := z.EncBinary()
				_ = yym1143
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Host))
				}
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1145 := z.EncBinary()
				_ = yym1145
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Service))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("service"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1146 := z.EncBinary()
				_ = yym1146
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Service))
				}
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1140[2] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym1148 := z.EncBinary()
						_ = yym1148
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1140[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym1149 := z.EncBinary()
						_ = yym1149
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1151 := z.EncBinary()
				_ = yym1151
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1152 := z.EncBinary()
				_ = yym1152
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
				}
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1140[4] {
					yym1154 := z.EncBinary()
					_ = yym1154
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1140[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1155 := z.EncBinary()
					_ = yym1155
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1140[5] {
					yym1157 := z.EncBinary()
					_ = yym1157
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1140[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1158 := z.EncBinary()
					_ = yym1158
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LibStorageVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1159 := z.DecBinary()
	_ = yym1159
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1160 := r.ContainerType()
		if yyct1160 == codecSelferValueTypeMap1234 {
			yyl1160 := r.ReadMapStart()
			if yyl1160 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1160, d)
			}
		} else if yyct1160 == codecSelferValueTypeArray1234 {
			yyl1160 := r.ReadArrayStart()
			if yyl1160 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1160, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LibStorageVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1161Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1161Slc
	var yyhl1161 bool = l >= 0
	for yyj1161 := 0; ; yyj1161++ {
		if yyhl1161 {
			if yyj1161 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1161Slc = r.DecodeBytes(yys1161Slc, true, true)
		yys1161 := string(yys1161Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1161 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "service":
			if r.TryDecodeAsNil() {
				x.Service = ""
			} else {
				x.Service = string(r.DecodeString())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv1164 := &x.Options
				yym1165 := z.DecBinary()
				_ = yym1165
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1164, false, d)
				}
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1161)
		} // end switch yys1161
	} // end for yyj1161
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LibStorageVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1169 int
	var yyb1169 bool
	var yyhl1169 bool = l >= 0
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Service = ""
	} else {
		x.Service = string(r.DecodeString())
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv1172 := &x.Options
		yym1173 := z.DecBinary()
		_ = yym1173
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1172, false, d)
		}
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1169++
		if yyhl1169 {
			yyb1169 = yyj1169 > l
		} else {
			yyb1169 = r.CheckBreak()
		}
		if yyb1169 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1169-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1177 := z.EncBinary()
		_ = yym1177
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1178 := !z.EncBinary()
			yy2arr1178 := z.EncBasicHandle().StructToArray
			var yyq1178 [3]bool
			_, _, _ = yysep1178, yyq1178, yy2arr1178
			const yyr1178 bool = false
			yyq1178[1] = len(x.Items) != 0
			yyq1178[2] = x.DefaultMode != nil
			var yynn1178 int
			if yyr1178 || yy2arr1178 {
				r.EncodeArrayStart(3)
			} else {
				yynn1178 = 1
				for _, b := range yyq1178 {
					if b {
						yynn1178++
					}
				}
				r.EncodeMapStart(yynn1178)
				yynn1178 = 0
			}
			if yyr1178 || yy2arr1178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1180 := z.EncBinary()
				_ = yym1180
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1181 := z.EncBinary()
				_ = yym1181
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1178 || yy2arr1178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1178[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1183 := z.EncBinary()
						_ = yym1183
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1178[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1184 := z.EncBinary()
						_ = yym1184
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1178 || yy2arr1178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1178[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1186 := *x.DefaultMode
						yym1187 := z.EncBinary()
						_ = yym1187
						if false {
						} else {
							r.EncodeInt(int64(yy1186))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1178[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1188 := *x.DefaultMode
						yym1189 := z.EncBinary()
						_ = yym1189
						if false {
						} else {
							r.EncodeInt(int64(yy1188))
						}
					}
				}
			}
			if yyr1178 || yy2arr1178 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1190 := z.DecBinary()
	_ = yym1190
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1191 := r.ContainerType()
		if yyct1191 == codecSelferValueTypeMap1234 {
			yyl1191 := r.ReadMapStart()
			if yyl1191 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1191, d)
			}
		} else if yyct1191 == codecSelferValueTypeArray1234 {
			yyl1191 := r.ReadArrayStart()
			if yyl1191 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1191, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1192Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1192Slc
	var yyhl1192 bool = l >= 0
	for yyj1192 := 0; ; yyj1192++ {
		if yyhl1192 {
			if yyj1192 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1192Slc = r.DecodeBytes(yys1192Slc, true, true)
		yys1192 := string(yys1192Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1192 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1194 := &x.Items
				yym1195 := z.DecBinary()
				_ = yym1195
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1194), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1197 := z.DecBinary()
				_ = yym1197
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1192)
		} // end switch yys1192
	} // end for yyj1192
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1198 int
	var yyb1198 bool
	var yyhl1198 bool = l >= 0
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1200 := &x.Items
		yym1201 := z.DecBinary()
		_ = yym1201
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1200), d)
		}
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1203 := z.DecBinary()
		_ = yym1203
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1198++
		if yyhl1198 {
			yyb1198 = yyj1198 > l
		} else {
			yyb1198 = r.CheckBreak()
		}
		if yyb1198 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1198-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1204 := z.EncBinary()
		_ = yym1204
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1205 := !z.EncBinary()
			yy2arr1205 := z.EncBasicHandle().StructToArray
			var yyq1205 [3]bool
			_, _, _ = yysep1205, yyq1205, yy2arr1205
			const yyr1205 bool = false
			yyq1205[2] = x.Mode != nil
			var yynn1205 int
			if yyr1205 || yy2arr1205 {
				r.EncodeArrayStart(3)
			} else {
				yynn1205 = 2
				for _, b := range yyq1205 {
					if b {
						yynn1205++
					}
				}
				r.EncodeMapStart(yynn1205)
				yynn1205 = 0
			}
			if yyr1205 || yy2arr1205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1207 := z.EncBinary()
				_ = yym1207
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1208 := z.EncBinary()
				_ = yym1208
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1205 || yy2arr1205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1210 := z.EncBinary()
				_ = yym1210
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1211 := z.EncBinary()
				_ = yym1211
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1205 || yy2arr1205 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1205[2] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1213 := *x.Mode
						yym1214 := z.EncBinary()
						_ = yym1214
						if false {
						} else {
							r.EncodeInt(int64(yy1213))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1205[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1215 := *x.Mode
						yym1216 := z.EncBinary()
						_ = yym1216
						if false {
						} else {
							r.EncodeInt(int64(yy1215))
						}
					}
				}
			}
			if yyr1205 || yy2arr1205 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1217 := z.DecBinary()
	_ = yym1217
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1218 := r.ContainerType()
		if yyct1218 == codecSelferValueTypeMap1234 {
			yyl1218 := r.ReadMapStart()
			if yyl1218 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1218, d)
			}
		} else if yyct1218 == codecSelferValueTypeArray1234 {
			yyl1218 := r.ReadArrayStart()
			if yyl1218 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1218, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1219Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1219Slc
	var yyhl1219 bool = l >= 0
	for yyj1219 := 0; ; yyj1219++ {
		if yyhl1219 {
			if yyj1219 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1219Slc = r.DecodeBytes(yys1219Slc, true, true)
		yys1219 := string(yys1219Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1219 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1223 := z.DecBinary()
				_ = yym1223
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1219)
		} // end switch yys1219
	} // end for yyj1219
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1224 int
	var yyb1224 bool
	var yyhl1224 bool = l >= 0
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1228 := z.DecBinary()
		_ = yym1228
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1224++
		if yyhl1224 {
			yyb1224 = yyj1224 > l
		} else {
			yyb1224 = r.CheckBreak()
		}
		if yyb1224 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1224-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1229 := z.EncBinary()
		_ = yym1229
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1230 := !z.EncBinary()
			yy2arr1230 := z.EncBasicHandle().StructToArray
			var yyq1230 [5]bool
			_, _, _ = yysep1230, yyq1230, yy2arr1230
			const yyr1230 bool = false
			yyq1230[0] = x.Name != ""
			yyq1230[1] = x.HostPort != 0
			yyq1230[3] = x.Protocol != ""
			yyq1230[4] = x.HostIP != ""
			var yynn1230 int
			if yyr1230 || yy2arr1230 {
				r.EncodeArrayStart(5)
			} else {
				yynn1230 = 1
				for _, b := range yyq1230 {
					if b {
						yynn1230++
					}
				}
				r.EncodeMapStart(yynn1230)
				yynn1230 = 0
			}
			if yyr1230 || yy2arr1230 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1230[0] {
					yym1232 := z.EncBinary()
					_ = yym1232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1230[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1233 := z.EncBinary()
					_ = yym1233
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1230 || yy2arr1230 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1230[1] {
					yym1235 := z.EncBinary()
					_ = yym1235
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1230[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1236 := z.EncBinary()
					_ = yym1236
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1230 || yy2arr1230 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1238 := z.EncBinary()
				_ = yym1238
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1239 := z.EncBinary()
				_ = yym1239
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1230 || yy2arr1230 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1230[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1230[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1230 || yy2arr1230 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1230[4] {
					yym1242 := z.EncBinary()
					_ = yym1242
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1230[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1243 := z.EncBinary()
					_ = yym1243
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1230 || yy2arr1230 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1244 := z.DecBinary()
	_ = yym1244
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1245 := r.ContainerType()
		if yyct1245 == codecSelferValueTypeMap1234 {
			yyl1245 := r.ReadMapStart()
			if yyl1245 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1245, d)
			}
		} else if yyct1245 == codecSelferValueTypeArray1234 {
			yyl1245 := r.ReadArrayStart()
			if yyl1245 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1245, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1246Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1246Slc
	var yyhl1246 bool = l >= 0
	for yyj1246 := 0; ; yyj1246++ {
		if yyhl1246 {
			if yyj1246 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1246Slc = r.DecodeBytes(yys1246Slc, true, true)
		yys1246 := string(yys1246Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1246 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1246)
		} // end switch yys1246
	} // end for yyj1246
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1252 int
	var yyb1252 bool
	var yyhl1252 bool = l >= 0
	yyj1252++
	if yyhl1252 {
		yyb1252 = yyj1252 > l
	} else {
		yyb1252 = r.CheckBreak()
	}
	if yyb1252 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1252++
	if yyhl1252 {
		yyb1252 = yyj1252 > l
	} else {
		yyb1252 = r.CheckBreak()
	}
	if yyb1252 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1252++
	if yyhl1252 {
		yyb1252 = yyj1252 > l
	} else {
		yyb1252 = r.CheckBreak()
	}
	if yyb1252 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1252++
	if yyhl1252 {
		yyb1252 = yyj1252 > l
	} else {
		yyb1252 = r.CheckBreak()
	}
	if yyb1252 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1252++
	if yyhl1252 {
		yyb1252 = yyj1252 > l
	} else {
		yyb1252 = r.CheckBreak()
	}
	if yyb1252 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1252++
		if yyhl1252 {
			yyb1252 = yyj1252 > l
		} else {
			yyb1252 = r.CheckBreak()
		}
		if yyb1252 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1252-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1258 := z.EncBinary()
		_ = yym1258
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1259 := !z.EncBinary()
			yy2arr1259 := z.EncBasicHandle().StructToArray
			var yyq1259 [4]bool
			_, _, _ = yysep1259, yyq1259, yy2arr1259
			const yyr1259 bool = false
			yyq1259[1] = x.ReadOnly != false
			yyq1259[3] = x.SubPath != ""
			var yynn1259 int
			if yyr1259 || yy2arr1259 {
				r.EncodeArrayStart(4)
			} else {
				yynn1259 = 2
				for _, b := range yyq1259 {
					if b {
						yynn1259++
					}
				}
				r.EncodeMapStart(yynn1259)
				yynn1259 = 0
			}
			if yyr1259 || yy2arr1259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1261 := z.EncBinary()
				_ = yym1261
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1262 := z.EncBinary()
				_ = yym1262
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1259 || yy2arr1259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1259[1] {
					yym1264 := z.EncBinary()
					_ = yym1264
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1259[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1265 := z.EncBinary()
					_ = yym1265
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1259 || yy2arr1259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1267 := z.EncBinary()
				_ = yym1267
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1268 := z.EncBinary()
				_ = yym1268
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1259 || yy2arr1259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1259[3] {
					yym1270 := z.EncBinary()
					_ = yym1270
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1259[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1271 := z.EncBinary()
					_ = yym1271
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1259 || yy2arr1259 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1272 := z.DecBinary()
	_ = yym1272
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1273 := r.ContainerType()
		if yyct1273 == codecSelferValueTypeMap1234 {
			yyl1273 := r.ReadMapStart()
			if yyl1273 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1273, d)
			}
		} else if yyct1273 == codecSelferValueTypeArray1234 {
			yyl1273 := r.ReadArrayStart()
			if yyl1273 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1273, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1274Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1274Slc
	var yyhl1274 bool = l >= 0
	for yyj1274 := 0; ; yyj1274++ {
		if yyhl1274 {
			if yyj1274 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1274Slc = r.DecodeBytes(yys1274Slc, true, true)
		yys1274 := string(yys1274Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1274 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1274)
		} // end switch yys1274
	} // end for yyj1274
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1279 int
	var yyb1279 bool
	var yyhl1279 bool = l >= 0
	yyj1279++
	if yyhl1279 {
		yyb1279 = yyj1279 > l
	} else {
		yyb1279 = r.CheckBreak()
	}
	if yyb1279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1279++
	if yyhl1279 {
		yyb1279 = yyj1279 > l
	} else {
		yyb1279 = r.CheckBreak()
	}
	if yyb1279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1279++
	if yyhl1279 {
		yyb1279 = yyj1279 > l
	} else {
		yyb1279 = r.CheckBreak()
	}
	if yyb1279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1279++
	if yyhl1279 {
		yyb1279 = yyj1279 > l
	} else {
		yyb1279 = r.CheckBreak()
	}
	if yyb1279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1279++
		if yyhl1279 {
			yyb1279 = yyj1279 > l
		} else {
			yyb1279 = r.CheckBreak()
		}
		if yyb1279 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1279-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1284 := z.EncBinary()
		_ = yym1284
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1285 := !z.EncBinary()
			yy2arr1285 := z.EncBasicHandle().StructToArray
			var yyq1285 [3]bool
			_, _, _ = yysep1285, yyq1285, yy2arr1285
			const yyr1285 bool = false
			yyq1285[1] = x.Value != ""
			yyq1285[2] = x.ValueFrom != nil
			var yynn1285 int
			if yyr1285 || yy2arr1285 {
				r.EncodeArrayStart(3)
			} else {
				yynn1285 = 1
				for _, b := range yyq1285 {
					if b {
						yynn1285++
					}
				}
				r.EncodeMapStart(yynn1285)
				yynn1285 = 0
			}
			if yyr1285 || yy2arr1285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1287 := z.EncBinary()
				_ = yym1287
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1288 := z.EncBinary()
				_ = yym1288
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1285 || yy2arr1285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1285[1] {
					yym1290 := z.EncBinary()
					_ = yym1290
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1285[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1291 := z.EncBinary()
					_ = yym1291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1285 || yy2arr1285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1285[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1285[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1285 || yy2arr1285 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1293 := z.DecBinary()
	_ = yym1293
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1294 := r.ContainerType()
		if yyct1294 == codecSelferValueTypeMap1234 {
			yyl1294 := r.ReadMapStart()
			if yyl1294 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1294, d)
			}
		} else if yyct1294 == codecSelferValueTypeArray1234 {
			yyl1294 := r.ReadArrayStart()
			if yyl1294 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1294, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1295Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1295Slc
	var yyhl1295 bool = l >= 0
	for yyj1295 := 0; ; yyj1295++ {
		if yyhl1295 {
			if yyj1295 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1295Slc = r.DecodeBytes(yys1295Slc, true, true)
		yys1295 := string(yys1295Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1295 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1295)
		} // end switch yys1295
	} // end for yyj1295
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1299 int
	var yyb1299 bool
	var yyhl1299 bool = l >= 0
	yyj1299++
	if yyhl1299 {
		yyb1299 = yyj1299 > l
	} else {
		yyb1299 = r.CheckBreak()
	}
	if yyb1299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1299++
	if yyhl1299 {
		yyb1299 = yyj1299 > l
	} else {
		yyb1299 = r.CheckBreak()
	}
	if yyb1299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1299++
	if yyhl1299 {
		yyb1299 = yyj1299 > l
	} else {
		yyb1299 = r.CheckBreak()
	}
	if yyb1299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1299++
		if yyhl1299 {
			yyb1299 = yyj1299 > l
		} else {
			yyb1299 = r.CheckBreak()
		}
		if yyb1299 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1299-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1303 := z.EncBinary()
		_ = yym1303
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1304 := !z.EncBinary()
			yy2arr1304 := z.EncBasicHandle().StructToArray
			var yyq1304 [4]bool
			_, _, _ = yysep1304, yyq1304, yy2arr1304
			const yyr1304 bool = false
			yyq1304[0] = x.FieldRef != nil
			yyq1304[1] = x.ResourceFieldRef != nil
			yyq1304[2] = x.ConfigMapKeyRef != nil
			yyq1304[3] = x.SecretKeyRef != nil
			var yynn1304 int
			if yyr1304 || yy2arr1304 {
				r.EncodeArrayStart(4)
			} else {
				yynn1304 = 0
				for _, b := range yyq1304 {
					if b {
						yynn1304++
					}
				}
				r.EncodeMapStart(yynn1304)
				yynn1304 = 0
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1304[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1304[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1304[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1304[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1304[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1304[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1304[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1304[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1309 := z.DecBinary()
	_ = yym1309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1310 := r.ContainerType()
		if yyct1310 == codecSelferValueTypeMap1234 {
			yyl1310 := r.ReadMapStart()
			if yyl1310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1310, d)
			}
		} else if yyct1310 == codecSelferValueTypeArray1234 {
			yyl1310 := r.ReadArrayStart()
			if yyl1310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1311Slc
	var yyhl1311 bool = l >= 0
	for yyj1311 := 0; ; yyj1311++ {
		if yyhl1311 {
			if yyj1311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1311Slc = r.DecodeBytes(yys1311Slc, true, true)
		yys1311 := string(yys1311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1311 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1311)
		} // end switch yys1311
	} // end for yyj1311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1316 int
	var yyb1316 bool
	var yyhl1316 bool = l >= 0
	yyj1316++
	if yyhl1316 {
		yyb1316 = yyj1316 > l
	} else {
		yyb1316 = r.CheckBreak()
	}
	if yyb1316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1316++
	if yyhl1316 {
		yyb1316 = yyj1316 > l
	} else {
		yyb1316 = r.CheckBreak()
	}
	if yyb1316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1316++
	if yyhl1316 {
		yyb1316 = yyj1316 > l
	} else {
		yyb1316 = r.CheckBreak()
	}
	if yyb1316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1316++
	if yyhl1316 {
		yyb1316 = yyj1316 > l
	} else {
		yyb1316 = r.CheckBreak()
	}
	if yyb1316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1316++
		if yyhl1316 {
			yyb1316 = yyj1316 > l
		} else {
			yyb1316 = r.CheckBreak()
		}
		if yyb1316 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1316-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1321 := z.EncBinary()
		_ = yym1321
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1322 := !z.EncBinary()
			yy2arr1322 := z.EncBasicHandle().StructToArray
			var yyq1322 [2]bool
			_, _, _ = yysep1322, yyq1322, yy2arr1322
			const yyr1322 bool = false
			var yynn1322 int
			if yyr1322 || yy2arr1322 {
				r.EncodeArrayStart(2)
			} else {
				yynn1322 = 2
				for _, b := range yyq1322 {
					if b {
						yynn1322++
					}
				}
				r.EncodeMapStart(yynn1322)
				yynn1322 = 0
			}
			if yyr1322 || yy2arr1322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1324 := z.EncBinary()
				_ = yym1324
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1325 := z.EncBinary()
				_ = yym1325
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr1322 || yy2arr1322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1327 := z.EncBinary()
				_ = yym1327
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1328 := z.EncBinary()
				_ = yym1328
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1322 || yy2arr1322 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1329 := z.DecBinary()
	_ = yym1329
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1330 := r.ContainerType()
		if yyct1330 == codecSelferValueTypeMap1234 {
			yyl1330 := r.ReadMapStart()
			if yyl1330 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1330, d)
			}
		} else if yyct1330 == codecSelferValueTypeArray1234 {
			yyl1330 := r.ReadArrayStart()
			if yyl1330 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1330, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1331Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1331Slc
	var yyhl1331 bool = l >= 0
	for yyj1331 := 0; ; yyj1331++ {
		if yyhl1331 {
			if yyj1331 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1331Slc = r.DecodeBytes(yys1331Slc, true, true)
		yys1331 := string(yys1331Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1331 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1331)
		} // end switch yys1331
	} // end for yyj1331
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1334 int
	var yyb1334 bool
	var yyhl1334 bool = l >= 0
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1334++
	if yyhl1334 {
		yyb1334 = yyj1334 > l
	} else {
		yyb1334 = r.CheckBreak()
	}
	if yyb1334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1334++
		if yyhl1334 {
			yyb1334 = yyj1334 > l
		} else {
			yyb1334 = r.CheckBreak()
		}
		if yyb1334 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1334-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1337 := z.EncBinary()
		_ = yym1337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1338 := !z.EncBinary()
			yy2arr1338 := z.EncBasicHandle().StructToArray
			var yyq1338 [3]bool
			_, _, _ = yysep1338, yyq1338, yy2arr1338
			const yyr1338 bool = false
			yyq1338[0] = x.ContainerName != ""
			yyq1338[2] = true
			var yynn1338 int
			if yyr1338 || yy2arr1338 {
				r.EncodeArrayStart(3)
			} else {
				yynn1338 = 1
				for _, b := range yyq1338 {
					if b {
						yynn1338++
					}
				}
				r.EncodeMapStart(yynn1338)
				yynn1338 = 0
			}
			if yyr1338 || yy2arr1338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1338[0] {
					yym1340 := z.EncBinary()
					_ = yym1340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1338[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1341 := z.EncBinary()
					_ = yym1341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1338 || yy2arr1338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1343 := z.EncBinary()
				_ = yym1343
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1344 := z.EncBinary()
				_ = yym1344
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1338 || yy2arr1338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1338[2] {
					yy1346 := &x.Divisor
					yym1347 := z.EncBinary()
					_ = yym1347
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1346) {
					} else if !yym1347 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1346)
					} else {
						z.EncFallback(yy1346)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1338[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1348 := &x.Divisor
					yym1349 := z.EncBinary()
					_ = yym1349
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1348) {
					} else if !yym1349 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1348)
					} else {
						z.EncFallback(yy1348)
					}
				}
			}
			if yyr1338 || yy2arr1338 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1350 := z.DecBinary()
	_ = yym1350
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1351 := r.ContainerType()
		if yyct1351 == codecSelferValueTypeMap1234 {
			yyl1351 := r.ReadMapStart()
			if yyl1351 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1351, d)
			}
		} else if yyct1351 == codecSelferValueTypeArray1234 {
			yyl1351 := r.ReadArrayStart()
			if yyl1351 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1351, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1352Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1352Slc
	var yyhl1352 bool = l >= 0
	for yyj1352 := 0; ; yyj1352++ {
		if yyhl1352 {
			if yyj1352 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1352Slc = r.DecodeBytes(yys1352Slc, true, true)
		yys1352 := string(yys1352Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1352 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1355 := &x.Divisor
				yym1356 := z.DecBinary()
				_ = yym1356
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1355) {
				} else if !yym1356 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1355)
				} else {
					z.DecFallback(yyv1355, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1352)
		} // end switch yys1352
	} // end for yyj1352
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1357 int
	var yyb1357 bool
	var yyhl1357 bool = l >= 0
	yyj1357++
	if yyhl1357 {
		yyb1357 = yyj1357 > l
	} else {
		yyb1357 = r.CheckBreak()
	}
	if yyb1357 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1357++
	if yyhl1357 {
		yyb1357 = yyj1357 > l
	} else {
		yyb1357 = r.CheckBreak()
	}
	if yyb1357 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1357++
	if yyhl1357 {
		yyb1357 = yyj1357 > l
	} else {
		yyb1357 = r.CheckBreak()
	}
	if yyb1357 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1360 := &x.Divisor
		yym1361 := z.DecBinary()
		_ = yym1361
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1360) {
		} else if !yym1361 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1360)
		} else {
			z.DecFallback(yyv1360, false)
		}
	}
	for {
		yyj1357++
		if yyhl1357 {
			yyb1357 = yyj1357 > l
		} else {
			yyb1357 = r.CheckBreak()
		}
		if yyb1357 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1357-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1362 := z.EncBinary()
		_ = yym1362
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1363 := !z.EncBinary()
			yy2arr1363 := z.EncBasicHandle().StructToArray
			var yyq1363 [2]bool
			_, _, _ = yysep1363, yyq1363, yy2arr1363
			const yyr1363 bool = false
			var yynn1363 int
			if yyr1363 || yy2arr1363 {
				r.EncodeArrayStart(2)
			} else {
				yynn1363 = 2
				for _, b := range yyq1363 {
					if b {
						yynn1363++
					}
				}
				r.EncodeMapStart(yynn1363)
				yynn1363 = 0
			}
			if yyr1363 || yy2arr1363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1365 := z.EncBinary()
				_ = yym1365
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1366 := z.EncBinary()
				_ = yym1366
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1363 || yy2arr1363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1368 := z.EncBinary()
				_ = yym1368
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1369 := z.EncBinary()
				_ = yym1369
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1363 || yy2arr1363 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1370 := z.DecBinary()
	_ = yym1370
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1371 := r.ContainerType()
		if yyct1371 == codecSelferValueTypeMap1234 {
			yyl1371 := r.ReadMapStart()
			if yyl1371 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1371, d)
			}
		} else if yyct1371 == codecSelferValueTypeArray1234 {
			yyl1371 := r.ReadArrayStart()
			if yyl1371 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1371, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1372Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1372Slc
	var yyhl1372 bool = l >= 0
	for yyj1372 := 0; ; yyj1372++ {
		if yyhl1372 {
			if yyj1372 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1372Slc = r.DecodeBytes(yys1372Slc, true, true)
		yys1372 := string(yys1372Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1372 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1372)
		} // end switch yys1372
	} // end for yyj1372
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1375 int
	var yyb1375 bool
	var yyhl1375 bool = l >= 0
	yyj1375++
	if yyhl1375 {
		yyb1375 = yyj1375 > l
	} else {
		yyb1375 = r.CheckBreak()
	}
	if yyb1375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1375++
	if yyhl1375 {
		yyb1375 = yyj1375 > l
	} else {
		yyb1375 = r.CheckBreak()
	}
	if yyb1375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1375++
		if yyhl1375 {
			yyb1375 = yyj1375 > l
		} else {
			yyb1375 = r.CheckBreak()
		}
		if yyb1375 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1375-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1378 := z.EncBinary()
		_ = yym1378
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1379 := !z.EncBinary()
			yy2arr1379 := z.EncBasicHandle().StructToArray
			var yyq1379 [2]bool
			_, _, _ = yysep1379, yyq1379, yy2arr1379
			const yyr1379 bool = false
			var yynn1379 int
			if yyr1379 || yy2arr1379 {
				r.EncodeArrayStart(2)
			} else {
				yynn1379 = 2
				for _, b := range yyq1379 {
					if b {
						yynn1379++
					}
				}
				r.EncodeMapStart(yynn1379)
				yynn1379 = 0
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1381 := z.EncBinary()
				_ = yym1381
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1382 := z.EncBinary()
				_ = yym1382
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1384 := z.EncBinary()
				_ = yym1384
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1385 := z.EncBinary()
				_ = yym1385
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1379 || yy2arr1379 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1386 := z.DecBinary()
	_ = yym1386
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1387 := r.ContainerType()
		if yyct1387 == codecSelferValueTypeMap1234 {
			yyl1387 := r.ReadMapStart()
			if yyl1387 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1387, d)
			}
		} else if yyct1387 == codecSelferValueTypeArray1234 {
			yyl1387 := r.ReadArrayStart()
			if yyl1387 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1387, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1388Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1388Slc
	var yyhl1388 bool = l >= 0
	for yyj1388 := 0; ; yyj1388++ {
		if yyhl1388 {
			if yyj1388 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1388Slc = r.DecodeBytes(yys1388Slc, true, true)
		yys1388 := string(yys1388Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1388 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1388)
		} // end switch yys1388
	} // end for yyj1388
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1391 int
	var yyb1391 bool
	var yyhl1391 bool = l >= 0
	yyj1391++
	if yyhl1391 {
		yyb1391 = yyj1391 > l
	} else {
		yyb1391 = r.CheckBreak()
	}
	if yyb1391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1391++
	if yyhl1391 {
		yyb1391 = yyj1391 > l
	} else {
		yyb1391 = r.CheckBreak()
	}
	if yyb1391 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1391++
		if yyhl1391 {
			yyb1391 = yyj1391 > l
		} else {
			yyb1391 = r.CheckBreak()
		}
		if yyb1391 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1391-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1394 := z.EncBinary()
		_ = yym1394
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1395 := !z.EncBinary()
			yy2arr1395 := z.EncBasicHandle().StructToArray
			var yyq1395 [2]bool
			_, _, _ = yysep1395, yyq1395, yy2arr1395
			const yyr1395 bool = false
			var yynn1395 int
			if yyr1395 || yy2arr1395 {
				r.EncodeArrayStart(2)
			} else {
				yynn1395 = 2
				for _, b := range yyq1395 {
					if b {
						yynn1395++
					}
				}
				r.EncodeMapStart(yynn1395)
				yynn1395 = 0
			}
			if yyr1395 || yy2arr1395 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1397 := z.EncBinary()
				_ = yym1397
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1398 := z.EncBinary()
				_ = yym1398
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1395 || yy2arr1395 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1400 := z.EncBinary()
				_ = yym1400
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1401 := z.EncBinary()
				_ = yym1401
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1395 || yy2arr1395 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1402 := z.DecBinary()
	_ = yym1402
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1403 := r.ContainerType()
		if yyct1403 == codecSelferValueTypeMap1234 {
			yyl1403 := r.ReadMapStart()
			if yyl1403 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1403, d)
			}
		} else if yyct1403 == codecSelferValueTypeArray1234 {
			yyl1403 := r.ReadArrayStart()
			if yyl1403 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1403, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1404Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1404Slc
	var yyhl1404 bool = l >= 0
	for yyj1404 := 0; ; yyj1404++ {
		if yyhl1404 {
			if yyj1404 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1404Slc = r.DecodeBytes(yys1404Slc, true, true)
		yys1404 := string(yys1404Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1404 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1404)
		} // end switch yys1404
	} // end for yyj1404
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1407 int
	var yyb1407 bool
	var yyhl1407 bool = l >= 0
	yyj1407++
	if yyhl1407 {
		yyb1407 = yyj1407 > l
	} else {
		yyb1407 = r.CheckBreak()
	}
	if yyb1407 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1407++
	if yyhl1407 {
		yyb1407 = yyj1407 > l
	} else {
		yyb1407 = r.CheckBreak()
	}
	if yyb1407 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1407++
		if yyhl1407 {
			yyb1407 = yyj1407 > l
		} else {
			yyb1407 = r.CheckBreak()
		}
		if yyb1407 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1407-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1410 := z.EncBinary()
		_ = yym1410
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1411 := !z.EncBinary()
			yy2arr1411 := z.EncBasicHandle().StructToArray
			var yyq1411 [5]bool
			_, _, _ = yysep1411, yyq1411, yy2arr1411
			const yyr1411 bool = false
			yyq1411[0] = x.Path != ""
			yyq1411[1] = true
			yyq1411[2] = x.Host != ""
			yyq1411[3] = x.Scheme != ""
			yyq1411[4] = len(x.HTTPHeaders) != 0
			var yynn1411 int
			if yyr1411 || yy2arr1411 {
				r.EncodeArrayStart(5)
			} else {
				yynn1411 = 0
				for _, b := range yyq1411 {
					if b {
						yynn1411++
					}
				}
				r.EncodeMapStart(yynn1411)
				yynn1411 = 0
			}
			if yyr1411 || yy2arr1411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1411[0] {
					yym1413 := z.EncBinary()
					_ = yym1413
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1411[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1414 := z.EncBinary()
					_ = yym1414
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1411 || yy2arr1411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1411[1] {
					yy1416 := &x.Port
					yym1417 := z.EncBinary()
					_ = yym1417
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1416) {
					} else if !yym1417 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1416)
					} else {
						z.EncFallback(yy1416)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1411[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1418 := &x.Port
					yym1419 := z.EncBinary()
					_ = yym1419
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1418) {
					} else if !yym1419 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1418)
					} else {
						z.EncFallback(yy1418)
					}
				}
			}
			if yyr1411 || yy2arr1411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1411[2] {
					yym1421 := z.EncBinary()
					_ = yym1421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1411[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1422 := z.EncBinary()
					_ = yym1422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1411 || yy2arr1411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1411[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1411[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1411 || yy2arr1411 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1411[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1425 := z.EncBinary()
						_ = yym1425
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1411[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1426 := z.EncBinary()
						_ = yym1426
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1411 || yy2arr1411 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1427 := z.DecBinary()
	_ = yym1427
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1428 := r.ContainerType()
		if yyct1428 == codecSelferValueTypeMap1234 {
			yyl1428 := r.ReadMapStart()
			if yyl1428 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1428, d)
			}
		} else if yyct1428 == codecSelferValueTypeArray1234 {
			yyl1428 := r.ReadArrayStart()
			if yyl1428 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1428, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1429Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1429Slc
	var yyhl1429 bool = l >= 0
	for yyj1429 := 0; ; yyj1429++ {
		if yyhl1429 {
			if yyj1429 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1429Slc = r.DecodeBytes(yys1429Slc, true, true)
		yys1429 := string(yys1429Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1429 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1431 := &x.Port
				yym1432 := z.DecBinary()
				_ = yym1432
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1431) {
				} else if !yym1432 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1431)
				} else {
					z.DecFallback(yyv1431, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1435 := &x.HTTPHeaders
				yym1436 := z.DecBinary()
				_ = yym1436
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1435), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1429)
		} // end switch yys1429
	} // end for yyj1429
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1437 int
	var yyb1437 bool
	var yyhl1437 bool = l >= 0
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1439 := &x.Port
		yym1440 := z.DecBinary()
		_ = yym1440
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1439) {
		} else if !yym1440 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1439)
		} else {
			z.DecFallback(yyv1439, false)
		}
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1443 := &x.HTTPHeaders
		yym1444 := z.DecBinary()
		_ = yym1444
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1443), d)
		}
	}
	for {
		yyj1437++
		if yyhl1437 {
			yyb1437 = yyj1437 > l
		} else {
			yyb1437 = r.CheckBreak()
		}
		if yyb1437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1445 := z.EncBinary()
	_ = yym1445
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1446 := z.DecBinary()
	_ = yym1446
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1447 := z.EncBinary()
		_ = yym1447
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1448 := !z.EncBinary()
			yy2arr1448 := z.EncBasicHandle().StructToArray
			var yyq1448 [1]bool
			_, _, _ = yysep1448, yyq1448, yy2arr1448
			const yyr1448 bool = false
			yyq1448[0] = true
			var yynn1448 int
			if yyr1448 || yy2arr1448 {
				r.EncodeArrayStart(1)
			} else {
				yynn1448 = 0
				for _, b := range yyq1448 {
					if b {
						yynn1448++
					}
				}
				r.EncodeMapStart(yynn1448)
				yynn1448 = 0
			}
			if yyr1448 || yy2arr1448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1448[0] {
					yy1450 := &x.Port
					yym1451 := z.EncBinary()
					_ = yym1451
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1450) {
					} else if !yym1451 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1450)
					} else {
						z.EncFallback(yy1450)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1448[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1452 := &x.Port
					yym1453 := z.EncBinary()
					_ = yym1453
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1452) {
					} else if !yym1453 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1452)
					} else {
						z.EncFallback(yy1452)
					}
				}
			}
			if yyr1448 || yy2arr1448 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1454 := z.DecBinary()
	_ = yym1454
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1455 := r.ContainerType()
		if yyct1455 == codecSelferValueTypeMap1234 {
			yyl1455 := r.ReadMapStart()
			if yyl1455 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1455, d)
			}
		} else if yyct1455 == codecSelferValueTypeArray1234 {
			yyl1455 := r.ReadArrayStart()
			if yyl1455 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1455, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1456Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1456Slc
	var yyhl1456 bool = l >= 0
	for yyj1456 := 0; ; yyj1456++ {
		if yyhl1456 {
			if yyj1456 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1456Slc = r.DecodeBytes(yys1456Slc, true, true)
		yys1456 := string(yys1456Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1456 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1457 := &x.Port
				yym1458 := z.DecBinary()
				_ = yym1458
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1457) {
				} else if !yym1458 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1457)
				} else {
					z.DecFallback(yyv1457, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1456)
		} // end switch yys1456
	} // end for yyj1456
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1459 int
	var yyb1459 bool
	var yyhl1459 bool = l >= 0
	yyj1459++
	if yyhl1459 {
		yyb1459 = yyj1459 > l
	} else {
		yyb1459 = r.CheckBreak()
	}
	if yyb1459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1460 := &x.Port
		yym1461 := z.DecBinary()
		_ = yym1461
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1460) {
		} else if !yym1461 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1460)
		} else {
			z.DecFallback(yyv1460, false)
		}
	}
	for {
		yyj1459++
		if yyhl1459 {
			yyb1459 = yyj1459 > l
		} else {
			yyb1459 = r.CheckBreak()
		}
		if yyb1459 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1459-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1462 := z.EncBinary()
		_ = yym1462
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1463 := !z.EncBinary()
			yy2arr1463 := z.EncBasicHandle().StructToArray
			var yyq1463 [1]bool
			_, _, _ = yysep1463, yyq1463, yy2arr1463
			const yyr1463 bool = false
			yyq1463[0] = len(x.Command) != 0
			var yynn1463 int
			if yyr1463 || yy2arr1463 {
				r.EncodeArrayStart(1)
			} else {
				yynn1463 = 0
				for _, b := range yyq1463 {
					if b {
						yynn1463++
					}
				}
				r.EncodeMapStart(yynn1463)
				yynn1463 = 0
			}
			if yyr1463 || yy2arr1463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1463[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1465 := z.EncBinary()
						_ = yym1465
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1463[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1466 := z.EncBinary()
						_ = yym1466
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1463 || yy2arr1463 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1467 := z.DecBinary()
	_ = yym1467
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1468 := r.ContainerType()
		if yyct1468 == codecSelferValueTypeMap1234 {
			yyl1468 := r.ReadMapStart()
			if yyl1468 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1468, d)
			}
		} else if yyct1468 == codecSelferValueTypeArray1234 {
			yyl1468 := r.ReadArrayStart()
			if yyl1468 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1468, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1469Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1469Slc
	var yyhl1469 bool = l >= 0
	for yyj1469 := 0; ; yyj1469++ {
		if yyhl1469 {
			if yyj1469 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1469Slc = r.DecodeBytes(yys1469Slc, true, true)
		yys1469 := string(yys1469Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1469 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1470 := &x.Command
				yym1471 := z.DecBinary()
				_ = yym1471
				if false {
				} else {
					z.F.DecSliceStringX(yyv1470, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1469)
		} // end switch yys1469
	} // end for yyj1469
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1472 int
	var yyb1472 bool
	var yyhl1472 bool = l >= 0
	yyj1472++
	if yyhl1472 {
		yyb1472 = yyj1472 > l
	} else {
		yyb1472 = r.CheckBreak()
	}
	if yyb1472 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1473 := &x.Command
		yym1474 := z.DecBinary()
		_ = yym1474
		if false {
		} else {
			z.F.DecSliceStringX(yyv1473, false, d)
		}
	}
	for {
		yyj1472++
		if yyhl1472 {
			yyb1472 = yyj1472 > l
		} else {
			yyb1472 = r.CheckBreak()
		}
		if yyb1472 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1472-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1475 := z.EncBinary()
		_ = yym1475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1476 := !z.EncBinary()
			yy2arr1476 := z.EncBasicHandle().StructToArray
			var yyq1476 [8]bool
			_, _, _ = yysep1476, yyq1476, yy2arr1476
			const yyr1476 bool = false
			yyq1476[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1476[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1476[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1476[3] = x.InitialDelaySeconds != 0
			yyq1476[4] = x.TimeoutSeconds != 0
			yyq1476[5] = x.PeriodSeconds != 0
			yyq1476[6] = x.SuccessThreshold != 0
			yyq1476[7] = x.FailureThreshold != 0
			var yynn1476 int
			if yyr1476 || yy2arr1476 {
				r.EncodeArrayStart(8)
			} else {
				yynn1476 = 0
				for _, b := range yyq1476 {
					if b {
						yynn1476++
					}
				}
				r.EncodeMapStart(yynn1476)
				yynn1476 = 0
			}
			var yyn1477 bool
			if x.Handler.Exec == nil {
				yyn1477 = true
				goto LABEL1477
			}
		LABEL1477:
			if yyr1476 || yy2arr1476 {
				if yyn1477 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1476[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1476[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1477 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1478 bool
			if x.Handler.HTTPGet == nil {
				yyn1478 = true
				goto LABEL1478
			}
		LABEL1478:
			if yyr1476 || yy2arr1476 {
				if yyn1478 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1476[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1476[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1478 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1479 bool
			if x.Handler.TCPSocket == nil {
				yyn1479 = true
				goto LABEL1479
			}
		LABEL1479:
			if yyr1476 || yy2arr1476 {
				if yyn1479 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1476[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1476[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1479 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1476 || yy2arr1476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1476[3] {
					yym1481 := z.EncBinary()
					_ = yym1481
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1476[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1482 := z.EncBinary()
					_ = yym1482
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1476 || yy2arr1476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1476[4] {
					yym1484 := z.EncBinary()
					_ = yym1484
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1476[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1485 := z.EncBinary()
					_ = yym1485
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1476 || yy2arr1476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1476[5] {
					yym1487 := z.EncBinary()
					_ = yym1487
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1476[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1488 := z.EncBinary()
					_ = yym1488
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1476 || yy2arr1476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1476[6] {
					yym1490 := z.EncBinary()
					_ = yym1490
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1476[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1491 := z.EncBinary()
					_ = yym1491
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1476 || yy2arr1476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1476[7] {
					yym1493 := z.EncBinary()
					_ = yym1493
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1476[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1494 := z.EncBinary()
					_ = yym1494
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1476 || yy2arr1476 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1495 := z.DecBinary()
	_ = yym1495
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1496 := r.ContainerType()
		if yyct1496 == codecSelferValueTypeMap1234 {
			yyl1496 := r.ReadMapStart()
			if yyl1496 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1496, d)
			}
		} else if yyct1496 == codecSelferValueTypeArray1234 {
			yyl1496 := r.ReadArrayStart()
			if yyl1496 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1496, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1497Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1497Slc
	var yyhl1497 bool = l >= 0
	for yyj1497 := 0; ; yyj1497++ {
		if yyhl1497 {
			if yyj1497 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1497Slc = r.DecodeBytes(yys1497Slc, true, true)
		yys1497 := string(yys1497Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1497 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1497)
		} // end switch yys1497
	} // end for yyj1497
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1506 int
	var yyb1506 bool
	var yyhl1506 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1506++
	if yyhl1506 {
		yyb1506 = yyj1506 > l
	} else {
		yyb1506 = r.CheckBreak()
	}
	if yyb1506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1506++
	if yyhl1506 {
		yyb1506 = yyj1506 > l
	} else {
		yyb1506 = r.CheckBreak()
	}
	if yyb1506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1506++
	if yyhl1506 {
		yyb1506 = yyj1506 > l
	} else {
		yyb1506 = r.CheckBreak()
	}
	if yyb1506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1506++
	if yyhl1506 {
		yyb1506 = yyj1506 > l
	} else {
		yyb1506 = r.CheckBreak()
	}
	if yyb1506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1506++
	if yyhl1506 {
		yyb1506 = yyj1506 > l
	} else {
		yyb1506 = r.CheckBreak()
	}
	if yyb1506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1506++
	if yyhl1506 {
		yyb1506 = yyj1506 > l
	} else {
		yyb1506 = r.CheckBreak()
	}
	if yyb1506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1506++
	if yyhl1506 {
		yyb1506 = yyj1506 > l
	} else {
		yyb1506 = r.CheckBreak()
	}
	if yyb1506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1506++
	if yyhl1506 {
		yyb1506 = yyj1506 > l
	} else {
		yyb1506 = r.CheckBreak()
	}
	if yyb1506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1506++
		if yyhl1506 {
			yyb1506 = yyj1506 > l
		} else {
			yyb1506 = r.CheckBreak()
		}
		if yyb1506 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1506-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1515 := z.EncBinary()
	_ = yym1515
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1516 := z.DecBinary()
	_ = yym1516
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1517 := z.EncBinary()
	_ = yym1517
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1518 := z.DecBinary()
	_ = yym1518
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1519 := z.EncBinary()
		_ = yym1519
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1520 := !z.EncBinary()
			yy2arr1520 := z.EncBasicHandle().StructToArray
			var yyq1520 [2]bool
			_, _, _ = yysep1520, yyq1520, yy2arr1520
			const yyr1520 bool = false
			yyq1520[0] = len(x.Add) != 0
			yyq1520[1] = len(x.Drop) != 0
			var yynn1520 int
			if yyr1520 || yy2arr1520 {
				r.EncodeArrayStart(2)
			} else {
				yynn1520 = 0
				for _, b := range yyq1520 {
					if b {
						yynn1520++
					}
				}
				r.EncodeMapStart(yynn1520)
				yynn1520 = 0
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1520[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1522 := z.EncBinary()
						_ = yym1522
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1520[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1523 := z.EncBinary()
						_ = yym1523
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1520[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1525 := z.EncBinary()
						_ = yym1525
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1520[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1526 := z.EncBinary()
						_ = yym1526
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1520 || yy2arr1520 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1527 := z.DecBinary()
	_ = yym1527
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1528 := r.ContainerType()
		if yyct1528 == codecSelferValueTypeMap1234 {
			yyl1528 := r.ReadMapStart()
			if yyl1528 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1528, d)
			}
		} else if yyct1528 == codecSelferValueTypeArray1234 {
			yyl1528 := r.ReadArrayStart()
			if yyl1528 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1528, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1529Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1529Slc
	var yyhl1529 bool = l >= 0
	for yyj1529 := 0; ; yyj1529++ {
		if yyhl1529 {
			if yyj1529 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1529Slc = r.DecodeBytes(yys1529Slc, true, true)
		yys1529 := string(yys1529Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1529 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1530 := &x.Add
				yym1531 := z.DecBinary()
				_ = yym1531
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1530), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1532 := &x.Drop
				yym1533 := z.DecBinary()
				_ = yym1533
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1532), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1529)
		} // end switch yys1529
	} // end for yyj1529
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1534 int
	var yyb1534 bool
	var yyhl1534 bool = l >= 0
	yyj1534++
	if yyhl1534 {
		yyb1534 = yyj1534 > l
	} else {
		yyb1534 = r.CheckBreak()
	}
	if yyb1534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1535 := &x.Add
		yym1536 := z.DecBinary()
		_ = yym1536
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1535), d)
		}
	}
	yyj1534++
	if yyhl1534 {
		yyb1534 = yyj1534 > l
	} else {
		yyb1534 = r.CheckBreak()
	}
	if yyb1534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1537 := &x.Drop
		yym1538 := z.DecBinary()
		_ = yym1538
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1537), d)
		}
	}
	for {
		yyj1534++
		if yyhl1534 {
			yyb1534 = yyj1534 > l
		} else {
			yyb1534 = r.CheckBreak()
		}
		if yyb1534 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1534-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1539 := z.EncBinary()
		_ = yym1539
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1540 := !z.EncBinary()
			yy2arr1540 := z.EncBasicHandle().StructToArray
			var yyq1540 [2]bool
			_, _, _ = yysep1540, yyq1540, yy2arr1540
			const yyr1540 bool = false
			yyq1540[0] = len(x.Limits) != 0
			yyq1540[1] = len(x.Requests) != 0
			var yynn1540 int
			if yyr1540 || yy2arr1540 {
				r.EncodeArrayStart(2)
			} else {
				yynn1540 = 0
				for _, b := range yyq1540 {
					if b {
						yynn1540++
					}
				}
				r.EncodeMapStart(yynn1540)
				yynn1540 = 0
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1540[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1540[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1540[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1540[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1543 := z.DecBinary()
	_ = yym1543
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1544 := r.ContainerType()
		if yyct1544 == codecSelferValueTypeMap1234 {
			yyl1544 := r.ReadMapStart()
			if yyl1544 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1544, d)
			}
		} else if yyct1544 == codecSelferValueTypeArray1234 {
			yyl1544 := r.ReadArrayStart()
			if yyl1544 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1544, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1545Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1545Slc
	var yyhl1545 bool = l >= 0
	for yyj1545 := 0; ; yyj1545++ {
		if yyhl1545 {
			if yyj1545 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1545Slc = r.DecodeBytes(yys1545Slc, true, true)
		yys1545 := string(yys1545Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1545 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1546 := &x.Limits
				yyv1546.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1547 := &x.Requests
				yyv1547.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1545)
		} // end switch yys1545
	} // end for yyj1545
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1548 int
	var yyb1548 bool
	var yyhl1548 bool = l >= 0
	yyj1548++
	if yyhl1548 {
		yyb1548 = yyj1548 > l
	} else {
		yyb1548 = r.CheckBreak()
	}
	if yyb1548 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1549 := &x.Limits
		yyv1549.CodecDecodeSelf(d)
	}
	yyj1548++
	if yyhl1548 {
		yyb1548 = yyj1548 > l
	} else {
		yyb1548 = r.CheckBreak()
	}
	if yyb1548 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1550 := &x.Requests
		yyv1550.CodecDecodeSelf(d)
	}
	for {
		yyj1548++
		if yyhl1548 {
			yyb1548 = yyj1548 > l
		} else {
			yyb1548 = r.CheckBreak()
		}
		if yyb1548 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1548-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1551 := z.EncBinary()
		_ = yym1551
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1552 := !z.EncBinary()
			yy2arr1552 := z.EncBasicHandle().StructToArray
			var yyq1552 [18]bool
			_, _, _ = yysep1552, yyq1552, yy2arr1552
			const yyr1552 bool = false
			yyq1552[2] = len(x.Command) != 0
			yyq1552[3] = len(x.Args) != 0
			yyq1552[4] = x.WorkingDir != ""
			yyq1552[5] = len(x.Ports) != 0
			yyq1552[6] = len(x.Env) != 0
			yyq1552[7] = true
			yyq1552[8] = len(x.VolumeMounts) != 0
			yyq1552[9] = x.LivenessProbe != nil
			yyq1552[10] = x.ReadinessProbe != nil
			yyq1552[11] = x.Lifecycle != nil
			yyq1552[12] = x.TerminationMessagePath != ""
			yyq1552[14] = x.SecurityContext != nil
			yyq1552[15] = x.Stdin != false
			yyq1552[16] = x.StdinOnce != false
			yyq1552[17] = x.TTY != false
			var yynn1552 int
			if yyr1552 || yy2arr1552 {
				r.EncodeArrayStart(18)
			} else {
				yynn1552 = 3
				for _, b := range yyq1552 {
					if b {
						yynn1552++
					}
				}
				r.EncodeMapStart(yynn1552)
				yynn1552 = 0
			}
			if yyr1552 || yy2arr1552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1554 := z.EncBinary()
				_ = yym1554
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1555 := z.EncBinary()
				_ = yym1555
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1552 || yy2arr1552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1557 := z.EncBinary()
				_ = yym1557
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1558 := z.EncBinary()
				_ = yym1558
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1552 || yy2arr1552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1552[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1560 := z.EncBinary()
						_ = yym1560
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1552[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1561 := z.EncBinary()
						_ = yym1561
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1552 || yy2arr1552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1552[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1563 := z.EncBinary()
						_ = yym1563
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1552[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1564 := z.EncBinary()
						_ = yym1564
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1552 || yy2arr1552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1552[4] {
					yym1566 := z.EncBinary()
					_ = yym1566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1552[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1567 := z.EncBinary()
					_ = yym1567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1552 || yy2arr1552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1552[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1569 := z.EncBinary()
						_ = yym1569
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1552[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1570 := z.EncBinary()
						_ = yym1570
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1552 || yy2arr1552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1552[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1572 := z.EncBinary()
						_ = yym1572
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1552[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1573 := z.EncBinary()
						_ = yym1573
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1552 || yy2arr1552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1552[7] {
					yy1575 := &x.Resources
					yy1575.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1552[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1576 := &x.Resources
					yy1576.CodecEncodeSelf(e)
				}
			}
			if yyr1552 || yy2arr1552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1552[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1578 := z.EncBinary()
						_ = yym1578
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1552[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1579 := z.EncBinary()
						_ = yym1579
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1552 || yy2arr1552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1552[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1552[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1552 || yy2arr1552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1552[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1552[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1552 || yy2arr1552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1552[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1552[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1552 || yy2arr1552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1552[12] {
					yym1584 := z.EncBinary()
					_ = yym1584
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1552[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1585 := z.EncBinary()
					_ = yym1585
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1552 || yy2arr1552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1552 || yy2arr1552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1552[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1552[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1552 || yy2arr1552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1552[15] {
					yym1589 := z.EncBinary()
					_ = yym1589
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1552[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1590 := z.EncBinary()
					_ = yym1590
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1552 || yy2arr1552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1552[16] {
					yym1592 := z.EncBinary()
					_ = yym1592
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1552[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1593 := z.EncBinary()
					_ = yym1593
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1552 || yy2arr1552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1552[17] {
					yym1595 := z.EncBinary()
					_ = yym1595
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1552[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1596 := z.EncBinary()
					_ = yym1596
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1552 || yy2arr1552 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1597 := z.DecBinary()
	_ = yym1597
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1598 := r.ContainerType()
		if yyct1598 == codecSelferValueTypeMap1234 {
			yyl1598 := r.ReadMapStart()
			if yyl1598 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1598, d)
			}
		} else if yyct1598 == codecSelferValueTypeArray1234 {
			yyl1598 := r.ReadArrayStart()
			if yyl1598 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1598, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1599Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1599Slc
	var yyhl1599 bool = l >= 0
	for yyj1599 := 0; ; yyj1599++ {
		if yyhl1599 {
			if yyj1599 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1599Slc = r.DecodeBytes(yys1599Slc, true, true)
		yys1599 := string(yys1599Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1599 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1602 := &x.Command
				yym1603 := z.DecBinary()
				_ = yym1603
				if false {
				} else {
					z.F.DecSliceStringX(yyv1602, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1604 := &x.Args
				yym1605 := z.DecBinary()
				_ = yym1605
				if false {
				} else {
					z.F.DecSliceStringX(yyv1604, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1607 := &x.Ports
				yym1608 := z.DecBinary()
				_ = yym1608
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1607), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1609 := &x.Env
				yym1610 := z.DecBinary()
				_ = yym1610
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1609), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1611 := &x.Resources
				yyv1611.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1612 := &x.VolumeMounts
				yym1613 := z.DecBinary()
				_ = yym1613
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1612), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1599)
		} // end switch yys1599
	} // end for yyj1599
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1623 int
	var yyb1623 bool
	var yyhl1623 bool = l >= 0
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1626 := &x.Command
		yym1627 := z.DecBinary()
		_ = yym1627
		if false {
		} else {
			z.F.DecSliceStringX(yyv1626, false, d)
		}
	}
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1628 := &x.Args
		yym1629 := z.DecBinary()
		_ = yym1629
		if false {
		} else {
			z.F.DecSliceStringX(yyv1628, false, d)
		}
	}
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1631 := &x.Ports
		yym1632 := z.DecBinary()
		_ = yym1632
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1631), d)
		}
	}
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1633 := &x.Env
		yym1634 := z.DecBinary()
		_ = yym1634
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1633), d)
		}
	}
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1635 := &x.Resources
		yyv1635.CodecDecodeSelf(d)
	}
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1636 := &x.VolumeMounts
		yym1637 := z.DecBinary()
		_ = yym1637
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1636), d)
		}
	}
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1623++
		if yyhl1623 {
			yyb1623 = yyj1623 > l
		} else {
			yyb1623 = r.CheckBreak()
		}
		if yyb1623 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1623-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1647 := z.EncBinary()
		_ = yym1647
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1648 := !z.EncBinary()
			yy2arr1648 := z.EncBasicHandle().StructToArray
			var yyq1648 [3]bool
			_, _, _ = yysep1648, yyq1648, yy2arr1648
			const yyr1648 bool = false
			yyq1648[0] = x.Exec != nil
			yyq1648[1] = x.HTTPGet != nil
			yyq1648[2] = x.TCPSocket != nil
			var yynn1648 int
			if yyr1648 || yy2arr1648 {
				r.EncodeArrayStart(3)
			} else {
				yynn1648 = 0
				for _, b := range yyq1648 {
					if b {
						yynn1648++
					}
				}
				r.EncodeMapStart(yynn1648)
				yynn1648 = 0
			}
			if yyr1648 || yy2arr1648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1648[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1648[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1648 || yy2arr1648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1648[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1648[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1648 || yy2arr1648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1648[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1648[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1648 || yy2arr1648 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1652 := z.DecBinary()
	_ = yym1652
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1653 := r.ContainerType()
		if yyct1653 == codecSelferValueTypeMap1234 {
			yyl1653 := r.ReadMapStart()
			if yyl1653 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1653, d)
			}
		} else if yyct1653 == codecSelferValueTypeArray1234 {
			yyl1653 := r.ReadArrayStart()
			if yyl1653 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1653, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1654Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1654Slc
	var yyhl1654 bool = l >= 0
	for yyj1654 := 0; ; yyj1654++ {
		if yyhl1654 {
			if yyj1654 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1654Slc = r.DecodeBytes(yys1654Slc, true, true)
		yys1654 := string(yys1654Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1654 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1654)
		} // end switch yys1654
	} // end for yyj1654
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1658 int
	var yyb1658 bool
	var yyhl1658 bool = l >= 0
	yyj1658++
	if yyhl1658 {
		yyb1658 = yyj1658 > l
	} else {
		yyb1658 = r.CheckBreak()
	}
	if yyb1658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1658++
	if yyhl1658 {
		yyb1658 = yyj1658 > l
	} else {
		yyb1658 = r.CheckBreak()
	}
	if yyb1658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1658++
	if yyhl1658 {
		yyb1658 = yyj1658 > l
	} else {
		yyb1658 = r.CheckBreak()
	}
	if yyb1658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1658++
		if yyhl1658 {
			yyb1658 = yyj1658 > l
		} else {
			yyb1658 = r.CheckBreak()
		}
		if yyb1658 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1658-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1662 := z.EncBinary()
		_ = yym1662
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1663 := !z.EncBinary()
			yy2arr1663 := z.EncBasicHandle().StructToArray
			var yyq1663 [2]bool
			_, _, _ = yysep1663, yyq1663, yy2arr1663
			const yyr1663 bool = false
			yyq1663[0] = x.PostStart != nil
			yyq1663[1] = x.PreStop != nil
			var yynn1663 int
			if yyr1663 || yy2arr1663 {
				r.EncodeArrayStart(2)
			} else {
				yynn1663 = 0
				for _, b := range yyq1663 {
					if b {
						yynn1663++
					}
				}
				r.EncodeMapStart(yynn1663)
				yynn1663 = 0
			}
			if yyr1663 || yy2arr1663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1663[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1663[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1663 || yy2arr1663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1663[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1663[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1663 || yy2arr1663 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1666 := z.DecBinary()
	_ = yym1666
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1667 := r.ContainerType()
		if yyct1667 == codecSelferValueTypeMap1234 {
			yyl1667 := r.ReadMapStart()
			if yyl1667 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1667, d)
			}
		} else if yyct1667 == codecSelferValueTypeArray1234 {
			yyl1667 := r.ReadArrayStart()
			if yyl1667 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1667, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1668Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1668Slc
	var yyhl1668 bool = l >= 0
	for yyj1668 := 0; ; yyj1668++ {
		if yyhl1668 {
			if yyj1668 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1668Slc = r.DecodeBytes(yys1668Slc, true, true)
		yys1668 := string(yys1668Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1668 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1668)
		} // end switch yys1668
	} // end for yyj1668
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1671 int
	var yyb1671 bool
	var yyhl1671 bool = l >= 0
	yyj1671++
	if yyhl1671 {
		yyb1671 = yyj1671 > l
	} else {
		yyb1671 = r.CheckBreak()
	}
	if yyb1671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1671++
	if yyhl1671 {
		yyb1671 = yyj1671 > l
	} else {
		yyb1671 = r.CheckBreak()
	}
	if yyb1671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1671++
		if yyhl1671 {
			yyb1671 = yyj1671 > l
		} else {
			yyb1671 = r.CheckBreak()
		}
		if yyb1671 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1671-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1674 := z.EncBinary()
	_ = yym1674
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1675 := z.DecBinary()
	_ = yym1675
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1676 := z.EncBinary()
		_ = yym1676
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1677 := !z.EncBinary()
			yy2arr1677 := z.EncBasicHandle().StructToArray
			var yyq1677 [2]bool
			_, _, _ = yysep1677, yyq1677, yy2arr1677
			const yyr1677 bool = false
			yyq1677[0] = x.Reason != ""
			yyq1677[1] = x.Message != ""
			var yynn1677 int
			if yyr1677 || yy2arr1677 {
				r.EncodeArrayStart(2)
			} else {
				yynn1677 = 0
				for _, b := range yyq1677 {
					if b {
						yynn1677++
					}
				}
				r.EncodeMapStart(yynn1677)
				yynn1677 = 0
			}
			if yyr1677 || yy2arr1677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1677[0] {
					yym1679 := z.EncBinary()
					_ = yym1679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1677[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1680 := z.EncBinary()
					_ = yym1680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1677 || yy2arr1677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1677[1] {
					yym1682 := z.EncBinary()
					_ = yym1682
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1677[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1683 := z.EncBinary()
					_ = yym1683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1677 || yy2arr1677 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1684 := z.DecBinary()
	_ = yym1684
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1685 := r.ContainerType()
		if yyct1685 == codecSelferValueTypeMap1234 {
			yyl1685 := r.ReadMapStart()
			if yyl1685 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1685, d)
			}
		} else if yyct1685 == codecSelferValueTypeArray1234 {
			yyl1685 := r.ReadArrayStart()
			if yyl1685 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1685, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1686Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1686Slc
	var yyhl1686 bool = l >= 0
	for yyj1686 := 0; ; yyj1686++ {
		if yyhl1686 {
			if yyj1686 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1686Slc = r.DecodeBytes(yys1686Slc, true, true)
		yys1686 := string(yys1686Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1686 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1686)
		} // end switch yys1686
	} // end for yyj1686
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1689 int
	var yyb1689 bool
	var yyhl1689 bool = l >= 0
	yyj1689++
	if yyhl1689 {
		yyb1689 = yyj1689 > l
	} else {
		yyb1689 = r.CheckBreak()
	}
	if yyb1689 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1689++
	if yyhl1689 {
		yyb1689 = yyj1689 > l
	} else {
		yyb1689 = r.CheckBreak()
	}
	if yyb1689 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1689++
		if yyhl1689 {
			yyb1689 = yyj1689 > l
		} else {
			yyb1689 = r.CheckBreak()
		}
		if yyb1689 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1689-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1692 := z.EncBinary()
		_ = yym1692
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1693 := !z.EncBinary()
			yy2arr1693 := z.EncBasicHandle().StructToArray
			var yyq1693 [1]bool
			_, _, _ = yysep1693, yyq1693, yy2arr1693
			const yyr1693 bool = false
			yyq1693[0] = true
			var yynn1693 int
			if yyr1693 || yy2arr1693 {
				r.EncodeArrayStart(1)
			} else {
				yynn1693 = 0
				for _, b := range yyq1693 {
					if b {
						yynn1693++
					}
				}
				r.EncodeMapStart(yynn1693)
				yynn1693 = 0
			}
			if yyr1693 || yy2arr1693 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1693[0] {
					yy1695 := &x.StartedAt
					yym1696 := z.EncBinary()
					_ = yym1696
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1695) {
					} else if yym1696 {
						z.EncBinaryMarshal(yy1695)
					} else if !yym1696 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1695)
					} else {
						z.EncFallback(yy1695)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1693[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1697 := &x.StartedAt
					yym1698 := z.EncBinary()
					_ = yym1698
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1697) {
					} else if yym1698 {
						z.EncBinaryMarshal(yy1697)
					} else if !yym1698 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1697)
					} else {
						z.EncFallback(yy1697)
					}
				}
			}
			if yyr1693 || yy2arr1693 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1699 := z.DecBinary()
	_ = yym1699
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1700 := r.ContainerType()
		if yyct1700 == codecSelferValueTypeMap1234 {
			yyl1700 := r.ReadMapStart()
			if yyl1700 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1700, d)
			}
		} else if yyct1700 == codecSelferValueTypeArray1234 {
			yyl1700 := r.ReadArrayStart()
			if yyl1700 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1700, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1701Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1701Slc
	var yyhl1701 bool = l >= 0
	for yyj1701 := 0; ; yyj1701++ {
		if yyhl1701 {
			if yyj1701 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1701Slc = r.DecodeBytes(yys1701Slc, true, true)
		yys1701 := string(yys1701Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1701 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1702 := &x.StartedAt
				yym1703 := z.DecBinary()
				_ = yym1703
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1702) {
				} else if yym1703 {
					z.DecBinaryUnmarshal(yyv1702)
				} else if !yym1703 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1702)
				} else {
					z.DecFallback(yyv1702, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1701)
		} // end switch yys1701
	} // end for yyj1701
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1704 int
	var yyb1704 bool
	var yyhl1704 bool = l >= 0
	yyj1704++
	if yyhl1704 {
		yyb1704 = yyj1704 > l
	} else {
		yyb1704 = r.CheckBreak()
	}
	if yyb1704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1705 := &x.StartedAt
		yym1706 := z.DecBinary()
		_ = yym1706
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1705) {
		} else if yym1706 {
			z.DecBinaryUnmarshal(yyv1705)
		} else if !yym1706 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1705)
		} else {
			z.DecFallback(yyv1705, false)
		}
	}
	for {
		yyj1704++
		if yyhl1704 {
			yyb1704 = yyj1704 > l
		} else {
			yyb1704 = r.CheckBreak()
		}
		if yyb1704 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1704-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1707 := z.EncBinary()
		_ = yym1707
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1708 := !z.EncBinary()
			yy2arr1708 := z.EncBasicHandle().StructToArray
			var yyq1708 [7]bool
			_, _, _ = yysep1708, yyq1708, yy2arr1708
			const yyr1708 bool = false
			yyq1708[1] = x.Signal != 0
			yyq1708[2] = x.Reason != ""
			yyq1708[3] = x.Message != ""
			yyq1708[4] = true
			yyq1708[5] = true
			yyq1708[6] = x.ContainerID != ""
			var yynn1708 int
			if yyr1708 || yy2arr1708 {
				r.EncodeArrayStart(7)
			} else {
				yynn1708 = 1
				for _, b := range yyq1708 {
					if b {
						yynn1708++
					}
				}
				r.EncodeMapStart(yynn1708)
				yynn1708 = 0
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1710 := z.EncBinary()
				_ = yym1710
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1711 := z.EncBinary()
				_ = yym1711
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1708[1] {
					yym1713 := z.EncBinary()
					_ = yym1713
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1708[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1714 := z.EncBinary()
					_ = yym1714
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1708[2] {
					yym1716 := z.EncBinary()
					_ = yym1716
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1708[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1717 := z.EncBinary()
					_ = yym1717
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1708[3] {
					yym1719 := z.EncBinary()
					_ = yym1719
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1708[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1720 := z.EncBinary()
					_ = yym1720
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1708[4] {
					yy1722 := &x.StartedAt
					yym1723 := z.EncBinary()
					_ = yym1723
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1722) {
					} else if yym1723 {
						z.EncBinaryMarshal(yy1722)
					} else if !yym1723 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1722)
					} else {
						z.EncFallback(yy1722)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1708[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1724 := &x.StartedAt
					yym1725 := z.EncBinary()
					_ = yym1725
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1724) {
					} else if yym1725 {
						z.EncBinaryMarshal(yy1724)
					} else if !yym1725 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1724)
					} else {
						z.EncFallback(yy1724)
					}
				}
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1708[5] {
					yy1727 := &x.FinishedAt
					yym1728 := z.EncBinary()
					_ = yym1728
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1727) {
					} else if yym1728 {
						z.EncBinaryMarshal(yy1727)
					} else if !yym1728 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1727)
					} else {
						z.EncFallback(yy1727)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1708[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1729 := &x.FinishedAt
					yym1730 := z.EncBinary()
					_ = yym1730
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1729) {
					} else if yym1730 {
						z.EncBinaryMarshal(yy1729)
					} else if !yym1730 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1729)
					} else {
						z.EncFallback(yy1729)
					}
				}
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1708[6] {
					yym1732 := z.EncBinary()
					_ = yym1732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1708[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1733 := z.EncBinary()
					_ = yym1733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1734 := z.DecBinary()
	_ = yym1734
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1735 := r.ContainerType()
		if yyct1735 == codecSelferValueTypeMap1234 {
			yyl1735 := r.ReadMapStart()
			if yyl1735 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1735, d)
			}
		} else if yyct1735 == codecSelferValueTypeArray1234 {
			yyl1735 := r.ReadArrayStart()
			if yyl1735 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1735, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1736Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1736Slc
	var yyhl1736 bool = l >= 0
	for yyj1736 := 0; ; yyj1736++ {
		if yyhl1736 {
			if yyj1736 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1736Slc = r.DecodeBytes(yys1736Slc, true, true)
		yys1736 := string(yys1736Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1736 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1741 := &x.StartedAt
				yym1742 := z.DecBinary()
				_ = yym1742
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1741) {
				} else if yym1742 {
					z.DecBinaryUnmarshal(yyv1741)
				} else if !yym1742 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1741)
				} else {
					z.DecFallback(yyv1741, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1743 := &x.FinishedAt
				yym1744 := z.DecBinary()
				_ = yym1744
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1743) {
				} else if yym1744 {
					z.DecBinaryUnmarshal(yyv1743)
				} else if !yym1744 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1743)
				} else {
					z.DecFallback(yyv1743, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1736)
		} // end switch yys1736
	} // end for yyj1736
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1746 int
	var yyb1746 bool
	var yyhl1746 bool = l >= 0
	yyj1746++
	if yyhl1746 {
		yyb1746 = yyj1746 > l
	} else {
		yyb1746 = r.CheckBreak()
	}
	if yyb1746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1746++
	if yyhl1746 {
		yyb1746 = yyj1746 > l
	} else {
		yyb1746 = r.CheckBreak()
	}
	if yyb1746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1746++
	if yyhl1746 {
		yyb1746 = yyj1746 > l
	} else {
		yyb1746 = r.CheckBreak()
	}
	if yyb1746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1746++
	if yyhl1746 {
		yyb1746 = yyj1746 > l
	} else {
		yyb1746 = r.CheckBreak()
	}
	if yyb1746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1746++
	if yyhl1746 {
		yyb1746 = yyj1746 > l
	} else {
		yyb1746 = r.CheckBreak()
	}
	if yyb1746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1751 := &x.StartedAt
		yym1752 := z.DecBinary()
		_ = yym1752
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1751) {
		} else if yym1752 {
			z.DecBinaryUnmarshal(yyv1751)
		} else if !yym1752 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1751)
		} else {
			z.DecFallback(yyv1751, false)
		}
	}
	yyj1746++
	if yyhl1746 {
		yyb1746 = yyj1746 > l
	} else {
		yyb1746 = r.CheckBreak()
	}
	if yyb1746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1753 := &x.FinishedAt
		yym1754 := z.DecBinary()
		_ = yym1754
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1753) {
		} else if yym1754 {
			z.DecBinaryUnmarshal(yyv1753)
		} else if !yym1754 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1753)
		} else {
			z.DecFallback(yyv1753, false)
		}
	}
	yyj1746++
	if yyhl1746 {
		yyb1746 = yyj1746 > l
	} else {
		yyb1746 = r.CheckBreak()
	}
	if yyb1746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1746++
		if yyhl1746 {
			yyb1746 = yyj1746 > l
		} else {
			yyb1746 = r.CheckBreak()
		}
		if yyb1746 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1746-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1756 := z.EncBinary()
		_ = yym1756
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1757 := !z.EncBinary()
			yy2arr1757 := z.EncBasicHandle().StructToArray
			var yyq1757 [3]bool
			_, _, _ = yysep1757, yyq1757, yy2arr1757
			const yyr1757 bool = false
			yyq1757[0] = x.Waiting != nil
			yyq1757[1] = x.Running != nil
			yyq1757[2] = x.Terminated != nil
			var yynn1757 int
			if yyr1757 || yy2arr1757 {
				r.EncodeArrayStart(3)
			} else {
				yynn1757 = 0
				for _, b := range yyq1757 {
					if b {
						yynn1757++
					}
				}
				r.EncodeMapStart(yynn1757)
				yynn1757 = 0
			}
			if yyr1757 || yy2arr1757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1757[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1757[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1757 || yy2arr1757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1757[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1757[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1757 || yy2arr1757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1757[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1757[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1757 || yy2arr1757 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1761 := z.DecBinary()
	_ = yym1761
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1762 := r.ContainerType()
		if yyct1762 == codecSelferValueTypeMap1234 {
			yyl1762 := r.ReadMapStart()
			if yyl1762 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1762, d)
			}
		} else if yyct1762 == codecSelferValueTypeArray1234 {
			yyl1762 := r.ReadArrayStart()
			if yyl1762 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1762, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1763Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1763Slc
	var yyhl1763 bool = l >= 0
	for yyj1763 := 0; ; yyj1763++ {
		if yyhl1763 {
			if yyj1763 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1763Slc = r.DecodeBytes(yys1763Slc, true, true)
		yys1763 := string(yys1763Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1763 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1763)
		} // end switch yys1763
	} // end for yyj1763
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1767 int
	var yyb1767 bool
	var yyhl1767 bool = l >= 0
	yyj1767++
	if yyhl1767 {
		yyb1767 = yyj1767 > l
	} else {
		yyb1767 = r.CheckBreak()
	}
	if yyb1767 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1767++
	if yyhl1767 {
		yyb1767 = yyj1767 > l
	} else {
		yyb1767 = r.CheckBreak()
	}
	if yyb1767 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1767++
	if yyhl1767 {
		yyb1767 = yyj1767 > l
	} else {
		yyb1767 = r.CheckBreak()
	}
	if yyb1767 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1767++
		if yyhl1767 {
			yyb1767 = yyj1767 > l
		} else {
			yyb1767 = r.CheckBreak()
		}
		if yyb1767 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1767-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1771 := z.EncBinary()
		_ = yym1771
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1772 := !z.EncBinary()
			yy2arr1772 := z.EncBasicHandle().StructToArray
			var yyq1772 [8]bool
			_, _, _ = yysep1772, yyq1772, yy2arr1772
			const yyr1772 bool = false
			yyq1772[1] = true
			yyq1772[2] = true
			yyq1772[7] = x.ContainerID != ""
			var yynn1772 int
			if yyr1772 || yy2arr1772 {
				r.EncodeArrayStart(8)
			} else {
				yynn1772 = 5
				for _, b := range yyq1772 {
					if b {
						yynn1772++
					}
				}
				r.EncodeMapStart(yynn1772)
				yynn1772 = 0
			}
			if yyr1772 || yy2arr1772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1774 := z.EncBinary()
				_ = yym1774
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1775 := z.EncBinary()
				_ = yym1775
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1772 || yy2arr1772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1772[1] {
					yy1777 := &x.State
					yy1777.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1772[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1778 := &x.State
					yy1778.CodecEncodeSelf(e)
				}
			}
			if yyr1772 || yy2arr1772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1772[2] {
					yy1780 := &x.LastTerminationState
					yy1780.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1772[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1781 := &x.LastTerminationState
					yy1781.CodecEncodeSelf(e)
				}
			}
			if yyr1772 || yy2arr1772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1783 := z.EncBinary()
				_ = yym1783
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1784 := z.EncBinary()
				_ = yym1784
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1772 || yy2arr1772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1786 := z.EncBinary()
				_ = yym1786
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1787 := z.EncBinary()
				_ = yym1787
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1772 || yy2arr1772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1789 := z.EncBinary()
				_ = yym1789
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1790 := z.EncBinary()
				_ = yym1790
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1772 || yy2arr1772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1792 := z.EncBinary()
				_ = yym1792
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1793 := z.EncBinary()
				_ = yym1793
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1772 || yy2arr1772 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1772[7] {
					yym1795 := z.EncBinary()
					_ = yym1795
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1772[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1796 := z.EncBinary()
					_ = yym1796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1772 || yy2arr1772 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1797 := z.DecBinary()
	_ = yym1797
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1798 := r.ContainerType()
		if yyct1798 == codecSelferValueTypeMap1234 {
			yyl1798 := r.ReadMapStart()
			if yyl1798 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1798, d)
			}
		} else if yyct1798 == codecSelferValueTypeArray1234 {
			yyl1798 := r.ReadArrayStart()
			if yyl1798 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1798, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1799Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1799Slc
	var yyhl1799 bool = l >= 0
	for yyj1799 := 0; ; yyj1799++ {
		if yyhl1799 {
			if yyj1799 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1799Slc = r.DecodeBytes(yys1799Slc, true, true)
		yys1799 := string(yys1799Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1799 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1801 := &x.State
				yyv1801.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1802 := &x.LastTerminationState
				yyv1802.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1799)
		} // end switch yys1799
	} // end for yyj1799
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1808 int
	var yyb1808 bool
	var yyhl1808 bool = l >= 0
	yyj1808++
	if yyhl1808 {
		yyb1808 = yyj1808 > l
	} else {
		yyb1808 = r.CheckBreak()
	}
	if yyb1808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1808++
	if yyhl1808 {
		yyb1808 = yyj1808 > l
	} else {
		yyb1808 = r.CheckBreak()
	}
	if yyb1808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1810 := &x.State
		yyv1810.CodecDecodeSelf(d)
	}
	yyj1808++
	if yyhl1808 {
		yyb1808 = yyj1808 > l
	} else {
		yyb1808 = r.CheckBreak()
	}
	if yyb1808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1811 := &x.LastTerminationState
		yyv1811.CodecDecodeSelf(d)
	}
	yyj1808++
	if yyhl1808 {
		yyb1808 = yyj1808 > l
	} else {
		yyb1808 = r.CheckBreak()
	}
	if yyb1808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1808++
	if yyhl1808 {
		yyb1808 = yyj1808 > l
	} else {
		yyb1808 = r.CheckBreak()
	}
	if yyb1808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1808++
	if yyhl1808 {
		yyb1808 = yyj1808 > l
	} else {
		yyb1808 = r.CheckBreak()
	}
	if yyb1808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1808++
	if yyhl1808 {
		yyb1808 = yyj1808 > l
	} else {
		yyb1808 = r.CheckBreak()
	}
	if yyb1808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1808++
	if yyhl1808 {
		yyb1808 = yyj1808 > l
	} else {
		yyb1808 = r.CheckBreak()
	}
	if yyb1808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1808++
		if yyhl1808 {
			yyb1808 = yyj1808 > l
		} else {
			yyb1808 = r.CheckBreak()
		}
		if yyb1808 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1808-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1817 := z.EncBinary()
	_ = yym1817
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1818 := z.DecBinary()
	_ = yym1818
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1819 := z.EncBinary()
	_ = yym1819
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1820 := z.DecBinary()
	_ = yym1820
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1821 := z.EncBinary()
		_ = yym1821
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1822 := !z.EncBinary()
			yy2arr1822 := z.EncBasicHandle().StructToArray
			var yyq1822 [6]bool
			_, _, _ = yysep1822, yyq1822, yy2arr1822
			const yyr1822 bool = false
			yyq1822[2] = true
			yyq1822[3] = true
			yyq1822[4] = x.Reason != ""
			yyq1822[5] = x.Message != ""
			var yynn1822 int
			if yyr1822 || yy2arr1822 {
				r.EncodeArrayStart(6)
			} else {
				yynn1822 = 2
				for _, b := range yyq1822 {
					if b {
						yynn1822++
					}
				}
				r.EncodeMapStart(yynn1822)
				yynn1822 = 0
			}
			if yyr1822 || yy2arr1822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1822 || yy2arr1822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1822 || yy2arr1822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1822[2] {
					yy1826 := &x.LastProbeTime
					yym1827 := z.EncBinary()
					_ = yym1827
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1826) {
					} else if yym1827 {
						z.EncBinaryMarshal(yy1826)
					} else if !yym1827 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1826)
					} else {
						z.EncFallback(yy1826)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1822[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1828 := &x.LastProbeTime
					yym1829 := z.EncBinary()
					_ = yym1829
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1828) {
					} else if yym1829 {
						z.EncBinaryMarshal(yy1828)
					} else if !yym1829 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1828)
					} else {
						z.EncFallback(yy1828)
					}
				}
			}
			if yyr1822 || yy2arr1822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1822[3] {
					yy1831 := &x.LastTransitionTime
					yym1832 := z.EncBinary()
					_ = yym1832
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1831) {
					} else if yym1832 {
						z.EncBinaryMarshal(yy1831)
					} else if !yym1832 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1831)
					} else {
						z.EncFallback(yy1831)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1822[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1833 := &x.LastTransitionTime
					yym1834 := z.EncBinary()
					_ = yym1834
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1833) {
					} else if yym1834 {
						z.EncBinaryMarshal(yy1833)
					} else if !yym1834 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1833)
					} else {
						z.EncFallback(yy1833)
					}
				}
			}
			if yyr1822 || yy2arr1822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1822[4] {
					yym1836 := z.EncBinary()
					_ = yym1836
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1822[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1837 := z.EncBinary()
					_ = yym1837
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1822 || yy2arr1822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1822[5] {
					yym1839 := z.EncBinary()
					_ = yym1839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1822[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1840 := z.EncBinary()
					_ = yym1840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1822 || yy2arr1822 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1841 := z.DecBinary()
	_ = yym1841
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1842 := r.ContainerType()
		if yyct1842 == codecSelferValueTypeMap1234 {
			yyl1842 := r.ReadMapStart()
			if yyl1842 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1842, d)
			}
		} else if yyct1842 == codecSelferValueTypeArray1234 {
			yyl1842 := r.ReadArrayStart()
			if yyl1842 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1842, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1843Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1843Slc
	var yyhl1843 bool = l >= 0
	for yyj1843 := 0; ; yyj1843++ {
		if yyhl1843 {
			if yyj1843 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1843Slc = r.DecodeBytes(yys1843Slc, true, true)
		yys1843 := string(yys1843Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1843 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1846 := &x.LastProbeTime
				yym1847 := z.DecBinary()
				_ = yym1847
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1846) {
				} else if yym1847 {
					z.DecBinaryUnmarshal(yyv1846)
				} else if !yym1847 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1846)
				} else {
					z.DecFallback(yyv1846, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1848 := &x.LastTransitionTime
				yym1849 := z.DecBinary()
				_ = yym1849
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1848) {
				} else if yym1849 {
					z.DecBinaryUnmarshal(yyv1848)
				} else if !yym1849 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1848)
				} else {
					z.DecFallback(yyv1848, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1843)
		} // end switch yys1843
	} // end for yyj1843
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1852 int
	var yyb1852 bool
	var yyhl1852 bool = l >= 0
	yyj1852++
	if yyhl1852 {
		yyb1852 = yyj1852 > l
	} else {
		yyb1852 = r.CheckBreak()
	}
	if yyb1852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1852++
	if yyhl1852 {
		yyb1852 = yyj1852 > l
	} else {
		yyb1852 = r.CheckBreak()
	}
	if yyb1852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1852++
	if yyhl1852 {
		yyb1852 = yyj1852 > l
	} else {
		yyb1852 = r.CheckBreak()
	}
	if yyb1852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1855 := &x.LastProbeTime
		yym1856 := z.DecBinary()
		_ = yym1856
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1855) {
		} else if yym1856 {
			z.DecBinaryUnmarshal(yyv1855)
		} else if !yym1856 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1855)
		} else {
			z.DecFallback(yyv1855, false)
		}
	}
	yyj1852++
	if yyhl1852 {
		yyb1852 = yyj1852 > l
	} else {
		yyb1852 = r.CheckBreak()
	}
	if yyb1852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1857 := &x.LastTransitionTime
		yym1858 := z.DecBinary()
		_ = yym1858
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1857) {
		} else if yym1858 {
			z.DecBinaryUnmarshal(yyv1857)
		} else if !yym1858 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1857)
		} else {
			z.DecFallback(yyv1857, false)
		}
	}
	yyj1852++
	if yyhl1852 {
		yyb1852 = yyj1852 > l
	} else {
		yyb1852 = r.CheckBreak()
	}
	if yyb1852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1852++
	if yyhl1852 {
		yyb1852 = yyj1852 > l
	} else {
		yyb1852 = r.CheckBreak()
	}
	if yyb1852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1852++
		if yyhl1852 {
			yyb1852 = yyj1852 > l
		} else {
			yyb1852 = r.CheckBreak()
		}
		if yyb1852 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1852-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1861 := z.EncBinary()
	_ = yym1861
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1862 := z.DecBinary()
	_ = yym1862
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1863 := z.EncBinary()
		_ = yym1863
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1864 := !z.EncBinary()
			yy2arr1864 := z.EncBasicHandle().StructToArray
			var yyq1864 [4]bool
			_, _, _ = yysep1864, yyq1864, yy2arr1864
			const yyr1864 bool = false
			yyq1864[0] = x.Kind != ""
			yyq1864[1] = x.APIVersion != ""
			yyq1864[2] = true
			var yynn1864 int
			if yyr1864 || yy2arr1864 {
				r.EncodeArrayStart(4)
			} else {
				yynn1864 = 1
				for _, b := range yyq1864 {
					if b {
						yynn1864++
					}
				}
				r.EncodeMapStart(yynn1864)
				yynn1864 = 0
			}
			if yyr1864 || yy2arr1864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1864[0] {
					yym1866 := z.EncBinary()
					_ = yym1866
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1864[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1867 := z.EncBinary()
					_ = yym1867
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1864 || yy2arr1864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1864[1] {
					yym1869 := z.EncBinary()
					_ = yym1869
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1864[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1870 := z.EncBinary()
					_ = yym1870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1864 || yy2arr1864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1864[2] {
					yy1872 := &x.ListMeta
					yym1873 := z.EncBinary()
					_ = yym1873
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1872) {
					} else {
						z.EncFallback(yy1872)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1864[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1874 := &x.ListMeta
					yym1875 := z.EncBinary()
					_ = yym1875
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1874) {
					} else {
						z.EncFallback(yy1874)
					}
				}
			}
			if yyr1864 || yy2arr1864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1877 := z.EncBinary()
					_ = yym1877
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1878 := z.EncBinary()
					_ = yym1878
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1864 || yy2arr1864 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1879 := z.DecBinary()
	_ = yym1879
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1880 := r.ContainerType()
		if yyct1880 == codecSelferValueTypeMap1234 {
			yyl1880 := r.ReadMapStart()
			if yyl1880 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1880, d)
			}
		} else if yyct1880 == codecSelferValueTypeArray1234 {
			yyl1880 := r.ReadArrayStart()
			if yyl1880 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1880, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1881Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1881Slc
	var yyhl1881 bool = l >= 0
	for yyj1881 := 0; ; yyj1881++ {
		if yyhl1881 {
			if yyj1881 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1881Slc = r.DecodeBytes(yys1881Slc, true, true)
		yys1881 := string(yys1881Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1881 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1884 := &x.ListMeta
				yym1885 := z.DecBinary()
				_ = yym1885
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1884) {
				} else {
					z.DecFallback(yyv1884, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1886 := &x.Items
				yym1887 := z.DecBinary()
				_ = yym1887
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1886), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1881)
		} // end switch yys1881
	} // end for yyj1881
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1888 int
	var yyb1888 bool
	var yyhl1888 bool = l >= 0
	yyj1888++
	if yyhl1888 {
		yyb1888 = yyj1888 > l
	} else {
		yyb1888 = r.CheckBreak()
	}
	if yyb1888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1888++
	if yyhl1888 {
		yyb1888 = yyj1888 > l
	} else {
		yyb1888 = r.CheckBreak()
	}
	if yyb1888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1888++
	if yyhl1888 {
		yyb1888 = yyj1888 > l
	} else {
		yyb1888 = r.CheckBreak()
	}
	if yyb1888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1891 := &x.ListMeta
		yym1892 := z.DecBinary()
		_ = yym1892
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1891) {
		} else {
			z.DecFallback(yyv1891, false)
		}
	}
	yyj1888++
	if yyhl1888 {
		yyb1888 = yyj1888 > l
	} else {
		yyb1888 = r.CheckBreak()
	}
	if yyb1888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1893 := &x.Items
		yym1894 := z.DecBinary()
		_ = yym1894
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1893), d)
		}
	}
	for {
		yyj1888++
		if yyhl1888 {
			yyb1888 = yyj1888 > l
		} else {
			yyb1888 = r.CheckBreak()
		}
		if yyb1888 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1888-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1895 := z.EncBinary()
	_ = yym1895
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1896 := z.DecBinary()
	_ = yym1896
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1897 := z.EncBinary()
		_ = yym1897
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1898 := !z.EncBinary()
			yy2arr1898 := z.EncBasicHandle().StructToArray
			var yyq1898 [1]bool
			_, _, _ = yysep1898, yyq1898, yy2arr1898
			const yyr1898 bool = false
			var yynn1898 int
			if yyr1898 || yy2arr1898 {
				r.EncodeArrayStart(1)
			} else {
				yynn1898 = 1
				for _, b := range yyq1898 {
					if b {
						yynn1898++
					}
				}
				r.EncodeMapStart(yynn1898)
				yynn1898 = 0
			}
			if yyr1898 || yy2arr1898 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1900 := z.EncBinary()
					_ = yym1900
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1901 := z.EncBinary()
					_ = yym1901
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1898 || yy2arr1898 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1902 := z.DecBinary()
	_ = yym1902
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1903 := r.ContainerType()
		if yyct1903 == codecSelferValueTypeMap1234 {
			yyl1903 := r.ReadMapStart()
			if yyl1903 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1903, d)
			}
		} else if yyct1903 == codecSelferValueTypeArray1234 {
			yyl1903 := r.ReadArrayStart()
			if yyl1903 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1903, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1904Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1904Slc
	var yyhl1904 bool = l >= 0
	for yyj1904 := 0; ; yyj1904++ {
		if yyhl1904 {
			if yyj1904 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1904Slc = r.DecodeBytes(yys1904Slc, true, true)
		yys1904 := string(yys1904Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1904 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1905 := &x.NodeSelectorTerms
				yym1906 := z.DecBinary()
				_ = yym1906
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1905), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1904)
		} // end switch yys1904
	} // end for yyj1904
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1907 int
	var yyb1907 bool
	var yyhl1907 bool = l >= 0
	yyj1907++
	if yyhl1907 {
		yyb1907 = yyj1907 > l
	} else {
		yyb1907 = r.CheckBreak()
	}
	if yyb1907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1908 := &x.NodeSelectorTerms
		yym1909 := z.DecBinary()
		_ = yym1909
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1908), d)
		}
	}
	for {
		yyj1907++
		if yyhl1907 {
			yyb1907 = yyj1907 > l
		} else {
			yyb1907 = r.CheckBreak()
		}
		if yyb1907 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1907-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1910 := z.EncBinary()
		_ = yym1910
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1911 := !z.EncBinary()
			yy2arr1911 := z.EncBasicHandle().StructToArray
			var yyq1911 [1]bool
			_, _, _ = yysep1911, yyq1911, yy2arr1911
			const yyr1911 bool = false
			var yynn1911 int
			if yyr1911 || yy2arr1911 {
				r.EncodeArrayStart(1)
			} else {
				yynn1911 = 1
				for _, b := range yyq1911 {
					if b {
						yynn1911++
					}
				}
				r.EncodeMapStart(yynn1911)
				yynn1911 = 0
			}
			if yyr1911 || yy2arr1911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1913 := z.EncBinary()
					_ = yym1913
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1914 := z.EncBinary()
					_ = yym1914
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1911 || yy2arr1911 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1915 := z.DecBinary()
	_ = yym1915
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1916 := r.ContainerType()
		if yyct1916 == codecSelferValueTypeMap1234 {
			yyl1916 := r.ReadMapStart()
			if yyl1916 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1916, d)
			}
		} else if yyct1916 == codecSelferValueTypeArray1234 {
			yyl1916 := r.ReadArrayStart()
			if yyl1916 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1916, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1917Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1917Slc
	var yyhl1917 bool = l >= 0
	for yyj1917 := 0; ; yyj1917++ {
		if yyhl1917 {
			if yyj1917 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1917Slc = r.DecodeBytes(yys1917Slc, true, true)
		yys1917 := string(yys1917Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1917 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1918 := &x.MatchExpressions
				yym1919 := z.DecBinary()
				_ = yym1919
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1918), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1917)
		} // end switch yys1917
	} // end for yyj1917
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1920 int
	var yyb1920 bool
	var yyhl1920 bool = l >= 0
	yyj1920++
	if yyhl1920 {
		yyb1920 = yyj1920 > l
	} else {
		yyb1920 = r.CheckBreak()
	}
	if yyb1920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1921 := &x.MatchExpressions
		yym1922 := z.DecBinary()
		_ = yym1922
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1921), d)
		}
	}
	for {
		yyj1920++
		if yyhl1920 {
			yyb1920 = yyj1920 > l
		} else {
			yyb1920 = r.CheckBreak()
		}
		if yyb1920 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1920-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1923 := z.EncBinary()
		_ = yym1923
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1924 := !z.EncBinary()
			yy2arr1924 := z.EncBasicHandle().StructToArray
			var yyq1924 [3]bool
			_, _, _ = yysep1924, yyq1924, yy2arr1924
			const yyr1924 bool = false
			yyq1924[2] = len(x.Values) != 0
			var yynn1924 int
			if yyr1924 || yy2arr1924 {
				r.EncodeArrayStart(3)
			} else {
				yynn1924 = 2
				for _, b := range yyq1924 {
					if b {
						yynn1924++
					}
				}
				r.EncodeMapStart(yynn1924)
				yynn1924 = 0
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1926 := z.EncBinary()
				_ = yym1926
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1927 := z.EncBinary()
				_ = yym1927
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1924[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1930 := z.EncBinary()
						_ = yym1930
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1924[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1931 := z.EncBinary()
						_ = yym1931
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1924 || yy2arr1924 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1932 := z.DecBinary()
	_ = yym1932
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1933 := r.ContainerType()
		if yyct1933 == codecSelferValueTypeMap1234 {
			yyl1933 := r.ReadMapStart()
			if yyl1933 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1933, d)
			}
		} else if yyct1933 == codecSelferValueTypeArray1234 {
			yyl1933 := r.ReadArrayStart()
			if yyl1933 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1933, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1934Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1934Slc
	var yyhl1934 bool = l >= 0
	for yyj1934 := 0; ; yyj1934++ {
		if yyhl1934 {
			if yyj1934 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1934Slc = r.DecodeBytes(yys1934Slc, true, true)
		yys1934 := string(yys1934Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1934 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1937 := &x.Values
				yym1938 := z.DecBinary()
				_ = yym1938
				if false {
				} else {
					z.F.DecSliceStringX(yyv1937, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1934)
		} // end switch yys1934
	} // end for yyj1934
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1939 int
	var yyb1939 bool
	var yyhl1939 bool = l >= 0
	yyj1939++
	if yyhl1939 {
		yyb1939 = yyj1939 > l
	} else {
		yyb1939 = r.CheckBreak()
	}
	if yyb1939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1939++
	if yyhl1939 {
		yyb1939 = yyj1939 > l
	} else {
		yyb1939 = r.CheckBreak()
	}
	if yyb1939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1939++
	if yyhl1939 {
		yyb1939 = yyj1939 > l
	} else {
		yyb1939 = r.CheckBreak()
	}
	if yyb1939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1942 := &x.Values
		yym1943 := z.DecBinary()
		_ = yym1943
		if false {
		} else {
			z.F.DecSliceStringX(yyv1942, false, d)
		}
	}
	for {
		yyj1939++
		if yyhl1939 {
			yyb1939 = yyj1939 > l
		} else {
			yyb1939 = r.CheckBreak()
		}
		if yyb1939 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1939-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1944 := z.EncBinary()
	_ = yym1944
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1945 := z.DecBinary()
	_ = yym1945
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1946 := z.EncBinary()
		_ = yym1946
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1947 := !z.EncBinary()
			yy2arr1947 := z.EncBasicHandle().StructToArray
			var yyq1947 [3]bool
			_, _, _ = yysep1947, yyq1947, yy2arr1947
			const yyr1947 bool = false
			yyq1947[0] = x.NodeAffinity != nil
			yyq1947[1] = x.PodAffinity != nil
			yyq1947[2] = x.PodAntiAffinity != nil
			var yynn1947 int
			if yyr1947 || yy2arr1947 {
				r.EncodeArrayStart(3)
			} else {
				yynn1947 = 0
				for _, b := range yyq1947 {
					if b {
						yynn1947++
					}
				}
				r.EncodeMapStart(yynn1947)
				yynn1947 = 0
			}
			if yyr1947 || yy2arr1947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1947[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1947[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1947 || yy2arr1947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1947[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1947[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1947 || yy2arr1947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1947[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1947[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1947 || yy2arr1947 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1951 := z.DecBinary()
	_ = yym1951
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1952 := r.ContainerType()
		if yyct1952 == codecSelferValueTypeMap1234 {
			yyl1952 := r.ReadMapStart()
			if yyl1952 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1952, d)
			}
		} else if yyct1952 == codecSelferValueTypeArray1234 {
			yyl1952 := r.ReadArrayStart()
			if yyl1952 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1952, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1953Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1953Slc
	var yyhl1953 bool = l >= 0
	for yyj1953 := 0; ; yyj1953++ {
		if yyhl1953 {
			if yyj1953 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1953Slc = r.DecodeBytes(yys1953Slc, true, true)
		yys1953 := string(yys1953Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1953 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1953)
		} // end switch yys1953
	} // end for yyj1953
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1957 int
	var yyb1957 bool
	var yyhl1957 bool = l >= 0
	yyj1957++
	if yyhl1957 {
		yyb1957 = yyj1957 > l
	} else {
		yyb1957 = r.CheckBreak()
	}
	if yyb1957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1957++
	if yyhl1957 {
		yyb1957 = yyj1957 > l
	} else {
		yyb1957 = r.CheckBreak()
	}
	if yyb1957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1957++
	if yyhl1957 {
		yyb1957 = yyj1957 > l
	} else {
		yyb1957 = r.CheckBreak()
	}
	if yyb1957 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1957++
		if yyhl1957 {
			yyb1957 = yyj1957 > l
		} else {
			yyb1957 = r.CheckBreak()
		}
		if yyb1957 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1957-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1961 := z.EncBinary()
		_ = yym1961
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1962 := !z.EncBinary()
			yy2arr1962 := z.EncBasicHandle().StructToArray
			var yyq1962 [2]bool
			_, _, _ = yysep1962, yyq1962, yy2arr1962
			const yyr1962 bool = false
			yyq1962[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1962[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1962 int
			if yyr1962 || yy2arr1962 {
				r.EncodeArrayStart(2)
			} else {
				yynn1962 = 0
				for _, b := range yyq1962 {
					if b {
						yynn1962++
					}
				}
				r.EncodeMapStart(yynn1962)
				yynn1962 = 0
			}
			if yyr1962 || yy2arr1962 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1962[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1964 := z.EncBinary()
						_ = yym1964
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1962[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1965 := z.EncBinary()
						_ = yym1965
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1962 || yy2arr1962 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1962[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1967 := z.EncBinary()
						_ = yym1967
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1962[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1968 := z.EncBinary()
						_ = yym1968
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1962 || yy2arr1962 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1969 := z.DecBinary()
	_ = yym1969
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1970 := r.ContainerType()
		if yyct1970 == codecSelferValueTypeMap1234 {
			yyl1970 := r.ReadMapStart()
			if yyl1970 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1970, d)
			}
		} else if yyct1970 == codecSelferValueTypeArray1234 {
			yyl1970 := r.ReadArrayStart()
			if yyl1970 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1970, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1971Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1971Slc
	var yyhl1971 bool = l >= 0
	for yyj1971 := 0; ; yyj1971++ {
		if yyhl1971 {
			if yyj1971 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1971Slc = r.DecodeBytes(yys1971Slc, true, true)
		yys1971 := string(yys1971Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1971 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1972 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1973 := z.DecBinary()
				_ = yym1973
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1972), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1974 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1975 := z.DecBinary()
				_ = yym1975
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1974), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1971)
		} // end switch yys1971
	} // end for yyj1971
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1976 int
	var yyb1976 bool
	var yyhl1976 bool = l >= 0
	yyj1976++
	if yyhl1976 {
		yyb1976 = yyj1976 > l
	} else {
		yyb1976 = r.CheckBreak()
	}
	if yyb1976 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1977 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1978 := z.DecBinary()
		_ = yym1978
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1977), d)
		}
	}
	yyj1976++
	if yyhl1976 {
		yyb1976 = yyj1976 > l
	} else {
		yyb1976 = r.CheckBreak()
	}
	if yyb1976 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1979 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1980 := z.DecBinary()
		_ = yym1980
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1979), d)
		}
	}
	for {
		yyj1976++
		if yyhl1976 {
			yyb1976 = yyj1976 > l
		} else {
			yyb1976 = r.CheckBreak()
		}
		if yyb1976 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1976-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1981 := z.EncBinary()
		_ = yym1981
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1982 := !z.EncBinary()
			yy2arr1982 := z.EncBasicHandle().StructToArray
			var yyq1982 [2]bool
			_, _, _ = yysep1982, yyq1982, yy2arr1982
			const yyr1982 bool = false
			yyq1982[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1982[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1982 int
			if yyr1982 || yy2arr1982 {
				r.EncodeArrayStart(2)
			} else {
				yynn1982 = 0
				for _, b := range yyq1982 {
					if b {
						yynn1982++
					}
				}
				r.EncodeMapStart(yynn1982)
				yynn1982 = 0
			}
			if yyr1982 || yy2arr1982 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1982[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1984 := z.EncBinary()
						_ = yym1984
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1982[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1985 := z.EncBinary()
						_ = yym1985
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1982 || yy2arr1982 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1982[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1987 := z.EncBinary()
						_ = yym1987
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1982[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1988 := z.EncBinary()
						_ = yym1988
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1982 || yy2arr1982 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1989 := z.DecBinary()
	_ = yym1989
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1990 := r.ContainerType()
		if yyct1990 == codecSelferValueTypeMap1234 {
			yyl1990 := r.ReadMapStart()
			if yyl1990 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1990, d)
			}
		} else if yyct1990 == codecSelferValueTypeArray1234 {
			yyl1990 := r.ReadArrayStart()
			if yyl1990 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1990, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1991Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1991Slc
	var yyhl1991 bool = l >= 0
	for yyj1991 := 0; ; yyj1991++ {
		if yyhl1991 {
			if yyj1991 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1991Slc = r.DecodeBytes(yys1991Slc, true, true)
		yys1991 := string(yys1991Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1991 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1992 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1993 := z.DecBinary()
				_ = yym1993
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1992), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1994 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1995 := z.DecBinary()
				_ = yym1995
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1994), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1991)
		} // end switch yys1991
	} // end for yyj1991
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1996 int
	var yyb1996 bool
	var yyhl1996 bool = l >= 0
	yyj1996++
	if yyhl1996 {
		yyb1996 = yyj1996 > l
	} else {
		yyb1996 = r.CheckBreak()
	}
	if yyb1996 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1997 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1998 := z.DecBinary()
		_ = yym1998
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1997), d)
		}
	}
	yyj1996++
	if yyhl1996 {
		yyb1996 = yyj1996 > l
	} else {
		yyb1996 = r.CheckBreak()
	}
	if yyb1996 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1999 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym2000 := z.DecBinary()
		_ = yym2000
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1999), d)
		}
	}
	for {
		yyj1996++
		if yyhl1996 {
			yyb1996 = yyj1996 > l
		} else {
			yyb1996 = r.CheckBreak()
		}
		if yyb1996 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1996-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2001 := z.EncBinary()
		_ = yym2001
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2002 := !z.EncBinary()
			yy2arr2002 := z.EncBasicHandle().StructToArray
			var yyq2002 [2]bool
			_, _, _ = yysep2002, yyq2002, yy2arr2002
			const yyr2002 bool = false
			var yynn2002 int
			if yyr2002 || yy2arr2002 {
				r.EncodeArrayStart(2)
			} else {
				yynn2002 = 2
				for _, b := range yyq2002 {
					if b {
						yynn2002++
					}
				}
				r.EncodeMapStart(yynn2002)
				yynn2002 = 0
			}
			if yyr2002 || yy2arr2002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2004 := z.EncBinary()
				_ = yym2004
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2005 := z.EncBinary()
				_ = yym2005
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr2002 || yy2arr2002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2007 := &x.PodAffinityTerm
				yy2007.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2008 := &x.PodAffinityTerm
				yy2008.CodecEncodeSelf(e)
			}
			if yyr2002 || yy2arr2002 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2009 := z.DecBinary()
	_ = yym2009
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2010 := r.ContainerType()
		if yyct2010 == codecSelferValueTypeMap1234 {
			yyl2010 := r.ReadMapStart()
			if yyl2010 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2010, d)
			}
		} else if yyct2010 == codecSelferValueTypeArray1234 {
			yyl2010 := r.ReadArrayStart()
			if yyl2010 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2010, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2011Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2011Slc
	var yyhl2011 bool = l >= 0
	for yyj2011 := 0; ; yyj2011++ {
		if yyhl2011 {
			if yyj2011 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2011Slc = r.DecodeBytes(yys2011Slc, true, true)
		yys2011 := string(yys2011Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2011 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv2013 := &x.PodAffinityTerm
				yyv2013.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2011)
		} // end switch yys2011
	} // end for yyj2011
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2014 int
	var yyb2014 bool
	var yyhl2014 bool = l >= 0
	yyj2014++
	if yyhl2014 {
		yyb2014 = yyj2014 > l
	} else {
		yyb2014 = r.CheckBreak()
	}
	if yyb2014 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2014++
	if yyhl2014 {
		yyb2014 = yyj2014 > l
	} else {
		yyb2014 = r.CheckBreak()
	}
	if yyb2014 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv2016 := &x.PodAffinityTerm
		yyv2016.CodecDecodeSelf(d)
	}
	for {
		yyj2014++
		if yyhl2014 {
			yyb2014 = yyj2014 > l
		} else {
			yyb2014 = r.CheckBreak()
		}
		if yyb2014 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2014-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2017 := z.EncBinary()
		_ = yym2017
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2018 := !z.EncBinary()
			yy2arr2018 := z.EncBasicHandle().StructToArray
			var yyq2018 [3]bool
			_, _, _ = yysep2018, yyq2018, yy2arr2018
			const yyr2018 bool = false
			yyq2018[0] = x.LabelSelector != nil
			yyq2018[2] = x.TopologyKey != ""
			var yynn2018 int
			if yyr2018 || yy2arr2018 {
				r.EncodeArrayStart(3)
			} else {
				yynn2018 = 1
				for _, b := range yyq2018 {
					if b {
						yynn2018++
					}
				}
				r.EncodeMapStart(yynn2018)
				yynn2018 = 0
			}
			if yyr2018 || yy2arr2018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2018[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym2020 := z.EncBinary()
						_ = yym2020
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2018[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym2021 := z.EncBinary()
						_ = yym2021
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr2018 || yy2arr2018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym2023 := z.EncBinary()
					_ = yym2023
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym2024 := z.EncBinary()
					_ = yym2024
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr2018 || yy2arr2018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2018[2] {
					yym2026 := z.EncBinary()
					_ = yym2026
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2018[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2027 := z.EncBinary()
					_ = yym2027
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr2018 || yy2arr2018 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2028 := z.DecBinary()
	_ = yym2028
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2029 := r.ContainerType()
		if yyct2029 == codecSelferValueTypeMap1234 {
			yyl2029 := r.ReadMapStart()
			if yyl2029 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2029, d)
			}
		} else if yyct2029 == codecSelferValueTypeArray1234 {
			yyl2029 := r.ReadArrayStart()
			if yyl2029 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2029, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2030Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2030Slc
	var yyhl2030 bool = l >= 0
	for yyj2030 := 0; ; yyj2030++ {
		if yyhl2030 {
			if yyj2030 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2030Slc = r.DecodeBytes(yys2030Slc, true, true)
		yys2030 := string(yys2030Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2030 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym2032 := z.DecBinary()
				_ = yym2032
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv2033 := &x.Namespaces
				yym2034 := z.DecBinary()
				_ = yym2034
				if false {
				} else {
					z.F.DecSliceStringX(yyv2033, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2030)
		} // end switch yys2030
	} // end for yyj2030
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2036 int
	var yyb2036 bool
	var yyhl2036 bool = l >= 0
	yyj2036++
	if yyhl2036 {
		yyb2036 = yyj2036 > l
	} else {
		yyb2036 = r.CheckBreak()
	}
	if yyb2036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym2038 := z.DecBinary()
		_ = yym2038
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj2036++
	if yyhl2036 {
		yyb2036 = yyj2036 > l
	} else {
		yyb2036 = r.CheckBreak()
	}
	if yyb2036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv2039 := &x.Namespaces
		yym2040 := z.DecBinary()
		_ = yym2040
		if false {
		} else {
			z.F.DecSliceStringX(yyv2039, false, d)
		}
	}
	yyj2036++
	if yyhl2036 {
		yyb2036 = yyj2036 > l
	} else {
		yyb2036 = r.CheckBreak()
	}
	if yyb2036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj2036++
		if yyhl2036 {
			yyb2036 = yyj2036 > l
		} else {
			yyb2036 = r.CheckBreak()
		}
		if yyb2036 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2036-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2042 := z.EncBinary()
		_ = yym2042
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2043 := !z.EncBinary()
			yy2arr2043 := z.EncBasicHandle().StructToArray
			var yyq2043 [2]bool
			_, _, _ = yysep2043, yyq2043, yy2arr2043
			const yyr2043 bool = false
			yyq2043[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq2043[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn2043 int
			if yyr2043 || yy2arr2043 {
				r.EncodeArrayStart(2)
			} else {
				yynn2043 = 0
				for _, b := range yyq2043 {
					if b {
						yynn2043++
					}
				}
				r.EncodeMapStart(yynn2043)
				yynn2043 = 0
			}
			if yyr2043 || yy2arr2043 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2043[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2043[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2043 || yy2arr2043 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2043[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2046 := z.EncBinary()
						_ = yym2046
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2043[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2047 := z.EncBinary()
						_ = yym2047
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr2043 || yy2arr2043 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2048 := z.DecBinary()
	_ = yym2048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2049 := r.ContainerType()
		if yyct2049 == codecSelferValueTypeMap1234 {
			yyl2049 := r.ReadMapStart()
			if yyl2049 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2049, d)
			}
		} else if yyct2049 == codecSelferValueTypeArray1234 {
			yyl2049 := r.ReadArrayStart()
			if yyl2049 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2049, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2050Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2050Slc
	var yyhl2050 bool = l >= 0
	for yyj2050 := 0; ; yyj2050++ {
		if yyhl2050 {
			if yyj2050 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2050Slc = r.DecodeBytes(yys2050Slc, true, true)
		yys2050 := string(yys2050Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2050 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv2052 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym2053 := z.DecBinary()
				_ = yym2053
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv2052), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2050)
		} // end switch yys2050
	} // end for yyj2050
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2054 int
	var yyb2054 bool
	var yyhl2054 bool = l >= 0
	yyj2054++
	if yyhl2054 {
		yyb2054 = yyj2054 > l
	} else {
		yyb2054 = r.CheckBreak()
	}
	if yyb2054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj2054++
	if yyhl2054 {
		yyb2054 = yyj2054 > l
	} else {
		yyb2054 = r.CheckBreak()
	}
	if yyb2054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv2056 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym2057 := z.DecBinary()
		_ = yym2057
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv2056), d)
		}
	}
	for {
		yyj2054++
		if yyhl2054 {
			yyb2054 = yyj2054 > l
		} else {
			yyb2054 = r.CheckBreak()
		}
		if yyb2054 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2054-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2058 := z.EncBinary()
		_ = yym2058
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2059 := !z.EncBinary()
			yy2arr2059 := z.EncBasicHandle().StructToArray
			var yyq2059 [2]bool
			_, _, _ = yysep2059, yyq2059, yy2arr2059
			const yyr2059 bool = false
			var yynn2059 int
			if yyr2059 || yy2arr2059 {
				r.EncodeArrayStart(2)
			} else {
				yynn2059 = 2
				for _, b := range yyq2059 {
					if b {
						yynn2059++
					}
				}
				r.EncodeMapStart(yynn2059)
				yynn2059 = 0
			}
			if yyr2059 || yy2arr2059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2061 := z.EncBinary()
				_ = yym2061
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2062 := z.EncBinary()
				_ = yym2062
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr2059 || yy2arr2059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2064 := &x.Preference
				yy2064.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2065 := &x.Preference
				yy2065.CodecEncodeSelf(e)
			}
			if yyr2059 || yy2arr2059 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2066 := z.DecBinary()
	_ = yym2066
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2067 := r.ContainerType()
		if yyct2067 == codecSelferValueTypeMap1234 {
			yyl2067 := r.ReadMapStart()
			if yyl2067 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2067, d)
			}
		} else if yyct2067 == codecSelferValueTypeArray1234 {
			yyl2067 := r.ReadArrayStart()
			if yyl2067 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2067, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2068Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2068Slc
	var yyhl2068 bool = l >= 0
	for yyj2068 := 0; ; yyj2068++ {
		if yyhl2068 {
			if yyj2068 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2068Slc = r.DecodeBytes(yys2068Slc, true, true)
		yys2068 := string(yys2068Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2068 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv2070 := &x.Preference
				yyv2070.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2068)
		} // end switch yys2068
	} // end for yyj2068
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2071 int
	var yyb2071 bool
	var yyhl2071 bool = l >= 0
	yyj2071++
	if yyhl2071 {
		yyb2071 = yyj2071 > l
	} else {
		yyb2071 = r.CheckBreak()
	}
	if yyb2071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj2071++
	if yyhl2071 {
		yyb2071 = yyj2071 > l
	} else {
		yyb2071 = r.CheckBreak()
	}
	if yyb2071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv2073 := &x.Preference
		yyv2073.CodecDecodeSelf(d)
	}
	for {
		yyj2071++
		if yyhl2071 {
			yyb2071 = yyj2071 > l
		} else {
			yyb2071 = r.CheckBreak()
		}
		if yyb2071 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2071-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2074 := z.EncBinary()
		_ = yym2074
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2075 := !z.EncBinary()
			yy2arr2075 := z.EncBasicHandle().StructToArray
			var yyq2075 [3]bool
			_, _, _ = yysep2075, yyq2075, yy2arr2075
			const yyr2075 bool = false
			yyq2075[1] = x.Value != ""
			var yynn2075 int
			if yyr2075 || yy2arr2075 {
				r.EncodeArrayStart(3)
			} else {
				yynn2075 = 2
				for _, b := range yyq2075 {
					if b {
						yynn2075++
					}
				}
				r.EncodeMapStart(yynn2075)
				yynn2075 = 0
			}
			if yyr2075 || yy2arr2075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2077 := z.EncBinary()
				_ = yym2077
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2078 := z.EncBinary()
				_ = yym2078
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr2075 || yy2arr2075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2075[1] {
					yym2080 := z.EncBinary()
					_ = yym2080
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2075[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2081 := z.EncBinary()
					_ = yym2081
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2075 || yy2arr2075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr2075 || yy2arr2075 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2083 := z.DecBinary()
	_ = yym2083
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2084 := r.ContainerType()
		if yyct2084 == codecSelferValueTypeMap1234 {
			yyl2084 := r.ReadMapStart()
			if yyl2084 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2084, d)
			}
		} else if yyct2084 == codecSelferValueTypeArray1234 {
			yyl2084 := r.ReadArrayStart()
			if yyl2084 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2084, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2085Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2085Slc
	var yyhl2085 bool = l >= 0
	for yyj2085 := 0; ; yyj2085++ {
		if yyhl2085 {
			if yyj2085 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2085Slc = r.DecodeBytes(yys2085Slc, true, true)
		yys2085 := string(yys2085Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2085 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2085)
		} // end switch yys2085
	} // end for yyj2085
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2089 int
	var yyb2089 bool
	var yyhl2089 bool = l >= 0
	yyj2089++
	if yyhl2089 {
		yyb2089 = yyj2089 > l
	} else {
		yyb2089 = r.CheckBreak()
	}
	if yyb2089 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2089++
	if yyhl2089 {
		yyb2089 = yyj2089 > l
	} else {
		yyb2089 = r.CheckBreak()
	}
	if yyb2089 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2089++
	if yyhl2089 {
		yyb2089 = yyj2089 > l
	} else {
		yyb2089 = r.CheckBreak()
	}
	if yyb2089 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2089++
		if yyhl2089 {
			yyb2089 = yyj2089 > l
		} else {
			yyb2089 = r.CheckBreak()
		}
		if yyb2089 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2089-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2093 := z.EncBinary()
	_ = yym2093
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2094 := z.DecBinary()
	_ = yym2094
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2095 := z.EncBinary()
		_ = yym2095
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2096 := !z.EncBinary()
			yy2arr2096 := z.EncBasicHandle().StructToArray
			var yyq2096 [4]bool
			_, _, _ = yysep2096, yyq2096, yy2arr2096
			const yyr2096 bool = false
			yyq2096[0] = x.Key != ""
			yyq2096[1] = x.Operator != ""
			yyq2096[2] = x.Value != ""
			yyq2096[3] = x.Effect != ""
			var yynn2096 int
			if yyr2096 || yy2arr2096 {
				r.EncodeArrayStart(4)
			} else {
				yynn2096 = 0
				for _, b := range yyq2096 {
					if b {
						yynn2096++
					}
				}
				r.EncodeMapStart(yynn2096)
				yynn2096 = 0
			}
			if yyr2096 || yy2arr2096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2096[0] {
					yym2098 := z.EncBinary()
					_ = yym2098
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2096[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2099 := z.EncBinary()
					_ = yym2099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr2096 || yy2arr2096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2096[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2096[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr2096 || yy2arr2096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2096[2] {
					yym2102 := z.EncBinary()
					_ = yym2102
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2096[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2103 := z.EncBinary()
					_ = yym2103
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2096 || yy2arr2096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2096[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2096[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr2096 || yy2arr2096 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2105 := z.DecBinary()
	_ = yym2105
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2106 := r.ContainerType()
		if yyct2106 == codecSelferValueTypeMap1234 {
			yyl2106 := r.ReadMapStart()
			if yyl2106 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2106, d)
			}
		} else if yyct2106 == codecSelferValueTypeArray1234 {
			yyl2106 := r.ReadArrayStart()
			if yyl2106 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2106, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2107Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2107Slc
	var yyhl2107 bool = l >= 0
	for yyj2107 := 0; ; yyj2107++ {
		if yyhl2107 {
			if yyj2107 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2107Slc = r.DecodeBytes(yys2107Slc, true, true)
		yys2107 := string(yys2107Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2107 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2107)
		} // end switch yys2107
	} // end for yyj2107
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2112 int
	var yyb2112 bool
	var yyhl2112 bool = l >= 0
	yyj2112++
	if yyhl2112 {
		yyb2112 = yyj2112 > l
	} else {
		yyb2112 = r.CheckBreak()
	}
	if yyb2112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2112++
	if yyhl2112 {
		yyb2112 = yyj2112 > l
	} else {
		yyb2112 = r.CheckBreak()
	}
	if yyb2112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj2112++
	if yyhl2112 {
		yyb2112 = yyj2112 > l
	} else {
		yyb2112 = r.CheckBreak()
	}
	if yyb2112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2112++
	if yyhl2112 {
		yyb2112 = yyj2112 > l
	} else {
		yyb2112 = r.CheckBreak()
	}
	if yyb2112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2112++
		if yyhl2112 {
			yyb2112 = yyj2112 > l
		} else {
			yyb2112 = r.CheckBreak()
		}
		if yyb2112 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2112-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2117 := z.EncBinary()
	_ = yym2117
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2118 := z.DecBinary()
	_ = yym2118
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2119 := z.EncBinary()
		_ = yym2119
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2120 := !z.EncBinary()
			yy2arr2120 := z.EncBasicHandle().StructToArray
			var yyq2120 [13]bool
			_, _, _ = yysep2120, yyq2120, yy2arr2120
			const yyr2120 bool = false
			yyq2120[2] = x.RestartPolicy != ""
			yyq2120[3] = x.TerminationGracePeriodSeconds != nil
			yyq2120[4] = x.ActiveDeadlineSeconds != nil
			yyq2120[5] = x.DNSPolicy != ""
			yyq2120[6] = len(x.NodeSelector) != 0
			yyq2120[8] = x.NodeName != ""
			yyq2120[9] = x.SecurityContext != nil
			yyq2120[10] = len(x.ImagePullSecrets) != 0
			yyq2120[11] = x.Hostname != ""
			yyq2120[12] = x.Subdomain != ""
			var yynn2120 int
			if yyr2120 || yy2arr2120 {
				r.EncodeArrayStart(13)
			} else {
				yynn2120 = 3
				for _, b := range yyq2120 {
					if b {
						yynn2120++
					}
				}
				r.EncodeMapStart(yynn2120)
				yynn2120 = 0
			}
			if yyr2120 || yy2arr2120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym2122 := z.EncBinary()
					_ = yym2122
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym2123 := z.EncBinary()
					_ = yym2123
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr2120 || yy2arr2120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2125 := z.EncBinary()
					_ = yym2125
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2126 := z.EncBinary()
					_ = yym2126
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr2120 || yy2arr2120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2120[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2120[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2120 || yy2arr2120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2120[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2129 := *x.TerminationGracePeriodSeconds
						yym2130 := z.EncBinary()
						_ = yym2130
						if false {
						} else {
							r.EncodeInt(int64(yy2129))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2120[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2131 := *x.TerminationGracePeriodSeconds
						yym2132 := z.EncBinary()
						_ = yym2132
						if false {
						} else {
							r.EncodeInt(int64(yy2131))
						}
					}
				}
			}
			if yyr2120 || yy2arr2120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2120[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2134 := *x.ActiveDeadlineSeconds
						yym2135 := z.EncBinary()
						_ = yym2135
						if false {
						} else {
							r.EncodeInt(int64(yy2134))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2120[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2136 := *x.ActiveDeadlineSeconds
						yym2137 := z.EncBinary()
						_ = yym2137
						if false {
						} else {
							r.EncodeInt(int64(yy2136))
						}
					}
				}
			}
			if yyr2120 || yy2arr2120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2120[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2120[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2120 || yy2arr2120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2120[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2140 := z.EncBinary()
						_ = yym2140
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2120[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2141 := z.EncBinary()
						_ = yym2141
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr2120 || yy2arr2120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2143 := z.EncBinary()
				_ = yym2143
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2144 := z.EncBinary()
				_ = yym2144
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr2120 || yy2arr2120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2120[8] {
					yym2146 := z.EncBinary()
					_ = yym2146
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2120[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2147 := z.EncBinary()
					_ = yym2147
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr2120 || yy2arr2120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2120[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2120[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2120 || yy2arr2120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2120[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2150 := z.EncBinary()
						_ = yym2150
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2120[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2151 := z.EncBinary()
						_ = yym2151
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2120 || yy2arr2120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2120[11] {
					yym2153 := z.EncBinary()
					_ = yym2153
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2120[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2154 := z.EncBinary()
					_ = yym2154
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2120 || yy2arr2120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2120[12] {
					yym2156 := z.EncBinary()
					_ = yym2156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2120[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2157 := z.EncBinary()
					_ = yym2157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr2120 || yy2arr2120 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2158 := z.DecBinary()
	_ = yym2158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2159 := r.ContainerType()
		if yyct2159 == codecSelferValueTypeMap1234 {
			yyl2159 := r.ReadMapStart()
			if yyl2159 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2159, d)
			}
		} else if yyct2159 == codecSelferValueTypeArray1234 {
			yyl2159 := r.ReadArrayStart()
			if yyl2159 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2160Slc
	var yyhl2160 bool = l >= 0
	for yyj2160 := 0; ; yyj2160++ {
		if yyhl2160 {
			if yyj2160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2160Slc = r.DecodeBytes(yys2160Slc, true, true)
		yys2160 := string(yys2160Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2160 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv2161 := &x.Volumes
				yym2162 := z.DecBinary()
				_ = yym2162
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv2161), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv2163 := &x.Containers
				yym2164 := z.DecBinary()
				_ = yym2164
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv2163), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym2167 := z.DecBinary()
				_ = yym2167
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym2169 := z.DecBinary()
				_ = yym2169
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv2171 := &x.NodeSelector
				yym2172 := z.DecBinary()
				_ = yym2172
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2171, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2176 := &x.ImagePullSecrets
				yym2177 := z.DecBinary()
				_ = yym2177
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2176), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2160)
		} // end switch yys2160
	} // end for yyj2160
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2180 int
	var yyb2180 bool
	var yyhl2180 bool = l >= 0
	yyj2180++
	if yyhl2180 {
		yyb2180 = yyj2180 > l
	} else {
		yyb2180 = r.CheckBreak()
	}
	if yyb2180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2181 := &x.Volumes
		yym2182 := z.DecBinary()
		_ = yym2182
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2181), d)
		}
	}
	yyj2180++
	if yyhl2180 {
		yyb2180 = yyj2180 > l
	} else {
		yyb2180 = r.CheckBreak()
	}
	if yyb2180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2183 := &x.Containers
		yym2184 := z.DecBinary()
		_ = yym2184
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2183), d)
		}
	}
	yyj2180++
	if yyhl2180 {
		yyb2180 = yyj2180 > l
	} else {
		yyb2180 = r.CheckBreak()
	}
	if yyb2180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2180++
	if yyhl2180 {
		yyb2180 = yyj2180 > l
	} else {
		yyb2180 = r.CheckBreak()
	}
	if yyb2180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2187 := z.DecBinary()
		_ = yym2187
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2180++
	if yyhl2180 {
		yyb2180 = yyj2180 > l
	} else {
		yyb2180 = r.CheckBreak()
	}
	if yyb2180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2189 := z.DecBinary()
		_ = yym2189
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2180++
	if yyhl2180 {
		yyb2180 = yyj2180 > l
	} else {
		yyb2180 = r.CheckBreak()
	}
	if yyb2180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2180++
	if yyhl2180 {
		yyb2180 = yyj2180 > l
	} else {
		yyb2180 = r.CheckBreak()
	}
	if yyb2180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2191 := &x.NodeSelector
		yym2192 := z.DecBinary()
		_ = yym2192
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2191, false, d)
		}
	}
	yyj2180++
	if yyhl2180 {
		yyb2180 = yyj2180 > l
	} else {
		yyb2180 = r.CheckBreak()
	}
	if yyb2180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2180++
	if yyhl2180 {
		yyb2180 = yyj2180 > l
	} else {
		yyb2180 = r.CheckBreak()
	}
	if yyb2180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2180++
	if yyhl2180 {
		yyb2180 = yyj2180 > l
	} else {
		yyb2180 = r.CheckBreak()
	}
	if yyb2180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2180++
	if yyhl2180 {
		yyb2180 = yyj2180 > l
	} else {
		yyb2180 = r.CheckBreak()
	}
	if yyb2180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2196 := &x.ImagePullSecrets
		yym2197 := z.DecBinary()
		_ = yym2197
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2196), d)
		}
	}
	yyj2180++
	if yyhl2180 {
		yyb2180 = yyj2180 > l
	} else {
		yyb2180 = r.CheckBreak()
	}
	if yyb2180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2180++
	if yyhl2180 {
		yyb2180 = yyj2180 > l
	} else {
		yyb2180 = r.CheckBreak()
	}
	if yyb2180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj2180++
		if yyhl2180 {
			yyb2180 = yyj2180 > l
		} else {
			yyb2180 = r.CheckBreak()
		}
		if yyb2180 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2180-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Sysctl) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2200 := z.EncBinary()
		_ = yym2200
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2201 := !z.EncBinary()
			yy2arr2201 := z.EncBasicHandle().StructToArray
			var yyq2201 [2]bool
			_, _, _ = yysep2201, yyq2201, yy2arr2201
			const yyr2201 bool = false
			var yynn2201 int
			if yyr2201 || yy2arr2201 {
				r.EncodeArrayStart(2)
			} else {
				yynn2201 = 2
				for _, b := range yyq2201 {
					if b {
						yynn2201++
					}
				}
				r.EncodeMapStart(yynn2201)
				yynn2201 = 0
			}
			if yyr2201 || yy2arr2201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2203 := z.EncBinary()
				_ = yym2203
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2204 := z.EncBinary()
				_ = yym2204
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2201 || yy2arr2201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2206 := z.EncBinary()
				_ = yym2206
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2207 := z.EncBinary()
				_ = yym2207
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr2201 || yy2arr2201 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Sysctl) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2208 := z.DecBinary()
	_ = yym2208
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2209 := r.ContainerType()
		if yyct2209 == codecSelferValueTypeMap1234 {
			yyl2209 := r.ReadMapStart()
			if yyl2209 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2209, d)
			}
		} else if yyct2209 == codecSelferValueTypeArray1234 {
			yyl2209 := r.ReadArrayStart()
			if yyl2209 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2209, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Sysctl) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2210Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2210Slc
	var yyhl2210 bool = l >= 0
	for yyj2210 := 0; ; yyj2210++ {
		if yyhl2210 {
			if yyj2210 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2210Slc = r.DecodeBytes(yys2210Slc, true, true)
		yys2210 := string(yys2210Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2210 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2210)
		} // end switch yys2210
	} // end for yyj2210
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Sysctl) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2213 int
	var yyb2213 bool
	var yyhl2213 bool = l >= 0
	yyj2213++
	if yyhl2213 {
		yyb2213 = yyj2213 > l
	} else {
		yyb2213 = r.CheckBreak()
	}
	if yyb2213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2213++
	if yyhl2213 {
		yyb2213 = yyj2213 > l
	} else {
		yyb2213 = r.CheckBreak()
	}
	if yyb2213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj2213++
		if yyhl2213 {
			yyb2213 = yyj2213 > l
		} else {
			yyb2213 = r.CheckBreak()
		}
		if yyb2213 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2213-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2216 := z.EncBinary()
		_ = yym2216
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2217 := !z.EncBinary()
			yy2arr2217 := z.EncBasicHandle().StructToArray
			var yyq2217 [8]bool
			_, _, _ = yysep2217, yyq2217, yy2arr2217
			const yyr2217 bool = false
			yyq2217[0] = x.HostNetwork != false
			yyq2217[1] = x.HostPID != false
			yyq2217[2] = x.HostIPC != false
			yyq2217[3] = x.SELinuxOptions != nil
			yyq2217[4] = x.RunAsUser != nil
			yyq2217[5] = x.RunAsNonRoot != nil
			yyq2217[6] = len(x.SupplementalGroups) != 0
			yyq2217[7] = x.FSGroup != nil
			var yynn2217 int
			if yyr2217 || yy2arr2217 {
				r.EncodeArrayStart(8)
			} else {
				yynn2217 = 0
				for _, b := range yyq2217 {
					if b {
						yynn2217++
					}
				}
				r.EncodeMapStart(yynn2217)
				yynn2217 = 0
			}
			if yyr2217 || yy2arr2217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2217[0] {
					yym2219 := z.EncBinary()
					_ = yym2219
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2217[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2220 := z.EncBinary()
					_ = yym2220
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2217 || yy2arr2217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2217[1] {
					yym2222 := z.EncBinary()
					_ = yym2222
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2217[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2223 := z.EncBinary()
					_ = yym2223
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2217 || yy2arr2217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2217[2] {
					yym2225 := z.EncBinary()
					_ = yym2225
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2217[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2226 := z.EncBinary()
					_ = yym2226
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2217 || yy2arr2217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2217[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2217[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2217 || yy2arr2217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2217[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2229 := *x.RunAsUser
						yym2230 := z.EncBinary()
						_ = yym2230
						if false {
						} else {
							r.EncodeInt(int64(yy2229))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2217[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2231 := *x.RunAsUser
						yym2232 := z.EncBinary()
						_ = yym2232
						if false {
						} else {
							r.EncodeInt(int64(yy2231))
						}
					}
				}
			}
			if yyr2217 || yy2arr2217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2217[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2234 := *x.RunAsNonRoot
						yym2235 := z.EncBinary()
						_ = yym2235
						if false {
						} else {
							r.EncodeBool(bool(yy2234))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2217[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2236 := *x.RunAsNonRoot
						yym2237 := z.EncBinary()
						_ = yym2237
						if false {
						} else {
							r.EncodeBool(bool(yy2236))
						}
					}
				}
			}
			if yyr2217 || yy2arr2217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2217[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2239 := z.EncBinary()
						_ = yym2239
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2217[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2240 := z.EncBinary()
						_ = yym2240
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2217 || yy2arr2217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2217[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2242 := *x.FSGroup
						yym2243 := z.EncBinary()
						_ = yym2243
						if false {
						} else {
							r.EncodeInt(int64(yy2242))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2217[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2244 := *x.FSGroup
						yym2245 := z.EncBinary()
						_ = yym2245
						if false {
						} else {
							r.EncodeInt(int64(yy2244))
						}
					}
				}
			}
			if yyr2217 || yy2arr2217 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2246 := z.DecBinary()
	_ = yym2246
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2247 := r.ContainerType()
		if yyct2247 == codecSelferValueTypeMap1234 {
			yyl2247 := r.ReadMapStart()
			if yyl2247 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2247, d)
			}
		} else if yyct2247 == codecSelferValueTypeArray1234 {
			yyl2247 := r.ReadArrayStart()
			if yyl2247 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2247, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2248Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2248Slc
	var yyhl2248 bool = l >= 0
	for yyj2248 := 0; ; yyj2248++ {
		if yyhl2248 {
			if yyj2248 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2248Slc = r.DecodeBytes(yys2248Slc, true, true)
		yys2248 := string(yys2248Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2248 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2254 := z.DecBinary()
				_ = yym2254
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2256 := z.DecBinary()
				_ = yym2256
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2257 := &x.SupplementalGroups
				yym2258 := z.DecBinary()
				_ = yym2258
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2257, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2260 := z.DecBinary()
				_ = yym2260
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2248)
		} // end switch yys2248
	} // end for yyj2248
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2261 int
	var yyb2261 bool
	var yyhl2261 bool = l >= 0
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2267 := z.DecBinary()
		_ = yym2267
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2269 := z.DecBinary()
		_ = yym2269
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2270 := &x.SupplementalGroups
		yym2271 := z.DecBinary()
		_ = yym2271
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2270, false, d)
		}
	}
	yyj2261++
	if yyhl2261 {
		yyb2261 = yyj2261 > l
	} else {
		yyb2261 = r.CheckBreak()
	}
	if yyb2261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2273 := z.DecBinary()
		_ = yym2273
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2261++
		if yyhl2261 {
			yyb2261 = yyj2261 > l
		} else {
			yyb2261 = r.CheckBreak()
		}
		if yyb2261 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2261-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2274 := z.EncBinary()
		_ = yym2274
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2275 := !z.EncBinary()
			yy2arr2275 := z.EncBasicHandle().StructToArray
			var yyq2275 [8]bool
			_, _, _ = yysep2275, yyq2275, yy2arr2275
			const yyr2275 bool = false
			yyq2275[0] = x.Phase != ""
			yyq2275[1] = len(x.Conditions) != 0
			yyq2275[2] = x.Message != ""
			yyq2275[3] = x.Reason != ""
			yyq2275[4] = x.HostIP != ""
			yyq2275[5] = x.PodIP != ""
			yyq2275[6] = x.StartTime != nil
			yyq2275[7] = len(x.ContainerStatuses) != 0
			var yynn2275 int
			if yyr2275 || yy2arr2275 {
				r.EncodeArrayStart(8)
			} else {
				yynn2275 = 0
				for _, b := range yyq2275 {
					if b {
						yynn2275++
					}
				}
				r.EncodeMapStart(yynn2275)
				yynn2275 = 0
			}
			if yyr2275 || yy2arr2275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2275[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2275[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2275 || yy2arr2275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2275[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2278 := z.EncBinary()
						_ = yym2278
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2275[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2279 := z.EncBinary()
						_ = yym2279
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2275 || yy2arr2275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2275[2] {
					yym2281 := z.EncBinary()
					_ = yym2281
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2275[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2282 := z.EncBinary()
					_ = yym2282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2275 || yy2arr2275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2275[3] {
					yym2284 := z.EncBinary()
					_ = yym2284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2275[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2285 := z.EncBinary()
					_ = yym2285
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2275 || yy2arr2275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2275[4] {
					yym2287 := z.EncBinary()
					_ = yym2287
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2275[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2288 := z.EncBinary()
					_ = yym2288
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2275 || yy2arr2275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2275[5] {
					yym2290 := z.EncBinary()
					_ = yym2290
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2275[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2291 := z.EncBinary()
					_ = yym2291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2275 || yy2arr2275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2275[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2293 := z.EncBinary()
						_ = yym2293
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2293 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2293 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2275[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2294 := z.EncBinary()
						_ = yym2294
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2294 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2294 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2275 || yy2arr2275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2275[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2296 := z.EncBinary()
						_ = yym2296
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2275[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2297 := z.EncBinary()
						_ = yym2297
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2275 || yy2arr2275 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2298 := z.DecBinary()
	_ = yym2298
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2299 := r.ContainerType()
		if yyct2299 == codecSelferValueTypeMap1234 {
			yyl2299 := r.ReadMapStart()
			if yyl2299 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2299, d)
			}
		} else if yyct2299 == codecSelferValueTypeArray1234 {
			yyl2299 := r.ReadArrayStart()
			if yyl2299 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2299, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2300Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2300Slc
	var yyhl2300 bool = l >= 0
	for yyj2300 := 0; ; yyj2300++ {
		if yyhl2300 {
			if yyj2300 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2300Slc = r.DecodeBytes(yys2300Slc, true, true)
		yys2300 := string(yys2300Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2300 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2302 := &x.Conditions
				yym2303 := z.DecBinary()
				_ = yym2303
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2302), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2309 := z.DecBinary()
				_ = yym2309
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2309 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2309 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2310 := &x.ContainerStatuses
				yym2311 := z.DecBinary()
				_ = yym2311
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2310), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2300)
		} // end switch yys2300
	} // end for yyj2300
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2312 int
	var yyb2312 bool
	var yyhl2312 bool = l >= 0
	yyj2312++
	if yyhl2312 {
		yyb2312 = yyj2312 > l
	} else {
		yyb2312 = r.CheckBreak()
	}
	if yyb2312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2312++
	if yyhl2312 {
		yyb2312 = yyj2312 > l
	} else {
		yyb2312 = r.CheckBreak()
	}
	if yyb2312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2314 := &x.Conditions
		yym2315 := z.DecBinary()
		_ = yym2315
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2314), d)
		}
	}
	yyj2312++
	if yyhl2312 {
		yyb2312 = yyj2312 > l
	} else {
		yyb2312 = r.CheckBreak()
	}
	if yyb2312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2312++
	if yyhl2312 {
		yyb2312 = yyj2312 > l
	} else {
		yyb2312 = r.CheckBreak()
	}
	if yyb2312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2312++
	if yyhl2312 {
		yyb2312 = yyj2312 > l
	} else {
		yyb2312 = r.CheckBreak()
	}
	if yyb2312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2312++
	if yyhl2312 {
		yyb2312 = yyj2312 > l
	} else {
		yyb2312 = r.CheckBreak()
	}
	if yyb2312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2312++
	if yyhl2312 {
		yyb2312 = yyj2312 > l
	} else {
		yyb2312 = r.CheckBreak()
	}
	if yyb2312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2321 := z.DecBinary()
		_ = yym2321
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2321 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2321 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2312++
	if yyhl2312 {
		yyb2312 = yyj2312 > l
	} else {
		yyb2312 = r.CheckBreak()
	}
	if yyb2312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2322 := &x.ContainerStatuses
		yym2323 := z.DecBinary()
		_ = yym2323
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2322), d)
		}
	}
	for {
		yyj2312++
		if yyhl2312 {
			yyb2312 = yyj2312 > l
		} else {
			yyb2312 = r.CheckBreak()
		}
		if yyb2312 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2312-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2324 := z.EncBinary()
		_ = yym2324
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2325 := !z.EncBinary()
			yy2arr2325 := z.EncBasicHandle().StructToArray
			var yyq2325 [4]bool
			_, _, _ = yysep2325, yyq2325, yy2arr2325
			const yyr2325 bool = false
			yyq2325[0] = x.Kind != ""
			yyq2325[1] = x.APIVersion != ""
			yyq2325[2] = true
			yyq2325[3] = true
			var yynn2325 int
			if yyr2325 || yy2arr2325 {
				r.EncodeArrayStart(4)
			} else {
				yynn2325 = 0
				for _, b := range yyq2325 {
					if b {
						yynn2325++
					}
				}
				r.EncodeMapStart(yynn2325)
				yynn2325 = 0
			}
			if yyr2325 || yy2arr2325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2325[0] {
					yym2327 := z.EncBinary()
					_ = yym2327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2325[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2328 := z.EncBinary()
					_ = yym2328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2325 || yy2arr2325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2325[1] {
					yym2330 := z.EncBinary()
					_ = yym2330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2325[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2331 := z.EncBinary()
					_ = yym2331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2325 || yy2arr2325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2325[2] {
					yy2333 := &x.ObjectMeta
					yy2333.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2325[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2334 := &x.ObjectMeta
					yy2334.CodecEncodeSelf(e)
				}
			}
			if yyr2325 || yy2arr2325 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2325[3] {
					yy2336 := &x.Status
					yy2336.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2325[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2337 := &x.Status
					yy2337.CodecEncodeSelf(e)
				}
			}
			if yyr2325 || yy2arr2325 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2338 := z.DecBinary()
	_ = yym2338
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2339 := r.ContainerType()
		if yyct2339 == codecSelferValueTypeMap1234 {
			yyl2339 := r.ReadMapStart()
			if yyl2339 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2339, d)
			}
		} else if yyct2339 == codecSelferValueTypeArray1234 {
			yyl2339 := r.ReadArrayStart()
			if yyl2339 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2339, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2340Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2340Slc
	var yyhl2340 bool = l >= 0
	for yyj2340 := 0; ; yyj2340++ {
		if yyhl2340 {
			if yyj2340 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2340Slc = r.DecodeBytes(yys2340Slc, true, true)
		yys2340 := string(yys2340Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2340 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2343 := &x.ObjectMeta
				yyv2343.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2344 := &x.Status
				yyv2344.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2340)
		} // end switch yys2340
	} // end for yyj2340
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2345 int
	var yyb2345 bool
	var yyhl2345 bool = l >= 0
	yyj2345++
	if yyhl2345 {
		yyb2345 = yyj2345 > l
	} else {
		yyb2345 = r.CheckBreak()
	}
	if yyb2345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2345++
	if yyhl2345 {
		yyb2345 = yyj2345 > l
	} else {
		yyb2345 = r.CheckBreak()
	}
	if yyb2345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2345++
	if yyhl2345 {
		yyb2345 = yyj2345 > l
	} else {
		yyb2345 = r.CheckBreak()
	}
	if yyb2345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2348 := &x.ObjectMeta
		yyv2348.CodecDecodeSelf(d)
	}
	yyj2345++
	if yyhl2345 {
		yyb2345 = yyj2345 > l
	} else {
		yyb2345 = r.CheckBreak()
	}
	if yyb2345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2349 := &x.Status
		yyv2349.CodecDecodeSelf(d)
	}
	for {
		yyj2345++
		if yyhl2345 {
			yyb2345 = yyj2345 > l
		} else {
			yyb2345 = r.CheckBreak()
		}
		if yyb2345 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2345-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2350 := z.EncBinary()
		_ = yym2350
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2351 := !z.EncBinary()
			yy2arr2351 := z.EncBasicHandle().StructToArray
			var yyq2351 [5]bool
			_, _, _ = yysep2351, yyq2351, yy2arr2351
			const yyr2351 bool = false
			yyq2351[0] = x.Kind != ""
			yyq2351[1] = x.APIVersion != ""
			yyq2351[2] = true
			yyq2351[3] = true
			yyq2351[4] = true
			var yynn2351 int
			if yyr2351 || yy2arr2351 {
				r.EncodeArrayStart(5)
			} else {
				yynn2351 = 0
				for _, b := range yyq2351 {
					if b {
						yynn2351++
					}
				}
				r.EncodeMapStart(yynn2351)
				yynn2351 = 0
			}
			if yyr2351 || yy2arr2351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2351[0] {
					yym2353 := z.EncBinary()
					_ = yym2353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2351[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2354 := z.EncBinary()
					_ = yym2354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2351 || yy2arr2351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2351[1] {
					yym2356 := z.EncBinary()
					_ = yym2356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2351[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2357 := z.EncBinary()
					_ = yym2357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2351 || yy2arr2351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2351[2] {
					yy2359 := &x.ObjectMeta
					yy2359.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2351[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2360 := &x.ObjectMeta
					yy2360.CodecEncodeSelf(e)
				}
			}
			if yyr2351 || yy2arr2351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2351[3] {
					yy2362 := &x.Spec
					yy2362.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2351[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2363 := &x.Spec
					yy2363.CodecEncodeSelf(e)
				}
			}
			if yyr2351 || yy2arr2351 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2351[4] {
					yy2365 := &x.Status
					yy2365.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2351[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2366 := &x.Status
					yy2366.CodecEncodeSelf(e)
				}
			}
			if yyr2351 || yy2arr2351 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2367 := z.DecBinary()
	_ = yym2367
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2368 := r.ContainerType()
		if yyct2368 == codecSelferValueTypeMap1234 {
			yyl2368 := r.ReadMapStart()
			if yyl2368 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2368, d)
			}
		} else if yyct2368 == codecSelferValueTypeArray1234 {
			yyl2368 := r.ReadArrayStart()
			if yyl2368 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2368, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2369Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2369Slc
	var yyhl2369 bool = l >= 0
	for yyj2369 := 0; ; yyj2369++ {
		if yyhl2369 {
			if yyj2369 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2369Slc = r.DecodeBytes(yys2369Slc, true, true)
		yys2369 := string(yys2369Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2369 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2372 := &x.ObjectMeta
				yyv2372.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2373 := &x.Spec
				yyv2373.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2374 := &x.Status
				yyv2374.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2369)
		} // end switch yys2369
	} // end for yyj2369
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2375 int
	var yyb2375 bool
	var yyhl2375 bool = l >= 0
	yyj2375++
	if yyhl2375 {
		yyb2375 = yyj2375 > l
	} else {
		yyb2375 = r.CheckBreak()
	}
	if yyb2375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2375++
	if yyhl2375 {
		yyb2375 = yyj2375 > l
	} else {
		yyb2375 = r.CheckBreak()
	}
	if yyb2375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2375++
	if yyhl2375 {
		yyb2375 = yyj2375 > l
	} else {
		yyb2375 = r.CheckBreak()
	}
	if yyb2375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2378 := &x.ObjectMeta
		yyv2378.CodecDecodeSelf(d)
	}
	yyj2375++
	if yyhl2375 {
		yyb2375 = yyj2375 > l
	} else {
		yyb2375 = r.CheckBreak()
	}
	if yyb2375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2379 := &x.Spec
		yyv2379.CodecDecodeSelf(d)
	}
	yyj2375++
	if yyhl2375 {
		yyb2375 = yyj2375 > l
	} else {
		yyb2375 = r.CheckBreak()
	}
	if yyb2375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2380 := &x.Status
		yyv2380.CodecDecodeSelf(d)
	}
	for {
		yyj2375++
		if yyhl2375 {
			yyb2375 = yyj2375 > l
		} else {
			yyb2375 = r.CheckBreak()
		}
		if yyb2375 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2375-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2381 := z.EncBinary()
		_ = yym2381
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2382 := !z.EncBinary()
			yy2arr2382 := z.EncBasicHandle().StructToArray
			var yyq2382 [2]bool
			_, _, _ = yysep2382, yyq2382, yy2arr2382
			const yyr2382 bool = false
			yyq2382[0] = true
			yyq2382[1] = true
			var yynn2382 int
			if yyr2382 || yy2arr2382 {
				r.EncodeArrayStart(2)
			} else {
				yynn2382 = 0
				for _, b := range yyq2382 {
					if b {
						yynn2382++
					}
				}
				r.EncodeMapStart(yynn2382)
				yynn2382 = 0
			}
			if yyr2382 || yy2arr2382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2382[0] {
					yy2384 := &x.ObjectMeta
					yy2384.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2382[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2385 := &x.ObjectMeta
					yy2385.CodecEncodeSelf(e)
				}
			}
			if yyr2382 || yy2arr2382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2382[1] {
					yy2387 := &x.Spec
					yy2387.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2382[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2388 := &x.Spec
					yy2388.CodecEncodeSelf(e)
				}
			}
			if yyr2382 || yy2arr2382 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2389 := z.DecBinary()
	_ = yym2389
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2390 := r.ContainerType()
		if yyct2390 == codecSelferValueTypeMap1234 {
			yyl2390 := r.ReadMapStart()
			if yyl2390 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2390, d)
			}
		} else if yyct2390 == codecSelferValueTypeArray1234 {
			yyl2390 := r.ReadArrayStart()
			if yyl2390 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2390, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2391Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2391Slc
	var yyhl2391 bool = l >= 0
	for yyj2391 := 0; ; yyj2391++ {
		if yyhl2391 {
			if yyj2391 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2391Slc = r.DecodeBytes(yys2391Slc, true, true)
		yys2391 := string(yys2391Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2391 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2392 := &x.ObjectMeta
				yyv2392.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2393 := &x.Spec
				yyv2393.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2391)
		} // end switch yys2391
	} // end for yyj2391
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2394 int
	var yyb2394 bool
	var yyhl2394 bool = l >= 0
	yyj2394++
	if yyhl2394 {
		yyb2394 = yyj2394 > l
	} else {
		yyb2394 = r.CheckBreak()
	}
	if yyb2394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2395 := &x.ObjectMeta
		yyv2395.CodecDecodeSelf(d)
	}
	yyj2394++
	if yyhl2394 {
		yyb2394 = yyj2394 > l
	} else {
		yyb2394 = r.CheckBreak()
	}
	if yyb2394 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2396 := &x.Spec
		yyv2396.CodecDecodeSelf(d)
	}
	for {
		yyj2394++
		if yyhl2394 {
			yyb2394 = yyj2394 > l
		} else {
			yyb2394 = r.CheckBreak()
		}
		if yyb2394 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2394-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2397 := z.EncBinary()
		_ = yym2397
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2398 := !z.EncBinary()
			yy2arr2398 := z.EncBasicHandle().StructToArray
			var yyq2398 [4]bool
			_, _, _ = yysep2398, yyq2398, yy2arr2398
			const yyr2398 bool = false
			yyq2398[0] = x.Kind != ""
			yyq2398[1] = x.APIVersion != ""
			yyq2398[2] = true
			yyq2398[3] = true
			var yynn2398 int
			if yyr2398 || yy2arr2398 {
				r.EncodeArrayStart(4)
			} else {
				yynn2398 = 0
				for _, b := range yyq2398 {
					if b {
						yynn2398++
					}
				}
				r.EncodeMapStart(yynn2398)
				yynn2398 = 0
			}
			if yyr2398 || yy2arr2398 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2398[0] {
					yym2400 := z.EncBinary()
					_ = yym2400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2398[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2401 := z.EncBinary()
					_ = yym2401
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2398 || yy2arr2398 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2398[1] {
					yym2403 := z.EncBinary()
					_ = yym2403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2398[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2404 := z.EncBinary()
					_ = yym2404
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2398 || yy2arr2398 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2398[2] {
					yy2406 := &x.ObjectMeta
					yy2406.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2398[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2407 := &x.ObjectMeta
					yy2407.CodecEncodeSelf(e)
				}
			}
			if yyr2398 || yy2arr2398 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2398[3] {
					yy2409 := &x.Template
					yy2409.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2398[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2410 := &x.Template
					yy2410.CodecEncodeSelf(e)
				}
			}
			if yyr2398 || yy2arr2398 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2411 := z.DecBinary()
	_ = yym2411
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2412 := r.ContainerType()
		if yyct2412 == codecSelferValueTypeMap1234 {
			yyl2412 := r.ReadMapStart()
			if yyl2412 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2412, d)
			}
		} else if yyct2412 == codecSelferValueTypeArray1234 {
			yyl2412 := r.ReadArrayStart()
			if yyl2412 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2412, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2413Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2413Slc
	var yyhl2413 bool = l >= 0
	for yyj2413 := 0; ; yyj2413++ {
		if yyhl2413 {
			if yyj2413 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2413Slc = r.DecodeBytes(yys2413Slc, true, true)
		yys2413 := string(yys2413Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2413 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2416 := &x.ObjectMeta
				yyv2416.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2417 := &x.Template
				yyv2417.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2413)
		} // end switch yys2413
	} // end for yyj2413
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2418 int
	var yyb2418 bool
	var yyhl2418 bool = l >= 0
	yyj2418++
	if yyhl2418 {
		yyb2418 = yyj2418 > l
	} else {
		yyb2418 = r.CheckBreak()
	}
	if yyb2418 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2418++
	if yyhl2418 {
		yyb2418 = yyj2418 > l
	} else {
		yyb2418 = r.CheckBreak()
	}
	if yyb2418 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2418++
	if yyhl2418 {
		yyb2418 = yyj2418 > l
	} else {
		yyb2418 = r.CheckBreak()
	}
	if yyb2418 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2421 := &x.ObjectMeta
		yyv2421.CodecDecodeSelf(d)
	}
	yyj2418++
	if yyhl2418 {
		yyb2418 = yyj2418 > l
	} else {
		yyb2418 = r.CheckBreak()
	}
	if yyb2418 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2422 := &x.Template
		yyv2422.CodecDecodeSelf(d)
	}
	for {
		yyj2418++
		if yyhl2418 {
			yyb2418 = yyj2418 > l
		} else {
			yyb2418 = r.CheckBreak()
		}
		if yyb2418 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2418-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2423 := z.EncBinary()
		_ = yym2423
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2424 := !z.EncBinary()
			yy2arr2424 := z.EncBasicHandle().StructToArray
			var yyq2424 [4]bool
			_, _, _ = yysep2424, yyq2424, yy2arr2424
			const yyr2424 bool = false
			yyq2424[0] = x.Kind != ""
			yyq2424[1] = x.APIVersion != ""
			yyq2424[2] = true
			var yynn2424 int
			if yyr2424 || yy2arr2424 {
				r.EncodeArrayStart(4)
			} else {
				yynn2424 = 1
				for _, b := range yyq2424 {
					if b {
						yynn2424++
					}
				}
				r.EncodeMapStart(yynn2424)
				yynn2424 = 0
			}
			if yyr2424 || yy2arr2424 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2424[0] {
					yym2426 := z.EncBinary()
					_ = yym2426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2424[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2427 := z.EncBinary()
					_ = yym2427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2424 || yy2arr2424 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2424[1] {
					yym2429 := z.EncBinary()
					_ = yym2429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2424[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2430 := z.EncBinary()
					_ = yym2430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2424 || yy2arr2424 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2424[2] {
					yy2432 := &x.ListMeta
					yym2433 := z.EncBinary()
					_ = yym2433
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2432) {
					} else {
						z.EncFallback(yy2432)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2424[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2434 := &x.ListMeta
					yym2435 := z.EncBinary()
					_ = yym2435
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2434) {
					} else {
						z.EncFallback(yy2434)
					}
				}
			}
			if yyr2424 || yy2arr2424 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2437 := z.EncBinary()
					_ = yym2437
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2438 := z.EncBinary()
					_ = yym2438
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2424 || yy2arr2424 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2439 := z.DecBinary()
	_ = yym2439
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2440 := r.ContainerType()
		if yyct2440 == codecSelferValueTypeMap1234 {
			yyl2440 := r.ReadMapStart()
			if yyl2440 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2440, d)
			}
		} else if yyct2440 == codecSelferValueTypeArray1234 {
			yyl2440 := r.ReadArrayStart()
			if yyl2440 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2440, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2441Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2441Slc
	var yyhl2441 bool = l >= 0
	for yyj2441 := 0; ; yyj2441++ {
		if yyhl2441 {
			if yyj2441 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2441Slc = r.DecodeBytes(yys2441Slc, true, true)
		yys2441 := string(yys2441Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2441 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2444 := &x.ListMeta
				yym2445 := z.DecBinary()
				_ = yym2445
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2444) {
				} else {
					z.DecFallback(yyv2444, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2446 := &x.Items
				yym2447 := z.DecBinary()
				_ = yym2447
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2446), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2441)
		} // end switch yys2441
	} // end for yyj2441
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2448 int
	var yyb2448 bool
	var yyhl2448 bool = l >= 0
	yyj2448++
	if yyhl2448 {
		yyb2448 = yyj2448 > l
	} else {
		yyb2448 = r.CheckBreak()
	}
	if yyb2448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2448++
	if yyhl2448 {
		yyb2448 = yyj2448 > l
	} else {
		yyb2448 = r.CheckBreak()
	}
	if yyb2448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2448++
	if yyhl2448 {
		yyb2448 = yyj2448 > l
	} else {
		yyb2448 = r.CheckBreak()
	}
	if yyb2448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2451 := &x.ListMeta
		yym2452 := z.DecBinary()
		_ = yym2452
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2451) {
		} else {
			z.DecFallback(yyv2451, false)
		}
	}
	yyj2448++
	if yyhl2448 {
		yyb2448 = yyj2448 > l
	} else {
		yyb2448 = r.CheckBreak()
	}
	if yyb2448 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2453 := &x.Items
		yym2454 := z.DecBinary()
		_ = yym2454
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2453), d)
		}
	}
	for {
		yyj2448++
		if yyhl2448 {
			yyb2448 = yyj2448 > l
		} else {
			yyb2448 = r.CheckBreak()
		}
		if yyb2448 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2448-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2455 := z.EncBinary()
		_ = yym2455
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2456 := !z.EncBinary()
			yy2arr2456 := z.EncBasicHandle().StructToArray
			var yyq2456 [3]bool
			_, _, _ = yysep2456, yyq2456, yy2arr2456
			const yyr2456 bool = false
			yyq2456[2] = x.Template != nil
			var yynn2456 int
			if yyr2456 || yy2arr2456 {
				r.EncodeArrayStart(3)
			} else {
				yynn2456 = 2
				for _, b := range yyq2456 {
					if b {
						yynn2456++
					}
				}
				r.EncodeMapStart(yynn2456)
				yynn2456 = 0
			}
			if yyr2456 || yy2arr2456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2458 := z.EncBinary()
				_ = yym2458
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2459 := z.EncBinary()
				_ = yym2459
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2456 || yy2arr2456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2461 := z.EncBinary()
					_ = yym2461
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2462 := z.EncBinary()
					_ = yym2462
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2456 || yy2arr2456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2456[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2456[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2456 || yy2arr2456 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2464 := z.DecBinary()
	_ = yym2464
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2465 := r.ContainerType()
		if yyct2465 == codecSelferValueTypeMap1234 {
			yyl2465 := r.ReadMapStart()
			if yyl2465 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2465, d)
			}
		} else if yyct2465 == codecSelferValueTypeArray1234 {
			yyl2465 := r.ReadArrayStart()
			if yyl2465 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2465, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2466Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2466Slc
	var yyhl2466 bool = l >= 0
	for yyj2466 := 0; ; yyj2466++ {
		if yyhl2466 {
			if yyj2466 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2466Slc = r.DecodeBytes(yys2466Slc, true, true)
		yys2466 := string(yys2466Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2466 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2468 := &x.Selector
				yym2469 := z.DecBinary()
				_ = yym2469
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2468, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2466)
		} // end switch yys2466
	} // end for yyj2466
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2471 int
	var yyb2471 bool
	var yyhl2471 bool = l >= 0
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2473 := &x.Selector
		yym2474 := z.DecBinary()
		_ = yym2474
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2473, false, d)
		}
	}
	yyj2471++
	if yyhl2471 {
		yyb2471 = yyj2471 > l
	} else {
		yyb2471 = r.CheckBreak()
	}
	if yyb2471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2471++
		if yyhl2471 {
			yyb2471 = yyj2471 > l
		} else {
			yyb2471 = r.CheckBreak()
		}
		if yyb2471 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2471-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2476 := z.EncBinary()
		_ = yym2476
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2477 := !z.EncBinary()
			yy2arr2477 := z.EncBasicHandle().StructToArray
			var yyq2477 [4]bool
			_, _, _ = yysep2477, yyq2477, yy2arr2477
			const yyr2477 bool = false
			yyq2477[1] = x.FullyLabeledReplicas != 0
			yyq2477[2] = x.ReadyReplicas != 0
			yyq2477[3] = x.ObservedGeneration != 0
			var yynn2477 int
			if yyr2477 || yy2arr2477 {
				r.EncodeArrayStart(4)
			} else {
				yynn2477 = 1
				for _, b := range yyq2477 {
					if b {
						yynn2477++
					}
				}
				r.EncodeMapStart(yynn2477)
				yynn2477 = 0
			}
			if yyr2477 || yy2arr2477 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2479 := z.EncBinary()
				_ = yym2479
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2480 := z.EncBinary()
				_ = yym2480
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2477 || yy2arr2477 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2477[1] {
					yym2482 := z.EncBinary()
					_ = yym2482
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2477[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2483 := z.EncBinary()
					_ = yym2483
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2477 || yy2arr2477 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2477[2] {
					yym2485 := z.EncBinary()
					_ = yym2485
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2477[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2486 := z.EncBinary()
					_ = yym2486
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr2477 || yy2arr2477 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2477[3] {
					yym2488 := z.EncBinary()
					_ = yym2488
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2477[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2489 := z.EncBinary()
					_ = yym2489
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2477 || yy2arr2477 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2490 := z.DecBinary()
	_ = yym2490
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2491 := r.ContainerType()
		if yyct2491 == codecSelferValueTypeMap1234 {
			yyl2491 := r.ReadMapStart()
			if yyl2491 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2491, d)
			}
		} else if yyct2491 == codecSelferValueTypeArray1234 {
			yyl2491 := r.ReadArrayStart()
			if yyl2491 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2491, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2492Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2492Slc
	var yyhl2492 bool = l >= 0
	for yyj2492 := 0; ; yyj2492++ {
		if yyhl2492 {
			if yyj2492 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2492Slc = r.DecodeBytes(yys2492Slc, true, true)
		yys2492 := string(yys2492Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2492 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2492)
		} // end switch yys2492
	} // end for yyj2492
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2497 int
	var yyb2497 bool
	var yyhl2497 bool = l >= 0
	yyj2497++
	if yyhl2497 {
		yyb2497 = yyj2497 > l
	} else {
		yyb2497 = r.CheckBreak()
	}
	if yyb2497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2497++
	if yyhl2497 {
		yyb2497 = yyj2497 > l
	} else {
		yyb2497 = r.CheckBreak()
	}
	if yyb2497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2497++
	if yyhl2497 {
		yyb2497 = yyj2497 > l
	} else {
		yyb2497 = r.CheckBreak()
	}
	if yyb2497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj2497++
	if yyhl2497 {
		yyb2497 = yyj2497 > l
	} else {
		yyb2497 = r.CheckBreak()
	}
	if yyb2497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2497++
		if yyhl2497 {
			yyb2497 = yyj2497 > l
		} else {
			yyb2497 = r.CheckBreak()
		}
		if yyb2497 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2497-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2502 := z.EncBinary()
		_ = yym2502
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2503 := !z.EncBinary()
			yy2arr2503 := z.EncBasicHandle().StructToArray
			var yyq2503 [5]bool
			_, _, _ = yysep2503, yyq2503, yy2arr2503
			const yyr2503 bool = false
			yyq2503[0] = x.Kind != ""
			yyq2503[1] = x.APIVersion != ""
			yyq2503[2] = true
			yyq2503[3] = true
			yyq2503[4] = true
			var yynn2503 int
			if yyr2503 || yy2arr2503 {
				r.EncodeArrayStart(5)
			} else {
				yynn2503 = 0
				for _, b := range yyq2503 {
					if b {
						yynn2503++
					}
				}
				r.EncodeMapStart(yynn2503)
				yynn2503 = 0
			}
			if yyr2503 || yy2arr2503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2503[0] {
					yym2505 := z.EncBinary()
					_ = yym2505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2503[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2506 := z.EncBinary()
					_ = yym2506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2503 || yy2arr2503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2503[1] {
					yym2508 := z.EncBinary()
					_ = yym2508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2503[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2509 := z.EncBinary()
					_ = yym2509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2503 || yy2arr2503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2503[2] {
					yy2511 := &x.ObjectMeta
					yy2511.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2503[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2512 := &x.ObjectMeta
					yy2512.CodecEncodeSelf(e)
				}
			}
			if yyr2503 || yy2arr2503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2503[3] {
					yy2514 := &x.Spec
					yy2514.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2503[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2515 := &x.Spec
					yy2515.CodecEncodeSelf(e)
				}
			}
			if yyr2503 || yy2arr2503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2503[4] {
					yy2517 := &x.Status
					yy2517.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2503[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2518 := &x.Status
					yy2518.CodecEncodeSelf(e)
				}
			}
			if yyr2503 || yy2arr2503 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2519 := z.DecBinary()
	_ = yym2519
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2520 := r.ContainerType()
		if yyct2520 == codecSelferValueTypeMap1234 {
			yyl2520 := r.ReadMapStart()
			if yyl2520 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2520, d)
			}
		} else if yyct2520 == codecSelferValueTypeArray1234 {
			yyl2520 := r.ReadArrayStart()
			if yyl2520 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2520, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2521Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2521Slc
	var yyhl2521 bool = l >= 0
	for yyj2521 := 0; ; yyj2521++ {
		if yyhl2521 {
			if yyj2521 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2521Slc = r.DecodeBytes(yys2521Slc, true, true)
		yys2521 := string(yys2521Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2521 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2524 := &x.ObjectMeta
				yyv2524.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2525 := &x.Spec
				yyv2525.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2526 := &x.Status
				yyv2526.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2521)
		} // end switch yys2521
	} // end for yyj2521
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2527 int
	var yyb2527 bool
	var yyhl2527 bool = l >= 0
	yyj2527++
	if yyhl2527 {
		yyb2527 = yyj2527 > l
	} else {
		yyb2527 = r.CheckBreak()
	}
	if yyb2527 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2527++
	if yyhl2527 {
		yyb2527 = yyj2527 > l
	} else {
		yyb2527 = r.CheckBreak()
	}
	if yyb2527 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2527++
	if yyhl2527 {
		yyb2527 = yyj2527 > l
	} else {
		yyb2527 = r.CheckBreak()
	}
	if yyb2527 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2530 := &x.ObjectMeta
		yyv2530.CodecDecodeSelf(d)
	}
	yyj2527++
	if yyhl2527 {
		yyb2527 = yyj2527 > l
	} else {
		yyb2527 = r.CheckBreak()
	}
	if yyb2527 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2531 := &x.Spec
		yyv2531.CodecDecodeSelf(d)
	}
	yyj2527++
	if yyhl2527 {
		yyb2527 = yyj2527 > l
	} else {
		yyb2527 = r.CheckBreak()
	}
	if yyb2527 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2532 := &x.Status
		yyv2532.CodecDecodeSelf(d)
	}
	for {
		yyj2527++
		if yyhl2527 {
			yyb2527 = yyj2527 > l
		} else {
			yyb2527 = r.CheckBreak()
		}
		if yyb2527 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2527-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2533 := z.EncBinary()
		_ = yym2533
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2534 := !z.EncBinary()
			yy2arr2534 := z.EncBasicHandle().StructToArray
			var yyq2534 [4]bool
			_, _, _ = yysep2534, yyq2534, yy2arr2534
			const yyr2534 bool = false
			yyq2534[0] = x.Kind != ""
			yyq2534[1] = x.APIVersion != ""
			yyq2534[2] = true
			var yynn2534 int
			if yyr2534 || yy2arr2534 {
				r.EncodeArrayStart(4)
			} else {
				yynn2534 = 1
				for _, b := range yyq2534 {
					if b {
						yynn2534++
					}
				}
				r.EncodeMapStart(yynn2534)
				yynn2534 = 0
			}
			if yyr2534 || yy2arr2534 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2534[0] {
					yym2536 := z.EncBinary()
					_ = yym2536
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2534[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2537 := z.EncBinary()
					_ = yym2537
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2534 || yy2arr2534 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2534[1] {
					yym2539 := z.EncBinary()
					_ = yym2539
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2534[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2540 := z.EncBinary()
					_ = yym2540
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2534 || yy2arr2534 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2534[2] {
					yy2542 := &x.ListMeta
					yym2543 := z.EncBinary()
					_ = yym2543
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2542) {
					} else {
						z.EncFallback(yy2542)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2534[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2544 := &x.ListMeta
					yym2545 := z.EncBinary()
					_ = yym2545
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2544) {
					} else {
						z.EncFallback(yy2544)
					}
				}
			}
			if yyr2534 || yy2arr2534 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2547 := z.EncBinary()
					_ = yym2547
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2548 := z.EncBinary()
					_ = yym2548
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2534 || yy2arr2534 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2549 := z.DecBinary()
	_ = yym2549
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2550 := r.ContainerType()
		if yyct2550 == codecSelferValueTypeMap1234 {
			yyl2550 := r.ReadMapStart()
			if yyl2550 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2550, d)
			}
		} else if yyct2550 == codecSelferValueTypeArray1234 {
			yyl2550 := r.ReadArrayStart()
			if yyl2550 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2550, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2551Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2551Slc
	var yyhl2551 bool = l >= 0
	for yyj2551 := 0; ; yyj2551++ {
		if yyhl2551 {
			if yyj2551 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2551Slc = r.DecodeBytes(yys2551Slc, true, true)
		yys2551 := string(yys2551Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2551 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2554 := &x.ListMeta
				yym2555 := z.DecBinary()
				_ = yym2555
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2554) {
				} else {
					z.DecFallback(yyv2554, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2556 := &x.Items
				yym2557 := z.DecBinary()
				_ = yym2557
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2556), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2551)
		} // end switch yys2551
	} // end for yyj2551
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2558 int
	var yyb2558 bool
	var yyhl2558 bool = l >= 0
	yyj2558++
	if yyhl2558 {
		yyb2558 = yyj2558 > l
	} else {
		yyb2558 = r.CheckBreak()
	}
	if yyb2558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2558++
	if yyhl2558 {
		yyb2558 = yyj2558 > l
	} else {
		yyb2558 = r.CheckBreak()
	}
	if yyb2558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2558++
	if yyhl2558 {
		yyb2558 = yyj2558 > l
	} else {
		yyb2558 = r.CheckBreak()
	}
	if yyb2558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2561 := &x.ListMeta
		yym2562 := z.DecBinary()
		_ = yym2562
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2561) {
		} else {
			z.DecFallback(yyv2561, false)
		}
	}
	yyj2558++
	if yyhl2558 {
		yyb2558 = yyj2558 > l
	} else {
		yyb2558 = r.CheckBreak()
	}
	if yyb2558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2563 := &x.Items
		yym2564 := z.DecBinary()
		_ = yym2564
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2563), d)
		}
	}
	for {
		yyj2558++
		if yyhl2558 {
			yyb2558 = yyj2558 > l
		} else {
			yyb2558 = r.CheckBreak()
		}
		if yyb2558 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2558-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2565 := z.EncBinary()
		_ = yym2565
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2566 := !z.EncBinary()
			yy2arr2566 := z.EncBasicHandle().StructToArray
			var yyq2566 [4]bool
			_, _, _ = yysep2566, yyq2566, yy2arr2566
			const yyr2566 bool = false
			yyq2566[0] = x.Kind != ""
			yyq2566[1] = x.APIVersion != ""
			yyq2566[2] = true
			var yynn2566 int
			if yyr2566 || yy2arr2566 {
				r.EncodeArrayStart(4)
			} else {
				yynn2566 = 1
				for _, b := range yyq2566 {
					if b {
						yynn2566++
					}
				}
				r.EncodeMapStart(yynn2566)
				yynn2566 = 0
			}
			if yyr2566 || yy2arr2566 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2566[0] {
					yym2568 := z.EncBinary()
					_ = yym2568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2566[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2569 := z.EncBinary()
					_ = yym2569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2566 || yy2arr2566 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2566[1] {
					yym2571 := z.EncBinary()
					_ = yym2571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2566[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2572 := z.EncBinary()
					_ = yym2572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2566 || yy2arr2566 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2566[2] {
					yy2574 := &x.ListMeta
					yym2575 := z.EncBinary()
					_ = yym2575
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2574) {
					} else {
						z.EncFallback(yy2574)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2566[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2576 := &x.ListMeta
					yym2577 := z.EncBinary()
					_ = yym2577
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2576) {
					} else {
						z.EncFallback(yy2576)
					}
				}
			}
			if yyr2566 || yy2arr2566 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2579 := z.EncBinary()
					_ = yym2579
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2580 := z.EncBinary()
					_ = yym2580
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2566 || yy2arr2566 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2581 := z.DecBinary()
	_ = yym2581
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2582 := r.ContainerType()
		if yyct2582 == codecSelferValueTypeMap1234 {
			yyl2582 := r.ReadMapStart()
			if yyl2582 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2582, d)
			}
		} else if yyct2582 == codecSelferValueTypeArray1234 {
			yyl2582 := r.ReadArrayStart()
			if yyl2582 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2582, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2583Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2583Slc
	var yyhl2583 bool = l >= 0
	for yyj2583 := 0; ; yyj2583++ {
		if yyhl2583 {
			if yyj2583 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2583Slc = r.DecodeBytes(yys2583Slc, true, true)
		yys2583 := string(yys2583Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2583 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2586 := &x.ListMeta
				yym2587 := z.DecBinary()
				_ = yym2587
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2586) {
				} else {
					z.DecFallback(yyv2586, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2588 := &x.Items
				yym2589 := z.DecBinary()
				_ = yym2589
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2588), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2583)
		} // end switch yys2583
	} // end for yyj2583
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2590 int
	var yyb2590 bool
	var yyhl2590 bool = l >= 0
	yyj2590++
	if yyhl2590 {
		yyb2590 = yyj2590 > l
	} else {
		yyb2590 = r.CheckBreak()
	}
	if yyb2590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2590++
	if yyhl2590 {
		yyb2590 = yyj2590 > l
	} else {
		yyb2590 = r.CheckBreak()
	}
	if yyb2590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2590++
	if yyhl2590 {
		yyb2590 = yyj2590 > l
	} else {
		yyb2590 = r.CheckBreak()
	}
	if yyb2590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2593 := &x.ListMeta
		yym2594 := z.DecBinary()
		_ = yym2594
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2593) {
		} else {
			z.DecFallback(yyv2593, false)
		}
	}
	yyj2590++
	if yyhl2590 {
		yyb2590 = yyj2590 > l
	} else {
		yyb2590 = r.CheckBreak()
	}
	if yyb2590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2595 := &x.Items
		yym2596 := z.DecBinary()
		_ = yym2596
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2595), d)
		}
	}
	for {
		yyj2590++
		if yyhl2590 {
			yyb2590 = yyj2590 > l
		} else {
			yyb2590 = r.CheckBreak()
		}
		if yyb2590 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2590-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2597 := z.EncBinary()
	_ = yym2597
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2598 := z.DecBinary()
	_ = yym2598
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2599 := z.EncBinary()
	_ = yym2599
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2600 := z.DecBinary()
	_ = yym2600
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2601 := z.EncBinary()
		_ = yym2601
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2602 := !z.EncBinary()
			yy2arr2602 := z.EncBasicHandle().StructToArray
			var yyq2602 [1]bool
			_, _, _ = yysep2602, yyq2602, yy2arr2602
			const yyr2602 bool = false
			yyq2602[0] = true
			var yynn2602 int
			if yyr2602 || yy2arr2602 {
				r.EncodeArrayStart(1)
			} else {
				yynn2602 = 0
				for _, b := range yyq2602 {
					if b {
						yynn2602++
					}
				}
				r.EncodeMapStart(yynn2602)
				yynn2602 = 0
			}
			if yyr2602 || yy2arr2602 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2602[0] {
					yy2604 := &x.LoadBalancer
					yy2604.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2602[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2605 := &x.LoadBalancer
					yy2605.CodecEncodeSelf(e)
				}
			}
			if yyr2602 || yy2arr2602 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2606 := z.DecBinary()
	_ = yym2606
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2607 := r.ContainerType()
		if yyct2607 == codecSelferValueTypeMap1234 {
			yyl2607 := r.ReadMapStart()
			if yyl2607 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2607, d)
			}
		} else if yyct2607 == codecSelferValueTypeArray1234 {
			yyl2607 := r.ReadArrayStart()
			if yyl2607 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2607, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2608Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2608Slc
	var yyhl2608 bool = l >= 0
	for yyj2608 := 0; ; yyj2608++ {
		if yyhl2608 {
			if yyj2608 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2608Slc = r.DecodeBytes(yys2608Slc, true, true)
		yys2608 := string(yys2608Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2608 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2609 := &x.LoadBalancer
				yyv2609.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2608)
		} // end switch yys2608
	} // end for yyj2608
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2610 int
	var yyb2610 bool
	var yyhl2610 bool = l >= 0
	yyj2610++
	if yyhl2610 {
		yyb2610 = yyj2610 > l
	} else {
		yyb2610 = r.CheckBreak()
	}
	if yyb2610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2611 := &x.LoadBalancer
		yyv2611.CodecDecodeSelf(d)
	}
	for {
		yyj2610++
		if yyhl2610 {
			yyb2610 = yyj2610 > l
		} else {
			yyb2610 = r.CheckBreak()
		}
		if yyb2610 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2610-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2612 := z.EncBinary()
		_ = yym2612
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2613 := !z.EncBinary()
			yy2arr2613 := z.EncBasicHandle().StructToArray
			var yyq2613 [1]bool
			_, _, _ = yysep2613, yyq2613, yy2arr2613
			const yyr2613 bool = false
			yyq2613[0] = len(x.Ingress) != 0
			var yynn2613 int
			if yyr2613 || yy2arr2613 {
				r.EncodeArrayStart(1)
			} else {
				yynn2613 = 0
				for _, b := range yyq2613 {
					if b {
						yynn2613++
					}
				}
				r.EncodeMapStart(yynn2613)
				yynn2613 = 0
			}
			if yyr2613 || yy2arr2613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2613[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2615 := z.EncBinary()
						_ = yym2615
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2613[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2616 := z.EncBinary()
						_ = yym2616
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2613 || yy2arr2613 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2617 := z.DecBinary()
	_ = yym2617
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2618 := r.ContainerType()
		if yyct2618 == codecSelferValueTypeMap1234 {
			yyl2618 := r.ReadMapStart()
			if yyl2618 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2618, d)
			}
		} else if yyct2618 == codecSelferValueTypeArray1234 {
			yyl2618 := r.ReadArrayStart()
			if yyl2618 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2618, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2619Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2619Slc
	var yyhl2619 bool = l >= 0
	for yyj2619 := 0; ; yyj2619++ {
		if yyhl2619 {
			if yyj2619 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2619Slc = r.DecodeBytes(yys2619Slc, true, true)
		yys2619 := string(yys2619Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2619 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2620 := &x.Ingress
				yym2621 := z.DecBinary()
				_ = yym2621
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2620), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2619)
		} // end switch yys2619
	} // end for yyj2619
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2622 int
	var yyb2622 bool
	var yyhl2622 bool = l >= 0
	yyj2622++
	if yyhl2622 {
		yyb2622 = yyj2622 > l
	} else {
		yyb2622 = r.CheckBreak()
	}
	if yyb2622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2623 := &x.Ingress
		yym2624 := z.DecBinary()
		_ = yym2624
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2623), d)
		}
	}
	for {
		yyj2622++
		if yyhl2622 {
			yyb2622 = yyj2622 > l
		} else {
			yyb2622 = r.CheckBreak()
		}
		if yyb2622 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2622-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2625 := z.EncBinary()
		_ = yym2625
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2626 := !z.EncBinary()
			yy2arr2626 := z.EncBasicHandle().StructToArray
			var yyq2626 [2]bool
			_, _, _ = yysep2626, yyq2626, yy2arr2626
			const yyr2626 bool = false
			yyq2626[0] = x.IP != ""
			yyq2626[1] = x.Hostname != ""
			var yynn2626 int
			if yyr2626 || yy2arr2626 {
				r.EncodeArrayStart(2)
			} else {
				yynn2626 = 0
				for _, b := range yyq2626 {
					if b {
						yynn2626++
					}
				}
				r.EncodeMapStart(yynn2626)
				yynn2626 = 0
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2626[0] {
					yym2628 := z.EncBinary()
					_ = yym2628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2626[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2629 := z.EncBinary()
					_ = yym2629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2626[1] {
					yym2631 := z.EncBinary()
					_ = yym2631
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2626[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2632 := z.EncBinary()
					_ = yym2632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2626 || yy2arr2626 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2633 := z.DecBinary()
	_ = yym2633
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2634 := r.ContainerType()
		if yyct2634 == codecSelferValueTypeMap1234 {
			yyl2634 := r.ReadMapStart()
			if yyl2634 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2634, d)
			}
		} else if yyct2634 == codecSelferValueTypeArray1234 {
			yyl2634 := r.ReadArrayStart()
			if yyl2634 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2634, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2635Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2635Slc
	var yyhl2635 bool = l >= 0
	for yyj2635 := 0; ; yyj2635++ {
		if yyhl2635 {
			if yyj2635 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2635Slc = r.DecodeBytes(yys2635Slc, true, true)
		yys2635 := string(yys2635Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2635 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2635)
		} // end switch yys2635
	} // end for yyj2635
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2638 int
	var yyb2638 bool
	var yyhl2638 bool = l >= 0
	yyj2638++
	if yyhl2638 {
		yyb2638 = yyj2638 > l
	} else {
		yyb2638 = r.CheckBreak()
	}
	if yyb2638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2638++
	if yyhl2638 {
		yyb2638 = yyj2638 > l
	} else {
		yyb2638 = r.CheckBreak()
	}
	if yyb2638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2638++
		if yyhl2638 {
			yyb2638 = yyj2638 > l
		} else {
			yyb2638 = r.CheckBreak()
		}
		if yyb2638 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2638-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2641 := z.EncBinary()
		_ = yym2641
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2642 := !z.EncBinary()
			yy2arr2642 := z.EncBasicHandle().StructToArray
			var yyq2642 [9]bool
			_, _, _ = yysep2642, yyq2642, yy2arr2642
			const yyr2642 bool = false
			yyq2642[0] = x.Type != ""
			yyq2642[3] = x.ClusterIP != ""
			yyq2642[5] = len(x.ExternalIPs) != 0
			yyq2642[6] = x.LoadBalancerIP != ""
			yyq2642[7] = x.SessionAffinity != ""
			yyq2642[8] = len(x.LoadBalancerSourceRanges) != 0
			var yynn2642 int
			if yyr2642 || yy2arr2642 {
				r.EncodeArrayStart(9)
			} else {
				yynn2642 = 3
				for _, b := range yyq2642 {
					if b {
						yynn2642++
					}
				}
				r.EncodeMapStart(yynn2642)
				yynn2642 = 0
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2642[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2642[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2645 := z.EncBinary()
					_ = yym2645
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2646 := z.EncBinary()
					_ = yym2646
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2648 := z.EncBinary()
					_ = yym2648
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2649 := z.EncBinary()
					_ = yym2649
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2642[3] {
					yym2651 := z.EncBinary()
					_ = yym2651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2642[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2652 := z.EncBinary()
					_ = yym2652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2654 := z.EncBinary()
				_ = yym2654
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ExternalName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2655 := z.EncBinary()
				_ = yym2655
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2642[5] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2657 := z.EncBinary()
						_ = yym2657
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2642[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2658 := z.EncBinary()
						_ = yym2658
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2642[6] {
					yym2660 := z.EncBinary()
					_ = yym2660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2642[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2661 := z.EncBinary()
					_ = yym2661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2642[7] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2642[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2642[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2664 := z.EncBinary()
						_ = yym2664
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2642[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2665 := z.EncBinary()
						_ = yym2665
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2642 || yy2arr2642 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2666 := z.DecBinary()
	_ = yym2666
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2667 := r.ContainerType()
		if yyct2667 == codecSelferValueTypeMap1234 {
			yyl2667 := r.ReadMapStart()
			if yyl2667 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2667, d)
			}
		} else if yyct2667 == codecSelferValueTypeArray1234 {
			yyl2667 := r.ReadArrayStart()
			if yyl2667 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2667, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2668Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2668Slc
	var yyhl2668 bool = l >= 0
	for yyj2668 := 0; ; yyj2668++ {
		if yyhl2668 {
			if yyj2668 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2668Slc = r.DecodeBytes(yys2668Slc, true, true)
		yys2668 := string(yys2668Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2668 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2670 := &x.Ports
				yym2671 := z.DecBinary()
				_ = yym2671
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2670), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2672 := &x.Selector
				yym2673 := z.DecBinary()
				_ = yym2673
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2672, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "ExternalName":
			if r.TryDecodeAsNil() {
				x.ExternalName = ""
			} else {
				x.ExternalName = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2676 := &x.ExternalIPs
				yym2677 := z.DecBinary()
				_ = yym2677
				if false {
				} else {
					z.F.DecSliceStringX(yyv2676, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2680 := &x.LoadBalancerSourceRanges
				yym2681 := z.DecBinary()
				_ = yym2681
				if false {
				} else {
					z.F.DecSliceStringX(yyv2680, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2668)
		} // end switch yys2668
	} // end for yyj2668
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2682 int
	var yyb2682 bool
	var yyhl2682 bool = l >= 0
	yyj2682++
	if yyhl2682 {
		yyb2682 = yyj2682 > l
	} else {
		yyb2682 = r.CheckBreak()
	}
	if yyb2682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2682++
	if yyhl2682 {
		yyb2682 = yyj2682 > l
	} else {
		yyb2682 = r.CheckBreak()
	}
	if yyb2682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2684 := &x.Ports
		yym2685 := z.DecBinary()
		_ = yym2685
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2684), d)
		}
	}
	yyj2682++
	if yyhl2682 {
		yyb2682 = yyj2682 > l
	} else {
		yyb2682 = r.CheckBreak()
	}
	if yyb2682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2686 := &x.Selector
		yym2687 := z.DecBinary()
		_ = yym2687
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2686, false, d)
		}
	}
	yyj2682++
	if yyhl2682 {
		yyb2682 = yyj2682 > l
	} else {
		yyb2682 = r.CheckBreak()
	}
	if yyb2682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2682++
	if yyhl2682 {
		yyb2682 = yyj2682 > l
	} else {
		yyb2682 = r.CheckBreak()
	}
	if yyb2682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalName = ""
	} else {
		x.ExternalName = string(r.DecodeString())
	}
	yyj2682++
	if yyhl2682 {
		yyb2682 = yyj2682 > l
	} else {
		yyb2682 = r.CheckBreak()
	}
	if yyb2682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2690 := &x.ExternalIPs
		yym2691 := z.DecBinary()
		_ = yym2691
		if false {
		} else {
			z.F.DecSliceStringX(yyv2690, false, d)
		}
	}
	yyj2682++
	if yyhl2682 {
		yyb2682 = yyj2682 > l
	} else {
		yyb2682 = r.CheckBreak()
	}
	if yyb2682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2682++
	if yyhl2682 {
		yyb2682 = yyj2682 > l
	} else {
		yyb2682 = r.CheckBreak()
	}
	if yyb2682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2682++
	if yyhl2682 {
		yyb2682 = yyj2682 > l
	} else {
		yyb2682 = r.CheckBreak()
	}
	if yyb2682 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2694 := &x.LoadBalancerSourceRanges
		yym2695 := z.DecBinary()
		_ = yym2695
		if false {
		} else {
			z.F.DecSliceStringX(yyv2694, false, d)
		}
	}
	for {
		yyj2682++
		if yyhl2682 {
			yyb2682 = yyj2682 > l
		} else {
			yyb2682 = r.CheckBreak()
		}
		if yyb2682 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2682-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2696 := z.EncBinary()
		_ = yym2696
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2697 := !z.EncBinary()
			yy2arr2697 := z.EncBasicHandle().StructToArray
			var yyq2697 [5]bool
			_, _, _ = yysep2697, yyq2697, yy2arr2697
			const yyr2697 bool = false
			var yynn2697 int
			if yyr2697 || yy2arr2697 {
				r.EncodeArrayStart(5)
			} else {
				yynn2697 = 5
				for _, b := range yyq2697 {
					if b {
						yynn2697++
					}
				}
				r.EncodeMapStart(yynn2697)
				yynn2697 = 0
			}
			if yyr2697 || yy2arr2697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2699 := z.EncBinary()
				_ = yym2699
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2700 := z.EncBinary()
				_ = yym2700
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2697 || yy2arr2697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2697 || yy2arr2697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2703 := z.EncBinary()
				_ = yym2703
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2704 := z.EncBinary()
				_ = yym2704
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2697 || yy2arr2697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2706 := &x.TargetPort
				yym2707 := z.EncBinary()
				_ = yym2707
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2706) {
				} else if !yym2707 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2706)
				} else {
					z.EncFallback(yy2706)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2708 := &x.TargetPort
				yym2709 := z.EncBinary()
				_ = yym2709
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2708) {
				} else if !yym2709 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2708)
				} else {
					z.EncFallback(yy2708)
				}
			}
			if yyr2697 || yy2arr2697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2711 := z.EncBinary()
				_ = yym2711
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2712 := z.EncBinary()
				_ = yym2712
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr2697 || yy2arr2697 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2713 := z.DecBinary()
	_ = yym2713
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2714 := r.ContainerType()
		if yyct2714 == codecSelferValueTypeMap1234 {
			yyl2714 := r.ReadMapStart()
			if yyl2714 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2714, d)
			}
		} else if yyct2714 == codecSelferValueTypeArray1234 {
			yyl2714 := r.ReadArrayStart()
			if yyl2714 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2714, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2715Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2715Slc
	var yyhl2715 bool = l >= 0
	for yyj2715 := 0; ; yyj2715++ {
		if yyhl2715 {
			if yyj2715 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2715Slc = r.DecodeBytes(yys2715Slc, true, true)
		yys2715 := string(yys2715Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2715 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2719 := &x.TargetPort
				yym2720 := z.DecBinary()
				_ = yym2720
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2719) {
				} else if !yym2720 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2719)
				} else {
					z.DecFallback(yyv2719, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2715)
		} // end switch yys2715
	} // end for yyj2715
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2722 int
	var yyb2722 bool
	var yyhl2722 bool = l >= 0
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2726 := &x.TargetPort
		yym2727 := z.DecBinary()
		_ = yym2727
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2726) {
		} else if !yym2727 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2726)
		} else {
			z.DecFallback(yyv2726, false)
		}
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2722++
		if yyhl2722 {
			yyb2722 = yyj2722 > l
		} else {
			yyb2722 = r.CheckBreak()
		}
		if yyb2722 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2722-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2729 := z.EncBinary()
		_ = yym2729
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2730 := !z.EncBinary()
			yy2arr2730 := z.EncBasicHandle().StructToArray
			var yyq2730 [5]bool
			_, _, _ = yysep2730, yyq2730, yy2arr2730
			const yyr2730 bool = false
			yyq2730[0] = x.Kind != ""
			yyq2730[1] = x.APIVersion != ""
			yyq2730[2] = true
			yyq2730[3] = true
			yyq2730[4] = true
			var yynn2730 int
			if yyr2730 || yy2arr2730 {
				r.EncodeArrayStart(5)
			} else {
				yynn2730 = 0
				for _, b := range yyq2730 {
					if b {
						yynn2730++
					}
				}
				r.EncodeMapStart(yynn2730)
				yynn2730 = 0
			}
			if yyr2730 || yy2arr2730 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2730[0] {
					yym2732 := z.EncBinary()
					_ = yym2732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2730[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2733 := z.EncBinary()
					_ = yym2733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2730 || yy2arr2730 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2730[1] {
					yym2735 := z.EncBinary()
					_ = yym2735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2730[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2736 := z.EncBinary()
					_ = yym2736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2730 || yy2arr2730 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2730[2] {
					yy2738 := &x.ObjectMeta
					yy2738.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2730[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2739 := &x.ObjectMeta
					yy2739.CodecEncodeSelf(e)
				}
			}
			if yyr2730 || yy2arr2730 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2730[3] {
					yy2741 := &x.Spec
					yy2741.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2730[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2742 := &x.Spec
					yy2742.CodecEncodeSelf(e)
				}
			}
			if yyr2730 || yy2arr2730 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2730[4] {
					yy2744 := &x.Status
					yy2744.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2730[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2745 := &x.Status
					yy2745.CodecEncodeSelf(e)
				}
			}
			if yyr2730 || yy2arr2730 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2746 := z.DecBinary()
	_ = yym2746
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2747 := r.ContainerType()
		if yyct2747 == codecSelferValueTypeMap1234 {
			yyl2747 := r.ReadMapStart()
			if yyl2747 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2747, d)
			}
		} else if yyct2747 == codecSelferValueTypeArray1234 {
			yyl2747 := r.ReadArrayStart()
			if yyl2747 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2747, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2748Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2748Slc
	var yyhl2748 bool = l >= 0
	for yyj2748 := 0; ; yyj2748++ {
		if yyhl2748 {
			if yyj2748 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2748Slc = r.DecodeBytes(yys2748Slc, true, true)
		yys2748 := string(yys2748Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2748 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2751 := &x.ObjectMeta
				yyv2751.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2752 := &x.Spec
				yyv2752.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2753 := &x.Status
				yyv2753.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2748)
		} // end switch yys2748
	} // end for yyj2748
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2754 int
	var yyb2754 bool
	var yyhl2754 bool = l >= 0
	yyj2754++
	if yyhl2754 {
		yyb2754 = yyj2754 > l
	} else {
		yyb2754 = r.CheckBreak()
	}
	if yyb2754 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2754++
	if yyhl2754 {
		yyb2754 = yyj2754 > l
	} else {
		yyb2754 = r.CheckBreak()
	}
	if yyb2754 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2754++
	if yyhl2754 {
		yyb2754 = yyj2754 > l
	} else {
		yyb2754 = r.CheckBreak()
	}
	if yyb2754 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2757 := &x.ObjectMeta
		yyv2757.CodecDecodeSelf(d)
	}
	yyj2754++
	if yyhl2754 {
		yyb2754 = yyj2754 > l
	} else {
		yyb2754 = r.CheckBreak()
	}
	if yyb2754 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2758 := &x.Spec
		yyv2758.CodecDecodeSelf(d)
	}
	yyj2754++
	if yyhl2754 {
		yyb2754 = yyj2754 > l
	} else {
		yyb2754 = r.CheckBreak()
	}
	if yyb2754 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2759 := &x.Status
		yyv2759.CodecDecodeSelf(d)
	}
	for {
		yyj2754++
		if yyhl2754 {
			yyb2754 = yyj2754 > l
		} else {
			yyb2754 = r.CheckBreak()
		}
		if yyb2754 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2754-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2760 := z.EncBinary()
		_ = yym2760
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2761 := !z.EncBinary()
			yy2arr2761 := z.EncBasicHandle().StructToArray
			var yyq2761 [5]bool
			_, _, _ = yysep2761, yyq2761, yy2arr2761
			const yyr2761 bool = false
			yyq2761[0] = x.Kind != ""
			yyq2761[1] = x.APIVersion != ""
			yyq2761[2] = true
			yyq2761[4] = len(x.ImagePullSecrets) != 0
			var yynn2761 int
			if yyr2761 || yy2arr2761 {
				r.EncodeArrayStart(5)
			} else {
				yynn2761 = 1
				for _, b := range yyq2761 {
					if b {
						yynn2761++
					}
				}
				r.EncodeMapStart(yynn2761)
				yynn2761 = 0
			}
			if yyr2761 || yy2arr2761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2761[0] {
					yym2763 := z.EncBinary()
					_ = yym2763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2761[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2764 := z.EncBinary()
					_ = yym2764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2761 || yy2arr2761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2761[1] {
					yym2766 := z.EncBinary()
					_ = yym2766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2761[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2767 := z.EncBinary()
					_ = yym2767
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2761 || yy2arr2761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2761[2] {
					yy2769 := &x.ObjectMeta
					yy2769.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2761[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2770 := &x.ObjectMeta
					yy2770.CodecEncodeSelf(e)
				}
			}
			if yyr2761 || yy2arr2761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2772 := z.EncBinary()
					_ = yym2772
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2773 := z.EncBinary()
					_ = yym2773
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2761 || yy2arr2761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2761[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2775 := z.EncBinary()
						_ = yym2775
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2761[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2776 := z.EncBinary()
						_ = yym2776
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2761 || yy2arr2761 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2777 := z.DecBinary()
	_ = yym2777
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2778 := r.ContainerType()
		if yyct2778 == codecSelferValueTypeMap1234 {
			yyl2778 := r.ReadMapStart()
			if yyl2778 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2778, d)
			}
		} else if yyct2778 == codecSelferValueTypeArray1234 {
			yyl2778 := r.ReadArrayStart()
			if yyl2778 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2778, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2779Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2779Slc
	var yyhl2779 bool = l >= 0
	for yyj2779 := 0; ; yyj2779++ {
		if yyhl2779 {
			if yyj2779 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2779Slc = r.DecodeBytes(yys2779Slc, true, true)
		yys2779 := string(yys2779Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2779 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2782 := &x.ObjectMeta
				yyv2782.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2783 := &x.Secrets
				yym2784 := z.DecBinary()
				_ = yym2784
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2783), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2785 := &x.ImagePullSecrets
				yym2786 := z.DecBinary()
				_ = yym2786
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2785), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2779)
		} // end switch yys2779
	} // end for yyj2779
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2787 int
	var yyb2787 bool
	var yyhl2787 bool = l >= 0
	yyj2787++
	if yyhl2787 {
		yyb2787 = yyj2787 > l
	} else {
		yyb2787 = r.CheckBreak()
	}
	if yyb2787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2787++
	if yyhl2787 {
		yyb2787 = yyj2787 > l
	} else {
		yyb2787 = r.CheckBreak()
	}
	if yyb2787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2787++
	if yyhl2787 {
		yyb2787 = yyj2787 > l
	} else {
		yyb2787 = r.CheckBreak()
	}
	if yyb2787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2790 := &x.ObjectMeta
		yyv2790.CodecDecodeSelf(d)
	}
	yyj2787++
	if yyhl2787 {
		yyb2787 = yyj2787 > l
	} else {
		yyb2787 = r.CheckBreak()
	}
	if yyb2787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2791 := &x.Secrets
		yym2792 := z.DecBinary()
		_ = yym2792
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2791), d)
		}
	}
	yyj2787++
	if yyhl2787 {
		yyb2787 = yyj2787 > l
	} else {
		yyb2787 = r.CheckBreak()
	}
	if yyb2787 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2793 := &x.ImagePullSecrets
		yym2794 := z.DecBinary()
		_ = yym2794
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2793), d)
		}
	}
	for {
		yyj2787++
		if yyhl2787 {
			yyb2787 = yyj2787 > l
		} else {
			yyb2787 = r.CheckBreak()
		}
		if yyb2787 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2787-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2795 := z.EncBinary()
		_ = yym2795
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2796 := !z.EncBinary()
			yy2arr2796 := z.EncBasicHandle().StructToArray
			var yyq2796 [4]bool
			_, _, _ = yysep2796, yyq2796, yy2arr2796
			const yyr2796 bool = false
			yyq2796[0] = x.Kind != ""
			yyq2796[1] = x.APIVersion != ""
			yyq2796[2] = true
			var yynn2796 int
			if yyr2796 || yy2arr2796 {
				r.EncodeArrayStart(4)
			} else {
				yynn2796 = 1
				for _, b := range yyq2796 {
					if b {
						yynn2796++
					}
				}
				r.EncodeMapStart(yynn2796)
				yynn2796 = 0
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2796[0] {
					yym2798 := z.EncBinary()
					_ = yym2798
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2796[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2799 := z.EncBinary()
					_ = yym2799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2796[1] {
					yym2801 := z.EncBinary()
					_ = yym2801
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2796[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2802 := z.EncBinary()
					_ = yym2802
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2796[2] {
					yy2804 := &x.ListMeta
					yym2805 := z.EncBinary()
					_ = yym2805
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2804) {
					} else {
						z.EncFallback(yy2804)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2796[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2806 := &x.ListMeta
					yym2807 := z.EncBinary()
					_ = yym2807
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2806) {
					} else {
						z.EncFallback(yy2806)
					}
				}
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2809 := z.EncBinary()
					_ = yym2809
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2810 := z.EncBinary()
					_ = yym2810
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2811 := z.DecBinary()
	_ = yym2811
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2812 := r.ContainerType()
		if yyct2812 == codecSelferValueTypeMap1234 {
			yyl2812 := r.ReadMapStart()
			if yyl2812 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2812, d)
			}
		} else if yyct2812 == codecSelferValueTypeArray1234 {
			yyl2812 := r.ReadArrayStart()
			if yyl2812 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2812, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2813Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2813Slc
	var yyhl2813 bool = l >= 0
	for yyj2813 := 0; ; yyj2813++ {
		if yyhl2813 {
			if yyj2813 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2813Slc = r.DecodeBytes(yys2813Slc, true, true)
		yys2813 := string(yys2813Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2813 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2816 := &x.ListMeta
				yym2817 := z.DecBinary()
				_ = yym2817
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2816) {
				} else {
					z.DecFallback(yyv2816, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2818 := &x.Items
				yym2819 := z.DecBinary()
				_ = yym2819
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2818), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2813)
		} // end switch yys2813
	} // end for yyj2813
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2820 int
	var yyb2820 bool
	var yyhl2820 bool = l >= 0
	yyj2820++
	if yyhl2820 {
		yyb2820 = yyj2820 > l
	} else {
		yyb2820 = r.CheckBreak()
	}
	if yyb2820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2820++
	if yyhl2820 {
		yyb2820 = yyj2820 > l
	} else {
		yyb2820 = r.CheckBreak()
	}
	if yyb2820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2820++
	if yyhl2820 {
		yyb2820 = yyj2820 > l
	} else {
		yyb2820 = r.CheckBreak()
	}
	if yyb2820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2823 := &x.ListMeta
		yym2824 := z.DecBinary()
		_ = yym2824
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2823) {
		} else {
			z.DecFallback(yyv2823, false)
		}
	}
	yyj2820++
	if yyhl2820 {
		yyb2820 = yyj2820 > l
	} else {
		yyb2820 = r.CheckBreak()
	}
	if yyb2820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2825 := &x.Items
		yym2826 := z.DecBinary()
		_ = yym2826
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2825), d)
		}
	}
	for {
		yyj2820++
		if yyhl2820 {
			yyb2820 = yyj2820 > l
		} else {
			yyb2820 = r.CheckBreak()
		}
		if yyb2820 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2820-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2827 := z.EncBinary()
		_ = yym2827
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2828 := !z.EncBinary()
			yy2arr2828 := z.EncBasicHandle().StructToArray
			var yyq2828 [4]bool
			_, _, _ = yysep2828, yyq2828, yy2arr2828
			const yyr2828 bool = false
			yyq2828[0] = x.Kind != ""
			yyq2828[1] = x.APIVersion != ""
			yyq2828[2] = true
			var yynn2828 int
			if yyr2828 || yy2arr2828 {
				r.EncodeArrayStart(4)
			} else {
				yynn2828 = 1
				for _, b := range yyq2828 {
					if b {
						yynn2828++
					}
				}
				r.EncodeMapStart(yynn2828)
				yynn2828 = 0
			}
			if yyr2828 || yy2arr2828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2828[0] {
					yym2830 := z.EncBinary()
					_ = yym2830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2828[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2831 := z.EncBinary()
					_ = yym2831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2828 || yy2arr2828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2828[1] {
					yym2833 := z.EncBinary()
					_ = yym2833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2828[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2834 := z.EncBinary()
					_ = yym2834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2828 || yy2arr2828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2828[2] {
					yy2836 := &x.ObjectMeta
					yy2836.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2828[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2837 := &x.ObjectMeta
					yy2837.CodecEncodeSelf(e)
				}
			}
			if yyr2828 || yy2arr2828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2839 := z.EncBinary()
					_ = yym2839
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2840 := z.EncBinary()
					_ = yym2840
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2828 || yy2arr2828 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2841 := z.DecBinary()
	_ = yym2841
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2842 := r.ContainerType()
		if yyct2842 == codecSelferValueTypeMap1234 {
			yyl2842 := r.ReadMapStart()
			if yyl2842 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2842, d)
			}
		} else if yyct2842 == codecSelferValueTypeArray1234 {
			yyl2842 := r.ReadArrayStart()
			if yyl2842 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2842, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2843Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2843Slc
	var yyhl2843 bool = l >= 0
	for yyj2843 := 0; ; yyj2843++ {
		if yyhl2843 {
			if yyj2843 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2843Slc = r.DecodeBytes(yys2843Slc, true, true)
		yys2843 := string(yys2843Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2843 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2846 := &x.ObjectMeta
				yyv2846.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2847 := &x.Subsets
				yym2848 := z.DecBinary()
				_ = yym2848
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2847), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2843)
		} // end switch yys2843
	} // end for yyj2843
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2849 int
	var yyb2849 bool
	var yyhl2849 bool = l >= 0
	yyj2849++
	if yyhl2849 {
		yyb2849 = yyj2849 > l
	} else {
		yyb2849 = r.CheckBreak()
	}
	if yyb2849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2849++
	if yyhl2849 {
		yyb2849 = yyj2849 > l
	} else {
		yyb2849 = r.CheckBreak()
	}
	if yyb2849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2849++
	if yyhl2849 {
		yyb2849 = yyj2849 > l
	} else {
		yyb2849 = r.CheckBreak()
	}
	if yyb2849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2852 := &x.ObjectMeta
		yyv2852.CodecDecodeSelf(d)
	}
	yyj2849++
	if yyhl2849 {
		yyb2849 = yyj2849 > l
	} else {
		yyb2849 = r.CheckBreak()
	}
	if yyb2849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2853 := &x.Subsets
		yym2854 := z.DecBinary()
		_ = yym2854
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2853), d)
		}
	}
	for {
		yyj2849++
		if yyhl2849 {
			yyb2849 = yyj2849 > l
		} else {
			yyb2849 = r.CheckBreak()
		}
		if yyb2849 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2849-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2855 := z.EncBinary()
		_ = yym2855
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2856 := !z.EncBinary()
			yy2arr2856 := z.EncBasicHandle().StructToArray
			var yyq2856 [3]bool
			_, _, _ = yysep2856, yyq2856, yy2arr2856
			const yyr2856 bool = false
			var yynn2856 int
			if yyr2856 || yy2arr2856 {
				r.EncodeArrayStart(3)
			} else {
				yynn2856 = 3
				for _, b := range yyq2856 {
					if b {
						yynn2856++
					}
				}
				r.EncodeMapStart(yynn2856)
				yynn2856 = 0
			}
			if yyr2856 || yy2arr2856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2858 := z.EncBinary()
					_ = yym2858
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2859 := z.EncBinary()
					_ = yym2859
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2856 || yy2arr2856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2861 := z.EncBinary()
					_ = yym2861
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2862 := z.EncBinary()
					_ = yym2862
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2856 || yy2arr2856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2864 := z.EncBinary()
					_ = yym2864
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2865 := z.EncBinary()
					_ = yym2865
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2856 || yy2arr2856 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2866 := z.DecBinary()
	_ = yym2866
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2867 := r.ContainerType()
		if yyct2867 == codecSelferValueTypeMap1234 {
			yyl2867 := r.ReadMapStart()
			if yyl2867 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2867, d)
			}
		} else if yyct2867 == codecSelferValueTypeArray1234 {
			yyl2867 := r.ReadArrayStart()
			if yyl2867 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2867, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2868Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2868Slc
	var yyhl2868 bool = l >= 0
	for yyj2868 := 0; ; yyj2868++ {
		if yyhl2868 {
			if yyj2868 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2868Slc = r.DecodeBytes(yys2868Slc, true, true)
		yys2868 := string(yys2868Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2868 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2869 := &x.Addresses
				yym2870 := z.DecBinary()
				_ = yym2870
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2869), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2871 := &x.NotReadyAddresses
				yym2872 := z.DecBinary()
				_ = yym2872
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2871), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2873 := &x.Ports
				yym2874 := z.DecBinary()
				_ = yym2874
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2873), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2868)
		} // end switch yys2868
	} // end for yyj2868
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2875 int
	var yyb2875 bool
	var yyhl2875 bool = l >= 0
	yyj2875++
	if yyhl2875 {
		yyb2875 = yyj2875 > l
	} else {
		yyb2875 = r.CheckBreak()
	}
	if yyb2875 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2876 := &x.Addresses
		yym2877 := z.DecBinary()
		_ = yym2877
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2876), d)
		}
	}
	yyj2875++
	if yyhl2875 {
		yyb2875 = yyj2875 > l
	} else {
		yyb2875 = r.CheckBreak()
	}
	if yyb2875 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2878 := &x.NotReadyAddresses
		yym2879 := z.DecBinary()
		_ = yym2879
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2878), d)
		}
	}
	yyj2875++
	if yyhl2875 {
		yyb2875 = yyj2875 > l
	} else {
		yyb2875 = r.CheckBreak()
	}
	if yyb2875 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2880 := &x.Ports
		yym2881 := z.DecBinary()
		_ = yym2881
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2880), d)
		}
	}
	for {
		yyj2875++
		if yyhl2875 {
			yyb2875 = yyj2875 > l
		} else {
			yyb2875 = r.CheckBreak()
		}
		if yyb2875 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2875-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2882 := z.EncBinary()
		_ = yym2882
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2883 := !z.EncBinary()
			yy2arr2883 := z.EncBasicHandle().StructToArray
			var yyq2883 [4]bool
			_, _, _ = yysep2883, yyq2883, yy2arr2883
			const yyr2883 bool = false
			yyq2883[1] = x.Hostname != ""
			yyq2883[2] = x.NodeName != nil
			var yynn2883 int
			if yyr2883 || yy2arr2883 {
				r.EncodeArrayStart(4)
			} else {
				yynn2883 = 2
				for _, b := range yyq2883 {
					if b {
						yynn2883++
					}
				}
				r.EncodeMapStart(yynn2883)
				yynn2883 = 0
			}
			if yyr2883 || yy2arr2883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2885 := z.EncBinary()
				_ = yym2885
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2886 := z.EncBinary()
				_ = yym2886
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2883 || yy2arr2883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2883[1] {
					yym2888 := z.EncBinary()
					_ = yym2888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2883[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2889 := z.EncBinary()
					_ = yym2889
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2883 || yy2arr2883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2883[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2891 := *x.NodeName
						yym2892 := z.EncBinary()
						_ = yym2892
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2891))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2883[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2893 := *x.NodeName
						yym2894 := z.EncBinary()
						_ = yym2894
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2893))
						}
					}
				}
			}
			if yyr2883 || yy2arr2883 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2883 || yy2arr2883 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2896 := z.DecBinary()
	_ = yym2896
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2897 := r.ContainerType()
		if yyct2897 == codecSelferValueTypeMap1234 {
			yyl2897 := r.ReadMapStart()
			if yyl2897 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2897, d)
			}
		} else if yyct2897 == codecSelferValueTypeArray1234 {
			yyl2897 := r.ReadArrayStart()
			if yyl2897 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2897, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2898Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2898Slc
	var yyhl2898 bool = l >= 0
	for yyj2898 := 0; ; yyj2898++ {
		if yyhl2898 {
			if yyj2898 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2898Slc = r.DecodeBytes(yys2898Slc, true, true)
		yys2898 := string(yys2898Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2898 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2902 := z.DecBinary()
				_ = yym2902
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2898)
		} // end switch yys2898
	} // end for yyj2898
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2904 int
	var yyb2904 bool
	var yyhl2904 bool = l >= 0
	yyj2904++
	if yyhl2904 {
		yyb2904 = yyj2904 > l
	} else {
		yyb2904 = r.CheckBreak()
	}
	if yyb2904 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2904++
	if yyhl2904 {
		yyb2904 = yyj2904 > l
	} else {
		yyb2904 = r.CheckBreak()
	}
	if yyb2904 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2904++
	if yyhl2904 {
		yyb2904 = yyj2904 > l
	} else {
		yyb2904 = r.CheckBreak()
	}
	if yyb2904 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2908 := z.DecBinary()
		_ = yym2908
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2904++
	if yyhl2904 {
		yyb2904 = yyj2904 > l
	} else {
		yyb2904 = r.CheckBreak()
	}
	if yyb2904 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2904++
		if yyhl2904 {
			yyb2904 = yyj2904 > l
		} else {
			yyb2904 = r.CheckBreak()
		}
		if yyb2904 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2904-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2910 := z.EncBinary()
		_ = yym2910
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2911 := !z.EncBinary()
			yy2arr2911 := z.EncBasicHandle().StructToArray
			var yyq2911 [3]bool
			_, _, _ = yysep2911, yyq2911, yy2arr2911
			const yyr2911 bool = false
			var yynn2911 int
			if yyr2911 || yy2arr2911 {
				r.EncodeArrayStart(3)
			} else {
				yynn2911 = 3
				for _, b := range yyq2911 {
					if b {
						yynn2911++
					}
				}
				r.EncodeMapStart(yynn2911)
				yynn2911 = 0
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2913 := z.EncBinary()
				_ = yym2913
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2914 := z.EncBinary()
				_ = yym2914
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2916 := z.EncBinary()
				_ = yym2916
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2917 := z.EncBinary()
				_ = yym2917
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2919 := z.DecBinary()
	_ = yym2919
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2920 := r.ContainerType()
		if yyct2920 == codecSelferValueTypeMap1234 {
			yyl2920 := r.ReadMapStart()
			if yyl2920 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2920, d)
			}
		} else if yyct2920 == codecSelferValueTypeArray1234 {
			yyl2920 := r.ReadArrayStart()
			if yyl2920 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2920, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2921Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2921Slc
	var yyhl2921 bool = l >= 0
	for yyj2921 := 0; ; yyj2921++ {
		if yyhl2921 {
			if yyj2921 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2921Slc = r.DecodeBytes(yys2921Slc, true, true)
		yys2921 := string(yys2921Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2921 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2921)
		} // end switch yys2921
	} // end for yyj2921
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2925 int
	var yyb2925 bool
	var yyhl2925 bool = l >= 0
	yyj2925++
	if yyhl2925 {
		yyb2925 = yyj2925 > l
	} else {
		yyb2925 = r.CheckBreak()
	}
	if yyb2925 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2925++
	if yyhl2925 {
		yyb2925 = yyj2925 > l
	} else {
		yyb2925 = r.CheckBreak()
	}
	if yyb2925 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2925++
	if yyhl2925 {
		yyb2925 = yyj2925 > l
	} else {
		yyb2925 = r.CheckBreak()
	}
	if yyb2925 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2925++
		if yyhl2925 {
			yyb2925 = yyj2925 > l
		} else {
			yyb2925 = r.CheckBreak()
		}
		if yyb2925 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2925-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2929 := z.EncBinary()
		_ = yym2929
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2930 := !z.EncBinary()
			yy2arr2930 := z.EncBasicHandle().StructToArray
			var yyq2930 [4]bool
			_, _, _ = yysep2930, yyq2930, yy2arr2930
			const yyr2930 bool = false
			yyq2930[0] = x.Kind != ""
			yyq2930[1] = x.APIVersion != ""
			yyq2930[2] = true
			var yynn2930 int
			if yyr2930 || yy2arr2930 {
				r.EncodeArrayStart(4)
			} else {
				yynn2930 = 1
				for _, b := range yyq2930 {
					if b {
						yynn2930++
					}
				}
				r.EncodeMapStart(yynn2930)
				yynn2930 = 0
			}
			if yyr2930 || yy2arr2930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2930[0] {
					yym2932 := z.EncBinary()
					_ = yym2932
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2930[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2933 := z.EncBinary()
					_ = yym2933
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2930 || yy2arr2930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2930[1] {
					yym2935 := z.EncBinary()
					_ = yym2935
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2930[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2936 := z.EncBinary()
					_ = yym2936
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2930 || yy2arr2930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2930[2] {
					yy2938 := &x.ListMeta
					yym2939 := z.EncBinary()
					_ = yym2939
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2938) {
					} else {
						z.EncFallback(yy2938)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2930[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2940 := &x.ListMeta
					yym2941 := z.EncBinary()
					_ = yym2941
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2940) {
					} else {
						z.EncFallback(yy2940)
					}
				}
			}
			if yyr2930 || yy2arr2930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2943 := z.EncBinary()
					_ = yym2943
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2944 := z.EncBinary()
					_ = yym2944
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2930 || yy2arr2930 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2945 := z.DecBinary()
	_ = yym2945
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2946 := r.ContainerType()
		if yyct2946 == codecSelferValueTypeMap1234 {
			yyl2946 := r.ReadMapStart()
			if yyl2946 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2946, d)
			}
		} else if yyct2946 == codecSelferValueTypeArray1234 {
			yyl2946 := r.ReadArrayStart()
			if yyl2946 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2946, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2947Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2947Slc
	var yyhl2947 bool = l >= 0
	for yyj2947 := 0; ; yyj2947++ {
		if yyhl2947 {
			if yyj2947 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2947Slc = r.DecodeBytes(yys2947Slc, true, true)
		yys2947 := string(yys2947Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2947 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2950 := &x.ListMeta
				yym2951 := z.DecBinary()
				_ = yym2951
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2950) {
				} else {
					z.DecFallback(yyv2950, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2952 := &x.Items
				yym2953 := z.DecBinary()
				_ = yym2953
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2952), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2947)
		} // end switch yys2947
	} // end for yyj2947
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2954 int
	var yyb2954 bool
	var yyhl2954 bool = l >= 0
	yyj2954++
	if yyhl2954 {
		yyb2954 = yyj2954 > l
	} else {
		yyb2954 = r.CheckBreak()
	}
	if yyb2954 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2954++
	if yyhl2954 {
		yyb2954 = yyj2954 > l
	} else {
		yyb2954 = r.CheckBreak()
	}
	if yyb2954 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2954++
	if yyhl2954 {
		yyb2954 = yyj2954 > l
	} else {
		yyb2954 = r.CheckBreak()
	}
	if yyb2954 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2957 := &x.ListMeta
		yym2958 := z.DecBinary()
		_ = yym2958
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2957) {
		} else {
			z.DecFallback(yyv2957, false)
		}
	}
	yyj2954++
	if yyhl2954 {
		yyb2954 = yyj2954 > l
	} else {
		yyb2954 = r.CheckBreak()
	}
	if yyb2954 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2959 := &x.Items
		yym2960 := z.DecBinary()
		_ = yym2960
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2959), d)
		}
	}
	for {
		yyj2954++
		if yyhl2954 {
			yyb2954 = yyj2954 > l
		} else {
			yyb2954 = r.CheckBreak()
		}
		if yyb2954 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2954-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2961 := z.EncBinary()
		_ = yym2961
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2962 := !z.EncBinary()
			yy2arr2962 := z.EncBasicHandle().StructToArray
			var yyq2962 [4]bool
			_, _, _ = yysep2962, yyq2962, yy2arr2962
			const yyr2962 bool = false
			yyq2962[0] = x.PodCIDR != ""
			yyq2962[1] = x.ExternalID != ""
			yyq2962[2] = x.ProviderID != ""
			yyq2962[3] = x.Unschedulable != false
			var yynn2962 int
			if yyr2962 || yy2arr2962 {
				r.EncodeArrayStart(4)
			} else {
				yynn2962 = 0
				for _, b := range yyq2962 {
					if b {
						yynn2962++
					}
				}
				r.EncodeMapStart(yynn2962)
				yynn2962 = 0
			}
			if yyr2962 || yy2arr2962 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2962[0] {
					yym2964 := z.EncBinary()
					_ = yym2964
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2962[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2965 := z.EncBinary()
					_ = yym2965
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2962 || yy2arr2962 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2962[1] {
					yym2967 := z.EncBinary()
					_ = yym2967
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2962[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2968 := z.EncBinary()
					_ = yym2968
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2962 || yy2arr2962 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2962[2] {
					yym2970 := z.EncBinary()
					_ = yym2970
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2962[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2971 := z.EncBinary()
					_ = yym2971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2962 || yy2arr2962 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2962[3] {
					yym2973 := z.EncBinary()
					_ = yym2973
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2962[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2974 := z.EncBinary()
					_ = yym2974
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2962 || yy2arr2962 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2975 := z.DecBinary()
	_ = yym2975
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2976 := r.ContainerType()
		if yyct2976 == codecSelferValueTypeMap1234 {
			yyl2976 := r.ReadMapStart()
			if yyl2976 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2976, d)
			}
		} else if yyct2976 == codecSelferValueTypeArray1234 {
			yyl2976 := r.ReadArrayStart()
			if yyl2976 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2976, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2977Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2977Slc
	var yyhl2977 bool = l >= 0
	for yyj2977 := 0; ; yyj2977++ {
		if yyhl2977 {
			if yyj2977 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2977Slc = r.DecodeBytes(yys2977Slc, true, true)
		yys2977 := string(yys2977Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2977 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2977)
		} // end switch yys2977
	} // end for yyj2977
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2982 int
	var yyb2982 bool
	var yyhl2982 bool = l >= 0
	yyj2982++
	if yyhl2982 {
		yyb2982 = yyj2982 > l
	} else {
		yyb2982 = r.CheckBreak()
	}
	if yyb2982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2982++
	if yyhl2982 {
		yyb2982 = yyj2982 > l
	} else {
		yyb2982 = r.CheckBreak()
	}
	if yyb2982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2982++
	if yyhl2982 {
		yyb2982 = yyj2982 > l
	} else {
		yyb2982 = r.CheckBreak()
	}
	if yyb2982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2982++
	if yyhl2982 {
		yyb2982 = yyj2982 > l
	} else {
		yyb2982 = r.CheckBreak()
	}
	if yyb2982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2982++
		if yyhl2982 {
			yyb2982 = yyj2982 > l
		} else {
			yyb2982 = r.CheckBreak()
		}
		if yyb2982 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2982-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2987 := z.EncBinary()
		_ = yym2987
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2988 := !z.EncBinary()
			yy2arr2988 := z.EncBasicHandle().StructToArray
			var yyq2988 [1]bool
			_, _, _ = yysep2988, yyq2988, yy2arr2988
			const yyr2988 bool = false
			var yynn2988 int
			if yyr2988 || yy2arr2988 {
				r.EncodeArrayStart(1)
			} else {
				yynn2988 = 1
				for _, b := range yyq2988 {
					if b {
						yynn2988++
					}
				}
				r.EncodeMapStart(yynn2988)
				yynn2988 = 0
			}
			if yyr2988 || yy2arr2988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2990 := z.EncBinary()
				_ = yym2990
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2991 := z.EncBinary()
				_ = yym2991
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2988 || yy2arr2988 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2992 := z.DecBinary()
	_ = yym2992
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2993 := r.ContainerType()
		if yyct2993 == codecSelferValueTypeMap1234 {
			yyl2993 := r.ReadMapStart()
			if yyl2993 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2993, d)
			}
		} else if yyct2993 == codecSelferValueTypeArray1234 {
			yyl2993 := r.ReadArrayStart()
			if yyl2993 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2993, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2994Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2994Slc
	var yyhl2994 bool = l >= 0
	for yyj2994 := 0; ; yyj2994++ {
		if yyhl2994 {
			if yyj2994 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2994Slc = r.DecodeBytes(yys2994Slc, true, true)
		yys2994 := string(yys2994Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2994 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2994)
		} // end switch yys2994
	} // end for yyj2994
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2996 int
	var yyb2996 bool
	var yyhl2996 bool = l >= 0
	yyj2996++
	if yyhl2996 {
		yyb2996 = yyj2996 > l
	} else {
		yyb2996 = r.CheckBreak()
	}
	if yyb2996 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2996++
		if yyhl2996 {
			yyb2996 = yyj2996 > l
		} else {
			yyb2996 = r.CheckBreak()
		}
		if yyb2996 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2996-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2998 := z.EncBinary()
		_ = yym2998
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2999 := !z.EncBinary()
			yy2arr2999 := z.EncBasicHandle().StructToArray
			var yyq2999 [1]bool
			_, _, _ = yysep2999, yyq2999, yy2arr2999
			const yyr2999 bool = false
			yyq2999[0] = true
			var yynn2999 int
			if yyr2999 || yy2arr2999 {
				r.EncodeArrayStart(1)
			} else {
				yynn2999 = 0
				for _, b := range yyq2999 {
					if b {
						yynn2999++
					}
				}
				r.EncodeMapStart(yynn2999)
				yynn2999 = 0
			}
			if yyr2999 || yy2arr2999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2999[0] {
					yy3001 := &x.KubeletEndpoint
					yy3001.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2999[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3002 := &x.KubeletEndpoint
					yy3002.CodecEncodeSelf(e)
				}
			}
			if yyr2999 || yy2arr2999 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3003 := z.DecBinary()
	_ = yym3003
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3004 := r.ContainerType()
		if yyct3004 == codecSelferValueTypeMap1234 {
			yyl3004 := r.ReadMapStart()
			if yyl3004 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3004, d)
			}
		} else if yyct3004 == codecSelferValueTypeArray1234 {
			yyl3004 := r.ReadArrayStart()
			if yyl3004 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3004, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3005Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3005Slc
	var yyhl3005 bool = l >= 0
	for yyj3005 := 0; ; yyj3005++ {
		if yyhl3005 {
			if yyj3005 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3005Slc = r.DecodeBytes(yys3005Slc, true, true)
		yys3005 := string(yys3005Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3005 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv3006 := &x.KubeletEndpoint
				yyv3006.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3005)
		} // end switch yys3005
	} // end for yyj3005
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3007 int
	var yyb3007 bool
	var yyhl3007 bool = l >= 0
	yyj3007++
	if yyhl3007 {
		yyb3007 = yyj3007 > l
	} else {
		yyb3007 = r.CheckBreak()
	}
	if yyb3007 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv3008 := &x.KubeletEndpoint
		yyv3008.CodecDecodeSelf(d)
	}
	for {
		yyj3007++
		if yyhl3007 {
			yyb3007 = yyj3007 > l
		} else {
			yyb3007 = r.CheckBreak()
		}
		if yyb3007 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3007-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3009 := z.EncBinary()
		_ = yym3009
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3010 := !z.EncBinary()
			yy2arr3010 := z.EncBasicHandle().StructToArray
			var yyq3010 [10]bool
			_, _, _ = yysep3010, yyq3010, yy2arr3010
			const yyr3010 bool = false
			var yynn3010 int
			if yyr3010 || yy2arr3010 {
				r.EncodeArrayStart(10)
			} else {
				yynn3010 = 10
				for _, b := range yyq3010 {
					if b {
						yynn3010++
					}
				}
				r.EncodeMapStart(yynn3010)
				yynn3010 = 0
			}
			if yyr3010 || yy2arr3010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3012 := z.EncBinary()
				_ = yym3012
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3013 := z.EncBinary()
				_ = yym3013
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr3010 || yy2arr3010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3015 := z.EncBinary()
				_ = yym3015
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3016 := z.EncBinary()
				_ = yym3016
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr3010 || yy2arr3010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3018 := z.EncBinary()
				_ = yym3018
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3019 := z.EncBinary()
				_ = yym3019
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr3010 || yy2arr3010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3021 := z.EncBinary()
				_ = yym3021
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3022 := z.EncBinary()
				_ = yym3022
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr3010 || yy2arr3010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3024 := z.EncBinary()
				_ = yym3024
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3025 := z.EncBinary()
				_ = yym3025
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr3010 || yy2arr3010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3027 := z.EncBinary()
				_ = yym3027
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3028 := z.EncBinary()
				_ = yym3028
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr3010 || yy2arr3010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3030 := z.EncBinary()
				_ = yym3030
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3031 := z.EncBinary()
				_ = yym3031
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr3010 || yy2arr3010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3033 := z.EncBinary()
				_ = yym3033
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3034 := z.EncBinary()
				_ = yym3034
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr3010 || yy2arr3010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3036 := z.EncBinary()
				_ = yym3036
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3037 := z.EncBinary()
				_ = yym3037
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr3010 || yy2arr3010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3039 := z.EncBinary()
				_ = yym3039
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3040 := z.EncBinary()
				_ = yym3040
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr3010 || yy2arr3010 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3041 := z.DecBinary()
	_ = yym3041
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3042 := r.ContainerType()
		if yyct3042 == codecSelferValueTypeMap1234 {
			yyl3042 := r.ReadMapStart()
			if yyl3042 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3042, d)
			}
		} else if yyct3042 == codecSelferValueTypeArray1234 {
			yyl3042 := r.ReadArrayStart()
			if yyl3042 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3042, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3043Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3043Slc
	var yyhl3043 bool = l >= 0
	for yyj3043 := 0; ; yyj3043++ {
		if yyhl3043 {
			if yyj3043 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3043Slc = r.DecodeBytes(yys3043Slc, true, true)
		yys3043 := string(yys3043Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3043 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3043)
		} // end switch yys3043
	} // end for yyj3043
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3054 int
	var yyb3054 bool
	var yyhl3054 bool = l >= 0
	yyj3054++
	if yyhl3054 {
		yyb3054 = yyj3054 > l
	} else {
		yyb3054 = r.CheckBreak()
	}
	if yyb3054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj3054++
	if yyhl3054 {
		yyb3054 = yyj3054 > l
	} else {
		yyb3054 = r.CheckBreak()
	}
	if yyb3054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj3054++
	if yyhl3054 {
		yyb3054 = yyj3054 > l
	} else {
		yyb3054 = r.CheckBreak()
	}
	if yyb3054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj3054++
	if yyhl3054 {
		yyb3054 = yyj3054 > l
	} else {
		yyb3054 = r.CheckBreak()
	}
	if yyb3054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj3054++
	if yyhl3054 {
		yyb3054 = yyj3054 > l
	} else {
		yyb3054 = r.CheckBreak()
	}
	if yyb3054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj3054++
	if yyhl3054 {
		yyb3054 = yyj3054 > l
	} else {
		yyb3054 = r.CheckBreak()
	}
	if yyb3054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj3054++
	if yyhl3054 {
		yyb3054 = yyj3054 > l
	} else {
		yyb3054 = r.CheckBreak()
	}
	if yyb3054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj3054++
	if yyhl3054 {
		yyb3054 = yyj3054 > l
	} else {
		yyb3054 = r.CheckBreak()
	}
	if yyb3054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj3054++
	if yyhl3054 {
		yyb3054 = yyj3054 > l
	} else {
		yyb3054 = r.CheckBreak()
	}
	if yyb3054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj3054++
	if yyhl3054 {
		yyb3054 = yyj3054 > l
	} else {
		yyb3054 = r.CheckBreak()
	}
	if yyb3054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj3054++
		if yyhl3054 {
			yyb3054 = yyj3054 > l
		} else {
			yyb3054 = r.CheckBreak()
		}
		if yyb3054 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3054-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3065 := z.EncBinary()
		_ = yym3065
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3066 := !z.EncBinary()
			yy2arr3066 := z.EncBasicHandle().StructToArray
			var yyq3066 [10]bool
			_, _, _ = yysep3066, yyq3066, yy2arr3066
			const yyr3066 bool = false
			yyq3066[0] = len(x.Capacity) != 0
			yyq3066[1] = len(x.Allocatable) != 0
			yyq3066[2] = x.Phase != ""
			yyq3066[3] = len(x.Conditions) != 0
			yyq3066[4] = len(x.Addresses) != 0
			yyq3066[5] = true
			yyq3066[6] = true
			yyq3066[7] = len(x.Images) != 0
			yyq3066[8] = len(x.VolumesInUse) != 0
			yyq3066[9] = len(x.VolumesAttached) != 0
			var yynn3066 int
			if yyr3066 || yy2arr3066 {
				r.EncodeArrayStart(10)
			} else {
				yynn3066 = 0
				for _, b := range yyq3066 {
					if b {
						yynn3066++
					}
				}
				r.EncodeMapStart(yynn3066)
				yynn3066 = 0
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3066[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3066[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3066[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3066[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3066[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3066[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3066[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3071 := z.EncBinary()
						_ = yym3071
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3066[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3072 := z.EncBinary()
						_ = yym3072
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3066[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3074 := z.EncBinary()
						_ = yym3074
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3066[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3075 := z.EncBinary()
						_ = yym3075
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3066[5] {
					yy3077 := &x.DaemonEndpoints
					yy3077.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3066[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3078 := &x.DaemonEndpoints
					yy3078.CodecEncodeSelf(e)
				}
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3066[6] {
					yy3080 := &x.NodeInfo
					yy3080.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3066[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3081 := &x.NodeInfo
					yy3081.CodecEncodeSelf(e)
				}
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3066[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3083 := z.EncBinary()
						_ = yym3083
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3066[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3084 := z.EncBinary()
						_ = yym3084
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3066[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3086 := z.EncBinary()
						_ = yym3086
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3066[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3087 := z.EncBinary()
						_ = yym3087
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3066[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3089 := z.EncBinary()
						_ = yym3089
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3066[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3090 := z.EncBinary()
						_ = yym3090
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr3066 || yy2arr3066 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3091 := z.DecBinary()
	_ = yym3091
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3092 := r.ContainerType()
		if yyct3092 == codecSelferValueTypeMap1234 {
			yyl3092 := r.ReadMapStart()
			if yyl3092 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3092, d)
			}
		} else if yyct3092 == codecSelferValueTypeArray1234 {
			yyl3092 := r.ReadArrayStart()
			if yyl3092 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3092, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3093Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3093Slc
	var yyhl3093 bool = l >= 0
	for yyj3093 := 0; ; yyj3093++ {
		if yyhl3093 {
			if yyj3093 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3093Slc = r.DecodeBytes(yys3093Slc, true, true)
		yys3093 := string(yys3093Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3093 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3094 := &x.Capacity
				yyv3094.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv3095 := &x.Allocatable
				yyv3095.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3097 := &x.Conditions
				yym3098 := z.DecBinary()
				_ = yym3098
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv3097), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv3099 := &x.Addresses
				yym3100 := z.DecBinary()
				_ = yym3100
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv3099), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv3101 := &x.DaemonEndpoints
				yyv3101.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv3102 := &x.NodeInfo
				yyv3102.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv3103 := &x.Images
				yym3104 := z.DecBinary()
				_ = yym3104
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv3103), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv3105 := &x.VolumesInUse
				yym3106 := z.DecBinary()
				_ = yym3106
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3105), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv3107 := &x.VolumesAttached
				yym3108 := z.DecBinary()
				_ = yym3108
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3107), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3093)
		} // end switch yys3093
	} // end for yyj3093
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3109 int
	var yyb3109 bool
	var yyhl3109 bool = l >= 0
	yyj3109++
	if yyhl3109 {
		yyb3109 = yyj3109 > l
	} else {
		yyb3109 = r.CheckBreak()
	}
	if yyb3109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3110 := &x.Capacity
		yyv3110.CodecDecodeSelf(d)
	}
	yyj3109++
	if yyhl3109 {
		yyb3109 = yyj3109 > l
	} else {
		yyb3109 = r.CheckBreak()
	}
	if yyb3109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv3111 := &x.Allocatable
		yyv3111.CodecDecodeSelf(d)
	}
	yyj3109++
	if yyhl3109 {
		yyb3109 = yyj3109 > l
	} else {
		yyb3109 = r.CheckBreak()
	}
	if yyb3109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj3109++
	if yyhl3109 {
		yyb3109 = yyj3109 > l
	} else {
		yyb3109 = r.CheckBreak()
	}
	if yyb3109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3113 := &x.Conditions
		yym3114 := z.DecBinary()
		_ = yym3114
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv3113), d)
		}
	}
	yyj3109++
	if yyhl3109 {
		yyb3109 = yyj3109 > l
	} else {
		yyb3109 = r.CheckBreak()
	}
	if yyb3109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv3115 := &x.Addresses
		yym3116 := z.DecBinary()
		_ = yym3116
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv3115), d)
		}
	}
	yyj3109++
	if yyhl3109 {
		yyb3109 = yyj3109 > l
	} else {
		yyb3109 = r.CheckBreak()
	}
	if yyb3109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv3117 := &x.DaemonEndpoints
		yyv3117.CodecDecodeSelf(d)
	}
	yyj3109++
	if yyhl3109 {
		yyb3109 = yyj3109 > l
	} else {
		yyb3109 = r.CheckBreak()
	}
	if yyb3109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv3118 := &x.NodeInfo
		yyv3118.CodecDecodeSelf(d)
	}
	yyj3109++
	if yyhl3109 {
		yyb3109 = yyj3109 > l
	} else {
		yyb3109 = r.CheckBreak()
	}
	if yyb3109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv3119 := &x.Images
		yym3120 := z.DecBinary()
		_ = yym3120
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv3119), d)
		}
	}
	yyj3109++
	if yyhl3109 {
		yyb3109 = yyj3109 > l
	} else {
		yyb3109 = r.CheckBreak()
	}
	if yyb3109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv3121 := &x.VolumesInUse
		yym3122 := z.DecBinary()
		_ = yym3122
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3121), d)
		}
	}
	yyj3109++
	if yyhl3109 {
		yyb3109 = yyj3109 > l
	} else {
		yyb3109 = r.CheckBreak()
	}
	if yyb3109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv3123 := &x.VolumesAttached
		yym3124 := z.DecBinary()
		_ = yym3124
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3123), d)
		}
	}
	for {
		yyj3109++
		if yyhl3109 {
			yyb3109 = yyj3109 > l
		} else {
			yyb3109 = r.CheckBreak()
		}
		if yyb3109 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3109-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3125 := z.EncBinary()
	_ = yym3125
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3126 := z.DecBinary()
	_ = yym3126
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3127 := z.EncBinary()
		_ = yym3127
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3128 := !z.EncBinary()
			yy2arr3128 := z.EncBasicHandle().StructToArray
			var yyq3128 [2]bool
			_, _, _ = yysep3128, yyq3128, yy2arr3128
			const yyr3128 bool = false
			var yynn3128 int
			if yyr3128 || yy2arr3128 {
				r.EncodeArrayStart(2)
			} else {
				yynn3128 = 2
				for _, b := range yyq3128 {
					if b {
						yynn3128++
					}
				}
				r.EncodeMapStart(yynn3128)
				yynn3128 = 0
			}
			if yyr3128 || yy2arr3128 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr3128 || yy2arr3128 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3131 := z.EncBinary()
				_ = yym3131
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3132 := z.EncBinary()
				_ = yym3132
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr3128 || yy2arr3128 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3133 := z.DecBinary()
	_ = yym3133
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3134 := r.ContainerType()
		if yyct3134 == codecSelferValueTypeMap1234 {
			yyl3134 := r.ReadMapStart()
			if yyl3134 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3134, d)
			}
		} else if yyct3134 == codecSelferValueTypeArray1234 {
			yyl3134 := r.ReadArrayStart()
			if yyl3134 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3134, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3135Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3135Slc
	var yyhl3135 bool = l >= 0
	for yyj3135 := 0; ; yyj3135++ {
		if yyhl3135 {
			if yyj3135 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3135Slc = r.DecodeBytes(yys3135Slc, true, true)
		yys3135 := string(yys3135Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3135 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3135)
		} // end switch yys3135
	} // end for yyj3135
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3138 int
	var yyb3138 bool
	var yyhl3138 bool = l >= 0
	yyj3138++
	if yyhl3138 {
		yyb3138 = yyj3138 > l
	} else {
		yyb3138 = r.CheckBreak()
	}
	if yyb3138 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj3138++
	if yyhl3138 {
		yyb3138 = yyj3138 > l
	} else {
		yyb3138 = r.CheckBreak()
	}
	if yyb3138 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj3138++
		if yyhl3138 {
			yyb3138 = yyj3138 > l
		} else {
			yyb3138 = r.CheckBreak()
		}
		if yyb3138 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3138-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3141 := z.EncBinary()
		_ = yym3141
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3142 := !z.EncBinary()
			yy2arr3142 := z.EncBasicHandle().StructToArray
			var yyq3142 [1]bool
			_, _, _ = yysep3142, yyq3142, yy2arr3142
			const yyr3142 bool = false
			yyq3142[0] = len(x.PreferAvoidPods) != 0
			var yynn3142 int
			if yyr3142 || yy2arr3142 {
				r.EncodeArrayStart(1)
			} else {
				yynn3142 = 0
				for _, b := range yyq3142 {
					if b {
						yynn3142++
					}
				}
				r.EncodeMapStart(yynn3142)
				yynn3142 = 0
			}
			if yyr3142 || yy2arr3142 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3142[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3144 := z.EncBinary()
						_ = yym3144
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3142[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3145 := z.EncBinary()
						_ = yym3145
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr3142 || yy2arr3142 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3146 := z.DecBinary()
	_ = yym3146
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3147 := r.ContainerType()
		if yyct3147 == codecSelferValueTypeMap1234 {
			yyl3147 := r.ReadMapStart()
			if yyl3147 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3147, d)
			}
		} else if yyct3147 == codecSelferValueTypeArray1234 {
			yyl3147 := r.ReadArrayStart()
			if yyl3147 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3147, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3148Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3148Slc
	var yyhl3148 bool = l >= 0
	for yyj3148 := 0; ; yyj3148++ {
		if yyhl3148 {
			if yyj3148 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3148Slc = r.DecodeBytes(yys3148Slc, true, true)
		yys3148 := string(yys3148Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3148 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv3149 := &x.PreferAvoidPods
				yym3150 := z.DecBinary()
				_ = yym3150
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3149), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3148)
		} // end switch yys3148
	} // end for yyj3148
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3151 int
	var yyb3151 bool
	var yyhl3151 bool = l >= 0
	yyj3151++
	if yyhl3151 {
		yyb3151 = yyj3151 > l
	} else {
		yyb3151 = r.CheckBreak()
	}
	if yyb3151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv3152 := &x.PreferAvoidPods
		yym3153 := z.DecBinary()
		_ = yym3153
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3152), d)
		}
	}
	for {
		yyj3151++
		if yyhl3151 {
			yyb3151 = yyj3151 > l
		} else {
			yyb3151 = r.CheckBreak()
		}
		if yyb3151 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3151-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3154 := z.EncBinary()
		_ = yym3154
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3155 := !z.EncBinary()
			yy2arr3155 := z.EncBasicHandle().StructToArray
			var yyq3155 [4]bool
			_, _, _ = yysep3155, yyq3155, yy2arr3155
			const yyr3155 bool = false
			yyq3155[1] = true
			yyq3155[2] = x.Reason != ""
			yyq3155[3] = x.Message != ""
			var yynn3155 int
			if yyr3155 || yy2arr3155 {
				r.EncodeArrayStart(4)
			} else {
				yynn3155 = 1
				for _, b := range yyq3155 {
					if b {
						yynn3155++
					}
				}
				r.EncodeMapStart(yynn3155)
				yynn3155 = 0
			}
			if yyr3155 || yy2arr3155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3157 := &x.PodSignature
				yy3157.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3158 := &x.PodSignature
				yy3158.CodecEncodeSelf(e)
			}
			if yyr3155 || yy2arr3155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3155[1] {
					yy3160 := &x.EvictionTime
					yym3161 := z.EncBinary()
					_ = yym3161
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3160) {
					} else if yym3161 {
						z.EncBinaryMarshal(yy3160)
					} else if !yym3161 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3160)
					} else {
						z.EncFallback(yy3160)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3155[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3162 := &x.EvictionTime
					yym3163 := z.EncBinary()
					_ = yym3163
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3162) {
					} else if yym3163 {
						z.EncBinaryMarshal(yy3162)
					} else if !yym3163 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3162)
					} else {
						z.EncFallback(yy3162)
					}
				}
			}
			if yyr3155 || yy2arr3155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3155[2] {
					yym3165 := z.EncBinary()
					_ = yym3165
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3155[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3166 := z.EncBinary()
					_ = yym3166
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3155 || yy2arr3155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3155[3] {
					yym3168 := z.EncBinary()
					_ = yym3168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3155[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3169 := z.EncBinary()
					_ = yym3169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3155 || yy2arr3155 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3170 := z.DecBinary()
	_ = yym3170
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3171 := r.ContainerType()
		if yyct3171 == codecSelferValueTypeMap1234 {
			yyl3171 := r.ReadMapStart()
			if yyl3171 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3171, d)
			}
		} else if yyct3171 == codecSelferValueTypeArray1234 {
			yyl3171 := r.ReadArrayStart()
			if yyl3171 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3171, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3172Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3172Slc
	var yyhl3172 bool = l >= 0
	for yyj3172 := 0; ; yyj3172++ {
		if yyhl3172 {
			if yyj3172 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3172Slc = r.DecodeBytes(yys3172Slc, true, true)
		yys3172 := string(yys3172Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3172 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv3173 := &x.PodSignature
				yyv3173.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv3174 := &x.EvictionTime
				yym3175 := z.DecBinary()
				_ = yym3175
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3174) {
				} else if yym3175 {
					z.DecBinaryUnmarshal(yyv3174)
				} else if !yym3175 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3174)
				} else {
					z.DecFallback(yyv3174, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3172)
		} // end switch yys3172
	} // end for yyj3172
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3178 int
	var yyb3178 bool
	var yyhl3178 bool = l >= 0
	yyj3178++
	if yyhl3178 {
		yyb3178 = yyj3178 > l
	} else {
		yyb3178 = r.CheckBreak()
	}
	if yyb3178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv3179 := &x.PodSignature
		yyv3179.CodecDecodeSelf(d)
	}
	yyj3178++
	if yyhl3178 {
		yyb3178 = yyj3178 > l
	} else {
		yyb3178 = r.CheckBreak()
	}
	if yyb3178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv3180 := &x.EvictionTime
		yym3181 := z.DecBinary()
		_ = yym3181
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3180) {
		} else if yym3181 {
			z.DecBinaryUnmarshal(yyv3180)
		} else if !yym3181 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3180)
		} else {
			z.DecFallback(yyv3180, false)
		}
	}
	yyj3178++
	if yyhl3178 {
		yyb3178 = yyj3178 > l
	} else {
		yyb3178 = r.CheckBreak()
	}
	if yyb3178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3178++
	if yyhl3178 {
		yyb3178 = yyj3178 > l
	} else {
		yyb3178 = r.CheckBreak()
	}
	if yyb3178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3178++
		if yyhl3178 {
			yyb3178 = yyj3178 > l
		} else {
			yyb3178 = r.CheckBreak()
		}
		if yyb3178 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3178-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3184 := z.EncBinary()
		_ = yym3184
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3185 := !z.EncBinary()
			yy2arr3185 := z.EncBasicHandle().StructToArray
			var yyq3185 [1]bool
			_, _, _ = yysep3185, yyq3185, yy2arr3185
			const yyr3185 bool = false
			yyq3185[0] = x.PodController != nil
			var yynn3185 int
			if yyr3185 || yy2arr3185 {
				r.EncodeArrayStart(1)
			} else {
				yynn3185 = 0
				for _, b := range yyq3185 {
					if b {
						yynn3185++
					}
				}
				r.EncodeMapStart(yynn3185)
				yynn3185 = 0
			}
			if yyr3185 || yy2arr3185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3185[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3185[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3185 || yy2arr3185 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3187 := z.DecBinary()
	_ = yym3187
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3188 := r.ContainerType()
		if yyct3188 == codecSelferValueTypeMap1234 {
			yyl3188 := r.ReadMapStart()
			if yyl3188 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3188, d)
			}
		} else if yyct3188 == codecSelferValueTypeArray1234 {
			yyl3188 := r.ReadArrayStart()
			if yyl3188 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3188, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3189Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3189Slc
	var yyhl3189 bool = l >= 0
	for yyj3189 := 0; ; yyj3189++ {
		if yyhl3189 {
			if yyj3189 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3189Slc = r.DecodeBytes(yys3189Slc, true, true)
		yys3189 := string(yys3189Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3189 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3189)
		} // end switch yys3189
	} // end for yyj3189
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3191 int
	var yyb3191 bool
	var yyhl3191 bool = l >= 0
	yyj3191++
	if yyhl3191 {
		yyb3191 = yyj3191 > l
	} else {
		yyb3191 = r.CheckBreak()
	}
	if yyb3191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj3191++
		if yyhl3191 {
			yyb3191 = yyj3191 > l
		} else {
			yyb3191 = r.CheckBreak()
		}
		if yyb3191 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3191-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3193 := z.EncBinary()
		_ = yym3193
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3194 := !z.EncBinary()
			yy2arr3194 := z.EncBasicHandle().StructToArray
			var yyq3194 [2]bool
			_, _, _ = yysep3194, yyq3194, yy2arr3194
			const yyr3194 bool = false
			yyq3194[1] = x.SizeBytes != 0
			var yynn3194 int
			if yyr3194 || yy2arr3194 {
				r.EncodeArrayStart(2)
			} else {
				yynn3194 = 1
				for _, b := range yyq3194 {
					if b {
						yynn3194++
					}
				}
				r.EncodeMapStart(yynn3194)
				yynn3194 = 0
			}
			if yyr3194 || yy2arr3194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3196 := z.EncBinary()
					_ = yym3196
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3197 := z.EncBinary()
					_ = yym3197
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3194 || yy2arr3194 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3194[1] {
					yym3199 := z.EncBinary()
					_ = yym3199
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3194[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3200 := z.EncBinary()
					_ = yym3200
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3194 || yy2arr3194 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3201 := z.DecBinary()
	_ = yym3201
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3202 := r.ContainerType()
		if yyct3202 == codecSelferValueTypeMap1234 {
			yyl3202 := r.ReadMapStart()
			if yyl3202 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3202, d)
			}
		} else if yyct3202 == codecSelferValueTypeArray1234 {
			yyl3202 := r.ReadArrayStart()
			if yyl3202 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3202, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3203Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3203Slc
	var yyhl3203 bool = l >= 0
	for yyj3203 := 0; ; yyj3203++ {
		if yyhl3203 {
			if yyj3203 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3203Slc = r.DecodeBytes(yys3203Slc, true, true)
		yys3203 := string(yys3203Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3203 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3204 := &x.Names
				yym3205 := z.DecBinary()
				_ = yym3205
				if false {
				} else {
					z.F.DecSliceStringX(yyv3204, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3203)
		} // end switch yys3203
	} // end for yyj3203
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3207 int
	var yyb3207 bool
	var yyhl3207 bool = l >= 0
	yyj3207++
	if yyhl3207 {
		yyb3207 = yyj3207 > l
	} else {
		yyb3207 = r.CheckBreak()
	}
	if yyb3207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3208 := &x.Names
		yym3209 := z.DecBinary()
		_ = yym3209
		if false {
		} else {
			z.F.DecSliceStringX(yyv3208, false, d)
		}
	}
	yyj3207++
	if yyhl3207 {
		yyb3207 = yyj3207 > l
	} else {
		yyb3207 = r.CheckBreak()
	}
	if yyb3207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3207++
		if yyhl3207 {
			yyb3207 = yyj3207 > l
		} else {
			yyb3207 = r.CheckBreak()
		}
		if yyb3207 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3207-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3211 := z.EncBinary()
	_ = yym3211
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3212 := z.DecBinary()
	_ = yym3212
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3213 := z.EncBinary()
	_ = yym3213
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3214 := z.DecBinary()
	_ = yym3214
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3215 := z.EncBinary()
		_ = yym3215
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3216 := !z.EncBinary()
			yy2arr3216 := z.EncBasicHandle().StructToArray
			var yyq3216 [6]bool
			_, _, _ = yysep3216, yyq3216, yy2arr3216
			const yyr3216 bool = false
			yyq3216[2] = true
			yyq3216[3] = true
			yyq3216[4] = x.Reason != ""
			yyq3216[5] = x.Message != ""
			var yynn3216 int
			if yyr3216 || yy2arr3216 {
				r.EncodeArrayStart(6)
			} else {
				yynn3216 = 2
				for _, b := range yyq3216 {
					if b {
						yynn3216++
					}
				}
				r.EncodeMapStart(yynn3216)
				yynn3216 = 0
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3216[2] {
					yy3220 := &x.LastHeartbeatTime
					yym3221 := z.EncBinary()
					_ = yym3221
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3220) {
					} else if yym3221 {
						z.EncBinaryMarshal(yy3220)
					} else if !yym3221 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3220)
					} else {
						z.EncFallback(yy3220)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3216[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3222 := &x.LastHeartbeatTime
					yym3223 := z.EncBinary()
					_ = yym3223
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3222) {
					} else if yym3223 {
						z.EncBinaryMarshal(yy3222)
					} else if !yym3223 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3222)
					} else {
						z.EncFallback(yy3222)
					}
				}
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3216[3] {
					yy3225 := &x.LastTransitionTime
					yym3226 := z.EncBinary()
					_ = yym3226
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3225) {
					} else if yym3226 {
						z.EncBinaryMarshal(yy3225)
					} else if !yym3226 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3225)
					} else {
						z.EncFallback(yy3225)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3216[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3227 := &x.LastTransitionTime
					yym3228 := z.EncBinary()
					_ = yym3228
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3227) {
					} else if yym3228 {
						z.EncBinaryMarshal(yy3227)
					} else if !yym3228 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3227)
					} else {
						z.EncFallback(yy3227)
					}
				}
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3216[4] {
					yym3230 := z.EncBinary()
					_ = yym3230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3216[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3231 := z.EncBinary()
					_ = yym3231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3216[5] {
					yym3233 := z.EncBinary()
					_ = yym3233
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3216[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3234 := z.EncBinary()
					_ = yym3234
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3216 || yy2arr3216 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3235 := z.DecBinary()
	_ = yym3235
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3236 := r.ContainerType()
		if yyct3236 == codecSelferValueTypeMap1234 {
			yyl3236 := r.ReadMapStart()
			if yyl3236 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3236, d)
			}
		} else if yyct3236 == codecSelferValueTypeArray1234 {
			yyl3236 := r.ReadArrayStart()
			if yyl3236 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3236, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3237Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3237Slc
	var yyhl3237 bool = l >= 0
	for yyj3237 := 0; ; yyj3237++ {
		if yyhl3237 {
			if yyj3237 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3237Slc = r.DecodeBytes(yys3237Slc, true, true)
		yys3237 := string(yys3237Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3237 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3240 := &x.LastHeartbeatTime
				yym3241 := z.DecBinary()
				_ = yym3241
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3240) {
				} else if yym3241 {
					z.DecBinaryUnmarshal(yyv3240)
				} else if !yym3241 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3240)
				} else {
					z.DecFallback(yyv3240, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3242 := &x.LastTransitionTime
				yym3243 := z.DecBinary()
				_ = yym3243
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3242) {
				} else if yym3243 {
					z.DecBinaryUnmarshal(yyv3242)
				} else if !yym3243 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3242)
				} else {
					z.DecFallback(yyv3242, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3237)
		} // end switch yys3237
	} // end for yyj3237
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3246 int
	var yyb3246 bool
	var yyhl3246 bool = l >= 0
	yyj3246++
	if yyhl3246 {
		yyb3246 = yyj3246 > l
	} else {
		yyb3246 = r.CheckBreak()
	}
	if yyb3246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3246++
	if yyhl3246 {
		yyb3246 = yyj3246 > l
	} else {
		yyb3246 = r.CheckBreak()
	}
	if yyb3246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3246++
	if yyhl3246 {
		yyb3246 = yyj3246 > l
	} else {
		yyb3246 = r.CheckBreak()
	}
	if yyb3246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3249 := &x.LastHeartbeatTime
		yym3250 := z.DecBinary()
		_ = yym3250
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3249) {
		} else if yym3250 {
			z.DecBinaryUnmarshal(yyv3249)
		} else if !yym3250 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3249)
		} else {
			z.DecFallback(yyv3249, false)
		}
	}
	yyj3246++
	if yyhl3246 {
		yyb3246 = yyj3246 > l
	} else {
		yyb3246 = r.CheckBreak()
	}
	if yyb3246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3251 := &x.LastTransitionTime
		yym3252 := z.DecBinary()
		_ = yym3252
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3251) {
		} else if yym3252 {
			z.DecBinaryUnmarshal(yyv3251)
		} else if !yym3252 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3251)
		} else {
			z.DecFallback(yyv3251, false)
		}
	}
	yyj3246++
	if yyhl3246 {
		yyb3246 = yyj3246 > l
	} else {
		yyb3246 = r.CheckBreak()
	}
	if yyb3246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3246++
	if yyhl3246 {
		yyb3246 = yyj3246 > l
	} else {
		yyb3246 = r.CheckBreak()
	}
	if yyb3246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3246++
		if yyhl3246 {
			yyb3246 = yyj3246 > l
		} else {
			yyb3246 = r.CheckBreak()
		}
		if yyb3246 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3246-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3255 := z.EncBinary()
	_ = yym3255
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3256 := z.DecBinary()
	_ = yym3256
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3257 := z.EncBinary()
		_ = yym3257
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3258 := !z.EncBinary()
			yy2arr3258 := z.EncBasicHandle().StructToArray
			var yyq3258 [2]bool
			_, _, _ = yysep3258, yyq3258, yy2arr3258
			const yyr3258 bool = false
			var yynn3258 int
			if yyr3258 || yy2arr3258 {
				r.EncodeArrayStart(2)
			} else {
				yynn3258 = 2
				for _, b := range yyq3258 {
					if b {
						yynn3258++
					}
				}
				r.EncodeMapStart(yynn3258)
				yynn3258 = 0
			}
			if yyr3258 || yy2arr3258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3258 || yy2arr3258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3261 := z.EncBinary()
				_ = yym3261
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3262 := z.EncBinary()
				_ = yym3262
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3258 || yy2arr3258 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3263 := z.DecBinary()
	_ = yym3263
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3264 := r.ContainerType()
		if yyct3264 == codecSelferValueTypeMap1234 {
			yyl3264 := r.ReadMapStart()
			if yyl3264 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3264, d)
			}
		} else if yyct3264 == codecSelferValueTypeArray1234 {
			yyl3264 := r.ReadArrayStart()
			if yyl3264 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3264, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3265Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3265Slc
	var yyhl3265 bool = l >= 0
	for yyj3265 := 0; ; yyj3265++ {
		if yyhl3265 {
			if yyj3265 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3265Slc = r.DecodeBytes(yys3265Slc, true, true)
		yys3265 := string(yys3265Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3265 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3265)
		} // end switch yys3265
	} // end for yyj3265
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3268 int
	var yyb3268 bool
	var yyhl3268 bool = l >= 0
	yyj3268++
	if yyhl3268 {
		yyb3268 = yyj3268 > l
	} else {
		yyb3268 = r.CheckBreak()
	}
	if yyb3268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3268++
	if yyhl3268 {
		yyb3268 = yyj3268 > l
	} else {
		yyb3268 = r.CheckBreak()
	}
	if yyb3268 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3268++
		if yyhl3268 {
			yyb3268 = yyj3268 > l
		} else {
			yyb3268 = r.CheckBreak()
		}
		if yyb3268 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3268-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3271 := z.EncBinary()
		_ = yym3271
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3272 := !z.EncBinary()
			yy2arr3272 := z.EncBasicHandle().StructToArray
			var yyq3272 [1]bool
			_, _, _ = yysep3272, yyq3272, yy2arr3272
			const yyr3272 bool = false
			yyq3272[0] = len(x.Capacity) != 0
			var yynn3272 int
			if yyr3272 || yy2arr3272 {
				r.EncodeArrayStart(1)
			} else {
				yynn3272 = 0
				for _, b := range yyq3272 {
					if b {
						yynn3272++
					}
				}
				r.EncodeMapStart(yynn3272)
				yynn3272 = 0
			}
			if yyr3272 || yy2arr3272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3272[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3272[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3272 || yy2arr3272 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3274 := z.DecBinary()
	_ = yym3274
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3275 := r.ContainerType()
		if yyct3275 == codecSelferValueTypeMap1234 {
			yyl3275 := r.ReadMapStart()
			if yyl3275 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3275, d)
			}
		} else if yyct3275 == codecSelferValueTypeArray1234 {
			yyl3275 := r.ReadArrayStart()
			if yyl3275 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3275, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3276Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3276Slc
	var yyhl3276 bool = l >= 0
	for yyj3276 := 0; ; yyj3276++ {
		if yyhl3276 {
			if yyj3276 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3276Slc = r.DecodeBytes(yys3276Slc, true, true)
		yys3276 := string(yys3276Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3276 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3277 := &x.Capacity
				yyv3277.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3276)
		} // end switch yys3276
	} // end for yyj3276
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3278 int
	var yyb3278 bool
	var yyhl3278 bool = l >= 0
	yyj3278++
	if yyhl3278 {
		yyb3278 = yyj3278 > l
	} else {
		yyb3278 = r.CheckBreak()
	}
	if yyb3278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3279 := &x.Capacity
		yyv3279.CodecDecodeSelf(d)
	}
	for {
		yyj3278++
		if yyhl3278 {
			yyb3278 = yyj3278 > l
		} else {
			yyb3278 = r.CheckBreak()
		}
		if yyb3278 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3278-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3280 := z.EncBinary()
	_ = yym3280
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3281 := z.DecBinary()
	_ = yym3281
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3282 := z.EncBinary()
		_ = yym3282
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3283 := z.DecBinary()
	_ = yym3283
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3284 := z.EncBinary()
		_ = yym3284
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3285 := !z.EncBinary()
			yy2arr3285 := z.EncBasicHandle().StructToArray
			var yyq3285 [5]bool
			_, _, _ = yysep3285, yyq3285, yy2arr3285
			const yyr3285 bool = false
			yyq3285[0] = x.Kind != ""
			yyq3285[1] = x.APIVersion != ""
			yyq3285[2] = true
			yyq3285[3] = true
			yyq3285[4] = true
			var yynn3285 int
			if yyr3285 || yy2arr3285 {
				r.EncodeArrayStart(5)
			} else {
				yynn3285 = 0
				for _, b := range yyq3285 {
					if b {
						yynn3285++
					}
				}
				r.EncodeMapStart(yynn3285)
				yynn3285 = 0
			}
			if yyr3285 || yy2arr3285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3285[0] {
					yym3287 := z.EncBinary()
					_ = yym3287
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3285[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3288 := z.EncBinary()
					_ = yym3288
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3285 || yy2arr3285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3285[1] {
					yym3290 := z.EncBinary()
					_ = yym3290
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3285[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3291 := z.EncBinary()
					_ = yym3291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3285 || yy2arr3285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3285[2] {
					yy3293 := &x.ObjectMeta
					yy3293.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3285[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3294 := &x.ObjectMeta
					yy3294.CodecEncodeSelf(e)
				}
			}
			if yyr3285 || yy2arr3285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3285[3] {
					yy3296 := &x.Spec
					yy3296.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3285[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3297 := &x.Spec
					yy3297.CodecEncodeSelf(e)
				}
			}
			if yyr3285 || yy2arr3285 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3285[4] {
					yy3299 := &x.Status
					yy3299.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3285[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3300 := &x.Status
					yy3300.CodecEncodeSelf(e)
				}
			}
			if yyr3285 || yy2arr3285 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3301 := z.DecBinary()
	_ = yym3301
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3302 := r.ContainerType()
		if yyct3302 == codecSelferValueTypeMap1234 {
			yyl3302 := r.ReadMapStart()
			if yyl3302 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3302, d)
			}
		} else if yyct3302 == codecSelferValueTypeArray1234 {
			yyl3302 := r.ReadArrayStart()
			if yyl3302 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3302, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3303Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3303Slc
	var yyhl3303 bool = l >= 0
	for yyj3303 := 0; ; yyj3303++ {
		if yyhl3303 {
			if yyj3303 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3303Slc = r.DecodeBytes(yys3303Slc, true, true)
		yys3303 := string(yys3303Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3303 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3306 := &x.ObjectMeta
				yyv3306.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3307 := &x.Spec
				yyv3307.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3308 := &x.Status
				yyv3308.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3303)
		} // end switch yys3303
	} // end for yyj3303
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3309 int
	var yyb3309 bool
	var yyhl3309 bool = l >= 0
	yyj3309++
	if yyhl3309 {
		yyb3309 = yyj3309 > l
	} else {
		yyb3309 = r.CheckBreak()
	}
	if yyb3309 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3309++
	if yyhl3309 {
		yyb3309 = yyj3309 > l
	} else {
		yyb3309 = r.CheckBreak()
	}
	if yyb3309 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3309++
	if yyhl3309 {
		yyb3309 = yyj3309 > l
	} else {
		yyb3309 = r.CheckBreak()
	}
	if yyb3309 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3312 := &x.ObjectMeta
		yyv3312.CodecDecodeSelf(d)
	}
	yyj3309++
	if yyhl3309 {
		yyb3309 = yyj3309 > l
	} else {
		yyb3309 = r.CheckBreak()
	}
	if yyb3309 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3313 := &x.Spec
		yyv3313.CodecDecodeSelf(d)
	}
	yyj3309++
	if yyhl3309 {
		yyb3309 = yyj3309 > l
	} else {
		yyb3309 = r.CheckBreak()
	}
	if yyb3309 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3314 := &x.Status
		yyv3314.CodecDecodeSelf(d)
	}
	for {
		yyj3309++
		if yyhl3309 {
			yyb3309 = yyj3309 > l
		} else {
			yyb3309 = r.CheckBreak()
		}
		if yyb3309 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3309-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3315 := z.EncBinary()
		_ = yym3315
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3316 := !z.EncBinary()
			yy2arr3316 := z.EncBasicHandle().StructToArray
			var yyq3316 [4]bool
			_, _, _ = yysep3316, yyq3316, yy2arr3316
			const yyr3316 bool = false
			yyq3316[0] = x.Kind != ""
			yyq3316[1] = x.APIVersion != ""
			yyq3316[2] = true
			var yynn3316 int
			if yyr3316 || yy2arr3316 {
				r.EncodeArrayStart(4)
			} else {
				yynn3316 = 1
				for _, b := range yyq3316 {
					if b {
						yynn3316++
					}
				}
				r.EncodeMapStart(yynn3316)
				yynn3316 = 0
			}
			if yyr3316 || yy2arr3316 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3316[0] {
					yym3318 := z.EncBinary()
					_ = yym3318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3316[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3319 := z.EncBinary()
					_ = yym3319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3316 || yy2arr3316 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3316[1] {
					yym3321 := z.EncBinary()
					_ = yym3321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3316[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3322 := z.EncBinary()
					_ = yym3322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3316 || yy2arr3316 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3316[2] {
					yy3324 := &x.ListMeta
					yym3325 := z.EncBinary()
					_ = yym3325
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3324) {
					} else {
						z.EncFallback(yy3324)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3316[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3326 := &x.ListMeta
					yym3327 := z.EncBinary()
					_ = yym3327
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3326) {
					} else {
						z.EncFallback(yy3326)
					}
				}
			}
			if yyr3316 || yy2arr3316 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3329 := z.EncBinary()
					_ = yym3329
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3330 := z.EncBinary()
					_ = yym3330
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3316 || yy2arr3316 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3331 := z.DecBinary()
	_ = yym3331
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3332 := r.ContainerType()
		if yyct3332 == codecSelferValueTypeMap1234 {
			yyl3332 := r.ReadMapStart()
			if yyl3332 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3332, d)
			}
		} else if yyct3332 == codecSelferValueTypeArray1234 {
			yyl3332 := r.ReadArrayStart()
			if yyl3332 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3332, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3333Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3333Slc
	var yyhl3333 bool = l >= 0
	for yyj3333 := 0; ; yyj3333++ {
		if yyhl3333 {
			if yyj3333 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3333Slc = r.DecodeBytes(yys3333Slc, true, true)
		yys3333 := string(yys3333Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3333 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3336 := &x.ListMeta
				yym3337 := z.DecBinary()
				_ = yym3337
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3336) {
				} else {
					z.DecFallback(yyv3336, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3338 := &x.Items
				yym3339 := z.DecBinary()
				_ = yym3339
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3338), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3333)
		} // end switch yys3333
	} // end for yyj3333
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3340 int
	var yyb3340 bool
	var yyhl3340 bool = l >= 0
	yyj3340++
	if yyhl3340 {
		yyb3340 = yyj3340 > l
	} else {
		yyb3340 = r.CheckBreak()
	}
	if yyb3340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3340++
	if yyhl3340 {
		yyb3340 = yyj3340 > l
	} else {
		yyb3340 = r.CheckBreak()
	}
	if yyb3340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3340++
	if yyhl3340 {
		yyb3340 = yyj3340 > l
	} else {
		yyb3340 = r.CheckBreak()
	}
	if yyb3340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3343 := &x.ListMeta
		yym3344 := z.DecBinary()
		_ = yym3344
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3343) {
		} else {
			z.DecFallback(yyv3343, false)
		}
	}
	yyj3340++
	if yyhl3340 {
		yyb3340 = yyj3340 > l
	} else {
		yyb3340 = r.CheckBreak()
	}
	if yyb3340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3345 := &x.Items
		yym3346 := z.DecBinary()
		_ = yym3346
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3345), d)
		}
	}
	for {
		yyj3340++
		if yyhl3340 {
			yyb3340 = yyj3340 > l
		} else {
			yyb3340 = r.CheckBreak()
		}
		if yyb3340 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3340-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3347 := z.EncBinary()
		_ = yym3347
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3348 := !z.EncBinary()
			yy2arr3348 := z.EncBasicHandle().StructToArray
			var yyq3348 [1]bool
			_, _, _ = yysep3348, yyq3348, yy2arr3348
			const yyr3348 bool = false
			var yynn3348 int
			if yyr3348 || yy2arr3348 {
				r.EncodeArrayStart(1)
			} else {
				yynn3348 = 1
				for _, b := range yyq3348 {
					if b {
						yynn3348++
					}
				}
				r.EncodeMapStart(yynn3348)
				yynn3348 = 0
			}
			if yyr3348 || yy2arr3348 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3350 := z.EncBinary()
					_ = yym3350
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3351 := z.EncBinary()
					_ = yym3351
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr3348 || yy2arr3348 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3352 := z.DecBinary()
	_ = yym3352
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3353 := r.ContainerType()
		if yyct3353 == codecSelferValueTypeMap1234 {
			yyl3353 := r.ReadMapStart()
			if yyl3353 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3353, d)
			}
		} else if yyct3353 == codecSelferValueTypeArray1234 {
			yyl3353 := r.ReadArrayStart()
			if yyl3353 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3353, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3354Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3354Slc
	var yyhl3354 bool = l >= 0
	for yyj3354 := 0; ; yyj3354++ {
		if yyhl3354 {
			if yyj3354 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3354Slc = r.DecodeBytes(yys3354Slc, true, true)
		yys3354 := string(yys3354Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3354 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3355 := &x.Finalizers
				yym3356 := z.DecBinary()
				_ = yym3356
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3355), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3354)
		} // end switch yys3354
	} // end for yyj3354
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3357 int
	var yyb3357 bool
	var yyhl3357 bool = l >= 0
	yyj3357++
	if yyhl3357 {
		yyb3357 = yyj3357 > l
	} else {
		yyb3357 = r.CheckBreak()
	}
	if yyb3357 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3358 := &x.Finalizers
		yym3359 := z.DecBinary()
		_ = yym3359
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3358), d)
		}
	}
	for {
		yyj3357++
		if yyhl3357 {
			yyb3357 = yyj3357 > l
		} else {
			yyb3357 = r.CheckBreak()
		}
		if yyb3357 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3357-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3360 := z.EncBinary()
	_ = yym3360
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3361 := z.DecBinary()
	_ = yym3361
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3362 := z.EncBinary()
		_ = yym3362
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3363 := !z.EncBinary()
			yy2arr3363 := z.EncBasicHandle().StructToArray
			var yyq3363 [1]bool
			_, _, _ = yysep3363, yyq3363, yy2arr3363
			const yyr3363 bool = false
			yyq3363[0] = x.Phase != ""
			var yynn3363 int
			if yyr3363 || yy2arr3363 {
				r.EncodeArrayStart(1)
			} else {
				yynn3363 = 0
				for _, b := range yyq3363 {
					if b {
						yynn3363++
					}
				}
				r.EncodeMapStart(yynn3363)
				yynn3363 = 0
			}
			if yyr3363 || yy2arr3363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3363[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3363[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3363 || yy2arr3363 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3365 := z.DecBinary()
	_ = yym3365
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3366 := r.ContainerType()
		if yyct3366 == codecSelferValueTypeMap1234 {
			yyl3366 := r.ReadMapStart()
			if yyl3366 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3366, d)
			}
		} else if yyct3366 == codecSelferValueTypeArray1234 {
			yyl3366 := r.ReadArrayStart()
			if yyl3366 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3366, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3367Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3367Slc
	var yyhl3367 bool = l >= 0
	for yyj3367 := 0; ; yyj3367++ {
		if yyhl3367 {
			if yyj3367 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3367Slc = r.DecodeBytes(yys3367Slc, true, true)
		yys3367 := string(yys3367Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3367 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3367)
		} // end switch yys3367
	} // end for yyj3367
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3369 int
	var yyb3369 bool
	var yyhl3369 bool = l >= 0
	yyj3369++
	if yyhl3369 {
		yyb3369 = yyj3369 > l
	} else {
		yyb3369 = r.CheckBreak()
	}
	if yyb3369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3369++
		if yyhl3369 {
			yyb3369 = yyj3369 > l
		} else {
			yyb3369 = r.CheckBreak()
		}
		if yyb3369 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3369-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3371 := z.EncBinary()
	_ = yym3371
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3372 := z.DecBinary()
	_ = yym3372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3373 := z.EncBinary()
		_ = yym3373
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3374 := !z.EncBinary()
			yy2arr3374 := z.EncBasicHandle().StructToArray
			var yyq3374 [5]bool
			_, _, _ = yysep3374, yyq3374, yy2arr3374
			const yyr3374 bool = false
			yyq3374[0] = x.Kind != ""
			yyq3374[1] = x.APIVersion != ""
			yyq3374[2] = true
			yyq3374[3] = true
			yyq3374[4] = true
			var yynn3374 int
			if yyr3374 || yy2arr3374 {
				r.EncodeArrayStart(5)
			} else {
				yynn3374 = 0
				for _, b := range yyq3374 {
					if b {
						yynn3374++
					}
				}
				r.EncodeMapStart(yynn3374)
				yynn3374 = 0
			}
			if yyr3374 || yy2arr3374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3374[0] {
					yym3376 := z.EncBinary()
					_ = yym3376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3374[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3377 := z.EncBinary()
					_ = yym3377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3374 || yy2arr3374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3374[1] {
					yym3379 := z.EncBinary()
					_ = yym3379
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3374[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3380 := z.EncBinary()
					_ = yym3380
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3374 || yy2arr3374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3374[2] {
					yy3382 := &x.ObjectMeta
					yy3382.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3374[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3383 := &x.ObjectMeta
					yy3383.CodecEncodeSelf(e)
				}
			}
			if yyr3374 || yy2arr3374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3374[3] {
					yy3385 := &x.Spec
					yy3385.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3374[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3386 := &x.Spec
					yy3386.CodecEncodeSelf(e)
				}
			}
			if yyr3374 || yy2arr3374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3374[4] {
					yy3388 := &x.Status
					yy3388.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3374[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3389 := &x.Status
					yy3389.CodecEncodeSelf(e)
				}
			}
			if yyr3374 || yy2arr3374 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3390 := z.DecBinary()
	_ = yym3390
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3391 := r.ContainerType()
		if yyct3391 == codecSelferValueTypeMap1234 {
			yyl3391 := r.ReadMapStart()
			if yyl3391 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3391, d)
			}
		} else if yyct3391 == codecSelferValueTypeArray1234 {
			yyl3391 := r.ReadArrayStart()
			if yyl3391 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3391, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3392Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3392Slc
	var yyhl3392 bool = l >= 0
	for yyj3392 := 0; ; yyj3392++ {
		if yyhl3392 {
			if yyj3392 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3392Slc = r.DecodeBytes(yys3392Slc, true, true)
		yys3392 := string(yys3392Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3392 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3395 := &x.ObjectMeta
				yyv3395.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3396 := &x.Spec
				yyv3396.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3397 := &x.Status
				yyv3397.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3392)
		} // end switch yys3392
	} // end for yyj3392
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3398 int
	var yyb3398 bool
	var yyhl3398 bool = l >= 0
	yyj3398++
	if yyhl3398 {
		yyb3398 = yyj3398 > l
	} else {
		yyb3398 = r.CheckBreak()
	}
	if yyb3398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3398++
	if yyhl3398 {
		yyb3398 = yyj3398 > l
	} else {
		yyb3398 = r.CheckBreak()
	}
	if yyb3398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3398++
	if yyhl3398 {
		yyb3398 = yyj3398 > l
	} else {
		yyb3398 = r.CheckBreak()
	}
	if yyb3398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3401 := &x.ObjectMeta
		yyv3401.CodecDecodeSelf(d)
	}
	yyj3398++
	if yyhl3398 {
		yyb3398 = yyj3398 > l
	} else {
		yyb3398 = r.CheckBreak()
	}
	if yyb3398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3402 := &x.Spec
		yyv3402.CodecDecodeSelf(d)
	}
	yyj3398++
	if yyhl3398 {
		yyb3398 = yyj3398 > l
	} else {
		yyb3398 = r.CheckBreak()
	}
	if yyb3398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3403 := &x.Status
		yyv3403.CodecDecodeSelf(d)
	}
	for {
		yyj3398++
		if yyhl3398 {
			yyb3398 = yyj3398 > l
		} else {
			yyb3398 = r.CheckBreak()
		}
		if yyb3398 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3398-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3404 := z.EncBinary()
		_ = yym3404
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3405 := !z.EncBinary()
			yy2arr3405 := z.EncBasicHandle().StructToArray
			var yyq3405 [4]bool
			_, _, _ = yysep3405, yyq3405, yy2arr3405
			const yyr3405 bool = false
			yyq3405[0] = x.Kind != ""
			yyq3405[1] = x.APIVersion != ""
			yyq3405[2] = true
			var yynn3405 int
			if yyr3405 || yy2arr3405 {
				r.EncodeArrayStart(4)
			} else {
				yynn3405 = 1
				for _, b := range yyq3405 {
					if b {
						yynn3405++
					}
				}
				r.EncodeMapStart(yynn3405)
				yynn3405 = 0
			}
			if yyr3405 || yy2arr3405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3405[0] {
					yym3407 := z.EncBinary()
					_ = yym3407
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3405[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3408 := z.EncBinary()
					_ = yym3408
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3405 || yy2arr3405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3405[1] {
					yym3410 := z.EncBinary()
					_ = yym3410
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3405[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3411 := z.EncBinary()
					_ = yym3411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3405 || yy2arr3405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3405[2] {
					yy3413 := &x.ListMeta
					yym3414 := z.EncBinary()
					_ = yym3414
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3413) {
					} else {
						z.EncFallback(yy3413)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3405[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3415 := &x.ListMeta
					yym3416 := z.EncBinary()
					_ = yym3416
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3415) {
					} else {
						z.EncFallback(yy3415)
					}
				}
			}
			if yyr3405 || yy2arr3405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3418 := z.EncBinary()
					_ = yym3418
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3419 := z.EncBinary()
					_ = yym3419
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3405 || yy2arr3405 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3420 := z.DecBinary()
	_ = yym3420
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3421 := r.ContainerType()
		if yyct3421 == codecSelferValueTypeMap1234 {
			yyl3421 := r.ReadMapStart()
			if yyl3421 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3421, d)
			}
		} else if yyct3421 == codecSelferValueTypeArray1234 {
			yyl3421 := r.ReadArrayStart()
			if yyl3421 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3421, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3422Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3422Slc
	var yyhl3422 bool = l >= 0
	for yyj3422 := 0; ; yyj3422++ {
		if yyhl3422 {
			if yyj3422 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3422Slc = r.DecodeBytes(yys3422Slc, true, true)
		yys3422 := string(yys3422Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3422 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3425 := &x.ListMeta
				yym3426 := z.DecBinary()
				_ = yym3426
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3425) {
				} else {
					z.DecFallback(yyv3425, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3427 := &x.Items
				yym3428 := z.DecBinary()
				_ = yym3428
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3427), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3422)
		} // end switch yys3422
	} // end for yyj3422
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3429 int
	var yyb3429 bool
	var yyhl3429 bool = l >= 0
	yyj3429++
	if yyhl3429 {
		yyb3429 = yyj3429 > l
	} else {
		yyb3429 = r.CheckBreak()
	}
	if yyb3429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3429++
	if yyhl3429 {
		yyb3429 = yyj3429 > l
	} else {
		yyb3429 = r.CheckBreak()
	}
	if yyb3429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3429++
	if yyhl3429 {
		yyb3429 = yyj3429 > l
	} else {
		yyb3429 = r.CheckBreak()
	}
	if yyb3429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3432 := &x.ListMeta
		yym3433 := z.DecBinary()
		_ = yym3433
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3432) {
		} else {
			z.DecFallback(yyv3432, false)
		}
	}
	yyj3429++
	if yyhl3429 {
		yyb3429 = yyj3429 > l
	} else {
		yyb3429 = r.CheckBreak()
	}
	if yyb3429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3434 := &x.Items
		yym3435 := z.DecBinary()
		_ = yym3435
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3434), d)
		}
	}
	for {
		yyj3429++
		if yyhl3429 {
			yyb3429 = yyj3429 > l
		} else {
			yyb3429 = r.CheckBreak()
		}
		if yyb3429 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3429-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3436 := z.EncBinary()
		_ = yym3436
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3437 := !z.EncBinary()
			yy2arr3437 := z.EncBasicHandle().StructToArray
			var yyq3437 [4]bool
			_, _, _ = yysep3437, yyq3437, yy2arr3437
			const yyr3437 bool = false
			yyq3437[0] = x.Kind != ""
			yyq3437[1] = x.APIVersion != ""
			yyq3437[2] = true
			var yynn3437 int
			if yyr3437 || yy2arr3437 {
				r.EncodeArrayStart(4)
			} else {
				yynn3437 = 1
				for _, b := range yyq3437 {
					if b {
						yynn3437++
					}
				}
				r.EncodeMapStart(yynn3437)
				yynn3437 = 0
			}
			if yyr3437 || yy2arr3437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3437[0] {
					yym3439 := z.EncBinary()
					_ = yym3439
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3437[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3440 := z.EncBinary()
					_ = yym3440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3437 || yy2arr3437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3437[1] {
					yym3442 := z.EncBinary()
					_ = yym3442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3437[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3443 := z.EncBinary()
					_ = yym3443
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3437 || yy2arr3437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3437[2] {
					yy3445 := &x.ObjectMeta
					yy3445.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3437[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3446 := &x.ObjectMeta
					yy3446.CodecEncodeSelf(e)
				}
			}
			if yyr3437 || yy2arr3437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3448 := &x.Target
				yy3448.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3449 := &x.Target
				yy3449.CodecEncodeSelf(e)
			}
			if yyr3437 || yy2arr3437 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3450 := z.DecBinary()
	_ = yym3450
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3451 := r.ContainerType()
		if yyct3451 == codecSelferValueTypeMap1234 {
			yyl3451 := r.ReadMapStart()
			if yyl3451 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3451, d)
			}
		} else if yyct3451 == codecSelferValueTypeArray1234 {
			yyl3451 := r.ReadArrayStart()
			if yyl3451 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3451, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3452Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3452Slc
	var yyhl3452 bool = l >= 0
	for yyj3452 := 0; ; yyj3452++ {
		if yyhl3452 {
			if yyj3452 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3452Slc = r.DecodeBytes(yys3452Slc, true, true)
		yys3452 := string(yys3452Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3452 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3455 := &x.ObjectMeta
				yyv3455.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3456 := &x.Target
				yyv3456.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3452)
		} // end switch yys3452
	} // end for yyj3452
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3457 int
	var yyb3457 bool
	var yyhl3457 bool = l >= 0
	yyj3457++
	if yyhl3457 {
		yyb3457 = yyj3457 > l
	} else {
		yyb3457 = r.CheckBreak()
	}
	if yyb3457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3457++
	if yyhl3457 {
		yyb3457 = yyj3457 > l
	} else {
		yyb3457 = r.CheckBreak()
	}
	if yyb3457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3457++
	if yyhl3457 {
		yyb3457 = yyj3457 > l
	} else {
		yyb3457 = r.CheckBreak()
	}
	if yyb3457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3460 := &x.ObjectMeta
		yyv3460.CodecDecodeSelf(d)
	}
	yyj3457++
	if yyhl3457 {
		yyb3457 = yyj3457 > l
	} else {
		yyb3457 = r.CheckBreak()
	}
	if yyb3457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3461 := &x.Target
		yyv3461.CodecDecodeSelf(d)
	}
	for {
		yyj3457++
		if yyhl3457 {
			yyb3457 = yyj3457 > l
		} else {
			yyb3457 = r.CheckBreak()
		}
		if yyb3457 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3457-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3462 := z.EncBinary()
		_ = yym3462
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3463 := !z.EncBinary()
			yy2arr3463 := z.EncBasicHandle().StructToArray
			var yyq3463 [1]bool
			_, _, _ = yysep3463, yyq3463, yy2arr3463
			const yyr3463 bool = false
			yyq3463[0] = x.UID != nil
			var yynn3463 int
			if yyr3463 || yy2arr3463 {
				r.EncodeArrayStart(1)
			} else {
				yynn3463 = 0
				for _, b := range yyq3463 {
					if b {
						yynn3463++
					}
				}
				r.EncodeMapStart(yynn3463)
				yynn3463 = 0
			}
			if yyr3463 || yy2arr3463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3463[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3465 := *x.UID
						yym3466 := z.EncBinary()
						_ = yym3466
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3465) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3465))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3463[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3467 := *x.UID
						yym3468 := z.EncBinary()
						_ = yym3468
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3467) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3467))
						}
					}
				}
			}
			if yyr3463 || yy2arr3463 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3469 := z.DecBinary()
	_ = yym3469
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3470 := r.ContainerType()
		if yyct3470 == codecSelferValueTypeMap1234 {
			yyl3470 := r.ReadMapStart()
			if yyl3470 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3470, d)
			}
		} else if yyct3470 == codecSelferValueTypeArray1234 {
			yyl3470 := r.ReadArrayStart()
			if yyl3470 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3470, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3471Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3471Slc
	var yyhl3471 bool = l >= 0
	for yyj3471 := 0; ; yyj3471++ {
		if yyhl3471 {
			if yyj3471 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3471Slc = r.DecodeBytes(yys3471Slc, true, true)
		yys3471 := string(yys3471Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3471 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3473 := z.DecBinary()
				_ = yym3473
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3471)
		} // end switch yys3471
	} // end for yyj3471
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3474 int
	var yyb3474 bool
	var yyhl3474 bool = l >= 0
	yyj3474++
	if yyhl3474 {
		yyb3474 = yyj3474 > l
	} else {
		yyb3474 = r.CheckBreak()
	}
	if yyb3474 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3476 := z.DecBinary()
		_ = yym3476
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3474++
		if yyhl3474 {
			yyb3474 = yyj3474 > l
		} else {
			yyb3474 = r.CheckBreak()
		}
		if yyb3474 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3474-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3477 := z.EncBinary()
		_ = yym3477
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3478 := !z.EncBinary()
			yy2arr3478 := z.EncBasicHandle().StructToArray
			var yyq3478 [5]bool
			_, _, _ = yysep3478, yyq3478, yy2arr3478
			const yyr3478 bool = false
			yyq3478[0] = x.Kind != ""
			yyq3478[1] = x.APIVersion != ""
			yyq3478[2] = x.GracePeriodSeconds != nil
			yyq3478[3] = x.Preconditions != nil
			yyq3478[4] = x.OrphanDependents != nil
			var yynn3478 int
			if yyr3478 || yy2arr3478 {
				r.EncodeArrayStart(5)
			} else {
				yynn3478 = 0
				for _, b := range yyq3478 {
					if b {
						yynn3478++
					}
				}
				r.EncodeMapStart(yynn3478)
				yynn3478 = 0
			}
			if yyr3478 || yy2arr3478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3478[0] {
					yym3480 := z.EncBinary()
					_ = yym3480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3478[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3481 := z.EncBinary()
					_ = yym3481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3478 || yy2arr3478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3478[1] {
					yym3483 := z.EncBinary()
					_ = yym3483
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3478[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3484 := z.EncBinary()
					_ = yym3484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3478 || yy2arr3478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3478[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3486 := *x.GracePeriodSeconds
						yym3487 := z.EncBinary()
						_ = yym3487
						if false {
						} else {
							r.EncodeInt(int64(yy3486))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3478[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3488 := *x.GracePeriodSeconds
						yym3489 := z.EncBinary()
						_ = yym3489
						if false {
						} else {
							r.EncodeInt(int64(yy3488))
						}
					}
				}
			}
			if yyr3478 || yy2arr3478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3478[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3478[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3478 || yy2arr3478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3478[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3492 := *x.OrphanDependents
						yym3493 := z.EncBinary()
						_ = yym3493
						if false {
						} else {
							r.EncodeBool(bool(yy3492))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3478[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3494 := *x.OrphanDependents
						yym3495 := z.EncBinary()
						_ = yym3495
						if false {
						} else {
							r.EncodeBool(bool(yy3494))
						}
					}
				}
			}
			if yyr3478 || yy2arr3478 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3496 := z.DecBinary()
	_ = yym3496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3497 := r.ContainerType()
		if yyct3497 == codecSelferValueTypeMap1234 {
			yyl3497 := r.ReadMapStart()
			if yyl3497 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3497, d)
			}
		} else if yyct3497 == codecSelferValueTypeArray1234 {
			yyl3497 := r.ReadArrayStart()
			if yyl3497 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3497, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3498Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3498Slc
	var yyhl3498 bool = l >= 0
	for yyj3498 := 0; ; yyj3498++ {
		if yyhl3498 {
			if yyj3498 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3498Slc = r.DecodeBytes(yys3498Slc, true, true)
		yys3498 := string(yys3498Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3498 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3502 := z.DecBinary()
				_ = yym3502
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3505 := z.DecBinary()
				_ = yym3505
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3498)
		} // end switch yys3498
	} // end for yyj3498
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3506 int
	var yyb3506 bool
	var yyhl3506 bool = l >= 0
	yyj3506++
	if yyhl3506 {
		yyb3506 = yyj3506 > l
	} else {
		yyb3506 = r.CheckBreak()
	}
	if yyb3506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3506++
	if yyhl3506 {
		yyb3506 = yyj3506 > l
	} else {
		yyb3506 = r.CheckBreak()
	}
	if yyb3506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3506++
	if yyhl3506 {
		yyb3506 = yyj3506 > l
	} else {
		yyb3506 = r.CheckBreak()
	}
	if yyb3506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3510 := z.DecBinary()
		_ = yym3510
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3506++
	if yyhl3506 {
		yyb3506 = yyj3506 > l
	} else {
		yyb3506 = r.CheckBreak()
	}
	if yyb3506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3506++
	if yyhl3506 {
		yyb3506 = yyj3506 > l
	} else {
		yyb3506 = r.CheckBreak()
	}
	if yyb3506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3513 := z.DecBinary()
		_ = yym3513
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3506++
		if yyhl3506 {
			yyb3506 = yyj3506 > l
		} else {
			yyb3506 = r.CheckBreak()
		}
		if yyb3506 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3506-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3514 := z.EncBinary()
		_ = yym3514
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3515 := !z.EncBinary()
			yy2arr3515 := z.EncBasicHandle().StructToArray
			var yyq3515 [4]bool
			_, _, _ = yysep3515, yyq3515, yy2arr3515
			const yyr3515 bool = false
			yyq3515[0] = x.Kind != ""
			yyq3515[1] = x.APIVersion != ""
			var yynn3515 int
			if yyr3515 || yy2arr3515 {
				r.EncodeArrayStart(4)
			} else {
				yynn3515 = 2
				for _, b := range yyq3515 {
					if b {
						yynn3515++
					}
				}
				r.EncodeMapStart(yynn3515)
				yynn3515 = 0
			}
			if yyr3515 || yy2arr3515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3515[0] {
					yym3517 := z.EncBinary()
					_ = yym3517
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3515[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3518 := z.EncBinary()
					_ = yym3518
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3515 || yy2arr3515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3515[1] {
					yym3520 := z.EncBinary()
					_ = yym3520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3515[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3521 := z.EncBinary()
					_ = yym3521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3515 || yy2arr3515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3523 := z.EncBinary()
				_ = yym3523
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3524 := z.EncBinary()
				_ = yym3524
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3515 || yy2arr3515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3526 := z.EncBinary()
				_ = yym3526
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3527 := z.EncBinary()
				_ = yym3527
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3515 || yy2arr3515 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3528 := z.DecBinary()
	_ = yym3528
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3529 := r.ContainerType()
		if yyct3529 == codecSelferValueTypeMap1234 {
			yyl3529 := r.ReadMapStart()
			if yyl3529 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3529, d)
			}
		} else if yyct3529 == codecSelferValueTypeArray1234 {
			yyl3529 := r.ReadArrayStart()
			if yyl3529 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3529, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3530Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3530Slc
	var yyhl3530 bool = l >= 0
	for yyj3530 := 0; ; yyj3530++ {
		if yyhl3530 {
			if yyj3530 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3530Slc = r.DecodeBytes(yys3530Slc, true, true)
		yys3530 := string(yys3530Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3530 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3530)
		} // end switch yys3530
	} // end for yyj3530
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3535 int
	var yyb3535 bool
	var yyhl3535 bool = l >= 0
	yyj3535++
	if yyhl3535 {
		yyb3535 = yyj3535 > l
	} else {
		yyb3535 = r.CheckBreak()
	}
	if yyb3535 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3535++
	if yyhl3535 {
		yyb3535 = yyj3535 > l
	} else {
		yyb3535 = r.CheckBreak()
	}
	if yyb3535 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3535++
	if yyhl3535 {
		yyb3535 = yyj3535 > l
	} else {
		yyb3535 = r.CheckBreak()
	}
	if yyb3535 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3535++
	if yyhl3535 {
		yyb3535 = yyj3535 > l
	} else {
		yyb3535 = r.CheckBreak()
	}
	if yyb3535 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3535++
		if yyhl3535 {
			yyb3535 = yyj3535 > l
		} else {
			yyb3535 = r.CheckBreak()
		}
		if yyb3535 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3535-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3540 := z.EncBinary()
		_ = yym3540
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3541 := !z.EncBinary()
			yy2arr3541 := z.EncBasicHandle().StructToArray
			var yyq3541 [7]bool
			_, _, _ = yysep3541, yyq3541, yy2arr3541
			const yyr3541 bool = false
			yyq3541[0] = x.Kind != ""
			yyq3541[1] = x.APIVersion != ""
			var yynn3541 int
			if yyr3541 || yy2arr3541 {
				r.EncodeArrayStart(7)
			} else {
				yynn3541 = 5
				for _, b := range yyq3541 {
					if b {
						yynn3541++
					}
				}
				r.EncodeMapStart(yynn3541)
				yynn3541 = 0
			}
			if yyr3541 || yy2arr3541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3541[0] {
					yym3543 := z.EncBinary()
					_ = yym3543
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3541[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3544 := z.EncBinary()
					_ = yym3544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3541 || yy2arr3541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3541[1] {
					yym3546 := z.EncBinary()
					_ = yym3546
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3541[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3547 := z.EncBinary()
					_ = yym3547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3541 || yy2arr3541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3549 := z.EncBinary()
					_ = yym3549
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3550 := z.EncBinary()
					_ = yym3550
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr3541 || yy2arr3541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3552 := z.EncBinary()
					_ = yym3552
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3553 := z.EncBinary()
					_ = yym3553
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr3541 || yy2arr3541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3555 := z.EncBinary()
				_ = yym3555
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3556 := z.EncBinary()
				_ = yym3556
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr3541 || yy2arr3541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3558 := z.EncBinary()
				_ = yym3558
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3559 := z.EncBinary()
				_ = yym3559
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr3541 || yy2arr3541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3561 := *x.TimeoutSeconds
					yym3562 := z.EncBinary()
					_ = yym3562
					if false {
					} else {
						r.EncodeInt(int64(yy3561))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3563 := *x.TimeoutSeconds
					yym3564 := z.EncBinary()
					_ = yym3564
					if false {
					} else {
						r.EncodeInt(int64(yy3563))
					}
				}
			}
			if yyr3541 || yy2arr3541 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3565 := z.DecBinary()
	_ = yym3565
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3566 := r.ContainerType()
		if yyct3566 == codecSelferValueTypeMap1234 {
			yyl3566 := r.ReadMapStart()
			if yyl3566 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3566, d)
			}
		} else if yyct3566 == codecSelferValueTypeArray1234 {
			yyl3566 := r.ReadArrayStart()
			if yyl3566 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3566, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3567Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3567Slc
	var yyhl3567 bool = l >= 0
	for yyj3567 := 0; ; yyj3567++ {
		if yyhl3567 {
			if yyj3567 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3567Slc = r.DecodeBytes(yys3567Slc, true, true)
		yys3567 := string(yys3567Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3567 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv3570 := &x.LabelSelector
				yym3571 := z.DecBinary()
				_ = yym3571
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3570) {
				} else {
					z.DecFallback(yyv3570, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv3572 := &x.FieldSelector
				yym3573 := z.DecBinary()
				_ = yym3573
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3572) {
				} else {
					z.DecFallback(yyv3572, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3577 := z.DecBinary()
				_ = yym3577
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3567)
		} // end switch yys3567
	} // end for yyj3567
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3578 int
	var yyb3578 bool
	var yyhl3578 bool = l >= 0
	yyj3578++
	if yyhl3578 {
		yyb3578 = yyj3578 > l
	} else {
		yyb3578 = r.CheckBreak()
	}
	if yyb3578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3578++
	if yyhl3578 {
		yyb3578 = yyj3578 > l
	} else {
		yyb3578 = r.CheckBreak()
	}
	if yyb3578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3578++
	if yyhl3578 {
		yyb3578 = yyj3578 > l
	} else {
		yyb3578 = r.CheckBreak()
	}
	if yyb3578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv3581 := &x.LabelSelector
		yym3582 := z.DecBinary()
		_ = yym3582
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3581) {
		} else {
			z.DecFallback(yyv3581, true)
		}
	}
	yyj3578++
	if yyhl3578 {
		yyb3578 = yyj3578 > l
	} else {
		yyb3578 = r.CheckBreak()
	}
	if yyb3578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv3583 := &x.FieldSelector
		yym3584 := z.DecBinary()
		_ = yym3584
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3583) {
		} else {
			z.DecFallback(yyv3583, true)
		}
	}
	yyj3578++
	if yyhl3578 {
		yyb3578 = yyj3578 > l
	} else {
		yyb3578 = r.CheckBreak()
	}
	if yyb3578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3578++
	if yyhl3578 {
		yyb3578 = yyj3578 > l
	} else {
		yyb3578 = r.CheckBreak()
	}
	if yyb3578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3578++
	if yyhl3578 {
		yyb3578 = yyj3578 > l
	} else {
		yyb3578 = r.CheckBreak()
	}
	if yyb3578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3588 := z.DecBinary()
		_ = yym3588
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3578++
		if yyhl3578 {
			yyb3578 = yyj3578 > l
		} else {
			yyb3578 = r.CheckBreak()
		}
		if yyb3578 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3578-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3589 := z.EncBinary()
		_ = yym3589
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3590 := !z.EncBinary()
			yy2arr3590 := z.EncBasicHandle().StructToArray
			var yyq3590 [10]bool
			_, _, _ = yysep3590, yyq3590, yy2arr3590
			const yyr3590 bool = false
			yyq3590[0] = x.Kind != ""
			yyq3590[1] = x.APIVersion != ""
			var yynn3590 int
			if yyr3590 || yy2arr3590 {
				r.EncodeArrayStart(10)
			} else {
				yynn3590 = 8
				for _, b := range yyq3590 {
					if b {
						yynn3590++
					}
				}
				r.EncodeMapStart(yynn3590)
				yynn3590 = 0
			}
			if yyr3590 || yy2arr3590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3590[0] {
					yym3592 := z.EncBinary()
					_ = yym3592
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3590[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3593 := z.EncBinary()
					_ = yym3593
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3590 || yy2arr3590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3590[1] {
					yym3595 := z.EncBinary()
					_ = yym3595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3590[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3596 := z.EncBinary()
					_ = yym3596
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3590 || yy2arr3590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3598 := z.EncBinary()
				_ = yym3598
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3599 := z.EncBinary()
				_ = yym3599
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3590 || yy2arr3590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3601 := z.EncBinary()
				_ = yym3601
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3602 := z.EncBinary()
				_ = yym3602
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr3590 || yy2arr3590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3604 := z.EncBinary()
				_ = yym3604
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3605 := z.EncBinary()
				_ = yym3605
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr3590 || yy2arr3590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3607 := *x.SinceSeconds
					yym3608 := z.EncBinary()
					_ = yym3608
					if false {
					} else {
						r.EncodeInt(int64(yy3607))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3609 := *x.SinceSeconds
					yym3610 := z.EncBinary()
					_ = yym3610
					if false {
					} else {
						r.EncodeInt(int64(yy3609))
					}
				}
			}
			if yyr3590 || yy2arr3590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3612 := z.EncBinary()
					_ = yym3612
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3612 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3612 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3613 := z.EncBinary()
					_ = yym3613
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3613 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3613 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr3590 || yy2arr3590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3615 := z.EncBinary()
				_ = yym3615
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3616 := z.EncBinary()
				_ = yym3616
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr3590 || yy2arr3590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3618 := *x.TailLines
					yym3619 := z.EncBinary()
					_ = yym3619
					if false {
					} else {
						r.EncodeInt(int64(yy3618))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3620 := *x.TailLines
					yym3621 := z.EncBinary()
					_ = yym3621
					if false {
					} else {
						r.EncodeInt(int64(yy3620))
					}
				}
			}
			if yyr3590 || yy2arr3590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3623 := *x.LimitBytes
					yym3624 := z.EncBinary()
					_ = yym3624
					if false {
					} else {
						r.EncodeInt(int64(yy3623))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3625 := *x.LimitBytes
					yym3626 := z.EncBinary()
					_ = yym3626
					if false {
					} else {
						r.EncodeInt(int64(yy3625))
					}
				}
			}
			if yyr3590 || yy2arr3590 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3627 := z.DecBinary()
	_ = yym3627
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3628 := r.ContainerType()
		if yyct3628 == codecSelferValueTypeMap1234 {
			yyl3628 := r.ReadMapStart()
			if yyl3628 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3628, d)
			}
		} else if yyct3628 == codecSelferValueTypeArray1234 {
			yyl3628 := r.ReadArrayStart()
			if yyl3628 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3628, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3629Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3629Slc
	var yyhl3629 bool = l >= 0
	for yyj3629 := 0; ; yyj3629++ {
		if yyhl3629 {
			if yyj3629 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3629Slc = r.DecodeBytes(yys3629Slc, true, true)
		yys3629 := string(yys3629Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3629 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3636 := z.DecBinary()
				_ = yym3636
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3638 := z.DecBinary()
				_ = yym3638
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3638 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3638 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3641 := z.DecBinary()
				_ = yym3641
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3643 := z.DecBinary()
				_ = yym3643
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3629)
		} // end switch yys3629
	} // end for yyj3629
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3644 int
	var yyb3644 bool
	var yyhl3644 bool = l >= 0
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3651 := z.DecBinary()
		_ = yym3651
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3653 := z.DecBinary()
		_ = yym3653
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3653 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3653 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3656 := z.DecBinary()
		_ = yym3656
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3658 := z.DecBinary()
		_ = yym3658
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3644++
		if yyhl3644 {
			yyb3644 = yyj3644 > l
		} else {
			yyb3644 = r.CheckBreak()
		}
		if yyb3644 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3644-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3659 := z.EncBinary()
		_ = yym3659
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3660 := !z.EncBinary()
			yy2arr3660 := z.EncBasicHandle().StructToArray
			var yyq3660 [7]bool
			_, _, _ = yysep3660, yyq3660, yy2arr3660
			const yyr3660 bool = false
			yyq3660[0] = x.Kind != ""
			yyq3660[1] = x.APIVersion != ""
			yyq3660[2] = x.Stdin != false
			yyq3660[3] = x.Stdout != false
			yyq3660[4] = x.Stderr != false
			yyq3660[5] = x.TTY != false
			yyq3660[6] = x.Container != ""
			var yynn3660 int
			if yyr3660 || yy2arr3660 {
				r.EncodeArrayStart(7)
			} else {
				yynn3660 = 0
				for _, b := range yyq3660 {
					if b {
						yynn3660++
					}
				}
				r.EncodeMapStart(yynn3660)
				yynn3660 = 0
			}
			if yyr3660 || yy2arr3660 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3660[0] {
					yym3662 := z.EncBinary()
					_ = yym3662
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3660[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3663 := z.EncBinary()
					_ = yym3663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3660 || yy2arr3660 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3660[1] {
					yym3665 := z.EncBinary()
					_ = yym3665
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3660[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3666 := z.EncBinary()
					_ = yym3666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3660 || yy2arr3660 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3660[2] {
					yym3668 := z.EncBinary()
					_ = yym3668
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3660[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3669 := z.EncBinary()
					_ = yym3669
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3660 || yy2arr3660 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3660[3] {
					yym3671 := z.EncBinary()
					_ = yym3671
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3660[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3672 := z.EncBinary()
					_ = yym3672
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3660 || yy2arr3660 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3660[4] {
					yym3674 := z.EncBinary()
					_ = yym3674
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3660[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3675 := z.EncBinary()
					_ = yym3675
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3660 || yy2arr3660 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3660[5] {
					yym3677 := z.EncBinary()
					_ = yym3677
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3660[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3678 := z.EncBinary()
					_ = yym3678
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3660 || yy2arr3660 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3660[6] {
					yym3680 := z.EncBinary()
					_ = yym3680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3660[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3681 := z.EncBinary()
					_ = yym3681
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3660 || yy2arr3660 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3682 := z.DecBinary()
	_ = yym3682
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3683 := r.ContainerType()
		if yyct3683 == codecSelferValueTypeMap1234 {
			yyl3683 := r.ReadMapStart()
			if yyl3683 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3683, d)
			}
		} else if yyct3683 == codecSelferValueTypeArray1234 {
			yyl3683 := r.ReadArrayStart()
			if yyl3683 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3683, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3684Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3684Slc
	var yyhl3684 bool = l >= 0
	for yyj3684 := 0; ; yyj3684++ {
		if yyhl3684 {
			if yyj3684 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3684Slc = r.DecodeBytes(yys3684Slc, true, true)
		yys3684 := string(yys3684Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3684 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3684)
		} // end switch yys3684
	} // end for yyj3684
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3692 int
	var yyb3692 bool
	var yyhl3692 bool = l >= 0
	yyj3692++
	if yyhl3692 {
		yyb3692 = yyj3692 > l
	} else {
		yyb3692 = r.CheckBreak()
	}
	if yyb3692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3692++
	if yyhl3692 {
		yyb3692 = yyj3692 > l
	} else {
		yyb3692 = r.CheckBreak()
	}
	if yyb3692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3692++
	if yyhl3692 {
		yyb3692 = yyj3692 > l
	} else {
		yyb3692 = r.CheckBreak()
	}
	if yyb3692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3692++
	if yyhl3692 {
		yyb3692 = yyj3692 > l
	} else {
		yyb3692 = r.CheckBreak()
	}
	if yyb3692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3692++
	if yyhl3692 {
		yyb3692 = yyj3692 > l
	} else {
		yyb3692 = r.CheckBreak()
	}
	if yyb3692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3692++
	if yyhl3692 {
		yyb3692 = yyj3692 > l
	} else {
		yyb3692 = r.CheckBreak()
	}
	if yyb3692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3692++
	if yyhl3692 {
		yyb3692 = yyj3692 > l
	} else {
		yyb3692 = r.CheckBreak()
	}
	if yyb3692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3692++
		if yyhl3692 {
			yyb3692 = yyj3692 > l
		} else {
			yyb3692 = r.CheckBreak()
		}
		if yyb3692 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3692-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3700 := z.EncBinary()
		_ = yym3700
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3701 := !z.EncBinary()
			yy2arr3701 := z.EncBasicHandle().StructToArray
			var yyq3701 [8]bool
			_, _, _ = yysep3701, yyq3701, yy2arr3701
			const yyr3701 bool = false
			yyq3701[0] = x.Kind != ""
			yyq3701[1] = x.APIVersion != ""
			var yynn3701 int
			if yyr3701 || yy2arr3701 {
				r.EncodeArrayStart(8)
			} else {
				yynn3701 = 6
				for _, b := range yyq3701 {
					if b {
						yynn3701++
					}
				}
				r.EncodeMapStart(yynn3701)
				yynn3701 = 0
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3701[0] {
					yym3703 := z.EncBinary()
					_ = yym3703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3701[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3704 := z.EncBinary()
					_ = yym3704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3701[1] {
					yym3706 := z.EncBinary()
					_ = yym3706
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3701[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3707 := z.EncBinary()
					_ = yym3707
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3709 := z.EncBinary()
				_ = yym3709
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3710 := z.EncBinary()
				_ = yym3710
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3712 := z.EncBinary()
				_ = yym3712
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3713 := z.EncBinary()
				_ = yym3713
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3715 := z.EncBinary()
				_ = yym3715
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3716 := z.EncBinary()
				_ = yym3716
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3718 := z.EncBinary()
				_ = yym3718
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3719 := z.EncBinary()
				_ = yym3719
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3721 := z.EncBinary()
				_ = yym3721
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3722 := z.EncBinary()
				_ = yym3722
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3724 := z.EncBinary()
					_ = yym3724
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3725 := z.EncBinary()
					_ = yym3725
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3701 || yy2arr3701 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3726 := z.DecBinary()
	_ = yym3726
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3727 := r.ContainerType()
		if yyct3727 == codecSelferValueTypeMap1234 {
			yyl3727 := r.ReadMapStart()
			if yyl3727 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3727, d)
			}
		} else if yyct3727 == codecSelferValueTypeArray1234 {
			yyl3727 := r.ReadArrayStart()
			if yyl3727 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3727, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3728Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3728Slc
	var yyhl3728 bool = l >= 0
	for yyj3728 := 0; ; yyj3728++ {
		if yyhl3728 {
			if yyj3728 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3728Slc = r.DecodeBytes(yys3728Slc, true, true)
		yys3728 := string(yys3728Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3728 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3736 := &x.Command
				yym3737 := z.DecBinary()
				_ = yym3737
				if false {
				} else {
					z.F.DecSliceStringX(yyv3736, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3728)
		} // end switch yys3728
	} // end for yyj3728
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3738 int
	var yyb3738 bool
	var yyhl3738 bool = l >= 0
	yyj3738++
	if yyhl3738 {
		yyb3738 = yyj3738 > l
	} else {
		yyb3738 = r.CheckBreak()
	}
	if yyb3738 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3738++
	if yyhl3738 {
		yyb3738 = yyj3738 > l
	} else {
		yyb3738 = r.CheckBreak()
	}
	if yyb3738 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3738++
	if yyhl3738 {
		yyb3738 = yyj3738 > l
	} else {
		yyb3738 = r.CheckBreak()
	}
	if yyb3738 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3738++
	if yyhl3738 {
		yyb3738 = yyj3738 > l
	} else {
		yyb3738 = r.CheckBreak()
	}
	if yyb3738 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3738++
	if yyhl3738 {
		yyb3738 = yyj3738 > l
	} else {
		yyb3738 = r.CheckBreak()
	}
	if yyb3738 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3738++
	if yyhl3738 {
		yyb3738 = yyj3738 > l
	} else {
		yyb3738 = r.CheckBreak()
	}
	if yyb3738 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3738++
	if yyhl3738 {
		yyb3738 = yyj3738 > l
	} else {
		yyb3738 = r.CheckBreak()
	}
	if yyb3738 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3738++
	if yyhl3738 {
		yyb3738 = yyj3738 > l
	} else {
		yyb3738 = r.CheckBreak()
	}
	if yyb3738 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3746 := &x.Command
		yym3747 := z.DecBinary()
		_ = yym3747
		if false {
		} else {
			z.F.DecSliceStringX(yyv3746, false, d)
		}
	}
	for {
		yyj3738++
		if yyhl3738 {
			yyb3738 = yyj3738 > l
		} else {
			yyb3738 = r.CheckBreak()
		}
		if yyb3738 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3738-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3748 := z.EncBinary()
		_ = yym3748
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3749 := !z.EncBinary()
			yy2arr3749 := z.EncBasicHandle().StructToArray
			var yyq3749 [3]bool
			_, _, _ = yysep3749, yyq3749, yy2arr3749
			const yyr3749 bool = false
			yyq3749[0] = x.Kind != ""
			yyq3749[1] = x.APIVersion != ""
			var yynn3749 int
			if yyr3749 || yy2arr3749 {
				r.EncodeArrayStart(3)
			} else {
				yynn3749 = 1
				for _, b := range yyq3749 {
					if b {
						yynn3749++
					}
				}
				r.EncodeMapStart(yynn3749)
				yynn3749 = 0
			}
			if yyr3749 || yy2arr3749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3749[0] {
					yym3751 := z.EncBinary()
					_ = yym3751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3749[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3752 := z.EncBinary()
					_ = yym3752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3749 || yy2arr3749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3749[1] {
					yym3754 := z.EncBinary()
					_ = yym3754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3749[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3755 := z.EncBinary()
					_ = yym3755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3749 || yy2arr3749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3757 := z.EncBinary()
				_ = yym3757
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3758 := z.EncBinary()
				_ = yym3758
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3749 || yy2arr3749 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3759 := z.DecBinary()
	_ = yym3759
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3760 := r.ContainerType()
		if yyct3760 == codecSelferValueTypeMap1234 {
			yyl3760 := r.ReadMapStart()
			if yyl3760 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3760, d)
			}
		} else if yyct3760 == codecSelferValueTypeArray1234 {
			yyl3760 := r.ReadArrayStart()
			if yyl3760 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3760, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3761Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3761Slc
	var yyhl3761 bool = l >= 0
	for yyj3761 := 0; ; yyj3761++ {
		if yyhl3761 {
			if yyj3761 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3761Slc = r.DecodeBytes(yys3761Slc, true, true)
		yys3761 := string(yys3761Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3761 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3761)
		} // end switch yys3761
	} // end for yyj3761
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3765 int
	var yyb3765 bool
	var yyhl3765 bool = l >= 0
	yyj3765++
	if yyhl3765 {
		yyb3765 = yyj3765 > l
	} else {
		yyb3765 = r.CheckBreak()
	}
	if yyb3765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3765++
	if yyhl3765 {
		yyb3765 = yyj3765 > l
	} else {
		yyb3765 = r.CheckBreak()
	}
	if yyb3765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3765++
	if yyhl3765 {
		yyb3765 = yyj3765 > l
	} else {
		yyb3765 = r.CheckBreak()
	}
	if yyb3765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3765++
		if yyhl3765 {
			yyb3765 = yyj3765 > l
		} else {
			yyb3765 = r.CheckBreak()
		}
		if yyb3765 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3765-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3769 := z.EncBinary()
		_ = yym3769
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3770 := !z.EncBinary()
			yy2arr3770 := z.EncBasicHandle().StructToArray
			var yyq3770 [3]bool
			_, _, _ = yysep3770, yyq3770, yy2arr3770
			const yyr3770 bool = false
			yyq3770[0] = x.Kind != ""
			yyq3770[1] = x.APIVersion != ""
			var yynn3770 int
			if yyr3770 || yy2arr3770 {
				r.EncodeArrayStart(3)
			} else {
				yynn3770 = 1
				for _, b := range yyq3770 {
					if b {
						yynn3770++
					}
				}
				r.EncodeMapStart(yynn3770)
				yynn3770 = 0
			}
			if yyr3770 || yy2arr3770 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3770[0] {
					yym3772 := z.EncBinary()
					_ = yym3772
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3770[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3773 := z.EncBinary()
					_ = yym3773
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3770 || yy2arr3770 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3770[1] {
					yym3775 := z.EncBinary()
					_ = yym3775
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3770[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3776 := z.EncBinary()
					_ = yym3776
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3770 || yy2arr3770 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3778 := z.EncBinary()
				_ = yym3778
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3779 := z.EncBinary()
				_ = yym3779
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3770 || yy2arr3770 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3780 := z.DecBinary()
	_ = yym3780
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3781 := r.ContainerType()
		if yyct3781 == codecSelferValueTypeMap1234 {
			yyl3781 := r.ReadMapStart()
			if yyl3781 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3781, d)
			}
		} else if yyct3781 == codecSelferValueTypeArray1234 {
			yyl3781 := r.ReadArrayStart()
			if yyl3781 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3781, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3782Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3782Slc
	var yyhl3782 bool = l >= 0
	for yyj3782 := 0; ; yyj3782++ {
		if yyhl3782 {
			if yyj3782 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3782Slc = r.DecodeBytes(yys3782Slc, true, true)
		yys3782 := string(yys3782Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3782 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3782)
		} // end switch yys3782
	} // end for yyj3782
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3786 int
	var yyb3786 bool
	var yyhl3786 bool = l >= 0
	yyj3786++
	if yyhl3786 {
		yyb3786 = yyj3786 > l
	} else {
		yyb3786 = r.CheckBreak()
	}
	if yyb3786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3786++
	if yyhl3786 {
		yyb3786 = yyj3786 > l
	} else {
		yyb3786 = r.CheckBreak()
	}
	if yyb3786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3786++
	if yyhl3786 {
		yyb3786 = yyj3786 > l
	} else {
		yyb3786 = r.CheckBreak()
	}
	if yyb3786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3786++
		if yyhl3786 {
			yyb3786 = yyj3786 > l
		} else {
			yyb3786 = r.CheckBreak()
		}
		if yyb3786 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3786-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3790 := z.EncBinary()
		_ = yym3790
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3791 := !z.EncBinary()
			yy2arr3791 := z.EncBasicHandle().StructToArray
			var yyq3791 [3]bool
			_, _, _ = yysep3791, yyq3791, yy2arr3791
			const yyr3791 bool = false
			yyq3791[0] = x.Kind != ""
			yyq3791[1] = x.APIVersion != ""
			var yynn3791 int
			if yyr3791 || yy2arr3791 {
				r.EncodeArrayStart(3)
			} else {
				yynn3791 = 1
				for _, b := range yyq3791 {
					if b {
						yynn3791++
					}
				}
				r.EncodeMapStart(yynn3791)
				yynn3791 = 0
			}
			if yyr3791 || yy2arr3791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3791[0] {
					yym3793 := z.EncBinary()
					_ = yym3793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3791[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3794 := z.EncBinary()
					_ = yym3794
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3791 || yy2arr3791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3791[1] {
					yym3796 := z.EncBinary()
					_ = yym3796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3791[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3797 := z.EncBinary()
					_ = yym3797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3791 || yy2arr3791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3799 := z.EncBinary()
				_ = yym3799
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3800 := z.EncBinary()
				_ = yym3800
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3791 || yy2arr3791 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3801 := z.DecBinary()
	_ = yym3801
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3802 := r.ContainerType()
		if yyct3802 == codecSelferValueTypeMap1234 {
			yyl3802 := r.ReadMapStart()
			if yyl3802 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3802, d)
			}
		} else if yyct3802 == codecSelferValueTypeArray1234 {
			yyl3802 := r.ReadArrayStart()
			if yyl3802 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3802, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3803Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3803Slc
	var yyhl3803 bool = l >= 0
	for yyj3803 := 0; ; yyj3803++ {
		if yyhl3803 {
			if yyj3803 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3803Slc = r.DecodeBytes(yys3803Slc, true, true)
		yys3803 := string(yys3803Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3803 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3803)
		} // end switch yys3803
	} // end for yyj3803
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3807 int
	var yyb3807 bool
	var yyhl3807 bool = l >= 0
	yyj3807++
	if yyhl3807 {
		yyb3807 = yyj3807 > l
	} else {
		yyb3807 = r.CheckBreak()
	}
	if yyb3807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3807++
	if yyhl3807 {
		yyb3807 = yyj3807 > l
	} else {
		yyb3807 = r.CheckBreak()
	}
	if yyb3807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3807++
	if yyhl3807 {
		yyb3807 = yyj3807 > l
	} else {
		yyb3807 = r.CheckBreak()
	}
	if yyb3807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3807++
		if yyhl3807 {
			yyb3807 = yyj3807 > l
		} else {
			yyb3807 = r.CheckBreak()
		}
		if yyb3807 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3807-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3811 := z.EncBinary()
		_ = yym3811
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3812 := !z.EncBinary()
			yy2arr3812 := z.EncBasicHandle().StructToArray
			var yyq3812 [5]bool
			_, _, _ = yysep3812, yyq3812, yy2arr3812
			const yyr3812 bool = false
			yyq3812[4] = x.Controller != nil
			var yynn3812 int
			if yyr3812 || yy2arr3812 {
				r.EncodeArrayStart(5)
			} else {
				yynn3812 = 4
				for _, b := range yyq3812 {
					if b {
						yynn3812++
					}
				}
				r.EncodeMapStart(yynn3812)
				yynn3812 = 0
			}
			if yyr3812 || yy2arr3812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3814 := z.EncBinary()
				_ = yym3814
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3815 := z.EncBinary()
				_ = yym3815
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3812 || yy2arr3812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3817 := z.EncBinary()
				_ = yym3817
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3818 := z.EncBinary()
				_ = yym3818
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3812 || yy2arr3812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3820 := z.EncBinary()
				_ = yym3820
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3821 := z.EncBinary()
				_ = yym3821
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3812 || yy2arr3812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3823 := z.EncBinary()
				_ = yym3823
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3824 := z.EncBinary()
				_ = yym3824
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3812 || yy2arr3812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3812[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3826 := *x.Controller
						yym3827 := z.EncBinary()
						_ = yym3827
						if false {
						} else {
							r.EncodeBool(bool(yy3826))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3812[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3828 := *x.Controller
						yym3829 := z.EncBinary()
						_ = yym3829
						if false {
						} else {
							r.EncodeBool(bool(yy3828))
						}
					}
				}
			}
			if yyr3812 || yy2arr3812 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3830 := z.DecBinary()
	_ = yym3830
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3831 := r.ContainerType()
		if yyct3831 == codecSelferValueTypeMap1234 {
			yyl3831 := r.ReadMapStart()
			if yyl3831 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3831, d)
			}
		} else if yyct3831 == codecSelferValueTypeArray1234 {
			yyl3831 := r.ReadArrayStart()
			if yyl3831 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3831, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3832Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3832Slc
	var yyhl3832 bool = l >= 0
	for yyj3832 := 0; ; yyj3832++ {
		if yyhl3832 {
			if yyj3832 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3832Slc = r.DecodeBytes(yys3832Slc, true, true)
		yys3832 := string(yys3832Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3832 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3838 := z.DecBinary()
				_ = yym3838
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3832)
		} // end switch yys3832
	} // end for yyj3832
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3839 int
	var yyb3839 bool
	var yyhl3839 bool = l >= 0
	yyj3839++
	if yyhl3839 {
		yyb3839 = yyj3839 > l
	} else {
		yyb3839 = r.CheckBreak()
	}
	if yyb3839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3839++
	if yyhl3839 {
		yyb3839 = yyj3839 > l
	} else {
		yyb3839 = r.CheckBreak()
	}
	if yyb3839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3839++
	if yyhl3839 {
		yyb3839 = yyj3839 > l
	} else {
		yyb3839 = r.CheckBreak()
	}
	if yyb3839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3839++
	if yyhl3839 {
		yyb3839 = yyj3839 > l
	} else {
		yyb3839 = r.CheckBreak()
	}
	if yyb3839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3839++
	if yyhl3839 {
		yyb3839 = yyj3839 > l
	} else {
		yyb3839 = r.CheckBreak()
	}
	if yyb3839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3845 := z.DecBinary()
		_ = yym3845
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3839++
		if yyhl3839 {
			yyb3839 = yyj3839 > l
		} else {
			yyb3839 = r.CheckBreak()
		}
		if yyb3839 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3839-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3846 := z.EncBinary()
		_ = yym3846
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3847 := !z.EncBinary()
			yy2arr3847 := z.EncBasicHandle().StructToArray
			var yyq3847 [7]bool
			_, _, _ = yysep3847, yyq3847, yy2arr3847
			const yyr3847 bool = false
			yyq3847[0] = x.Kind != ""
			yyq3847[1] = x.Namespace != ""
			yyq3847[2] = x.Name != ""
			yyq3847[3] = x.UID != ""
			yyq3847[4] = x.APIVersion != ""
			yyq3847[5] = x.ResourceVersion != ""
			yyq3847[6] = x.FieldPath != ""
			var yynn3847 int
			if yyr3847 || yy2arr3847 {
				r.EncodeArrayStart(7)
			} else {
				yynn3847 = 0
				for _, b := range yyq3847 {
					if b {
						yynn3847++
					}
				}
				r.EncodeMapStart(yynn3847)
				yynn3847 = 0
			}
			if yyr3847 || yy2arr3847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3847[0] {
					yym3849 := z.EncBinary()
					_ = yym3849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3847[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3850 := z.EncBinary()
					_ = yym3850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3847 || yy2arr3847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3847[1] {
					yym3852 := z.EncBinary()
					_ = yym3852
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3847[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3853 := z.EncBinary()
					_ = yym3853
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3847 || yy2arr3847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3847[2] {
					yym3855 := z.EncBinary()
					_ = yym3855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3847[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3856 := z.EncBinary()
					_ = yym3856
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3847 || yy2arr3847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3847[3] {
					yym3858 := z.EncBinary()
					_ = yym3858
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3847[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3859 := z.EncBinary()
					_ = yym3859
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3847 || yy2arr3847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3847[4] {
					yym3861 := z.EncBinary()
					_ = yym3861
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3847[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3862 := z.EncBinary()
					_ = yym3862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3847 || yy2arr3847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3847[5] {
					yym3864 := z.EncBinary()
					_ = yym3864
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3847[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3865 := z.EncBinary()
					_ = yym3865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3847 || yy2arr3847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3847[6] {
					yym3867 := z.EncBinary()
					_ = yym3867
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3847[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3868 := z.EncBinary()
					_ = yym3868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3847 || yy2arr3847 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3869 := z.DecBinary()
	_ = yym3869
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3870 := r.ContainerType()
		if yyct3870 == codecSelferValueTypeMap1234 {
			yyl3870 := r.ReadMapStart()
			if yyl3870 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3870, d)
			}
		} else if yyct3870 == codecSelferValueTypeArray1234 {
			yyl3870 := r.ReadArrayStart()
			if yyl3870 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3870, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3871Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3871Slc
	var yyhl3871 bool = l >= 0
	for yyj3871 := 0; ; yyj3871++ {
		if yyhl3871 {
			if yyj3871 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3871Slc = r.DecodeBytes(yys3871Slc, true, true)
		yys3871 := string(yys3871Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3871 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3871)
		} // end switch yys3871
	} // end for yyj3871
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3879 int
	var yyb3879 bool
	var yyhl3879 bool = l >= 0
	yyj3879++
	if yyhl3879 {
		yyb3879 = yyj3879 > l
	} else {
		yyb3879 = r.CheckBreak()
	}
	if yyb3879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3879++
	if yyhl3879 {
		yyb3879 = yyj3879 > l
	} else {
		yyb3879 = r.CheckBreak()
	}
	if yyb3879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3879++
	if yyhl3879 {
		yyb3879 = yyj3879 > l
	} else {
		yyb3879 = r.CheckBreak()
	}
	if yyb3879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3879++
	if yyhl3879 {
		yyb3879 = yyj3879 > l
	} else {
		yyb3879 = r.CheckBreak()
	}
	if yyb3879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3879++
	if yyhl3879 {
		yyb3879 = yyj3879 > l
	} else {
		yyb3879 = r.CheckBreak()
	}
	if yyb3879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3879++
	if yyhl3879 {
		yyb3879 = yyj3879 > l
	} else {
		yyb3879 = r.CheckBreak()
	}
	if yyb3879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3879++
	if yyhl3879 {
		yyb3879 = yyj3879 > l
	} else {
		yyb3879 = r.CheckBreak()
	}
	if yyb3879 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3879++
		if yyhl3879 {
			yyb3879 = yyj3879 > l
		} else {
			yyb3879 = r.CheckBreak()
		}
		if yyb3879 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3879-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3887 := z.EncBinary()
		_ = yym3887
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3888 := !z.EncBinary()
			yy2arr3888 := z.EncBasicHandle().StructToArray
			var yyq3888 [1]bool
			_, _, _ = yysep3888, yyq3888, yy2arr3888
			const yyr3888 bool = false
			var yynn3888 int
			if yyr3888 || yy2arr3888 {
				r.EncodeArrayStart(1)
			} else {
				yynn3888 = 1
				for _, b := range yyq3888 {
					if b {
						yynn3888++
					}
				}
				r.EncodeMapStart(yynn3888)
				yynn3888 = 0
			}
			if yyr3888 || yy2arr3888 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3890 := z.EncBinary()
				_ = yym3890
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3891 := z.EncBinary()
				_ = yym3891
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3888 || yy2arr3888 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3892 := z.DecBinary()
	_ = yym3892
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3893 := r.ContainerType()
		if yyct3893 == codecSelferValueTypeMap1234 {
			yyl3893 := r.ReadMapStart()
			if yyl3893 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3893, d)
			}
		} else if yyct3893 == codecSelferValueTypeArray1234 {
			yyl3893 := r.ReadArrayStart()
			if yyl3893 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3893, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3894Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3894Slc
	var yyhl3894 bool = l >= 0
	for yyj3894 := 0; ; yyj3894++ {
		if yyhl3894 {
			if yyj3894 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3894Slc = r.DecodeBytes(yys3894Slc, true, true)
		yys3894 := string(yys3894Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3894 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3894)
		} // end switch yys3894
	} // end for yyj3894
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3896 int
	var yyb3896 bool
	var yyhl3896 bool = l >= 0
	yyj3896++
	if yyhl3896 {
		yyb3896 = yyj3896 > l
	} else {
		yyb3896 = r.CheckBreak()
	}
	if yyb3896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3896++
		if yyhl3896 {
			yyb3896 = yyj3896 > l
		} else {
			yyb3896 = r.CheckBreak()
		}
		if yyb3896 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3896-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3898 := z.EncBinary()
		_ = yym3898
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3899 := !z.EncBinary()
			yy2arr3899 := z.EncBasicHandle().StructToArray
			var yyq3899 [3]bool
			_, _, _ = yysep3899, yyq3899, yy2arr3899
			const yyr3899 bool = false
			yyq3899[0] = x.Kind != ""
			yyq3899[1] = x.APIVersion != ""
			yyq3899[2] = true
			var yynn3899 int
			if yyr3899 || yy2arr3899 {
				r.EncodeArrayStart(3)
			} else {
				yynn3899 = 0
				for _, b := range yyq3899 {
					if b {
						yynn3899++
					}
				}
				r.EncodeMapStart(yynn3899)
				yynn3899 = 0
			}
			if yyr3899 || yy2arr3899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3899[0] {
					yym3901 := z.EncBinary()
					_ = yym3901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3899[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3902 := z.EncBinary()
					_ = yym3902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3899 || yy2arr3899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3899[1] {
					yym3904 := z.EncBinary()
					_ = yym3904
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3899[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3905 := z.EncBinary()
					_ = yym3905
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3899 || yy2arr3899 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3899[2] {
					yy3907 := &x.Reference
					yy3907.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3899[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3908 := &x.Reference
					yy3908.CodecEncodeSelf(e)
				}
			}
			if yyr3899 || yy2arr3899 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3909 := z.DecBinary()
	_ = yym3909
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3910 := r.ContainerType()
		if yyct3910 == codecSelferValueTypeMap1234 {
			yyl3910 := r.ReadMapStart()
			if yyl3910 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3910, d)
			}
		} else if yyct3910 == codecSelferValueTypeArray1234 {
			yyl3910 := r.ReadArrayStart()
			if yyl3910 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3910, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3911Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3911Slc
	var yyhl3911 bool = l >= 0
	for yyj3911 := 0; ; yyj3911++ {
		if yyhl3911 {
			if yyj3911 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3911Slc = r.DecodeBytes(yys3911Slc, true, true)
		yys3911 := string(yys3911Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3911 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3914 := &x.Reference
				yyv3914.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3911)
		} // end switch yys3911
	} // end for yyj3911
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3915 int
	var yyb3915 bool
	var yyhl3915 bool = l >= 0
	yyj3915++
	if yyhl3915 {
		yyb3915 = yyj3915 > l
	} else {
		yyb3915 = r.CheckBreak()
	}
	if yyb3915 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3915++
	if yyhl3915 {
		yyb3915 = yyj3915 > l
	} else {
		yyb3915 = r.CheckBreak()
	}
	if yyb3915 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3915++
	if yyhl3915 {
		yyb3915 = yyj3915 > l
	} else {
		yyb3915 = r.CheckBreak()
	}
	if yyb3915 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3918 := &x.Reference
		yyv3918.CodecDecodeSelf(d)
	}
	for {
		yyj3915++
		if yyhl3915 {
			yyb3915 = yyj3915 > l
		} else {
			yyb3915 = r.CheckBreak()
		}
		if yyb3915 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3915-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3919 := z.EncBinary()
		_ = yym3919
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3920 := !z.EncBinary()
			yy2arr3920 := z.EncBasicHandle().StructToArray
			var yyq3920 [2]bool
			_, _, _ = yysep3920, yyq3920, yy2arr3920
			const yyr3920 bool = false
			yyq3920[0] = x.Component != ""
			yyq3920[1] = x.Host != ""
			var yynn3920 int
			if yyr3920 || yy2arr3920 {
				r.EncodeArrayStart(2)
			} else {
				yynn3920 = 0
				for _, b := range yyq3920 {
					if b {
						yynn3920++
					}
				}
				r.EncodeMapStart(yynn3920)
				yynn3920 = 0
			}
			if yyr3920 || yy2arr3920 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3920[0] {
					yym3922 := z.EncBinary()
					_ = yym3922
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3920[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3923 := z.EncBinary()
					_ = yym3923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3920 || yy2arr3920 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3920[1] {
					yym3925 := z.EncBinary()
					_ = yym3925
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3920[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3926 := z.EncBinary()
					_ = yym3926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3920 || yy2arr3920 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3927 := z.DecBinary()
	_ = yym3927
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3928 := r.ContainerType()
		if yyct3928 == codecSelferValueTypeMap1234 {
			yyl3928 := r.ReadMapStart()
			if yyl3928 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3928, d)
			}
		} else if yyct3928 == codecSelferValueTypeArray1234 {
			yyl3928 := r.ReadArrayStart()
			if yyl3928 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3928, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3929Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3929Slc
	var yyhl3929 bool = l >= 0
	for yyj3929 := 0; ; yyj3929++ {
		if yyhl3929 {
			if yyj3929 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3929Slc = r.DecodeBytes(yys3929Slc, true, true)
		yys3929 := string(yys3929Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3929 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3929)
		} // end switch yys3929
	} // end for yyj3929
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3932 int
	var yyb3932 bool
	var yyhl3932 bool = l >= 0
	yyj3932++
	if yyhl3932 {
		yyb3932 = yyj3932 > l
	} else {
		yyb3932 = r.CheckBreak()
	}
	if yyb3932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3932++
	if yyhl3932 {
		yyb3932 = yyj3932 > l
	} else {
		yyb3932 = r.CheckBreak()
	}
	if yyb3932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3932++
		if yyhl3932 {
			yyb3932 = yyj3932 > l
		} else {
			yyb3932 = r.CheckBreak()
		}
		if yyb3932 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3932-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3935 := z.EncBinary()
		_ = yym3935
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3936 := !z.EncBinary()
			yy2arr3936 := z.EncBasicHandle().StructToArray
			var yyq3936 [11]bool
			_, _, _ = yysep3936, yyq3936, yy2arr3936
			const yyr3936 bool = false
			yyq3936[0] = x.Kind != ""
			yyq3936[1] = x.APIVersion != ""
			yyq3936[2] = true
			yyq3936[3] = true
			yyq3936[4] = x.Reason != ""
			yyq3936[5] = x.Message != ""
			yyq3936[6] = true
			yyq3936[7] = true
			yyq3936[8] = true
			yyq3936[9] = x.Count != 0
			yyq3936[10] = x.Type != ""
			var yynn3936 int
			if yyr3936 || yy2arr3936 {
				r.EncodeArrayStart(11)
			} else {
				yynn3936 = 0
				for _, b := range yyq3936 {
					if b {
						yynn3936++
					}
				}
				r.EncodeMapStart(yynn3936)
				yynn3936 = 0
			}
			if yyr3936 || yy2arr3936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3936[0] {
					yym3938 := z.EncBinary()
					_ = yym3938
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3936[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3939 := z.EncBinary()
					_ = yym3939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3936 || yy2arr3936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3936[1] {
					yym3941 := z.EncBinary()
					_ = yym3941
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3936[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3942 := z.EncBinary()
					_ = yym3942
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3936 || yy2arr3936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3936[2] {
					yy3944 := &x.ObjectMeta
					yy3944.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3936[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3945 := &x.ObjectMeta
					yy3945.CodecEncodeSelf(e)
				}
			}
			if yyr3936 || yy2arr3936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3936[3] {
					yy3947 := &x.InvolvedObject
					yy3947.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3936[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3948 := &x.InvolvedObject
					yy3948.CodecEncodeSelf(e)
				}
			}
			if yyr3936 || yy2arr3936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3936[4] {
					yym3950 := z.EncBinary()
					_ = yym3950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3936[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3951 := z.EncBinary()
					_ = yym3951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3936 || yy2arr3936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3936[5] {
					yym3953 := z.EncBinary()
					_ = yym3953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3936[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3954 := z.EncBinary()
					_ = yym3954
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3936 || yy2arr3936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3936[6] {
					yy3956 := &x.Source
					yy3956.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3936[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3957 := &x.Source
					yy3957.CodecEncodeSelf(e)
				}
			}
			if yyr3936 || yy2arr3936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3936[7] {
					yy3959 := &x.FirstTimestamp
					yym3960 := z.EncBinary()
					_ = yym3960
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3959) {
					} else if yym3960 {
						z.EncBinaryMarshal(yy3959)
					} else if !yym3960 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3959)
					} else {
						z.EncFallback(yy3959)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3936[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3961 := &x.FirstTimestamp
					yym3962 := z.EncBinary()
					_ = yym3962
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3961) {
					} else if yym3962 {
						z.EncBinaryMarshal(yy3961)
					} else if !yym3962 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3961)
					} else {
						z.EncFallback(yy3961)
					}
				}
			}
			if yyr3936 || yy2arr3936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3936[8] {
					yy3964 := &x.LastTimestamp
					yym3965 := z.EncBinary()
					_ = yym3965
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3964) {
					} else if yym3965 {
						z.EncBinaryMarshal(yy3964)
					} else if !yym3965 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3964)
					} else {
						z.EncFallback(yy3964)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3936[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3966 := &x.LastTimestamp
					yym3967 := z.EncBinary()
					_ = yym3967
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3966) {
					} else if yym3967 {
						z.EncBinaryMarshal(yy3966)
					} else if !yym3967 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3966)
					} else {
						z.EncFallback(yy3966)
					}
				}
			}
			if yyr3936 || yy2arr3936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3936[9] {
					yym3969 := z.EncBinary()
					_ = yym3969
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3936[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3970 := z.EncBinary()
					_ = yym3970
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3936 || yy2arr3936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3936[10] {
					yym3972 := z.EncBinary()
					_ = yym3972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3936[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3973 := z.EncBinary()
					_ = yym3973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3936 || yy2arr3936 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3974 := z.DecBinary()
	_ = yym3974
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3975 := r.ContainerType()
		if yyct3975 == codecSelferValueTypeMap1234 {
			yyl3975 := r.ReadMapStart()
			if yyl3975 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3975, d)
			}
		} else if yyct3975 == codecSelferValueTypeArray1234 {
			yyl3975 := r.ReadArrayStart()
			if yyl3975 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3975, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3976Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3976Slc
	var yyhl3976 bool = l >= 0
	for yyj3976 := 0; ; yyj3976++ {
		if yyhl3976 {
			if yyj3976 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3976Slc = r.DecodeBytes(yys3976Slc, true, true)
		yys3976 := string(yys3976Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3976 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3979 := &x.ObjectMeta
				yyv3979.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3980 := &x.InvolvedObject
				yyv3980.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3983 := &x.Source
				yyv3983.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3984 := &x.FirstTimestamp
				yym3985 := z.DecBinary()
				_ = yym3985
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3984) {
				} else if yym3985 {
					z.DecBinaryUnmarshal(yyv3984)
				} else if !yym3985 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3984)
				} else {
					z.DecFallback(yyv3984, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3986 := &x.LastTimestamp
				yym3987 := z.DecBinary()
				_ = yym3987
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3986) {
				} else if yym3987 {
					z.DecBinaryUnmarshal(yyv3986)
				} else if !yym3987 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3986)
				} else {
					z.DecFallback(yyv3986, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3976)
		} // end switch yys3976
	} // end for yyj3976
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3990 int
	var yyb3990 bool
	var yyhl3990 bool = l >= 0
	yyj3990++
	if yyhl3990 {
		yyb3990 = yyj3990 > l
	} else {
		yyb3990 = r.CheckBreak()
	}
	if yyb3990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3990++
	if yyhl3990 {
		yyb3990 = yyj3990 > l
	} else {
		yyb3990 = r.CheckBreak()
	}
	if yyb3990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3990++
	if yyhl3990 {
		yyb3990 = yyj3990 > l
	} else {
		yyb3990 = r.CheckBreak()
	}
	if yyb3990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3993 := &x.ObjectMeta
		yyv3993.CodecDecodeSelf(d)
	}
	yyj3990++
	if yyhl3990 {
		yyb3990 = yyj3990 > l
	} else {
		yyb3990 = r.CheckBreak()
	}
	if yyb3990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3994 := &x.InvolvedObject
		yyv3994.CodecDecodeSelf(d)
	}
	yyj3990++
	if yyhl3990 {
		yyb3990 = yyj3990 > l
	} else {
		yyb3990 = r.CheckBreak()
	}
	if yyb3990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3990++
	if yyhl3990 {
		yyb3990 = yyj3990 > l
	} else {
		yyb3990 = r.CheckBreak()
	}
	if yyb3990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3990++
	if yyhl3990 {
		yyb3990 = yyj3990 > l
	} else {
		yyb3990 = r.CheckBreak()
	}
	if yyb3990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3997 := &x.Source
		yyv3997.CodecDecodeSelf(d)
	}
	yyj3990++
	if yyhl3990 {
		yyb3990 = yyj3990 > l
	} else {
		yyb3990 = r.CheckBreak()
	}
	if yyb3990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3998 := &x.FirstTimestamp
		yym3999 := z.DecBinary()
		_ = yym3999
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3998) {
		} else if yym3999 {
			z.DecBinaryUnmarshal(yyv3998)
		} else if !yym3999 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3998)
		} else {
			z.DecFallback(yyv3998, false)
		}
	}
	yyj3990++
	if yyhl3990 {
		yyb3990 = yyj3990 > l
	} else {
		yyb3990 = r.CheckBreak()
	}
	if yyb3990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv4000 := &x.LastTimestamp
		yym4001 := z.DecBinary()
		_ = yym4001
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4000) {
		} else if yym4001 {
			z.DecBinaryUnmarshal(yyv4000)
		} else if !yym4001 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv4000)
		} else {
			z.DecFallback(yyv4000, false)
		}
	}
	yyj3990++
	if yyhl3990 {
		yyb3990 = yyj3990 > l
	} else {
		yyb3990 = r.CheckBreak()
	}
	if yyb3990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3990++
	if yyhl3990 {
		yyb3990 = yyj3990 > l
	} else {
		yyb3990 = r.CheckBreak()
	}
	if yyb3990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3990++
		if yyhl3990 {
			yyb3990 = yyj3990 > l
		} else {
			yyb3990 = r.CheckBreak()
		}
		if yyb3990 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3990-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4004 := z.EncBinary()
		_ = yym4004
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4005 := !z.EncBinary()
			yy2arr4005 := z.EncBasicHandle().StructToArray
			var yyq4005 [4]bool
			_, _, _ = yysep4005, yyq4005, yy2arr4005
			const yyr4005 bool = false
			yyq4005[0] = x.Kind != ""
			yyq4005[1] = x.APIVersion != ""
			yyq4005[2] = true
			var yynn4005 int
			if yyr4005 || yy2arr4005 {
				r.EncodeArrayStart(4)
			} else {
				yynn4005 = 1
				for _, b := range yyq4005 {
					if b {
						yynn4005++
					}
				}
				r.EncodeMapStart(yynn4005)
				yynn4005 = 0
			}
			if yyr4005 || yy2arr4005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4005[0] {
					yym4007 := z.EncBinary()
					_ = yym4007
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4005[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4008 := z.EncBinary()
					_ = yym4008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4005 || yy2arr4005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4005[1] {
					yym4010 := z.EncBinary()
					_ = yym4010
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4005[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4011 := z.EncBinary()
					_ = yym4011
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4005 || yy2arr4005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4005[2] {
					yy4013 := &x.ListMeta
					yym4014 := z.EncBinary()
					_ = yym4014
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4013) {
					} else {
						z.EncFallback(yy4013)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4005[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4015 := &x.ListMeta
					yym4016 := z.EncBinary()
					_ = yym4016
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4015) {
					} else {
						z.EncFallback(yy4015)
					}
				}
			}
			if yyr4005 || yy2arr4005 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4018 := z.EncBinary()
					_ = yym4018
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4019 := z.EncBinary()
					_ = yym4019
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr4005 || yy2arr4005 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4020 := z.DecBinary()
	_ = yym4020
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4021 := r.ContainerType()
		if yyct4021 == codecSelferValueTypeMap1234 {
			yyl4021 := r.ReadMapStart()
			if yyl4021 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4021, d)
			}
		} else if yyct4021 == codecSelferValueTypeArray1234 {
			yyl4021 := r.ReadArrayStart()
			if yyl4021 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4021, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4022Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4022Slc
	var yyhl4022 bool = l >= 0
	for yyj4022 := 0; ; yyj4022++ {
		if yyhl4022 {
			if yyj4022 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4022Slc = r.DecodeBytes(yys4022Slc, true, true)
		yys4022 := string(yys4022Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4022 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4025 := &x.ListMeta
				yym4026 := z.DecBinary()
				_ = yym4026
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4025) {
				} else {
					z.DecFallback(yyv4025, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4027 := &x.Items
				yym4028 := z.DecBinary()
				_ = yym4028
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv4027), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4022)
		} // end switch yys4022
	} // end for yyj4022
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4029 int
	var yyb4029 bool
	var yyhl4029 bool = l >= 0
	yyj4029++
	if yyhl4029 {
		yyb4029 = yyj4029 > l
	} else {
		yyb4029 = r.CheckBreak()
	}
	if yyb4029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4029++
	if yyhl4029 {
		yyb4029 = yyj4029 > l
	} else {
		yyb4029 = r.CheckBreak()
	}
	if yyb4029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4029++
	if yyhl4029 {
		yyb4029 = yyj4029 > l
	} else {
		yyb4029 = r.CheckBreak()
	}
	if yyb4029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4032 := &x.ListMeta
		yym4033 := z.DecBinary()
		_ = yym4033
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4032) {
		} else {
			z.DecFallback(yyv4032, false)
		}
	}
	yyj4029++
	if yyhl4029 {
		yyb4029 = yyj4029 > l
	} else {
		yyb4029 = r.CheckBreak()
	}
	if yyb4029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4034 := &x.Items
		yym4035 := z.DecBinary()
		_ = yym4035
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv4034), d)
		}
	}
	for {
		yyj4029++
		if yyhl4029 {
			yyb4029 = yyj4029 > l
		} else {
			yyb4029 = r.CheckBreak()
		}
		if yyb4029 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4029-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4036 := z.EncBinary()
		_ = yym4036
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4037 := !z.EncBinary()
			yy2arr4037 := z.EncBasicHandle().StructToArray
			var yyq4037 [4]bool
			_, _, _ = yysep4037, yyq4037, yy2arr4037
			const yyr4037 bool = false
			yyq4037[0] = x.Kind != ""
			yyq4037[1] = x.APIVersion != ""
			yyq4037[2] = true
			var yynn4037 int
			if yyr4037 || yy2arr4037 {
				r.EncodeArrayStart(4)
			} else {
				yynn4037 = 1
				for _, b := range yyq4037 {
					if b {
						yynn4037++
					}
				}
				r.EncodeMapStart(yynn4037)
				yynn4037 = 0
			}
			if yyr4037 || yy2arr4037 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4037[0] {
					yym4039 := z.EncBinary()
					_ = yym4039
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4037[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4040 := z.EncBinary()
					_ = yym4040
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4037 || yy2arr4037 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4037[1] {
					yym4042 := z.EncBinary()
					_ = yym4042
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4037[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4043 := z.EncBinary()
					_ = yym4043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4037 || yy2arr4037 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4037[2] {
					yy4045 := &x.ListMeta
					yym4046 := z.EncBinary()
					_ = yym4046
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4045) {
					} else {
						z.EncFallback(yy4045)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4037[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4047 := &x.ListMeta
					yym4048 := z.EncBinary()
					_ = yym4048
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4047) {
					} else {
						z.EncFallback(yy4047)
					}
				}
			}
			if yyr4037 || yy2arr4037 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4050 := z.EncBinary()
					_ = yym4050
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4051 := z.EncBinary()
					_ = yym4051
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr4037 || yy2arr4037 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4052 := z.DecBinary()
	_ = yym4052
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4053 := r.ContainerType()
		if yyct4053 == codecSelferValueTypeMap1234 {
			yyl4053 := r.ReadMapStart()
			if yyl4053 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4053, d)
			}
		} else if yyct4053 == codecSelferValueTypeArray1234 {
			yyl4053 := r.ReadArrayStart()
			if yyl4053 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4053, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4054Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4054Slc
	var yyhl4054 bool = l >= 0
	for yyj4054 := 0; ; yyj4054++ {
		if yyhl4054 {
			if yyj4054 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4054Slc = r.DecodeBytes(yys4054Slc, true, true)
		yys4054 := string(yys4054Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4054 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4057 := &x.ListMeta
				yym4058 := z.DecBinary()
				_ = yym4058
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4057) {
				} else {
					z.DecFallback(yyv4057, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4059 := &x.Items
				yym4060 := z.DecBinary()
				_ = yym4060
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv4059), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4054)
		} // end switch yys4054
	} // end for yyj4054
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4061 int
	var yyb4061 bool
	var yyhl4061 bool = l >= 0
	yyj4061++
	if yyhl4061 {
		yyb4061 = yyj4061 > l
	} else {
		yyb4061 = r.CheckBreak()
	}
	if yyb4061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4061++
	if yyhl4061 {
		yyb4061 = yyj4061 > l
	} else {
		yyb4061 = r.CheckBreak()
	}
	if yyb4061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4061++
	if yyhl4061 {
		yyb4061 = yyj4061 > l
	} else {
		yyb4061 = r.CheckBreak()
	}
	if yyb4061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4064 := &x.ListMeta
		yym4065 := z.DecBinary()
		_ = yym4065
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4064) {
		} else {
			z.DecFallback(yyv4064, false)
		}
	}
	yyj4061++
	if yyhl4061 {
		yyb4061 = yyj4061 > l
	} else {
		yyb4061 = r.CheckBreak()
	}
	if yyb4061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4066 := &x.Items
		yym4067 := z.DecBinary()
		_ = yym4067
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv4066), d)
		}
	}
	for {
		yyj4061++
		if yyhl4061 {
			yyb4061 = yyj4061 > l
		} else {
			yyb4061 = r.CheckBreak()
		}
		if yyb4061 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4061-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4068 := z.EncBinary()
	_ = yym4068
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4069 := z.DecBinary()
	_ = yym4069
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4070 := z.EncBinary()
		_ = yym4070
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4071 := !z.EncBinary()
			yy2arr4071 := z.EncBasicHandle().StructToArray
			var yyq4071 [6]bool
			_, _, _ = yysep4071, yyq4071, yy2arr4071
			const yyr4071 bool = false
			yyq4071[0] = x.Type != ""
			yyq4071[1] = len(x.Max) != 0
			yyq4071[2] = len(x.Min) != 0
			yyq4071[3] = len(x.Default) != 0
			yyq4071[4] = len(x.DefaultRequest) != 0
			yyq4071[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn4071 int
			if yyr4071 || yy2arr4071 {
				r.EncodeArrayStart(6)
			} else {
				yynn4071 = 0
				for _, b := range yyq4071 {
					if b {
						yynn4071++
					}
				}
				r.EncodeMapStart(yynn4071)
				yynn4071 = 0
			}
			if yyr4071 || yy2arr4071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4071[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4071[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4071 || yy2arr4071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4071[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4071[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4071 || yy2arr4071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4071[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4071[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4071 || yy2arr4071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4071[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4071[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4071 || yy2arr4071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4071[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4071[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4071 || yy2arr4071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4071[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4071[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4071 || yy2arr4071 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4078 := z.DecBinary()
	_ = yym4078
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4079 := r.ContainerType()
		if yyct4079 == codecSelferValueTypeMap1234 {
			yyl4079 := r.ReadMapStart()
			if yyl4079 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4079, d)
			}
		} else if yyct4079 == codecSelferValueTypeArray1234 {
			yyl4079 := r.ReadArrayStart()
			if yyl4079 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4079, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4080Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4080Slc
	var yyhl4080 bool = l >= 0
	for yyj4080 := 0; ; yyj4080++ {
		if yyhl4080 {
			if yyj4080 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4080Slc = r.DecodeBytes(yys4080Slc, true, true)
		yys4080 := string(yys4080Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4080 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv4082 := &x.Max
				yyv4082.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv4083 := &x.Min
				yyv4083.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv4084 := &x.Default
				yyv4084.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv4085 := &x.DefaultRequest
				yyv4085.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv4086 := &x.MaxLimitRequestRatio
				yyv4086.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4080)
		} // end switch yys4080
	} // end for yyj4080
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4087 int
	var yyb4087 bool
	var yyhl4087 bool = l >= 0
	yyj4087++
	if yyhl4087 {
		yyb4087 = yyj4087 > l
	} else {
		yyb4087 = r.CheckBreak()
	}
	if yyb4087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj4087++
	if yyhl4087 {
		yyb4087 = yyj4087 > l
	} else {
		yyb4087 = r.CheckBreak()
	}
	if yyb4087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv4089 := &x.Max
		yyv4089.CodecDecodeSelf(d)
	}
	yyj4087++
	if yyhl4087 {
		yyb4087 = yyj4087 > l
	} else {
		yyb4087 = r.CheckBreak()
	}
	if yyb4087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv4090 := &x.Min
		yyv4090.CodecDecodeSelf(d)
	}
	yyj4087++
	if yyhl4087 {
		yyb4087 = yyj4087 > l
	} else {
		yyb4087 = r.CheckBreak()
	}
	if yyb4087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv4091 := &x.Default
		yyv4091.CodecDecodeSelf(d)
	}
	yyj4087++
	if yyhl4087 {
		yyb4087 = yyj4087 > l
	} else {
		yyb4087 = r.CheckBreak()
	}
	if yyb4087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv4092 := &x.DefaultRequest
		yyv4092.CodecDecodeSelf(d)
	}
	yyj4087++
	if yyhl4087 {
		yyb4087 = yyj4087 > l
	} else {
		yyb4087 = r.CheckBreak()
	}
	if yyb4087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv4093 := &x.MaxLimitRequestRatio
		yyv4093.CodecDecodeSelf(d)
	}
	for {
		yyj4087++
		if yyhl4087 {
			yyb4087 = yyj4087 > l
		} else {
			yyb4087 = r.CheckBreak()
		}
		if yyb4087 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4087-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4094 := z.EncBinary()
		_ = yym4094
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4095 := !z.EncBinary()
			yy2arr4095 := z.EncBasicHandle().StructToArray
			var yyq4095 [1]bool
			_, _, _ = yysep4095, yyq4095, yy2arr4095
			const yyr4095 bool = false
			var yynn4095 int
			if yyr4095 || yy2arr4095 {
				r.EncodeArrayStart(1)
			} else {
				yynn4095 = 1
				for _, b := range yyq4095 {
					if b {
						yynn4095++
					}
				}
				r.EncodeMapStart(yynn4095)
				yynn4095 = 0
			}
			if yyr4095 || yy2arr4095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4097 := z.EncBinary()
					_ = yym4097
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4098 := z.EncBinary()
					_ = yym4098
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr4095 || yy2arr4095 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4099 := z.DecBinary()
	_ = yym4099
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4100 := r.ContainerType()
		if yyct4100 == codecSelferValueTypeMap1234 {
			yyl4100 := r.ReadMapStart()
			if yyl4100 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4100, d)
			}
		} else if yyct4100 == codecSelferValueTypeArray1234 {
			yyl4100 := r.ReadArrayStart()
			if yyl4100 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4100, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4101Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4101Slc
	var yyhl4101 bool = l >= 0
	for yyj4101 := 0; ; yyj4101++ {
		if yyhl4101 {
			if yyj4101 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4101Slc = r.DecodeBytes(yys4101Slc, true, true)
		yys4101 := string(yys4101Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4101 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv4102 := &x.Limits
				yym4103 := z.DecBinary()
				_ = yym4103
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4102), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4101)
		} // end switch yys4101
	} // end for yyj4101
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4104 int
	var yyb4104 bool
	var yyhl4104 bool = l >= 0
	yyj4104++
	if yyhl4104 {
		yyb4104 = yyj4104 > l
	} else {
		yyb4104 = r.CheckBreak()
	}
	if yyb4104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv4105 := &x.Limits
		yym4106 := z.DecBinary()
		_ = yym4106
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4105), d)
		}
	}
	for {
		yyj4104++
		if yyhl4104 {
			yyb4104 = yyj4104 > l
		} else {
			yyb4104 = r.CheckBreak()
		}
		if yyb4104 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4104-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4107 := z.EncBinary()
		_ = yym4107
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4108 := !z.EncBinary()
			yy2arr4108 := z.EncBasicHandle().StructToArray
			var yyq4108 [4]bool
			_, _, _ = yysep4108, yyq4108, yy2arr4108
			const yyr4108 bool = false
			yyq4108[0] = x.Kind != ""
			yyq4108[1] = x.APIVersion != ""
			yyq4108[2] = true
			yyq4108[3] = true
			var yynn4108 int
			if yyr4108 || yy2arr4108 {
				r.EncodeArrayStart(4)
			} else {
				yynn4108 = 0
				for _, b := range yyq4108 {
					if b {
						yynn4108++
					}
				}
				r.EncodeMapStart(yynn4108)
				yynn4108 = 0
			}
			if yyr4108 || yy2arr4108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4108[0] {
					yym4110 := z.EncBinary()
					_ = yym4110
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4108[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4111 := z.EncBinary()
					_ = yym4111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4108 || yy2arr4108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4108[1] {
					yym4113 := z.EncBinary()
					_ = yym4113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4108[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4114 := z.EncBinary()
					_ = yym4114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4108 || yy2arr4108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4108[2] {
					yy4116 := &x.ObjectMeta
					yy4116.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4108[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4117 := &x.ObjectMeta
					yy4117.CodecEncodeSelf(e)
				}
			}
			if yyr4108 || yy2arr4108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4108[3] {
					yy4119 := &x.Spec
					yy4119.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4108[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4120 := &x.Spec
					yy4120.CodecEncodeSelf(e)
				}
			}
			if yyr4108 || yy2arr4108 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4121 := z.DecBinary()
	_ = yym4121
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4122 := r.ContainerType()
		if yyct4122 == codecSelferValueTypeMap1234 {
			yyl4122 := r.ReadMapStart()
			if yyl4122 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4122, d)
			}
		} else if yyct4122 == codecSelferValueTypeArray1234 {
			yyl4122 := r.ReadArrayStart()
			if yyl4122 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4122, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4123Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4123Slc
	var yyhl4123 bool = l >= 0
	for yyj4123 := 0; ; yyj4123++ {
		if yyhl4123 {
			if yyj4123 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4123Slc = r.DecodeBytes(yys4123Slc, true, true)
		yys4123 := string(yys4123Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4123 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4126 := &x.ObjectMeta
				yyv4126.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv4127 := &x.Spec
				yyv4127.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4123)
		} // end switch yys4123
	} // end for yyj4123
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4128 int
	var yyb4128 bool
	var yyhl4128 bool = l >= 0
	yyj4128++
	if yyhl4128 {
		yyb4128 = yyj4128 > l
	} else {
		yyb4128 = r.CheckBreak()
	}
	if yyb4128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4128++
	if yyhl4128 {
		yyb4128 = yyj4128 > l
	} else {
		yyb4128 = r.CheckBreak()
	}
	if yyb4128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4128++
	if yyhl4128 {
		yyb4128 = yyj4128 > l
	} else {
		yyb4128 = r.CheckBreak()
	}
	if yyb4128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4131 := &x.ObjectMeta
		yyv4131.CodecDecodeSelf(d)
	}
	yyj4128++
	if yyhl4128 {
		yyb4128 = yyj4128 > l
	} else {
		yyb4128 = r.CheckBreak()
	}
	if yyb4128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv4132 := &x.Spec
		yyv4132.CodecDecodeSelf(d)
	}
	for {
		yyj4128++
		if yyhl4128 {
			yyb4128 = yyj4128 > l
		} else {
			yyb4128 = r.CheckBreak()
		}
		if yyb4128 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4128-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4133 := z.EncBinary()
		_ = yym4133
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4134 := !z.EncBinary()
			yy2arr4134 := z.EncBasicHandle().StructToArray
			var yyq4134 [4]bool
			_, _, _ = yysep4134, yyq4134, yy2arr4134
			const yyr4134 bool = false
			yyq4134[0] = x.Kind != ""
			yyq4134[1] = x.APIVersion != ""
			yyq4134[2] = true
			var yynn4134 int
			if yyr4134 || yy2arr4134 {
				r.EncodeArrayStart(4)
			} else {
				yynn4134 = 1
				for _, b := range yyq4134 {
					if b {
						yynn4134++
					}
				}
				r.EncodeMapStart(yynn4134)
				yynn4134 = 0
			}
			if yyr4134 || yy2arr4134 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4134[0] {
					yym4136 := z.EncBinary()
					_ = yym4136
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4134[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4137 := z.EncBinary()
					_ = yym4137
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4134 || yy2arr4134 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4134[1] {
					yym4139 := z.EncBinary()
					_ = yym4139
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4134[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4140 := z.EncBinary()
					_ = yym4140
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4134 || yy2arr4134 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4134[2] {
					yy4142 := &x.ListMeta
					yym4143 := z.EncBinary()
					_ = yym4143
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4142) {
					} else {
						z.EncFallback(yy4142)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4134[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4144 := &x.ListMeta
					yym4145 := z.EncBinary()
					_ = yym4145
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4144) {
					} else {
						z.EncFallback(yy4144)
					}
				}
			}
			if yyr4134 || yy2arr4134 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4147 := z.EncBinary()
					_ = yym4147
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4148 := z.EncBinary()
					_ = yym4148
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr4134 || yy2arr4134 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4149 := z.DecBinary()
	_ = yym4149
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4150 := r.ContainerType()
		if yyct4150 == codecSelferValueTypeMap1234 {
			yyl4150 := r.ReadMapStart()
			if yyl4150 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4150, d)
			}
		} else if yyct4150 == codecSelferValueTypeArray1234 {
			yyl4150 := r.ReadArrayStart()
			if yyl4150 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4150, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4151Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4151Slc
	var yyhl4151 bool = l >= 0
	for yyj4151 := 0; ; yyj4151++ {
		if yyhl4151 {
			if yyj4151 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4151Slc = r.DecodeBytes(yys4151Slc, true, true)
		yys4151 := string(yys4151Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4151 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4154 := &x.ListMeta
				yym4155 := z.DecBinary()
				_ = yym4155
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4154) {
				} else {
					z.DecFallback(yyv4154, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4156 := &x.Items
				yym4157 := z.DecBinary()
				_ = yym4157
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv4156), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4151)
		} // end switch yys4151
	} // end for yyj4151
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4158 int
	var yyb4158 bool
	var yyhl4158 bool = l >= 0
	yyj4158++
	if yyhl4158 {
		yyb4158 = yyj4158 > l
	} else {
		yyb4158 = r.CheckBreak()
	}
	if yyb4158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4158++
	if yyhl4158 {
		yyb4158 = yyj4158 > l
	} else {
		yyb4158 = r.CheckBreak()
	}
	if yyb4158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4158++
	if yyhl4158 {
		yyb4158 = yyj4158 > l
	} else {
		yyb4158 = r.CheckBreak()
	}
	if yyb4158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4161 := &x.ListMeta
		yym4162 := z.DecBinary()
		_ = yym4162
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4161) {
		} else {
			z.DecFallback(yyv4161, false)
		}
	}
	yyj4158++
	if yyhl4158 {
		yyb4158 = yyj4158 > l
	} else {
		yyb4158 = r.CheckBreak()
	}
	if yyb4158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4163 := &x.Items
		yym4164 := z.DecBinary()
		_ = yym4164
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv4163), d)
		}
	}
	for {
		yyj4158++
		if yyhl4158 {
			yyb4158 = yyj4158 > l
		} else {
			yyb4158 = r.CheckBreak()
		}
		if yyb4158 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4158-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4165 := z.EncBinary()
	_ = yym4165
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4166 := z.DecBinary()
	_ = yym4166
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4167 := z.EncBinary()
		_ = yym4167
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4168 := !z.EncBinary()
			yy2arr4168 := z.EncBasicHandle().StructToArray
			var yyq4168 [2]bool
			_, _, _ = yysep4168, yyq4168, yy2arr4168
			const yyr4168 bool = false
			yyq4168[0] = len(x.Hard) != 0
			yyq4168[1] = len(x.Scopes) != 0
			var yynn4168 int
			if yyr4168 || yy2arr4168 {
				r.EncodeArrayStart(2)
			} else {
				yynn4168 = 0
				for _, b := range yyq4168 {
					if b {
						yynn4168++
					}
				}
				r.EncodeMapStart(yynn4168)
				yynn4168 = 0
			}
			if yyr4168 || yy2arr4168 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4168[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4168[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4168 || yy2arr4168 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4168[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4171 := z.EncBinary()
						_ = yym4171
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4168[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4172 := z.EncBinary()
						_ = yym4172
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr4168 || yy2arr4168 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4173 := z.DecBinary()
	_ = yym4173
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4174 := r.ContainerType()
		if yyct4174 == codecSelferValueTypeMap1234 {
			yyl4174 := r.ReadMapStart()
			if yyl4174 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4174, d)
			}
		} else if yyct4174 == codecSelferValueTypeArray1234 {
			yyl4174 := r.ReadArrayStart()
			if yyl4174 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4174, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4175Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4175Slc
	var yyhl4175 bool = l >= 0
	for yyj4175 := 0; ; yyj4175++ {
		if yyhl4175 {
			if yyj4175 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4175Slc = r.DecodeBytes(yys4175Slc, true, true)
		yys4175 := string(yys4175Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4175 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4176 := &x.Hard
				yyv4176.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv4177 := &x.Scopes
				yym4178 := z.DecBinary()
				_ = yym4178
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4177), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4175)
		} // end switch yys4175
	} // end for yyj4175
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4179 int
	var yyb4179 bool
	var yyhl4179 bool = l >= 0
	yyj4179++
	if yyhl4179 {
		yyb4179 = yyj4179 > l
	} else {
		yyb4179 = r.CheckBreak()
	}
	if yyb4179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4180 := &x.Hard
		yyv4180.CodecDecodeSelf(d)
	}
	yyj4179++
	if yyhl4179 {
		yyb4179 = yyj4179 > l
	} else {
		yyb4179 = r.CheckBreak()
	}
	if yyb4179 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv4181 := &x.Scopes
		yym4182 := z.DecBinary()
		_ = yym4182
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4181), d)
		}
	}
	for {
		yyj4179++
		if yyhl4179 {
			yyb4179 = yyj4179 > l
		} else {
			yyb4179 = r.CheckBreak()
		}
		if yyb4179 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4179-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4183 := z.EncBinary()
		_ = yym4183
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4184 := !z.EncBinary()
			yy2arr4184 := z.EncBasicHandle().StructToArray
			var yyq4184 [2]bool
			_, _, _ = yysep4184, yyq4184, yy2arr4184
			const yyr4184 bool = false
			yyq4184[0] = len(x.Hard) != 0
			yyq4184[1] = len(x.Used) != 0
			var yynn4184 int
			if yyr4184 || yy2arr4184 {
				r.EncodeArrayStart(2)
			} else {
				yynn4184 = 0
				for _, b := range yyq4184 {
					if b {
						yynn4184++
					}
				}
				r.EncodeMapStart(yynn4184)
				yynn4184 = 0
			}
			if yyr4184 || yy2arr4184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4184[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4184[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4184 || yy2arr4184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4184[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4184[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4184 || yy2arr4184 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4187 := z.DecBinary()
	_ = yym4187
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4188 := r.ContainerType()
		if yyct4188 == codecSelferValueTypeMap1234 {
			yyl4188 := r.ReadMapStart()
			if yyl4188 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4188, d)
			}
		} else if yyct4188 == codecSelferValueTypeArray1234 {
			yyl4188 := r.ReadArrayStart()
			if yyl4188 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4188, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4189Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4189Slc
	var yyhl4189 bool = l >= 0
	for yyj4189 := 0; ; yyj4189++ {
		if yyhl4189 {
			if yyj4189 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4189Slc = r.DecodeBytes(yys4189Slc, true, true)
		yys4189 := string(yys4189Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4189 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4190 := &x.Hard
				yyv4190.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv4191 := &x.Used
				yyv4191.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4189)
		} // end switch yys4189
	} // end for yyj4189
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4192 int
	var yyb4192 bool
	var yyhl4192 bool = l >= 0
	yyj4192++
	if yyhl4192 {
		yyb4192 = yyj4192 > l
	} else {
		yyb4192 = r.CheckBreak()
	}
	if yyb4192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4193 := &x.Hard
		yyv4193.CodecDecodeSelf(d)
	}
	yyj4192++
	if yyhl4192 {
		yyb4192 = yyj4192 > l
	} else {
		yyb4192 = r.CheckBreak()
	}
	if yyb4192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv4194 := &x.Used
		yyv4194.CodecDecodeSelf(d)
	}
	for {
		yyj4192++
		if yyhl4192 {
			yyb4192 = yyj4192 > l
		} else {
			yyb4192 = r.CheckBreak()
		}
		if yyb4192 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4192-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4195 := z.EncBinary()
		_ = yym4195
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4196 := !z.EncBinary()
			yy2arr4196 := z.EncBasicHandle().StructToArray
			var yyq4196 [5]bool
			_, _, _ = yysep4196, yyq4196, yy2arr4196
			const yyr4196 bool = false
			yyq4196[0] = x.Kind != ""
			yyq4196[1] = x.APIVersion != ""
			yyq4196[2] = true
			yyq4196[3] = true
			yyq4196[4] = true
			var yynn4196 int
			if yyr4196 || yy2arr4196 {
				r.EncodeArrayStart(5)
			} else {
				yynn4196 = 0
				for _, b := range yyq4196 {
					if b {
						yynn4196++
					}
				}
				r.EncodeMapStart(yynn4196)
				yynn4196 = 0
			}
			if yyr4196 || yy2arr4196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4196[0] {
					yym4198 := z.EncBinary()
					_ = yym4198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4196[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4199 := z.EncBinary()
					_ = yym4199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4196 || yy2arr4196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4196[1] {
					yym4201 := z.EncBinary()
					_ = yym4201
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4196[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4202 := z.EncBinary()
					_ = yym4202
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4196 || yy2arr4196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4196[2] {
					yy4204 := &x.ObjectMeta
					yy4204.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4196[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4205 := &x.ObjectMeta
					yy4205.CodecEncodeSelf(e)
				}
			}
			if yyr4196 || yy2arr4196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4196[3] {
					yy4207 := &x.Spec
					yy4207.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4196[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4208 := &x.Spec
					yy4208.CodecEncodeSelf(e)
				}
			}
			if yyr4196 || yy2arr4196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4196[4] {
					yy4210 := &x.Status
					yy4210.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4196[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4211 := &x.Status
					yy4211.CodecEncodeSelf(e)
				}
			}
			if yyr4196 || yy2arr4196 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4212 := z.DecBinary()
	_ = yym4212
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4213 := r.ContainerType()
		if yyct4213 == codecSelferValueTypeMap1234 {
			yyl4213 := r.ReadMapStart()
			if yyl4213 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4213, d)
			}
		} else if yyct4213 == codecSelferValueTypeArray1234 {
			yyl4213 := r.ReadArrayStart()
			if yyl4213 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4213, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4214Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4214Slc
	var yyhl4214 bool = l >= 0
	for yyj4214 := 0; ; yyj4214++ {
		if yyhl4214 {
			if yyj4214 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4214Slc = r.DecodeBytes(yys4214Slc, true, true)
		yys4214 := string(yys4214Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4214 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4217 := &x.ObjectMeta
				yyv4217.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4218 := &x.Spec
				yyv4218.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4219 := &x.Status
				yyv4219.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4214)
		} // end switch yys4214
	} // end for yyj4214
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4220 int
	var yyb4220 bool
	var yyhl4220 bool = l >= 0
	yyj4220++
	if yyhl4220 {
		yyb4220 = yyj4220 > l
	} else {
		yyb4220 = r.CheckBreak()
	}
	if yyb4220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4220++
	if yyhl4220 {
		yyb4220 = yyj4220 > l
	} else {
		yyb4220 = r.CheckBreak()
	}
	if yyb4220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4220++
	if yyhl4220 {
		yyb4220 = yyj4220 > l
	} else {
		yyb4220 = r.CheckBreak()
	}
	if yyb4220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4223 := &x.ObjectMeta
		yyv4223.CodecDecodeSelf(d)
	}
	yyj4220++
	if yyhl4220 {
		yyb4220 = yyj4220 > l
	} else {
		yyb4220 = r.CheckBreak()
	}
	if yyb4220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4224 := &x.Spec
		yyv4224.CodecDecodeSelf(d)
	}
	yyj4220++
	if yyhl4220 {
		yyb4220 = yyj4220 > l
	} else {
		yyb4220 = r.CheckBreak()
	}
	if yyb4220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4225 := &x.Status
		yyv4225.CodecDecodeSelf(d)
	}
	for {
		yyj4220++
		if yyhl4220 {
			yyb4220 = yyj4220 > l
		} else {
			yyb4220 = r.CheckBreak()
		}
		if yyb4220 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4220-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4226 := z.EncBinary()
		_ = yym4226
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4227 := !z.EncBinary()
			yy2arr4227 := z.EncBasicHandle().StructToArray
			var yyq4227 [4]bool
			_, _, _ = yysep4227, yyq4227, yy2arr4227
			const yyr4227 bool = false
			yyq4227[0] = x.Kind != ""
			yyq4227[1] = x.APIVersion != ""
			yyq4227[2] = true
			var yynn4227 int
			if yyr4227 || yy2arr4227 {
				r.EncodeArrayStart(4)
			} else {
				yynn4227 = 1
				for _, b := range yyq4227 {
					if b {
						yynn4227++
					}
				}
				r.EncodeMapStart(yynn4227)
				yynn4227 = 0
			}
			if yyr4227 || yy2arr4227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4227[0] {
					yym4229 := z.EncBinary()
					_ = yym4229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4227[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4230 := z.EncBinary()
					_ = yym4230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4227 || yy2arr4227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4227[1] {
					yym4232 := z.EncBinary()
					_ = yym4232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4227[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4233 := z.EncBinary()
					_ = yym4233
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4227 || yy2arr4227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4227[2] {
					yy4235 := &x.ListMeta
					yym4236 := z.EncBinary()
					_ = yym4236
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4235) {
					} else {
						z.EncFallback(yy4235)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4227[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4237 := &x.ListMeta
					yym4238 := z.EncBinary()
					_ = yym4238
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4237) {
					} else {
						z.EncFallback(yy4237)
					}
				}
			}
			if yyr4227 || yy2arr4227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4240 := z.EncBinary()
					_ = yym4240
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4241 := z.EncBinary()
					_ = yym4241
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4227 || yy2arr4227 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4242 := z.DecBinary()
	_ = yym4242
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4243 := r.ContainerType()
		if yyct4243 == codecSelferValueTypeMap1234 {
			yyl4243 := r.ReadMapStart()
			if yyl4243 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4243, d)
			}
		} else if yyct4243 == codecSelferValueTypeArray1234 {
			yyl4243 := r.ReadArrayStart()
			if yyl4243 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4243, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4244Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4244Slc
	var yyhl4244 bool = l >= 0
	for yyj4244 := 0; ; yyj4244++ {
		if yyhl4244 {
			if yyj4244 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4244Slc = r.DecodeBytes(yys4244Slc, true, true)
		yys4244 := string(yys4244Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4244 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4247 := &x.ListMeta
				yym4248 := z.DecBinary()
				_ = yym4248
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4247) {
				} else {
					z.DecFallback(yyv4247, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4249 := &x.Items
				yym4250 := z.DecBinary()
				_ = yym4250
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4249), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4244)
		} // end switch yys4244
	} // end for yyj4244
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4251 int
	var yyb4251 bool
	var yyhl4251 bool = l >= 0
	yyj4251++
	if yyhl4251 {
		yyb4251 = yyj4251 > l
	} else {
		yyb4251 = r.CheckBreak()
	}
	if yyb4251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4251++
	if yyhl4251 {
		yyb4251 = yyj4251 > l
	} else {
		yyb4251 = r.CheckBreak()
	}
	if yyb4251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4251++
	if yyhl4251 {
		yyb4251 = yyj4251 > l
	} else {
		yyb4251 = r.CheckBreak()
	}
	if yyb4251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4254 := &x.ListMeta
		yym4255 := z.DecBinary()
		_ = yym4255
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4254) {
		} else {
			z.DecFallback(yyv4254, false)
		}
	}
	yyj4251++
	if yyhl4251 {
		yyb4251 = yyj4251 > l
	} else {
		yyb4251 = r.CheckBreak()
	}
	if yyb4251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4256 := &x.Items
		yym4257 := z.DecBinary()
		_ = yym4257
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4256), d)
		}
	}
	for {
		yyj4251++
		if yyhl4251 {
			yyb4251 = yyj4251 > l
		} else {
			yyb4251 = r.CheckBreak()
		}
		if yyb4251 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4251-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4258 := z.EncBinary()
		_ = yym4258
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4259 := !z.EncBinary()
			yy2arr4259 := z.EncBasicHandle().StructToArray
			var yyq4259 [5]bool
			_, _, _ = yysep4259, yyq4259, yy2arr4259
			const yyr4259 bool = false
			yyq4259[0] = x.Kind != ""
			yyq4259[1] = x.APIVersion != ""
			yyq4259[2] = true
			yyq4259[3] = len(x.Data) != 0
			yyq4259[4] = x.Type != ""
			var yynn4259 int
			if yyr4259 || yy2arr4259 {
				r.EncodeArrayStart(5)
			} else {
				yynn4259 = 0
				for _, b := range yyq4259 {
					if b {
						yynn4259++
					}
				}
				r.EncodeMapStart(yynn4259)
				yynn4259 = 0
			}
			if yyr4259 || yy2arr4259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4259[0] {
					yym4261 := z.EncBinary()
					_ = yym4261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4259[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4262 := z.EncBinary()
					_ = yym4262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4259 || yy2arr4259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4259[1] {
					yym4264 := z.EncBinary()
					_ = yym4264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4259[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4265 := z.EncBinary()
					_ = yym4265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4259 || yy2arr4259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4259[2] {
					yy4267 := &x.ObjectMeta
					yy4267.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4259[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4268 := &x.ObjectMeta
					yy4268.CodecEncodeSelf(e)
				}
			}
			if yyr4259 || yy2arr4259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4259[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4270 := z.EncBinary()
						_ = yym4270
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4259[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4271 := z.EncBinary()
						_ = yym4271
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4259 || yy2arr4259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4259[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4259[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4259 || yy2arr4259 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4273 := z.DecBinary()
	_ = yym4273
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4274 := r.ContainerType()
		if yyct4274 == codecSelferValueTypeMap1234 {
			yyl4274 := r.ReadMapStart()
			if yyl4274 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4274, d)
			}
		} else if yyct4274 == codecSelferValueTypeArray1234 {
			yyl4274 := r.ReadArrayStart()
			if yyl4274 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4274, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4275Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4275Slc
	var yyhl4275 bool = l >= 0
	for yyj4275 := 0; ; yyj4275++ {
		if yyhl4275 {
			if yyj4275 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4275Slc = r.DecodeBytes(yys4275Slc, true, true)
		yys4275 := string(yys4275Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4275 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4278 := &x.ObjectMeta
				yyv4278.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4279 := &x.Data
				yym4280 := z.DecBinary()
				_ = yym4280
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4279), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4275)
		} // end switch yys4275
	} // end for yyj4275
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4282 int
	var yyb4282 bool
	var yyhl4282 bool = l >= 0
	yyj4282++
	if yyhl4282 {
		yyb4282 = yyj4282 > l
	} else {
		yyb4282 = r.CheckBreak()
	}
	if yyb4282 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4282++
	if yyhl4282 {
		yyb4282 = yyj4282 > l
	} else {
		yyb4282 = r.CheckBreak()
	}
	if yyb4282 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4282++
	if yyhl4282 {
		yyb4282 = yyj4282 > l
	} else {
		yyb4282 = r.CheckBreak()
	}
	if yyb4282 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4285 := &x.ObjectMeta
		yyv4285.CodecDecodeSelf(d)
	}
	yyj4282++
	if yyhl4282 {
		yyb4282 = yyj4282 > l
	} else {
		yyb4282 = r.CheckBreak()
	}
	if yyb4282 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4286 := &x.Data
		yym4287 := z.DecBinary()
		_ = yym4287
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4286), d)
		}
	}
	yyj4282++
	if yyhl4282 {
		yyb4282 = yyj4282 > l
	} else {
		yyb4282 = r.CheckBreak()
	}
	if yyb4282 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4282++
		if yyhl4282 {
			yyb4282 = yyj4282 > l
		} else {
			yyb4282 = r.CheckBreak()
		}
		if yyb4282 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4282-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4289 := z.EncBinary()
	_ = yym4289
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4290 := z.DecBinary()
	_ = yym4290
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4291 := z.EncBinary()
		_ = yym4291
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4292 := !z.EncBinary()
			yy2arr4292 := z.EncBasicHandle().StructToArray
			var yyq4292 [4]bool
			_, _, _ = yysep4292, yyq4292, yy2arr4292
			const yyr4292 bool = false
			yyq4292[0] = x.Kind != ""
			yyq4292[1] = x.APIVersion != ""
			yyq4292[2] = true
			var yynn4292 int
			if yyr4292 || yy2arr4292 {
				r.EncodeArrayStart(4)
			} else {
				yynn4292 = 1
				for _, b := range yyq4292 {
					if b {
						yynn4292++
					}
				}
				r.EncodeMapStart(yynn4292)
				yynn4292 = 0
			}
			if yyr4292 || yy2arr4292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4292[0] {
					yym4294 := z.EncBinary()
					_ = yym4294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4292[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4295 := z.EncBinary()
					_ = yym4295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4292 || yy2arr4292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4292[1] {
					yym4297 := z.EncBinary()
					_ = yym4297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4292[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4298 := z.EncBinary()
					_ = yym4298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4292 || yy2arr4292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4292[2] {
					yy4300 := &x.ListMeta
					yym4301 := z.EncBinary()
					_ = yym4301
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4300) {
					} else {
						z.EncFallback(yy4300)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4292[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4302 := &x.ListMeta
					yym4303 := z.EncBinary()
					_ = yym4303
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4302) {
					} else {
						z.EncFallback(yy4302)
					}
				}
			}
			if yyr4292 || yy2arr4292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4305 := z.EncBinary()
					_ = yym4305
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4306 := z.EncBinary()
					_ = yym4306
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4292 || yy2arr4292 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4307 := z.DecBinary()
	_ = yym4307
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4308 := r.ContainerType()
		if yyct4308 == codecSelferValueTypeMap1234 {
			yyl4308 := r.ReadMapStart()
			if yyl4308 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4308, d)
			}
		} else if yyct4308 == codecSelferValueTypeArray1234 {
			yyl4308 := r.ReadArrayStart()
			if yyl4308 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4308, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4309Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4309Slc
	var yyhl4309 bool = l >= 0
	for yyj4309 := 0; ; yyj4309++ {
		if yyhl4309 {
			if yyj4309 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4309Slc = r.DecodeBytes(yys4309Slc, true, true)
		yys4309 := string(yys4309Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4309 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4312 := &x.ListMeta
				yym4313 := z.DecBinary()
				_ = yym4313
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4312) {
				} else {
					z.DecFallback(yyv4312, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4314 := &x.Items
				yym4315 := z.DecBinary()
				_ = yym4315
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4314), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4309)
		} // end switch yys4309
	} // end for yyj4309
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4316 int
	var yyb4316 bool
	var yyhl4316 bool = l >= 0
	yyj4316++
	if yyhl4316 {
		yyb4316 = yyj4316 > l
	} else {
		yyb4316 = r.CheckBreak()
	}
	if yyb4316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4316++
	if yyhl4316 {
		yyb4316 = yyj4316 > l
	} else {
		yyb4316 = r.CheckBreak()
	}
	if yyb4316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4316++
	if yyhl4316 {
		yyb4316 = yyj4316 > l
	} else {
		yyb4316 = r.CheckBreak()
	}
	if yyb4316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4319 := &x.ListMeta
		yym4320 := z.DecBinary()
		_ = yym4320
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4319) {
		} else {
			z.DecFallback(yyv4319, false)
		}
	}
	yyj4316++
	if yyhl4316 {
		yyb4316 = yyj4316 > l
	} else {
		yyb4316 = r.CheckBreak()
	}
	if yyb4316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4321 := &x.Items
		yym4322 := z.DecBinary()
		_ = yym4322
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4321), d)
		}
	}
	for {
		yyj4316++
		if yyhl4316 {
			yyb4316 = yyj4316 > l
		} else {
			yyb4316 = r.CheckBreak()
		}
		if yyb4316 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4316-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4323 := z.EncBinary()
		_ = yym4323
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4324 := !z.EncBinary()
			yy2arr4324 := z.EncBasicHandle().StructToArray
			var yyq4324 [4]bool
			_, _, _ = yysep4324, yyq4324, yy2arr4324
			const yyr4324 bool = false
			yyq4324[0] = x.Kind != ""
			yyq4324[1] = x.APIVersion != ""
			yyq4324[2] = true
			yyq4324[3] = len(x.Data) != 0
			var yynn4324 int
			if yyr4324 || yy2arr4324 {
				r.EncodeArrayStart(4)
			} else {
				yynn4324 = 0
				for _, b := range yyq4324 {
					if b {
						yynn4324++
					}
				}
				r.EncodeMapStart(yynn4324)
				yynn4324 = 0
			}
			if yyr4324 || yy2arr4324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4324[0] {
					yym4326 := z.EncBinary()
					_ = yym4326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4324[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4327 := z.EncBinary()
					_ = yym4327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4324 || yy2arr4324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4324[1] {
					yym4329 := z.EncBinary()
					_ = yym4329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4324[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4330 := z.EncBinary()
					_ = yym4330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4324 || yy2arr4324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4324[2] {
					yy4332 := &x.ObjectMeta
					yy4332.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4324[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4333 := &x.ObjectMeta
					yy4333.CodecEncodeSelf(e)
				}
			}
			if yyr4324 || yy2arr4324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4324[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4335 := z.EncBinary()
						_ = yym4335
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4324[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4336 := z.EncBinary()
						_ = yym4336
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4324 || yy2arr4324 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4337 := z.DecBinary()
	_ = yym4337
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4338 := r.ContainerType()
		if yyct4338 == codecSelferValueTypeMap1234 {
			yyl4338 := r.ReadMapStart()
			if yyl4338 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4338, d)
			}
		} else if yyct4338 == codecSelferValueTypeArray1234 {
			yyl4338 := r.ReadArrayStart()
			if yyl4338 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4338, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4339Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4339Slc
	var yyhl4339 bool = l >= 0
	for yyj4339 := 0; ; yyj4339++ {
		if yyhl4339 {
			if yyj4339 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4339Slc = r.DecodeBytes(yys4339Slc, true, true)
		yys4339 := string(yys4339Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4339 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4342 := &x.ObjectMeta
				yyv4342.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4343 := &x.Data
				yym4344 := z.DecBinary()
				_ = yym4344
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4343, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4339)
		} // end switch yys4339
	} // end for yyj4339
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4345 int
	var yyb4345 bool
	var yyhl4345 bool = l >= 0
	yyj4345++
	if yyhl4345 {
		yyb4345 = yyj4345 > l
	} else {
		yyb4345 = r.CheckBreak()
	}
	if yyb4345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4345++
	if yyhl4345 {
		yyb4345 = yyj4345 > l
	} else {
		yyb4345 = r.CheckBreak()
	}
	if yyb4345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4345++
	if yyhl4345 {
		yyb4345 = yyj4345 > l
	} else {
		yyb4345 = r.CheckBreak()
	}
	if yyb4345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4348 := &x.ObjectMeta
		yyv4348.CodecDecodeSelf(d)
	}
	yyj4345++
	if yyhl4345 {
		yyb4345 = yyj4345 > l
	} else {
		yyb4345 = r.CheckBreak()
	}
	if yyb4345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4349 := &x.Data
		yym4350 := z.DecBinary()
		_ = yym4350
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4349, false, d)
		}
	}
	for {
		yyj4345++
		if yyhl4345 {
			yyb4345 = yyj4345 > l
		} else {
			yyb4345 = r.CheckBreak()
		}
		if yyb4345 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4345-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4351 := z.EncBinary()
		_ = yym4351
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4352 := !z.EncBinary()
			yy2arr4352 := z.EncBasicHandle().StructToArray
			var yyq4352 [4]bool
			_, _, _ = yysep4352, yyq4352, yy2arr4352
			const yyr4352 bool = false
			yyq4352[0] = x.Kind != ""
			yyq4352[1] = x.APIVersion != ""
			yyq4352[2] = true
			var yynn4352 int
			if yyr4352 || yy2arr4352 {
				r.EncodeArrayStart(4)
			} else {
				yynn4352 = 1
				for _, b := range yyq4352 {
					if b {
						yynn4352++
					}
				}
				r.EncodeMapStart(yynn4352)
				yynn4352 = 0
			}
			if yyr4352 || yy2arr4352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4352[0] {
					yym4354 := z.EncBinary()
					_ = yym4354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4352[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4355 := z.EncBinary()
					_ = yym4355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4352 || yy2arr4352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4352[1] {
					yym4357 := z.EncBinary()
					_ = yym4357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4352[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4358 := z.EncBinary()
					_ = yym4358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4352 || yy2arr4352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4352[2] {
					yy4360 := &x.ListMeta
					yym4361 := z.EncBinary()
					_ = yym4361
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4360) {
					} else {
						z.EncFallback(yy4360)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4352[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4362 := &x.ListMeta
					yym4363 := z.EncBinary()
					_ = yym4363
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4362) {
					} else {
						z.EncFallback(yy4362)
					}
				}
			}
			if yyr4352 || yy2arr4352 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4365 := z.EncBinary()
					_ = yym4365
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4366 := z.EncBinary()
					_ = yym4366
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4352 || yy2arr4352 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4367 := z.DecBinary()
	_ = yym4367
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4368 := r.ContainerType()
		if yyct4368 == codecSelferValueTypeMap1234 {
			yyl4368 := r.ReadMapStart()
			if yyl4368 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4368, d)
			}
		} else if yyct4368 == codecSelferValueTypeArray1234 {
			yyl4368 := r.ReadArrayStart()
			if yyl4368 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4368, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4369Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4369Slc
	var yyhl4369 bool = l >= 0
	for yyj4369 := 0; ; yyj4369++ {
		if yyhl4369 {
			if yyj4369 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4369Slc = r.DecodeBytes(yys4369Slc, true, true)
		yys4369 := string(yys4369Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4369 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4372 := &x.ListMeta
				yym4373 := z.DecBinary()
				_ = yym4373
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4372) {
				} else {
					z.DecFallback(yyv4372, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4374 := &x.Items
				yym4375 := z.DecBinary()
				_ = yym4375
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4374), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4369)
		} // end switch yys4369
	} // end for yyj4369
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4376 int
	var yyb4376 bool
	var yyhl4376 bool = l >= 0
	yyj4376++
	if yyhl4376 {
		yyb4376 = yyj4376 > l
	} else {
		yyb4376 = r.CheckBreak()
	}
	if yyb4376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4376++
	if yyhl4376 {
		yyb4376 = yyj4376 > l
	} else {
		yyb4376 = r.CheckBreak()
	}
	if yyb4376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4376++
	if yyhl4376 {
		yyb4376 = yyj4376 > l
	} else {
		yyb4376 = r.CheckBreak()
	}
	if yyb4376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4379 := &x.ListMeta
		yym4380 := z.DecBinary()
		_ = yym4380
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4379) {
		} else {
			z.DecFallback(yyv4379, false)
		}
	}
	yyj4376++
	if yyhl4376 {
		yyb4376 = yyj4376 > l
	} else {
		yyb4376 = r.CheckBreak()
	}
	if yyb4376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4381 := &x.Items
		yym4382 := z.DecBinary()
		_ = yym4382
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4381), d)
		}
	}
	for {
		yyj4376++
		if yyhl4376 {
			yyb4376 = yyj4376 > l
		} else {
			yyb4376 = r.CheckBreak()
		}
		if yyb4376 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4376-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4383 := z.EncBinary()
	_ = yym4383
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4384 := z.DecBinary()
	_ = yym4384
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4385 := z.EncBinary()
	_ = yym4385
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4386 := z.DecBinary()
	_ = yym4386
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4387 := z.EncBinary()
		_ = yym4387
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4388 := !z.EncBinary()
			yy2arr4388 := z.EncBasicHandle().StructToArray
			var yyq4388 [4]bool
			_, _, _ = yysep4388, yyq4388, yy2arr4388
			const yyr4388 bool = false
			yyq4388[2] = x.Message != ""
			yyq4388[3] = x.Error != ""
			var yynn4388 int
			if yyr4388 || yy2arr4388 {
				r.EncodeArrayStart(4)
			} else {
				yynn4388 = 2
				for _, b := range yyq4388 {
					if b {
						yynn4388++
					}
				}
				r.EncodeMapStart(yynn4388)
				yynn4388 = 0
			}
			if yyr4388 || yy2arr4388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4388 || yy2arr4388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4388 || yy2arr4388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4388[2] {
					yym4392 := z.EncBinary()
					_ = yym4392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4388[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4393 := z.EncBinary()
					_ = yym4393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4388 || yy2arr4388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4388[3] {
					yym4395 := z.EncBinary()
					_ = yym4395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4388[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4396 := z.EncBinary()
					_ = yym4396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4388 || yy2arr4388 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4397 := z.DecBinary()
	_ = yym4397
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4398 := r.ContainerType()
		if yyct4398 == codecSelferValueTypeMap1234 {
			yyl4398 := r.ReadMapStart()
			if yyl4398 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4398, d)
			}
		} else if yyct4398 == codecSelferValueTypeArray1234 {
			yyl4398 := r.ReadArrayStart()
			if yyl4398 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4398, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4399Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4399Slc
	var yyhl4399 bool = l >= 0
	for yyj4399 := 0; ; yyj4399++ {
		if yyhl4399 {
			if yyj4399 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4399Slc = r.DecodeBytes(yys4399Slc, true, true)
		yys4399 := string(yys4399Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4399 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4399)
		} // end switch yys4399
	} // end for yyj4399
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4404 int
	var yyb4404 bool
	var yyhl4404 bool = l >= 0
	yyj4404++
	if yyhl4404 {
		yyb4404 = yyj4404 > l
	} else {
		yyb4404 = r.CheckBreak()
	}
	if yyb4404 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4404++
	if yyhl4404 {
		yyb4404 = yyj4404 > l
	} else {
		yyb4404 = r.CheckBreak()
	}
	if yyb4404 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4404++
	if yyhl4404 {
		yyb4404 = yyj4404 > l
	} else {
		yyb4404 = r.CheckBreak()
	}
	if yyb4404 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4404++
	if yyhl4404 {
		yyb4404 = yyj4404 > l
	} else {
		yyb4404 = r.CheckBreak()
	}
	if yyb4404 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4404++
		if yyhl4404 {
			yyb4404 = yyj4404 > l
		} else {
			yyb4404 = r.CheckBreak()
		}
		if yyb4404 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4404-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4409 := z.EncBinary()
		_ = yym4409
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4410 := !z.EncBinary()
			yy2arr4410 := z.EncBasicHandle().StructToArray
			var yyq4410 [4]bool
			_, _, _ = yysep4410, yyq4410, yy2arr4410
			const yyr4410 bool = false
			yyq4410[0] = x.Kind != ""
			yyq4410[1] = x.APIVersion != ""
			yyq4410[2] = true
			yyq4410[3] = len(x.Conditions) != 0
			var yynn4410 int
			if yyr4410 || yy2arr4410 {
				r.EncodeArrayStart(4)
			} else {
				yynn4410 = 0
				for _, b := range yyq4410 {
					if b {
						yynn4410++
					}
				}
				r.EncodeMapStart(yynn4410)
				yynn4410 = 0
			}
			if yyr4410 || yy2arr4410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4410[0] {
					yym4412 := z.EncBinary()
					_ = yym4412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4410[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4413 := z.EncBinary()
					_ = yym4413
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4410 || yy2arr4410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4410[1] {
					yym4415 := z.EncBinary()
					_ = yym4415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4410[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4416 := z.EncBinary()
					_ = yym4416
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4410 || yy2arr4410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4410[2] {
					yy4418 := &x.ObjectMeta
					yy4418.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4410[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4419 := &x.ObjectMeta
					yy4419.CodecEncodeSelf(e)
				}
			}
			if yyr4410 || yy2arr4410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4410[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4421 := z.EncBinary()
						_ = yym4421
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4410[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4422 := z.EncBinary()
						_ = yym4422
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4410 || yy2arr4410 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4423 := z.DecBinary()
	_ = yym4423
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4424 := r.ContainerType()
		if yyct4424 == codecSelferValueTypeMap1234 {
			yyl4424 := r.ReadMapStart()
			if yyl4424 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4424, d)
			}
		} else if yyct4424 == codecSelferValueTypeArray1234 {
			yyl4424 := r.ReadArrayStart()
			if yyl4424 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4424, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4425Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4425Slc
	var yyhl4425 bool = l >= 0
	for yyj4425 := 0; ; yyj4425++ {
		if yyhl4425 {
			if yyj4425 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4425Slc = r.DecodeBytes(yys4425Slc, true, true)
		yys4425 := string(yys4425Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4425 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4428 := &x.ObjectMeta
				yyv4428.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4429 := &x.Conditions
				yym4430 := z.DecBinary()
				_ = yym4430
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4429), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4425)
		} // end switch yys4425
	} // end for yyj4425
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4431 int
	var yyb4431 bool
	var yyhl4431 bool = l >= 0
	yyj4431++
	if yyhl4431 {
		yyb4431 = yyj4431 > l
	} else {
		yyb4431 = r.CheckBreak()
	}
	if yyb4431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4431++
	if yyhl4431 {
		yyb4431 = yyj4431 > l
	} else {
		yyb4431 = r.CheckBreak()
	}
	if yyb4431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4431++
	if yyhl4431 {
		yyb4431 = yyj4431 > l
	} else {
		yyb4431 = r.CheckBreak()
	}
	if yyb4431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4434 := &x.ObjectMeta
		yyv4434.CodecDecodeSelf(d)
	}
	yyj4431++
	if yyhl4431 {
		yyb4431 = yyj4431 > l
	} else {
		yyb4431 = r.CheckBreak()
	}
	if yyb4431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4435 := &x.Conditions
		yym4436 := z.DecBinary()
		_ = yym4436
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4435), d)
		}
	}
	for {
		yyj4431++
		if yyhl4431 {
			yyb4431 = yyj4431 > l
		} else {
			yyb4431 = r.CheckBreak()
		}
		if yyb4431 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4431-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4437 := z.EncBinary()
		_ = yym4437
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4438 := !z.EncBinary()
			yy2arr4438 := z.EncBasicHandle().StructToArray
			var yyq4438 [4]bool
			_, _, _ = yysep4438, yyq4438, yy2arr4438
			const yyr4438 bool = false
			yyq4438[0] = x.Kind != ""
			yyq4438[1] = x.APIVersion != ""
			yyq4438[2] = true
			var yynn4438 int
			if yyr4438 || yy2arr4438 {
				r.EncodeArrayStart(4)
			} else {
				yynn4438 = 1
				for _, b := range yyq4438 {
					if b {
						yynn4438++
					}
				}
				r.EncodeMapStart(yynn4438)
				yynn4438 = 0
			}
			if yyr4438 || yy2arr4438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4438[0] {
					yym4440 := z.EncBinary()
					_ = yym4440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4438[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4441 := z.EncBinary()
					_ = yym4441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4438 || yy2arr4438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4438[1] {
					yym4443 := z.EncBinary()
					_ = yym4443
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4438[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4444 := z.EncBinary()
					_ = yym4444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4438 || yy2arr4438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4438[2] {
					yy4446 := &x.ListMeta
					yym4447 := z.EncBinary()
					_ = yym4447
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4446) {
					} else {
						z.EncFallback(yy4446)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4438[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4448 := &x.ListMeta
					yym4449 := z.EncBinary()
					_ = yym4449
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4448) {
					} else {
						z.EncFallback(yy4448)
					}
				}
			}
			if yyr4438 || yy2arr4438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4451 := z.EncBinary()
					_ = yym4451
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4452 := z.EncBinary()
					_ = yym4452
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4438 || yy2arr4438 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4453 := z.DecBinary()
	_ = yym4453
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4454 := r.ContainerType()
		if yyct4454 == codecSelferValueTypeMap1234 {
			yyl4454 := r.ReadMapStart()
			if yyl4454 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4454, d)
			}
		} else if yyct4454 == codecSelferValueTypeArray1234 {
			yyl4454 := r.ReadArrayStart()
			if yyl4454 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4454, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4455Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4455Slc
	var yyhl4455 bool = l >= 0
	for yyj4455 := 0; ; yyj4455++ {
		if yyhl4455 {
			if yyj4455 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4455Slc = r.DecodeBytes(yys4455Slc, true, true)
		yys4455 := string(yys4455Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4455 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4458 := &x.ListMeta
				yym4459 := z.DecBinary()
				_ = yym4459
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4458) {
				} else {
					z.DecFallback(yyv4458, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4460 := &x.Items
				yym4461 := z.DecBinary()
				_ = yym4461
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4460), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4455)
		} // end switch yys4455
	} // end for yyj4455
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4462 int
	var yyb4462 bool
	var yyhl4462 bool = l >= 0
	yyj4462++
	if yyhl4462 {
		yyb4462 = yyj4462 > l
	} else {
		yyb4462 = r.CheckBreak()
	}
	if yyb4462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4462++
	if yyhl4462 {
		yyb4462 = yyj4462 > l
	} else {
		yyb4462 = r.CheckBreak()
	}
	if yyb4462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4462++
	if yyhl4462 {
		yyb4462 = yyj4462 > l
	} else {
		yyb4462 = r.CheckBreak()
	}
	if yyb4462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4465 := &x.ListMeta
		yym4466 := z.DecBinary()
		_ = yym4466
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4465) {
		} else {
			z.DecFallback(yyv4465, false)
		}
	}
	yyj4462++
	if yyhl4462 {
		yyb4462 = yyj4462 > l
	} else {
		yyb4462 = r.CheckBreak()
	}
	if yyb4462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4467 := &x.Items
		yym4468 := z.DecBinary()
		_ = yym4468
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4467), d)
		}
	}
	for {
		yyj4462++
		if yyhl4462 {
			yyb4462 = yyj4462 > l
		} else {
			yyb4462 = r.CheckBreak()
		}
		if yyb4462 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4462-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4469 := z.EncBinary()
		_ = yym4469
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4470 := !z.EncBinary()
			yy2arr4470 := z.EncBasicHandle().StructToArray
			var yyq4470 [6]bool
			_, _, _ = yysep4470, yyq4470, yy2arr4470
			const yyr4470 bool = false
			yyq4470[0] = x.Capabilities != nil
			yyq4470[1] = x.Privileged != nil
			yyq4470[2] = x.SELinuxOptions != nil
			yyq4470[3] = x.RunAsUser != nil
			yyq4470[4] = x.RunAsNonRoot != nil
			yyq4470[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4470 int
			if yyr4470 || yy2arr4470 {
				r.EncodeArrayStart(6)
			} else {
				yynn4470 = 0
				for _, b := range yyq4470 {
					if b {
						yynn4470++
					}
				}
				r.EncodeMapStart(yynn4470)
				yynn4470 = 0
			}
			if yyr4470 || yy2arr4470 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4470[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4470[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4470 || yy2arr4470 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4470[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4473 := *x.Privileged
						yym4474 := z.EncBinary()
						_ = yym4474
						if false {
						} else {
							r.EncodeBool(bool(yy4473))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4470[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4475 := *x.Privileged
						yym4476 := z.EncBinary()
						_ = yym4476
						if false {
						} else {
							r.EncodeBool(bool(yy4475))
						}
					}
				}
			}
			if yyr4470 || yy2arr4470 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4470[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4470[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4470 || yy2arr4470 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4470[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4479 := *x.RunAsUser
						yym4480 := z.EncBinary()
						_ = yym4480
						if false {
						} else {
							r.EncodeInt(int64(yy4479))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4470[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4481 := *x.RunAsUser
						yym4482 := z.EncBinary()
						_ = yym4482
						if false {
						} else {
							r.EncodeInt(int64(yy4481))
						}
					}
				}
			}
			if yyr4470 || yy2arr4470 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4470[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4484 := *x.RunAsNonRoot
						yym4485 := z.EncBinary()
						_ = yym4485
						if false {
						} else {
							r.EncodeBool(bool(yy4484))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4470[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4486 := *x.RunAsNonRoot
						yym4487 := z.EncBinary()
						_ = yym4487
						if false {
						} else {
							r.EncodeBool(bool(yy4486))
						}
					}
				}
			}
			if yyr4470 || yy2arr4470 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4470[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4489 := *x.ReadOnlyRootFilesystem
						yym4490 := z.EncBinary()
						_ = yym4490
						if false {
						} else {
							r.EncodeBool(bool(yy4489))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4470[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4491 := *x.ReadOnlyRootFilesystem
						yym4492 := z.EncBinary()
						_ = yym4492
						if false {
						} else {
							r.EncodeBool(bool(yy4491))
						}
					}
				}
			}
			if yyr4470 || yy2arr4470 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4493 := z.DecBinary()
	_ = yym4493
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4494 := r.ContainerType()
		if yyct4494 == codecSelferValueTypeMap1234 {
			yyl4494 := r.ReadMapStart()
			if yyl4494 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4494, d)
			}
		} else if yyct4494 == codecSelferValueTypeArray1234 {
			yyl4494 := r.ReadArrayStart()
			if yyl4494 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4494, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4495Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4495Slc
	var yyhl4495 bool = l >= 0
	for yyj4495 := 0; ; yyj4495++ {
		if yyhl4495 {
			if yyj4495 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4495Slc = r.DecodeBytes(yys4495Slc, true, true)
		yys4495 := string(yys4495Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4495 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4498 := z.DecBinary()
				_ = yym4498
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4501 := z.DecBinary()
				_ = yym4501
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4503 := z.DecBinary()
				_ = yym4503
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4505 := z.DecBinary()
				_ = yym4505
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4495)
		} // end switch yys4495
	} // end for yyj4495
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4506 int
	var yyb4506 bool
	var yyhl4506 bool = l >= 0
	yyj4506++
	if yyhl4506 {
		yyb4506 = yyj4506 > l
	} else {
		yyb4506 = r.CheckBreak()
	}
	if yyb4506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4506++
	if yyhl4506 {
		yyb4506 = yyj4506 > l
	} else {
		yyb4506 = r.CheckBreak()
	}
	if yyb4506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4509 := z.DecBinary()
		_ = yym4509
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4506++
	if yyhl4506 {
		yyb4506 = yyj4506 > l
	} else {
		yyb4506 = r.CheckBreak()
	}
	if yyb4506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4506++
	if yyhl4506 {
		yyb4506 = yyj4506 > l
	} else {
		yyb4506 = r.CheckBreak()
	}
	if yyb4506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4512 := z.DecBinary()
		_ = yym4512
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4506++
	if yyhl4506 {
		yyb4506 = yyj4506 > l
	} else {
		yyb4506 = r.CheckBreak()
	}
	if yyb4506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4514 := z.DecBinary()
		_ = yym4514
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4506++
	if yyhl4506 {
		yyb4506 = yyj4506 > l
	} else {
		yyb4506 = r.CheckBreak()
	}
	if yyb4506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4516 := z.DecBinary()
		_ = yym4516
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4506++
		if yyhl4506 {
			yyb4506 = yyj4506 > l
		} else {
			yyb4506 = r.CheckBreak()
		}
		if yyb4506 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4506-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4517 := z.EncBinary()
		_ = yym4517
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4518 := !z.EncBinary()
			yy2arr4518 := z.EncBasicHandle().StructToArray
			var yyq4518 [4]bool
			_, _, _ = yysep4518, yyq4518, yy2arr4518
			const yyr4518 bool = false
			yyq4518[0] = x.User != ""
			yyq4518[1] = x.Role != ""
			yyq4518[2] = x.Type != ""
			yyq4518[3] = x.Level != ""
			var yynn4518 int
			if yyr4518 || yy2arr4518 {
				r.EncodeArrayStart(4)
			} else {
				yynn4518 = 0
				for _, b := range yyq4518 {
					if b {
						yynn4518++
					}
				}
				r.EncodeMapStart(yynn4518)
				yynn4518 = 0
			}
			if yyr4518 || yy2arr4518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4518[0] {
					yym4520 := z.EncBinary()
					_ = yym4520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4518[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4521 := z.EncBinary()
					_ = yym4521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4518 || yy2arr4518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4518[1] {
					yym4523 := z.EncBinary()
					_ = yym4523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4518[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4524 := z.EncBinary()
					_ = yym4524
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4518 || yy2arr4518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4518[2] {
					yym4526 := z.EncBinary()
					_ = yym4526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4518[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4527 := z.EncBinary()
					_ = yym4527
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4518 || yy2arr4518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4518[3] {
					yym4529 := z.EncBinary()
					_ = yym4529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4518[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4530 := z.EncBinary()
					_ = yym4530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4518 || yy2arr4518 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4531 := z.DecBinary()
	_ = yym4531
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4532 := r.ContainerType()
		if yyct4532 == codecSelferValueTypeMap1234 {
			yyl4532 := r.ReadMapStart()
			if yyl4532 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4532, d)
			}
		} else if yyct4532 == codecSelferValueTypeArray1234 {
			yyl4532 := r.ReadArrayStart()
			if yyl4532 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4532, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4533Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4533Slc
	var yyhl4533 bool = l >= 0
	for yyj4533 := 0; ; yyj4533++ {
		if yyhl4533 {
			if yyj4533 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4533Slc = r.DecodeBytes(yys4533Slc, true, true)
		yys4533 := string(yys4533Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4533 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4533)
		} // end switch yys4533
	} // end for yyj4533
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4538 int
	var yyb4538 bool
	var yyhl4538 bool = l >= 0
	yyj4538++
	if yyhl4538 {
		yyb4538 = yyj4538 > l
	} else {
		yyb4538 = r.CheckBreak()
	}
	if yyb4538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4538++
	if yyhl4538 {
		yyb4538 = yyj4538 > l
	} else {
		yyb4538 = r.CheckBreak()
	}
	if yyb4538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4538++
	if yyhl4538 {
		yyb4538 = yyj4538 > l
	} else {
		yyb4538 = r.CheckBreak()
	}
	if yyb4538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4538++
	if yyhl4538 {
		yyb4538 = yyj4538 > l
	} else {
		yyb4538 = r.CheckBreak()
	}
	if yyb4538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4538++
		if yyhl4538 {
			yyb4538 = yyj4538 > l
		} else {
			yyb4538 = r.CheckBreak()
		}
		if yyb4538 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4538-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4543 := z.EncBinary()
		_ = yym4543
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4544 := !z.EncBinary()
			yy2arr4544 := z.EncBasicHandle().StructToArray
			var yyq4544 [5]bool
			_, _, _ = yysep4544, yyq4544, yy2arr4544
			const yyr4544 bool = false
			yyq4544[0] = x.Kind != ""
			yyq4544[1] = x.APIVersion != ""
			yyq4544[2] = true
			var yynn4544 int
			if yyr4544 || yy2arr4544 {
				r.EncodeArrayStart(5)
			} else {
				yynn4544 = 2
				for _, b := range yyq4544 {
					if b {
						yynn4544++
					}
				}
				r.EncodeMapStart(yynn4544)
				yynn4544 = 0
			}
			if yyr4544 || yy2arr4544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4544[0] {
					yym4546 := z.EncBinary()
					_ = yym4546
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4544[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4547 := z.EncBinary()
					_ = yym4547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4544 || yy2arr4544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4544[1] {
					yym4549 := z.EncBinary()
					_ = yym4549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4544[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4550 := z.EncBinary()
					_ = yym4550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4544 || yy2arr4544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4544[2] {
					yy4552 := &x.ObjectMeta
					yy4552.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4544[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4553 := &x.ObjectMeta
					yy4553.CodecEncodeSelf(e)
				}
			}
			if yyr4544 || yy2arr4544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4555 := z.EncBinary()
				_ = yym4555
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4556 := z.EncBinary()
				_ = yym4556
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4544 || yy2arr4544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4558 := z.EncBinary()
					_ = yym4558
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4559 := z.EncBinary()
					_ = yym4559
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4544 || yy2arr4544 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4560 := z.DecBinary()
	_ = yym4560
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4561 := r.ContainerType()
		if yyct4561 == codecSelferValueTypeMap1234 {
			yyl4561 := r.ReadMapStart()
			if yyl4561 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4561, d)
			}
		} else if yyct4561 == codecSelferValueTypeArray1234 {
			yyl4561 := r.ReadArrayStart()
			if yyl4561 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4561, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4562Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4562Slc
	var yyhl4562 bool = l >= 0
	for yyj4562 := 0; ; yyj4562++ {
		if yyhl4562 {
			if yyj4562 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4562Slc = r.DecodeBytes(yys4562Slc, true, true)
		yys4562 := string(yys4562Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4562 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4565 := &x.ObjectMeta
				yyv4565.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4567 := &x.Data
				yym4568 := z.DecBinary()
				_ = yym4568
				if false {
				} else {
					*yyv4567 = r.DecodeBytes(*(*[]byte)(yyv4567), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4562)
		} // end switch yys4562
	} // end for yyj4562
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4569 int
	var yyb4569 bool
	var yyhl4569 bool = l >= 0
	yyj4569++
	if yyhl4569 {
		yyb4569 = yyj4569 > l
	} else {
		yyb4569 = r.CheckBreak()
	}
	if yyb4569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4569++
	if yyhl4569 {
		yyb4569 = yyj4569 > l
	} else {
		yyb4569 = r.CheckBreak()
	}
	if yyb4569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4569++
	if yyhl4569 {
		yyb4569 = yyj4569 > l
	} else {
		yyb4569 = r.CheckBreak()
	}
	if yyb4569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4572 := &x.ObjectMeta
		yyv4572.CodecDecodeSelf(d)
	}
	yyj4569++
	if yyhl4569 {
		yyb4569 = yyj4569 > l
	} else {
		yyb4569 = r.CheckBreak()
	}
	if yyb4569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4569++
	if yyhl4569 {
		yyb4569 = yyj4569 > l
	} else {
		yyb4569 = r.CheckBreak()
	}
	if yyb4569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4574 := &x.Data
		yym4575 := z.DecBinary()
		_ = yym4575
		if false {
		} else {
			*yyv4574 = r.DecodeBytes(*(*[]byte)(yyv4574), false, false)
		}
	}
	for {
		yyj4569++
		if yyhl4569 {
			yyb4569 = yyj4569 > l
		} else {
			yyb4569 = r.CheckBreak()
		}
		if yyb4569 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4569-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4576 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4577 := &yyv4576
		yy4577.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4578 := *v
	yyh4578, yyl4578 := z.DecSliceHelperStart()
	var yyc4578 bool
	if yyl4578 == 0 {
		if yyv4578 == nil {
			yyv4578 = []OwnerReference{}
			yyc4578 = true
		} else if len(yyv4578) != 0 {
			yyv4578 = yyv4578[:0]
			yyc4578 = true
		}
	} else if yyl4578 > 0 {
		var yyrr4578, yyrl4578 int
		var yyrt4578 bool
		if yyl4578 > cap(yyv4578) {

			yyrg4578 := len(yyv4578) > 0
			yyv24578 := yyv4578
			yyrl4578, yyrt4578 = z.DecInferLen(yyl4578, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4578 {
				if yyrl4578 <= cap(yyv4578) {
					yyv4578 = yyv4578[:yyrl4578]
				} else {
					yyv4578 = make([]OwnerReference, yyrl4578)
				}
			} else {
				yyv4578 = make([]OwnerReference, yyrl4578)
			}
			yyc4578 = true
			yyrr4578 = len(yyv4578)
			if yyrg4578 {
				copy(yyv4578, yyv24578)
			}
		} else if yyl4578 != len(yyv4578) {
			yyv4578 = yyv4578[:yyl4578]
			yyc4578 = true
		}
		yyj4578 := 0
		for ; yyj4578 < yyrr4578; yyj4578++ {
			yyh4578.ElemContainerState(yyj4578)
			if r.TryDecodeAsNil() {
				yyv4578[yyj4578] = OwnerReference{}
			} else {
				yyv4579 := &yyv4578[yyj4578]
				yyv4579.CodecDecodeSelf(d)
			}

		}
		if yyrt4578 {
			for ; yyj4578 < yyl4578; yyj4578++ {
				yyv4578 = append(yyv4578, OwnerReference{})
				yyh4578.ElemContainerState(yyj4578)
				if r.TryDecodeAsNil() {
					yyv4578[yyj4578] = OwnerReference{}
				} else {
					yyv4580 := &yyv4578[yyj4578]
					yyv4580.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4578 := 0
		for ; !r.CheckBreak(); yyj4578++ {

			if yyj4578 >= len(yyv4578) {
				yyv4578 = append(yyv4578, OwnerReference{}) // var yyz4578 OwnerReference
				yyc4578 = true
			}
			yyh4578.ElemContainerState(yyj4578)
			if yyj4578 < len(yyv4578) {
				if r.TryDecodeAsNil() {
					yyv4578[yyj4578] = OwnerReference{}
				} else {
					yyv4581 := &yyv4578[yyj4578]
					yyv4581.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4578 < len(yyv4578) {
			yyv4578 = yyv4578[:yyj4578]
			yyc4578 = true
		} else if yyj4578 == 0 && yyv4578 == nil {
			yyv4578 = []OwnerReference{}
			yyc4578 = true
		}
	}
	yyh4578.End()
	if yyc4578 {
		*v = yyv4578
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4582 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4582.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4583 := *v
	yyh4583, yyl4583 := z.DecSliceHelperStart()
	var yyc4583 bool
	if yyl4583 == 0 {
		if yyv4583 == nil {
			yyv4583 = []PersistentVolumeAccessMode{}
			yyc4583 = true
		} else if len(yyv4583) != 0 {
			yyv4583 = yyv4583[:0]
			yyc4583 = true
		}
	} else if yyl4583 > 0 {
		var yyrr4583, yyrl4583 int
		var yyrt4583 bool
		if yyl4583 > cap(yyv4583) {

			yyrl4583, yyrt4583 = z.DecInferLen(yyl4583, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4583 {
				if yyrl4583 <= cap(yyv4583) {
					yyv4583 = yyv4583[:yyrl4583]
				} else {
					yyv4583 = make([]PersistentVolumeAccessMode, yyrl4583)
				}
			} else {
				yyv4583 = make([]PersistentVolumeAccessMode, yyrl4583)
			}
			yyc4583 = true
			yyrr4583 = len(yyv4583)
		} else if yyl4583 != len(yyv4583) {
			yyv4583 = yyv4583[:yyl4583]
			yyc4583 = true
		}
		yyj4583 := 0
		for ; yyj4583 < yyrr4583; yyj4583++ {
			yyh4583.ElemContainerState(yyj4583)
			if r.TryDecodeAsNil() {
				yyv4583[yyj4583] = ""
			} else {
				yyv4583[yyj4583] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4583 {
			for ; yyj4583 < yyl4583; yyj4583++ {
				yyv4583 = append(yyv4583, "")
				yyh4583.ElemContainerState(yyj4583)
				if r.TryDecodeAsNil() {
					yyv4583[yyj4583] = ""
				} else {
					yyv4583[yyj4583] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4583 := 0
		for ; !r.CheckBreak(); yyj4583++ {

			if yyj4583 >= len(yyv4583) {
				yyv4583 = append(yyv4583, "") // var yyz4583 PersistentVolumeAccessMode
				yyc4583 = true
			}
			yyh4583.ElemContainerState(yyj4583)
			if yyj4583 < len(yyv4583) {
				if r.TryDecodeAsNil() {
					yyv4583[yyj4583] = ""
				} else {
					yyv4583[yyj4583] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4583 < len(yyv4583) {
			yyv4583 = yyv4583[:yyj4583]
			yyc4583 = true
		} else if yyj4583 == 0 && yyv4583 == nil {
			yyv4583 = []PersistentVolumeAccessMode{}
			yyc4583 = true
		}
	}
	yyh4583.End()
	if yyc4583 {
		*v = yyv4583
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4587 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4588 := &yyv4587
		yy4588.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4589 := *v
	yyh4589, yyl4589 := z.DecSliceHelperStart()
	var yyc4589 bool
	if yyl4589 == 0 {
		if yyv4589 == nil {
			yyv4589 = []PersistentVolume{}
			yyc4589 = true
		} else if len(yyv4589) != 0 {
			yyv4589 = yyv4589[:0]
			yyc4589 = true
		}
	} else if yyl4589 > 0 {
		var yyrr4589, yyrl4589 int
		var yyrt4589 bool
		if yyl4589 > cap(yyv4589) {

			yyrg4589 := len(yyv4589) > 0
			yyv24589 := yyv4589
			yyrl4589, yyrt4589 = z.DecInferLen(yyl4589, z.DecBasicHandle().MaxInitLen, 496)
			if yyrt4589 {
				if yyrl4589 <= cap(yyv4589) {
					yyv4589 = yyv4589[:yyrl4589]
				} else {
					yyv4589 = make([]PersistentVolume, yyrl4589)
				}
			} else {
				yyv4589 = make([]PersistentVolume, yyrl4589)
			}
			yyc4589 = true
			yyrr4589 = len(yyv4589)
			if yyrg4589 {
				copy(yyv4589, yyv24589)
			}
		} else if yyl4589 != len(yyv4589) {
			yyv4589 = yyv4589[:yyl4589]
			yyc4589 = true
		}
		yyj4589 := 0
		for ; yyj4589 < yyrr4589; yyj4589++ {
			yyh4589.ElemContainerState(yyj4589)
			if r.TryDecodeAsNil() {
				yyv4589[yyj4589] = PersistentVolume{}
			} else {
				yyv4590 := &yyv4589[yyj4589]
				yyv4590.CodecDecodeSelf(d)
			}

		}
		if yyrt4589 {
			for ; yyj4589 < yyl4589; yyj4589++ {
				yyv4589 = append(yyv4589, PersistentVolume{})
				yyh4589.ElemContainerState(yyj4589)
				if r.TryDecodeAsNil() {
					yyv4589[yyj4589] = PersistentVolume{}
				} else {
					yyv4591 := &yyv4589[yyj4589]
					yyv4591.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4589 := 0
		for ; !r.CheckBreak(); yyj4589++ {

			if yyj4589 >= len(yyv4589) {
				yyv4589 = append(yyv4589, PersistentVolume{}) // var yyz4589 PersistentVolume
				yyc4589 = true
			}
			yyh4589.ElemContainerState(yyj4589)
			if yyj4589 < len(yyv4589) {
				if r.TryDecodeAsNil() {
					yyv4589[yyj4589] = PersistentVolume{}
				} else {
					yyv4592 := &yyv4589[yyj4589]
					yyv4592.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4589 < len(yyv4589) {
			yyv4589 = yyv4589[:yyj4589]
			yyc4589 = true
		} else if yyj4589 == 0 && yyv4589 == nil {
			yyv4589 = []PersistentVolume{}
			yyc4589 = true
		}
	}
	yyh4589.End()
	if yyc4589 {
		*v = yyv4589
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4593 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4594 := &yyv4593
		yy4594.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4595 := *v
	yyh4595, yyl4595 := z.DecSliceHelperStart()
	var yyc4595 bool
	if yyl4595 == 0 {
		if yyv4595 == nil {
			yyv4595 = []PersistentVolumeClaim{}
			yyc4595 = true
		} else if len(yyv4595) != 0 {
			yyv4595 = yyv4595[:0]
			yyc4595 = true
		}
	} else if yyl4595 > 0 {
		var yyrr4595, yyrl4595 int
		var yyrt4595 bool
		if yyl4595 > cap(yyv4595) {

			yyrg4595 := len(yyv4595) > 0
			yyv24595 := yyv4595
			yyrl4595, yyrt4595 = z.DecInferLen(yyl4595, z.DecBasicHandle().MaxInitLen, 368)
			if yyrt4595 {
				if yyrl4595 <= cap(yyv4595) {
					yyv4595 = yyv4595[:yyrl4595]
				} else {
					yyv4595 = make([]PersistentVolumeClaim, yyrl4595)
				}
			} else {
				yyv4595 = make([]PersistentVolumeClaim, yyrl4595)
			}
			yyc4595 = true
			yyrr4595 = len(yyv4595)
			if yyrg4595 {
				copy(yyv4595, yyv24595)
			}
		} else if yyl4595 != len(yyv4595) {
			yyv4595 = yyv4595[:yyl4595]
			yyc4595 = true
		}
		yyj4595 := 0
		for ; yyj4595 < yyrr4595; yyj4595++ {
			yyh4595.ElemContainerState(yyj4595)
			if r.TryDecodeAsNil() {
				yyv4595[yyj4595] = PersistentVolumeClaim{}
			} else {
				yyv4596 := &yyv4595[yyj4595]
				yyv4596.CodecDecodeSelf(d)
			}

		}
		if yyrt4595 {
			for ; yyj4595 < yyl4595; yyj4595++ {
				yyv4595 = append(yyv4595, PersistentVolumeClaim{})
				yyh4595.ElemContainerState(yyj4595)
				if r.TryDecodeAsNil() {
					yyv4595[yyj4595] = PersistentVolumeClaim{}
				} else {
					yyv4597 := &yyv4595[yyj4595]
					yyv4597.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4595 := 0
		for ; !r.CheckBreak(); yyj4595++ {

			if yyj4595 >= len(yyv4595) {
				yyv4595 = append(yyv4595, PersistentVolumeClaim{}) // var yyz4595 PersistentVolumeClaim
				yyc4595 = true
			}
			yyh4595.ElemContainerState(yyj4595)
			if yyj4595 < len(yyv4595) {
				if r.TryDecodeAsNil() {
					yyv4595[yyj4595] = PersistentVolumeClaim{}
				} else {
					yyv4598 := &yyv4595[yyj4595]
					yyv4598.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4595 < len(yyv4595) {
			yyv4595 = yyv4595[:yyj4595]
			yyc4595 = true
		} else if yyj4595 == 0 && yyv4595 == nil {
			yyv4595 = []PersistentVolumeClaim{}
			yyc4595 = true
		}
	}
	yyh4595.End()
	if yyc4595 {
		*v = yyv4595
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4599 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4600 := &yyv4599
		yy4600.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4601 := *v
	yyh4601, yyl4601 := z.DecSliceHelperStart()
	var yyc4601 bool
	if yyl4601 == 0 {
		if yyv4601 == nil {
			yyv4601 = []KeyToPath{}
			yyc4601 = true
		} else if len(yyv4601) != 0 {
			yyv4601 = yyv4601[:0]
			yyc4601 = true
		}
	} else if yyl4601 > 0 {
		var yyrr4601, yyrl4601 int
		var yyrt4601 bool
		if yyl4601 > cap(yyv4601) {

			yyrg4601 := len(yyv4601) > 0
			yyv24601 := yyv4601
			yyrl4601, yyrt4601 = z.DecInferLen(yyl4601, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4601 {
				if yyrl4601 <= cap(yyv4601) {
					yyv4601 = yyv4601[:yyrl4601]
				} else {
					yyv4601 = make([]KeyToPath, yyrl4601)
				}
			} else {
				yyv4601 = make([]KeyToPath, yyrl4601)
			}
			yyc4601 = true
			yyrr4601 = len(yyv4601)
			if yyrg4601 {
				copy(yyv4601, yyv24601)
			}
		} else if yyl4601 != len(yyv4601) {
			yyv4601 = yyv4601[:yyl4601]
			yyc4601 = true
		}
		yyj4601 := 0
		for ; yyj4601 < yyrr4601; yyj4601++ {
			yyh4601.ElemContainerState(yyj4601)
			if r.TryDecodeAsNil() {
				yyv4601[yyj4601] = KeyToPath{}
			} else {
				yyv4602 := &yyv4601[yyj4601]
				yyv4602.CodecDecodeSelf(d)
			}

		}
		if yyrt4601 {
			for ; yyj4601 < yyl4601; yyj4601++ {
				yyv4601 = append(yyv4601, KeyToPath{})
				yyh4601.ElemContainerState(yyj4601)
				if r.TryDecodeAsNil() {
					yyv4601[yyj4601] = KeyToPath{}
				} else {
					yyv4603 := &yyv4601[yyj4601]
					yyv4603.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4601 := 0
		for ; !r.CheckBreak(); yyj4601++ {

			if yyj4601 >= len(yyv4601) {
				yyv4601 = append(yyv4601, KeyToPath{}) // var yyz4601 KeyToPath
				yyc4601 = true
			}
			yyh4601.ElemContainerState(yyj4601)
			if yyj4601 < len(yyv4601) {
				if r.TryDecodeAsNil() {
					yyv4601[yyj4601] = KeyToPath{}
				} else {
					yyv4604 := &yyv4601[yyj4601]
					yyv4604.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4601 < len(yyv4601) {
			yyv4601 = yyv4601[:yyj4601]
			yyc4601 = true
		} else if yyj4601 == 0 && yyv4601 == nil {
			yyv4601 = []KeyToPath{}
			yyc4601 = true
		}
	}
	yyh4601.End()
	if yyc4601 {
		*v = yyv4601
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4605 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4606 := &yyv4605
		yy4606.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4607 := *v
	yyh4607, yyl4607 := z.DecSliceHelperStart()
	var yyc4607 bool
	if yyl4607 == 0 {
		if yyv4607 == nil {
			yyv4607 = []DownwardAPIVolumeFile{}
			yyc4607 = true
		} else if len(yyv4607) != 0 {
			yyv4607 = yyv4607[:0]
			yyc4607 = true
		}
	} else if yyl4607 > 0 {
		var yyrr4607, yyrl4607 int
		var yyrt4607 bool
		if yyl4607 > cap(yyv4607) {

			yyrg4607 := len(yyv4607) > 0
			yyv24607 := yyv4607
			yyrl4607, yyrt4607 = z.DecInferLen(yyl4607, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4607 {
				if yyrl4607 <= cap(yyv4607) {
					yyv4607 = yyv4607[:yyrl4607]
				} else {
					yyv4607 = make([]DownwardAPIVolumeFile, yyrl4607)
				}
			} else {
				yyv4607 = make([]DownwardAPIVolumeFile, yyrl4607)
			}
			yyc4607 = true
			yyrr4607 = len(yyv4607)
			if yyrg4607 {
				copy(yyv4607, yyv24607)
			}
		} else if yyl4607 != len(yyv4607) {
			yyv4607 = yyv4607[:yyl4607]
			yyc4607 = true
		}
		yyj4607 := 0
		for ; yyj4607 < yyrr4607; yyj4607++ {
			yyh4607.ElemContainerState(yyj4607)
			if r.TryDecodeAsNil() {
				yyv4607[yyj4607] = DownwardAPIVolumeFile{}
			} else {
				yyv4608 := &yyv4607[yyj4607]
				yyv4608.CodecDecodeSelf(d)
			}

		}
		if yyrt4607 {
			for ; yyj4607 < yyl4607; yyj4607++ {
				yyv4607 = append(yyv4607, DownwardAPIVolumeFile{})
				yyh4607.ElemContainerState(yyj4607)
				if r.TryDecodeAsNil() {
					yyv4607[yyj4607] = DownwardAPIVolumeFile{}
				} else {
					yyv4609 := &yyv4607[yyj4607]
					yyv4609.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4607 := 0
		for ; !r.CheckBreak(); yyj4607++ {

			if yyj4607 >= len(yyv4607) {
				yyv4607 = append(yyv4607, DownwardAPIVolumeFile{}) // var yyz4607 DownwardAPIVolumeFile
				yyc4607 = true
			}
			yyh4607.ElemContainerState(yyj4607)
			if yyj4607 < len(yyv4607) {
				if r.TryDecodeAsNil() {
					yyv4607[yyj4607] = DownwardAPIVolumeFile{}
				} else {
					yyv4610 := &yyv4607[yyj4607]
					yyv4610.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4607 < len(yyv4607) {
			yyv4607 = yyv4607[:yyj4607]
			yyc4607 = true
		} else if yyj4607 == 0 && yyv4607 == nil {
			yyv4607 = []DownwardAPIVolumeFile{}
			yyc4607 = true
		}
	}
	yyh4607.End()
	if yyc4607 {
		*v = yyv4607
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4611 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4612 := &yyv4611
		yy4612.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4613 := *v
	yyh4613, yyl4613 := z.DecSliceHelperStart()
	var yyc4613 bool
	if yyl4613 == 0 {
		if yyv4613 == nil {
			yyv4613 = []HTTPHeader{}
			yyc4613 = true
		} else if len(yyv4613) != 0 {
			yyv4613 = yyv4613[:0]
			yyc4613 = true
		}
	} else if yyl4613 > 0 {
		var yyrr4613, yyrl4613 int
		var yyrt4613 bool
		if yyl4613 > cap(yyv4613) {

			yyrg4613 := len(yyv4613) > 0
			yyv24613 := yyv4613
			yyrl4613, yyrt4613 = z.DecInferLen(yyl4613, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4613 {
				if yyrl4613 <= cap(yyv4613) {
					yyv4613 = yyv4613[:yyrl4613]
				} else {
					yyv4613 = make([]HTTPHeader, yyrl4613)
				}
			} else {
				yyv4613 = make([]HTTPHeader, yyrl4613)
			}
			yyc4613 = true
			yyrr4613 = len(yyv4613)
			if yyrg4613 {
				copy(yyv4613, yyv24613)
			}
		} else if yyl4613 != len(yyv4613) {
			yyv4613 = yyv4613[:yyl4613]
			yyc4613 = true
		}
		yyj4613 := 0
		for ; yyj4613 < yyrr4613; yyj4613++ {
			yyh4613.ElemContainerState(yyj4613)
			if r.TryDecodeAsNil() {
				yyv4613[yyj4613] = HTTPHeader{}
			} else {
				yyv4614 := &yyv4613[yyj4613]
				yyv4614.CodecDecodeSelf(d)
			}

		}
		if yyrt4613 {
			for ; yyj4613 < yyl4613; yyj4613++ {
				yyv4613 = append(yyv4613, HTTPHeader{})
				yyh4613.ElemContainerState(yyj4613)
				if r.TryDecodeAsNil() {
					yyv4613[yyj4613] = HTTPHeader{}
				} else {
					yyv4615 := &yyv4613[yyj4613]
					yyv4615.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4613 := 0
		for ; !r.CheckBreak(); yyj4613++ {

			if yyj4613 >= len(yyv4613) {
				yyv4613 = append(yyv4613, HTTPHeader{}) // var yyz4613 HTTPHeader
				yyc4613 = true
			}
			yyh4613.ElemContainerState(yyj4613)
			if yyj4613 < len(yyv4613) {
				if r.TryDecodeAsNil() {
					yyv4613[yyj4613] = HTTPHeader{}
				} else {
					yyv4616 := &yyv4613[yyj4613]
					yyv4616.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4613 < len(yyv4613) {
			yyv4613 = yyv4613[:yyj4613]
			yyc4613 = true
		} else if yyj4613 == 0 && yyv4613 == nil {
			yyv4613 = []HTTPHeader{}
			yyc4613 = true
		}
	}
	yyh4613.End()
	if yyc4613 {
		*v = yyv4613
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4617 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4617.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4618 := *v
	yyh4618, yyl4618 := z.DecSliceHelperStart()
	var yyc4618 bool
	if yyl4618 == 0 {
		if yyv4618 == nil {
			yyv4618 = []Capability{}
			yyc4618 = true
		} else if len(yyv4618) != 0 {
			yyv4618 = yyv4618[:0]
			yyc4618 = true
		}
	} else if yyl4618 > 0 {
		var yyrr4618, yyrl4618 int
		var yyrt4618 bool
		if yyl4618 > cap(yyv4618) {

			yyrl4618, yyrt4618 = z.DecInferLen(yyl4618, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4618 {
				if yyrl4618 <= cap(yyv4618) {
					yyv4618 = yyv4618[:yyrl4618]
				} else {
					yyv4618 = make([]Capability, yyrl4618)
				}
			} else {
				yyv4618 = make([]Capability, yyrl4618)
			}
			yyc4618 = true
			yyrr4618 = len(yyv4618)
		} else if yyl4618 != len(yyv4618) {
			yyv4618 = yyv4618[:yyl4618]
			yyc4618 = true
		}
		yyj4618 := 0
		for ; yyj4618 < yyrr4618; yyj4618++ {
			yyh4618.ElemContainerState(yyj4618)
			if r.TryDecodeAsNil() {
				yyv4618[yyj4618] = ""
			} else {
				yyv4618[yyj4618] = Capability(r.DecodeString())
			}

		}
		if yyrt4618 {
			for ; yyj4618 < yyl4618; yyj4618++ {
				yyv4618 = append(yyv4618, "")
				yyh4618.ElemContainerState(yyj4618)
				if r.TryDecodeAsNil() {
					yyv4618[yyj4618] = ""
				} else {
					yyv4618[yyj4618] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4618 := 0
		for ; !r.CheckBreak(); yyj4618++ {

			if yyj4618 >= len(yyv4618) {
				yyv4618 = append(yyv4618, "") // var yyz4618 Capability
				yyc4618 = true
			}
			yyh4618.ElemContainerState(yyj4618)
			if yyj4618 < len(yyv4618) {
				if r.TryDecodeAsNil() {
					yyv4618[yyj4618] = ""
				} else {
					yyv4618[yyj4618] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4618 < len(yyv4618) {
			yyv4618 = yyv4618[:yyj4618]
			yyc4618 = true
		} else if yyj4618 == 0 && yyv4618 == nil {
			yyv4618 = []Capability{}
			yyc4618 = true
		}
	}
	yyh4618.End()
	if yyc4618 {
		*v = yyv4618
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4622 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4623 := &yyv4622
		yy4623.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4624 := *v
	yyh4624, yyl4624 := z.DecSliceHelperStart()
	var yyc4624 bool
	if yyl4624 == 0 {
		if yyv4624 == nil {
			yyv4624 = []ContainerPort{}
			yyc4624 = true
		} else if len(yyv4624) != 0 {
			yyv4624 = yyv4624[:0]
			yyc4624 = true
		}
	} else if yyl4624 > 0 {
		var yyrr4624, yyrl4624 int
		var yyrt4624 bool
		if yyl4624 > cap(yyv4624) {

			yyrg4624 := len(yyv4624) > 0
			yyv24624 := yyv4624
			yyrl4624, yyrt4624 = z.DecInferLen(yyl4624, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4624 {
				if yyrl4624 <= cap(yyv4624) {
					yyv4624 = yyv4624[:yyrl4624]
				} else {
					yyv4624 = make([]ContainerPort, yyrl4624)
				}
			} else {
				yyv4624 = make([]ContainerPort, yyrl4624)
			}
			yyc4624 = true
			yyrr4624 = len(yyv4624)
			if yyrg4624 {
				copy(yyv4624, yyv24624)
			}
		} else if yyl4624 != len(yyv4624) {
			yyv4624 = yyv4624[:yyl4624]
			yyc4624 = true
		}
		yyj4624 := 0
		for ; yyj4624 < yyrr4624; yyj4624++ {
			yyh4624.ElemContainerState(yyj4624)
			if r.TryDecodeAsNil() {
				yyv4624[yyj4624] = ContainerPort{}
			} else {
				yyv4625 := &yyv4624[yyj4624]
				yyv4625.CodecDecodeSelf(d)
			}

		}
		if yyrt4624 {
			for ; yyj4624 < yyl4624; yyj4624++ {
				yyv4624 = append(yyv4624, ContainerPort{})
				yyh4624.ElemContainerState(yyj4624)
				if r.TryDecodeAsNil() {
					yyv4624[yyj4624] = ContainerPort{}
				} else {
					yyv4626 := &yyv4624[yyj4624]
					yyv4626.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4624 := 0
		for ; !r.CheckBreak(); yyj4624++ {

			if yyj4624 >= len(yyv4624) {
				yyv4624 = append(yyv4624, ContainerPort{}) // var yyz4624 ContainerPort
				yyc4624 = true
			}
			yyh4624.ElemContainerState(yyj4624)
			if yyj4624 < len(yyv4624) {
				if r.TryDecodeAsNil() {
					yyv4624[yyj4624] = ContainerPort{}
				} else {
					yyv4627 := &yyv4624[yyj4624]
					yyv4627.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4624 < len(yyv4624) {
			yyv4624 = yyv4624[:yyj4624]
			yyc4624 = true
		} else if yyj4624 == 0 && yyv4624 == nil {
			yyv4624 = []ContainerPort{}
			yyc4624 = true
		}
	}
	yyh4624.End()
	if yyc4624 {
		*v = yyv4624
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4628 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4629 := &yyv4628
		yy4629.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4630 := *v
	yyh4630, yyl4630 := z.DecSliceHelperStart()
	var yyc4630 bool
	if yyl4630 == 0 {
		if yyv4630 == nil {
			yyv4630 = []EnvVar{}
			yyc4630 = true
		} else if len(yyv4630) != 0 {
			yyv4630 = yyv4630[:0]
			yyc4630 = true
		}
	} else if yyl4630 > 0 {
		var yyrr4630, yyrl4630 int
		var yyrt4630 bool
		if yyl4630 > cap(yyv4630) {

			yyrg4630 := len(yyv4630) > 0
			yyv24630 := yyv4630
			yyrl4630, yyrt4630 = z.DecInferLen(yyl4630, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4630 {
				if yyrl4630 <= cap(yyv4630) {
					yyv4630 = yyv4630[:yyrl4630]
				} else {
					yyv4630 = make([]EnvVar, yyrl4630)
				}
			} else {
				yyv4630 = make([]EnvVar, yyrl4630)
			}
			yyc4630 = true
			yyrr4630 = len(yyv4630)
			if yyrg4630 {
				copy(yyv4630, yyv24630)
			}
		} else if yyl4630 != len(yyv4630) {
			yyv4630 = yyv4630[:yyl4630]
			yyc4630 = true
		}
		yyj4630 := 0
		for ; yyj4630 < yyrr4630; yyj4630++ {
			yyh4630.ElemContainerState(yyj4630)
			if r.TryDecodeAsNil() {
				yyv4630[yyj4630] = EnvVar{}
			} else {
				yyv4631 := &yyv4630[yyj4630]
				yyv4631.CodecDecodeSelf(d)
			}

		}
		if yyrt4630 {
			for ; yyj4630 < yyl4630; yyj4630++ {
				yyv4630 = append(yyv4630, EnvVar{})
				yyh4630.ElemContainerState(yyj4630)
				if r.TryDecodeAsNil() {
					yyv4630[yyj4630] = EnvVar{}
				} else {
					yyv4632 := &yyv4630[yyj4630]
					yyv4632.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4630 := 0
		for ; !r.CheckBreak(); yyj4630++ {

			if yyj4630 >= len(yyv4630) {
				yyv4630 = append(yyv4630, EnvVar{}) // var yyz4630 EnvVar
				yyc4630 = true
			}
			yyh4630.ElemContainerState(yyj4630)
			if yyj4630 < len(yyv4630) {
				if r.TryDecodeAsNil() {
					yyv4630[yyj4630] = EnvVar{}
				} else {
					yyv4633 := &yyv4630[yyj4630]
					yyv4633.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4630 < len(yyv4630) {
			yyv4630 = yyv4630[:yyj4630]
			yyc4630 = true
		} else if yyj4630 == 0 && yyv4630 == nil {
			yyv4630 = []EnvVar{}
			yyc4630 = true
		}
	}
	yyh4630.End()
	if yyc4630 {
		*v = yyv4630
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4634 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4635 := &yyv4634
		yy4635.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4636 := *v
	yyh4636, yyl4636 := z.DecSliceHelperStart()
	var yyc4636 bool
	if yyl4636 == 0 {
		if yyv4636 == nil {
			yyv4636 = []VolumeMount{}
			yyc4636 = true
		} else if len(yyv4636) != 0 {
			yyv4636 = yyv4636[:0]
			yyc4636 = true
		}
	} else if yyl4636 > 0 {
		var yyrr4636, yyrl4636 int
		var yyrt4636 bool
		if yyl4636 > cap(yyv4636) {

			yyrg4636 := len(yyv4636) > 0
			yyv24636 := yyv4636
			yyrl4636, yyrt4636 = z.DecInferLen(yyl4636, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4636 {
				if yyrl4636 <= cap(yyv4636) {
					yyv4636 = yyv4636[:yyrl4636]
				} else {
					yyv4636 = make([]VolumeMount, yyrl4636)
				}
			} else {
				yyv4636 = make([]VolumeMount, yyrl4636)
			}
			yyc4636 = true
			yyrr4636 = len(yyv4636)
			if yyrg4636 {
				copy(yyv4636, yyv24636)
			}
		} else if yyl4636 != len(yyv4636) {
			yyv4636 = yyv4636[:yyl4636]
			yyc4636 = true
		}
		yyj4636 := 0
		for ; yyj4636 < yyrr4636; yyj4636++ {
			yyh4636.ElemContainerState(yyj4636)
			if r.TryDecodeAsNil() {
				yyv4636[yyj4636] = VolumeMount{}
			} else {
				yyv4637 := &yyv4636[yyj4636]
				yyv4637.CodecDecodeSelf(d)
			}

		}
		if yyrt4636 {
			for ; yyj4636 < yyl4636; yyj4636++ {
				yyv4636 = append(yyv4636, VolumeMount{})
				yyh4636.ElemContainerState(yyj4636)
				if r.TryDecodeAsNil() {
					yyv4636[yyj4636] = VolumeMount{}
				} else {
					yyv4638 := &yyv4636[yyj4636]
					yyv4638.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4636 := 0
		for ; !r.CheckBreak(); yyj4636++ {

			if yyj4636 >= len(yyv4636) {
				yyv4636 = append(yyv4636, VolumeMount{}) // var yyz4636 VolumeMount
				yyc4636 = true
			}
			yyh4636.ElemContainerState(yyj4636)
			if yyj4636 < len(yyv4636) {
				if r.TryDecodeAsNil() {
					yyv4636[yyj4636] = VolumeMount{}
				} else {
					yyv4639 := &yyv4636[yyj4636]
					yyv4639.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4636 < len(yyv4636) {
			yyv4636 = yyv4636[:yyj4636]
			yyc4636 = true
		} else if yyj4636 == 0 && yyv4636 == nil {
			yyv4636 = []VolumeMount{}
			yyc4636 = true
		}
	}
	yyh4636.End()
	if yyc4636 {
		*v = yyv4636
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4640 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4641 := &yyv4640
		yy4641.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4642 := *v
	yyh4642, yyl4642 := z.DecSliceHelperStart()
	var yyc4642 bool
	if yyl4642 == 0 {
		if yyv4642 == nil {
			yyv4642 = []Pod{}
			yyc4642 = true
		} else if len(yyv4642) != 0 {
			yyv4642 = yyv4642[:0]
			yyc4642 = true
		}
	} else if yyl4642 > 0 {
		var yyrr4642, yyrl4642 int
		var yyrt4642 bool
		if yyl4642 > cap(yyv4642) {

			yyrg4642 := len(yyv4642) > 0
			yyv24642 := yyv4642
			yyrl4642, yyrt4642 = z.DecInferLen(yyl4642, z.DecBasicHandle().MaxInitLen, 640)
			if yyrt4642 {
				if yyrl4642 <= cap(yyv4642) {
					yyv4642 = yyv4642[:yyrl4642]
				} else {
					yyv4642 = make([]Pod, yyrl4642)
				}
			} else {
				yyv4642 = make([]Pod, yyrl4642)
			}
			yyc4642 = true
			yyrr4642 = len(yyv4642)
			if yyrg4642 {
				copy(yyv4642, yyv24642)
			}
		} else if yyl4642 != len(yyv4642) {
			yyv4642 = yyv4642[:yyl4642]
			yyc4642 = true
		}
		yyj4642 := 0
		for ; yyj4642 < yyrr4642; yyj4642++ {
			yyh4642.ElemContainerState(yyj4642)
			if r.TryDecodeAsNil() {
				yyv4642[yyj4642] = Pod{}
			} else {
				yyv4643 := &yyv4642[yyj4642]
				yyv4643.CodecDecodeSelf(d)
			}

		}
		if yyrt4642 {
			for ; yyj4642 < yyl4642; yyj4642++ {
				yyv4642 = append(yyv4642, Pod{})
				yyh4642.ElemContainerState(yyj4642)
				if r.TryDecodeAsNil() {
					yyv4642[yyj4642] = Pod{}
				} else {
					yyv4644 := &yyv4642[yyj4642]
					yyv4644.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4642 := 0
		for ; !r.CheckBreak(); yyj4642++ {

			if yyj4642 >= len(yyv4642) {
				yyv4642 = append(yyv4642, Pod{}) // var yyz4642 Pod
				yyc4642 = true
			}
			yyh4642.ElemContainerState(yyj4642)
			if yyj4642 < len(yyv4642) {
				if r.TryDecodeAsNil() {
					yyv4642[yyj4642] = Pod{}
				} else {
					yyv4645 := &yyv4642[yyj4642]
					yyv4645.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4642 < len(yyv4642) {
			yyv4642 = yyv4642[:yyj4642]
			yyc4642 = true
		} else if yyj4642 == 0 && yyv4642 == nil {
			yyv4642 = []Pod{}
			yyc4642 = true
		}
	}
	yyh4642.End()
	if yyc4642 {
		*v = yyv4642
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4646 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4647 := &yyv4646
		yy4647.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4648 := *v
	yyh4648, yyl4648 := z.DecSliceHelperStart()
	var yyc4648 bool
	if yyl4648 == 0 {
		if yyv4648 == nil {
			yyv4648 = []NodeSelectorTerm{}
			yyc4648 = true
		} else if len(yyv4648) != 0 {
			yyv4648 = yyv4648[:0]
			yyc4648 = true
		}
	} else if yyl4648 > 0 {
		var yyrr4648, yyrl4648 int
		var yyrt4648 bool
		if yyl4648 > cap(yyv4648) {

			yyrg4648 := len(yyv4648) > 0
			yyv24648 := yyv4648
			yyrl4648, yyrt4648 = z.DecInferLen(yyl4648, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4648 {
				if yyrl4648 <= cap(yyv4648) {
					yyv4648 = yyv4648[:yyrl4648]
				} else {
					yyv4648 = make([]NodeSelectorTerm, yyrl4648)
				}
			} else {
				yyv4648 = make([]NodeSelectorTerm, yyrl4648)
			}
			yyc4648 = true
			yyrr4648 = len(yyv4648)
			if yyrg4648 {
				copy(yyv4648, yyv24648)
			}
		} else if yyl4648 != len(yyv4648) {
			yyv4648 = yyv4648[:yyl4648]
			yyc4648 = true
		}
		yyj4648 := 0
		for ; yyj4648 < yyrr4648; yyj4648++ {
			yyh4648.ElemContainerState(yyj4648)
			if r.TryDecodeAsNil() {
				yyv4648[yyj4648] = NodeSelectorTerm{}
			} else {
				yyv4649 := &yyv4648[yyj4648]
				yyv4649.CodecDecodeSelf(d)
			}

		}
		if yyrt4648 {
			for ; yyj4648 < yyl4648; yyj4648++ {
				yyv4648 = append(yyv4648, NodeSelectorTerm{})
				yyh4648.ElemContainerState(yyj4648)
				if r.TryDecodeAsNil() {
					yyv4648[yyj4648] = NodeSelectorTerm{}
				} else {
					yyv4650 := &yyv4648[yyj4648]
					yyv4650.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4648 := 0
		for ; !r.CheckBreak(); yyj4648++ {

			if yyj4648 >= len(yyv4648) {
				yyv4648 = append(yyv4648, NodeSelectorTerm{}) // var yyz4648 NodeSelectorTerm
				yyc4648 = true
			}
			yyh4648.ElemContainerState(yyj4648)
			if yyj4648 < len(yyv4648) {
				if r.TryDecodeAsNil() {
					yyv4648[yyj4648] = NodeSelectorTerm{}
				} else {
					yyv4651 := &yyv4648[yyj4648]
					yyv4651.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4648 < len(yyv4648) {
			yyv4648 = yyv4648[:yyj4648]
			yyc4648 = true
		} else if yyj4648 == 0 && yyv4648 == nil {
			yyv4648 = []NodeSelectorTerm{}
			yyc4648 = true
		}
	}
	yyh4648.End()
	if yyc4648 {
		*v = yyv4648
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4652 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4653 := &yyv4652
		yy4653.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4654 := *v
	yyh4654, yyl4654 := z.DecSliceHelperStart()
	var yyc4654 bool
	if yyl4654 == 0 {
		if yyv4654 == nil {
			yyv4654 = []NodeSelectorRequirement{}
			yyc4654 = true
		} else if len(yyv4654) != 0 {
			yyv4654 = yyv4654[:0]
			yyc4654 = true
		}
	} else if yyl4654 > 0 {
		var yyrr4654, yyrl4654 int
		var yyrt4654 bool
		if yyl4654 > cap(yyv4654) {

			yyrg4654 := len(yyv4654) > 0
			yyv24654 := yyv4654
			yyrl4654, yyrt4654 = z.DecInferLen(yyl4654, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4654 {
				if yyrl4654 <= cap(yyv4654) {
					yyv4654 = yyv4654[:yyrl4654]
				} else {
					yyv4654 = make([]NodeSelectorRequirement, yyrl4654)
				}
			} else {
				yyv4654 = make([]NodeSelectorRequirement, yyrl4654)
			}
			yyc4654 = true
			yyrr4654 = len(yyv4654)
			if yyrg4654 {
				copy(yyv4654, yyv24654)
			}
		} else if yyl4654 != len(yyv4654) {
			yyv4654 = yyv4654[:yyl4654]
			yyc4654 = true
		}
		yyj4654 := 0
		for ; yyj4654 < yyrr4654; yyj4654++ {
			yyh4654.ElemContainerState(yyj4654)
			if r.TryDecodeAsNil() {
				yyv4654[yyj4654] = NodeSelectorRequirement{}
			} else {
				yyv4655 := &yyv4654[yyj4654]
				yyv4655.CodecDecodeSelf(d)
			}

		}
		if yyrt4654 {
			for ; yyj4654 < yyl4654; yyj4654++ {
				yyv4654 = append(yyv4654, NodeSelectorRequirement{})
				yyh4654.ElemContainerState(yyj4654)
				if r.TryDecodeAsNil() {
					yyv4654[yyj4654] = NodeSelectorRequirement{}
				} else {
					yyv4656 := &yyv4654[yyj4654]
					yyv4656.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4654 := 0
		for ; !r.CheckBreak(); yyj4654++ {

			if yyj4654 >= len(yyv4654) {
				yyv4654 = append(yyv4654, NodeSelectorRequirement{}) // var yyz4654 NodeSelectorRequirement
				yyc4654 = true
			}
			yyh4654.ElemContainerState(yyj4654)
			if yyj4654 < len(yyv4654) {
				if r.TryDecodeAsNil() {
					yyv4654[yyj4654] = NodeSelectorRequirement{}
				} else {
					yyv4657 := &yyv4654[yyj4654]
					yyv4657.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4654 < len(yyv4654) {
			yyv4654 = yyv4654[:yyj4654]
			yyc4654 = true
		} else if yyj4654 == 0 && yyv4654 == nil {
			yyv4654 = []NodeSelectorRequirement{}
			yyc4654 = true
		}
	}
	yyh4654.End()
	if yyc4654 {
		*v = yyv4654
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4658 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4659 := &yyv4658
		yy4659.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4660 := *v
	yyh4660, yyl4660 := z.DecSliceHelperStart()
	var yyc4660 bool
	if yyl4660 == 0 {
		if yyv4660 == nil {
			yyv4660 = []PodAffinityTerm{}
			yyc4660 = true
		} else if len(yyv4660) != 0 {
			yyv4660 = yyv4660[:0]
			yyc4660 = true
		}
	} else if yyl4660 > 0 {
		var yyrr4660, yyrl4660 int
		var yyrt4660 bool
		if yyl4660 > cap(yyv4660) {

			yyrg4660 := len(yyv4660) > 0
			yyv24660 := yyv4660
			yyrl4660, yyrt4660 = z.DecInferLen(yyl4660, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4660 {
				if yyrl4660 <= cap(yyv4660) {
					yyv4660 = yyv4660[:yyrl4660]
				} else {
					yyv4660 = make([]PodAffinityTerm, yyrl4660)
				}
			} else {
				yyv4660 = make([]PodAffinityTerm, yyrl4660)
			}
			yyc4660 = true
			yyrr4660 = len(yyv4660)
			if yyrg4660 {
				copy(yyv4660, yyv24660)
			}
		} else if yyl4660 != len(yyv4660) {
			yyv4660 = yyv4660[:yyl4660]
			yyc4660 = true
		}
		yyj4660 := 0
		for ; yyj4660 < yyrr4660; yyj4660++ {
			yyh4660.ElemContainerState(yyj4660)
			if r.TryDecodeAsNil() {
				yyv4660[yyj4660] = PodAffinityTerm{}
			} else {
				yyv4661 := &yyv4660[yyj4660]
				yyv4661.CodecDecodeSelf(d)
			}

		}
		if yyrt4660 {
			for ; yyj4660 < yyl4660; yyj4660++ {
				yyv4660 = append(yyv4660, PodAffinityTerm{})
				yyh4660.ElemContainerState(yyj4660)
				if r.TryDecodeAsNil() {
					yyv4660[yyj4660] = PodAffinityTerm{}
				} else {
					yyv4662 := &yyv4660[yyj4660]
					yyv4662.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4660 := 0
		for ; !r.CheckBreak(); yyj4660++ {

			if yyj4660 >= len(yyv4660) {
				yyv4660 = append(yyv4660, PodAffinityTerm{}) // var yyz4660 PodAffinityTerm
				yyc4660 = true
			}
			yyh4660.ElemContainerState(yyj4660)
			if yyj4660 < len(yyv4660) {
				if r.TryDecodeAsNil() {
					yyv4660[yyj4660] = PodAffinityTerm{}
				} else {
					yyv4663 := &yyv4660[yyj4660]
					yyv4663.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4660 < len(yyv4660) {
			yyv4660 = yyv4660[:yyj4660]
			yyc4660 = true
		} else if yyj4660 == 0 && yyv4660 == nil {
			yyv4660 = []PodAffinityTerm{}
			yyc4660 = true
		}
	}
	yyh4660.End()
	if yyc4660 {
		*v = yyv4660
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4664 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4665 := &yyv4664
		yy4665.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4666 := *v
	yyh4666, yyl4666 := z.DecSliceHelperStart()
	var yyc4666 bool
	if yyl4666 == 0 {
		if yyv4666 == nil {
			yyv4666 = []WeightedPodAffinityTerm{}
			yyc4666 = true
		} else if len(yyv4666) != 0 {
			yyv4666 = yyv4666[:0]
			yyc4666 = true
		}
	} else if yyl4666 > 0 {
		var yyrr4666, yyrl4666 int
		var yyrt4666 bool
		if yyl4666 > cap(yyv4666) {

			yyrg4666 := len(yyv4666) > 0
			yyv24666 := yyv4666
			yyrl4666, yyrt4666 = z.DecInferLen(yyl4666, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4666 {
				if yyrl4666 <= cap(yyv4666) {
					yyv4666 = yyv4666[:yyrl4666]
				} else {
					yyv4666 = make([]WeightedPodAffinityTerm, yyrl4666)
				}
			} else {
				yyv4666 = make([]WeightedPodAffinityTerm, yyrl4666)
			}
			yyc4666 = true
			yyrr4666 = len(yyv4666)
			if yyrg4666 {
				copy(yyv4666, yyv24666)
			}
		} else if yyl4666 != len(yyv4666) {
			yyv4666 = yyv4666[:yyl4666]
			yyc4666 = true
		}
		yyj4666 := 0
		for ; yyj4666 < yyrr4666; yyj4666++ {
			yyh4666.ElemContainerState(yyj4666)
			if r.TryDecodeAsNil() {
				yyv4666[yyj4666] = WeightedPodAffinityTerm{}
			} else {
				yyv4667 := &yyv4666[yyj4666]
				yyv4667.CodecDecodeSelf(d)
			}

		}
		if yyrt4666 {
			for ; yyj4666 < yyl4666; yyj4666++ {
				yyv4666 = append(yyv4666, WeightedPodAffinityTerm{})
				yyh4666.ElemContainerState(yyj4666)
				if r.TryDecodeAsNil() {
					yyv4666[yyj4666] = WeightedPodAffinityTerm{}
				} else {
					yyv4668 := &yyv4666[yyj4666]
					yyv4668.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4666 := 0
		for ; !r.CheckBreak(); yyj4666++ {

			if yyj4666 >= len(yyv4666) {
				yyv4666 = append(yyv4666, WeightedPodAffinityTerm{}) // var yyz4666 WeightedPodAffinityTerm
				yyc4666 = true
			}
			yyh4666.ElemContainerState(yyj4666)
			if yyj4666 < len(yyv4666) {
				if r.TryDecodeAsNil() {
					yyv4666[yyj4666] = WeightedPodAffinityTerm{}
				} else {
					yyv4669 := &yyv4666[yyj4666]
					yyv4669.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4666 < len(yyv4666) {
			yyv4666 = yyv4666[:yyj4666]
			yyc4666 = true
		} else if yyj4666 == 0 && yyv4666 == nil {
			yyv4666 = []WeightedPodAffinityTerm{}
			yyc4666 = true
		}
	}
	yyh4666.End()
	if yyc4666 {
		*v = yyv4666
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4670 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4671 := &yyv4670
		yy4671.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4672 := *v
	yyh4672, yyl4672 := z.DecSliceHelperStart()
	var yyc4672 bool
	if yyl4672 == 0 {
		if yyv4672 == nil {
			yyv4672 = []PreferredSchedulingTerm{}
			yyc4672 = true
		} else if len(yyv4672) != 0 {
			yyv4672 = yyv4672[:0]
			yyc4672 = true
		}
	} else if yyl4672 > 0 {
		var yyrr4672, yyrl4672 int
		var yyrt4672 bool
		if yyl4672 > cap(yyv4672) {

			yyrg4672 := len(yyv4672) > 0
			yyv24672 := yyv4672
			yyrl4672, yyrt4672 = z.DecInferLen(yyl4672, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4672 {
				if yyrl4672 <= cap(yyv4672) {
					yyv4672 = yyv4672[:yyrl4672]
				} else {
					yyv4672 = make([]PreferredSchedulingTerm, yyrl4672)
				}
			} else {
				yyv4672 = make([]PreferredSchedulingTerm, yyrl4672)
			}
			yyc4672 = true
			yyrr4672 = len(yyv4672)
			if yyrg4672 {
				copy(yyv4672, yyv24672)
			}
		} else if yyl4672 != len(yyv4672) {
			yyv4672 = yyv4672[:yyl4672]
			yyc4672 = true
		}
		yyj4672 := 0
		for ; yyj4672 < yyrr4672; yyj4672++ {
			yyh4672.ElemContainerState(yyj4672)
			if r.TryDecodeAsNil() {
				yyv4672[yyj4672] = PreferredSchedulingTerm{}
			} else {
				yyv4673 := &yyv4672[yyj4672]
				yyv4673.CodecDecodeSelf(d)
			}

		}
		if yyrt4672 {
			for ; yyj4672 < yyl4672; yyj4672++ {
				yyv4672 = append(yyv4672, PreferredSchedulingTerm{})
				yyh4672.ElemContainerState(yyj4672)
				if r.TryDecodeAsNil() {
					yyv4672[yyj4672] = PreferredSchedulingTerm{}
				} else {
					yyv4674 := &yyv4672[yyj4672]
					yyv4674.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4672 := 0
		for ; !r.CheckBreak(); yyj4672++ {

			if yyj4672 >= len(yyv4672) {
				yyv4672 = append(yyv4672, PreferredSchedulingTerm{}) // var yyz4672 PreferredSchedulingTerm
				yyc4672 = true
			}
			yyh4672.ElemContainerState(yyj4672)
			if yyj4672 < len(yyv4672) {
				if r.TryDecodeAsNil() {
					yyv4672[yyj4672] = PreferredSchedulingTerm{}
				} else {
					yyv4675 := &yyv4672[yyj4672]
					yyv4675.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4672 < len(yyv4672) {
			yyv4672 = yyv4672[:yyj4672]
			yyc4672 = true
		} else if yyj4672 == 0 && yyv4672 == nil {
			yyv4672 = []PreferredSchedulingTerm{}
			yyc4672 = true
		}
	}
	yyh4672.End()
	if yyc4672 {
		*v = yyv4672
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4676 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4677 := &yyv4676
		yy4677.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4678 := *v
	yyh4678, yyl4678 := z.DecSliceHelperStart()
	var yyc4678 bool
	if yyl4678 == 0 {
		if yyv4678 == nil {
			yyv4678 = []Volume{}
			yyc4678 = true
		} else if len(yyv4678) != 0 {
			yyv4678 = yyv4678[:0]
			yyc4678 = true
		}
	} else if yyl4678 > 0 {
		var yyrr4678, yyrl4678 int
		var yyrt4678 bool
		if yyl4678 > cap(yyv4678) {

			yyrg4678 := len(yyv4678) > 0
			yyv24678 := yyv4678
			yyrl4678, yyrt4678 = z.DecInferLen(yyl4678, z.DecBasicHandle().MaxInitLen, 200)
			if yyrt4678 {
				if yyrl4678 <= cap(yyv4678) {
					yyv4678 = yyv4678[:yyrl4678]
				} else {
					yyv4678 = make([]Volume, yyrl4678)
				}
			} else {
				yyv4678 = make([]Volume, yyrl4678)
			}
			yyc4678 = true
			yyrr4678 = len(yyv4678)
			if yyrg4678 {
				copy(yyv4678, yyv24678)
			}
		} else if yyl4678 != len(yyv4678) {
			yyv4678 = yyv4678[:yyl4678]
			yyc4678 = true
		}
		yyj4678 := 0
		for ; yyj4678 < yyrr4678; yyj4678++ {
			yyh4678.ElemContainerState(yyj4678)
			if r.TryDecodeAsNil() {
				yyv4678[yyj4678] = Volume{}
			} else {
				yyv4679 := &yyv4678[yyj4678]
				yyv4679.CodecDecodeSelf(d)
			}

		}
		if yyrt4678 {
			for ; yyj4678 < yyl4678; yyj4678++ {
				yyv4678 = append(yyv4678, Volume{})
				yyh4678.ElemContainerState(yyj4678)
				if r.TryDecodeAsNil() {
					yyv4678[yyj4678] = Volume{}
				} else {
					yyv4680 := &yyv4678[yyj4678]
					yyv4680.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4678 := 0
		for ; !r.CheckBreak(); yyj4678++ {

			if yyj4678 >= len(yyv4678) {
				yyv4678 = append(yyv4678, Volume{}) // var yyz4678 Volume
				yyc4678 = true
			}
			yyh4678.ElemContainerState(yyj4678)
			if yyj4678 < len(yyv4678) {
				if r.TryDecodeAsNil() {
					yyv4678[yyj4678] = Volume{}
				} else {
					yyv4681 := &yyv4678[yyj4678]
					yyv4681.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4678 < len(yyv4678) {
			yyv4678 = yyv4678[:yyj4678]
			yyc4678 = true
		} else if yyj4678 == 0 && yyv4678 == nil {
			yyv4678 = []Volume{}
			yyc4678 = true
		}
	}
	yyh4678.End()
	if yyc4678 {
		*v = yyv4678
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4682 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4683 := &yyv4682
		yy4683.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4684 := *v
	yyh4684, yyl4684 := z.DecSliceHelperStart()
	var yyc4684 bool
	if yyl4684 == 0 {
		if yyv4684 == nil {
			yyv4684 = []Container{}
			yyc4684 = true
		} else if len(yyv4684) != 0 {
			yyv4684 = yyv4684[:0]
			yyc4684 = true
		}
	} else if yyl4684 > 0 {
		var yyrr4684, yyrl4684 int
		var yyrt4684 bool
		if yyl4684 > cap(yyv4684) {

			yyrg4684 := len(yyv4684) > 0
			yyv24684 := yyv4684
			yyrl4684, yyrt4684 = z.DecInferLen(yyl4684, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4684 {
				if yyrl4684 <= cap(yyv4684) {
					yyv4684 = yyv4684[:yyrl4684]
				} else {
					yyv4684 = make([]Container, yyrl4684)
				}
			} else {
				yyv4684 = make([]Container, yyrl4684)
			}
			yyc4684 = true
			yyrr4684 = len(yyv4684)
			if yyrg4684 {
				copy(yyv4684, yyv24684)
			}
		} else if yyl4684 != len(yyv4684) {
			yyv4684 = yyv4684[:yyl4684]
			yyc4684 = true
		}
		yyj4684 := 0
		for ; yyj4684 < yyrr4684; yyj4684++ {
			yyh4684.ElemContainerState(yyj4684)
			if r.TryDecodeAsNil() {
				yyv4684[yyj4684] = Container{}
			} else {
				yyv4685 := &yyv4684[yyj4684]
				yyv4685.CodecDecodeSelf(d)
			}

		}
		if yyrt4684 {
			for ; yyj4684 < yyl4684; yyj4684++ {
				yyv4684 = append(yyv4684, Container{})
				yyh4684.ElemContainerState(yyj4684)
				if r.TryDecodeAsNil() {
					yyv4684[yyj4684] = Container{}
				} else {
					yyv4686 := &yyv4684[yyj4684]
					yyv4686.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4684 := 0
		for ; !r.CheckBreak(); yyj4684++ {

			if yyj4684 >= len(yyv4684) {
				yyv4684 = append(yyv4684, Container{}) // var yyz4684 Container
				yyc4684 = true
			}
			yyh4684.ElemContainerState(yyj4684)
			if yyj4684 < len(yyv4684) {
				if r.TryDecodeAsNil() {
					yyv4684[yyj4684] = Container{}
				} else {
					yyv4687 := &yyv4684[yyj4684]
					yyv4687.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4684 < len(yyv4684) {
			yyv4684 = yyv4684[:yyj4684]
			yyc4684 = true
		} else if yyj4684 == 0 && yyv4684 == nil {
			yyv4684 = []Container{}
			yyc4684 = true
		}
	}
	yyh4684.End()
	if yyc4684 {
		*v = yyv4684
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4688 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4689 := &yyv4688
		yy4689.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4690 := *v
	yyh4690, yyl4690 := z.DecSliceHelperStart()
	var yyc4690 bool
	if yyl4690 == 0 {
		if yyv4690 == nil {
			yyv4690 = []LocalObjectReference{}
			yyc4690 = true
		} else if len(yyv4690) != 0 {
			yyv4690 = yyv4690[:0]
			yyc4690 = true
		}
	} else if yyl4690 > 0 {
		var yyrr4690, yyrl4690 int
		var yyrt4690 bool
		if yyl4690 > cap(yyv4690) {

			yyrg4690 := len(yyv4690) > 0
			yyv24690 := yyv4690
			yyrl4690, yyrt4690 = z.DecInferLen(yyl4690, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4690 {
				if yyrl4690 <= cap(yyv4690) {
					yyv4690 = yyv4690[:yyrl4690]
				} else {
					yyv4690 = make([]LocalObjectReference, yyrl4690)
				}
			} else {
				yyv4690 = make([]LocalObjectReference, yyrl4690)
			}
			yyc4690 = true
			yyrr4690 = len(yyv4690)
			if yyrg4690 {
				copy(yyv4690, yyv24690)
			}
		} else if yyl4690 != len(yyv4690) {
			yyv4690 = yyv4690[:yyl4690]
			yyc4690 = true
		}
		yyj4690 := 0
		for ; yyj4690 < yyrr4690; yyj4690++ {
			yyh4690.ElemContainerState(yyj4690)
			if r.TryDecodeAsNil() {
				yyv4690[yyj4690] = LocalObjectReference{}
			} else {
				yyv4691 := &yyv4690[yyj4690]
				yyv4691.CodecDecodeSelf(d)
			}

		}
		if yyrt4690 {
			for ; yyj4690 < yyl4690; yyj4690++ {
				yyv4690 = append(yyv4690, LocalObjectReference{})
				yyh4690.ElemContainerState(yyj4690)
				if r.TryDecodeAsNil() {
					yyv4690[yyj4690] = LocalObjectReference{}
				} else {
					yyv4692 := &yyv4690[yyj4690]
					yyv4692.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4690 := 0
		for ; !r.CheckBreak(); yyj4690++ {

			if yyj4690 >= len(yyv4690) {
				yyv4690 = append(yyv4690, LocalObjectReference{}) // var yyz4690 LocalObjectReference
				yyc4690 = true
			}
			yyh4690.ElemContainerState(yyj4690)
			if yyj4690 < len(yyv4690) {
				if r.TryDecodeAsNil() {
					yyv4690[yyj4690] = LocalObjectReference{}
				} else {
					yyv4693 := &yyv4690[yyj4690]
					yyv4693.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4690 < len(yyv4690) {
			yyv4690 = yyv4690[:yyj4690]
			yyc4690 = true
		} else if yyj4690 == 0 && yyv4690 == nil {
			yyv4690 = []LocalObjectReference{}
			yyc4690 = true
		}
	}
	yyh4690.End()
	if yyc4690 {
		*v = yyv4690
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4694 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4695 := &yyv4694
		yy4695.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4696 := *v
	yyh4696, yyl4696 := z.DecSliceHelperStart()
	var yyc4696 bool
	if yyl4696 == 0 {
		if yyv4696 == nil {
			yyv4696 = []PodCondition{}
			yyc4696 = true
		} else if len(yyv4696) != 0 {
			yyv4696 = yyv4696[:0]
			yyc4696 = true
		}
	} else if yyl4696 > 0 {
		var yyrr4696, yyrl4696 int
		var yyrt4696 bool
		if yyl4696 > cap(yyv4696) {

			yyrg4696 := len(yyv4696) > 0
			yyv24696 := yyv4696
			yyrl4696, yyrt4696 = z.DecInferLen(yyl4696, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4696 {
				if yyrl4696 <= cap(yyv4696) {
					yyv4696 = yyv4696[:yyrl4696]
				} else {
					yyv4696 = make([]PodCondition, yyrl4696)
				}
			} else {
				yyv4696 = make([]PodCondition, yyrl4696)
			}
			yyc4696 = true
			yyrr4696 = len(yyv4696)
			if yyrg4696 {
				copy(yyv4696, yyv24696)
			}
		} else if yyl4696 != len(yyv4696) {
			yyv4696 = yyv4696[:yyl4696]
			yyc4696 = true
		}
		yyj4696 := 0
		for ; yyj4696 < yyrr4696; yyj4696++ {
			yyh4696.ElemContainerState(yyj4696)
			if r.TryDecodeAsNil() {
				yyv4696[yyj4696] = PodCondition{}
			} else {
				yyv4697 := &yyv4696[yyj4696]
				yyv4697.CodecDecodeSelf(d)
			}

		}
		if yyrt4696 {
			for ; yyj4696 < yyl4696; yyj4696++ {
				yyv4696 = append(yyv4696, PodCondition{})
				yyh4696.ElemContainerState(yyj4696)
				if r.TryDecodeAsNil() {
					yyv4696[yyj4696] = PodCondition{}
				} else {
					yyv4698 := &yyv4696[yyj4696]
					yyv4698.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4696 := 0
		for ; !r.CheckBreak(); yyj4696++ {

			if yyj4696 >= len(yyv4696) {
				yyv4696 = append(yyv4696, PodCondition{}) // var yyz4696 PodCondition
				yyc4696 = true
			}
			yyh4696.ElemContainerState(yyj4696)
			if yyj4696 < len(yyv4696) {
				if r.TryDecodeAsNil() {
					yyv4696[yyj4696] = PodCondition{}
				} else {
					yyv4699 := &yyv4696[yyj4696]
					yyv4699.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4696 < len(yyv4696) {
			yyv4696 = yyv4696[:yyj4696]
			yyc4696 = true
		} else if yyj4696 == 0 && yyv4696 == nil {
			yyv4696 = []PodCondition{}
			yyc4696 = true
		}
	}
	yyh4696.End()
	if yyc4696 {
		*v = yyv4696
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4700 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4701 := &yyv4700
		yy4701.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4702 := *v
	yyh4702, yyl4702 := z.DecSliceHelperStart()
	var yyc4702 bool
	if yyl4702 == 0 {
		if yyv4702 == nil {
			yyv4702 = []ContainerStatus{}
			yyc4702 = true
		} else if len(yyv4702) != 0 {
			yyv4702 = yyv4702[:0]
			yyc4702 = true
		}
	} else if yyl4702 > 0 {
		var yyrr4702, yyrl4702 int
		var yyrt4702 bool
		if yyl4702 > cap(yyv4702) {

			yyrg4702 := len(yyv4702) > 0
			yyv24702 := yyv4702
			yyrl4702, yyrt4702 = z.DecInferLen(yyl4702, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4702 {
				if yyrl4702 <= cap(yyv4702) {
					yyv4702 = yyv4702[:yyrl4702]
				} else {
					yyv4702 = make([]ContainerStatus, yyrl4702)
				}
			} else {
				yyv4702 = make([]ContainerStatus, yyrl4702)
			}
			yyc4702 = true
			yyrr4702 = len(yyv4702)
			if yyrg4702 {
				copy(yyv4702, yyv24702)
			}
		} else if yyl4702 != len(yyv4702) {
			yyv4702 = yyv4702[:yyl4702]
			yyc4702 = true
		}
		yyj4702 := 0
		for ; yyj4702 < yyrr4702; yyj4702++ {
			yyh4702.ElemContainerState(yyj4702)
			if r.TryDecodeAsNil() {
				yyv4702[yyj4702] = ContainerStatus{}
			} else {
				yyv4703 := &yyv4702[yyj4702]
				yyv4703.CodecDecodeSelf(d)
			}

		}
		if yyrt4702 {
			for ; yyj4702 < yyl4702; yyj4702++ {
				yyv4702 = append(yyv4702, ContainerStatus{})
				yyh4702.ElemContainerState(yyj4702)
				if r.TryDecodeAsNil() {
					yyv4702[yyj4702] = ContainerStatus{}
				} else {
					yyv4704 := &yyv4702[yyj4702]
					yyv4704.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4702 := 0
		for ; !r.CheckBreak(); yyj4702++ {

			if yyj4702 >= len(yyv4702) {
				yyv4702 = append(yyv4702, ContainerStatus{}) // var yyz4702 ContainerStatus
				yyc4702 = true
			}
			yyh4702.ElemContainerState(yyj4702)
			if yyj4702 < len(yyv4702) {
				if r.TryDecodeAsNil() {
					yyv4702[yyj4702] = ContainerStatus{}
				} else {
					yyv4705 := &yyv4702[yyj4702]
					yyv4705.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4702 < len(yyv4702) {
			yyv4702 = yyv4702[:yyj4702]
			yyc4702 = true
		} else if yyj4702 == 0 && yyv4702 == nil {
			yyv4702 = []ContainerStatus{}
			yyc4702 = true
		}
	}
	yyh4702.End()
	if yyc4702 {
		*v = yyv4702
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4706 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4707 := &yyv4706
		yy4707.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4708 := *v
	yyh4708, yyl4708 := z.DecSliceHelperStart()
	var yyc4708 bool
	if yyl4708 == 0 {
		if yyv4708 == nil {
			yyv4708 = []PodTemplate{}
			yyc4708 = true
		} else if len(yyv4708) != 0 {
			yyv4708 = yyv4708[:0]
			yyc4708 = true
		}
	} else if yyl4708 > 0 {
		var yyrr4708, yyrl4708 int
		var yyrt4708 bool
		if yyl4708 > cap(yyv4708) {

			yyrg4708 := len(yyv4708) > 0
			yyv24708 := yyv4708
			yyrl4708, yyrt4708 = z.DecInferLen(yyl4708, z.DecBasicHandle().MaxInitLen, 704)
			if yyrt4708 {
				if yyrl4708 <= cap(yyv4708) {
					yyv4708 = yyv4708[:yyrl4708]
				} else {
					yyv4708 = make([]PodTemplate, yyrl4708)
				}
			} else {
				yyv4708 = make([]PodTemplate, yyrl4708)
			}
			yyc4708 = true
			yyrr4708 = len(yyv4708)
			if yyrg4708 {
				copy(yyv4708, yyv24708)
			}
		} else if yyl4708 != len(yyv4708) {
			yyv4708 = yyv4708[:yyl4708]
			yyc4708 = true
		}
		yyj4708 := 0
		for ; yyj4708 < yyrr4708; yyj4708++ {
			yyh4708.ElemContainerState(yyj4708)
			if r.TryDecodeAsNil() {
				yyv4708[yyj4708] = PodTemplate{}
			} else {
				yyv4709 := &yyv4708[yyj4708]
				yyv4709.CodecDecodeSelf(d)
			}

		}
		if yyrt4708 {
			for ; yyj4708 < yyl4708; yyj4708++ {
				yyv4708 = append(yyv4708, PodTemplate{})
				yyh4708.ElemContainerState(yyj4708)
				if r.TryDecodeAsNil() {
					yyv4708[yyj4708] = PodTemplate{}
				} else {
					yyv4710 := &yyv4708[yyj4708]
					yyv4710.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4708 := 0
		for ; !r.CheckBreak(); yyj4708++ {

			if yyj4708 >= len(yyv4708) {
				yyv4708 = append(yyv4708, PodTemplate{}) // var yyz4708 PodTemplate
				yyc4708 = true
			}
			yyh4708.ElemContainerState(yyj4708)
			if yyj4708 < len(yyv4708) {
				if r.TryDecodeAsNil() {
					yyv4708[yyj4708] = PodTemplate{}
				} else {
					yyv4711 := &yyv4708[yyj4708]
					yyv4711.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4708 < len(yyv4708) {
			yyv4708 = yyv4708[:yyj4708]
			yyc4708 = true
		} else if yyj4708 == 0 && yyv4708 == nil {
			yyv4708 = []PodTemplate{}
			yyc4708 = true
		}
	}
	yyh4708.End()
	if yyc4708 {
		*v = yyv4708
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4712 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4713 := &yyv4712
		yy4713.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4714 := *v
	yyh4714, yyl4714 := z.DecSliceHelperStart()
	var yyc4714 bool
	if yyl4714 == 0 {
		if yyv4714 == nil {
			yyv4714 = []ReplicationController{}
			yyc4714 = true
		} else if len(yyv4714) != 0 {
			yyv4714 = yyv4714[:0]
			yyc4714 = true
		}
	} else if yyl4714 > 0 {
		var yyrr4714, yyrl4714 int
		var yyrt4714 bool
		if yyl4714 > cap(yyv4714) {

			yyrg4714 := len(yyv4714) > 0
			yyv24714 := yyv4714
			yyrl4714, yyrt4714 = z.DecInferLen(yyl4714, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4714 {
				if yyrl4714 <= cap(yyv4714) {
					yyv4714 = yyv4714[:yyrl4714]
				} else {
					yyv4714 = make([]ReplicationController, yyrl4714)
				}
			} else {
				yyv4714 = make([]ReplicationController, yyrl4714)
			}
			yyc4714 = true
			yyrr4714 = len(yyv4714)
			if yyrg4714 {
				copy(yyv4714, yyv24714)
			}
		} else if yyl4714 != len(yyv4714) {
			yyv4714 = yyv4714[:yyl4714]
			yyc4714 = true
		}
		yyj4714 := 0
		for ; yyj4714 < yyrr4714; yyj4714++ {
			yyh4714.ElemContainerState(yyj4714)
			if r.TryDecodeAsNil() {
				yyv4714[yyj4714] = ReplicationController{}
			} else {
				yyv4715 := &yyv4714[yyj4714]
				yyv4715.CodecDecodeSelf(d)
			}

		}
		if yyrt4714 {
			for ; yyj4714 < yyl4714; yyj4714++ {
				yyv4714 = append(yyv4714, ReplicationController{})
				yyh4714.ElemContainerState(yyj4714)
				if r.TryDecodeAsNil() {
					yyv4714[yyj4714] = ReplicationController{}
				} else {
					yyv4716 := &yyv4714[yyj4714]
					yyv4716.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4714 := 0
		for ; !r.CheckBreak(); yyj4714++ {

			if yyj4714 >= len(yyv4714) {
				yyv4714 = append(yyv4714, ReplicationController{}) // var yyz4714 ReplicationController
				yyc4714 = true
			}
			yyh4714.ElemContainerState(yyj4714)
			if yyj4714 < len(yyv4714) {
				if r.TryDecodeAsNil() {
					yyv4714[yyj4714] = ReplicationController{}
				} else {
					yyv4717 := &yyv4714[yyj4714]
					yyv4717.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4714 < len(yyv4714) {
			yyv4714 = yyv4714[:yyj4714]
			yyc4714 = true
		} else if yyj4714 == 0 && yyv4714 == nil {
			yyv4714 = []ReplicationController{}
			yyc4714 = true
		}
	}
	yyh4714.End()
	if yyc4714 {
		*v = yyv4714
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4718 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4719 := &yyv4718
		yy4719.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4720 := *v
	yyh4720, yyl4720 := z.DecSliceHelperStart()
	var yyc4720 bool
	if yyl4720 == 0 {
		if yyv4720 == nil {
			yyv4720 = []Service{}
			yyc4720 = true
		} else if len(yyv4720) != 0 {
			yyv4720 = yyv4720[:0]
			yyc4720 = true
		}
	} else if yyl4720 > 0 {
		var yyrr4720, yyrl4720 int
		var yyrt4720 bool
		if yyl4720 > cap(yyv4720) {

			yyrg4720 := len(yyv4720) > 0
			yyv24720 := yyv4720
			yyrl4720, yyrt4720 = z.DecInferLen(yyl4720, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt4720 {
				if yyrl4720 <= cap(yyv4720) {
					yyv4720 = yyv4720[:yyrl4720]
				} else {
					yyv4720 = make([]Service, yyrl4720)
				}
			} else {
				yyv4720 = make([]Service, yyrl4720)
			}
			yyc4720 = true
			yyrr4720 = len(yyv4720)
			if yyrg4720 {
				copy(yyv4720, yyv24720)
			}
		} else if yyl4720 != len(yyv4720) {
			yyv4720 = yyv4720[:yyl4720]
			yyc4720 = true
		}
		yyj4720 := 0
		for ; yyj4720 < yyrr4720; yyj4720++ {
			yyh4720.ElemContainerState(yyj4720)
			if r.TryDecodeAsNil() {
				yyv4720[yyj4720] = Service{}
			} else {
				yyv4721 := &yyv4720[yyj4720]
				yyv4721.CodecDecodeSelf(d)
			}

		}
		if yyrt4720 {
			for ; yyj4720 < yyl4720; yyj4720++ {
				yyv4720 = append(yyv4720, Service{})
				yyh4720.ElemContainerState(yyj4720)
				if r.TryDecodeAsNil() {
					yyv4720[yyj4720] = Service{}
				} else {
					yyv4722 := &yyv4720[yyj4720]
					yyv4722.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4720 := 0
		for ; !r.CheckBreak(); yyj4720++ {

			if yyj4720 >= len(yyv4720) {
				yyv4720 = append(yyv4720, Service{}) // var yyz4720 Service
				yyc4720 = true
			}
			yyh4720.ElemContainerState(yyj4720)
			if yyj4720 < len(yyv4720) {
				if r.TryDecodeAsNil() {
					yyv4720[yyj4720] = Service{}
				} else {
					yyv4723 := &yyv4720[yyj4720]
					yyv4723.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4720 < len(yyv4720) {
			yyv4720 = yyv4720[:yyj4720]
			yyc4720 = true
		} else if yyj4720 == 0 && yyv4720 == nil {
			yyv4720 = []Service{}
			yyc4720 = true
		}
	}
	yyh4720.End()
	if yyc4720 {
		*v = yyv4720
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4724 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4725 := &yyv4724
		yy4725.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4726 := *v
	yyh4726, yyl4726 := z.DecSliceHelperStart()
	var yyc4726 bool
	if yyl4726 == 0 {
		if yyv4726 == nil {
			yyv4726 = []LoadBalancerIngress{}
			yyc4726 = true
		} else if len(yyv4726) != 0 {
			yyv4726 = yyv4726[:0]
			yyc4726 = true
		}
	} else if yyl4726 > 0 {
		var yyrr4726, yyrl4726 int
		var yyrt4726 bool
		if yyl4726 > cap(yyv4726) {

			yyrg4726 := len(yyv4726) > 0
			yyv24726 := yyv4726
			yyrl4726, yyrt4726 = z.DecInferLen(yyl4726, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4726 {
				if yyrl4726 <= cap(yyv4726) {
					yyv4726 = yyv4726[:yyrl4726]
				} else {
					yyv4726 = make([]LoadBalancerIngress, yyrl4726)
				}
			} else {
				yyv4726 = make([]LoadBalancerIngress, yyrl4726)
			}
			yyc4726 = true
			yyrr4726 = len(yyv4726)
			if yyrg4726 {
				copy(yyv4726, yyv24726)
			}
		} else if yyl4726 != len(yyv4726) {
			yyv4726 = yyv4726[:yyl4726]
			yyc4726 = true
		}
		yyj4726 := 0
		for ; yyj4726 < yyrr4726; yyj4726++ {
			yyh4726.ElemContainerState(yyj4726)
			if r.TryDecodeAsNil() {
				yyv4726[yyj4726] = LoadBalancerIngress{}
			} else {
				yyv4727 := &yyv4726[yyj4726]
				yyv4727.CodecDecodeSelf(d)
			}

		}
		if yyrt4726 {
			for ; yyj4726 < yyl4726; yyj4726++ {
				yyv4726 = append(yyv4726, LoadBalancerIngress{})
				yyh4726.ElemContainerState(yyj4726)
				if r.TryDecodeAsNil() {
					yyv4726[yyj4726] = LoadBalancerIngress{}
				} else {
					yyv4728 := &yyv4726[yyj4726]
					yyv4728.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4726 := 0
		for ; !r.CheckBreak(); yyj4726++ {

			if yyj4726 >= len(yyv4726) {
				yyv4726 = append(yyv4726, LoadBalancerIngress{}) // var yyz4726 LoadBalancerIngress
				yyc4726 = true
			}
			yyh4726.ElemContainerState(yyj4726)
			if yyj4726 < len(yyv4726) {
				if r.TryDecodeAsNil() {
					yyv4726[yyj4726] = LoadBalancerIngress{}
				} else {
					yyv4729 := &yyv4726[yyj4726]
					yyv4729.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4726 < len(yyv4726) {
			yyv4726 = yyv4726[:yyj4726]
			yyc4726 = true
		} else if yyj4726 == 0 && yyv4726 == nil {
			yyv4726 = []LoadBalancerIngress{}
			yyc4726 = true
		}
	}
	yyh4726.End()
	if yyc4726 {
		*v = yyv4726
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4730 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4731 := &yyv4730
		yy4731.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4732 := *v
	yyh4732, yyl4732 := z.DecSliceHelperStart()
	var yyc4732 bool
	if yyl4732 == 0 {
		if yyv4732 == nil {
			yyv4732 = []ServicePort{}
			yyc4732 = true
		} else if len(yyv4732) != 0 {
			yyv4732 = yyv4732[:0]
			yyc4732 = true
		}
	} else if yyl4732 > 0 {
		var yyrr4732, yyrl4732 int
		var yyrt4732 bool
		if yyl4732 > cap(yyv4732) {

			yyrg4732 := len(yyv4732) > 0
			yyv24732 := yyv4732
			yyrl4732, yyrt4732 = z.DecInferLen(yyl4732, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4732 {
				if yyrl4732 <= cap(yyv4732) {
					yyv4732 = yyv4732[:yyrl4732]
				} else {
					yyv4732 = make([]ServicePort, yyrl4732)
				}
			} else {
				yyv4732 = make([]ServicePort, yyrl4732)
			}
			yyc4732 = true
			yyrr4732 = len(yyv4732)
			if yyrg4732 {
				copy(yyv4732, yyv24732)
			}
		} else if yyl4732 != len(yyv4732) {
			yyv4732 = yyv4732[:yyl4732]
			yyc4732 = true
		}
		yyj4732 := 0
		for ; yyj4732 < yyrr4732; yyj4732++ {
			yyh4732.ElemContainerState(yyj4732)
			if r.TryDecodeAsNil() {
				yyv4732[yyj4732] = ServicePort{}
			} else {
				yyv4733 := &yyv4732[yyj4732]
				yyv4733.CodecDecodeSelf(d)
			}

		}
		if yyrt4732 {
			for ; yyj4732 < yyl4732; yyj4732++ {
				yyv4732 = append(yyv4732, ServicePort{})
				yyh4732.ElemContainerState(yyj4732)
				if r.TryDecodeAsNil() {
					yyv4732[yyj4732] = ServicePort{}
				} else {
					yyv4734 := &yyv4732[yyj4732]
					yyv4734.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4732 := 0
		for ; !r.CheckBreak(); yyj4732++ {

			if yyj4732 >= len(yyv4732) {
				yyv4732 = append(yyv4732, ServicePort{}) // var yyz4732 ServicePort
				yyc4732 = true
			}
			yyh4732.ElemContainerState(yyj4732)
			if yyj4732 < len(yyv4732) {
				if r.TryDecodeAsNil() {
					yyv4732[yyj4732] = ServicePort{}
				} else {
					yyv4735 := &yyv4732[yyj4732]
					yyv4735.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4732 < len(yyv4732) {
			yyv4732 = yyv4732[:yyj4732]
			yyc4732 = true
		} else if yyj4732 == 0 && yyv4732 == nil {
			yyv4732 = []ServicePort{}
			yyc4732 = true
		}
	}
	yyh4732.End()
	if yyc4732 {
		*v = yyv4732
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4736 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4737 := &yyv4736
		yy4737.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4738 := *v
	yyh4738, yyl4738 := z.DecSliceHelperStart()
	var yyc4738 bool
	if yyl4738 == 0 {
		if yyv4738 == nil {
			yyv4738 = []ObjectReference{}
			yyc4738 = true
		} else if len(yyv4738) != 0 {
			yyv4738 = yyv4738[:0]
			yyc4738 = true
		}
	} else if yyl4738 > 0 {
		var yyrr4738, yyrl4738 int
		var yyrt4738 bool
		if yyl4738 > cap(yyv4738) {

			yyrg4738 := len(yyv4738) > 0
			yyv24738 := yyv4738
			yyrl4738, yyrt4738 = z.DecInferLen(yyl4738, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4738 {
				if yyrl4738 <= cap(yyv4738) {
					yyv4738 = yyv4738[:yyrl4738]
				} else {
					yyv4738 = make([]ObjectReference, yyrl4738)
				}
			} else {
				yyv4738 = make([]ObjectReference, yyrl4738)
			}
			yyc4738 = true
			yyrr4738 = len(yyv4738)
			if yyrg4738 {
				copy(yyv4738, yyv24738)
			}
		} else if yyl4738 != len(yyv4738) {
			yyv4738 = yyv4738[:yyl4738]
			yyc4738 = true
		}
		yyj4738 := 0
		for ; yyj4738 < yyrr4738; yyj4738++ {
			yyh4738.ElemContainerState(yyj4738)
			if r.TryDecodeAsNil() {
				yyv4738[yyj4738] = ObjectReference{}
			} else {
				yyv4739 := &yyv4738[yyj4738]
				yyv4739.CodecDecodeSelf(d)
			}

		}
		if yyrt4738 {
			for ; yyj4738 < yyl4738; yyj4738++ {
				yyv4738 = append(yyv4738, ObjectReference{})
				yyh4738.ElemContainerState(yyj4738)
				if r.TryDecodeAsNil() {
					yyv4738[yyj4738] = ObjectReference{}
				} else {
					yyv4740 := &yyv4738[yyj4738]
					yyv4740.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4738 := 0
		for ; !r.CheckBreak(); yyj4738++ {

			if yyj4738 >= len(yyv4738) {
				yyv4738 = append(yyv4738, ObjectReference{}) // var yyz4738 ObjectReference
				yyc4738 = true
			}
			yyh4738.ElemContainerState(yyj4738)
			if yyj4738 < len(yyv4738) {
				if r.TryDecodeAsNil() {
					yyv4738[yyj4738] = ObjectReference{}
				} else {
					yyv4741 := &yyv4738[yyj4738]
					yyv4741.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4738 < len(yyv4738) {
			yyv4738 = yyv4738[:yyj4738]
			yyc4738 = true
		} else if yyj4738 == 0 && yyv4738 == nil {
			yyv4738 = []ObjectReference{}
			yyc4738 = true
		}
	}
	yyh4738.End()
	if yyc4738 {
		*v = yyv4738
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4742 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4743 := &yyv4742
		yy4743.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4744 := *v
	yyh4744, yyl4744 := z.DecSliceHelperStart()
	var yyc4744 bool
	if yyl4744 == 0 {
		if yyv4744 == nil {
			yyv4744 = []ServiceAccount{}
			yyc4744 = true
		} else if len(yyv4744) != 0 {
			yyv4744 = yyv4744[:0]
			yyc4744 = true
		}
	} else if yyl4744 > 0 {
		var yyrr4744, yyrl4744 int
		var yyrt4744 bool
		if yyl4744 > cap(yyv4744) {

			yyrg4744 := len(yyv4744) > 0
			yyv24744 := yyv4744
			yyrl4744, yyrt4744 = z.DecInferLen(yyl4744, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4744 {
				if yyrl4744 <= cap(yyv4744) {
					yyv4744 = yyv4744[:yyrl4744]
				} else {
					yyv4744 = make([]ServiceAccount, yyrl4744)
				}
			} else {
				yyv4744 = make([]ServiceAccount, yyrl4744)
			}
			yyc4744 = true
			yyrr4744 = len(yyv4744)
			if yyrg4744 {
				copy(yyv4744, yyv24744)
			}
		} else if yyl4744 != len(yyv4744) {
			yyv4744 = yyv4744[:yyl4744]
			yyc4744 = true
		}
		yyj4744 := 0
		for ; yyj4744 < yyrr4744; yyj4744++ {
			yyh4744.ElemContainerState(yyj4744)
			if r.TryDecodeAsNil() {
				yyv4744[yyj4744] = ServiceAccount{}
			} else {
				yyv4745 := &yyv4744[yyj4744]
				yyv4745.CodecDecodeSelf(d)
			}

		}
		if yyrt4744 {
			for ; yyj4744 < yyl4744; yyj4744++ {
				yyv4744 = append(yyv4744, ServiceAccount{})
				yyh4744.ElemContainerState(yyj4744)
				if r.TryDecodeAsNil() {
					yyv4744[yyj4744] = ServiceAccount{}
				} else {
					yyv4746 := &yyv4744[yyj4744]
					yyv4746.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4744 := 0
		for ; !r.CheckBreak(); yyj4744++ {

			if yyj4744 >= len(yyv4744) {
				yyv4744 = append(yyv4744, ServiceAccount{}) // var yyz4744 ServiceAccount
				yyc4744 = true
			}
			yyh4744.ElemContainerState(yyj4744)
			if yyj4744 < len(yyv4744) {
				if r.TryDecodeAsNil() {
					yyv4744[yyj4744] = ServiceAccount{}
				} else {
					yyv4747 := &yyv4744[yyj4744]
					yyv4747.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4744 < len(yyv4744) {
			yyv4744 = yyv4744[:yyj4744]
			yyc4744 = true
		} else if yyj4744 == 0 && yyv4744 == nil {
			yyv4744 = []ServiceAccount{}
			yyc4744 = true
		}
	}
	yyh4744.End()
	if yyc4744 {
		*v = yyv4744
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4748 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4749 := &yyv4748
		yy4749.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4750 := *v
	yyh4750, yyl4750 := z.DecSliceHelperStart()
	var yyc4750 bool
	if yyl4750 == 0 {
		if yyv4750 == nil {
			yyv4750 = []EndpointSubset{}
			yyc4750 = true
		} else if len(yyv4750) != 0 {
			yyv4750 = yyv4750[:0]
			yyc4750 = true
		}
	} else if yyl4750 > 0 {
		var yyrr4750, yyrl4750 int
		var yyrt4750 bool
		if yyl4750 > cap(yyv4750) {

			yyrg4750 := len(yyv4750) > 0
			yyv24750 := yyv4750
			yyrl4750, yyrt4750 = z.DecInferLen(yyl4750, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4750 {
				if yyrl4750 <= cap(yyv4750) {
					yyv4750 = yyv4750[:yyrl4750]
				} else {
					yyv4750 = make([]EndpointSubset, yyrl4750)
				}
			} else {
				yyv4750 = make([]EndpointSubset, yyrl4750)
			}
			yyc4750 = true
			yyrr4750 = len(yyv4750)
			if yyrg4750 {
				copy(yyv4750, yyv24750)
			}
		} else if yyl4750 != len(yyv4750) {
			yyv4750 = yyv4750[:yyl4750]
			yyc4750 = true
		}
		yyj4750 := 0
		for ; yyj4750 < yyrr4750; yyj4750++ {
			yyh4750.ElemContainerState(yyj4750)
			if r.TryDecodeAsNil() {
				yyv4750[yyj4750] = EndpointSubset{}
			} else {
				yyv4751 := &yyv4750[yyj4750]
				yyv4751.CodecDecodeSelf(d)
			}

		}
		if yyrt4750 {
			for ; yyj4750 < yyl4750; yyj4750++ {
				yyv4750 = append(yyv4750, EndpointSubset{})
				yyh4750.ElemContainerState(yyj4750)
				if r.TryDecodeAsNil() {
					yyv4750[yyj4750] = EndpointSubset{}
				} else {
					yyv4752 := &yyv4750[yyj4750]
					yyv4752.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4750 := 0
		for ; !r.CheckBreak(); yyj4750++ {

			if yyj4750 >= len(yyv4750) {
				yyv4750 = append(yyv4750, EndpointSubset{}) // var yyz4750 EndpointSubset
				yyc4750 = true
			}
			yyh4750.ElemContainerState(yyj4750)
			if yyj4750 < len(yyv4750) {
				if r.TryDecodeAsNil() {
					yyv4750[yyj4750] = EndpointSubset{}
				} else {
					yyv4753 := &yyv4750[yyj4750]
					yyv4753.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4750 < len(yyv4750) {
			yyv4750 = yyv4750[:yyj4750]
			yyc4750 = true
		} else if yyj4750 == 0 && yyv4750 == nil {
			yyv4750 = []EndpointSubset{}
			yyc4750 = true
		}
	}
	yyh4750.End()
	if yyc4750 {
		*v = yyv4750
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4754 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4755 := &yyv4754
		yy4755.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4756 := *v
	yyh4756, yyl4756 := z.DecSliceHelperStart()
	var yyc4756 bool
	if yyl4756 == 0 {
		if yyv4756 == nil {
			yyv4756 = []EndpointAddress{}
			yyc4756 = true
		} else if len(yyv4756) != 0 {
			yyv4756 = yyv4756[:0]
			yyc4756 = true
		}
	} else if yyl4756 > 0 {
		var yyrr4756, yyrl4756 int
		var yyrt4756 bool
		if yyl4756 > cap(yyv4756) {

			yyrg4756 := len(yyv4756) > 0
			yyv24756 := yyv4756
			yyrl4756, yyrt4756 = z.DecInferLen(yyl4756, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4756 {
				if yyrl4756 <= cap(yyv4756) {
					yyv4756 = yyv4756[:yyrl4756]
				} else {
					yyv4756 = make([]EndpointAddress, yyrl4756)
				}
			} else {
				yyv4756 = make([]EndpointAddress, yyrl4756)
			}
			yyc4756 = true
			yyrr4756 = len(yyv4756)
			if yyrg4756 {
				copy(yyv4756, yyv24756)
			}
		} else if yyl4756 != len(yyv4756) {
			yyv4756 = yyv4756[:yyl4756]
			yyc4756 = true
		}
		yyj4756 := 0
		for ; yyj4756 < yyrr4756; yyj4756++ {
			yyh4756.ElemContainerState(yyj4756)
			if r.TryDecodeAsNil() {
				yyv4756[yyj4756] = EndpointAddress{}
			} else {
				yyv4757 := &yyv4756[yyj4756]
				yyv4757.CodecDecodeSelf(d)
			}

		}
		if yyrt4756 {
			for ; yyj4756 < yyl4756; yyj4756++ {
				yyv4756 = append(yyv4756, EndpointAddress{})
				yyh4756.ElemContainerState(yyj4756)
				if r.TryDecodeAsNil() {
					yyv4756[yyj4756] = EndpointAddress{}
				} else {
					yyv4758 := &yyv4756[yyj4756]
					yyv4758.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4756 := 0
		for ; !r.CheckBreak(); yyj4756++ {

			if yyj4756 >= len(yyv4756) {
				yyv4756 = append(yyv4756, EndpointAddress{}) // var yyz4756 EndpointAddress
				yyc4756 = true
			}
			yyh4756.ElemContainerState(yyj4756)
			if yyj4756 < len(yyv4756) {
				if r.TryDecodeAsNil() {
					yyv4756[yyj4756] = EndpointAddress{}
				} else {
					yyv4759 := &yyv4756[yyj4756]
					yyv4759.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4756 < len(yyv4756) {
			yyv4756 = yyv4756[:yyj4756]
			yyc4756 = true
		} else if yyj4756 == 0 && yyv4756 == nil {
			yyv4756 = []EndpointAddress{}
			yyc4756 = true
		}
	}
	yyh4756.End()
	if yyc4756 {
		*v = yyv4756
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4760 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4761 := &yyv4760
		yy4761.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4762 := *v
	yyh4762, yyl4762 := z.DecSliceHelperStart()
	var yyc4762 bool
	if yyl4762 == 0 {
		if yyv4762 == nil {
			yyv4762 = []EndpointPort{}
			yyc4762 = true
		} else if len(yyv4762) != 0 {
			yyv4762 = yyv4762[:0]
			yyc4762 = true
		}
	} else if yyl4762 > 0 {
		var yyrr4762, yyrl4762 int
		var yyrt4762 bool
		if yyl4762 > cap(yyv4762) {

			yyrg4762 := len(yyv4762) > 0
			yyv24762 := yyv4762
			yyrl4762, yyrt4762 = z.DecInferLen(yyl4762, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4762 {
				if yyrl4762 <= cap(yyv4762) {
					yyv4762 = yyv4762[:yyrl4762]
				} else {
					yyv4762 = make([]EndpointPort, yyrl4762)
				}
			} else {
				yyv4762 = make([]EndpointPort, yyrl4762)
			}
			yyc4762 = true
			yyrr4762 = len(yyv4762)
			if yyrg4762 {
				copy(yyv4762, yyv24762)
			}
		} else if yyl4762 != len(yyv4762) {
			yyv4762 = yyv4762[:yyl4762]
			yyc4762 = true
		}
		yyj4762 := 0
		for ; yyj4762 < yyrr4762; yyj4762++ {
			yyh4762.ElemContainerState(yyj4762)
			if r.TryDecodeAsNil() {
				yyv4762[yyj4762] = EndpointPort{}
			} else {
				yyv4763 := &yyv4762[yyj4762]
				yyv4763.CodecDecodeSelf(d)
			}

		}
		if yyrt4762 {
			for ; yyj4762 < yyl4762; yyj4762++ {
				yyv4762 = append(yyv4762, EndpointPort{})
				yyh4762.ElemContainerState(yyj4762)
				if r.TryDecodeAsNil() {
					yyv4762[yyj4762] = EndpointPort{}
				} else {
					yyv4764 := &yyv4762[yyj4762]
					yyv4764.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4762 := 0
		for ; !r.CheckBreak(); yyj4762++ {

			if yyj4762 >= len(yyv4762) {
				yyv4762 = append(yyv4762, EndpointPort{}) // var yyz4762 EndpointPort
				yyc4762 = true
			}
			yyh4762.ElemContainerState(yyj4762)
			if yyj4762 < len(yyv4762) {
				if r.TryDecodeAsNil() {
					yyv4762[yyj4762] = EndpointPort{}
				} else {
					yyv4765 := &yyv4762[yyj4762]
					yyv4765.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4762 < len(yyv4762) {
			yyv4762 = yyv4762[:yyj4762]
			yyc4762 = true
		} else if yyj4762 == 0 && yyv4762 == nil {
			yyv4762 = []EndpointPort{}
			yyc4762 = true
		}
	}
	yyh4762.End()
	if yyc4762 {
		*v = yyv4762
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4766 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4767 := &yyv4766
		yy4767.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4768 := *v
	yyh4768, yyl4768 := z.DecSliceHelperStart()
	var yyc4768 bool
	if yyl4768 == 0 {
		if yyv4768 == nil {
			yyv4768 = []Endpoints{}
			yyc4768 = true
		} else if len(yyv4768) != 0 {
			yyv4768 = yyv4768[:0]
			yyc4768 = true
		}
	} else if yyl4768 > 0 {
		var yyrr4768, yyrl4768 int
		var yyrt4768 bool
		if yyl4768 > cap(yyv4768) {

			yyrg4768 := len(yyv4768) > 0
			yyv24768 := yyv4768
			yyrl4768, yyrt4768 = z.DecInferLen(yyl4768, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4768 {
				if yyrl4768 <= cap(yyv4768) {
					yyv4768 = yyv4768[:yyrl4768]
				} else {
					yyv4768 = make([]Endpoints, yyrl4768)
				}
			} else {
				yyv4768 = make([]Endpoints, yyrl4768)
			}
			yyc4768 = true
			yyrr4768 = len(yyv4768)
			if yyrg4768 {
				copy(yyv4768, yyv24768)
			}
		} else if yyl4768 != len(yyv4768) {
			yyv4768 = yyv4768[:yyl4768]
			yyc4768 = true
		}
		yyj4768 := 0
		for ; yyj4768 < yyrr4768; yyj4768++ {
			yyh4768.ElemContainerState(yyj4768)
			if r.TryDecodeAsNil() {
				yyv4768[yyj4768] = Endpoints{}
			} else {
				yyv4769 := &yyv4768[yyj4768]
				yyv4769.CodecDecodeSelf(d)
			}

		}
		if yyrt4768 {
			for ; yyj4768 < yyl4768; yyj4768++ {
				yyv4768 = append(yyv4768, Endpoints{})
				yyh4768.ElemContainerState(yyj4768)
				if r.TryDecodeAsNil() {
					yyv4768[yyj4768] = Endpoints{}
				} else {
					yyv4770 := &yyv4768[yyj4768]
					yyv4770.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4768 := 0
		for ; !r.CheckBreak(); yyj4768++ {

			if yyj4768 >= len(yyv4768) {
				yyv4768 = append(yyv4768, Endpoints{}) // var yyz4768 Endpoints
				yyc4768 = true
			}
			yyh4768.ElemContainerState(yyj4768)
			if yyj4768 < len(yyv4768) {
				if r.TryDecodeAsNil() {
					yyv4768[yyj4768] = Endpoints{}
				} else {
					yyv4771 := &yyv4768[yyj4768]
					yyv4771.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4768 < len(yyv4768) {
			yyv4768 = yyv4768[:yyj4768]
			yyc4768 = true
		} else if yyj4768 == 0 && yyv4768 == nil {
			yyv4768 = []Endpoints{}
			yyc4768 = true
		}
	}
	yyh4768.End()
	if yyc4768 {
		*v = yyv4768
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4772 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4773 := &yyv4772
		yy4773.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4774 := *v
	yyh4774, yyl4774 := z.DecSliceHelperStart()
	var yyc4774 bool
	if yyl4774 == 0 {
		if yyv4774 == nil {
			yyv4774 = []NodeCondition{}
			yyc4774 = true
		} else if len(yyv4774) != 0 {
			yyv4774 = yyv4774[:0]
			yyc4774 = true
		}
	} else if yyl4774 > 0 {
		var yyrr4774, yyrl4774 int
		var yyrt4774 bool
		if yyl4774 > cap(yyv4774) {

			yyrg4774 := len(yyv4774) > 0
			yyv24774 := yyv4774
			yyrl4774, yyrt4774 = z.DecInferLen(yyl4774, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4774 {
				if yyrl4774 <= cap(yyv4774) {
					yyv4774 = yyv4774[:yyrl4774]
				} else {
					yyv4774 = make([]NodeCondition, yyrl4774)
				}
			} else {
				yyv4774 = make([]NodeCondition, yyrl4774)
			}
			yyc4774 = true
			yyrr4774 = len(yyv4774)
			if yyrg4774 {
				copy(yyv4774, yyv24774)
			}
		} else if yyl4774 != len(yyv4774) {
			yyv4774 = yyv4774[:yyl4774]
			yyc4774 = true
		}
		yyj4774 := 0
		for ; yyj4774 < yyrr4774; yyj4774++ {
			yyh4774.ElemContainerState(yyj4774)
			if r.TryDecodeAsNil() {
				yyv4774[yyj4774] = NodeCondition{}
			} else {
				yyv4775 := &yyv4774[yyj4774]
				yyv4775.CodecDecodeSelf(d)
			}

		}
		if yyrt4774 {
			for ; yyj4774 < yyl4774; yyj4774++ {
				yyv4774 = append(yyv4774, NodeCondition{})
				yyh4774.ElemContainerState(yyj4774)
				if r.TryDecodeAsNil() {
					yyv4774[yyj4774] = NodeCondition{}
				} else {
					yyv4776 := &yyv4774[yyj4774]
					yyv4776.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4774 := 0
		for ; !r.CheckBreak(); yyj4774++ {

			if yyj4774 >= len(yyv4774) {
				yyv4774 = append(yyv4774, NodeCondition{}) // var yyz4774 NodeCondition
				yyc4774 = true
			}
			yyh4774.ElemContainerState(yyj4774)
			if yyj4774 < len(yyv4774) {
				if r.TryDecodeAsNil() {
					yyv4774[yyj4774] = NodeCondition{}
				} else {
					yyv4777 := &yyv4774[yyj4774]
					yyv4777.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4774 < len(yyv4774) {
			yyv4774 = yyv4774[:yyj4774]
			yyc4774 = true
		} else if yyj4774 == 0 && yyv4774 == nil {
			yyv4774 = []NodeCondition{}
			yyc4774 = true
		}
	}
	yyh4774.End()
	if yyc4774 {
		*v = yyv4774
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4778 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4779 := &yyv4778
		yy4779.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4780 := *v
	yyh4780, yyl4780 := z.DecSliceHelperStart()
	var yyc4780 bool
	if yyl4780 == 0 {
		if yyv4780 == nil {
			yyv4780 = []NodeAddress{}
			yyc4780 = true
		} else if len(yyv4780) != 0 {
			yyv4780 = yyv4780[:0]
			yyc4780 = true
		}
	} else if yyl4780 > 0 {
		var yyrr4780, yyrl4780 int
		var yyrt4780 bool
		if yyl4780 > cap(yyv4780) {

			yyrg4780 := len(yyv4780) > 0
			yyv24780 := yyv4780
			yyrl4780, yyrt4780 = z.DecInferLen(yyl4780, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4780 {
				if yyrl4780 <= cap(yyv4780) {
					yyv4780 = yyv4780[:yyrl4780]
				} else {
					yyv4780 = make([]NodeAddress, yyrl4780)
				}
			} else {
				yyv4780 = make([]NodeAddress, yyrl4780)
			}
			yyc4780 = true
			yyrr4780 = len(yyv4780)
			if yyrg4780 {
				copy(yyv4780, yyv24780)
			}
		} else if yyl4780 != len(yyv4780) {
			yyv4780 = yyv4780[:yyl4780]
			yyc4780 = true
		}
		yyj4780 := 0
		for ; yyj4780 < yyrr4780; yyj4780++ {
			yyh4780.ElemContainerState(yyj4780)
			if r.TryDecodeAsNil() {
				yyv4780[yyj4780] = NodeAddress{}
			} else {
				yyv4781 := &yyv4780[yyj4780]
				yyv4781.CodecDecodeSelf(d)
			}

		}
		if yyrt4780 {
			for ; yyj4780 < yyl4780; yyj4780++ {
				yyv4780 = append(yyv4780, NodeAddress{})
				yyh4780.ElemContainerState(yyj4780)
				if r.TryDecodeAsNil() {
					yyv4780[yyj4780] = NodeAddress{}
				} else {
					yyv4782 := &yyv4780[yyj4780]
					yyv4782.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4780 := 0
		for ; !r.CheckBreak(); yyj4780++ {

			if yyj4780 >= len(yyv4780) {
				yyv4780 = append(yyv4780, NodeAddress{}) // var yyz4780 NodeAddress
				yyc4780 = true
			}
			yyh4780.ElemContainerState(yyj4780)
			if yyj4780 < len(yyv4780) {
				if r.TryDecodeAsNil() {
					yyv4780[yyj4780] = NodeAddress{}
				} else {
					yyv4783 := &yyv4780[yyj4780]
					yyv4783.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4780 < len(yyv4780) {
			yyv4780 = yyv4780[:yyj4780]
			yyc4780 = true
		} else if yyj4780 == 0 && yyv4780 == nil {
			yyv4780 = []NodeAddress{}
			yyc4780 = true
		}
	}
	yyh4780.End()
	if yyc4780 {
		*v = yyv4780
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4784 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4785 := &yyv4784
		yy4785.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4786 := *v
	yyh4786, yyl4786 := z.DecSliceHelperStart()
	var yyc4786 bool
	if yyl4786 == 0 {
		if yyv4786 == nil {
			yyv4786 = []ContainerImage{}
			yyc4786 = true
		} else if len(yyv4786) != 0 {
			yyv4786 = yyv4786[:0]
			yyc4786 = true
		}
	} else if yyl4786 > 0 {
		var yyrr4786, yyrl4786 int
		var yyrt4786 bool
		if yyl4786 > cap(yyv4786) {

			yyrg4786 := len(yyv4786) > 0
			yyv24786 := yyv4786
			yyrl4786, yyrt4786 = z.DecInferLen(yyl4786, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4786 {
				if yyrl4786 <= cap(yyv4786) {
					yyv4786 = yyv4786[:yyrl4786]
				} else {
					yyv4786 = make([]ContainerImage, yyrl4786)
				}
			} else {
				yyv4786 = make([]ContainerImage, yyrl4786)
			}
			yyc4786 = true
			yyrr4786 = len(yyv4786)
			if yyrg4786 {
				copy(yyv4786, yyv24786)
			}
		} else if yyl4786 != len(yyv4786) {
			yyv4786 = yyv4786[:yyl4786]
			yyc4786 = true
		}
		yyj4786 := 0
		for ; yyj4786 < yyrr4786; yyj4786++ {
			yyh4786.ElemContainerState(yyj4786)
			if r.TryDecodeAsNil() {
				yyv4786[yyj4786] = ContainerImage{}
			} else {
				yyv4787 := &yyv4786[yyj4786]
				yyv4787.CodecDecodeSelf(d)
			}

		}
		if yyrt4786 {
			for ; yyj4786 < yyl4786; yyj4786++ {
				yyv4786 = append(yyv4786, ContainerImage{})
				yyh4786.ElemContainerState(yyj4786)
				if r.TryDecodeAsNil() {
					yyv4786[yyj4786] = ContainerImage{}
				} else {
					yyv4788 := &yyv4786[yyj4786]
					yyv4788.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4786 := 0
		for ; !r.CheckBreak(); yyj4786++ {

			if yyj4786 >= len(yyv4786) {
				yyv4786 = append(yyv4786, ContainerImage{}) // var yyz4786 ContainerImage
				yyc4786 = true
			}
			yyh4786.ElemContainerState(yyj4786)
			if yyj4786 < len(yyv4786) {
				if r.TryDecodeAsNil() {
					yyv4786[yyj4786] = ContainerImage{}
				} else {
					yyv4789 := &yyv4786[yyj4786]
					yyv4789.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4786 < len(yyv4786) {
			yyv4786 = yyv4786[:yyj4786]
			yyc4786 = true
		} else if yyj4786 == 0 && yyv4786 == nil {
			yyv4786 = []ContainerImage{}
			yyc4786 = true
		}
	}
	yyh4786.End()
	if yyc4786 {
		*v = yyv4786
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4790 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4790.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4791 := *v
	yyh4791, yyl4791 := z.DecSliceHelperStart()
	var yyc4791 bool
	if yyl4791 == 0 {
		if yyv4791 == nil {
			yyv4791 = []UniqueVolumeName{}
			yyc4791 = true
		} else if len(yyv4791) != 0 {
			yyv4791 = yyv4791[:0]
			yyc4791 = true
		}
	} else if yyl4791 > 0 {
		var yyrr4791, yyrl4791 int
		var yyrt4791 bool
		if yyl4791 > cap(yyv4791) {

			yyrl4791, yyrt4791 = z.DecInferLen(yyl4791, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4791 {
				if yyrl4791 <= cap(yyv4791) {
					yyv4791 = yyv4791[:yyrl4791]
				} else {
					yyv4791 = make([]UniqueVolumeName, yyrl4791)
				}
			} else {
				yyv4791 = make([]UniqueVolumeName, yyrl4791)
			}
			yyc4791 = true
			yyrr4791 = len(yyv4791)
		} else if yyl4791 != len(yyv4791) {
			yyv4791 = yyv4791[:yyl4791]
			yyc4791 = true
		}
		yyj4791 := 0
		for ; yyj4791 < yyrr4791; yyj4791++ {
			yyh4791.ElemContainerState(yyj4791)
			if r.TryDecodeAsNil() {
				yyv4791[yyj4791] = ""
			} else {
				yyv4791[yyj4791] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4791 {
			for ; yyj4791 < yyl4791; yyj4791++ {
				yyv4791 = append(yyv4791, "")
				yyh4791.ElemContainerState(yyj4791)
				if r.TryDecodeAsNil() {
					yyv4791[yyj4791] = ""
				} else {
					yyv4791[yyj4791] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4791 := 0
		for ; !r.CheckBreak(); yyj4791++ {

			if yyj4791 >= len(yyv4791) {
				yyv4791 = append(yyv4791, "") // var yyz4791 UniqueVolumeName
				yyc4791 = true
			}
			yyh4791.ElemContainerState(yyj4791)
			if yyj4791 < len(yyv4791) {
				if r.TryDecodeAsNil() {
					yyv4791[yyj4791] = ""
				} else {
					yyv4791[yyj4791] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4791 < len(yyv4791) {
			yyv4791 = yyv4791[:yyj4791]
			yyc4791 = true
		} else if yyj4791 == 0 && yyv4791 == nil {
			yyv4791 = []UniqueVolumeName{}
			yyc4791 = true
		}
	}
	yyh4791.End()
	if yyc4791 {
		*v = yyv4791
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4795 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4796 := &yyv4795
		yy4796.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4797 := *v
	yyh4797, yyl4797 := z.DecSliceHelperStart()
	var yyc4797 bool
	if yyl4797 == 0 {
		if yyv4797 == nil {
			yyv4797 = []AttachedVolume{}
			yyc4797 = true
		} else if len(yyv4797) != 0 {
			yyv4797 = yyv4797[:0]
			yyc4797 = true
		}
	} else if yyl4797 > 0 {
		var yyrr4797, yyrl4797 int
		var yyrt4797 bool
		if yyl4797 > cap(yyv4797) {

			yyrg4797 := len(yyv4797) > 0
			yyv24797 := yyv4797
			yyrl4797, yyrt4797 = z.DecInferLen(yyl4797, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4797 {
				if yyrl4797 <= cap(yyv4797) {
					yyv4797 = yyv4797[:yyrl4797]
				} else {
					yyv4797 = make([]AttachedVolume, yyrl4797)
				}
			} else {
				yyv4797 = make([]AttachedVolume, yyrl4797)
			}
			yyc4797 = true
			yyrr4797 = len(yyv4797)
			if yyrg4797 {
				copy(yyv4797, yyv24797)
			}
		} else if yyl4797 != len(yyv4797) {
			yyv4797 = yyv4797[:yyl4797]
			yyc4797 = true
		}
		yyj4797 := 0
		for ; yyj4797 < yyrr4797; yyj4797++ {
			yyh4797.ElemContainerState(yyj4797)
			if r.TryDecodeAsNil() {
				yyv4797[yyj4797] = AttachedVolume{}
			} else {
				yyv4798 := &yyv4797[yyj4797]
				yyv4798.CodecDecodeSelf(d)
			}

		}
		if yyrt4797 {
			for ; yyj4797 < yyl4797; yyj4797++ {
				yyv4797 = append(yyv4797, AttachedVolume{})
				yyh4797.ElemContainerState(yyj4797)
				if r.TryDecodeAsNil() {
					yyv4797[yyj4797] = AttachedVolume{}
				} else {
					yyv4799 := &yyv4797[yyj4797]
					yyv4799.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4797 := 0
		for ; !r.CheckBreak(); yyj4797++ {

			if yyj4797 >= len(yyv4797) {
				yyv4797 = append(yyv4797, AttachedVolume{}) // var yyz4797 AttachedVolume
				yyc4797 = true
			}
			yyh4797.ElemContainerState(yyj4797)
			if yyj4797 < len(yyv4797) {
				if r.TryDecodeAsNil() {
					yyv4797[yyj4797] = AttachedVolume{}
				} else {
					yyv4800 := &yyv4797[yyj4797]
					yyv4800.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4797 < len(yyv4797) {
			yyv4797 = yyv4797[:yyj4797]
			yyc4797 = true
		} else if yyj4797 == 0 && yyv4797 == nil {
			yyv4797 = []AttachedVolume{}
			yyc4797 = true
		}
	}
	yyh4797.End()
	if yyc4797 {
		*v = yyv4797
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4801 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4802 := &yyv4801
		yy4802.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4803 := *v
	yyh4803, yyl4803 := z.DecSliceHelperStart()
	var yyc4803 bool
	if yyl4803 == 0 {
		if yyv4803 == nil {
			yyv4803 = []PreferAvoidPodsEntry{}
			yyc4803 = true
		} else if len(yyv4803) != 0 {
			yyv4803 = yyv4803[:0]
			yyc4803 = true
		}
	} else if yyl4803 > 0 {
		var yyrr4803, yyrl4803 int
		var yyrt4803 bool
		if yyl4803 > cap(yyv4803) {

			yyrg4803 := len(yyv4803) > 0
			yyv24803 := yyv4803
			yyrl4803, yyrt4803 = z.DecInferLen(yyl4803, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4803 {
				if yyrl4803 <= cap(yyv4803) {
					yyv4803 = yyv4803[:yyrl4803]
				} else {
					yyv4803 = make([]PreferAvoidPodsEntry, yyrl4803)
				}
			} else {
				yyv4803 = make([]PreferAvoidPodsEntry, yyrl4803)
			}
			yyc4803 = true
			yyrr4803 = len(yyv4803)
			if yyrg4803 {
				copy(yyv4803, yyv24803)
			}
		} else if yyl4803 != len(yyv4803) {
			yyv4803 = yyv4803[:yyl4803]
			yyc4803 = true
		}
		yyj4803 := 0
		for ; yyj4803 < yyrr4803; yyj4803++ {
			yyh4803.ElemContainerState(yyj4803)
			if r.TryDecodeAsNil() {
				yyv4803[yyj4803] = PreferAvoidPodsEntry{}
			} else {
				yyv4804 := &yyv4803[yyj4803]
				yyv4804.CodecDecodeSelf(d)
			}

		}
		if yyrt4803 {
			for ; yyj4803 < yyl4803; yyj4803++ {
				yyv4803 = append(yyv4803, PreferAvoidPodsEntry{})
				yyh4803.ElemContainerState(yyj4803)
				if r.TryDecodeAsNil() {
					yyv4803[yyj4803] = PreferAvoidPodsEntry{}
				} else {
					yyv4805 := &yyv4803[yyj4803]
					yyv4805.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4803 := 0
		for ; !r.CheckBreak(); yyj4803++ {

			if yyj4803 >= len(yyv4803) {
				yyv4803 = append(yyv4803, PreferAvoidPodsEntry{}) // var yyz4803 PreferAvoidPodsEntry
				yyc4803 = true
			}
			yyh4803.ElemContainerState(yyj4803)
			if yyj4803 < len(yyv4803) {
				if r.TryDecodeAsNil() {
					yyv4803[yyj4803] = PreferAvoidPodsEntry{}
				} else {
					yyv4806 := &yyv4803[yyj4803]
					yyv4806.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4803 < len(yyv4803) {
			yyv4803 = yyv4803[:yyj4803]
			yyc4803 = true
		} else if yyj4803 == 0 && yyv4803 == nil {
			yyv4803 = []PreferAvoidPodsEntry{}
			yyc4803 = true
		}
	}
	yyh4803.End()
	if yyc4803 {
		*v = yyv4803
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4807, yyv4807 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4807.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4808 := &yyv4807
		yym4809 := z.EncBinary()
		_ = yym4809
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4808) {
		} else if !yym4809 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4808)
		} else {
			z.EncFallback(yy4808)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4810 := *v
	yyl4810 := r.ReadMapStart()
	yybh4810 := z.DecBasicHandle()
	if yyv4810 == nil {
		yyrl4810, _ := z.DecInferLen(yyl4810, yybh4810.MaxInitLen, 72)
		yyv4810 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4810)
		*v = yyv4810
	}
	var yymk4810 ResourceName
	var yymv4810 pkg3_resource.Quantity
	var yymg4810 bool
	if yybh4810.MapValueReset {
		yymg4810 = true
	}
	if yyl4810 > 0 {
		for yyj4810 := 0; yyj4810 < yyl4810; yyj4810++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4810 = ""
			} else {
				yymk4810 = ResourceName(r.DecodeString())
			}

			if yymg4810 {
				yymv4810 = yyv4810[yymk4810]
			} else {
				yymv4810 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4810 = pkg3_resource.Quantity{}
			} else {
				yyv4812 := &yymv4810
				yym4813 := z.DecBinary()
				_ = yym4813
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4812) {
				} else if !yym4813 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4812)
				} else {
					z.DecFallback(yyv4812, false)
				}
			}

			if yyv4810 != nil {
				yyv4810[yymk4810] = yymv4810
			}
		}
	} else if yyl4810 < 0 {
		for yyj4810 := 0; !r.CheckBreak(); yyj4810++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4810 = ""
			} else {
				yymk4810 = ResourceName(r.DecodeString())
			}

			if yymg4810 {
				yymv4810 = yyv4810[yymk4810]
			} else {
				yymv4810 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4810 = pkg3_resource.Quantity{}
			} else {
				yyv4815 := &yymv4810
				yym4816 := z.DecBinary()
				_ = yym4816
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4815) {
				} else if !yym4816 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4815)
				} else {
					z.DecFallback(yyv4815, false)
				}
			}

			if yyv4810 != nil {
				yyv4810[yymk4810] = yymv4810
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4817 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4818 := &yyv4817
		yy4818.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4819 := *v
	yyh4819, yyl4819 := z.DecSliceHelperStart()
	var yyc4819 bool
	if yyl4819 == 0 {
		if yyv4819 == nil {
			yyv4819 = []Node{}
			yyc4819 = true
		} else if len(yyv4819) != 0 {
			yyv4819 = yyv4819[:0]
			yyc4819 = true
		}
	} else if yyl4819 > 0 {
		var yyrr4819, yyrl4819 int
		var yyrt4819 bool
		if yyl4819 > cap(yyv4819) {

			yyrg4819 := len(yyv4819) > 0
			yyv24819 := yyv4819
			yyrl4819, yyrt4819 = z.DecInferLen(yyl4819, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt4819 {
				if yyrl4819 <= cap(yyv4819) {
					yyv4819 = yyv4819[:yyrl4819]
				} else {
					yyv4819 = make([]Node, yyrl4819)
				}
			} else {
				yyv4819 = make([]Node, yyrl4819)
			}
			yyc4819 = true
			yyrr4819 = len(yyv4819)
			if yyrg4819 {
				copy(yyv4819, yyv24819)
			}
		} else if yyl4819 != len(yyv4819) {
			yyv4819 = yyv4819[:yyl4819]
			yyc4819 = true
		}
		yyj4819 := 0
		for ; yyj4819 < yyrr4819; yyj4819++ {
			yyh4819.ElemContainerState(yyj4819)
			if r.TryDecodeAsNil() {
				yyv4819[yyj4819] = Node{}
			} else {
				yyv4820 := &yyv4819[yyj4819]
				yyv4820.CodecDecodeSelf(d)
			}

		}
		if yyrt4819 {
			for ; yyj4819 < yyl4819; yyj4819++ {
				yyv4819 = append(yyv4819, Node{})
				yyh4819.ElemContainerState(yyj4819)
				if r.TryDecodeAsNil() {
					yyv4819[yyj4819] = Node{}
				} else {
					yyv4821 := &yyv4819[yyj4819]
					yyv4821.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4819 := 0
		for ; !r.CheckBreak(); yyj4819++ {

			if yyj4819 >= len(yyv4819) {
				yyv4819 = append(yyv4819, Node{}) // var yyz4819 Node
				yyc4819 = true
			}
			yyh4819.ElemContainerState(yyj4819)
			if yyj4819 < len(yyv4819) {
				if r.TryDecodeAsNil() {
					yyv4819[yyj4819] = Node{}
				} else {
					yyv4822 := &yyv4819[yyj4819]
					yyv4822.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4819 < len(yyv4819) {
			yyv4819 = yyv4819[:yyj4819]
			yyc4819 = true
		} else if yyj4819 == 0 && yyv4819 == nil {
			yyv4819 = []Node{}
			yyc4819 = true
		}
	}
	yyh4819.End()
	if yyc4819 {
		*v = yyv4819
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4823 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4823.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4824 := *v
	yyh4824, yyl4824 := z.DecSliceHelperStart()
	var yyc4824 bool
	if yyl4824 == 0 {
		if yyv4824 == nil {
			yyv4824 = []FinalizerName{}
			yyc4824 = true
		} else if len(yyv4824) != 0 {
			yyv4824 = yyv4824[:0]
			yyc4824 = true
		}
	} else if yyl4824 > 0 {
		var yyrr4824, yyrl4824 int
		var yyrt4824 bool
		if yyl4824 > cap(yyv4824) {

			yyrl4824, yyrt4824 = z.DecInferLen(yyl4824, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4824 {
				if yyrl4824 <= cap(yyv4824) {
					yyv4824 = yyv4824[:yyrl4824]
				} else {
					yyv4824 = make([]FinalizerName, yyrl4824)
				}
			} else {
				yyv4824 = make([]FinalizerName, yyrl4824)
			}
			yyc4824 = true
			yyrr4824 = len(yyv4824)
		} else if yyl4824 != len(yyv4824) {
			yyv4824 = yyv4824[:yyl4824]
			yyc4824 = true
		}
		yyj4824 := 0
		for ; yyj4824 < yyrr4824; yyj4824++ {
			yyh4824.ElemContainerState(yyj4824)
			if r.TryDecodeAsNil() {
				yyv4824[yyj4824] = ""
			} else {
				yyv4824[yyj4824] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4824 {
			for ; yyj4824 < yyl4824; yyj4824++ {
				yyv4824 = append(yyv4824, "")
				yyh4824.ElemContainerState(yyj4824)
				if r.TryDecodeAsNil() {
					yyv4824[yyj4824] = ""
				} else {
					yyv4824[yyj4824] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4824 := 0
		for ; !r.CheckBreak(); yyj4824++ {

			if yyj4824 >= len(yyv4824) {
				yyv4824 = append(yyv4824, "") // var yyz4824 FinalizerName
				yyc4824 = true
			}
			yyh4824.ElemContainerState(yyj4824)
			if yyj4824 < len(yyv4824) {
				if r.TryDecodeAsNil() {
					yyv4824[yyj4824] = ""
				} else {
					yyv4824[yyj4824] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4824 < len(yyv4824) {
			yyv4824 = yyv4824[:yyj4824]
			yyc4824 = true
		} else if yyj4824 == 0 && yyv4824 == nil {
			yyv4824 = []FinalizerName{}
			yyc4824 = true
		}
	}
	yyh4824.End()
	if yyc4824 {
		*v = yyv4824
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4828 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4829 := &yyv4828
		yy4829.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4830 := *v
	yyh4830, yyl4830 := z.DecSliceHelperStart()
	var yyc4830 bool
	if yyl4830 == 0 {
		if yyv4830 == nil {
			yyv4830 = []Namespace{}
			yyc4830 = true
		} else if len(yyv4830) != 0 {
			yyv4830 = yyv4830[:0]
			yyc4830 = true
		}
	} else if yyl4830 > 0 {
		var yyrr4830, yyrl4830 int
		var yyrt4830 bool
		if yyl4830 > cap(yyv4830) {

			yyrg4830 := len(yyv4830) > 0
			yyv24830 := yyv4830
			yyrl4830, yyrt4830 = z.DecInferLen(yyl4830, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4830 {
				if yyrl4830 <= cap(yyv4830) {
					yyv4830 = yyv4830[:yyrl4830]
				} else {
					yyv4830 = make([]Namespace, yyrl4830)
				}
			} else {
				yyv4830 = make([]Namespace, yyrl4830)
			}
			yyc4830 = true
			yyrr4830 = len(yyv4830)
			if yyrg4830 {
				copy(yyv4830, yyv24830)
			}
		} else if yyl4830 != len(yyv4830) {
			yyv4830 = yyv4830[:yyl4830]
			yyc4830 = true
		}
		yyj4830 := 0
		for ; yyj4830 < yyrr4830; yyj4830++ {
			yyh4830.ElemContainerState(yyj4830)
			if r.TryDecodeAsNil() {
				yyv4830[yyj4830] = Namespace{}
			} else {
				yyv4831 := &yyv4830[yyj4830]
				yyv4831.CodecDecodeSelf(d)
			}

		}
		if yyrt4830 {
			for ; yyj4830 < yyl4830; yyj4830++ {
				yyv4830 = append(yyv4830, Namespace{})
				yyh4830.ElemContainerState(yyj4830)
				if r.TryDecodeAsNil() {
					yyv4830[yyj4830] = Namespace{}
				} else {
					yyv4832 := &yyv4830[yyj4830]
					yyv4832.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4830 := 0
		for ; !r.CheckBreak(); yyj4830++ {

			if yyj4830 >= len(yyv4830) {
				yyv4830 = append(yyv4830, Namespace{}) // var yyz4830 Namespace
				yyc4830 = true
			}
			yyh4830.ElemContainerState(yyj4830)
			if yyj4830 < len(yyv4830) {
				if r.TryDecodeAsNil() {
					yyv4830[yyj4830] = Namespace{}
				} else {
					yyv4833 := &yyv4830[yyj4830]
					yyv4833.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4830 < len(yyv4830) {
			yyv4830 = yyv4830[:yyj4830]
			yyc4830 = true
		} else if yyj4830 == 0 && yyv4830 == nil {
			yyv4830 = []Namespace{}
			yyc4830 = true
		}
	}
	yyh4830.End()
	if yyc4830 {
		*v = yyv4830
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4834 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4835 := &yyv4834
		yy4835.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4836 := *v
	yyh4836, yyl4836 := z.DecSliceHelperStart()
	var yyc4836 bool
	if yyl4836 == 0 {
		if yyv4836 == nil {
			yyv4836 = []Event{}
			yyc4836 = true
		} else if len(yyv4836) != 0 {
			yyv4836 = yyv4836[:0]
			yyc4836 = true
		}
	} else if yyl4836 > 0 {
		var yyrr4836, yyrl4836 int
		var yyrt4836 bool
		if yyl4836 > cap(yyv4836) {

			yyrg4836 := len(yyv4836) > 0
			yyv24836 := yyv4836
			yyrl4836, yyrt4836 = z.DecInferLen(yyl4836, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4836 {
				if yyrl4836 <= cap(yyv4836) {
					yyv4836 = yyv4836[:yyrl4836]
				} else {
					yyv4836 = make([]Event, yyrl4836)
				}
			} else {
				yyv4836 = make([]Event, yyrl4836)
			}
			yyc4836 = true
			yyrr4836 = len(yyv4836)
			if yyrg4836 {
				copy(yyv4836, yyv24836)
			}
		} else if yyl4836 != len(yyv4836) {
			yyv4836 = yyv4836[:yyl4836]
			yyc4836 = true
		}
		yyj4836 := 0
		for ; yyj4836 < yyrr4836; yyj4836++ {
			yyh4836.ElemContainerState(yyj4836)
			if r.TryDecodeAsNil() {
				yyv4836[yyj4836] = Event{}
			} else {
				yyv4837 := &yyv4836[yyj4836]
				yyv4837.CodecDecodeSelf(d)
			}

		}
		if yyrt4836 {
			for ; yyj4836 < yyl4836; yyj4836++ {
				yyv4836 = append(yyv4836, Event{})
				yyh4836.ElemContainerState(yyj4836)
				if r.TryDecodeAsNil() {
					yyv4836[yyj4836] = Event{}
				} else {
					yyv4838 := &yyv4836[yyj4836]
					yyv4838.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4836 := 0
		for ; !r.CheckBreak(); yyj4836++ {

			if yyj4836 >= len(yyv4836) {
				yyv4836 = append(yyv4836, Event{}) // var yyz4836 Event
				yyc4836 = true
			}
			yyh4836.ElemContainerState(yyj4836)
			if yyj4836 < len(yyv4836) {
				if r.TryDecodeAsNil() {
					yyv4836[yyj4836] = Event{}
				} else {
					yyv4839 := &yyv4836[yyj4836]
					yyv4839.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4836 < len(yyv4836) {
			yyv4836 = yyv4836[:yyj4836]
			yyc4836 = true
		} else if yyj4836 == 0 && yyv4836 == nil {
			yyv4836 = []Event{}
			yyc4836 = true
		}
	}
	yyh4836.End()
	if yyc4836 {
		*v = yyv4836
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg7_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4840 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv4840 == nil {
			r.EncodeNil()
		} else {
			yym4841 := z.EncBinary()
			_ = yym4841
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv4840) {
			} else {
				z.EncFallback(yyv4840)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg7_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4842 := *v
	yyh4842, yyl4842 := z.DecSliceHelperStart()
	var yyc4842 bool
	if yyl4842 == 0 {
		if yyv4842 == nil {
			yyv4842 = []pkg7_runtime.Object{}
			yyc4842 = true
		} else if len(yyv4842) != 0 {
			yyv4842 = yyv4842[:0]
			yyc4842 = true
		}
	} else if yyl4842 > 0 {
		var yyrr4842, yyrl4842 int
		var yyrt4842 bool
		if yyl4842 > cap(yyv4842) {

			yyrg4842 := len(yyv4842) > 0
			yyv24842 := yyv4842
			yyrl4842, yyrt4842 = z.DecInferLen(yyl4842, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4842 {
				if yyrl4842 <= cap(yyv4842) {
					yyv4842 = yyv4842[:yyrl4842]
				} else {
					yyv4842 = make([]pkg7_runtime.Object, yyrl4842)
				}
			} else {
				yyv4842 = make([]pkg7_runtime.Object, yyrl4842)
			}
			yyc4842 = true
			yyrr4842 = len(yyv4842)
			if yyrg4842 {
				copy(yyv4842, yyv24842)
			}
		} else if yyl4842 != len(yyv4842) {
			yyv4842 = yyv4842[:yyl4842]
			yyc4842 = true
		}
		yyj4842 := 0
		for ; yyj4842 < yyrr4842; yyj4842++ {
			yyh4842.ElemContainerState(yyj4842)
			if r.TryDecodeAsNil() {
				yyv4842[yyj4842] = nil
			} else {
				yyv4843 := &yyv4842[yyj4842]
				yym4844 := z.DecBinary()
				_ = yym4844
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4843) {
				} else {
					z.DecFallback(yyv4843, true)
				}
			}

		}
		if yyrt4842 {
			for ; yyj4842 < yyl4842; yyj4842++ {
				yyv4842 = append(yyv4842, nil)
				yyh4842.ElemContainerState(yyj4842)
				if r.TryDecodeAsNil() {
					yyv4842[yyj4842] = nil
				} else {
					yyv4845 := &yyv4842[yyj4842]
					yym4846 := z.DecBinary()
					_ = yym4846
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4845) {
					} else {
						z.DecFallback(yyv4845, true)
					}
				}

			}
		}

	} else {
		yyj4842 := 0
		for ; !r.CheckBreak(); yyj4842++ {

			if yyj4842 >= len(yyv4842) {
				yyv4842 = append(yyv4842, nil) // var yyz4842 pkg7_runtime.Object
				yyc4842 = true
			}
			yyh4842.ElemContainerState(yyj4842)
			if yyj4842 < len(yyv4842) {
				if r.TryDecodeAsNil() {
					yyv4842[yyj4842] = nil
				} else {
					yyv4847 := &yyv4842[yyj4842]
					yym4848 := z.DecBinary()
					_ = yym4848
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4847) {
					} else {
						z.DecFallback(yyv4847, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4842 < len(yyv4842) {
			yyv4842 = yyv4842[:yyj4842]
			yyc4842 = true
		} else if yyj4842 == 0 && yyv4842 == nil {
			yyv4842 = []pkg7_runtime.Object{}
			yyc4842 = true
		}
	}
	yyh4842.End()
	if yyc4842 {
		*v = yyv4842
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4849 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4850 := &yyv4849
		yy4850.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4851 := *v
	yyh4851, yyl4851 := z.DecSliceHelperStart()
	var yyc4851 bool
	if yyl4851 == 0 {
		if yyv4851 == nil {
			yyv4851 = []LimitRangeItem{}
			yyc4851 = true
		} else if len(yyv4851) != 0 {
			yyv4851 = yyv4851[:0]
			yyc4851 = true
		}
	} else if yyl4851 > 0 {
		var yyrr4851, yyrl4851 int
		var yyrt4851 bool
		if yyl4851 > cap(yyv4851) {

			yyrg4851 := len(yyv4851) > 0
			yyv24851 := yyv4851
			yyrl4851, yyrt4851 = z.DecInferLen(yyl4851, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4851 {
				if yyrl4851 <= cap(yyv4851) {
					yyv4851 = yyv4851[:yyrl4851]
				} else {
					yyv4851 = make([]LimitRangeItem, yyrl4851)
				}
			} else {
				yyv4851 = make([]LimitRangeItem, yyrl4851)
			}
			yyc4851 = true
			yyrr4851 = len(yyv4851)
			if yyrg4851 {
				copy(yyv4851, yyv24851)
			}
		} else if yyl4851 != len(yyv4851) {
			yyv4851 = yyv4851[:yyl4851]
			yyc4851 = true
		}
		yyj4851 := 0
		for ; yyj4851 < yyrr4851; yyj4851++ {
			yyh4851.ElemContainerState(yyj4851)
			if r.TryDecodeAsNil() {
				yyv4851[yyj4851] = LimitRangeItem{}
			} else {
				yyv4852 := &yyv4851[yyj4851]
				yyv4852.CodecDecodeSelf(d)
			}

		}
		if yyrt4851 {
			for ; yyj4851 < yyl4851; yyj4851++ {
				yyv4851 = append(yyv4851, LimitRangeItem{})
				yyh4851.ElemContainerState(yyj4851)
				if r.TryDecodeAsNil() {
					yyv4851[yyj4851] = LimitRangeItem{}
				} else {
					yyv4853 := &yyv4851[yyj4851]
					yyv4853.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4851 := 0
		for ; !r.CheckBreak(); yyj4851++ {

			if yyj4851 >= len(yyv4851) {
				yyv4851 = append(yyv4851, LimitRangeItem{}) // var yyz4851 LimitRangeItem
				yyc4851 = true
			}
			yyh4851.ElemContainerState(yyj4851)
			if yyj4851 < len(yyv4851) {
				if r.TryDecodeAsNil() {
					yyv4851[yyj4851] = LimitRangeItem{}
				} else {
					yyv4854 := &yyv4851[yyj4851]
					yyv4854.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4851 < len(yyv4851) {
			yyv4851 = yyv4851[:yyj4851]
			yyc4851 = true
		} else if yyj4851 == 0 && yyv4851 == nil {
			yyv4851 = []LimitRangeItem{}
			yyc4851 = true
		}
	}
	yyh4851.End()
	if yyc4851 {
		*v = yyv4851
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4855 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4856 := &yyv4855
		yy4856.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4857 := *v
	yyh4857, yyl4857 := z.DecSliceHelperStart()
	var yyc4857 bool
	if yyl4857 == 0 {
		if yyv4857 == nil {
			yyv4857 = []LimitRange{}
			yyc4857 = true
		} else if len(yyv4857) != 0 {
			yyv4857 = yyv4857[:0]
			yyc4857 = true
		}
	} else if yyl4857 > 0 {
		var yyrr4857, yyrl4857 int
		var yyrt4857 bool
		if yyl4857 > cap(yyv4857) {

			yyrg4857 := len(yyv4857) > 0
			yyv24857 := yyv4857
			yyrl4857, yyrt4857 = z.DecInferLen(yyl4857, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4857 {
				if yyrl4857 <= cap(yyv4857) {
					yyv4857 = yyv4857[:yyrl4857]
				} else {
					yyv4857 = make([]LimitRange, yyrl4857)
				}
			} else {
				yyv4857 = make([]LimitRange, yyrl4857)
			}
			yyc4857 = true
			yyrr4857 = len(yyv4857)
			if yyrg4857 {
				copy(yyv4857, yyv24857)
			}
		} else if yyl4857 != len(yyv4857) {
			yyv4857 = yyv4857[:yyl4857]
			yyc4857 = true
		}
		yyj4857 := 0
		for ; yyj4857 < yyrr4857; yyj4857++ {
			yyh4857.ElemContainerState(yyj4857)
			if r.TryDecodeAsNil() {
				yyv4857[yyj4857] = LimitRange{}
			} else {
				yyv4858 := &yyv4857[yyj4857]
				yyv4858.CodecDecodeSelf(d)
			}

		}
		if yyrt4857 {
			for ; yyj4857 < yyl4857; yyj4857++ {
				yyv4857 = append(yyv4857, LimitRange{})
				yyh4857.ElemContainerState(yyj4857)
				if r.TryDecodeAsNil() {
					yyv4857[yyj4857] = LimitRange{}
				} else {
					yyv4859 := &yyv4857[yyj4857]
					yyv4859.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4857 := 0
		for ; !r.CheckBreak(); yyj4857++ {

			if yyj4857 >= len(yyv4857) {
				yyv4857 = append(yyv4857, LimitRange{}) // var yyz4857 LimitRange
				yyc4857 = true
			}
			yyh4857.ElemContainerState(yyj4857)
			if yyj4857 < len(yyv4857) {
				if r.TryDecodeAsNil() {
					yyv4857[yyj4857] = LimitRange{}
				} else {
					yyv4860 := &yyv4857[yyj4857]
					yyv4860.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4857 < len(yyv4857) {
			yyv4857 = yyv4857[:yyj4857]
			yyc4857 = true
		} else if yyj4857 == 0 && yyv4857 == nil {
			yyv4857 = []LimitRange{}
			yyc4857 = true
		}
	}
	yyh4857.End()
	if yyc4857 {
		*v = yyv4857
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4861 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4861.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4862 := *v
	yyh4862, yyl4862 := z.DecSliceHelperStart()
	var yyc4862 bool
	if yyl4862 == 0 {
		if yyv4862 == nil {
			yyv4862 = []ResourceQuotaScope{}
			yyc4862 = true
		} else if len(yyv4862) != 0 {
			yyv4862 = yyv4862[:0]
			yyc4862 = true
		}
	} else if yyl4862 > 0 {
		var yyrr4862, yyrl4862 int
		var yyrt4862 bool
		if yyl4862 > cap(yyv4862) {

			yyrl4862, yyrt4862 = z.DecInferLen(yyl4862, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4862 {
				if yyrl4862 <= cap(yyv4862) {
					yyv4862 = yyv4862[:yyrl4862]
				} else {
					yyv4862 = make([]ResourceQuotaScope, yyrl4862)
				}
			} else {
				yyv4862 = make([]ResourceQuotaScope, yyrl4862)
			}
			yyc4862 = true
			yyrr4862 = len(yyv4862)
		} else if yyl4862 != len(yyv4862) {
			yyv4862 = yyv4862[:yyl4862]
			yyc4862 = true
		}
		yyj4862 := 0
		for ; yyj4862 < yyrr4862; yyj4862++ {
			yyh4862.ElemContainerState(yyj4862)
			if r.TryDecodeAsNil() {
				yyv4862[yyj4862] = ""
			} else {
				yyv4862[yyj4862] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4862 {
			for ; yyj4862 < yyl4862; yyj4862++ {
				yyv4862 = append(yyv4862, "")
				yyh4862.ElemContainerState(yyj4862)
				if r.TryDecodeAsNil() {
					yyv4862[yyj4862] = ""
				} else {
					yyv4862[yyj4862] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4862 := 0
		for ; !r.CheckBreak(); yyj4862++ {

			if yyj4862 >= len(yyv4862) {
				yyv4862 = append(yyv4862, "") // var yyz4862 ResourceQuotaScope
				yyc4862 = true
			}
			yyh4862.ElemContainerState(yyj4862)
			if yyj4862 < len(yyv4862) {
				if r.TryDecodeAsNil() {
					yyv4862[yyj4862] = ""
				} else {
					yyv4862[yyj4862] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4862 < len(yyv4862) {
			yyv4862 = yyv4862[:yyj4862]
			yyc4862 = true
		} else if yyj4862 == 0 && yyv4862 == nil {
			yyv4862 = []ResourceQuotaScope{}
			yyc4862 = true
		}
	}
	yyh4862.End()
	if yyc4862 {
		*v = yyv4862
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4866 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4867 := &yyv4866
		yy4867.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4868 := *v
	yyh4868, yyl4868 := z.DecSliceHelperStart()
	var yyc4868 bool
	if yyl4868 == 0 {
		if yyv4868 == nil {
			yyv4868 = []ResourceQuota{}
			yyc4868 = true
		} else if len(yyv4868) != 0 {
			yyv4868 = yyv4868[:0]
			yyc4868 = true
		}
	} else if yyl4868 > 0 {
		var yyrr4868, yyrl4868 int
		var yyrt4868 bool
		if yyl4868 > cap(yyv4868) {

			yyrg4868 := len(yyv4868) > 0
			yyv24868 := yyv4868
			yyrl4868, yyrt4868 = z.DecInferLen(yyl4868, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4868 {
				if yyrl4868 <= cap(yyv4868) {
					yyv4868 = yyv4868[:yyrl4868]
				} else {
					yyv4868 = make([]ResourceQuota, yyrl4868)
				}
			} else {
				yyv4868 = make([]ResourceQuota, yyrl4868)
			}
			yyc4868 = true
			yyrr4868 = len(yyv4868)
			if yyrg4868 {
				copy(yyv4868, yyv24868)
			}
		} else if yyl4868 != len(yyv4868) {
			yyv4868 = yyv4868[:yyl4868]
			yyc4868 = true
		}
		yyj4868 := 0
		for ; yyj4868 < yyrr4868; yyj4868++ {
			yyh4868.ElemContainerState(yyj4868)
			if r.TryDecodeAsNil() {
				yyv4868[yyj4868] = ResourceQuota{}
			} else {
				yyv4869 := &yyv4868[yyj4868]
				yyv4869.CodecDecodeSelf(d)
			}

		}
		if yyrt4868 {
			for ; yyj4868 < yyl4868; yyj4868++ {
				yyv4868 = append(yyv4868, ResourceQuota{})
				yyh4868.ElemContainerState(yyj4868)
				if r.TryDecodeAsNil() {
					yyv4868[yyj4868] = ResourceQuota{}
				} else {
					yyv4870 := &yyv4868[yyj4868]
					yyv4870.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4868 := 0
		for ; !r.CheckBreak(); yyj4868++ {

			if yyj4868 >= len(yyv4868) {
				yyv4868 = append(yyv4868, ResourceQuota{}) // var yyz4868 ResourceQuota
				yyc4868 = true
			}
			yyh4868.ElemContainerState(yyj4868)
			if yyj4868 < len(yyv4868) {
				if r.TryDecodeAsNil() {
					yyv4868[yyj4868] = ResourceQuota{}
				} else {
					yyv4871 := &yyv4868[yyj4868]
					yyv4871.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4868 < len(yyv4868) {
			yyv4868 = yyv4868[:yyj4868]
			yyc4868 = true
		} else if yyj4868 == 0 && yyv4868 == nil {
			yyv4868 = []ResourceQuota{}
			yyc4868 = true
		}
	}
	yyh4868.End()
	if yyc4868 {
		*v = yyv4868
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4872, yyv4872 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4873 := z.EncBinary()
		_ = yym4873
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4872))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4872 == nil {
			r.EncodeNil()
		} else {
			yym4874 := z.EncBinary()
			_ = yym4874
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4872))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4875 := *v
	yyl4875 := r.ReadMapStart()
	yybh4875 := z.DecBasicHandle()
	if yyv4875 == nil {
		yyrl4875, _ := z.DecInferLen(yyl4875, yybh4875.MaxInitLen, 40)
		yyv4875 = make(map[string][]uint8, yyrl4875)
		*v = yyv4875
	}
	var yymk4875 string
	var yymv4875 []uint8
	var yymg4875 bool
	if yybh4875.MapValueReset {
		yymg4875 = true
	}
	if yyl4875 > 0 {
		for yyj4875 := 0; yyj4875 < yyl4875; yyj4875++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4875 = ""
			} else {
				yymk4875 = string(r.DecodeString())
			}

			if yymg4875 {
				yymv4875 = yyv4875[yymk4875]
			} else {
				yymv4875 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4875 = nil
			} else {
				yyv4877 := &yymv4875
				yym4878 := z.DecBinary()
				_ = yym4878
				if false {
				} else {
					*yyv4877 = r.DecodeBytes(*(*[]byte)(yyv4877), false, false)
				}
			}

			if yyv4875 != nil {
				yyv4875[yymk4875] = yymv4875
			}
		}
	} else if yyl4875 < 0 {
		for yyj4875 := 0; !r.CheckBreak(); yyj4875++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4875 = ""
			} else {
				yymk4875 = string(r.DecodeString())
			}

			if yymg4875 {
				yymv4875 = yyv4875[yymk4875]
			} else {
				yymv4875 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4875 = nil
			} else {
				yyv4880 := &yymv4875
				yym4881 := z.DecBinary()
				_ = yym4881
				if false {
				} else {
					*yyv4880 = r.DecodeBytes(*(*[]byte)(yyv4880), false, false)
				}
			}

			if yyv4875 != nil {
				yyv4875[yymk4875] = yymv4875
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4882 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4883 := &yyv4882
		yy4883.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4884 := *v
	yyh4884, yyl4884 := z.DecSliceHelperStart()
	var yyc4884 bool
	if yyl4884 == 0 {
		if yyv4884 == nil {
			yyv4884 = []Secret{}
			yyc4884 = true
		} else if len(yyv4884) != 0 {
			yyv4884 = yyv4884[:0]
			yyc4884 = true
		}
	} else if yyl4884 > 0 {
		var yyrr4884, yyrl4884 int
		var yyrt4884 bool
		if yyl4884 > cap(yyv4884) {

			yyrg4884 := len(yyv4884) > 0
			yyv24884 := yyv4884
			yyrl4884, yyrt4884 = z.DecInferLen(yyl4884, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4884 {
				if yyrl4884 <= cap(yyv4884) {
					yyv4884 = yyv4884[:yyrl4884]
				} else {
					yyv4884 = make([]Secret, yyrl4884)
				}
			} else {
				yyv4884 = make([]Secret, yyrl4884)
			}
			yyc4884 = true
			yyrr4884 = len(yyv4884)
			if yyrg4884 {
				copy(yyv4884, yyv24884)
			}
		} else if yyl4884 != len(yyv4884) {
			yyv4884 = yyv4884[:yyl4884]
			yyc4884 = true
		}
		yyj4884 := 0
		for ; yyj4884 < yyrr4884; yyj4884++ {
			yyh4884.ElemContainerState(yyj4884)
			if r.TryDecodeAsNil() {
				yyv4884[yyj4884] = Secret{}
			} else {
				yyv4885 := &yyv4884[yyj4884]
				yyv4885.CodecDecodeSelf(d)
			}

		}
		if yyrt4884 {
			for ; yyj4884 < yyl4884; yyj4884++ {
				yyv4884 = append(yyv4884, Secret{})
				yyh4884.ElemContainerState(yyj4884)
				if r.TryDecodeAsNil() {
					yyv4884[yyj4884] = Secret{}
				} else {
					yyv4886 := &yyv4884[yyj4884]
					yyv4886.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4884 := 0
		for ; !r.CheckBreak(); yyj4884++ {

			if yyj4884 >= len(yyv4884) {
				yyv4884 = append(yyv4884, Secret{}) // var yyz4884 Secret
				yyc4884 = true
			}
			yyh4884.ElemContainerState(yyj4884)
			if yyj4884 < len(yyv4884) {
				if r.TryDecodeAsNil() {
					yyv4884[yyj4884] = Secret{}
				} else {
					yyv4887 := &yyv4884[yyj4884]
					yyv4887.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4884 < len(yyv4884) {
			yyv4884 = yyv4884[:yyj4884]
			yyc4884 = true
		} else if yyj4884 == 0 && yyv4884 == nil {
			yyv4884 = []Secret{}
			yyc4884 = true
		}
	}
	yyh4884.End()
	if yyc4884 {
		*v = yyv4884
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4888 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4889 := &yyv4888
		yy4889.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4890 := *v
	yyh4890, yyl4890 := z.DecSliceHelperStart()
	var yyc4890 bool
	if yyl4890 == 0 {
		if yyv4890 == nil {
			yyv4890 = []ConfigMap{}
			yyc4890 = true
		} else if len(yyv4890) != 0 {
			yyv4890 = yyv4890[:0]
			yyc4890 = true
		}
	} else if yyl4890 > 0 {
		var yyrr4890, yyrl4890 int
		var yyrt4890 bool
		if yyl4890 > cap(yyv4890) {

			yyrg4890 := len(yyv4890) > 0
			yyv24890 := yyv4890
			yyrl4890, yyrt4890 = z.DecInferLen(yyl4890, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4890 {
				if yyrl4890 <= cap(yyv4890) {
					yyv4890 = yyv4890[:yyrl4890]
				} else {
					yyv4890 = make([]ConfigMap, yyrl4890)
				}
			} else {
				yyv4890 = make([]ConfigMap, yyrl4890)
			}
			yyc4890 = true
			yyrr4890 = len(yyv4890)
			if yyrg4890 {
				copy(yyv4890, yyv24890)
			}
		} else if yyl4890 != len(yyv4890) {
			yyv4890 = yyv4890[:yyl4890]
			yyc4890 = true
		}
		yyj4890 := 0
		for ; yyj4890 < yyrr4890; yyj4890++ {
			yyh4890.ElemContainerState(yyj4890)
			if r.TryDecodeAsNil() {
				yyv4890[yyj4890] = ConfigMap{}
			} else {
				yyv4891 := &yyv4890[yyj4890]
				yyv4891.CodecDecodeSelf(d)
			}

		}
		if yyrt4890 {
			for ; yyj4890 < yyl4890; yyj4890++ {
				yyv4890 = append(yyv4890, ConfigMap{})
				yyh4890.ElemContainerState(yyj4890)
				if r.TryDecodeAsNil() {
					yyv4890[yyj4890] = ConfigMap{}
				} else {
					yyv4892 := &yyv4890[yyj4890]
					yyv4892.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4890 := 0
		for ; !r.CheckBreak(); yyj4890++ {

			if yyj4890 >= len(yyv4890) {
				yyv4890 = append(yyv4890, ConfigMap{}) // var yyz4890 ConfigMap
				yyc4890 = true
			}
			yyh4890.ElemContainerState(yyj4890)
			if yyj4890 < len(yyv4890) {
				if r.TryDecodeAsNil() {
					yyv4890[yyj4890] = ConfigMap{}
				} else {
					yyv4893 := &yyv4890[yyj4890]
					yyv4893.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4890 < len(yyv4890) {
			yyv4890 = yyv4890[:yyj4890]
			yyc4890 = true
		} else if yyj4890 == 0 && yyv4890 == nil {
			yyv4890 = []ConfigMap{}
			yyc4890 = true
		}
	}
	yyh4890.End()
	if yyc4890 {
		*v = yyv4890
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4894 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4895 := &yyv4894
		yy4895.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4896 := *v
	yyh4896, yyl4896 := z.DecSliceHelperStart()
	var yyc4896 bool
	if yyl4896 == 0 {
		if yyv4896 == nil {
			yyv4896 = []ComponentCondition{}
			yyc4896 = true
		} else if len(yyv4896) != 0 {
			yyv4896 = yyv4896[:0]
			yyc4896 = true
		}
	} else if yyl4896 > 0 {
		var yyrr4896, yyrl4896 int
		var yyrt4896 bool
		if yyl4896 > cap(yyv4896) {

			yyrg4896 := len(yyv4896) > 0
			yyv24896 := yyv4896
			yyrl4896, yyrt4896 = z.DecInferLen(yyl4896, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4896 {
				if yyrl4896 <= cap(yyv4896) {
					yyv4896 = yyv4896[:yyrl4896]
				} else {
					yyv4896 = make([]ComponentCondition, yyrl4896)
				}
			} else {
				yyv4896 = make([]ComponentCondition, yyrl4896)
			}
			yyc4896 = true
			yyrr4896 = len(yyv4896)
			if yyrg4896 {
				copy(yyv4896, yyv24896)
			}
		} else if yyl4896 != len(yyv4896) {
			yyv4896 = yyv4896[:yyl4896]
			yyc4896 = true
		}
		yyj4896 := 0
		for ; yyj4896 < yyrr4896; yyj4896++ {
			yyh4896.ElemContainerState(yyj4896)
			if r.TryDecodeAsNil() {
				yyv4896[yyj4896] = ComponentCondition{}
			} else {
				yyv4897 := &yyv4896[yyj4896]
				yyv4897.CodecDecodeSelf(d)
			}

		}
		if yyrt4896 {
			for ; yyj4896 < yyl4896; yyj4896++ {
				yyv4896 = append(yyv4896, ComponentCondition{})
				yyh4896.ElemContainerState(yyj4896)
				if r.TryDecodeAsNil() {
					yyv4896[yyj4896] = ComponentCondition{}
				} else {
					yyv4898 := &yyv4896[yyj4896]
					yyv4898.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4896 := 0
		for ; !r.CheckBreak(); yyj4896++ {

			if yyj4896 >= len(yyv4896) {
				yyv4896 = append(yyv4896, ComponentCondition{}) // var yyz4896 ComponentCondition
				yyc4896 = true
			}
			yyh4896.ElemContainerState(yyj4896)
			if yyj4896 < len(yyv4896) {
				if r.TryDecodeAsNil() {
					yyv4896[yyj4896] = ComponentCondition{}
				} else {
					yyv4899 := &yyv4896[yyj4896]
					yyv4899.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4896 < len(yyv4896) {
			yyv4896 = yyv4896[:yyj4896]
			yyc4896 = true
		} else if yyj4896 == 0 && yyv4896 == nil {
			yyv4896 = []ComponentCondition{}
			yyc4896 = true
		}
	}
	yyh4896.End()
	if yyc4896 {
		*v = yyv4896
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4900 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4901 := &yyv4900
		yy4901.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4902 := *v
	yyh4902, yyl4902 := z.DecSliceHelperStart()
	var yyc4902 bool
	if yyl4902 == 0 {
		if yyv4902 == nil {
			yyv4902 = []ComponentStatus{}
			yyc4902 = true
		} else if len(yyv4902) != 0 {
			yyv4902 = yyv4902[:0]
			yyc4902 = true
		}
	} else if yyl4902 > 0 {
		var yyrr4902, yyrl4902 int
		var yyrt4902 bool
		if yyl4902 > cap(yyv4902) {

			yyrg4902 := len(yyv4902) > 0
			yyv24902 := yyv4902
			yyrl4902, yyrt4902 = z.DecInferLen(yyl4902, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4902 {
				if yyrl4902 <= cap(yyv4902) {
					yyv4902 = yyv4902[:yyrl4902]
				} else {
					yyv4902 = make([]ComponentStatus, yyrl4902)
				}
			} else {
				yyv4902 = make([]ComponentStatus, yyrl4902)
			}
			yyc4902 = true
			yyrr4902 = len(yyv4902)
			if yyrg4902 {
				copy(yyv4902, yyv24902)
			}
		} else if yyl4902 != len(yyv4902) {
			yyv4902 = yyv4902[:yyl4902]
			yyc4902 = true
		}
		yyj4902 := 0
		for ; yyj4902 < yyrr4902; yyj4902++ {
			yyh4902.ElemContainerState(yyj4902)
			if r.TryDecodeAsNil() {
				yyv4902[yyj4902] = ComponentStatus{}
			} else {
				yyv4903 := &yyv4902[yyj4902]
				yyv4903.CodecDecodeSelf(d)
			}

		}
		if yyrt4902 {
			for ; yyj4902 < yyl4902; yyj4902++ {
				yyv4902 = append(yyv4902, ComponentStatus{})
				yyh4902.ElemContainerState(yyj4902)
				if r.TryDecodeAsNil() {
					yyv4902[yyj4902] = ComponentStatus{}
				} else {
					yyv4904 := &yyv4902[yyj4902]
					yyv4904.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4902 := 0
		for ; !r.CheckBreak(); yyj4902++ {

			if yyj4902 >= len(yyv4902) {
				yyv4902 = append(yyv4902, ComponentStatus{}) // var yyz4902 ComponentStatus
				yyc4902 = true
			}
			yyh4902.ElemContainerState(yyj4902)
			if yyj4902 < len(yyv4902) {
				if r.TryDecodeAsNil() {
					yyv4902[yyj4902] = ComponentStatus{}
				} else {
					yyv4905 := &yyv4902[yyj4902]
					yyv4905.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4902 < len(yyv4902) {
			yyv4902 = yyv4902[:yyj4902]
			yyc4902 = true
		} else if yyj4902 == 0 && yyv4902 == nil {
			yyv4902 = []ComponentStatus{}
			yyc4902 = true
		}
	}
	yyh4902.End()
	if yyc4902 {
		*v = yyv4902
	}
}
