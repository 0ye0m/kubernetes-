/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_fields "k8s.io/kubernetes/pkg/fields"
	pkg5_labels "k8s.io/kubernetes/pkg/labels"
	pkg7_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_fields.Selector
		var v3 pkg5_labels.Selector
		var v4 pkg7_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg4_intstr.IntOrString
		var v7 time.Time
		_, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			yyq2[14] = x.ClusterName != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[14] {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv62 := &x.CreationTimestamp
				yym63 := z.DecBinary()
				_ = yym63
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv62) {
				} else if yym63 {
					z.DecBinaryUnmarshal(yyv62)
				} else if !yym63 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv62)
				} else {
					z.DecFallback(yyv62, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym65 := z.DecBinary()
				_ = yym65
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym65 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym65 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym67 := z.DecBinary()
				_ = yym67
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv68 := &x.Labels
				yym69 := z.DecBinary()
				_ = yym69
				if false {
				} else {
					z.F.DecMapStringStringX(yyv68, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv70 := &x.Annotations
				yym71 := z.DecBinary()
				_ = yym71
				if false {
				} else {
					z.F.DecMapStringStringX(yyv70, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv72 := &x.OwnerReferences
				yym73 := z.DecBinary()
				_ = yym73
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv72), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv74 := &x.Finalizers
				yym75 := z.DecBinary()
				_ = yym75
				if false {
				} else {
					z.F.DecSliceStringX(yyv74, false, d)
				}
			}
		case "clusterName":
			if r.TryDecodeAsNil() {
				x.ClusterName = ""
			} else {
				x.ClusterName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj77 int
	var yyb77 bool
	var yyhl77 bool = l >= 0
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv85 := &x.CreationTimestamp
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv85) {
		} else if yym86 {
			z.DecBinaryUnmarshal(yyv85)
		} else if !yym86 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv85)
		} else {
			z.DecFallback(yyv85, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym88 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym88 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv91 := &x.Labels
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			z.F.DecMapStringStringX(yyv91, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv93 := &x.Annotations
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecMapStringStringX(yyv93, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv95 := &x.OwnerReferences
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv95), d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv97 := &x.Finalizers
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			z.F.DecSliceStringX(yyv97, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterName = ""
	} else {
		x.ClusterName = string(r.DecodeString())
	}
	for {
		yyj77++
		if yyhl77 {
			yyb77 = yyj77 > l
		} else {
			yyb77 = r.CheckBreak()
		}
		if yyb77 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj77-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym100 := z.EncBinary()
		_ = yym100
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep101 := !z.EncBinary()
			yy2arr101 := z.EncBasicHandle().StructToArray
			var yyq101 [25]bool
			_, _, _ = yysep101, yyq101, yy2arr101
			const yyr101 bool = false
			yyq101[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq101[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq101[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq101[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq101[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq101[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq101[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq101[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq101[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq101[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq101[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq101[12] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq101[13] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq101[14] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq101[15] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq101[16] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq101[17] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq101[18] = x.VolumeSource.FC != nil && x.FC != nil
			yyq101[19] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq101[20] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq101[21] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq101[22] = x.VolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq101[23] = x.VolumeSource.PhotonPersistentDisk != nil && x.PhotonPersistentDisk != nil
			yyq101[24] = x.VolumeSource.LibStorage != nil && x.LibStorage != nil
			var yynn101 int
			if yyr101 || yy2arr101 {
				r.EncodeArrayStart(25)
			} else {
				yynn101 = 1
				for _, b := range yyq101 {
					if b {
						yynn101++
					}
				}
				r.EncodeMapStart(yynn101)
				yynn101 = 0
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym103 := z.EncBinary()
				_ = yym103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym104 := z.EncBinary()
				_ = yym104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn105 bool
			if x.VolumeSource.HostPath == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr101 || yy2arr101 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr101 || yy2arr101 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr101 || yy2arr101 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr101 || yy2arr101 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.GitRepo == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr101 || yy2arr101 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.Secret == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr101 || yy2arr101 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.NFS == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr101 || yy2arr101 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.ISCSI == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr101 || yy2arr101 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr101 || yy2arr101 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr101 || yy2arr101 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.RBD == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr101 || yy2arr101 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.Quobyte == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr101 || yy2arr101 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[12] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr101 || yy2arr101 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[13] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.Cinder == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr101 || yy2arr101 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[14] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.CephFS == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr101 || yy2arr101 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[15] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.Flocker == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr101 || yy2arr101 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[16] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr101 || yy2arr101 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[17] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.FC == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr101 || yy2arr101 {
				if yyn122 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[18] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.AzureFile == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr101 || yy2arr101 {
				if yyn123 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[19] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr101 || yy2arr101 {
				if yyn124 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[20] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr101 || yy2arr101 {
				if yyn125 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[21] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn126 bool
			if x.VolumeSource.AzureDisk == nil {
				yyn126 = true
				goto LABEL126
			}
		LABEL126:
			if yyr101 || yy2arr101 {
				if yyn126 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[22] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn126 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn127 bool
			if x.VolumeSource.PhotonPersistentDisk == nil {
				yyn127 = true
				goto LABEL127
			}
		LABEL127:
			if yyr101 || yy2arr101 {
				if yyn127 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[23] {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn127 {
						r.EncodeNil()
					} else {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn128 bool
			if x.VolumeSource.LibStorage == nil {
				yyn128 = true
				goto LABEL128
			}
		LABEL128:
			if yyr101 || yy2arr101 {
				if yyn128 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[24] {
						if x.LibStorage == nil {
							r.EncodeNil()
						} else {
							x.LibStorage.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[24] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("libStorage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn128 {
						r.EncodeNil()
					} else {
						if x.LibStorage == nil {
							r.EncodeNil()
						} else {
							x.LibStorage.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym129 := z.DecBinary()
	_ = yym129
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct130 := r.ContainerType()
		if yyct130 == codecSelferValueTypeMap1234 {
			yyl130 := r.ReadMapStart()
			if yyl130 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl130, d)
			}
		} else if yyct130 == codecSelferValueTypeArray1234 {
			yyl130 := r.ReadArrayStart()
			if yyl130 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl130, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys131Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys131Slc
	var yyhl131 bool = l >= 0
	for yyj131 := 0; ; yyj131++ {
		if yyhl131 {
			if yyj131 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys131Slc = r.DecodeBytes(yys131Slc, true, true)
		yys131 := string(yys131Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys131 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.VolumeSource.AzureDisk == nil {
				x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if x.VolumeSource.PhotonPersistentDisk == nil {
				x.VolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "libStorage":
			if x.VolumeSource.LibStorage == nil {
				x.VolumeSource.LibStorage = new(LibStorageVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.LibStorage != nil {
					x.LibStorage = nil
				}
			} else {
				if x.LibStorage == nil {
					x.LibStorage = new(LibStorageVolumeSource)
				}
				x.LibStorage.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys131)
		} // end switch yys131
	} // end for yyj131
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj157 int
	var yyb157 bool
	var yyhl157 bool = l >= 0
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureDisk == nil {
		x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PhotonPersistentDisk == nil {
		x.VolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.LibStorage == nil {
		x.VolumeSource.LibStorage = new(LibStorageVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LibStorage != nil {
			x.LibStorage = nil
		}
	} else {
		if x.LibStorage == nil {
			x.LibStorage = new(LibStorageVolumeSource)
		}
		x.LibStorage.CodecDecodeSelf(d)
	}
	for {
		yyj157++
		if yyhl157 {
			yyb157 = yyj157 > l
		} else {
			yyb157 = r.CheckBreak()
		}
		if yyb157 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj157-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym183 := z.EncBinary()
		_ = yym183
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep184 := !z.EncBinary()
			yy2arr184 := z.EncBasicHandle().StructToArray
			var yyq184 [24]bool
			_, _, _ = yysep184, yyq184, yy2arr184
			const yyr184 bool = false
			yyq184[0] = x.HostPath != nil
			yyq184[1] = x.EmptyDir != nil
			yyq184[2] = x.GCEPersistentDisk != nil
			yyq184[3] = x.AWSElasticBlockStore != nil
			yyq184[4] = x.GitRepo != nil
			yyq184[5] = x.Secret != nil
			yyq184[6] = x.NFS != nil
			yyq184[7] = x.ISCSI != nil
			yyq184[8] = x.Glusterfs != nil
			yyq184[9] = x.PersistentVolumeClaim != nil
			yyq184[10] = x.RBD != nil
			yyq184[11] = x.Quobyte != nil
			yyq184[12] = x.FlexVolume != nil
			yyq184[13] = x.Cinder != nil
			yyq184[14] = x.CephFS != nil
			yyq184[15] = x.Flocker != nil
			yyq184[16] = x.DownwardAPI != nil
			yyq184[17] = x.FC != nil
			yyq184[18] = x.AzureFile != nil
			yyq184[19] = x.ConfigMap != nil
			yyq184[20] = x.VsphereVolume != nil
			yyq184[21] = x.AzureDisk != nil
			yyq184[22] = x.PhotonPersistentDisk != nil
			yyq184[23] = x.LibStorage != nil
			var yynn184 int
			if yyr184 || yy2arr184 {
				r.EncodeArrayStart(24)
			} else {
				yynn184 = 0
				for _, b := range yyq184 {
					if b {
						yynn184++
					}
				}
				r.EncodeMapStart(yynn184)
				yynn184 = 0
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[11] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[12] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[13] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[14] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[15] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[16] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[17] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[18] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[19] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[20] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[21] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[22] {
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[23] {
					if x.LibStorage == nil {
						r.EncodeNil()
					} else {
						x.LibStorage.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("libStorage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LibStorage == nil {
						r.EncodeNil()
					} else {
						x.LibStorage.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym209 := z.DecBinary()
	_ = yym209
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct210 := r.ContainerType()
		if yyct210 == codecSelferValueTypeMap1234 {
			yyl210 := r.ReadMapStart()
			if yyl210 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl210, d)
			}
		} else if yyct210 == codecSelferValueTypeArray1234 {
			yyl210 := r.ReadArrayStart()
			if yyl210 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl210, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys211Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys211Slc
	var yyhl211 bool = l >= 0
	for yyj211 := 0; ; yyj211++ {
		if yyhl211 {
			if yyj211 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys211Slc = r.DecodeBytes(yys211Slc, true, true)
		yys211 := string(yys211Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys211 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "libStorage":
			if r.TryDecodeAsNil() {
				if x.LibStorage != nil {
					x.LibStorage = nil
				}
			} else {
				if x.LibStorage == nil {
					x.LibStorage = new(LibStorageVolumeSource)
				}
				x.LibStorage.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys211)
		} // end switch yys211
	} // end for yyj211
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj236 int
	var yyb236 bool
	var yyhl236 bool = l >= 0
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LibStorage != nil {
			x.LibStorage = nil
		}
	} else {
		if x.LibStorage == nil {
			x.LibStorage = new(LibStorageVolumeSource)
		}
		x.LibStorage.CodecDecodeSelf(d)
	}
	for {
		yyj236++
		if yyhl236 {
			yyb236 = yyj236 > l
		} else {
			yyb236 = r.CheckBreak()
		}
		if yyb236 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj236-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym261 := z.EncBinary()
		_ = yym261
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep262 := !z.EncBinary()
			yy2arr262 := z.EncBasicHandle().StructToArray
			var yyq262 [18]bool
			_, _, _ = yysep262, yyq262, yy2arr262
			const yyr262 bool = false
			yyq262[0] = x.GCEPersistentDisk != nil
			yyq262[1] = x.AWSElasticBlockStore != nil
			yyq262[2] = x.HostPath != nil
			yyq262[3] = x.Glusterfs != nil
			yyq262[4] = x.NFS != nil
			yyq262[5] = x.RBD != nil
			yyq262[6] = x.Quobyte != nil
			yyq262[7] = x.ISCSI != nil
			yyq262[8] = x.FlexVolume != nil
			yyq262[9] = x.Cinder != nil
			yyq262[10] = x.CephFS != nil
			yyq262[11] = x.FC != nil
			yyq262[12] = x.Flocker != nil
			yyq262[13] = x.AzureFile != nil
			yyq262[14] = x.VsphereVolume != nil
			yyq262[15] = x.AzureDisk != nil
			yyq262[16] = x.PhotonPersistentDisk != nil
			yyq262[17] = x.LibStorage != nil
			var yynn262 int
			if yyr262 || yy2arr262 {
				r.EncodeArrayStart(18)
			} else {
				yynn262 = 0
				for _, b := range yyq262 {
					if b {
						yynn262++
					}
				}
				r.EncodeMapStart(yynn262)
				yynn262 = 0
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[6] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[8] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[9] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[10] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[11] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[12] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[13] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[14] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[15] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[16] {
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[17] {
					if x.LibStorage == nil {
						r.EncodeNil()
					} else {
						x.LibStorage.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("libStorage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LibStorage == nil {
						r.EncodeNil()
					} else {
						x.LibStorage.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym281 := z.DecBinary()
	_ = yym281
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct282 := r.ContainerType()
		if yyct282 == codecSelferValueTypeMap1234 {
			yyl282 := r.ReadMapStart()
			if yyl282 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl282, d)
			}
		} else if yyct282 == codecSelferValueTypeArray1234 {
			yyl282 := r.ReadArrayStart()
			if yyl282 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl282, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys283Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys283Slc
	var yyhl283 bool = l >= 0
	for yyj283 := 0; ; yyj283++ {
		if yyhl283 {
			if yyj283 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys283Slc = r.DecodeBytes(yys283Slc, true, true)
		yys283 := string(yys283Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys283 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "libStorage":
			if r.TryDecodeAsNil() {
				if x.LibStorage != nil {
					x.LibStorage = nil
				}
			} else {
				if x.LibStorage == nil {
					x.LibStorage = new(LibStorageVolumeSource)
				}
				x.LibStorage.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys283)
		} // end switch yys283
	} // end for yyj283
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj302 int
	var yyb302 bool
	var yyhl302 bool = l >= 0
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LibStorage != nil {
			x.LibStorage = nil
		}
	} else {
		if x.LibStorage == nil {
			x.LibStorage = new(LibStorageVolumeSource)
		}
		x.LibStorage.CodecDecodeSelf(d)
	}
	for {
		yyj302++
		if yyhl302 {
			yyb302 = yyj302 > l
		} else {
			yyb302 = r.CheckBreak()
		}
		if yyb302 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj302-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym321 := z.EncBinary()
		_ = yym321
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep322 := !z.EncBinary()
			yy2arr322 := z.EncBasicHandle().StructToArray
			var yyq322 [2]bool
			_, _, _ = yysep322, yyq322, yy2arr322
			const yyr322 bool = false
			yyq322[1] = x.ReadOnly != false
			var yynn322 int
			if yyr322 || yy2arr322 {
				r.EncodeArrayStart(2)
			} else {
				yynn322 = 1
				for _, b := range yyq322 {
					if b {
						yynn322++
					}
				}
				r.EncodeMapStart(yynn322)
				yynn322 = 0
			}
			if yyr322 || yy2arr322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym324 := z.EncBinary()
				_ = yym324
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym325 := z.EncBinary()
				_ = yym325
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr322 || yy2arr322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq322[1] {
					yym327 := z.EncBinary()
					_ = yym327
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq322[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym328 := z.EncBinary()
					_ = yym328
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr322 || yy2arr322 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym329 := z.DecBinary()
	_ = yym329
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct330 := r.ContainerType()
		if yyct330 == codecSelferValueTypeMap1234 {
			yyl330 := r.ReadMapStart()
			if yyl330 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl330, d)
			}
		} else if yyct330 == codecSelferValueTypeArray1234 {
			yyl330 := r.ReadArrayStart()
			if yyl330 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl330, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys331Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys331Slc
	var yyhl331 bool = l >= 0
	for yyj331 := 0; ; yyj331++ {
		if yyhl331 {
			if yyj331 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys331Slc = r.DecodeBytes(yys331Slc, true, true)
		yys331 := string(yys331Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys331 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys331)
		} // end switch yys331
	} // end for yyj331
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj334 int
	var yyb334 bool
	var yyhl334 bool = l >= 0
	yyj334++
	if yyhl334 {
		yyb334 = yyj334 > l
	} else {
		yyb334 = r.CheckBreak()
	}
	if yyb334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj334++
	if yyhl334 {
		yyb334 = yyj334 > l
	} else {
		yyb334 = r.CheckBreak()
	}
	if yyb334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj334++
		if yyhl334 {
			yyb334 = yyj334 > l
		} else {
			yyb334 = r.CheckBreak()
		}
		if yyb334 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj334-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym337 := z.EncBinary()
		_ = yym337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep338 := !z.EncBinary()
			yy2arr338 := z.EncBasicHandle().StructToArray
			var yyq338 [5]bool
			_, _, _ = yysep338, yyq338, yy2arr338
			const yyr338 bool = false
			yyq338[0] = x.Kind != ""
			yyq338[1] = x.APIVersion != ""
			yyq338[2] = true
			yyq338[3] = true
			yyq338[4] = true
			var yynn338 int
			if yyr338 || yy2arr338 {
				r.EncodeArrayStart(5)
			} else {
				yynn338 = 0
				for _, b := range yyq338 {
					if b {
						yynn338++
					}
				}
				r.EncodeMapStart(yynn338)
				yynn338 = 0
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[0] {
					yym340 := z.EncBinary()
					_ = yym340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[1] {
					yym343 := z.EncBinary()
					_ = yym343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[2] {
					yy346 := &x.ObjectMeta
					yy346.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq338[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy347 := &x.ObjectMeta
					yy347.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[3] {
					yy349 := &x.Spec
					yy349.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq338[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy350 := &x.Spec
					yy350.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[4] {
					yy352 := &x.Status
					yy352.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq338[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy353 := &x.Status
					yy353.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym354 := z.DecBinary()
	_ = yym354
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct355 := r.ContainerType()
		if yyct355 == codecSelferValueTypeMap1234 {
			yyl355 := r.ReadMapStart()
			if yyl355 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl355, d)
			}
		} else if yyct355 == codecSelferValueTypeArray1234 {
			yyl355 := r.ReadArrayStart()
			if yyl355 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl355, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys356Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys356Slc
	var yyhl356 bool = l >= 0
	for yyj356 := 0; ; yyj356++ {
		if yyhl356 {
			if yyj356 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys356Slc = r.DecodeBytes(yys356Slc, true, true)
		yys356 := string(yys356Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys356 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv359 := &x.ObjectMeta
				yyv359.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv360 := &x.Spec
				yyv360.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv361 := &x.Status
				yyv361.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys356)
		} // end switch yys356
	} // end for yyj356
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj362 int
	var yyb362 bool
	var yyhl362 bool = l >= 0
	yyj362++
	if yyhl362 {
		yyb362 = yyj362 > l
	} else {
		yyb362 = r.CheckBreak()
	}
	if yyb362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj362++
	if yyhl362 {
		yyb362 = yyj362 > l
	} else {
		yyb362 = r.CheckBreak()
	}
	if yyb362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj362++
	if yyhl362 {
		yyb362 = yyj362 > l
	} else {
		yyb362 = r.CheckBreak()
	}
	if yyb362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv365 := &x.ObjectMeta
		yyv365.CodecDecodeSelf(d)
	}
	yyj362++
	if yyhl362 {
		yyb362 = yyj362 > l
	} else {
		yyb362 = r.CheckBreak()
	}
	if yyb362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv366 := &x.Spec
		yyv366.CodecDecodeSelf(d)
	}
	yyj362++
	if yyhl362 {
		yyb362 = yyj362 > l
	} else {
		yyb362 = r.CheckBreak()
	}
	if yyb362 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv367 := &x.Status
		yyv367.CodecDecodeSelf(d)
	}
	for {
		yyj362++
		if yyhl362 {
			yyb362 = yyj362 > l
		} else {
			yyb362 = r.CheckBreak()
		}
		if yyb362 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj362-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym368 := z.EncBinary()
		_ = yym368
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep369 := !z.EncBinary()
			yy2arr369 := z.EncBasicHandle().StructToArray
			var yyq369 [22]bool
			_, _, _ = yysep369, yyq369, yy2arr369
			const yyr369 bool = false
			yyq369[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq369[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq369[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq369[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq369[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq369[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq369[7] = x.PersistentVolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq369[8] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq369[9] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq369[10] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq369[11] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq369[12] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq369[13] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq369[14] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq369[15] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq369[16] = x.PersistentVolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq369[17] = x.PersistentVolumeSource.PhotonPersistentDisk != nil && x.PhotonPersistentDisk != nil
			yyq369[18] = x.PersistentVolumeSource.LibStorage != nil && x.LibStorage != nil
			yyq369[19] = len(x.AccessModes) != 0
			yyq369[20] = x.ClaimRef != nil
			yyq369[21] = x.PersistentVolumeReclaimPolicy != ""
			var yynn369 int
			if yyr369 || yy2arr369 {
				r.EncodeArrayStart(22)
			} else {
				yynn369 = 1
				for _, b := range yyq369 {
					if b {
						yynn369++
					}
				}
				r.EncodeMapStart(yynn369)
				yynn369 = 0
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn371 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn371 = true
				goto LABEL371
			}
		LABEL371:
			if yyr369 || yy2arr369 {
				if yyn371 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn371 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn372 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn372 = true
				goto LABEL372
			}
		LABEL372:
			if yyr369 || yy2arr369 {
				if yyn372 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn372 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn373 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn373 = true
				goto LABEL373
			}
		LABEL373:
			if yyr369 || yy2arr369 {
				if yyn373 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn373 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn374 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn374 = true
				goto LABEL374
			}
		LABEL374:
			if yyr369 || yy2arr369 {
				if yyn374 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn374 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn375 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn375 = true
				goto LABEL375
			}
		LABEL375:
			if yyr369 || yy2arr369 {
				if yyn375 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn375 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn376 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn376 = true
				goto LABEL376
			}
		LABEL376:
			if yyr369 || yy2arr369 {
				if yyn376 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn376 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn377 bool
			if x.PersistentVolumeSource.Quobyte == nil {
				yyn377 = true
				goto LABEL377
			}
		LABEL377:
			if yyr369 || yy2arr369 {
				if yyn377 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[7] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn377 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn378 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn378 = true
				goto LABEL378
			}
		LABEL378:
			if yyr369 || yy2arr369 {
				if yyn378 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn378 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn379 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn379 = true
				goto LABEL379
			}
		LABEL379:
			if yyr369 || yy2arr369 {
				if yyn379 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[9] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn379 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn380 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn380 = true
				goto LABEL380
			}
		LABEL380:
			if yyr369 || yy2arr369 {
				if yyn380 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[10] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn380 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn381 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn381 = true
				goto LABEL381
			}
		LABEL381:
			if yyr369 || yy2arr369 {
				if yyn381 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[11] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn381 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn382 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn382 = true
				goto LABEL382
			}
		LABEL382:
			if yyr369 || yy2arr369 {
				if yyn382 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[12] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn382 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn383 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn383 = true
				goto LABEL383
			}
		LABEL383:
			if yyr369 || yy2arr369 {
				if yyn383 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[13] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn383 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn384 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn384 = true
				goto LABEL384
			}
		LABEL384:
			if yyr369 || yy2arr369 {
				if yyn384 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[14] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn384 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn385 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn385 = true
				goto LABEL385
			}
		LABEL385:
			if yyr369 || yy2arr369 {
				if yyn385 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[15] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn385 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn386 bool
			if x.PersistentVolumeSource.AzureDisk == nil {
				yyn386 = true
				goto LABEL386
			}
		LABEL386:
			if yyr369 || yy2arr369 {
				if yyn386 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[16] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn386 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn387 bool
			if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
				yyn387 = true
				goto LABEL387
			}
		LABEL387:
			if yyr369 || yy2arr369 {
				if yyn387 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[17] {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn387 {
						r.EncodeNil()
					} else {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn388 bool
			if x.PersistentVolumeSource.LibStorage == nil {
				yyn388 = true
				goto LABEL388
			}
		LABEL388:
			if yyr369 || yy2arr369 {
				if yyn388 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq369[18] {
						if x.LibStorage == nil {
							r.EncodeNil()
						} else {
							x.LibStorage.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq369[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("libStorage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn388 {
						r.EncodeNil()
					} else {
						if x.LibStorage == nil {
							r.EncodeNil()
						} else {
							x.LibStorage.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[19] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym390 := z.EncBinary()
						_ = yym390
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq369[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym391 := z.EncBinary()
						_ = yym391
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[20] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq369[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[21] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq369[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym394 := z.DecBinary()
	_ = yym394
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct395 := r.ContainerType()
		if yyct395 == codecSelferValueTypeMap1234 {
			yyl395 := r.ReadMapStart()
			if yyl395 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl395, d)
			}
		} else if yyct395 == codecSelferValueTypeArray1234 {
			yyl395 := r.ReadArrayStart()
			if yyl395 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl395, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys396Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys396Slc
	var yyhl396 bool = l >= 0
	for yyj396 := 0; ; yyj396++ {
		if yyhl396 {
			if yyj396 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys396Slc = r.DecodeBytes(yys396Slc, true, true)
		yys396 := string(yys396Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys396 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv397 := &x.Capacity
				yyv397.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.PersistentVolumeSource.Quobyte == nil {
				x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.PersistentVolumeSource.AzureDisk == nil {
				x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
				x.PersistentVolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "libStorage":
			if x.PersistentVolumeSource.LibStorage == nil {
				x.PersistentVolumeSource.LibStorage = new(LibStorageVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.LibStorage != nil {
					x.LibStorage = nil
				}
			} else {
				if x.LibStorage == nil {
					x.LibStorage = new(LibStorageVolumeSource)
				}
				x.LibStorage.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv416 := &x.AccessModes
				yym417 := z.DecBinary()
				_ = yym417
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv416), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys396)
		} // end switch yys396
	} // end for yyj396
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj420 int
	var yyb420 bool
	var yyhl420 bool = l >= 0
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv421 := &x.Capacity
		yyv421.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Quobyte == nil {
		x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureDisk == nil {
		x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
		x.PersistentVolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.LibStorage == nil {
		x.PersistentVolumeSource.LibStorage = new(LibStorageVolumeSource)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LibStorage != nil {
			x.LibStorage = nil
		}
	} else {
		if x.LibStorage == nil {
			x.LibStorage = new(LibStorageVolumeSource)
		}
		x.LibStorage.CodecDecodeSelf(d)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv440 := &x.AccessModes
		yym441 := z.DecBinary()
		_ = yym441
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv440), d)
		}
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj420++
		if yyhl420 {
			yyb420 = yyj420 > l
		} else {
			yyb420 = r.CheckBreak()
		}
		if yyb420 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj420-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym444 := z.EncBinary()
	_ = yym444
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym445 := z.DecBinary()
	_ = yym445
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym446 := z.EncBinary()
		_ = yym446
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep447 := !z.EncBinary()
			yy2arr447 := z.EncBasicHandle().StructToArray
			var yyq447 [3]bool
			_, _, _ = yysep447, yyq447, yy2arr447
			const yyr447 bool = false
			yyq447[0] = x.Phase != ""
			yyq447[1] = x.Message != ""
			yyq447[2] = x.Reason != ""
			var yynn447 int
			if yyr447 || yy2arr447 {
				r.EncodeArrayStart(3)
			} else {
				yynn447 = 0
				for _, b := range yyq447 {
					if b {
						yynn447++
					}
				}
				r.EncodeMapStart(yynn447)
				yynn447 = 0
			}
			if yyr447 || yy2arr447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq447[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq447[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr447 || yy2arr447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq447[1] {
					yym450 := z.EncBinary()
					_ = yym450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq447[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym451 := z.EncBinary()
					_ = yym451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr447 || yy2arr447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq447[2] {
					yym453 := z.EncBinary()
					_ = yym453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq447[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym454 := z.EncBinary()
					_ = yym454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr447 || yy2arr447 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym455 := z.DecBinary()
	_ = yym455
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct456 := r.ContainerType()
		if yyct456 == codecSelferValueTypeMap1234 {
			yyl456 := r.ReadMapStart()
			if yyl456 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl456, d)
			}
		} else if yyct456 == codecSelferValueTypeArray1234 {
			yyl456 := r.ReadArrayStart()
			if yyl456 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl456, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys457Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys457Slc
	var yyhl457 bool = l >= 0
	for yyj457 := 0; ; yyj457++ {
		if yyhl457 {
			if yyj457 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys457Slc = r.DecodeBytes(yys457Slc, true, true)
		yys457 := string(yys457Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys457 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys457)
		} // end switch yys457
	} // end for yyj457
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj461 int
	var yyb461 bool
	var yyhl461 bool = l >= 0
	yyj461++
	if yyhl461 {
		yyb461 = yyj461 > l
	} else {
		yyb461 = r.CheckBreak()
	}
	if yyb461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj461++
	if yyhl461 {
		yyb461 = yyj461 > l
	} else {
		yyb461 = r.CheckBreak()
	}
	if yyb461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj461++
	if yyhl461 {
		yyb461 = yyj461 > l
	} else {
		yyb461 = r.CheckBreak()
	}
	if yyb461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj461++
		if yyhl461 {
			yyb461 = yyj461 > l
		} else {
			yyb461 = r.CheckBreak()
		}
		if yyb461 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj461-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym465 := z.EncBinary()
		_ = yym465
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep466 := !z.EncBinary()
			yy2arr466 := z.EncBasicHandle().StructToArray
			var yyq466 [4]bool
			_, _, _ = yysep466, yyq466, yy2arr466
			const yyr466 bool = false
			yyq466[0] = x.Kind != ""
			yyq466[1] = x.APIVersion != ""
			yyq466[2] = true
			var yynn466 int
			if yyr466 || yy2arr466 {
				r.EncodeArrayStart(4)
			} else {
				yynn466 = 1
				for _, b := range yyq466 {
					if b {
						yynn466++
					}
				}
				r.EncodeMapStart(yynn466)
				yynn466 = 0
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq466[0] {
					yym468 := z.EncBinary()
					_ = yym468
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq466[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym469 := z.EncBinary()
					_ = yym469
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq466[1] {
					yym471 := z.EncBinary()
					_ = yym471
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq466[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym472 := z.EncBinary()
					_ = yym472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq466[2] {
					yy474 := &x.ListMeta
					yym475 := z.EncBinary()
					_ = yym475
					if false {
					} else if z.HasExtensions() && z.EncExt(yy474) {
					} else {
						z.EncFallback(yy474)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq466[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy476 := &x.ListMeta
					yym477 := z.EncBinary()
					_ = yym477
					if false {
					} else if z.HasExtensions() && z.EncExt(yy476) {
					} else {
						z.EncFallback(yy476)
					}
				}
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym479 := z.EncBinary()
					_ = yym479
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym480 := z.EncBinary()
					_ = yym480
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct482 := r.ContainerType()
		if yyct482 == codecSelferValueTypeMap1234 {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if yyct482 == codecSelferValueTypeArray1234 {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys483 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv486 := &x.ListMeta
				yym487 := z.DecBinary()
				_ = yym487
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv486) {
				} else {
					z.DecFallback(yyv486, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv488 := &x.Items
				yym489 := z.DecBinary()
				_ = yym489
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv488), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj490 int
	var yyb490 bool
	var yyhl490 bool = l >= 0
	yyj490++
	if yyhl490 {
		yyb490 = yyj490 > l
	} else {
		yyb490 = r.CheckBreak()
	}
	if yyb490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj490++
	if yyhl490 {
		yyb490 = yyj490 > l
	} else {
		yyb490 = r.CheckBreak()
	}
	if yyb490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj490++
	if yyhl490 {
		yyb490 = yyj490 > l
	} else {
		yyb490 = r.CheckBreak()
	}
	if yyb490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv493 := &x.ListMeta
		yym494 := z.DecBinary()
		_ = yym494
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv493) {
		} else {
			z.DecFallback(yyv493, false)
		}
	}
	yyj490++
	if yyhl490 {
		yyb490 = yyj490 > l
	} else {
		yyb490 = r.CheckBreak()
	}
	if yyb490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv495 := &x.Items
		yym496 := z.DecBinary()
		_ = yym496
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv495), d)
		}
	}
	for {
		yyj490++
		if yyhl490 {
			yyb490 = yyj490 > l
		} else {
			yyb490 = r.CheckBreak()
		}
		if yyb490 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj490-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym497 := z.EncBinary()
		_ = yym497
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep498 := !z.EncBinary()
			yy2arr498 := z.EncBasicHandle().StructToArray
			var yyq498 [5]bool
			_, _, _ = yysep498, yyq498, yy2arr498
			const yyr498 bool = false
			yyq498[0] = x.Kind != ""
			yyq498[1] = x.APIVersion != ""
			yyq498[2] = true
			yyq498[3] = true
			yyq498[4] = true
			var yynn498 int
			if yyr498 || yy2arr498 {
				r.EncodeArrayStart(5)
			} else {
				yynn498 = 0
				for _, b := range yyq498 {
					if b {
						yynn498++
					}
				}
				r.EncodeMapStart(yynn498)
				yynn498 = 0
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq498[0] {
					yym500 := z.EncBinary()
					_ = yym500
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq498[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym501 := z.EncBinary()
					_ = yym501
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq498[1] {
					yym503 := z.EncBinary()
					_ = yym503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq498[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym504 := z.EncBinary()
					_ = yym504
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq498[2] {
					yy506 := &x.ObjectMeta
					yy506.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq498[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy507 := &x.ObjectMeta
					yy507.CodecEncodeSelf(e)
				}
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq498[3] {
					yy509 := &x.Spec
					yy509.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq498[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy510 := &x.Spec
					yy510.CodecEncodeSelf(e)
				}
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq498[4] {
					yy512 := &x.Status
					yy512.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq498[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy513 := &x.Status
					yy513.CodecEncodeSelf(e)
				}
			}
			if yyr498 || yy2arr498 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym514 := z.DecBinary()
	_ = yym514
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct515 := r.ContainerType()
		if yyct515 == codecSelferValueTypeMap1234 {
			yyl515 := r.ReadMapStart()
			if yyl515 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl515, d)
			}
		} else if yyct515 == codecSelferValueTypeArray1234 {
			yyl515 := r.ReadArrayStart()
			if yyl515 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl515, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys516Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys516Slc
	var yyhl516 bool = l >= 0
	for yyj516 := 0; ; yyj516++ {
		if yyhl516 {
			if yyj516 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys516Slc = r.DecodeBytes(yys516Slc, true, true)
		yys516 := string(yys516Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys516 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv519 := &x.ObjectMeta
				yyv519.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv520 := &x.Spec
				yyv520.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv521 := &x.Status
				yyv521.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys516)
		} // end switch yys516
	} // end for yyj516
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj522 int
	var yyb522 bool
	var yyhl522 bool = l >= 0
	yyj522++
	if yyhl522 {
		yyb522 = yyj522 > l
	} else {
		yyb522 = r.CheckBreak()
	}
	if yyb522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj522++
	if yyhl522 {
		yyb522 = yyj522 > l
	} else {
		yyb522 = r.CheckBreak()
	}
	if yyb522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj522++
	if yyhl522 {
		yyb522 = yyj522 > l
	} else {
		yyb522 = r.CheckBreak()
	}
	if yyb522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv525 := &x.ObjectMeta
		yyv525.CodecDecodeSelf(d)
	}
	yyj522++
	if yyhl522 {
		yyb522 = yyj522 > l
	} else {
		yyb522 = r.CheckBreak()
	}
	if yyb522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv526 := &x.Spec
		yyv526.CodecDecodeSelf(d)
	}
	yyj522++
	if yyhl522 {
		yyb522 = yyj522 > l
	} else {
		yyb522 = r.CheckBreak()
	}
	if yyb522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv527 := &x.Status
		yyv527.CodecDecodeSelf(d)
	}
	for {
		yyj522++
		if yyhl522 {
			yyb522 = yyj522 > l
		} else {
			yyb522 = r.CheckBreak()
		}
		if yyb522 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj522-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym528 := z.EncBinary()
		_ = yym528
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep529 := !z.EncBinary()
			yy2arr529 := z.EncBasicHandle().StructToArray
			var yyq529 [4]bool
			_, _, _ = yysep529, yyq529, yy2arr529
			const yyr529 bool = false
			yyq529[0] = x.Kind != ""
			yyq529[1] = x.APIVersion != ""
			yyq529[2] = true
			var yynn529 int
			if yyr529 || yy2arr529 {
				r.EncodeArrayStart(4)
			} else {
				yynn529 = 1
				for _, b := range yyq529 {
					if b {
						yynn529++
					}
				}
				r.EncodeMapStart(yynn529)
				yynn529 = 0
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq529[0] {
					yym531 := z.EncBinary()
					_ = yym531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq529[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym532 := z.EncBinary()
					_ = yym532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq529[1] {
					yym534 := z.EncBinary()
					_ = yym534
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq529[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym535 := z.EncBinary()
					_ = yym535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq529[2] {
					yy537 := &x.ListMeta
					yym538 := z.EncBinary()
					_ = yym538
					if false {
					} else if z.HasExtensions() && z.EncExt(yy537) {
					} else {
						z.EncFallback(yy537)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq529[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy539 := &x.ListMeta
					yym540 := z.EncBinary()
					_ = yym540
					if false {
					} else if z.HasExtensions() && z.EncExt(yy539) {
					} else {
						z.EncFallback(yy539)
					}
				}
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym542 := z.EncBinary()
					_ = yym542
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym543 := z.EncBinary()
					_ = yym543
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr529 || yy2arr529 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym544 := z.DecBinary()
	_ = yym544
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct545 := r.ContainerType()
		if yyct545 == codecSelferValueTypeMap1234 {
			yyl545 := r.ReadMapStart()
			if yyl545 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl545, d)
			}
		} else if yyct545 == codecSelferValueTypeArray1234 {
			yyl545 := r.ReadArrayStart()
			if yyl545 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl545, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys546Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys546Slc
	var yyhl546 bool = l >= 0
	for yyj546 := 0; ; yyj546++ {
		if yyhl546 {
			if yyj546 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys546Slc = r.DecodeBytes(yys546Slc, true, true)
		yys546 := string(yys546Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys546 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv549 := &x.ListMeta
				yym550 := z.DecBinary()
				_ = yym550
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv549) {
				} else {
					z.DecFallback(yyv549, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv551 := &x.Items
				yym552 := z.DecBinary()
				_ = yym552
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv551), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys546)
		} // end switch yys546
	} // end for yyj546
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj553 int
	var yyb553 bool
	var yyhl553 bool = l >= 0
	yyj553++
	if yyhl553 {
		yyb553 = yyj553 > l
	} else {
		yyb553 = r.CheckBreak()
	}
	if yyb553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj553++
	if yyhl553 {
		yyb553 = yyj553 > l
	} else {
		yyb553 = r.CheckBreak()
	}
	if yyb553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj553++
	if yyhl553 {
		yyb553 = yyj553 > l
	} else {
		yyb553 = r.CheckBreak()
	}
	if yyb553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv556 := &x.ListMeta
		yym557 := z.DecBinary()
		_ = yym557
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv556) {
		} else {
			z.DecFallback(yyv556, false)
		}
	}
	yyj553++
	if yyhl553 {
		yyb553 = yyj553 > l
	} else {
		yyb553 = r.CheckBreak()
	}
	if yyb553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv558 := &x.Items
		yym559 := z.DecBinary()
		_ = yym559
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv558), d)
		}
	}
	for {
		yyj553++
		if yyhl553 {
			yyb553 = yyj553 > l
		} else {
			yyb553 = r.CheckBreak()
		}
		if yyb553 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj553-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym560 := z.EncBinary()
		_ = yym560
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep561 := !z.EncBinary()
			yy2arr561 := z.EncBasicHandle().StructToArray
			var yyq561 [4]bool
			_, _, _ = yysep561, yyq561, yy2arr561
			const yyr561 bool = false
			yyq561[0] = len(x.AccessModes) != 0
			yyq561[1] = x.Selector != nil
			yyq561[2] = true
			yyq561[3] = x.VolumeName != ""
			var yynn561 int
			if yyr561 || yy2arr561 {
				r.EncodeArrayStart(4)
			} else {
				yynn561 = 0
				for _, b := range yyq561 {
					if b {
						yynn561++
					}
				}
				r.EncodeMapStart(yynn561)
				yynn561 = 0
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq561[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym563 := z.EncBinary()
						_ = yym563
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq561[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym564 := z.EncBinary()
						_ = yym564
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq561[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym566 := z.EncBinary()
						_ = yym566
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq561[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym567 := z.EncBinary()
						_ = yym567
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq561[2] {
					yy569 := &x.Resources
					yy569.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq561[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy570 := &x.Resources
					yy570.CodecEncodeSelf(e)
				}
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq561[3] {
					yym572 := z.EncBinary()
					_ = yym572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq561[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym573 := z.EncBinary()
					_ = yym573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym574 := z.DecBinary()
	_ = yym574
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct575 := r.ContainerType()
		if yyct575 == codecSelferValueTypeMap1234 {
			yyl575 := r.ReadMapStart()
			if yyl575 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl575, d)
			}
		} else if yyct575 == codecSelferValueTypeArray1234 {
			yyl575 := r.ReadArrayStart()
			if yyl575 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl575, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys576Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys576Slc
	var yyhl576 bool = l >= 0
	for yyj576 := 0; ; yyj576++ {
		if yyhl576 {
			if yyj576 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys576Slc = r.DecodeBytes(yys576Slc, true, true)
		yys576 := string(yys576Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys576 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv577 := &x.AccessModes
				yym578 := z.DecBinary()
				_ = yym578
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv577), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym580 := z.DecBinary()
				_ = yym580
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv581 := &x.Resources
				yyv581.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys576)
		} // end switch yys576
	} // end for yyj576
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj583 int
	var yyb583 bool
	var yyhl583 bool = l >= 0
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv584 := &x.AccessModes
		yym585 := z.DecBinary()
		_ = yym585
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv584), d)
		}
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym587 := z.DecBinary()
		_ = yym587
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv588 := &x.Resources
		yyv588.CodecDecodeSelf(d)
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj583++
		if yyhl583 {
			yyb583 = yyj583 > l
		} else {
			yyb583 = r.CheckBreak()
		}
		if yyb583 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj583-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym590 := z.EncBinary()
		_ = yym590
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep591 := !z.EncBinary()
			yy2arr591 := z.EncBasicHandle().StructToArray
			var yyq591 [3]bool
			_, _, _ = yysep591, yyq591, yy2arr591
			const yyr591 bool = false
			yyq591[0] = x.Phase != ""
			yyq591[1] = len(x.AccessModes) != 0
			yyq591[2] = len(x.Capacity) != 0
			var yynn591 int
			if yyr591 || yy2arr591 {
				r.EncodeArrayStart(3)
			} else {
				yynn591 = 0
				for _, b := range yyq591 {
					if b {
						yynn591++
					}
				}
				r.EncodeMapStart(yynn591)
				yynn591 = 0
			}
			if yyr591 || yy2arr591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq591[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq591[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr591 || yy2arr591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq591[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym594 := z.EncBinary()
						_ = yym594
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq591[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym595 := z.EncBinary()
						_ = yym595
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr591 || yy2arr591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq591[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq591[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr591 || yy2arr591 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym597 := z.DecBinary()
	_ = yym597
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct598 := r.ContainerType()
		if yyct598 == codecSelferValueTypeMap1234 {
			yyl598 := r.ReadMapStart()
			if yyl598 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl598, d)
			}
		} else if yyct598 == codecSelferValueTypeArray1234 {
			yyl598 := r.ReadArrayStart()
			if yyl598 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl598, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys599Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys599Slc
	var yyhl599 bool = l >= 0
	for yyj599 := 0; ; yyj599++ {
		if yyhl599 {
			if yyj599 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys599Slc = r.DecodeBytes(yys599Slc, true, true)
		yys599 := string(yys599Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys599 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv601 := &x.AccessModes
				yym602 := z.DecBinary()
				_ = yym602
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv601), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv603 := &x.Capacity
				yyv603.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys599)
		} // end switch yys599
	} // end for yyj599
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj604 int
	var yyb604 bool
	var yyhl604 bool = l >= 0
	yyj604++
	if yyhl604 {
		yyb604 = yyj604 > l
	} else {
		yyb604 = r.CheckBreak()
	}
	if yyb604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj604++
	if yyhl604 {
		yyb604 = yyj604 > l
	} else {
		yyb604 = r.CheckBreak()
	}
	if yyb604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv606 := &x.AccessModes
		yym607 := z.DecBinary()
		_ = yym607
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv606), d)
		}
	}
	yyj604++
	if yyhl604 {
		yyb604 = yyj604 > l
	} else {
		yyb604 = r.CheckBreak()
	}
	if yyb604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv608 := &x.Capacity
		yyv608.CodecDecodeSelf(d)
	}
	for {
		yyj604++
		if yyhl604 {
			yyb604 = yyj604 > l
		} else {
			yyb604 = r.CheckBreak()
		}
		if yyb604 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj604-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym609 := z.EncBinary()
	_ = yym609
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym610 := z.DecBinary()
	_ = yym610
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym611 := z.EncBinary()
	_ = yym611
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym612 := z.DecBinary()
	_ = yym612
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym613 := z.EncBinary()
	_ = yym613
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym614 := z.DecBinary()
	_ = yym614
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym615 := z.EncBinary()
		_ = yym615
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep616 := !z.EncBinary()
			yy2arr616 := z.EncBasicHandle().StructToArray
			var yyq616 [1]bool
			_, _, _ = yysep616, yyq616, yy2arr616
			const yyr616 bool = false
			var yynn616 int
			if yyr616 || yy2arr616 {
				r.EncodeArrayStart(1)
			} else {
				yynn616 = 1
				for _, b := range yyq616 {
					if b {
						yynn616++
					}
				}
				r.EncodeMapStart(yynn616)
				yynn616 = 0
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym618 := z.EncBinary()
				_ = yym618
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym619 := z.EncBinary()
				_ = yym619
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym620 := z.DecBinary()
	_ = yym620
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct621 := r.ContainerType()
		if yyct621 == codecSelferValueTypeMap1234 {
			yyl621 := r.ReadMapStart()
			if yyl621 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl621, d)
			}
		} else if yyct621 == codecSelferValueTypeArray1234 {
			yyl621 := r.ReadArrayStart()
			if yyl621 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl621, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys622Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys622Slc
	var yyhl622 bool = l >= 0
	for yyj622 := 0; ; yyj622++ {
		if yyhl622 {
			if yyj622 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys622Slc = r.DecodeBytes(yys622Slc, true, true)
		yys622 := string(yys622Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys622 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys622)
		} // end switch yys622
	} // end for yyj622
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj624 int
	var yyb624 bool
	var yyhl624 bool = l >= 0
	yyj624++
	if yyhl624 {
		yyb624 = yyj624 > l
	} else {
		yyb624 = r.CheckBreak()
	}
	if yyb624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj624++
		if yyhl624 {
			yyb624 = yyj624 > l
		} else {
			yyb624 = r.CheckBreak()
		}
		if yyb624 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj624-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym626 := z.EncBinary()
		_ = yym626
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep627 := !z.EncBinary()
			yy2arr627 := z.EncBasicHandle().StructToArray
			var yyq627 [1]bool
			_, _, _ = yysep627, yyq627, yy2arr627
			const yyr627 bool = false
			yyq627[0] = x.Medium != ""
			var yynn627 int
			if yyr627 || yy2arr627 {
				r.EncodeArrayStart(1)
			} else {
				yynn627 = 0
				for _, b := range yyq627 {
					if b {
						yynn627++
					}
				}
				r.EncodeMapStart(yynn627)
				yynn627 = 0
			}
			if yyr627 || yy2arr627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq627[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq627[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr627 || yy2arr627 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym629 := z.DecBinary()
	_ = yym629
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct630 := r.ContainerType()
		if yyct630 == codecSelferValueTypeMap1234 {
			yyl630 := r.ReadMapStart()
			if yyl630 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl630, d)
			}
		} else if yyct630 == codecSelferValueTypeArray1234 {
			yyl630 := r.ReadArrayStart()
			if yyl630 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl630, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys631Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys631Slc
	var yyhl631 bool = l >= 0
	for yyj631 := 0; ; yyj631++ {
		if yyhl631 {
			if yyj631 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys631Slc = r.DecodeBytes(yys631Slc, true, true)
		yys631 := string(yys631Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys631 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys631)
		} // end switch yys631
	} // end for yyj631
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj633 int
	var yyb633 bool
	var yyhl633 bool = l >= 0
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj633++
		if yyhl633 {
			yyb633 = yyj633 > l
		} else {
			yyb633 = r.CheckBreak()
		}
		if yyb633 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj633-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym635 := z.EncBinary()
	_ = yym635
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym636 := z.DecBinary()
	_ = yym636
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym637 := z.EncBinary()
	_ = yym637
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym638 := z.DecBinary()
	_ = yym638
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym639 := z.EncBinary()
		_ = yym639
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep640 := !z.EncBinary()
			yy2arr640 := z.EncBasicHandle().StructToArray
			var yyq640 [4]bool
			_, _, _ = yysep640, yyq640, yy2arr640
			const yyr640 bool = false
			yyq640[1] = x.FSType != ""
			yyq640[2] = x.Partition != 0
			yyq640[3] = x.ReadOnly != false
			var yynn640 int
			if yyr640 || yy2arr640 {
				r.EncodeArrayStart(4)
			} else {
				yynn640 = 1
				for _, b := range yyq640 {
					if b {
						yynn640++
					}
				}
				r.EncodeMapStart(yynn640)
				yynn640 = 0
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym642 := z.EncBinary()
				_ = yym642
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym643 := z.EncBinary()
				_ = yym643
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq640[1] {
					yym645 := z.EncBinary()
					_ = yym645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq640[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym646 := z.EncBinary()
					_ = yym646
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq640[2] {
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq640[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym649 := z.EncBinary()
					_ = yym649
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq640[3] {
					yym651 := z.EncBinary()
					_ = yym651
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq640[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym652 := z.EncBinary()
					_ = yym652
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr640 || yy2arr640 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym653 := z.DecBinary()
	_ = yym653
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct654 := r.ContainerType()
		if yyct654 == codecSelferValueTypeMap1234 {
			yyl654 := r.ReadMapStart()
			if yyl654 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl654, d)
			}
		} else if yyct654 == codecSelferValueTypeArray1234 {
			yyl654 := r.ReadArrayStart()
			if yyl654 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl654, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys655Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys655Slc
	var yyhl655 bool = l >= 0
	for yyj655 := 0; ; yyj655++ {
		if yyhl655 {
			if yyj655 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys655Slc = r.DecodeBytes(yys655Slc, true, true)
		yys655 := string(yys655Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys655 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys655)
		} // end switch yys655
	} // end for yyj655
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj660 int
	var yyb660 bool
	var yyhl660 bool = l >= 0
	yyj660++
	if yyhl660 {
		yyb660 = yyj660 > l
	} else {
		yyb660 = r.CheckBreak()
	}
	if yyb660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj660++
	if yyhl660 {
		yyb660 = yyj660 > l
	} else {
		yyb660 = r.CheckBreak()
	}
	if yyb660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj660++
	if yyhl660 {
		yyb660 = yyj660 > l
	} else {
		yyb660 = r.CheckBreak()
	}
	if yyb660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj660++
	if yyhl660 {
		yyb660 = yyj660 > l
	} else {
		yyb660 = r.CheckBreak()
	}
	if yyb660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj660++
		if yyhl660 {
			yyb660 = yyj660 > l
		} else {
			yyb660 = r.CheckBreak()
		}
		if yyb660 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj660-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym665 := z.EncBinary()
		_ = yym665
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep666 := !z.EncBinary()
			yy2arr666 := z.EncBasicHandle().StructToArray
			var yyq666 [6]bool
			_, _, _ = yysep666, yyq666, yy2arr666
			const yyr666 bool = false
			yyq666[0] = x.TargetPortal != ""
			yyq666[1] = x.IQN != ""
			yyq666[2] = x.Lun != 0
			yyq666[3] = x.ISCSIInterface != ""
			yyq666[4] = x.FSType != ""
			yyq666[5] = x.ReadOnly != false
			var yynn666 int
			if yyr666 || yy2arr666 {
				r.EncodeArrayStart(6)
			} else {
				yynn666 = 0
				for _, b := range yyq666 {
					if b {
						yynn666++
					}
				}
				r.EncodeMapStart(yynn666)
				yynn666 = 0
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq666[0] {
					yym668 := z.EncBinary()
					_ = yym668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq666[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym669 := z.EncBinary()
					_ = yym669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq666[1] {
					yym671 := z.EncBinary()
					_ = yym671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq666[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq666[2] {
					yym674 := z.EncBinary()
					_ = yym674
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq666[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym675 := z.EncBinary()
					_ = yym675
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq666[3] {
					yym677 := z.EncBinary()
					_ = yym677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq666[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym678 := z.EncBinary()
					_ = yym678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq666[4] {
					yym680 := z.EncBinary()
					_ = yym680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq666[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym681 := z.EncBinary()
					_ = yym681
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq666[5] {
					yym683 := z.EncBinary()
					_ = yym683
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq666[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym684 := z.EncBinary()
					_ = yym684
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym685 := z.DecBinary()
	_ = yym685
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct686 := r.ContainerType()
		if yyct686 == codecSelferValueTypeMap1234 {
			yyl686 := r.ReadMapStart()
			if yyl686 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl686, d)
			}
		} else if yyct686 == codecSelferValueTypeArray1234 {
			yyl686 := r.ReadArrayStart()
			if yyl686 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl686, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys687Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys687Slc
	var yyhl687 bool = l >= 0
	for yyj687 := 0; ; yyj687++ {
		if yyhl687 {
			if yyj687 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys687Slc = r.DecodeBytes(yys687Slc, true, true)
		yys687 := string(yys687Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys687 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys687)
		} // end switch yys687
	} // end for yyj687
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj694 int
	var yyb694 bool
	var yyhl694 bool = l >= 0
	yyj694++
	if yyhl694 {
		yyb694 = yyj694 > l
	} else {
		yyb694 = r.CheckBreak()
	}
	if yyb694 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj694++
	if yyhl694 {
		yyb694 = yyj694 > l
	} else {
		yyb694 = r.CheckBreak()
	}
	if yyb694 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj694++
	if yyhl694 {
		yyb694 = yyj694 > l
	} else {
		yyb694 = r.CheckBreak()
	}
	if yyb694 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj694++
	if yyhl694 {
		yyb694 = yyj694 > l
	} else {
		yyb694 = r.CheckBreak()
	}
	if yyb694 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj694++
	if yyhl694 {
		yyb694 = yyj694 > l
	} else {
		yyb694 = r.CheckBreak()
	}
	if yyb694 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj694++
	if yyhl694 {
		yyb694 = yyj694 > l
	} else {
		yyb694 = r.CheckBreak()
	}
	if yyb694 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj694++
		if yyhl694 {
			yyb694 = yyj694 > l
		} else {
			yyb694 = r.CheckBreak()
		}
		if yyb694 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj694-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym701 := z.EncBinary()
		_ = yym701
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep702 := !z.EncBinary()
			yy2arr702 := z.EncBasicHandle().StructToArray
			var yyq702 [4]bool
			_, _, _ = yysep702, yyq702, yy2arr702
			const yyr702 bool = false
			yyq702[2] = x.FSType != ""
			yyq702[3] = x.ReadOnly != false
			var yynn702 int
			if yyr702 || yy2arr702 {
				r.EncodeArrayStart(4)
			} else {
				yynn702 = 2
				for _, b := range yyq702 {
					if b {
						yynn702++
					}
				}
				r.EncodeMapStart(yynn702)
				yynn702 = 0
			}
			if yyr702 || yy2arr702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym704 := z.EncBinary()
					_ = yym704
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym705 := z.EncBinary()
					_ = yym705
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr702 || yy2arr702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy707 := *x.Lun
					yym708 := z.EncBinary()
					_ = yym708
					if false {
					} else {
						r.EncodeInt(int64(yy707))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy709 := *x.Lun
					yym710 := z.EncBinary()
					_ = yym710
					if false {
					} else {
						r.EncodeInt(int64(yy709))
					}
				}
			}
			if yyr702 || yy2arr702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq702[2] {
					yym712 := z.EncBinary()
					_ = yym712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq702[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym713 := z.EncBinary()
					_ = yym713
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr702 || yy2arr702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq702[3] {
					yym715 := z.EncBinary()
					_ = yym715
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq702[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym716 := z.EncBinary()
					_ = yym716
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr702 || yy2arr702 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym717 := z.DecBinary()
	_ = yym717
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct718 := r.ContainerType()
		if yyct718 == codecSelferValueTypeMap1234 {
			yyl718 := r.ReadMapStart()
			if yyl718 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl718, d)
			}
		} else if yyct718 == codecSelferValueTypeArray1234 {
			yyl718 := r.ReadArrayStart()
			if yyl718 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl718, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys719Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys719Slc
	var yyhl719 bool = l >= 0
	for yyj719 := 0; ; yyj719++ {
		if yyhl719 {
			if yyj719 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys719Slc = r.DecodeBytes(yys719Slc, true, true)
		yys719 := string(yys719Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys719 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv720 := &x.TargetWWNs
				yym721 := z.DecBinary()
				_ = yym721
				if false {
				} else {
					z.F.DecSliceStringX(yyv720, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym723 := z.DecBinary()
				_ = yym723
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys719)
		} // end switch yys719
	} // end for yyj719
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj726 int
	var yyb726 bool
	var yyhl726 bool = l >= 0
	yyj726++
	if yyhl726 {
		yyb726 = yyj726 > l
	} else {
		yyb726 = r.CheckBreak()
	}
	if yyb726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv727 := &x.TargetWWNs
		yym728 := z.DecBinary()
		_ = yym728
		if false {
		} else {
			z.F.DecSliceStringX(yyv727, false, d)
		}
	}
	yyj726++
	if yyhl726 {
		yyb726 = yyj726 > l
	} else {
		yyb726 = r.CheckBreak()
	}
	if yyb726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym730 := z.DecBinary()
		_ = yym730
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj726++
	if yyhl726 {
		yyb726 = yyj726 > l
	} else {
		yyb726 = r.CheckBreak()
	}
	if yyb726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj726++
	if yyhl726 {
		yyb726 = yyj726 > l
	} else {
		yyb726 = r.CheckBreak()
	}
	if yyb726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj726++
		if yyhl726 {
			yyb726 = yyj726 > l
		} else {
			yyb726 = r.CheckBreak()
		}
		if yyb726 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj726-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym733 := z.EncBinary()
		_ = yym733
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep734 := !z.EncBinary()
			yy2arr734 := z.EncBasicHandle().StructToArray
			var yyq734 [5]bool
			_, _, _ = yysep734, yyq734, yy2arr734
			const yyr734 bool = false
			yyq734[1] = x.FSType != ""
			yyq734[2] = x.SecretRef != nil
			yyq734[3] = x.ReadOnly != false
			yyq734[4] = len(x.Options) != 0
			var yynn734 int
			if yyr734 || yy2arr734 {
				r.EncodeArrayStart(5)
			} else {
				yynn734 = 1
				for _, b := range yyq734 {
					if b {
						yynn734++
					}
				}
				r.EncodeMapStart(yynn734)
				yynn734 = 0
			}
			if yyr734 || yy2arr734 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym736 := z.EncBinary()
				_ = yym736
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym737 := z.EncBinary()
				_ = yym737
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr734 || yy2arr734 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq734[1] {
					yym739 := z.EncBinary()
					_ = yym739
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq734[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym740 := z.EncBinary()
					_ = yym740
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr734 || yy2arr734 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq734[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq734[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr734 || yy2arr734 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq734[3] {
					yym743 := z.EncBinary()
					_ = yym743
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq734[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym744 := z.EncBinary()
					_ = yym744
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr734 || yy2arr734 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq734[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym746 := z.EncBinary()
						_ = yym746
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq734[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym747 := z.EncBinary()
						_ = yym747
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr734 || yy2arr734 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym748 := z.DecBinary()
	_ = yym748
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct749 := r.ContainerType()
		if yyct749 == codecSelferValueTypeMap1234 {
			yyl749 := r.ReadMapStart()
			if yyl749 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl749, d)
			}
		} else if yyct749 == codecSelferValueTypeArray1234 {
			yyl749 := r.ReadArrayStart()
			if yyl749 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl749, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys750Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys750Slc
	var yyhl750 bool = l >= 0
	for yyj750 := 0; ; yyj750++ {
		if yyhl750 {
			if yyj750 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys750Slc = r.DecodeBytes(yys750Slc, true, true)
		yys750 := string(yys750Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys750 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv755 := &x.Options
				yym756 := z.DecBinary()
				_ = yym756
				if false {
				} else {
					z.F.DecMapStringStringX(yyv755, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys750)
		} // end switch yys750
	} // end for yyj750
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj757 int
	var yyb757 bool
	var yyhl757 bool = l >= 0
	yyj757++
	if yyhl757 {
		yyb757 = yyj757 > l
	} else {
		yyb757 = r.CheckBreak()
	}
	if yyb757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj757++
	if yyhl757 {
		yyb757 = yyj757 > l
	} else {
		yyb757 = r.CheckBreak()
	}
	if yyb757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj757++
	if yyhl757 {
		yyb757 = yyj757 > l
	} else {
		yyb757 = r.CheckBreak()
	}
	if yyb757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj757++
	if yyhl757 {
		yyb757 = yyj757 > l
	} else {
		yyb757 = r.CheckBreak()
	}
	if yyb757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj757++
	if yyhl757 {
		yyb757 = yyj757 > l
	} else {
		yyb757 = r.CheckBreak()
	}
	if yyb757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv762 := &x.Options
		yym763 := z.DecBinary()
		_ = yym763
		if false {
		} else {
			z.F.DecMapStringStringX(yyv762, false, d)
		}
	}
	for {
		yyj757++
		if yyhl757 {
			yyb757 = yyj757 > l
		} else {
			yyb757 = r.CheckBreak()
		}
		if yyb757 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj757-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym764 := z.EncBinary()
		_ = yym764
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep765 := !z.EncBinary()
			yy2arr765 := z.EncBasicHandle().StructToArray
			var yyq765 [4]bool
			_, _, _ = yysep765, yyq765, yy2arr765
			const yyr765 bool = false
			yyq765[1] = x.FSType != ""
			yyq765[2] = x.Partition != 0
			yyq765[3] = x.ReadOnly != false
			var yynn765 int
			if yyr765 || yy2arr765 {
				r.EncodeArrayStart(4)
			} else {
				yynn765 = 1
				for _, b := range yyq765 {
					if b {
						yynn765++
					}
				}
				r.EncodeMapStart(yynn765)
				yynn765 = 0
			}
			if yyr765 || yy2arr765 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym767 := z.EncBinary()
				_ = yym767
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym768 := z.EncBinary()
				_ = yym768
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr765 || yy2arr765 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq765[1] {
					yym770 := z.EncBinary()
					_ = yym770
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq765[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym771 := z.EncBinary()
					_ = yym771
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr765 || yy2arr765 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq765[2] {
					yym773 := z.EncBinary()
					_ = yym773
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq765[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym774 := z.EncBinary()
					_ = yym774
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr765 || yy2arr765 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq765[3] {
					yym776 := z.EncBinary()
					_ = yym776
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq765[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym777 := z.EncBinary()
					_ = yym777
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr765 || yy2arr765 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym778 := z.DecBinary()
	_ = yym778
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct779 := r.ContainerType()
		if yyct779 == codecSelferValueTypeMap1234 {
			yyl779 := r.ReadMapStart()
			if yyl779 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl779, d)
			}
		} else if yyct779 == codecSelferValueTypeArray1234 {
			yyl779 := r.ReadArrayStart()
			if yyl779 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl779, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys780Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys780Slc
	var yyhl780 bool = l >= 0
	for yyj780 := 0; ; yyj780++ {
		if yyhl780 {
			if yyj780 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys780Slc = r.DecodeBytes(yys780Slc, true, true)
		yys780 := string(yys780Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys780 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys780)
		} // end switch yys780
	} // end for yyj780
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj785 int
	var yyb785 bool
	var yyhl785 bool = l >= 0
	yyj785++
	if yyhl785 {
		yyb785 = yyj785 > l
	} else {
		yyb785 = r.CheckBreak()
	}
	if yyb785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj785++
	if yyhl785 {
		yyb785 = yyj785 > l
	} else {
		yyb785 = r.CheckBreak()
	}
	if yyb785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj785++
	if yyhl785 {
		yyb785 = yyj785 > l
	} else {
		yyb785 = r.CheckBreak()
	}
	if yyb785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj785++
	if yyhl785 {
		yyb785 = yyj785 > l
	} else {
		yyb785 = r.CheckBreak()
	}
	if yyb785 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj785++
		if yyhl785 {
			yyb785 = yyj785 > l
		} else {
			yyb785 = r.CheckBreak()
		}
		if yyb785 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj785-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym790 := z.EncBinary()
		_ = yym790
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep791 := !z.EncBinary()
			yy2arr791 := z.EncBasicHandle().StructToArray
			var yyq791 [3]bool
			_, _, _ = yysep791, yyq791, yy2arr791
			const yyr791 bool = false
			yyq791[1] = x.Revision != ""
			yyq791[2] = x.Directory != ""
			var yynn791 int
			if yyr791 || yy2arr791 {
				r.EncodeArrayStart(3)
			} else {
				yynn791 = 1
				for _, b := range yyq791 {
					if b {
						yynn791++
					}
				}
				r.EncodeMapStart(yynn791)
				yynn791 = 0
			}
			if yyr791 || yy2arr791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym793 := z.EncBinary()
				_ = yym793
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym794 := z.EncBinary()
				_ = yym794
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr791 || yy2arr791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq791[1] {
					yym796 := z.EncBinary()
					_ = yym796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq791[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym797 := z.EncBinary()
					_ = yym797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr791 || yy2arr791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq791[2] {
					yym799 := z.EncBinary()
					_ = yym799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq791[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym800 := z.EncBinary()
					_ = yym800
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr791 || yy2arr791 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym801 := z.DecBinary()
	_ = yym801
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct802 := r.ContainerType()
		if yyct802 == codecSelferValueTypeMap1234 {
			yyl802 := r.ReadMapStart()
			if yyl802 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl802, d)
			}
		} else if yyct802 == codecSelferValueTypeArray1234 {
			yyl802 := r.ReadArrayStart()
			if yyl802 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl802, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys803Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys803Slc
	var yyhl803 bool = l >= 0
	for yyj803 := 0; ; yyj803++ {
		if yyhl803 {
			if yyj803 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys803Slc = r.DecodeBytes(yys803Slc, true, true)
		yys803 := string(yys803Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys803 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys803)
		} // end switch yys803
	} // end for yyj803
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj807 int
	var yyb807 bool
	var yyhl807 bool = l >= 0
	yyj807++
	if yyhl807 {
		yyb807 = yyj807 > l
	} else {
		yyb807 = r.CheckBreak()
	}
	if yyb807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj807++
	if yyhl807 {
		yyb807 = yyj807 > l
	} else {
		yyb807 = r.CheckBreak()
	}
	if yyb807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj807++
	if yyhl807 {
		yyb807 = yyj807 > l
	} else {
		yyb807 = r.CheckBreak()
	}
	if yyb807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj807++
		if yyhl807 {
			yyb807 = yyj807 > l
		} else {
			yyb807 = r.CheckBreak()
		}
		if yyb807 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj807-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym811 := z.EncBinary()
		_ = yym811
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep812 := !z.EncBinary()
			yy2arr812 := z.EncBasicHandle().StructToArray
			var yyq812 [3]bool
			_, _, _ = yysep812, yyq812, yy2arr812
			const yyr812 bool = false
			yyq812[0] = x.SecretName != ""
			yyq812[1] = len(x.Items) != 0
			yyq812[2] = x.DefaultMode != nil
			var yynn812 int
			if yyr812 || yy2arr812 {
				r.EncodeArrayStart(3)
			} else {
				yynn812 = 0
				for _, b := range yyq812 {
					if b {
						yynn812++
					}
				}
				r.EncodeMapStart(yynn812)
				yynn812 = 0
			}
			if yyr812 || yy2arr812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq812[0] {
					yym814 := z.EncBinary()
					_ = yym814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq812[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym815 := z.EncBinary()
					_ = yym815
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr812 || yy2arr812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq812[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym817 := z.EncBinary()
						_ = yym817
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq812[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym818 := z.EncBinary()
						_ = yym818
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr812 || yy2arr812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq812[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy820 := *x.DefaultMode
						yym821 := z.EncBinary()
						_ = yym821
						if false {
						} else {
							r.EncodeInt(int64(yy820))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq812[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy822 := *x.DefaultMode
						yym823 := z.EncBinary()
						_ = yym823
						if false {
						} else {
							r.EncodeInt(int64(yy822))
						}
					}
				}
			}
			if yyr812 || yy2arr812 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym824 := z.DecBinary()
	_ = yym824
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct825 := r.ContainerType()
		if yyct825 == codecSelferValueTypeMap1234 {
			yyl825 := r.ReadMapStart()
			if yyl825 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl825, d)
			}
		} else if yyct825 == codecSelferValueTypeArray1234 {
			yyl825 := r.ReadArrayStart()
			if yyl825 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl825, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys826Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys826Slc
	var yyhl826 bool = l >= 0
	for yyj826 := 0; ; yyj826++ {
		if yyhl826 {
			if yyj826 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys826Slc = r.DecodeBytes(yys826Slc, true, true)
		yys826 := string(yys826Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys826 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv828 := &x.Items
				yym829 := z.DecBinary()
				_ = yym829
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv828), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym831 := z.DecBinary()
				_ = yym831
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys826)
		} // end switch yys826
	} // end for yyj826
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj832 int
	var yyb832 bool
	var yyhl832 bool = l >= 0
	yyj832++
	if yyhl832 {
		yyb832 = yyj832 > l
	} else {
		yyb832 = r.CheckBreak()
	}
	if yyb832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj832++
	if yyhl832 {
		yyb832 = yyj832 > l
	} else {
		yyb832 = r.CheckBreak()
	}
	if yyb832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv834 := &x.Items
		yym835 := z.DecBinary()
		_ = yym835
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv834), d)
		}
	}
	yyj832++
	if yyhl832 {
		yyb832 = yyj832 > l
	} else {
		yyb832 = r.CheckBreak()
	}
	if yyb832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym837 := z.DecBinary()
		_ = yym837
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj832++
		if yyhl832 {
			yyb832 = yyj832 > l
		} else {
			yyb832 = r.CheckBreak()
		}
		if yyb832 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj832-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym838 := z.EncBinary()
		_ = yym838
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep839 := !z.EncBinary()
			yy2arr839 := z.EncBasicHandle().StructToArray
			var yyq839 [3]bool
			_, _, _ = yysep839, yyq839, yy2arr839
			const yyr839 bool = false
			yyq839[2] = x.ReadOnly != false
			var yynn839 int
			if yyr839 || yy2arr839 {
				r.EncodeArrayStart(3)
			} else {
				yynn839 = 2
				for _, b := range yyq839 {
					if b {
						yynn839++
					}
				}
				r.EncodeMapStart(yynn839)
				yynn839 = 0
			}
			if yyr839 || yy2arr839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym841 := z.EncBinary()
				_ = yym841
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym842 := z.EncBinary()
				_ = yym842
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr839 || yy2arr839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym844 := z.EncBinary()
				_ = yym844
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym845 := z.EncBinary()
				_ = yym845
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr839 || yy2arr839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq839[2] {
					yym847 := z.EncBinary()
					_ = yym847
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq839[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym848 := z.EncBinary()
					_ = yym848
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr839 || yy2arr839 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym849 := z.DecBinary()
	_ = yym849
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct850 := r.ContainerType()
		if yyct850 == codecSelferValueTypeMap1234 {
			yyl850 := r.ReadMapStart()
			if yyl850 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl850, d)
			}
		} else if yyct850 == codecSelferValueTypeArray1234 {
			yyl850 := r.ReadArrayStart()
			if yyl850 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl850, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys851Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys851Slc
	var yyhl851 bool = l >= 0
	for yyj851 := 0; ; yyj851++ {
		if yyhl851 {
			if yyj851 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys851Slc = r.DecodeBytes(yys851Slc, true, true)
		yys851 := string(yys851Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys851 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys851)
		} // end switch yys851
	} // end for yyj851
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj855 int
	var yyb855 bool
	var yyhl855 bool = l >= 0
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj855++
		if yyhl855 {
			yyb855 = yyj855 > l
		} else {
			yyb855 = r.CheckBreak()
		}
		if yyb855 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj855-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *QuobyteVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym859 := z.EncBinary()
		_ = yym859
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep860 := !z.EncBinary()
			yy2arr860 := z.EncBasicHandle().StructToArray
			var yyq860 [5]bool
			_, _, _ = yysep860, yyq860, yy2arr860
			const yyr860 bool = false
			yyq860[2] = x.ReadOnly != false
			yyq860[3] = x.User != ""
			yyq860[4] = x.Group != ""
			var yynn860 int
			if yyr860 || yy2arr860 {
				r.EncodeArrayStart(5)
			} else {
				yynn860 = 2
				for _, b := range yyq860 {
					if b {
						yynn860++
					}
				}
				r.EncodeMapStart(yynn860)
				yynn860 = 0
			}
			if yyr860 || yy2arr860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym862 := z.EncBinary()
				_ = yym862
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("registry"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym863 := z.EncBinary()
				_ = yym863
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			}
			if yyr860 || yy2arr860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym865 := z.EncBinary()
				_ = yym865
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volume"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym866 := z.EncBinary()
				_ = yym866
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			}
			if yyr860 || yy2arr860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq860[2] {
					yym868 := z.EncBinary()
					_ = yym868
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq860[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym869 := z.EncBinary()
					_ = yym869
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr860 || yy2arr860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq860[3] {
					yym871 := z.EncBinary()
					_ = yym871
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq860[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym872 := z.EncBinary()
					_ = yym872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr860 || yy2arr860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq860[4] {
					yym874 := z.EncBinary()
					_ = yym874
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq860[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym875 := z.EncBinary()
					_ = yym875
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				}
			}
			if yyr860 || yy2arr860 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *QuobyteVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym876 := z.DecBinary()
	_ = yym876
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct877 := r.ContainerType()
		if yyct877 == codecSelferValueTypeMap1234 {
			yyl877 := r.ReadMapStart()
			if yyl877 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl877, d)
			}
		} else if yyct877 == codecSelferValueTypeArray1234 {
			yyl877 := r.ReadArrayStart()
			if yyl877 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl877, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys878Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys878Slc
	var yyhl878 bool = l >= 0
	for yyj878 := 0; ; yyj878++ {
		if yyhl878 {
			if yyj878 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys878Slc = r.DecodeBytes(yys878Slc, true, true)
		yys878 := string(yys878Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys878 {
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = string(r.DecodeString())
			}
		case "volume":
			if r.TryDecodeAsNil() {
				x.Volume = ""
			} else {
				x.Volume = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				x.Group = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys878)
		} // end switch yys878
	} // end for yyj878
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj884 int
	var yyb884 bool
	var yyhl884 bool = l >= 0
	yyj884++
	if yyhl884 {
		yyb884 = yyj884 > l
	} else {
		yyb884 = r.CheckBreak()
	}
	if yyb884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = string(r.DecodeString())
	}
	yyj884++
	if yyhl884 {
		yyb884 = yyj884 > l
	} else {
		yyb884 = r.CheckBreak()
	}
	if yyb884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volume = ""
	} else {
		x.Volume = string(r.DecodeString())
	}
	yyj884++
	if yyhl884 {
		yyb884 = yyj884 > l
	} else {
		yyb884 = r.CheckBreak()
	}
	if yyb884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj884++
	if yyhl884 {
		yyb884 = yyj884 > l
	} else {
		yyb884 = r.CheckBreak()
	}
	if yyb884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj884++
	if yyhl884 {
		yyb884 = yyj884 > l
	} else {
		yyb884 = r.CheckBreak()
	}
	if yyb884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		x.Group = string(r.DecodeString())
	}
	for {
		yyj884++
		if yyhl884 {
			yyb884 = yyj884 > l
		} else {
			yyb884 = r.CheckBreak()
		}
		if yyb884 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj884-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym890 := z.EncBinary()
		_ = yym890
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep891 := !z.EncBinary()
			yy2arr891 := z.EncBasicHandle().StructToArray
			var yyq891 [3]bool
			_, _, _ = yysep891, yyq891, yy2arr891
			const yyr891 bool = false
			yyq891[2] = x.ReadOnly != false
			var yynn891 int
			if yyr891 || yy2arr891 {
				r.EncodeArrayStart(3)
			} else {
				yynn891 = 2
				for _, b := range yyq891 {
					if b {
						yynn891++
					}
				}
				r.EncodeMapStart(yynn891)
				yynn891 = 0
			}
			if yyr891 || yy2arr891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym893 := z.EncBinary()
				_ = yym893
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym894 := z.EncBinary()
				_ = yym894
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr891 || yy2arr891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym896 := z.EncBinary()
				_ = yym896
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym897 := z.EncBinary()
				_ = yym897
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr891 || yy2arr891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq891[2] {
					yym899 := z.EncBinary()
					_ = yym899
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq891[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym900 := z.EncBinary()
					_ = yym900
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr891 || yy2arr891 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym901 := z.DecBinary()
	_ = yym901
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct902 := r.ContainerType()
		if yyct902 == codecSelferValueTypeMap1234 {
			yyl902 := r.ReadMapStart()
			if yyl902 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl902, d)
			}
		} else if yyct902 == codecSelferValueTypeArray1234 {
			yyl902 := r.ReadArrayStart()
			if yyl902 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl902, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys903Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys903Slc
	var yyhl903 bool = l >= 0
	for yyj903 := 0; ; yyj903++ {
		if yyhl903 {
			if yyj903 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys903Slc = r.DecodeBytes(yys903Slc, true, true)
		yys903 := string(yys903Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys903 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys903)
		} // end switch yys903
	} // end for yyj903
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj907 int
	var yyb907 bool
	var yyhl907 bool = l >= 0
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj907++
		if yyhl907 {
			yyb907 = yyj907 > l
		} else {
			yyb907 = r.CheckBreak()
		}
		if yyb907 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj907-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym911 := z.EncBinary()
		_ = yym911
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep912 := !z.EncBinary()
			yy2arr912 := z.EncBasicHandle().StructToArray
			var yyq912 [8]bool
			_, _, _ = yysep912, yyq912, yy2arr912
			const yyr912 bool = false
			yyq912[2] = x.FSType != ""
			yyq912[3] = x.RBDPool != ""
			yyq912[4] = x.RadosUser != ""
			yyq912[5] = x.Keyring != ""
			yyq912[6] = x.SecretRef != nil
			yyq912[7] = x.ReadOnly != false
			var yynn912 int
			if yyr912 || yy2arr912 {
				r.EncodeArrayStart(8)
			} else {
				yynn912 = 2
				for _, b := range yyq912 {
					if b {
						yynn912++
					}
				}
				r.EncodeMapStart(yynn912)
				yynn912 = 0
			}
			if yyr912 || yy2arr912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym914 := z.EncBinary()
					_ = yym914
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym915 := z.EncBinary()
					_ = yym915
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr912 || yy2arr912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym917 := z.EncBinary()
				_ = yym917
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym918 := z.EncBinary()
				_ = yym918
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr912 || yy2arr912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq912[2] {
					yym920 := z.EncBinary()
					_ = yym920
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq912[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym921 := z.EncBinary()
					_ = yym921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr912 || yy2arr912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq912[3] {
					yym923 := z.EncBinary()
					_ = yym923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq912[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym924 := z.EncBinary()
					_ = yym924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr912 || yy2arr912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq912[4] {
					yym926 := z.EncBinary()
					_ = yym926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq912[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym927 := z.EncBinary()
					_ = yym927
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr912 || yy2arr912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq912[5] {
					yym929 := z.EncBinary()
					_ = yym929
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq912[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym930 := z.EncBinary()
					_ = yym930
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr912 || yy2arr912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq912[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq912[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr912 || yy2arr912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq912[7] {
					yym933 := z.EncBinary()
					_ = yym933
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq912[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym934 := z.EncBinary()
					_ = yym934
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr912 || yy2arr912 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym935 := z.DecBinary()
	_ = yym935
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct936 := r.ContainerType()
		if yyct936 == codecSelferValueTypeMap1234 {
			yyl936 := r.ReadMapStart()
			if yyl936 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl936, d)
			}
		} else if yyct936 == codecSelferValueTypeArray1234 {
			yyl936 := r.ReadArrayStart()
			if yyl936 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl936, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys937Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys937Slc
	var yyhl937 bool = l >= 0
	for yyj937 := 0; ; yyj937++ {
		if yyhl937 {
			if yyj937 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys937Slc = r.DecodeBytes(yys937Slc, true, true)
		yys937 := string(yys937Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys937 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv938 := &x.CephMonitors
				yym939 := z.DecBinary()
				_ = yym939
				if false {
				} else {
					z.F.DecSliceStringX(yyv938, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys937)
		} // end switch yys937
	} // end for yyj937
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj947 int
	var yyb947 bool
	var yyhl947 bool = l >= 0
	yyj947++
	if yyhl947 {
		yyb947 = yyj947 > l
	} else {
		yyb947 = r.CheckBreak()
	}
	if yyb947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv948 := &x.CephMonitors
		yym949 := z.DecBinary()
		_ = yym949
		if false {
		} else {
			z.F.DecSliceStringX(yyv948, false, d)
		}
	}
	yyj947++
	if yyhl947 {
		yyb947 = yyj947 > l
	} else {
		yyb947 = r.CheckBreak()
	}
	if yyb947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj947++
	if yyhl947 {
		yyb947 = yyj947 > l
	} else {
		yyb947 = r.CheckBreak()
	}
	if yyb947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj947++
	if yyhl947 {
		yyb947 = yyj947 > l
	} else {
		yyb947 = r.CheckBreak()
	}
	if yyb947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj947++
	if yyhl947 {
		yyb947 = yyj947 > l
	} else {
		yyb947 = r.CheckBreak()
	}
	if yyb947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj947++
	if yyhl947 {
		yyb947 = yyj947 > l
	} else {
		yyb947 = r.CheckBreak()
	}
	if yyb947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj947++
	if yyhl947 {
		yyb947 = yyj947 > l
	} else {
		yyb947 = r.CheckBreak()
	}
	if yyb947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj947++
	if yyhl947 {
		yyb947 = yyj947 > l
	} else {
		yyb947 = r.CheckBreak()
	}
	if yyb947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj947++
		if yyhl947 {
			yyb947 = yyj947 > l
		} else {
			yyb947 = r.CheckBreak()
		}
		if yyb947 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj947-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym957 := z.EncBinary()
		_ = yym957
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep958 := !z.EncBinary()
			yy2arr958 := z.EncBasicHandle().StructToArray
			var yyq958 [3]bool
			_, _, _ = yysep958, yyq958, yy2arr958
			const yyr958 bool = false
			yyq958[1] = x.FSType != ""
			yyq958[2] = x.ReadOnly != false
			var yynn958 int
			if yyr958 || yy2arr958 {
				r.EncodeArrayStart(3)
			} else {
				yynn958 = 1
				for _, b := range yyq958 {
					if b {
						yynn958++
					}
				}
				r.EncodeMapStart(yynn958)
				yynn958 = 0
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym960 := z.EncBinary()
				_ = yym960
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym961 := z.EncBinary()
				_ = yym961
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq958[1] {
					yym963 := z.EncBinary()
					_ = yym963
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq958[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym964 := z.EncBinary()
					_ = yym964
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq958[2] {
					yym966 := z.EncBinary()
					_ = yym966
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq958[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym967 := z.EncBinary()
					_ = yym967
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym968 := z.DecBinary()
	_ = yym968
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct969 := r.ContainerType()
		if yyct969 == codecSelferValueTypeMap1234 {
			yyl969 := r.ReadMapStart()
			if yyl969 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl969, d)
			}
		} else if yyct969 == codecSelferValueTypeArray1234 {
			yyl969 := r.ReadArrayStart()
			if yyl969 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl969, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys970Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys970Slc
	var yyhl970 bool = l >= 0
	for yyj970 := 0; ; yyj970++ {
		if yyhl970 {
			if yyj970 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys970Slc = r.DecodeBytes(yys970Slc, true, true)
		yys970 := string(yys970Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys970 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys970)
		} // end switch yys970
	} // end for yyj970
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj974 int
	var yyb974 bool
	var yyhl974 bool = l >= 0
	yyj974++
	if yyhl974 {
		yyb974 = yyj974 > l
	} else {
		yyb974 = r.CheckBreak()
	}
	if yyb974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj974++
	if yyhl974 {
		yyb974 = yyj974 > l
	} else {
		yyb974 = r.CheckBreak()
	}
	if yyb974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj974++
	if yyhl974 {
		yyb974 = yyj974 > l
	} else {
		yyb974 = r.CheckBreak()
	}
	if yyb974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj974++
		if yyhl974 {
			yyb974 = yyj974 > l
		} else {
			yyb974 = r.CheckBreak()
		}
		if yyb974 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj974-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym978 := z.EncBinary()
		_ = yym978
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep979 := !z.EncBinary()
			yy2arr979 := z.EncBasicHandle().StructToArray
			var yyq979 [6]bool
			_, _, _ = yysep979, yyq979, yy2arr979
			const yyr979 bool = false
			yyq979[1] = x.Path != ""
			yyq979[2] = x.User != ""
			yyq979[3] = x.SecretFile != ""
			yyq979[4] = x.SecretRef != nil
			yyq979[5] = x.ReadOnly != false
			var yynn979 int
			if yyr979 || yy2arr979 {
				r.EncodeArrayStart(6)
			} else {
				yynn979 = 1
				for _, b := range yyq979 {
					if b {
						yynn979++
					}
				}
				r.EncodeMapStart(yynn979)
				yynn979 = 0
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym981 := z.EncBinary()
					_ = yym981
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym982 := z.EncBinary()
					_ = yym982
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[1] {
					yym984 := z.EncBinary()
					_ = yym984
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq979[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym985 := z.EncBinary()
					_ = yym985
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[2] {
					yym987 := z.EncBinary()
					_ = yym987
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq979[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym988 := z.EncBinary()
					_ = yym988
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[3] {
					yym990 := z.EncBinary()
					_ = yym990
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq979[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym991 := z.EncBinary()
					_ = yym991
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq979[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[5] {
					yym994 := z.EncBinary()
					_ = yym994
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq979[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym995 := z.EncBinary()
					_ = yym995
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym996 := z.DecBinary()
	_ = yym996
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct997 := r.ContainerType()
		if yyct997 == codecSelferValueTypeMap1234 {
			yyl997 := r.ReadMapStart()
			if yyl997 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl997, d)
			}
		} else if yyct997 == codecSelferValueTypeArray1234 {
			yyl997 := r.ReadArrayStart()
			if yyl997 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl997, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys998Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys998Slc
	var yyhl998 bool = l >= 0
	for yyj998 := 0; ; yyj998++ {
		if yyhl998 {
			if yyj998 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys998Slc = r.DecodeBytes(yys998Slc, true, true)
		yys998 := string(yys998Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys998 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv999 := &x.Monitors
				yym1000 := z.DecBinary()
				_ = yym1000
				if false {
				} else {
					z.F.DecSliceStringX(yyv999, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys998)
		} // end switch yys998
	} // end for yyj998
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1006 int
	var yyb1006 bool
	var yyhl1006 bool = l >= 0
	yyj1006++
	if yyhl1006 {
		yyb1006 = yyj1006 > l
	} else {
		yyb1006 = r.CheckBreak()
	}
	if yyb1006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv1007 := &x.Monitors
		yym1008 := z.DecBinary()
		_ = yym1008
		if false {
		} else {
			z.F.DecSliceStringX(yyv1007, false, d)
		}
	}
	yyj1006++
	if yyhl1006 {
		yyb1006 = yyj1006 > l
	} else {
		yyb1006 = r.CheckBreak()
	}
	if yyb1006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1006++
	if yyhl1006 {
		yyb1006 = yyj1006 > l
	} else {
		yyb1006 = r.CheckBreak()
	}
	if yyb1006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj1006++
	if yyhl1006 {
		yyb1006 = yyj1006 > l
	} else {
		yyb1006 = r.CheckBreak()
	}
	if yyb1006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj1006++
	if yyhl1006 {
		yyb1006 = yyj1006 > l
	} else {
		yyb1006 = r.CheckBreak()
	}
	if yyb1006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj1006++
	if yyhl1006 {
		yyb1006 = yyj1006 > l
	} else {
		yyb1006 = r.CheckBreak()
	}
	if yyb1006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1006++
		if yyhl1006 {
			yyb1006 = yyj1006 > l
		} else {
			yyb1006 = r.CheckBreak()
		}
		if yyb1006 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1006-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1014 := z.EncBinary()
		_ = yym1014
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1015 := !z.EncBinary()
			yy2arr1015 := z.EncBasicHandle().StructToArray
			var yyq1015 [2]bool
			_, _, _ = yysep1015, yyq1015, yy2arr1015
			const yyr1015 bool = false
			yyq1015[0] = x.DatasetName != ""
			yyq1015[1] = x.DatasetUUID != ""
			var yynn1015 int
			if yyr1015 || yy2arr1015 {
				r.EncodeArrayStart(2)
			} else {
				yynn1015 = 0
				for _, b := range yyq1015 {
					if b {
						yynn1015++
					}
				}
				r.EncodeMapStart(yynn1015)
				yynn1015 = 0
			}
			if yyr1015 || yy2arr1015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1015[0] {
					yym1017 := z.EncBinary()
					_ = yym1017
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1015[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1018 := z.EncBinary()
					_ = yym1018
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
					}
				}
			}
			if yyr1015 || yy2arr1015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1015[1] {
					yym1020 := z.EncBinary()
					_ = yym1020
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetUUID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1015[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("datasetUUID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1021 := z.EncBinary()
					_ = yym1021
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetUUID))
					}
				}
			}
			if yyr1015 || yy2arr1015 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1022 := z.DecBinary()
	_ = yym1022
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1023 := r.ContainerType()
		if yyct1023 == codecSelferValueTypeMap1234 {
			yyl1023 := r.ReadMapStart()
			if yyl1023 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1023, d)
			}
		} else if yyct1023 == codecSelferValueTypeArray1234 {
			yyl1023 := r.ReadArrayStart()
			if yyl1023 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1023, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1024Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1024Slc
	var yyhl1024 bool = l >= 0
	for yyj1024 := 0; ; yyj1024++ {
		if yyhl1024 {
			if yyj1024 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1024Slc = r.DecodeBytes(yys1024Slc, true, true)
		yys1024 := string(yys1024Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1024 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		case "datasetUUID":
			if r.TryDecodeAsNil() {
				x.DatasetUUID = ""
			} else {
				x.DatasetUUID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1024)
		} // end switch yys1024
	} // end for yyj1024
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1027 int
	var yyb1027 bool
	var yyhl1027 bool = l >= 0
	yyj1027++
	if yyhl1027 {
		yyb1027 = yyj1027 > l
	} else {
		yyb1027 = r.CheckBreak()
	}
	if yyb1027 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	yyj1027++
	if yyhl1027 {
		yyb1027 = yyj1027 > l
	} else {
		yyb1027 = r.CheckBreak()
	}
	if yyb1027 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetUUID = ""
	} else {
		x.DatasetUUID = string(r.DecodeString())
	}
	for {
		yyj1027++
		if yyhl1027 {
			yyb1027 = yyj1027 > l
		} else {
			yyb1027 = r.CheckBreak()
		}
		if yyb1027 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1027-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1030 := z.EncBinary()
		_ = yym1030
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1031 := !z.EncBinary()
			yy2arr1031 := z.EncBasicHandle().StructToArray
			var yyq1031 [2]bool
			_, _, _ = yysep1031, yyq1031, yy2arr1031
			const yyr1031 bool = false
			yyq1031[0] = len(x.Items) != 0
			yyq1031[1] = x.DefaultMode != nil
			var yynn1031 int
			if yyr1031 || yy2arr1031 {
				r.EncodeArrayStart(2)
			} else {
				yynn1031 = 0
				for _, b := range yyq1031 {
					if b {
						yynn1031++
					}
				}
				r.EncodeMapStart(yynn1031)
				yynn1031 = 0
			}
			if yyr1031 || yy2arr1031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1031[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1033 := z.EncBinary()
						_ = yym1033
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1031[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1034 := z.EncBinary()
						_ = yym1034
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr1031 || yy2arr1031 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1031[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1036 := *x.DefaultMode
						yym1037 := z.EncBinary()
						_ = yym1037
						if false {
						} else {
							r.EncodeInt(int64(yy1036))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1031[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1038 := *x.DefaultMode
						yym1039 := z.EncBinary()
						_ = yym1039
						if false {
						} else {
							r.EncodeInt(int64(yy1038))
						}
					}
				}
			}
			if yyr1031 || yy2arr1031 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1040 := z.DecBinary()
	_ = yym1040
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1041 := r.ContainerType()
		if yyct1041 == codecSelferValueTypeMap1234 {
			yyl1041 := r.ReadMapStart()
			if yyl1041 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1041, d)
			}
		} else if yyct1041 == codecSelferValueTypeArray1234 {
			yyl1041 := r.ReadArrayStart()
			if yyl1041 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1041, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1042Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1042Slc
	var yyhl1042 bool = l >= 0
	for yyj1042 := 0; ; yyj1042++ {
		if yyhl1042 {
			if yyj1042 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1042Slc = r.DecodeBytes(yys1042Slc, true, true)
		yys1042 := string(yys1042Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1042 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1043 := &x.Items
				yym1044 := z.DecBinary()
				_ = yym1044
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv1043), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1046 := z.DecBinary()
				_ = yym1046
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1042)
		} // end switch yys1042
	} // end for yyj1042
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1047 int
	var yyb1047 bool
	var yyhl1047 bool = l >= 0
	yyj1047++
	if yyhl1047 {
		yyb1047 = yyj1047 > l
	} else {
		yyb1047 = r.CheckBreak()
	}
	if yyb1047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1048 := &x.Items
		yym1049 := z.DecBinary()
		_ = yym1049
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv1048), d)
		}
	}
	yyj1047++
	if yyhl1047 {
		yyb1047 = yyj1047 > l
	} else {
		yyb1047 = r.CheckBreak()
	}
	if yyb1047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1051 := z.DecBinary()
		_ = yym1051
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1047++
		if yyhl1047 {
			yyb1047 = yyj1047 > l
		} else {
			yyb1047 = r.CheckBreak()
		}
		if yyb1047 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1047-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1052 := z.EncBinary()
		_ = yym1052
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1053 := !z.EncBinary()
			yy2arr1053 := z.EncBasicHandle().StructToArray
			var yyq1053 [4]bool
			_, _, _ = yysep1053, yyq1053, yy2arr1053
			const yyr1053 bool = false
			yyq1053[1] = x.FieldRef != nil
			yyq1053[2] = x.ResourceFieldRef != nil
			yyq1053[3] = x.Mode != nil
			var yynn1053 int
			if yyr1053 || yy2arr1053 {
				r.EncodeArrayStart(4)
			} else {
				yynn1053 = 1
				for _, b := range yyq1053 {
					if b {
						yynn1053++
					}
				}
				r.EncodeMapStart(yynn1053)
				yynn1053 = 0
			}
			if yyr1053 || yy2arr1053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1055 := z.EncBinary()
				_ = yym1055
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1056 := z.EncBinary()
				_ = yym1056
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1053 || yy2arr1053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1053[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1053[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1053 || yy2arr1053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1053[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1053[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1053 || yy2arr1053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1053[3] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1060 := *x.Mode
						yym1061 := z.EncBinary()
						_ = yym1061
						if false {
						} else {
							r.EncodeInt(int64(yy1060))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1053[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1062 := *x.Mode
						yym1063 := z.EncBinary()
						_ = yym1063
						if false {
						} else {
							r.EncodeInt(int64(yy1062))
						}
					}
				}
			}
			if yyr1053 || yy2arr1053 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1064 := z.DecBinary()
	_ = yym1064
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1065 := r.ContainerType()
		if yyct1065 == codecSelferValueTypeMap1234 {
			yyl1065 := r.ReadMapStart()
			if yyl1065 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1065, d)
			}
		} else if yyct1065 == codecSelferValueTypeArray1234 {
			yyl1065 := r.ReadArrayStart()
			if yyl1065 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1065, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1066Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1066Slc
	var yyhl1066 bool = l >= 0
	for yyj1066 := 0; ; yyj1066++ {
		if yyhl1066 {
			if yyj1066 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1066Slc = r.DecodeBytes(yys1066Slc, true, true)
		yys1066 := string(yys1066Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1066 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1071 := z.DecBinary()
				_ = yym1071
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1066)
		} // end switch yys1066
	} // end for yyj1066
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1072 int
	var yyb1072 bool
	var yyhl1072 bool = l >= 0
	yyj1072++
	if yyhl1072 {
		yyb1072 = yyj1072 > l
	} else {
		yyb1072 = r.CheckBreak()
	}
	if yyb1072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1072++
	if yyhl1072 {
		yyb1072 = yyj1072 > l
	} else {
		yyb1072 = r.CheckBreak()
	}
	if yyb1072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1072++
	if yyhl1072 {
		yyb1072 = yyj1072 > l
	} else {
		yyb1072 = r.CheckBreak()
	}
	if yyb1072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1072++
	if yyhl1072 {
		yyb1072 = yyj1072 > l
	} else {
		yyb1072 = r.CheckBreak()
	}
	if yyb1072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1077 := z.DecBinary()
		_ = yym1077
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1072++
		if yyhl1072 {
			yyb1072 = yyj1072 > l
		} else {
			yyb1072 = r.CheckBreak()
		}
		if yyb1072 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1072-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1078 := z.EncBinary()
		_ = yym1078
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1079 := !z.EncBinary()
			yy2arr1079 := z.EncBasicHandle().StructToArray
			var yyq1079 [3]bool
			_, _, _ = yysep1079, yyq1079, yy2arr1079
			const yyr1079 bool = false
			yyq1079[2] = x.ReadOnly != false
			var yynn1079 int
			if yyr1079 || yy2arr1079 {
				r.EncodeArrayStart(3)
			} else {
				yynn1079 = 2
				for _, b := range yyq1079 {
					if b {
						yynn1079++
					}
				}
				r.EncodeMapStart(yynn1079)
				yynn1079 = 0
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1081 := z.EncBinary()
				_ = yym1081
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1082 := z.EncBinary()
				_ = yym1082
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1084 := z.EncBinary()
				_ = yym1084
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1085 := z.EncBinary()
				_ = yym1085
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1079[2] {
					yym1087 := z.EncBinary()
					_ = yym1087
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1079[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1088 := z.EncBinary()
					_ = yym1088
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1079 || yy2arr1079 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1089 := z.DecBinary()
	_ = yym1089
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1090 := r.ContainerType()
		if yyct1090 == codecSelferValueTypeMap1234 {
			yyl1090 := r.ReadMapStart()
			if yyl1090 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1090, d)
			}
		} else if yyct1090 == codecSelferValueTypeArray1234 {
			yyl1090 := r.ReadArrayStart()
			if yyl1090 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1090, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1091Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1091Slc
	var yyhl1091 bool = l >= 0
	for yyj1091 := 0; ; yyj1091++ {
		if yyhl1091 {
			if yyj1091 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1091Slc = r.DecodeBytes(yys1091Slc, true, true)
		yys1091 := string(yys1091Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1091 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1091)
		} // end switch yys1091
	} // end for yyj1091
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1095 int
	var yyb1095 bool
	var yyhl1095 bool = l >= 0
	yyj1095++
	if yyhl1095 {
		yyb1095 = yyj1095 > l
	} else {
		yyb1095 = r.CheckBreak()
	}
	if yyb1095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1095++
	if yyhl1095 {
		yyb1095 = yyj1095 > l
	} else {
		yyb1095 = r.CheckBreak()
	}
	if yyb1095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1095++
	if yyhl1095 {
		yyb1095 = yyj1095 > l
	} else {
		yyb1095 = r.CheckBreak()
	}
	if yyb1095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1095++
		if yyhl1095 {
			yyb1095 = yyj1095 > l
		} else {
			yyb1095 = r.CheckBreak()
		}
		if yyb1095 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1095-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1099 := z.EncBinary()
		_ = yym1099
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1100 := !z.EncBinary()
			yy2arr1100 := z.EncBasicHandle().StructToArray
			var yyq1100 [2]bool
			_, _, _ = yysep1100, yyq1100, yy2arr1100
			const yyr1100 bool = false
			yyq1100[1] = x.FSType != ""
			var yynn1100 int
			if yyr1100 || yy2arr1100 {
				r.EncodeArrayStart(2)
			} else {
				yynn1100 = 1
				for _, b := range yyq1100 {
					if b {
						yynn1100++
					}
				}
				r.EncodeMapStart(yynn1100)
				yynn1100 = 0
			}
			if yyr1100 || yy2arr1100 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1102 := z.EncBinary()
				_ = yym1102
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1103 := z.EncBinary()
				_ = yym1103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1100 || yy2arr1100 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1100[1] {
					yym1105 := z.EncBinary()
					_ = yym1105
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1100[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1106 := z.EncBinary()
					_ = yym1106
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1100 || yy2arr1100 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1107 := z.DecBinary()
	_ = yym1107
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1108 := r.ContainerType()
		if yyct1108 == codecSelferValueTypeMap1234 {
			yyl1108 := r.ReadMapStart()
			if yyl1108 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1108, d)
			}
		} else if yyct1108 == codecSelferValueTypeArray1234 {
			yyl1108 := r.ReadArrayStart()
			if yyl1108 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1108, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1109Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1109Slc
	var yyhl1109 bool = l >= 0
	for yyj1109 := 0; ; yyj1109++ {
		if yyhl1109 {
			if yyj1109 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1109Slc = r.DecodeBytes(yys1109Slc, true, true)
		yys1109 := string(yys1109Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1109 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1109)
		} // end switch yys1109
	} // end for yyj1109
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1112 int
	var yyb1112 bool
	var yyhl1112 bool = l >= 0
	yyj1112++
	if yyhl1112 {
		yyb1112 = yyj1112 > l
	} else {
		yyb1112 = r.CheckBreak()
	}
	if yyb1112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1112++
	if yyhl1112 {
		yyb1112 = yyj1112 > l
	} else {
		yyb1112 = r.CheckBreak()
	}
	if yyb1112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1112++
		if yyhl1112 {
			yyb1112 = yyj1112 > l
		} else {
			yyb1112 = r.CheckBreak()
		}
		if yyb1112 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1112-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PhotonPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1115 := z.EncBinary()
		_ = yym1115
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1116 := !z.EncBinary()
			yy2arr1116 := z.EncBasicHandle().StructToArray
			var yyq1116 [2]bool
			_, _, _ = yysep1116, yyq1116, yy2arr1116
			const yyr1116 bool = false
			yyq1116[1] = x.FSType != ""
			var yynn1116 int
			if yyr1116 || yy2arr1116 {
				r.EncodeArrayStart(2)
			} else {
				yynn1116 = 1
				for _, b := range yyq1116 {
					if b {
						yynn1116++
					}
				}
				r.EncodeMapStart(yynn1116)
				yynn1116 = 0
			}
			if yyr1116 || yy2arr1116 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1118 := z.EncBinary()
				_ = yym1118
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PdID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1119 := z.EncBinary()
				_ = yym1119
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PdID))
				}
			}
			if yyr1116 || yy2arr1116 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1116[1] {
					yym1121 := z.EncBinary()
					_ = yym1121
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1116[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1122 := z.EncBinary()
					_ = yym1122
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1116 || yy2arr1116 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PhotonPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1123 := z.DecBinary()
	_ = yym1123
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1124 := r.ContainerType()
		if yyct1124 == codecSelferValueTypeMap1234 {
			yyl1124 := r.ReadMapStart()
			if yyl1124 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1124, d)
			}
		} else if yyct1124 == codecSelferValueTypeArray1234 {
			yyl1124 := r.ReadArrayStart()
			if yyl1124 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1124, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PhotonPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1125Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1125Slc
	var yyhl1125 bool = l >= 0
	for yyj1125 := 0; ; yyj1125++ {
		if yyhl1125 {
			if yyj1125 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1125Slc = r.DecodeBytes(yys1125Slc, true, true)
		yys1125 := string(yys1125Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1125 {
		case "pdID":
			if r.TryDecodeAsNil() {
				x.PdID = ""
			} else {
				x.PdID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1125)
		} // end switch yys1125
	} // end for yyj1125
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PhotonPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1128 int
	var yyb1128 bool
	var yyhl1128 bool = l >= 0
	yyj1128++
	if yyhl1128 {
		yyb1128 = yyj1128 > l
	} else {
		yyb1128 = r.CheckBreak()
	}
	if yyb1128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PdID = ""
	} else {
		x.PdID = string(r.DecodeString())
	}
	yyj1128++
	if yyhl1128 {
		yyb1128 = yyj1128 > l
	} else {
		yyb1128 = r.CheckBreak()
	}
	if yyb1128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1128++
		if yyhl1128 {
			yyb1128 = yyj1128 > l
		} else {
			yyb1128 = r.CheckBreak()
		}
		if yyb1128 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1128-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x AzureDataDiskCachingMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1131 := z.EncBinary()
	_ = yym1131
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *AzureDataDiskCachingMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1132 := z.DecBinary()
	_ = yym1132
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AzureDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1133 := z.EncBinary()
		_ = yym1133
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1134 := !z.EncBinary()
			yy2arr1134 := z.EncBasicHandle().StructToArray
			var yyq1134 [5]bool
			_, _, _ = yysep1134, yyq1134, yy2arr1134
			const yyr1134 bool = false
			yyq1134[2] = x.CachingMode != nil
			yyq1134[3] = x.FSType != nil
			yyq1134[4] = x.ReadOnly != nil
			var yynn1134 int
			if yyr1134 || yy2arr1134 {
				r.EncodeArrayStart(5)
			} else {
				yynn1134 = 2
				for _, b := range yyq1134 {
					if b {
						yynn1134++
					}
				}
				r.EncodeMapStart(yynn1134)
				yynn1134 = 0
			}
			if yyr1134 || yy2arr1134 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1136 := z.EncBinary()
				_ = yym1136
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1137 := z.EncBinary()
				_ = yym1137
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			}
			if yyr1134 || yy2arr1134 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1139 := z.EncBinary()
				_ = yym1139
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskURI"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1140 := z.EncBinary()
				_ = yym1140
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			}
			if yyr1134 || yy2arr1134 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1134[2] {
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1142 := *x.CachingMode
						yy1142.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1134[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cachingMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1143 := *x.CachingMode
						yy1143.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1134 || yy2arr1134 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1134[3] {
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1145 := *x.FSType
						yym1146 := z.EncBinary()
						_ = yym1146
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1145))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1134[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1147 := *x.FSType
						yym1148 := z.EncBinary()
						_ = yym1148
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1147))
						}
					}
				}
			}
			if yyr1134 || yy2arr1134 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1134[4] {
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1150 := *x.ReadOnly
						yym1151 := z.EncBinary()
						_ = yym1151
						if false {
						} else {
							r.EncodeBool(bool(yy1150))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1134[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1152 := *x.ReadOnly
						yym1153 := z.EncBinary()
						_ = yym1153
						if false {
						} else {
							r.EncodeBool(bool(yy1152))
						}
					}
				}
			}
			if yyr1134 || yy2arr1134 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1154 := z.DecBinary()
	_ = yym1154
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1155 := r.ContainerType()
		if yyct1155 == codecSelferValueTypeMap1234 {
			yyl1155 := r.ReadMapStart()
			if yyl1155 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1155, d)
			}
		} else if yyct1155 == codecSelferValueTypeArray1234 {
			yyl1155 := r.ReadArrayStart()
			if yyl1155 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1155, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1156Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1156Slc
	var yyhl1156 bool = l >= 0
	for yyj1156 := 0; ; yyj1156++ {
		if yyhl1156 {
			if yyj1156 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1156Slc = r.DecodeBytes(yys1156Slc, true, true)
		yys1156 := string(yys1156Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1156 {
		case "diskName":
			if r.TryDecodeAsNil() {
				x.DiskName = ""
			} else {
				x.DiskName = string(r.DecodeString())
			}
		case "diskURI":
			if r.TryDecodeAsNil() {
				x.DataDiskURI = ""
			} else {
				x.DataDiskURI = string(r.DecodeString())
			}
		case "cachingMode":
			if r.TryDecodeAsNil() {
				if x.CachingMode != nil {
					x.CachingMode = nil
				}
			} else {
				if x.CachingMode == nil {
					x.CachingMode = new(AzureDataDiskCachingMode)
				}
				x.CachingMode.CodecDecodeSelf(d)
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				if x.FSType != nil {
					x.FSType = nil
				}
			} else {
				if x.FSType == nil {
					x.FSType = new(string)
				}
				yym1161 := z.DecBinary()
				_ = yym1161
				if false {
				} else {
					*((*string)(x.FSType)) = r.DecodeString()
				}
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				if x.ReadOnly != nil {
					x.ReadOnly = nil
				}
			} else {
				if x.ReadOnly == nil {
					x.ReadOnly = new(bool)
				}
				yym1163 := z.DecBinary()
				_ = yym1163
				if false {
				} else {
					*((*bool)(x.ReadOnly)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1156)
		} // end switch yys1156
	} // end for yyj1156
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1164 int
	var yyb1164 bool
	var yyhl1164 bool = l >= 0
	yyj1164++
	if yyhl1164 {
		yyb1164 = yyj1164 > l
	} else {
		yyb1164 = r.CheckBreak()
	}
	if yyb1164 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DiskName = ""
	} else {
		x.DiskName = string(r.DecodeString())
	}
	yyj1164++
	if yyhl1164 {
		yyb1164 = yyj1164 > l
	} else {
		yyb1164 = r.CheckBreak()
	}
	if yyb1164 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DataDiskURI = ""
	} else {
		x.DataDiskURI = string(r.DecodeString())
	}
	yyj1164++
	if yyhl1164 {
		yyb1164 = yyj1164 > l
	} else {
		yyb1164 = r.CheckBreak()
	}
	if yyb1164 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CachingMode != nil {
			x.CachingMode = nil
		}
	} else {
		if x.CachingMode == nil {
			x.CachingMode = new(AzureDataDiskCachingMode)
		}
		x.CachingMode.CodecDecodeSelf(d)
	}
	yyj1164++
	if yyhl1164 {
		yyb1164 = yyj1164 > l
	} else {
		yyb1164 = r.CheckBreak()
	}
	if yyb1164 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSType != nil {
			x.FSType = nil
		}
	} else {
		if x.FSType == nil {
			x.FSType = new(string)
		}
		yym1169 := z.DecBinary()
		_ = yym1169
		if false {
		} else {
			*((*string)(x.FSType)) = r.DecodeString()
		}
	}
	yyj1164++
	if yyhl1164 {
		yyb1164 = yyj1164 > l
	} else {
		yyb1164 = r.CheckBreak()
	}
	if yyb1164 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnly != nil {
			x.ReadOnly = nil
		}
	} else {
		if x.ReadOnly == nil {
			x.ReadOnly = new(bool)
		}
		yym1171 := z.DecBinary()
		_ = yym1171
		if false {
		} else {
			*((*bool)(x.ReadOnly)) = r.DecodeBool()
		}
	}
	for {
		yyj1164++
		if yyhl1164 {
			yyb1164 = yyj1164 > l
		} else {
			yyb1164 = r.CheckBreak()
		}
		if yyb1164 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1164-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LibStorageVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1172 := z.EncBinary()
		_ = yym1172
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1173 := !z.EncBinary()
			yy2arr1173 := z.EncBasicHandle().StructToArray
			var yyq1173 [6]bool
			_, _, _ = yysep1173, yyq1173, yy2arr1173
			const yyr1173 bool = false
			yyq1173[2] = len(x.Options) != 0
			yyq1173[4] = x.FSType != ""
			yyq1173[5] = x.ReadOnly != false
			var yynn1173 int
			if yyr1173 || yy2arr1173 {
				r.EncodeArrayStart(6)
			} else {
				yynn1173 = 3
				for _, b := range yyq1173 {
					if b {
						yynn1173++
					}
				}
				r.EncodeMapStart(yynn1173)
				yynn1173 = 0
			}
			if yyr1173 || yy2arr1173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1175 := z.EncBinary()
				_ = yym1175
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Host))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("host"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1176 := z.EncBinary()
				_ = yym1176
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Host))
				}
			}
			if yyr1173 || yy2arr1173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1178 := z.EncBinary()
				_ = yym1178
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Service))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("service"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1179 := z.EncBinary()
				_ = yym1179
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Service))
				}
			}
			if yyr1173 || yy2arr1173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1173[2] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym1181 := z.EncBinary()
						_ = yym1181
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1173[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym1182 := z.EncBinary()
						_ = yym1182
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr1173 || yy2arr1173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1184 := z.EncBinary()
				_ = yym1184
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1185 := z.EncBinary()
				_ = yym1185
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
				}
			}
			if yyr1173 || yy2arr1173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1173[4] {
					yym1187 := z.EncBinary()
					_ = yym1187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1173[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1188 := z.EncBinary()
					_ = yym1188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1173 || yy2arr1173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1173[5] {
					yym1190 := z.EncBinary()
					_ = yym1190
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1173[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1191 := z.EncBinary()
					_ = yym1191
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1173 || yy2arr1173 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LibStorageVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1192 := z.DecBinary()
	_ = yym1192
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1193 := r.ContainerType()
		if yyct1193 == codecSelferValueTypeMap1234 {
			yyl1193 := r.ReadMapStart()
			if yyl1193 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1193, d)
			}
		} else if yyct1193 == codecSelferValueTypeArray1234 {
			yyl1193 := r.ReadArrayStart()
			if yyl1193 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1193, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LibStorageVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1194Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1194Slc
	var yyhl1194 bool = l >= 0
	for yyj1194 := 0; ; yyj1194++ {
		if yyhl1194 {
			if yyj1194 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1194Slc = r.DecodeBytes(yys1194Slc, true, true)
		yys1194 := string(yys1194Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1194 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "service":
			if r.TryDecodeAsNil() {
				x.Service = ""
			} else {
				x.Service = string(r.DecodeString())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv1197 := &x.Options
				yym1198 := z.DecBinary()
				_ = yym1198
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1197, false, d)
				}
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1194)
		} // end switch yys1194
	} // end for yyj1194
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LibStorageVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1202 int
	var yyb1202 bool
	var yyhl1202 bool = l >= 0
	yyj1202++
	if yyhl1202 {
		yyb1202 = yyj1202 > l
	} else {
		yyb1202 = r.CheckBreak()
	}
	if yyb1202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1202++
	if yyhl1202 {
		yyb1202 = yyj1202 > l
	} else {
		yyb1202 = r.CheckBreak()
	}
	if yyb1202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Service = ""
	} else {
		x.Service = string(r.DecodeString())
	}
	yyj1202++
	if yyhl1202 {
		yyb1202 = yyj1202 > l
	} else {
		yyb1202 = r.CheckBreak()
	}
	if yyb1202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv1205 := &x.Options
		yym1206 := z.DecBinary()
		_ = yym1206
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1205, false, d)
		}
	}
	yyj1202++
	if yyhl1202 {
		yyb1202 = yyj1202 > l
	} else {
		yyb1202 = r.CheckBreak()
	}
	if yyb1202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	yyj1202++
	if yyhl1202 {
		yyb1202 = yyj1202 > l
	} else {
		yyb1202 = r.CheckBreak()
	}
	if yyb1202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj1202++
	if yyhl1202 {
		yyb1202 = yyj1202 > l
	} else {
		yyb1202 = r.CheckBreak()
	}
	if yyb1202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1202++
		if yyhl1202 {
			yyb1202 = yyj1202 > l
		} else {
			yyb1202 = r.CheckBreak()
		}
		if yyb1202 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1202-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1210 := z.EncBinary()
		_ = yym1210
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1211 := !z.EncBinary()
			yy2arr1211 := z.EncBasicHandle().StructToArray
			var yyq1211 [3]bool
			_, _, _ = yysep1211, yyq1211, yy2arr1211
			const yyr1211 bool = false
			yyq1211[1] = len(x.Items) != 0
			yyq1211[2] = x.DefaultMode != nil
			var yynn1211 int
			if yyr1211 || yy2arr1211 {
				r.EncodeArrayStart(3)
			} else {
				yynn1211 = 1
				for _, b := range yyq1211 {
					if b {
						yynn1211++
					}
				}
				r.EncodeMapStart(yynn1211)
				yynn1211 = 0
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1213 := z.EncBinary()
				_ = yym1213
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1214 := z.EncBinary()
				_ = yym1214
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1211[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1216 := z.EncBinary()
						_ = yym1216
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1211[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1217 := z.EncBinary()
						_ = yym1217
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1211[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1219 := *x.DefaultMode
						yym1220 := z.EncBinary()
						_ = yym1220
						if false {
						} else {
							r.EncodeInt(int64(yy1219))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1211[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1221 := *x.DefaultMode
						yym1222 := z.EncBinary()
						_ = yym1222
						if false {
						} else {
							r.EncodeInt(int64(yy1221))
						}
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1223 := z.DecBinary()
	_ = yym1223
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1224 := r.ContainerType()
		if yyct1224 == codecSelferValueTypeMap1234 {
			yyl1224 := r.ReadMapStart()
			if yyl1224 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1224, d)
			}
		} else if yyct1224 == codecSelferValueTypeArray1234 {
			yyl1224 := r.ReadArrayStart()
			if yyl1224 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1224, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1225Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1225Slc
	var yyhl1225 bool = l >= 0
	for yyj1225 := 0; ; yyj1225++ {
		if yyhl1225 {
			if yyj1225 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1225Slc = r.DecodeBytes(yys1225Slc, true, true)
		yys1225 := string(yys1225Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1225 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1227 := &x.Items
				yym1228 := z.DecBinary()
				_ = yym1228
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1227), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1230 := z.DecBinary()
				_ = yym1230
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1225)
		} // end switch yys1225
	} // end for yyj1225
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1231 int
	var yyb1231 bool
	var yyhl1231 bool = l >= 0
	yyj1231++
	if yyhl1231 {
		yyb1231 = yyj1231 > l
	} else {
		yyb1231 = r.CheckBreak()
	}
	if yyb1231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1231++
	if yyhl1231 {
		yyb1231 = yyj1231 > l
	} else {
		yyb1231 = r.CheckBreak()
	}
	if yyb1231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1233 := &x.Items
		yym1234 := z.DecBinary()
		_ = yym1234
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1233), d)
		}
	}
	yyj1231++
	if yyhl1231 {
		yyb1231 = yyj1231 > l
	} else {
		yyb1231 = r.CheckBreak()
	}
	if yyb1231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1236 := z.DecBinary()
		_ = yym1236
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1231++
		if yyhl1231 {
			yyb1231 = yyj1231 > l
		} else {
			yyb1231 = r.CheckBreak()
		}
		if yyb1231 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1231-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1237 := z.EncBinary()
		_ = yym1237
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1238 := !z.EncBinary()
			yy2arr1238 := z.EncBasicHandle().StructToArray
			var yyq1238 [3]bool
			_, _, _ = yysep1238, yyq1238, yy2arr1238
			const yyr1238 bool = false
			yyq1238[2] = x.Mode != nil
			var yynn1238 int
			if yyr1238 || yy2arr1238 {
				r.EncodeArrayStart(3)
			} else {
				yynn1238 = 2
				for _, b := range yyq1238 {
					if b {
						yynn1238++
					}
				}
				r.EncodeMapStart(yynn1238)
				yynn1238 = 0
			}
			if yyr1238 || yy2arr1238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1240 := z.EncBinary()
				_ = yym1240
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1241 := z.EncBinary()
				_ = yym1241
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1238 || yy2arr1238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1243 := z.EncBinary()
				_ = yym1243
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1244 := z.EncBinary()
				_ = yym1244
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1238 || yy2arr1238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1238[2] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1246 := *x.Mode
						yym1247 := z.EncBinary()
						_ = yym1247
						if false {
						} else {
							r.EncodeInt(int64(yy1246))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1238[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1248 := *x.Mode
						yym1249 := z.EncBinary()
						_ = yym1249
						if false {
						} else {
							r.EncodeInt(int64(yy1248))
						}
					}
				}
			}
			if yyr1238 || yy2arr1238 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1250 := z.DecBinary()
	_ = yym1250
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1251 := r.ContainerType()
		if yyct1251 == codecSelferValueTypeMap1234 {
			yyl1251 := r.ReadMapStart()
			if yyl1251 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1251, d)
			}
		} else if yyct1251 == codecSelferValueTypeArray1234 {
			yyl1251 := r.ReadArrayStart()
			if yyl1251 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1251, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1252Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1252Slc
	var yyhl1252 bool = l >= 0
	for yyj1252 := 0; ; yyj1252++ {
		if yyhl1252 {
			if yyj1252 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1252Slc = r.DecodeBytes(yys1252Slc, true, true)
		yys1252 := string(yys1252Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1252 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1256 := z.DecBinary()
				_ = yym1256
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1252)
		} // end switch yys1252
	} // end for yyj1252
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1257 int
	var yyb1257 bool
	var yyhl1257 bool = l >= 0
	yyj1257++
	if yyhl1257 {
		yyb1257 = yyj1257 > l
	} else {
		yyb1257 = r.CheckBreak()
	}
	if yyb1257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1257++
	if yyhl1257 {
		yyb1257 = yyj1257 > l
	} else {
		yyb1257 = r.CheckBreak()
	}
	if yyb1257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1257++
	if yyhl1257 {
		yyb1257 = yyj1257 > l
	} else {
		yyb1257 = r.CheckBreak()
	}
	if yyb1257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1261 := z.DecBinary()
		_ = yym1261
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1257++
		if yyhl1257 {
			yyb1257 = yyj1257 > l
		} else {
			yyb1257 = r.CheckBreak()
		}
		if yyb1257 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1257-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1262 := z.EncBinary()
		_ = yym1262
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1263 := !z.EncBinary()
			yy2arr1263 := z.EncBasicHandle().StructToArray
			var yyq1263 [5]bool
			_, _, _ = yysep1263, yyq1263, yy2arr1263
			const yyr1263 bool = false
			yyq1263[0] = x.Name != ""
			yyq1263[1] = x.HostPort != 0
			yyq1263[3] = x.Protocol != ""
			yyq1263[4] = x.HostIP != ""
			var yynn1263 int
			if yyr1263 || yy2arr1263 {
				r.EncodeArrayStart(5)
			} else {
				yynn1263 = 1
				for _, b := range yyq1263 {
					if b {
						yynn1263++
					}
				}
				r.EncodeMapStart(yynn1263)
				yynn1263 = 0
			}
			if yyr1263 || yy2arr1263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1263[0] {
					yym1265 := z.EncBinary()
					_ = yym1265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1263[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1266 := z.EncBinary()
					_ = yym1266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1263 || yy2arr1263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1263[1] {
					yym1268 := z.EncBinary()
					_ = yym1268
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1263[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1269 := z.EncBinary()
					_ = yym1269
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1263 || yy2arr1263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1271 := z.EncBinary()
				_ = yym1271
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1272 := z.EncBinary()
				_ = yym1272
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1263 || yy2arr1263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1263[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1263[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1263 || yy2arr1263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1263[4] {
					yym1275 := z.EncBinary()
					_ = yym1275
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1263[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1276 := z.EncBinary()
					_ = yym1276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1263 || yy2arr1263 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1277 := z.DecBinary()
	_ = yym1277
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1278 := r.ContainerType()
		if yyct1278 == codecSelferValueTypeMap1234 {
			yyl1278 := r.ReadMapStart()
			if yyl1278 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1278, d)
			}
		} else if yyct1278 == codecSelferValueTypeArray1234 {
			yyl1278 := r.ReadArrayStart()
			if yyl1278 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1278, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1279Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1279Slc
	var yyhl1279 bool = l >= 0
	for yyj1279 := 0; ; yyj1279++ {
		if yyhl1279 {
			if yyj1279 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1279Slc = r.DecodeBytes(yys1279Slc, true, true)
		yys1279 := string(yys1279Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1279 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1279)
		} // end switch yys1279
	} // end for yyj1279
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1285 int
	var yyb1285 bool
	var yyhl1285 bool = l >= 0
	yyj1285++
	if yyhl1285 {
		yyb1285 = yyj1285 > l
	} else {
		yyb1285 = r.CheckBreak()
	}
	if yyb1285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1285++
	if yyhl1285 {
		yyb1285 = yyj1285 > l
	} else {
		yyb1285 = r.CheckBreak()
	}
	if yyb1285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1285++
	if yyhl1285 {
		yyb1285 = yyj1285 > l
	} else {
		yyb1285 = r.CheckBreak()
	}
	if yyb1285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1285++
	if yyhl1285 {
		yyb1285 = yyj1285 > l
	} else {
		yyb1285 = r.CheckBreak()
	}
	if yyb1285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1285++
	if yyhl1285 {
		yyb1285 = yyj1285 > l
	} else {
		yyb1285 = r.CheckBreak()
	}
	if yyb1285 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1285++
		if yyhl1285 {
			yyb1285 = yyj1285 > l
		} else {
			yyb1285 = r.CheckBreak()
		}
		if yyb1285 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1285-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1291 := z.EncBinary()
		_ = yym1291
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1292 := !z.EncBinary()
			yy2arr1292 := z.EncBasicHandle().StructToArray
			var yyq1292 [4]bool
			_, _, _ = yysep1292, yyq1292, yy2arr1292
			const yyr1292 bool = false
			yyq1292[1] = x.ReadOnly != false
			yyq1292[3] = x.SubPath != ""
			var yynn1292 int
			if yyr1292 || yy2arr1292 {
				r.EncodeArrayStart(4)
			} else {
				yynn1292 = 2
				for _, b := range yyq1292 {
					if b {
						yynn1292++
					}
				}
				r.EncodeMapStart(yynn1292)
				yynn1292 = 0
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1294 := z.EncBinary()
				_ = yym1294
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1295 := z.EncBinary()
				_ = yym1295
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1292[1] {
					yym1297 := z.EncBinary()
					_ = yym1297
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1292[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1298 := z.EncBinary()
					_ = yym1298
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1300 := z.EncBinary()
				_ = yym1300
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1301 := z.EncBinary()
				_ = yym1301
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1292[3] {
					yym1303 := z.EncBinary()
					_ = yym1303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1292[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1304 := z.EncBinary()
					_ = yym1304
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1305 := z.DecBinary()
	_ = yym1305
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1306 := r.ContainerType()
		if yyct1306 == codecSelferValueTypeMap1234 {
			yyl1306 := r.ReadMapStart()
			if yyl1306 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1306, d)
			}
		} else if yyct1306 == codecSelferValueTypeArray1234 {
			yyl1306 := r.ReadArrayStart()
			if yyl1306 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1306, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1307Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1307Slc
	var yyhl1307 bool = l >= 0
	for yyj1307 := 0; ; yyj1307++ {
		if yyhl1307 {
			if yyj1307 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1307Slc = r.DecodeBytes(yys1307Slc, true, true)
		yys1307 := string(yys1307Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1307 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1307)
		} // end switch yys1307
	} // end for yyj1307
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1312 int
	var yyb1312 bool
	var yyhl1312 bool = l >= 0
	yyj1312++
	if yyhl1312 {
		yyb1312 = yyj1312 > l
	} else {
		yyb1312 = r.CheckBreak()
	}
	if yyb1312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1312++
	if yyhl1312 {
		yyb1312 = yyj1312 > l
	} else {
		yyb1312 = r.CheckBreak()
	}
	if yyb1312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1312++
	if yyhl1312 {
		yyb1312 = yyj1312 > l
	} else {
		yyb1312 = r.CheckBreak()
	}
	if yyb1312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1312++
	if yyhl1312 {
		yyb1312 = yyj1312 > l
	} else {
		yyb1312 = r.CheckBreak()
	}
	if yyb1312 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1312++
		if yyhl1312 {
			yyb1312 = yyj1312 > l
		} else {
			yyb1312 = r.CheckBreak()
		}
		if yyb1312 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1312-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1317 := z.EncBinary()
		_ = yym1317
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1318 := !z.EncBinary()
			yy2arr1318 := z.EncBasicHandle().StructToArray
			var yyq1318 [3]bool
			_, _, _ = yysep1318, yyq1318, yy2arr1318
			const yyr1318 bool = false
			yyq1318[1] = x.Value != ""
			yyq1318[2] = x.ValueFrom != nil
			var yynn1318 int
			if yyr1318 || yy2arr1318 {
				r.EncodeArrayStart(3)
			} else {
				yynn1318 = 1
				for _, b := range yyq1318 {
					if b {
						yynn1318++
					}
				}
				r.EncodeMapStart(yynn1318)
				yynn1318 = 0
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1320 := z.EncBinary()
				_ = yym1320
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1321 := z.EncBinary()
				_ = yym1321
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1318[1] {
					yym1323 := z.EncBinary()
					_ = yym1323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1318[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1324 := z.EncBinary()
					_ = yym1324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1318[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1318[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1326 := z.DecBinary()
	_ = yym1326
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1327 := r.ContainerType()
		if yyct1327 == codecSelferValueTypeMap1234 {
			yyl1327 := r.ReadMapStart()
			if yyl1327 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1327, d)
			}
		} else if yyct1327 == codecSelferValueTypeArray1234 {
			yyl1327 := r.ReadArrayStart()
			if yyl1327 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1327, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1328Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1328Slc
	var yyhl1328 bool = l >= 0
	for yyj1328 := 0; ; yyj1328++ {
		if yyhl1328 {
			if yyj1328 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1328Slc = r.DecodeBytes(yys1328Slc, true, true)
		yys1328 := string(yys1328Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1328 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1328)
		} // end switch yys1328
	} // end for yyj1328
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1332 int
	var yyb1332 bool
	var yyhl1332 bool = l >= 0
	yyj1332++
	if yyhl1332 {
		yyb1332 = yyj1332 > l
	} else {
		yyb1332 = r.CheckBreak()
	}
	if yyb1332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1332++
	if yyhl1332 {
		yyb1332 = yyj1332 > l
	} else {
		yyb1332 = r.CheckBreak()
	}
	if yyb1332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1332++
	if yyhl1332 {
		yyb1332 = yyj1332 > l
	} else {
		yyb1332 = r.CheckBreak()
	}
	if yyb1332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1332++
		if yyhl1332 {
			yyb1332 = yyj1332 > l
		} else {
			yyb1332 = r.CheckBreak()
		}
		if yyb1332 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1332-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1336 := z.EncBinary()
		_ = yym1336
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1337 := !z.EncBinary()
			yy2arr1337 := z.EncBasicHandle().StructToArray
			var yyq1337 [4]bool
			_, _, _ = yysep1337, yyq1337, yy2arr1337
			const yyr1337 bool = false
			yyq1337[0] = x.FieldRef != nil
			yyq1337[1] = x.ResourceFieldRef != nil
			yyq1337[2] = x.ConfigMapKeyRef != nil
			yyq1337[3] = x.SecretKeyRef != nil
			var yynn1337 int
			if yyr1337 || yy2arr1337 {
				r.EncodeArrayStart(4)
			} else {
				yynn1337 = 0
				for _, b := range yyq1337 {
					if b {
						yynn1337++
					}
				}
				r.EncodeMapStart(yynn1337)
				yynn1337 = 0
			}
			if yyr1337 || yy2arr1337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1337[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1337[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1337 || yy2arr1337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1337[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1337[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1337 || yy2arr1337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1337[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1337[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1337 || yy2arr1337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1337[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1337[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1337 || yy2arr1337 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1342 := z.DecBinary()
	_ = yym1342
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1343 := r.ContainerType()
		if yyct1343 == codecSelferValueTypeMap1234 {
			yyl1343 := r.ReadMapStart()
			if yyl1343 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1343, d)
			}
		} else if yyct1343 == codecSelferValueTypeArray1234 {
			yyl1343 := r.ReadArrayStart()
			if yyl1343 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1343, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1344Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1344Slc
	var yyhl1344 bool = l >= 0
	for yyj1344 := 0; ; yyj1344++ {
		if yyhl1344 {
			if yyj1344 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1344Slc = r.DecodeBytes(yys1344Slc, true, true)
		yys1344 := string(yys1344Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1344 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1344)
		} // end switch yys1344
	} // end for yyj1344
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1349 int
	var yyb1349 bool
	var yyhl1349 bool = l >= 0
	yyj1349++
	if yyhl1349 {
		yyb1349 = yyj1349 > l
	} else {
		yyb1349 = r.CheckBreak()
	}
	if yyb1349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1349++
	if yyhl1349 {
		yyb1349 = yyj1349 > l
	} else {
		yyb1349 = r.CheckBreak()
	}
	if yyb1349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1349++
	if yyhl1349 {
		yyb1349 = yyj1349 > l
	} else {
		yyb1349 = r.CheckBreak()
	}
	if yyb1349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1349++
	if yyhl1349 {
		yyb1349 = yyj1349 > l
	} else {
		yyb1349 = r.CheckBreak()
	}
	if yyb1349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1349++
		if yyhl1349 {
			yyb1349 = yyj1349 > l
		} else {
			yyb1349 = r.CheckBreak()
		}
		if yyb1349 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1349-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1354 := z.EncBinary()
		_ = yym1354
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1355 := !z.EncBinary()
			yy2arr1355 := z.EncBasicHandle().StructToArray
			var yyq1355 [2]bool
			_, _, _ = yysep1355, yyq1355, yy2arr1355
			const yyr1355 bool = false
			var yynn1355 int
			if yyr1355 || yy2arr1355 {
				r.EncodeArrayStart(2)
			} else {
				yynn1355 = 2
				for _, b := range yyq1355 {
					if b {
						yynn1355++
					}
				}
				r.EncodeMapStart(yynn1355)
				yynn1355 = 0
			}
			if yyr1355 || yy2arr1355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1357 := z.EncBinary()
				_ = yym1357
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1358 := z.EncBinary()
				_ = yym1358
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr1355 || yy2arr1355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1360 := z.EncBinary()
				_ = yym1360
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1361 := z.EncBinary()
				_ = yym1361
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1355 || yy2arr1355 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1362 := z.DecBinary()
	_ = yym1362
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1363 := r.ContainerType()
		if yyct1363 == codecSelferValueTypeMap1234 {
			yyl1363 := r.ReadMapStart()
			if yyl1363 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1363, d)
			}
		} else if yyct1363 == codecSelferValueTypeArray1234 {
			yyl1363 := r.ReadArrayStart()
			if yyl1363 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1363, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1364Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1364Slc
	var yyhl1364 bool = l >= 0
	for yyj1364 := 0; ; yyj1364++ {
		if yyhl1364 {
			if yyj1364 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1364Slc = r.DecodeBytes(yys1364Slc, true, true)
		yys1364 := string(yys1364Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1364 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1364)
		} // end switch yys1364
	} // end for yyj1364
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1367 int
	var yyb1367 bool
	var yyhl1367 bool = l >= 0
	yyj1367++
	if yyhl1367 {
		yyb1367 = yyj1367 > l
	} else {
		yyb1367 = r.CheckBreak()
	}
	if yyb1367 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1367++
	if yyhl1367 {
		yyb1367 = yyj1367 > l
	} else {
		yyb1367 = r.CheckBreak()
	}
	if yyb1367 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1367++
		if yyhl1367 {
			yyb1367 = yyj1367 > l
		} else {
			yyb1367 = r.CheckBreak()
		}
		if yyb1367 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1367-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1370 := z.EncBinary()
		_ = yym1370
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1371 := !z.EncBinary()
			yy2arr1371 := z.EncBasicHandle().StructToArray
			var yyq1371 [3]bool
			_, _, _ = yysep1371, yyq1371, yy2arr1371
			const yyr1371 bool = false
			yyq1371[0] = x.ContainerName != ""
			yyq1371[2] = true
			var yynn1371 int
			if yyr1371 || yy2arr1371 {
				r.EncodeArrayStart(3)
			} else {
				yynn1371 = 1
				for _, b := range yyq1371 {
					if b {
						yynn1371++
					}
				}
				r.EncodeMapStart(yynn1371)
				yynn1371 = 0
			}
			if yyr1371 || yy2arr1371 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1371[0] {
					yym1373 := z.EncBinary()
					_ = yym1373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1371[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1374 := z.EncBinary()
					_ = yym1374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1371 || yy2arr1371 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1376 := z.EncBinary()
				_ = yym1376
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1377 := z.EncBinary()
				_ = yym1377
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1371 || yy2arr1371 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1371[2] {
					yy1379 := &x.Divisor
					yym1380 := z.EncBinary()
					_ = yym1380
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1379) {
					} else if !yym1380 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1379)
					} else {
						z.EncFallback(yy1379)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1371[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1381 := &x.Divisor
					yym1382 := z.EncBinary()
					_ = yym1382
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1381) {
					} else if !yym1382 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1381)
					} else {
						z.EncFallback(yy1381)
					}
				}
			}
			if yyr1371 || yy2arr1371 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1383 := z.DecBinary()
	_ = yym1383
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1384 := r.ContainerType()
		if yyct1384 == codecSelferValueTypeMap1234 {
			yyl1384 := r.ReadMapStart()
			if yyl1384 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1384, d)
			}
		} else if yyct1384 == codecSelferValueTypeArray1234 {
			yyl1384 := r.ReadArrayStart()
			if yyl1384 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1384, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1385Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1385Slc
	var yyhl1385 bool = l >= 0
	for yyj1385 := 0; ; yyj1385++ {
		if yyhl1385 {
			if yyj1385 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1385Slc = r.DecodeBytes(yys1385Slc, true, true)
		yys1385 := string(yys1385Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1385 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1388 := &x.Divisor
				yym1389 := z.DecBinary()
				_ = yym1389
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1388) {
				} else if !yym1389 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1388)
				} else {
					z.DecFallback(yyv1388, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1385)
		} // end switch yys1385
	} // end for yyj1385
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1390 int
	var yyb1390 bool
	var yyhl1390 bool = l >= 0
	yyj1390++
	if yyhl1390 {
		yyb1390 = yyj1390 > l
	} else {
		yyb1390 = r.CheckBreak()
	}
	if yyb1390 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1390++
	if yyhl1390 {
		yyb1390 = yyj1390 > l
	} else {
		yyb1390 = r.CheckBreak()
	}
	if yyb1390 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1390++
	if yyhl1390 {
		yyb1390 = yyj1390 > l
	} else {
		yyb1390 = r.CheckBreak()
	}
	if yyb1390 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1393 := &x.Divisor
		yym1394 := z.DecBinary()
		_ = yym1394
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1393) {
		} else if !yym1394 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1393)
		} else {
			z.DecFallback(yyv1393, false)
		}
	}
	for {
		yyj1390++
		if yyhl1390 {
			yyb1390 = yyj1390 > l
		} else {
			yyb1390 = r.CheckBreak()
		}
		if yyb1390 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1390-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1395 := z.EncBinary()
		_ = yym1395
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1396 := !z.EncBinary()
			yy2arr1396 := z.EncBasicHandle().StructToArray
			var yyq1396 [2]bool
			_, _, _ = yysep1396, yyq1396, yy2arr1396
			const yyr1396 bool = false
			var yynn1396 int
			if yyr1396 || yy2arr1396 {
				r.EncodeArrayStart(2)
			} else {
				yynn1396 = 2
				for _, b := range yyq1396 {
					if b {
						yynn1396++
					}
				}
				r.EncodeMapStart(yynn1396)
				yynn1396 = 0
			}
			if yyr1396 || yy2arr1396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1398 := z.EncBinary()
				_ = yym1398
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1399 := z.EncBinary()
				_ = yym1399
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1396 || yy2arr1396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1401 := z.EncBinary()
				_ = yym1401
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1402 := z.EncBinary()
				_ = yym1402
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1396 || yy2arr1396 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1403 := z.DecBinary()
	_ = yym1403
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1404 := r.ContainerType()
		if yyct1404 == codecSelferValueTypeMap1234 {
			yyl1404 := r.ReadMapStart()
			if yyl1404 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1404, d)
			}
		} else if yyct1404 == codecSelferValueTypeArray1234 {
			yyl1404 := r.ReadArrayStart()
			if yyl1404 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1404, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1405Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1405Slc
	var yyhl1405 bool = l >= 0
	for yyj1405 := 0; ; yyj1405++ {
		if yyhl1405 {
			if yyj1405 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1405Slc = r.DecodeBytes(yys1405Slc, true, true)
		yys1405 := string(yys1405Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1405 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1405)
		} // end switch yys1405
	} // end for yyj1405
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1408 int
	var yyb1408 bool
	var yyhl1408 bool = l >= 0
	yyj1408++
	if yyhl1408 {
		yyb1408 = yyj1408 > l
	} else {
		yyb1408 = r.CheckBreak()
	}
	if yyb1408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1408++
	if yyhl1408 {
		yyb1408 = yyj1408 > l
	} else {
		yyb1408 = r.CheckBreak()
	}
	if yyb1408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1408++
		if yyhl1408 {
			yyb1408 = yyj1408 > l
		} else {
			yyb1408 = r.CheckBreak()
		}
		if yyb1408 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1408-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1411 := z.EncBinary()
		_ = yym1411
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1412 := !z.EncBinary()
			yy2arr1412 := z.EncBasicHandle().StructToArray
			var yyq1412 [2]bool
			_, _, _ = yysep1412, yyq1412, yy2arr1412
			const yyr1412 bool = false
			var yynn1412 int
			if yyr1412 || yy2arr1412 {
				r.EncodeArrayStart(2)
			} else {
				yynn1412 = 2
				for _, b := range yyq1412 {
					if b {
						yynn1412++
					}
				}
				r.EncodeMapStart(yynn1412)
				yynn1412 = 0
			}
			if yyr1412 || yy2arr1412 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1414 := z.EncBinary()
				_ = yym1414
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1415 := z.EncBinary()
				_ = yym1415
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1412 || yy2arr1412 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1417 := z.EncBinary()
				_ = yym1417
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1418 := z.EncBinary()
				_ = yym1418
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1412 || yy2arr1412 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1419 := z.DecBinary()
	_ = yym1419
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1420 := r.ContainerType()
		if yyct1420 == codecSelferValueTypeMap1234 {
			yyl1420 := r.ReadMapStart()
			if yyl1420 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1420, d)
			}
		} else if yyct1420 == codecSelferValueTypeArray1234 {
			yyl1420 := r.ReadArrayStart()
			if yyl1420 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1420, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1421Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1421Slc
	var yyhl1421 bool = l >= 0
	for yyj1421 := 0; ; yyj1421++ {
		if yyhl1421 {
			if yyj1421 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1421Slc = r.DecodeBytes(yys1421Slc, true, true)
		yys1421 := string(yys1421Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1421 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1421)
		} // end switch yys1421
	} // end for yyj1421
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1424 int
	var yyb1424 bool
	var yyhl1424 bool = l >= 0
	yyj1424++
	if yyhl1424 {
		yyb1424 = yyj1424 > l
	} else {
		yyb1424 = r.CheckBreak()
	}
	if yyb1424 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1424++
	if yyhl1424 {
		yyb1424 = yyj1424 > l
	} else {
		yyb1424 = r.CheckBreak()
	}
	if yyb1424 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1424++
		if yyhl1424 {
			yyb1424 = yyj1424 > l
		} else {
			yyb1424 = r.CheckBreak()
		}
		if yyb1424 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1424-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1427 := z.EncBinary()
		_ = yym1427
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1428 := !z.EncBinary()
			yy2arr1428 := z.EncBasicHandle().StructToArray
			var yyq1428 [2]bool
			_, _, _ = yysep1428, yyq1428, yy2arr1428
			const yyr1428 bool = false
			var yynn1428 int
			if yyr1428 || yy2arr1428 {
				r.EncodeArrayStart(2)
			} else {
				yynn1428 = 2
				for _, b := range yyq1428 {
					if b {
						yynn1428++
					}
				}
				r.EncodeMapStart(yynn1428)
				yynn1428 = 0
			}
			if yyr1428 || yy2arr1428 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1430 := z.EncBinary()
				_ = yym1430
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1431 := z.EncBinary()
				_ = yym1431
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1428 || yy2arr1428 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1433 := z.EncBinary()
				_ = yym1433
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1434 := z.EncBinary()
				_ = yym1434
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1428 || yy2arr1428 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1435 := z.DecBinary()
	_ = yym1435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1436 := r.ContainerType()
		if yyct1436 == codecSelferValueTypeMap1234 {
			yyl1436 := r.ReadMapStart()
			if yyl1436 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1436, d)
			}
		} else if yyct1436 == codecSelferValueTypeArray1234 {
			yyl1436 := r.ReadArrayStart()
			if yyl1436 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1437Slc
	var yyhl1437 bool = l >= 0
	for yyj1437 := 0; ; yyj1437++ {
		if yyhl1437 {
			if yyj1437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1437Slc = r.DecodeBytes(yys1437Slc, true, true)
		yys1437 := string(yys1437Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1437 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1437)
		} // end switch yys1437
	} // end for yyj1437
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1440 int
	var yyb1440 bool
	var yyhl1440 bool = l >= 0
	yyj1440++
	if yyhl1440 {
		yyb1440 = yyj1440 > l
	} else {
		yyb1440 = r.CheckBreak()
	}
	if yyb1440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1440++
	if yyhl1440 {
		yyb1440 = yyj1440 > l
	} else {
		yyb1440 = r.CheckBreak()
	}
	if yyb1440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1440++
		if yyhl1440 {
			yyb1440 = yyj1440 > l
		} else {
			yyb1440 = r.CheckBreak()
		}
		if yyb1440 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1440-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1443 := z.EncBinary()
		_ = yym1443
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1444 := !z.EncBinary()
			yy2arr1444 := z.EncBasicHandle().StructToArray
			var yyq1444 [5]bool
			_, _, _ = yysep1444, yyq1444, yy2arr1444
			const yyr1444 bool = false
			yyq1444[0] = x.Path != ""
			yyq1444[1] = true
			yyq1444[2] = x.Host != ""
			yyq1444[3] = x.Scheme != ""
			yyq1444[4] = len(x.HTTPHeaders) != 0
			var yynn1444 int
			if yyr1444 || yy2arr1444 {
				r.EncodeArrayStart(5)
			} else {
				yynn1444 = 0
				for _, b := range yyq1444 {
					if b {
						yynn1444++
					}
				}
				r.EncodeMapStart(yynn1444)
				yynn1444 = 0
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[0] {
					yym1446 := z.EncBinary()
					_ = yym1446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1444[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1447 := z.EncBinary()
					_ = yym1447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[1] {
					yy1449 := &x.Port
					yym1450 := z.EncBinary()
					_ = yym1450
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1449) {
					} else if !yym1450 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1449)
					} else {
						z.EncFallback(yy1449)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1444[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1451 := &x.Port
					yym1452 := z.EncBinary()
					_ = yym1452
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1451) {
					} else if !yym1452 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1451)
					} else {
						z.EncFallback(yy1451)
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[2] {
					yym1454 := z.EncBinary()
					_ = yym1454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1444[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1455 := z.EncBinary()
					_ = yym1455
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1444[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1458 := z.EncBinary()
						_ = yym1458
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1444[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1459 := z.EncBinary()
						_ = yym1459
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1460 := z.DecBinary()
	_ = yym1460
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1461 := r.ContainerType()
		if yyct1461 == codecSelferValueTypeMap1234 {
			yyl1461 := r.ReadMapStart()
			if yyl1461 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1461, d)
			}
		} else if yyct1461 == codecSelferValueTypeArray1234 {
			yyl1461 := r.ReadArrayStart()
			if yyl1461 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1461, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1462Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1462Slc
	var yyhl1462 bool = l >= 0
	for yyj1462 := 0; ; yyj1462++ {
		if yyhl1462 {
			if yyj1462 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1462Slc = r.DecodeBytes(yys1462Slc, true, true)
		yys1462 := string(yys1462Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1462 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1464 := &x.Port
				yym1465 := z.DecBinary()
				_ = yym1465
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1464) {
				} else if !yym1465 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1464)
				} else {
					z.DecFallback(yyv1464, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1468 := &x.HTTPHeaders
				yym1469 := z.DecBinary()
				_ = yym1469
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1468), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1462)
		} // end switch yys1462
	} // end for yyj1462
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1470 int
	var yyb1470 bool
	var yyhl1470 bool = l >= 0
	yyj1470++
	if yyhl1470 {
		yyb1470 = yyj1470 > l
	} else {
		yyb1470 = r.CheckBreak()
	}
	if yyb1470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1470++
	if yyhl1470 {
		yyb1470 = yyj1470 > l
	} else {
		yyb1470 = r.CheckBreak()
	}
	if yyb1470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1472 := &x.Port
		yym1473 := z.DecBinary()
		_ = yym1473
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1472) {
		} else if !yym1473 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1472)
		} else {
			z.DecFallback(yyv1472, false)
		}
	}
	yyj1470++
	if yyhl1470 {
		yyb1470 = yyj1470 > l
	} else {
		yyb1470 = r.CheckBreak()
	}
	if yyb1470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1470++
	if yyhl1470 {
		yyb1470 = yyj1470 > l
	} else {
		yyb1470 = r.CheckBreak()
	}
	if yyb1470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1470++
	if yyhl1470 {
		yyb1470 = yyj1470 > l
	} else {
		yyb1470 = r.CheckBreak()
	}
	if yyb1470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1476 := &x.HTTPHeaders
		yym1477 := z.DecBinary()
		_ = yym1477
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1476), d)
		}
	}
	for {
		yyj1470++
		if yyhl1470 {
			yyb1470 = yyj1470 > l
		} else {
			yyb1470 = r.CheckBreak()
		}
		if yyb1470 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1470-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1478 := z.EncBinary()
	_ = yym1478
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1479 := z.DecBinary()
	_ = yym1479
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1480 := z.EncBinary()
		_ = yym1480
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1481 := !z.EncBinary()
			yy2arr1481 := z.EncBasicHandle().StructToArray
			var yyq1481 [1]bool
			_, _, _ = yysep1481, yyq1481, yy2arr1481
			const yyr1481 bool = false
			yyq1481[0] = true
			var yynn1481 int
			if yyr1481 || yy2arr1481 {
				r.EncodeArrayStart(1)
			} else {
				yynn1481 = 0
				for _, b := range yyq1481 {
					if b {
						yynn1481++
					}
				}
				r.EncodeMapStart(yynn1481)
				yynn1481 = 0
			}
			if yyr1481 || yy2arr1481 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1481[0] {
					yy1483 := &x.Port
					yym1484 := z.EncBinary()
					_ = yym1484
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1483) {
					} else if !yym1484 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1483)
					} else {
						z.EncFallback(yy1483)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1481[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1485 := &x.Port
					yym1486 := z.EncBinary()
					_ = yym1486
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1485) {
					} else if !yym1486 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1485)
					} else {
						z.EncFallback(yy1485)
					}
				}
			}
			if yyr1481 || yy2arr1481 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1487 := z.DecBinary()
	_ = yym1487
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1488 := r.ContainerType()
		if yyct1488 == codecSelferValueTypeMap1234 {
			yyl1488 := r.ReadMapStart()
			if yyl1488 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1488, d)
			}
		} else if yyct1488 == codecSelferValueTypeArray1234 {
			yyl1488 := r.ReadArrayStart()
			if yyl1488 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1488, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1489Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1489Slc
	var yyhl1489 bool = l >= 0
	for yyj1489 := 0; ; yyj1489++ {
		if yyhl1489 {
			if yyj1489 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1489Slc = r.DecodeBytes(yys1489Slc, true, true)
		yys1489 := string(yys1489Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1489 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1490 := &x.Port
				yym1491 := z.DecBinary()
				_ = yym1491
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1490) {
				} else if !yym1491 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1490)
				} else {
					z.DecFallback(yyv1490, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1489)
		} // end switch yys1489
	} // end for yyj1489
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1492 int
	var yyb1492 bool
	var yyhl1492 bool = l >= 0
	yyj1492++
	if yyhl1492 {
		yyb1492 = yyj1492 > l
	} else {
		yyb1492 = r.CheckBreak()
	}
	if yyb1492 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1493 := &x.Port
		yym1494 := z.DecBinary()
		_ = yym1494
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1493) {
		} else if !yym1494 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1493)
		} else {
			z.DecFallback(yyv1493, false)
		}
	}
	for {
		yyj1492++
		if yyhl1492 {
			yyb1492 = yyj1492 > l
		} else {
			yyb1492 = r.CheckBreak()
		}
		if yyb1492 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1492-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1495 := z.EncBinary()
		_ = yym1495
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1496 := !z.EncBinary()
			yy2arr1496 := z.EncBasicHandle().StructToArray
			var yyq1496 [1]bool
			_, _, _ = yysep1496, yyq1496, yy2arr1496
			const yyr1496 bool = false
			yyq1496[0] = len(x.Command) != 0
			var yynn1496 int
			if yyr1496 || yy2arr1496 {
				r.EncodeArrayStart(1)
			} else {
				yynn1496 = 0
				for _, b := range yyq1496 {
					if b {
						yynn1496++
					}
				}
				r.EncodeMapStart(yynn1496)
				yynn1496 = 0
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1496[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1498 := z.EncBinary()
						_ = yym1498
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1496[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1499 := z.EncBinary()
						_ = yym1499
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1500 := z.DecBinary()
	_ = yym1500
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1501 := r.ContainerType()
		if yyct1501 == codecSelferValueTypeMap1234 {
			yyl1501 := r.ReadMapStart()
			if yyl1501 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1501, d)
			}
		} else if yyct1501 == codecSelferValueTypeArray1234 {
			yyl1501 := r.ReadArrayStart()
			if yyl1501 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1501, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1502Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1502Slc
	var yyhl1502 bool = l >= 0
	for yyj1502 := 0; ; yyj1502++ {
		if yyhl1502 {
			if yyj1502 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1502Slc = r.DecodeBytes(yys1502Slc, true, true)
		yys1502 := string(yys1502Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1502 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1503 := &x.Command
				yym1504 := z.DecBinary()
				_ = yym1504
				if false {
				} else {
					z.F.DecSliceStringX(yyv1503, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1502)
		} // end switch yys1502
	} // end for yyj1502
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1505 int
	var yyb1505 bool
	var yyhl1505 bool = l >= 0
	yyj1505++
	if yyhl1505 {
		yyb1505 = yyj1505 > l
	} else {
		yyb1505 = r.CheckBreak()
	}
	if yyb1505 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1506 := &x.Command
		yym1507 := z.DecBinary()
		_ = yym1507
		if false {
		} else {
			z.F.DecSliceStringX(yyv1506, false, d)
		}
	}
	for {
		yyj1505++
		if yyhl1505 {
			yyb1505 = yyj1505 > l
		} else {
			yyb1505 = r.CheckBreak()
		}
		if yyb1505 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1505-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1508 := z.EncBinary()
		_ = yym1508
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1509 := !z.EncBinary()
			yy2arr1509 := z.EncBasicHandle().StructToArray
			var yyq1509 [8]bool
			_, _, _ = yysep1509, yyq1509, yy2arr1509
			const yyr1509 bool = false
			yyq1509[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1509[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1509[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1509[3] = x.InitialDelaySeconds != 0
			yyq1509[4] = x.TimeoutSeconds != 0
			yyq1509[5] = x.PeriodSeconds != 0
			yyq1509[6] = x.SuccessThreshold != 0
			yyq1509[7] = x.FailureThreshold != 0
			var yynn1509 int
			if yyr1509 || yy2arr1509 {
				r.EncodeArrayStart(8)
			} else {
				yynn1509 = 0
				for _, b := range yyq1509 {
					if b {
						yynn1509++
					}
				}
				r.EncodeMapStart(yynn1509)
				yynn1509 = 0
			}
			var yyn1510 bool
			if x.Handler.Exec == nil {
				yyn1510 = true
				goto LABEL1510
			}
		LABEL1510:
			if yyr1509 || yy2arr1509 {
				if yyn1510 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1509[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1509[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1510 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1511 bool
			if x.Handler.HTTPGet == nil {
				yyn1511 = true
				goto LABEL1511
			}
		LABEL1511:
			if yyr1509 || yy2arr1509 {
				if yyn1511 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1509[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1509[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1511 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1512 bool
			if x.Handler.TCPSocket == nil {
				yyn1512 = true
				goto LABEL1512
			}
		LABEL1512:
			if yyr1509 || yy2arr1509 {
				if yyn1512 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1509[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1509[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1512 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1509[3] {
					yym1514 := z.EncBinary()
					_ = yym1514
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1509[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1515 := z.EncBinary()
					_ = yym1515
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1509[4] {
					yym1517 := z.EncBinary()
					_ = yym1517
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1509[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1518 := z.EncBinary()
					_ = yym1518
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1509[5] {
					yym1520 := z.EncBinary()
					_ = yym1520
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1509[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1521 := z.EncBinary()
					_ = yym1521
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1509[6] {
					yym1523 := z.EncBinary()
					_ = yym1523
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1509[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1524 := z.EncBinary()
					_ = yym1524
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1509[7] {
					yym1526 := z.EncBinary()
					_ = yym1526
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1509[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1527 := z.EncBinary()
					_ = yym1527
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1509 || yy2arr1509 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1528 := z.DecBinary()
	_ = yym1528
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1529 := r.ContainerType()
		if yyct1529 == codecSelferValueTypeMap1234 {
			yyl1529 := r.ReadMapStart()
			if yyl1529 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1529, d)
			}
		} else if yyct1529 == codecSelferValueTypeArray1234 {
			yyl1529 := r.ReadArrayStart()
			if yyl1529 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1529, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1530Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1530Slc
	var yyhl1530 bool = l >= 0
	for yyj1530 := 0; ; yyj1530++ {
		if yyhl1530 {
			if yyj1530 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1530Slc = r.DecodeBytes(yys1530Slc, true, true)
		yys1530 := string(yys1530Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1530 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1530)
		} // end switch yys1530
	} // end for yyj1530
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1539 int
	var yyb1539 bool
	var yyhl1539 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1539++
	if yyhl1539 {
		yyb1539 = yyj1539 > l
	} else {
		yyb1539 = r.CheckBreak()
	}
	if yyb1539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1539++
	if yyhl1539 {
		yyb1539 = yyj1539 > l
	} else {
		yyb1539 = r.CheckBreak()
	}
	if yyb1539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1539++
	if yyhl1539 {
		yyb1539 = yyj1539 > l
	} else {
		yyb1539 = r.CheckBreak()
	}
	if yyb1539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1539++
	if yyhl1539 {
		yyb1539 = yyj1539 > l
	} else {
		yyb1539 = r.CheckBreak()
	}
	if yyb1539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1539++
	if yyhl1539 {
		yyb1539 = yyj1539 > l
	} else {
		yyb1539 = r.CheckBreak()
	}
	if yyb1539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1539++
	if yyhl1539 {
		yyb1539 = yyj1539 > l
	} else {
		yyb1539 = r.CheckBreak()
	}
	if yyb1539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1539++
	if yyhl1539 {
		yyb1539 = yyj1539 > l
	} else {
		yyb1539 = r.CheckBreak()
	}
	if yyb1539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1539++
	if yyhl1539 {
		yyb1539 = yyj1539 > l
	} else {
		yyb1539 = r.CheckBreak()
	}
	if yyb1539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1539++
		if yyhl1539 {
			yyb1539 = yyj1539 > l
		} else {
			yyb1539 = r.CheckBreak()
		}
		if yyb1539 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1539-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1548 := z.EncBinary()
	_ = yym1548
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1549 := z.DecBinary()
	_ = yym1549
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1550 := z.EncBinary()
	_ = yym1550
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1551 := z.DecBinary()
	_ = yym1551
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1552 := z.EncBinary()
		_ = yym1552
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1553 := !z.EncBinary()
			yy2arr1553 := z.EncBasicHandle().StructToArray
			var yyq1553 [2]bool
			_, _, _ = yysep1553, yyq1553, yy2arr1553
			const yyr1553 bool = false
			yyq1553[0] = len(x.Add) != 0
			yyq1553[1] = len(x.Drop) != 0
			var yynn1553 int
			if yyr1553 || yy2arr1553 {
				r.EncodeArrayStart(2)
			} else {
				yynn1553 = 0
				for _, b := range yyq1553 {
					if b {
						yynn1553++
					}
				}
				r.EncodeMapStart(yynn1553)
				yynn1553 = 0
			}
			if yyr1553 || yy2arr1553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1553[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1555 := z.EncBinary()
						_ = yym1555
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1553[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1556 := z.EncBinary()
						_ = yym1556
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1553 || yy2arr1553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1553[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1558 := z.EncBinary()
						_ = yym1558
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1553[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1559 := z.EncBinary()
						_ = yym1559
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1553 || yy2arr1553 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1560 := z.DecBinary()
	_ = yym1560
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1561 := r.ContainerType()
		if yyct1561 == codecSelferValueTypeMap1234 {
			yyl1561 := r.ReadMapStart()
			if yyl1561 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1561, d)
			}
		} else if yyct1561 == codecSelferValueTypeArray1234 {
			yyl1561 := r.ReadArrayStart()
			if yyl1561 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1561, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1562Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1562Slc
	var yyhl1562 bool = l >= 0
	for yyj1562 := 0; ; yyj1562++ {
		if yyhl1562 {
			if yyj1562 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1562Slc = r.DecodeBytes(yys1562Slc, true, true)
		yys1562 := string(yys1562Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1562 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1563 := &x.Add
				yym1564 := z.DecBinary()
				_ = yym1564
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1563), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1565 := &x.Drop
				yym1566 := z.DecBinary()
				_ = yym1566
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1565), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1562)
		} // end switch yys1562
	} // end for yyj1562
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1567 int
	var yyb1567 bool
	var yyhl1567 bool = l >= 0
	yyj1567++
	if yyhl1567 {
		yyb1567 = yyj1567 > l
	} else {
		yyb1567 = r.CheckBreak()
	}
	if yyb1567 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1568 := &x.Add
		yym1569 := z.DecBinary()
		_ = yym1569
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1568), d)
		}
	}
	yyj1567++
	if yyhl1567 {
		yyb1567 = yyj1567 > l
	} else {
		yyb1567 = r.CheckBreak()
	}
	if yyb1567 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1570 := &x.Drop
		yym1571 := z.DecBinary()
		_ = yym1571
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1570), d)
		}
	}
	for {
		yyj1567++
		if yyhl1567 {
			yyb1567 = yyj1567 > l
		} else {
			yyb1567 = r.CheckBreak()
		}
		if yyb1567 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1567-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1572 := z.EncBinary()
		_ = yym1572
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1573 := !z.EncBinary()
			yy2arr1573 := z.EncBasicHandle().StructToArray
			var yyq1573 [2]bool
			_, _, _ = yysep1573, yyq1573, yy2arr1573
			const yyr1573 bool = false
			yyq1573[0] = len(x.Limits) != 0
			yyq1573[1] = len(x.Requests) != 0
			var yynn1573 int
			if yyr1573 || yy2arr1573 {
				r.EncodeArrayStart(2)
			} else {
				yynn1573 = 0
				for _, b := range yyq1573 {
					if b {
						yynn1573++
					}
				}
				r.EncodeMapStart(yynn1573)
				yynn1573 = 0
			}
			if yyr1573 || yy2arr1573 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1573[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1573[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1573 || yy2arr1573 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1573[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1573[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1573 || yy2arr1573 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1576 := z.DecBinary()
	_ = yym1576
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1577 := r.ContainerType()
		if yyct1577 == codecSelferValueTypeMap1234 {
			yyl1577 := r.ReadMapStart()
			if yyl1577 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1577, d)
			}
		} else if yyct1577 == codecSelferValueTypeArray1234 {
			yyl1577 := r.ReadArrayStart()
			if yyl1577 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1577, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1578Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1578Slc
	var yyhl1578 bool = l >= 0
	for yyj1578 := 0; ; yyj1578++ {
		if yyhl1578 {
			if yyj1578 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1578Slc = r.DecodeBytes(yys1578Slc, true, true)
		yys1578 := string(yys1578Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1578 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1579 := &x.Limits
				yyv1579.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1580 := &x.Requests
				yyv1580.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1578)
		} // end switch yys1578
	} // end for yyj1578
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1581 int
	var yyb1581 bool
	var yyhl1581 bool = l >= 0
	yyj1581++
	if yyhl1581 {
		yyb1581 = yyj1581 > l
	} else {
		yyb1581 = r.CheckBreak()
	}
	if yyb1581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1582 := &x.Limits
		yyv1582.CodecDecodeSelf(d)
	}
	yyj1581++
	if yyhl1581 {
		yyb1581 = yyj1581 > l
	} else {
		yyb1581 = r.CheckBreak()
	}
	if yyb1581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1583 := &x.Requests
		yyv1583.CodecDecodeSelf(d)
	}
	for {
		yyj1581++
		if yyhl1581 {
			yyb1581 = yyj1581 > l
		} else {
			yyb1581 = r.CheckBreak()
		}
		if yyb1581 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1581-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1584 := z.EncBinary()
		_ = yym1584
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1585 := !z.EncBinary()
			yy2arr1585 := z.EncBasicHandle().StructToArray
			var yyq1585 [18]bool
			_, _, _ = yysep1585, yyq1585, yy2arr1585
			const yyr1585 bool = false
			yyq1585[2] = len(x.Command) != 0
			yyq1585[3] = len(x.Args) != 0
			yyq1585[4] = x.WorkingDir != ""
			yyq1585[5] = len(x.Ports) != 0
			yyq1585[6] = len(x.Env) != 0
			yyq1585[7] = true
			yyq1585[8] = len(x.VolumeMounts) != 0
			yyq1585[9] = x.LivenessProbe != nil
			yyq1585[10] = x.ReadinessProbe != nil
			yyq1585[11] = x.Lifecycle != nil
			yyq1585[12] = x.TerminationMessagePath != ""
			yyq1585[14] = x.SecurityContext != nil
			yyq1585[15] = x.Stdin != false
			yyq1585[16] = x.StdinOnce != false
			yyq1585[17] = x.TTY != false
			var yynn1585 int
			if yyr1585 || yy2arr1585 {
				r.EncodeArrayStart(18)
			} else {
				yynn1585 = 3
				for _, b := range yyq1585 {
					if b {
						yynn1585++
					}
				}
				r.EncodeMapStart(yynn1585)
				yynn1585 = 0
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1587 := z.EncBinary()
				_ = yym1587
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1588 := z.EncBinary()
				_ = yym1588
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1590 := z.EncBinary()
				_ = yym1590
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1591 := z.EncBinary()
				_ = yym1591
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1585[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1593 := z.EncBinary()
						_ = yym1593
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1585[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1594 := z.EncBinary()
						_ = yym1594
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1585[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1596 := z.EncBinary()
						_ = yym1596
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1585[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1597 := z.EncBinary()
						_ = yym1597
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1585[4] {
					yym1599 := z.EncBinary()
					_ = yym1599
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1585[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1600 := z.EncBinary()
					_ = yym1600
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1585[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1602 := z.EncBinary()
						_ = yym1602
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1585[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1603 := z.EncBinary()
						_ = yym1603
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1585[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1605 := z.EncBinary()
						_ = yym1605
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1585[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1606 := z.EncBinary()
						_ = yym1606
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1585[7] {
					yy1608 := &x.Resources
					yy1608.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1585[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1609 := &x.Resources
					yy1609.CodecEncodeSelf(e)
				}
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1585[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1611 := z.EncBinary()
						_ = yym1611
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1585[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1612 := z.EncBinary()
						_ = yym1612
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1585[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1585[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1585[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1585[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1585[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1585[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1585[12] {
					yym1617 := z.EncBinary()
					_ = yym1617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1585[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1618 := z.EncBinary()
					_ = yym1618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1585[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1585[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1585[15] {
					yym1622 := z.EncBinary()
					_ = yym1622
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1585[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1623 := z.EncBinary()
					_ = yym1623
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1585[16] {
					yym1625 := z.EncBinary()
					_ = yym1625
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1585[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1626 := z.EncBinary()
					_ = yym1626
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1585[17] {
					yym1628 := z.EncBinary()
					_ = yym1628
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1585[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1629 := z.EncBinary()
					_ = yym1629
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1630 := z.DecBinary()
	_ = yym1630
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1631 := r.ContainerType()
		if yyct1631 == codecSelferValueTypeMap1234 {
			yyl1631 := r.ReadMapStart()
			if yyl1631 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1631, d)
			}
		} else if yyct1631 == codecSelferValueTypeArray1234 {
			yyl1631 := r.ReadArrayStart()
			if yyl1631 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1631, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1632Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1632Slc
	var yyhl1632 bool = l >= 0
	for yyj1632 := 0; ; yyj1632++ {
		if yyhl1632 {
			if yyj1632 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1632Slc = r.DecodeBytes(yys1632Slc, true, true)
		yys1632 := string(yys1632Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1632 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1635 := &x.Command
				yym1636 := z.DecBinary()
				_ = yym1636
				if false {
				} else {
					z.F.DecSliceStringX(yyv1635, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1637 := &x.Args
				yym1638 := z.DecBinary()
				_ = yym1638
				if false {
				} else {
					z.F.DecSliceStringX(yyv1637, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1640 := &x.Ports
				yym1641 := z.DecBinary()
				_ = yym1641
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1640), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1642 := &x.Env
				yym1643 := z.DecBinary()
				_ = yym1643
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1642), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1644 := &x.Resources
				yyv1644.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1645 := &x.VolumeMounts
				yym1646 := z.DecBinary()
				_ = yym1646
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1645), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1632)
		} // end switch yys1632
	} // end for yyj1632
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1656 int
	var yyb1656 bool
	var yyhl1656 bool = l >= 0
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1659 := &x.Command
		yym1660 := z.DecBinary()
		_ = yym1660
		if false {
		} else {
			z.F.DecSliceStringX(yyv1659, false, d)
		}
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1661 := &x.Args
		yym1662 := z.DecBinary()
		_ = yym1662
		if false {
		} else {
			z.F.DecSliceStringX(yyv1661, false, d)
		}
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1664 := &x.Ports
		yym1665 := z.DecBinary()
		_ = yym1665
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1664), d)
		}
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1666 := &x.Env
		yym1667 := z.DecBinary()
		_ = yym1667
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1666), d)
		}
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1668 := &x.Resources
		yyv1668.CodecDecodeSelf(d)
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1669 := &x.VolumeMounts
		yym1670 := z.DecBinary()
		_ = yym1670
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1669), d)
		}
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1656++
	if yyhl1656 {
		yyb1656 = yyj1656 > l
	} else {
		yyb1656 = r.CheckBreak()
	}
	if yyb1656 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1656++
		if yyhl1656 {
			yyb1656 = yyj1656 > l
		} else {
			yyb1656 = r.CheckBreak()
		}
		if yyb1656 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1656-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1680 := z.EncBinary()
		_ = yym1680
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1681 := !z.EncBinary()
			yy2arr1681 := z.EncBasicHandle().StructToArray
			var yyq1681 [3]bool
			_, _, _ = yysep1681, yyq1681, yy2arr1681
			const yyr1681 bool = false
			yyq1681[0] = x.Exec != nil
			yyq1681[1] = x.HTTPGet != nil
			yyq1681[2] = x.TCPSocket != nil
			var yynn1681 int
			if yyr1681 || yy2arr1681 {
				r.EncodeArrayStart(3)
			} else {
				yynn1681 = 0
				for _, b := range yyq1681 {
					if b {
						yynn1681++
					}
				}
				r.EncodeMapStart(yynn1681)
				yynn1681 = 0
			}
			if yyr1681 || yy2arr1681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1681[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1681[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1681 || yy2arr1681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1681[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1681[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1681 || yy2arr1681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1681[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1681[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1681 || yy2arr1681 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1685 := z.DecBinary()
	_ = yym1685
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1686 := r.ContainerType()
		if yyct1686 == codecSelferValueTypeMap1234 {
			yyl1686 := r.ReadMapStart()
			if yyl1686 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1686, d)
			}
		} else if yyct1686 == codecSelferValueTypeArray1234 {
			yyl1686 := r.ReadArrayStart()
			if yyl1686 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1686, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1687Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1687Slc
	var yyhl1687 bool = l >= 0
	for yyj1687 := 0; ; yyj1687++ {
		if yyhl1687 {
			if yyj1687 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1687Slc = r.DecodeBytes(yys1687Slc, true, true)
		yys1687 := string(yys1687Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1687 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1687)
		} // end switch yys1687
	} // end for yyj1687
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1691 int
	var yyb1691 bool
	var yyhl1691 bool = l >= 0
	yyj1691++
	if yyhl1691 {
		yyb1691 = yyj1691 > l
	} else {
		yyb1691 = r.CheckBreak()
	}
	if yyb1691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1691++
	if yyhl1691 {
		yyb1691 = yyj1691 > l
	} else {
		yyb1691 = r.CheckBreak()
	}
	if yyb1691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1691++
	if yyhl1691 {
		yyb1691 = yyj1691 > l
	} else {
		yyb1691 = r.CheckBreak()
	}
	if yyb1691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1691++
		if yyhl1691 {
			yyb1691 = yyj1691 > l
		} else {
			yyb1691 = r.CheckBreak()
		}
		if yyb1691 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1691-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1695 := z.EncBinary()
		_ = yym1695
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1696 := !z.EncBinary()
			yy2arr1696 := z.EncBasicHandle().StructToArray
			var yyq1696 [2]bool
			_, _, _ = yysep1696, yyq1696, yy2arr1696
			const yyr1696 bool = false
			yyq1696[0] = x.PostStart != nil
			yyq1696[1] = x.PreStop != nil
			var yynn1696 int
			if yyr1696 || yy2arr1696 {
				r.EncodeArrayStart(2)
			} else {
				yynn1696 = 0
				for _, b := range yyq1696 {
					if b {
						yynn1696++
					}
				}
				r.EncodeMapStart(yynn1696)
				yynn1696 = 0
			}
			if yyr1696 || yy2arr1696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1696[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1696[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1696 || yy2arr1696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1696[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1696[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1696 || yy2arr1696 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1699 := z.DecBinary()
	_ = yym1699
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1700 := r.ContainerType()
		if yyct1700 == codecSelferValueTypeMap1234 {
			yyl1700 := r.ReadMapStart()
			if yyl1700 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1700, d)
			}
		} else if yyct1700 == codecSelferValueTypeArray1234 {
			yyl1700 := r.ReadArrayStart()
			if yyl1700 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1700, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1701Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1701Slc
	var yyhl1701 bool = l >= 0
	for yyj1701 := 0; ; yyj1701++ {
		if yyhl1701 {
			if yyj1701 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1701Slc = r.DecodeBytes(yys1701Slc, true, true)
		yys1701 := string(yys1701Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1701 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1701)
		} // end switch yys1701
	} // end for yyj1701
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1704 int
	var yyb1704 bool
	var yyhl1704 bool = l >= 0
	yyj1704++
	if yyhl1704 {
		yyb1704 = yyj1704 > l
	} else {
		yyb1704 = r.CheckBreak()
	}
	if yyb1704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1704++
	if yyhl1704 {
		yyb1704 = yyj1704 > l
	} else {
		yyb1704 = r.CheckBreak()
	}
	if yyb1704 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1704++
		if yyhl1704 {
			yyb1704 = yyj1704 > l
		} else {
			yyb1704 = r.CheckBreak()
		}
		if yyb1704 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1704-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1707 := z.EncBinary()
	_ = yym1707
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1708 := z.DecBinary()
	_ = yym1708
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1709 := z.EncBinary()
		_ = yym1709
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1710 := !z.EncBinary()
			yy2arr1710 := z.EncBasicHandle().StructToArray
			var yyq1710 [2]bool
			_, _, _ = yysep1710, yyq1710, yy2arr1710
			const yyr1710 bool = false
			yyq1710[0] = x.Reason != ""
			yyq1710[1] = x.Message != ""
			var yynn1710 int
			if yyr1710 || yy2arr1710 {
				r.EncodeArrayStart(2)
			} else {
				yynn1710 = 0
				for _, b := range yyq1710 {
					if b {
						yynn1710++
					}
				}
				r.EncodeMapStart(yynn1710)
				yynn1710 = 0
			}
			if yyr1710 || yy2arr1710 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1710[0] {
					yym1712 := z.EncBinary()
					_ = yym1712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1710[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1713 := z.EncBinary()
					_ = yym1713
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1710 || yy2arr1710 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1710[1] {
					yym1715 := z.EncBinary()
					_ = yym1715
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1710[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1716 := z.EncBinary()
					_ = yym1716
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1710 || yy2arr1710 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1717 := z.DecBinary()
	_ = yym1717
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1718 := r.ContainerType()
		if yyct1718 == codecSelferValueTypeMap1234 {
			yyl1718 := r.ReadMapStart()
			if yyl1718 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1718, d)
			}
		} else if yyct1718 == codecSelferValueTypeArray1234 {
			yyl1718 := r.ReadArrayStart()
			if yyl1718 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1718, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1719Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1719Slc
	var yyhl1719 bool = l >= 0
	for yyj1719 := 0; ; yyj1719++ {
		if yyhl1719 {
			if yyj1719 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1719Slc = r.DecodeBytes(yys1719Slc, true, true)
		yys1719 := string(yys1719Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1719 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1719)
		} // end switch yys1719
	} // end for yyj1719
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1722 int
	var yyb1722 bool
	var yyhl1722 bool = l >= 0
	yyj1722++
	if yyhl1722 {
		yyb1722 = yyj1722 > l
	} else {
		yyb1722 = r.CheckBreak()
	}
	if yyb1722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1722++
	if yyhl1722 {
		yyb1722 = yyj1722 > l
	} else {
		yyb1722 = r.CheckBreak()
	}
	if yyb1722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1722++
		if yyhl1722 {
			yyb1722 = yyj1722 > l
		} else {
			yyb1722 = r.CheckBreak()
		}
		if yyb1722 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1722-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1725 := z.EncBinary()
		_ = yym1725
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1726 := !z.EncBinary()
			yy2arr1726 := z.EncBasicHandle().StructToArray
			var yyq1726 [1]bool
			_, _, _ = yysep1726, yyq1726, yy2arr1726
			const yyr1726 bool = false
			yyq1726[0] = true
			var yynn1726 int
			if yyr1726 || yy2arr1726 {
				r.EncodeArrayStart(1)
			} else {
				yynn1726 = 0
				for _, b := range yyq1726 {
					if b {
						yynn1726++
					}
				}
				r.EncodeMapStart(yynn1726)
				yynn1726 = 0
			}
			if yyr1726 || yy2arr1726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1726[0] {
					yy1728 := &x.StartedAt
					yym1729 := z.EncBinary()
					_ = yym1729
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1728) {
					} else if yym1729 {
						z.EncBinaryMarshal(yy1728)
					} else if !yym1729 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1728)
					} else {
						z.EncFallback(yy1728)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1726[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1730 := &x.StartedAt
					yym1731 := z.EncBinary()
					_ = yym1731
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1730) {
					} else if yym1731 {
						z.EncBinaryMarshal(yy1730)
					} else if !yym1731 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1730)
					} else {
						z.EncFallback(yy1730)
					}
				}
			}
			if yyr1726 || yy2arr1726 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1732 := z.DecBinary()
	_ = yym1732
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1733 := r.ContainerType()
		if yyct1733 == codecSelferValueTypeMap1234 {
			yyl1733 := r.ReadMapStart()
			if yyl1733 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1733, d)
			}
		} else if yyct1733 == codecSelferValueTypeArray1234 {
			yyl1733 := r.ReadArrayStart()
			if yyl1733 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1733, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1734Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1734Slc
	var yyhl1734 bool = l >= 0
	for yyj1734 := 0; ; yyj1734++ {
		if yyhl1734 {
			if yyj1734 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1734Slc = r.DecodeBytes(yys1734Slc, true, true)
		yys1734 := string(yys1734Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1734 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1735 := &x.StartedAt
				yym1736 := z.DecBinary()
				_ = yym1736
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1735) {
				} else if yym1736 {
					z.DecBinaryUnmarshal(yyv1735)
				} else if !yym1736 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1735)
				} else {
					z.DecFallback(yyv1735, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1734)
		} // end switch yys1734
	} // end for yyj1734
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1737 int
	var yyb1737 bool
	var yyhl1737 bool = l >= 0
	yyj1737++
	if yyhl1737 {
		yyb1737 = yyj1737 > l
	} else {
		yyb1737 = r.CheckBreak()
	}
	if yyb1737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1738 := &x.StartedAt
		yym1739 := z.DecBinary()
		_ = yym1739
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1738) {
		} else if yym1739 {
			z.DecBinaryUnmarshal(yyv1738)
		} else if !yym1739 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1738)
		} else {
			z.DecFallback(yyv1738, false)
		}
	}
	for {
		yyj1737++
		if yyhl1737 {
			yyb1737 = yyj1737 > l
		} else {
			yyb1737 = r.CheckBreak()
		}
		if yyb1737 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1737-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1740 := z.EncBinary()
		_ = yym1740
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1741 := !z.EncBinary()
			yy2arr1741 := z.EncBasicHandle().StructToArray
			var yyq1741 [7]bool
			_, _, _ = yysep1741, yyq1741, yy2arr1741
			const yyr1741 bool = false
			yyq1741[1] = x.Signal != 0
			yyq1741[2] = x.Reason != ""
			yyq1741[3] = x.Message != ""
			yyq1741[4] = true
			yyq1741[5] = true
			yyq1741[6] = x.ContainerID != ""
			var yynn1741 int
			if yyr1741 || yy2arr1741 {
				r.EncodeArrayStart(7)
			} else {
				yynn1741 = 1
				for _, b := range yyq1741 {
					if b {
						yynn1741++
					}
				}
				r.EncodeMapStart(yynn1741)
				yynn1741 = 0
			}
			if yyr1741 || yy2arr1741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1743 := z.EncBinary()
				_ = yym1743
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1744 := z.EncBinary()
				_ = yym1744
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1741 || yy2arr1741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1741[1] {
					yym1746 := z.EncBinary()
					_ = yym1746
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1741[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1747 := z.EncBinary()
					_ = yym1747
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1741 || yy2arr1741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1741[2] {
					yym1749 := z.EncBinary()
					_ = yym1749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1741[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1750 := z.EncBinary()
					_ = yym1750
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1741 || yy2arr1741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1741[3] {
					yym1752 := z.EncBinary()
					_ = yym1752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1741[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1753 := z.EncBinary()
					_ = yym1753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1741 || yy2arr1741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1741[4] {
					yy1755 := &x.StartedAt
					yym1756 := z.EncBinary()
					_ = yym1756
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1755) {
					} else if yym1756 {
						z.EncBinaryMarshal(yy1755)
					} else if !yym1756 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1755)
					} else {
						z.EncFallback(yy1755)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1741[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1757 := &x.StartedAt
					yym1758 := z.EncBinary()
					_ = yym1758
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1757) {
					} else if yym1758 {
						z.EncBinaryMarshal(yy1757)
					} else if !yym1758 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1757)
					} else {
						z.EncFallback(yy1757)
					}
				}
			}
			if yyr1741 || yy2arr1741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1741[5] {
					yy1760 := &x.FinishedAt
					yym1761 := z.EncBinary()
					_ = yym1761
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1760) {
					} else if yym1761 {
						z.EncBinaryMarshal(yy1760)
					} else if !yym1761 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1760)
					} else {
						z.EncFallback(yy1760)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1741[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1762 := &x.FinishedAt
					yym1763 := z.EncBinary()
					_ = yym1763
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1762) {
					} else if yym1763 {
						z.EncBinaryMarshal(yy1762)
					} else if !yym1763 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1762)
					} else {
						z.EncFallback(yy1762)
					}
				}
			}
			if yyr1741 || yy2arr1741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1741[6] {
					yym1765 := z.EncBinary()
					_ = yym1765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1741[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1766 := z.EncBinary()
					_ = yym1766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1741 || yy2arr1741 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1767 := z.DecBinary()
	_ = yym1767
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1768 := r.ContainerType()
		if yyct1768 == codecSelferValueTypeMap1234 {
			yyl1768 := r.ReadMapStart()
			if yyl1768 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1768, d)
			}
		} else if yyct1768 == codecSelferValueTypeArray1234 {
			yyl1768 := r.ReadArrayStart()
			if yyl1768 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1768, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1769Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1769Slc
	var yyhl1769 bool = l >= 0
	for yyj1769 := 0; ; yyj1769++ {
		if yyhl1769 {
			if yyj1769 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1769Slc = r.DecodeBytes(yys1769Slc, true, true)
		yys1769 := string(yys1769Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1769 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1774 := &x.StartedAt
				yym1775 := z.DecBinary()
				_ = yym1775
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1774) {
				} else if yym1775 {
					z.DecBinaryUnmarshal(yyv1774)
				} else if !yym1775 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1774)
				} else {
					z.DecFallback(yyv1774, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1776 := &x.FinishedAt
				yym1777 := z.DecBinary()
				_ = yym1777
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1776) {
				} else if yym1777 {
					z.DecBinaryUnmarshal(yyv1776)
				} else if !yym1777 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1776)
				} else {
					z.DecFallback(yyv1776, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1769)
		} // end switch yys1769
	} // end for yyj1769
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1779 int
	var yyb1779 bool
	var yyhl1779 bool = l >= 0
	yyj1779++
	if yyhl1779 {
		yyb1779 = yyj1779 > l
	} else {
		yyb1779 = r.CheckBreak()
	}
	if yyb1779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1779++
	if yyhl1779 {
		yyb1779 = yyj1779 > l
	} else {
		yyb1779 = r.CheckBreak()
	}
	if yyb1779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1779++
	if yyhl1779 {
		yyb1779 = yyj1779 > l
	} else {
		yyb1779 = r.CheckBreak()
	}
	if yyb1779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1779++
	if yyhl1779 {
		yyb1779 = yyj1779 > l
	} else {
		yyb1779 = r.CheckBreak()
	}
	if yyb1779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1779++
	if yyhl1779 {
		yyb1779 = yyj1779 > l
	} else {
		yyb1779 = r.CheckBreak()
	}
	if yyb1779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1784 := &x.StartedAt
		yym1785 := z.DecBinary()
		_ = yym1785
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1784) {
		} else if yym1785 {
			z.DecBinaryUnmarshal(yyv1784)
		} else if !yym1785 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1784)
		} else {
			z.DecFallback(yyv1784, false)
		}
	}
	yyj1779++
	if yyhl1779 {
		yyb1779 = yyj1779 > l
	} else {
		yyb1779 = r.CheckBreak()
	}
	if yyb1779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1786 := &x.FinishedAt
		yym1787 := z.DecBinary()
		_ = yym1787
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1786) {
		} else if yym1787 {
			z.DecBinaryUnmarshal(yyv1786)
		} else if !yym1787 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1786)
		} else {
			z.DecFallback(yyv1786, false)
		}
	}
	yyj1779++
	if yyhl1779 {
		yyb1779 = yyj1779 > l
	} else {
		yyb1779 = r.CheckBreak()
	}
	if yyb1779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1779++
		if yyhl1779 {
			yyb1779 = yyj1779 > l
		} else {
			yyb1779 = r.CheckBreak()
		}
		if yyb1779 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1779-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1789 := z.EncBinary()
		_ = yym1789
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1790 := !z.EncBinary()
			yy2arr1790 := z.EncBasicHandle().StructToArray
			var yyq1790 [3]bool
			_, _, _ = yysep1790, yyq1790, yy2arr1790
			const yyr1790 bool = false
			yyq1790[0] = x.Waiting != nil
			yyq1790[1] = x.Running != nil
			yyq1790[2] = x.Terminated != nil
			var yynn1790 int
			if yyr1790 || yy2arr1790 {
				r.EncodeArrayStart(3)
			} else {
				yynn1790 = 0
				for _, b := range yyq1790 {
					if b {
						yynn1790++
					}
				}
				r.EncodeMapStart(yynn1790)
				yynn1790 = 0
			}
			if yyr1790 || yy2arr1790 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1790[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1790[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1790 || yy2arr1790 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1790[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1790[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1790 || yy2arr1790 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1790[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1790[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1790 || yy2arr1790 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1794 := z.DecBinary()
	_ = yym1794
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1795 := r.ContainerType()
		if yyct1795 == codecSelferValueTypeMap1234 {
			yyl1795 := r.ReadMapStart()
			if yyl1795 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1795, d)
			}
		} else if yyct1795 == codecSelferValueTypeArray1234 {
			yyl1795 := r.ReadArrayStart()
			if yyl1795 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1795, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1796Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1796Slc
	var yyhl1796 bool = l >= 0
	for yyj1796 := 0; ; yyj1796++ {
		if yyhl1796 {
			if yyj1796 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1796Slc = r.DecodeBytes(yys1796Slc, true, true)
		yys1796 := string(yys1796Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1796 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1796)
		} // end switch yys1796
	} // end for yyj1796
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1800 int
	var yyb1800 bool
	var yyhl1800 bool = l >= 0
	yyj1800++
	if yyhl1800 {
		yyb1800 = yyj1800 > l
	} else {
		yyb1800 = r.CheckBreak()
	}
	if yyb1800 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1800++
	if yyhl1800 {
		yyb1800 = yyj1800 > l
	} else {
		yyb1800 = r.CheckBreak()
	}
	if yyb1800 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1800++
	if yyhl1800 {
		yyb1800 = yyj1800 > l
	} else {
		yyb1800 = r.CheckBreak()
	}
	if yyb1800 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1800++
		if yyhl1800 {
			yyb1800 = yyj1800 > l
		} else {
			yyb1800 = r.CheckBreak()
		}
		if yyb1800 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1800-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1804 := z.EncBinary()
		_ = yym1804
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1805 := !z.EncBinary()
			yy2arr1805 := z.EncBasicHandle().StructToArray
			var yyq1805 [8]bool
			_, _, _ = yysep1805, yyq1805, yy2arr1805
			const yyr1805 bool = false
			yyq1805[1] = true
			yyq1805[2] = true
			yyq1805[7] = x.ContainerID != ""
			var yynn1805 int
			if yyr1805 || yy2arr1805 {
				r.EncodeArrayStart(8)
			} else {
				yynn1805 = 5
				for _, b := range yyq1805 {
					if b {
						yynn1805++
					}
				}
				r.EncodeMapStart(yynn1805)
				yynn1805 = 0
			}
			if yyr1805 || yy2arr1805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1807 := z.EncBinary()
				_ = yym1807
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1808 := z.EncBinary()
				_ = yym1808
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1805 || yy2arr1805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1805[1] {
					yy1810 := &x.State
					yy1810.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1805[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1811 := &x.State
					yy1811.CodecEncodeSelf(e)
				}
			}
			if yyr1805 || yy2arr1805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1805[2] {
					yy1813 := &x.LastTerminationState
					yy1813.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1805[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1814 := &x.LastTerminationState
					yy1814.CodecEncodeSelf(e)
				}
			}
			if yyr1805 || yy2arr1805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1816 := z.EncBinary()
				_ = yym1816
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1817 := z.EncBinary()
				_ = yym1817
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1805 || yy2arr1805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1819 := z.EncBinary()
				_ = yym1819
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1820 := z.EncBinary()
				_ = yym1820
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1805 || yy2arr1805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1822 := z.EncBinary()
				_ = yym1822
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1823 := z.EncBinary()
				_ = yym1823
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1805 || yy2arr1805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1825 := z.EncBinary()
				_ = yym1825
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1826 := z.EncBinary()
				_ = yym1826
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1805 || yy2arr1805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1805[7] {
					yym1828 := z.EncBinary()
					_ = yym1828
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1805[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1829 := z.EncBinary()
					_ = yym1829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1805 || yy2arr1805 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1830 := z.DecBinary()
	_ = yym1830
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1831 := r.ContainerType()
		if yyct1831 == codecSelferValueTypeMap1234 {
			yyl1831 := r.ReadMapStart()
			if yyl1831 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1831, d)
			}
		} else if yyct1831 == codecSelferValueTypeArray1234 {
			yyl1831 := r.ReadArrayStart()
			if yyl1831 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1831, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1832Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1832Slc
	var yyhl1832 bool = l >= 0
	for yyj1832 := 0; ; yyj1832++ {
		if yyhl1832 {
			if yyj1832 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1832Slc = r.DecodeBytes(yys1832Slc, true, true)
		yys1832 := string(yys1832Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1832 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1834 := &x.State
				yyv1834.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1835 := &x.LastTerminationState
				yyv1835.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1832)
		} // end switch yys1832
	} // end for yyj1832
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1841 int
	var yyb1841 bool
	var yyhl1841 bool = l >= 0
	yyj1841++
	if yyhl1841 {
		yyb1841 = yyj1841 > l
	} else {
		yyb1841 = r.CheckBreak()
	}
	if yyb1841 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1841++
	if yyhl1841 {
		yyb1841 = yyj1841 > l
	} else {
		yyb1841 = r.CheckBreak()
	}
	if yyb1841 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1843 := &x.State
		yyv1843.CodecDecodeSelf(d)
	}
	yyj1841++
	if yyhl1841 {
		yyb1841 = yyj1841 > l
	} else {
		yyb1841 = r.CheckBreak()
	}
	if yyb1841 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1844 := &x.LastTerminationState
		yyv1844.CodecDecodeSelf(d)
	}
	yyj1841++
	if yyhl1841 {
		yyb1841 = yyj1841 > l
	} else {
		yyb1841 = r.CheckBreak()
	}
	if yyb1841 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1841++
	if yyhl1841 {
		yyb1841 = yyj1841 > l
	} else {
		yyb1841 = r.CheckBreak()
	}
	if yyb1841 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1841++
	if yyhl1841 {
		yyb1841 = yyj1841 > l
	} else {
		yyb1841 = r.CheckBreak()
	}
	if yyb1841 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1841++
	if yyhl1841 {
		yyb1841 = yyj1841 > l
	} else {
		yyb1841 = r.CheckBreak()
	}
	if yyb1841 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1841++
	if yyhl1841 {
		yyb1841 = yyj1841 > l
	} else {
		yyb1841 = r.CheckBreak()
	}
	if yyb1841 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1841++
		if yyhl1841 {
			yyb1841 = yyj1841 > l
		} else {
			yyb1841 = r.CheckBreak()
		}
		if yyb1841 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1841-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1850 := z.EncBinary()
	_ = yym1850
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1851 := z.DecBinary()
	_ = yym1851
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1852 := z.EncBinary()
	_ = yym1852
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1853 := z.DecBinary()
	_ = yym1853
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1854 := z.EncBinary()
		_ = yym1854
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1855 := !z.EncBinary()
			yy2arr1855 := z.EncBasicHandle().StructToArray
			var yyq1855 [6]bool
			_, _, _ = yysep1855, yyq1855, yy2arr1855
			const yyr1855 bool = false
			yyq1855[2] = true
			yyq1855[3] = true
			yyq1855[4] = x.Reason != ""
			yyq1855[5] = x.Message != ""
			var yynn1855 int
			if yyr1855 || yy2arr1855 {
				r.EncodeArrayStart(6)
			} else {
				yynn1855 = 2
				for _, b := range yyq1855 {
					if b {
						yynn1855++
					}
				}
				r.EncodeMapStart(yynn1855)
				yynn1855 = 0
			}
			if yyr1855 || yy2arr1855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1855 || yy2arr1855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1855 || yy2arr1855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1855[2] {
					yy1859 := &x.LastProbeTime
					yym1860 := z.EncBinary()
					_ = yym1860
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1859) {
					} else if yym1860 {
						z.EncBinaryMarshal(yy1859)
					} else if !yym1860 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1859)
					} else {
						z.EncFallback(yy1859)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1855[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1861 := &x.LastProbeTime
					yym1862 := z.EncBinary()
					_ = yym1862
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1861) {
					} else if yym1862 {
						z.EncBinaryMarshal(yy1861)
					} else if !yym1862 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1861)
					} else {
						z.EncFallback(yy1861)
					}
				}
			}
			if yyr1855 || yy2arr1855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1855[3] {
					yy1864 := &x.LastTransitionTime
					yym1865 := z.EncBinary()
					_ = yym1865
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1864) {
					} else if yym1865 {
						z.EncBinaryMarshal(yy1864)
					} else if !yym1865 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1864)
					} else {
						z.EncFallback(yy1864)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1855[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1866 := &x.LastTransitionTime
					yym1867 := z.EncBinary()
					_ = yym1867
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1866) {
					} else if yym1867 {
						z.EncBinaryMarshal(yy1866)
					} else if !yym1867 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1866)
					} else {
						z.EncFallback(yy1866)
					}
				}
			}
			if yyr1855 || yy2arr1855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1855[4] {
					yym1869 := z.EncBinary()
					_ = yym1869
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1855[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1870 := z.EncBinary()
					_ = yym1870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1855 || yy2arr1855 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1855[5] {
					yym1872 := z.EncBinary()
					_ = yym1872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1855[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1873 := z.EncBinary()
					_ = yym1873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1855 || yy2arr1855 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1874 := z.DecBinary()
	_ = yym1874
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1875 := r.ContainerType()
		if yyct1875 == codecSelferValueTypeMap1234 {
			yyl1875 := r.ReadMapStart()
			if yyl1875 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1875, d)
			}
		} else if yyct1875 == codecSelferValueTypeArray1234 {
			yyl1875 := r.ReadArrayStart()
			if yyl1875 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1875, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1876Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1876Slc
	var yyhl1876 bool = l >= 0
	for yyj1876 := 0; ; yyj1876++ {
		if yyhl1876 {
			if yyj1876 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1876Slc = r.DecodeBytes(yys1876Slc, true, true)
		yys1876 := string(yys1876Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1876 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1879 := &x.LastProbeTime
				yym1880 := z.DecBinary()
				_ = yym1880
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1879) {
				} else if yym1880 {
					z.DecBinaryUnmarshal(yyv1879)
				} else if !yym1880 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1879)
				} else {
					z.DecFallback(yyv1879, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1881 := &x.LastTransitionTime
				yym1882 := z.DecBinary()
				_ = yym1882
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1881) {
				} else if yym1882 {
					z.DecBinaryUnmarshal(yyv1881)
				} else if !yym1882 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1881)
				} else {
					z.DecFallback(yyv1881, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1876)
		} // end switch yys1876
	} // end for yyj1876
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1885 int
	var yyb1885 bool
	var yyhl1885 bool = l >= 0
	yyj1885++
	if yyhl1885 {
		yyb1885 = yyj1885 > l
	} else {
		yyb1885 = r.CheckBreak()
	}
	if yyb1885 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1885++
	if yyhl1885 {
		yyb1885 = yyj1885 > l
	} else {
		yyb1885 = r.CheckBreak()
	}
	if yyb1885 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1885++
	if yyhl1885 {
		yyb1885 = yyj1885 > l
	} else {
		yyb1885 = r.CheckBreak()
	}
	if yyb1885 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1888 := &x.LastProbeTime
		yym1889 := z.DecBinary()
		_ = yym1889
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1888) {
		} else if yym1889 {
			z.DecBinaryUnmarshal(yyv1888)
		} else if !yym1889 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1888)
		} else {
			z.DecFallback(yyv1888, false)
		}
	}
	yyj1885++
	if yyhl1885 {
		yyb1885 = yyj1885 > l
	} else {
		yyb1885 = r.CheckBreak()
	}
	if yyb1885 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1890 := &x.LastTransitionTime
		yym1891 := z.DecBinary()
		_ = yym1891
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1890) {
		} else if yym1891 {
			z.DecBinaryUnmarshal(yyv1890)
		} else if !yym1891 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1890)
		} else {
			z.DecFallback(yyv1890, false)
		}
	}
	yyj1885++
	if yyhl1885 {
		yyb1885 = yyj1885 > l
	} else {
		yyb1885 = r.CheckBreak()
	}
	if yyb1885 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1885++
	if yyhl1885 {
		yyb1885 = yyj1885 > l
	} else {
		yyb1885 = r.CheckBreak()
	}
	if yyb1885 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1885++
		if yyhl1885 {
			yyb1885 = yyj1885 > l
		} else {
			yyb1885 = r.CheckBreak()
		}
		if yyb1885 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1885-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1894 := z.EncBinary()
	_ = yym1894
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1895 := z.DecBinary()
	_ = yym1895
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1896 := z.EncBinary()
		_ = yym1896
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1897 := !z.EncBinary()
			yy2arr1897 := z.EncBasicHandle().StructToArray
			var yyq1897 [4]bool
			_, _, _ = yysep1897, yyq1897, yy2arr1897
			const yyr1897 bool = false
			yyq1897[0] = x.Kind != ""
			yyq1897[1] = x.APIVersion != ""
			yyq1897[2] = true
			var yynn1897 int
			if yyr1897 || yy2arr1897 {
				r.EncodeArrayStart(4)
			} else {
				yynn1897 = 1
				for _, b := range yyq1897 {
					if b {
						yynn1897++
					}
				}
				r.EncodeMapStart(yynn1897)
				yynn1897 = 0
			}
			if yyr1897 || yy2arr1897 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1897[0] {
					yym1899 := z.EncBinary()
					_ = yym1899
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1897[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1900 := z.EncBinary()
					_ = yym1900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1897 || yy2arr1897 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1897[1] {
					yym1902 := z.EncBinary()
					_ = yym1902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1897[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1903 := z.EncBinary()
					_ = yym1903
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1897 || yy2arr1897 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1897[2] {
					yy1905 := &x.ListMeta
					yym1906 := z.EncBinary()
					_ = yym1906
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1905) {
					} else {
						z.EncFallback(yy1905)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1897[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1907 := &x.ListMeta
					yym1908 := z.EncBinary()
					_ = yym1908
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1907) {
					} else {
						z.EncFallback(yy1907)
					}
				}
			}
			if yyr1897 || yy2arr1897 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1910 := z.EncBinary()
					_ = yym1910
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1911 := z.EncBinary()
					_ = yym1911
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1897 || yy2arr1897 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1912 := z.DecBinary()
	_ = yym1912
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1913 := r.ContainerType()
		if yyct1913 == codecSelferValueTypeMap1234 {
			yyl1913 := r.ReadMapStart()
			if yyl1913 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1913, d)
			}
		} else if yyct1913 == codecSelferValueTypeArray1234 {
			yyl1913 := r.ReadArrayStart()
			if yyl1913 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1913, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1914Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1914Slc
	var yyhl1914 bool = l >= 0
	for yyj1914 := 0; ; yyj1914++ {
		if yyhl1914 {
			if yyj1914 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1914Slc = r.DecodeBytes(yys1914Slc, true, true)
		yys1914 := string(yys1914Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1914 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1917 := &x.ListMeta
				yym1918 := z.DecBinary()
				_ = yym1918
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1917) {
				} else {
					z.DecFallback(yyv1917, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1919 := &x.Items
				yym1920 := z.DecBinary()
				_ = yym1920
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1919), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1914)
		} // end switch yys1914
	} // end for yyj1914
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1921 int
	var yyb1921 bool
	var yyhl1921 bool = l >= 0
	yyj1921++
	if yyhl1921 {
		yyb1921 = yyj1921 > l
	} else {
		yyb1921 = r.CheckBreak()
	}
	if yyb1921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1921++
	if yyhl1921 {
		yyb1921 = yyj1921 > l
	} else {
		yyb1921 = r.CheckBreak()
	}
	if yyb1921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1921++
	if yyhl1921 {
		yyb1921 = yyj1921 > l
	} else {
		yyb1921 = r.CheckBreak()
	}
	if yyb1921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1924 := &x.ListMeta
		yym1925 := z.DecBinary()
		_ = yym1925
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1924) {
		} else {
			z.DecFallback(yyv1924, false)
		}
	}
	yyj1921++
	if yyhl1921 {
		yyb1921 = yyj1921 > l
	} else {
		yyb1921 = r.CheckBreak()
	}
	if yyb1921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1926 := &x.Items
		yym1927 := z.DecBinary()
		_ = yym1927
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1926), d)
		}
	}
	for {
		yyj1921++
		if yyhl1921 {
			yyb1921 = yyj1921 > l
		} else {
			yyb1921 = r.CheckBreak()
		}
		if yyb1921 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1921-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1928 := z.EncBinary()
	_ = yym1928
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1929 := z.DecBinary()
	_ = yym1929
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1930 := z.EncBinary()
		_ = yym1930
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1931 := !z.EncBinary()
			yy2arr1931 := z.EncBasicHandle().StructToArray
			var yyq1931 [1]bool
			_, _, _ = yysep1931, yyq1931, yy2arr1931
			const yyr1931 bool = false
			var yynn1931 int
			if yyr1931 || yy2arr1931 {
				r.EncodeArrayStart(1)
			} else {
				yynn1931 = 1
				for _, b := range yyq1931 {
					if b {
						yynn1931++
					}
				}
				r.EncodeMapStart(yynn1931)
				yynn1931 = 0
			}
			if yyr1931 || yy2arr1931 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1933 := z.EncBinary()
					_ = yym1933
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1934 := z.EncBinary()
					_ = yym1934
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1931 || yy2arr1931 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1935 := z.DecBinary()
	_ = yym1935
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1936 := r.ContainerType()
		if yyct1936 == codecSelferValueTypeMap1234 {
			yyl1936 := r.ReadMapStart()
			if yyl1936 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1936, d)
			}
		} else if yyct1936 == codecSelferValueTypeArray1234 {
			yyl1936 := r.ReadArrayStart()
			if yyl1936 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1936, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1937Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1937Slc
	var yyhl1937 bool = l >= 0
	for yyj1937 := 0; ; yyj1937++ {
		if yyhl1937 {
			if yyj1937 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1937Slc = r.DecodeBytes(yys1937Slc, true, true)
		yys1937 := string(yys1937Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1937 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1938 := &x.NodeSelectorTerms
				yym1939 := z.DecBinary()
				_ = yym1939
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1938), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1937)
		} // end switch yys1937
	} // end for yyj1937
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1940 int
	var yyb1940 bool
	var yyhl1940 bool = l >= 0
	yyj1940++
	if yyhl1940 {
		yyb1940 = yyj1940 > l
	} else {
		yyb1940 = r.CheckBreak()
	}
	if yyb1940 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1941 := &x.NodeSelectorTerms
		yym1942 := z.DecBinary()
		_ = yym1942
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1941), d)
		}
	}
	for {
		yyj1940++
		if yyhl1940 {
			yyb1940 = yyj1940 > l
		} else {
			yyb1940 = r.CheckBreak()
		}
		if yyb1940 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1940-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1943 := z.EncBinary()
		_ = yym1943
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1944 := !z.EncBinary()
			yy2arr1944 := z.EncBasicHandle().StructToArray
			var yyq1944 [1]bool
			_, _, _ = yysep1944, yyq1944, yy2arr1944
			const yyr1944 bool = false
			var yynn1944 int
			if yyr1944 || yy2arr1944 {
				r.EncodeArrayStart(1)
			} else {
				yynn1944 = 1
				for _, b := range yyq1944 {
					if b {
						yynn1944++
					}
				}
				r.EncodeMapStart(yynn1944)
				yynn1944 = 0
			}
			if yyr1944 || yy2arr1944 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1946 := z.EncBinary()
					_ = yym1946
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1947 := z.EncBinary()
					_ = yym1947
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1944 || yy2arr1944 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1948 := z.DecBinary()
	_ = yym1948
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1949 := r.ContainerType()
		if yyct1949 == codecSelferValueTypeMap1234 {
			yyl1949 := r.ReadMapStart()
			if yyl1949 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1949, d)
			}
		} else if yyct1949 == codecSelferValueTypeArray1234 {
			yyl1949 := r.ReadArrayStart()
			if yyl1949 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1949, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1950Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1950Slc
	var yyhl1950 bool = l >= 0
	for yyj1950 := 0; ; yyj1950++ {
		if yyhl1950 {
			if yyj1950 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1950Slc = r.DecodeBytes(yys1950Slc, true, true)
		yys1950 := string(yys1950Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1950 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1951 := &x.MatchExpressions
				yym1952 := z.DecBinary()
				_ = yym1952
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1951), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1950)
		} // end switch yys1950
	} // end for yyj1950
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1953 int
	var yyb1953 bool
	var yyhl1953 bool = l >= 0
	yyj1953++
	if yyhl1953 {
		yyb1953 = yyj1953 > l
	} else {
		yyb1953 = r.CheckBreak()
	}
	if yyb1953 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1954 := &x.MatchExpressions
		yym1955 := z.DecBinary()
		_ = yym1955
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1954), d)
		}
	}
	for {
		yyj1953++
		if yyhl1953 {
			yyb1953 = yyj1953 > l
		} else {
			yyb1953 = r.CheckBreak()
		}
		if yyb1953 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1953-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1956 := z.EncBinary()
		_ = yym1956
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1957 := !z.EncBinary()
			yy2arr1957 := z.EncBasicHandle().StructToArray
			var yyq1957 [3]bool
			_, _, _ = yysep1957, yyq1957, yy2arr1957
			const yyr1957 bool = false
			yyq1957[2] = len(x.Values) != 0
			var yynn1957 int
			if yyr1957 || yy2arr1957 {
				r.EncodeArrayStart(3)
			} else {
				yynn1957 = 2
				for _, b := range yyq1957 {
					if b {
						yynn1957++
					}
				}
				r.EncodeMapStart(yynn1957)
				yynn1957 = 0
			}
			if yyr1957 || yy2arr1957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1959 := z.EncBinary()
				_ = yym1959
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1960 := z.EncBinary()
				_ = yym1960
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1957 || yy2arr1957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1957 || yy2arr1957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1957[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1963 := z.EncBinary()
						_ = yym1963
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1957[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1964 := z.EncBinary()
						_ = yym1964
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1957 || yy2arr1957 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1965 := z.DecBinary()
	_ = yym1965
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1966 := r.ContainerType()
		if yyct1966 == codecSelferValueTypeMap1234 {
			yyl1966 := r.ReadMapStart()
			if yyl1966 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1966, d)
			}
		} else if yyct1966 == codecSelferValueTypeArray1234 {
			yyl1966 := r.ReadArrayStart()
			if yyl1966 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1966, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1967Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1967Slc
	var yyhl1967 bool = l >= 0
	for yyj1967 := 0; ; yyj1967++ {
		if yyhl1967 {
			if yyj1967 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1967Slc = r.DecodeBytes(yys1967Slc, true, true)
		yys1967 := string(yys1967Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1967 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1970 := &x.Values
				yym1971 := z.DecBinary()
				_ = yym1971
				if false {
				} else {
					z.F.DecSliceStringX(yyv1970, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1967)
		} // end switch yys1967
	} // end for yyj1967
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1972 int
	var yyb1972 bool
	var yyhl1972 bool = l >= 0
	yyj1972++
	if yyhl1972 {
		yyb1972 = yyj1972 > l
	} else {
		yyb1972 = r.CheckBreak()
	}
	if yyb1972 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1972++
	if yyhl1972 {
		yyb1972 = yyj1972 > l
	} else {
		yyb1972 = r.CheckBreak()
	}
	if yyb1972 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1972++
	if yyhl1972 {
		yyb1972 = yyj1972 > l
	} else {
		yyb1972 = r.CheckBreak()
	}
	if yyb1972 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1975 := &x.Values
		yym1976 := z.DecBinary()
		_ = yym1976
		if false {
		} else {
			z.F.DecSliceStringX(yyv1975, false, d)
		}
	}
	for {
		yyj1972++
		if yyhl1972 {
			yyb1972 = yyj1972 > l
		} else {
			yyb1972 = r.CheckBreak()
		}
		if yyb1972 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1972-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1977 := z.EncBinary()
	_ = yym1977
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1978 := z.DecBinary()
	_ = yym1978
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1979 := z.EncBinary()
		_ = yym1979
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1980 := !z.EncBinary()
			yy2arr1980 := z.EncBasicHandle().StructToArray
			var yyq1980 [3]bool
			_, _, _ = yysep1980, yyq1980, yy2arr1980
			const yyr1980 bool = false
			yyq1980[0] = x.NodeAffinity != nil
			yyq1980[1] = x.PodAffinity != nil
			yyq1980[2] = x.PodAntiAffinity != nil
			var yynn1980 int
			if yyr1980 || yy2arr1980 {
				r.EncodeArrayStart(3)
			} else {
				yynn1980 = 0
				for _, b := range yyq1980 {
					if b {
						yynn1980++
					}
				}
				r.EncodeMapStart(yynn1980)
				yynn1980 = 0
			}
			if yyr1980 || yy2arr1980 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1980[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1980[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1980 || yy2arr1980 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1980[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1980[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1980 || yy2arr1980 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1980[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1980[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1980 || yy2arr1980 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1984 := z.DecBinary()
	_ = yym1984
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1985 := r.ContainerType()
		if yyct1985 == codecSelferValueTypeMap1234 {
			yyl1985 := r.ReadMapStart()
			if yyl1985 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1985, d)
			}
		} else if yyct1985 == codecSelferValueTypeArray1234 {
			yyl1985 := r.ReadArrayStart()
			if yyl1985 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1985, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1986Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1986Slc
	var yyhl1986 bool = l >= 0
	for yyj1986 := 0; ; yyj1986++ {
		if yyhl1986 {
			if yyj1986 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1986Slc = r.DecodeBytes(yys1986Slc, true, true)
		yys1986 := string(yys1986Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1986 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1986)
		} // end switch yys1986
	} // end for yyj1986
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1990 int
	var yyb1990 bool
	var yyhl1990 bool = l >= 0
	yyj1990++
	if yyhl1990 {
		yyb1990 = yyj1990 > l
	} else {
		yyb1990 = r.CheckBreak()
	}
	if yyb1990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1990++
	if yyhl1990 {
		yyb1990 = yyj1990 > l
	} else {
		yyb1990 = r.CheckBreak()
	}
	if yyb1990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1990++
	if yyhl1990 {
		yyb1990 = yyj1990 > l
	} else {
		yyb1990 = r.CheckBreak()
	}
	if yyb1990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1990++
		if yyhl1990 {
			yyb1990 = yyj1990 > l
		} else {
			yyb1990 = r.CheckBreak()
		}
		if yyb1990 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1990-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1994 := z.EncBinary()
		_ = yym1994
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1995 := !z.EncBinary()
			yy2arr1995 := z.EncBasicHandle().StructToArray
			var yyq1995 [2]bool
			_, _, _ = yysep1995, yyq1995, yy2arr1995
			const yyr1995 bool = false
			yyq1995[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1995[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1995 int
			if yyr1995 || yy2arr1995 {
				r.EncodeArrayStart(2)
			} else {
				yynn1995 = 0
				for _, b := range yyq1995 {
					if b {
						yynn1995++
					}
				}
				r.EncodeMapStart(yynn1995)
				yynn1995 = 0
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1995[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1997 := z.EncBinary()
						_ = yym1997
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1995[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1998 := z.EncBinary()
						_ = yym1998
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1995[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2000 := z.EncBinary()
						_ = yym2000
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1995[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2001 := z.EncBinary()
						_ = yym2001
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1995 || yy2arr1995 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2002 := z.DecBinary()
	_ = yym2002
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2003 := r.ContainerType()
		if yyct2003 == codecSelferValueTypeMap1234 {
			yyl2003 := r.ReadMapStart()
			if yyl2003 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2003, d)
			}
		} else if yyct2003 == codecSelferValueTypeArray1234 {
			yyl2003 := r.ReadArrayStart()
			if yyl2003 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2003, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2004Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2004Slc
	var yyhl2004 bool = l >= 0
	for yyj2004 := 0; ; yyj2004++ {
		if yyhl2004 {
			if yyj2004 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2004Slc = r.DecodeBytes(yys2004Slc, true, true)
		yys2004 := string(yys2004Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2004 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv2005 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym2006 := z.DecBinary()
				_ = yym2006
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv2005), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv2007 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym2008 := z.DecBinary()
				_ = yym2008
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv2007), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2004)
		} // end switch yys2004
	} // end for yyj2004
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2009 int
	var yyb2009 bool
	var yyhl2009 bool = l >= 0
	yyj2009++
	if yyhl2009 {
		yyb2009 = yyj2009 > l
	} else {
		yyb2009 = r.CheckBreak()
	}
	if yyb2009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv2010 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym2011 := z.DecBinary()
		_ = yym2011
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv2010), d)
		}
	}
	yyj2009++
	if yyhl2009 {
		yyb2009 = yyj2009 > l
	} else {
		yyb2009 = r.CheckBreak()
	}
	if yyb2009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv2012 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym2013 := z.DecBinary()
		_ = yym2013
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv2012), d)
		}
	}
	for {
		yyj2009++
		if yyhl2009 {
			yyb2009 = yyj2009 > l
		} else {
			yyb2009 = r.CheckBreak()
		}
		if yyb2009 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2009-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2014 := z.EncBinary()
		_ = yym2014
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2015 := !z.EncBinary()
			yy2arr2015 := z.EncBasicHandle().StructToArray
			var yyq2015 [2]bool
			_, _, _ = yysep2015, yyq2015, yy2arr2015
			const yyr2015 bool = false
			yyq2015[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq2015[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn2015 int
			if yyr2015 || yy2arr2015 {
				r.EncodeArrayStart(2)
			} else {
				yynn2015 = 0
				for _, b := range yyq2015 {
					if b {
						yynn2015++
					}
				}
				r.EncodeMapStart(yynn2015)
				yynn2015 = 0
			}
			if yyr2015 || yy2arr2015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2015[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2017 := z.EncBinary()
						_ = yym2017
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2015[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2018 := z.EncBinary()
						_ = yym2018
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr2015 || yy2arr2015 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2015[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2020 := z.EncBinary()
						_ = yym2020
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2015[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2021 := z.EncBinary()
						_ = yym2021
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr2015 || yy2arr2015 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2022 := z.DecBinary()
	_ = yym2022
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2023 := r.ContainerType()
		if yyct2023 == codecSelferValueTypeMap1234 {
			yyl2023 := r.ReadMapStart()
			if yyl2023 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2023, d)
			}
		} else if yyct2023 == codecSelferValueTypeArray1234 {
			yyl2023 := r.ReadArrayStart()
			if yyl2023 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2023, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2024Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2024Slc
	var yyhl2024 bool = l >= 0
	for yyj2024 := 0; ; yyj2024++ {
		if yyhl2024 {
			if yyj2024 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2024Slc = r.DecodeBytes(yys2024Slc, true, true)
		yys2024 := string(yys2024Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2024 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv2025 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym2026 := z.DecBinary()
				_ = yym2026
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv2025), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv2027 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym2028 := z.DecBinary()
				_ = yym2028
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv2027), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2024)
		} // end switch yys2024
	} // end for yyj2024
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2029 int
	var yyb2029 bool
	var yyhl2029 bool = l >= 0
	yyj2029++
	if yyhl2029 {
		yyb2029 = yyj2029 > l
	} else {
		yyb2029 = r.CheckBreak()
	}
	if yyb2029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv2030 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym2031 := z.DecBinary()
		_ = yym2031
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv2030), d)
		}
	}
	yyj2029++
	if yyhl2029 {
		yyb2029 = yyj2029 > l
	} else {
		yyb2029 = r.CheckBreak()
	}
	if yyb2029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv2032 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym2033 := z.DecBinary()
		_ = yym2033
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv2032), d)
		}
	}
	for {
		yyj2029++
		if yyhl2029 {
			yyb2029 = yyj2029 > l
		} else {
			yyb2029 = r.CheckBreak()
		}
		if yyb2029 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2029-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2034 := z.EncBinary()
		_ = yym2034
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2035 := !z.EncBinary()
			yy2arr2035 := z.EncBasicHandle().StructToArray
			var yyq2035 [2]bool
			_, _, _ = yysep2035, yyq2035, yy2arr2035
			const yyr2035 bool = false
			var yynn2035 int
			if yyr2035 || yy2arr2035 {
				r.EncodeArrayStart(2)
			} else {
				yynn2035 = 2
				for _, b := range yyq2035 {
					if b {
						yynn2035++
					}
				}
				r.EncodeMapStart(yynn2035)
				yynn2035 = 0
			}
			if yyr2035 || yy2arr2035 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2037 := z.EncBinary()
				_ = yym2037
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2038 := z.EncBinary()
				_ = yym2038
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr2035 || yy2arr2035 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2040 := &x.PodAffinityTerm
				yy2040.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2041 := &x.PodAffinityTerm
				yy2041.CodecEncodeSelf(e)
			}
			if yyr2035 || yy2arr2035 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2042 := z.DecBinary()
	_ = yym2042
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2043 := r.ContainerType()
		if yyct2043 == codecSelferValueTypeMap1234 {
			yyl2043 := r.ReadMapStart()
			if yyl2043 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2043, d)
			}
		} else if yyct2043 == codecSelferValueTypeArray1234 {
			yyl2043 := r.ReadArrayStart()
			if yyl2043 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2043, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2044Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2044Slc
	var yyhl2044 bool = l >= 0
	for yyj2044 := 0; ; yyj2044++ {
		if yyhl2044 {
			if yyj2044 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2044Slc = r.DecodeBytes(yys2044Slc, true, true)
		yys2044 := string(yys2044Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2044 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv2046 := &x.PodAffinityTerm
				yyv2046.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2044)
		} // end switch yys2044
	} // end for yyj2044
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2047 int
	var yyb2047 bool
	var yyhl2047 bool = l >= 0
	yyj2047++
	if yyhl2047 {
		yyb2047 = yyj2047 > l
	} else {
		yyb2047 = r.CheckBreak()
	}
	if yyb2047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj2047++
	if yyhl2047 {
		yyb2047 = yyj2047 > l
	} else {
		yyb2047 = r.CheckBreak()
	}
	if yyb2047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv2049 := &x.PodAffinityTerm
		yyv2049.CodecDecodeSelf(d)
	}
	for {
		yyj2047++
		if yyhl2047 {
			yyb2047 = yyj2047 > l
		} else {
			yyb2047 = r.CheckBreak()
		}
		if yyb2047 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2047-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2050 := z.EncBinary()
		_ = yym2050
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2051 := !z.EncBinary()
			yy2arr2051 := z.EncBasicHandle().StructToArray
			var yyq2051 [3]bool
			_, _, _ = yysep2051, yyq2051, yy2arr2051
			const yyr2051 bool = false
			yyq2051[0] = x.LabelSelector != nil
			yyq2051[2] = x.TopologyKey != ""
			var yynn2051 int
			if yyr2051 || yy2arr2051 {
				r.EncodeArrayStart(3)
			} else {
				yynn2051 = 1
				for _, b := range yyq2051 {
					if b {
						yynn2051++
					}
				}
				r.EncodeMapStart(yynn2051)
				yynn2051 = 0
			}
			if yyr2051 || yy2arr2051 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2051[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym2053 := z.EncBinary()
						_ = yym2053
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2051[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym2054 := z.EncBinary()
						_ = yym2054
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr2051 || yy2arr2051 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym2056 := z.EncBinary()
					_ = yym2056
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym2057 := z.EncBinary()
					_ = yym2057
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr2051 || yy2arr2051 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2051[2] {
					yym2059 := z.EncBinary()
					_ = yym2059
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2051[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2060 := z.EncBinary()
					_ = yym2060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr2051 || yy2arr2051 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2061 := z.DecBinary()
	_ = yym2061
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2062 := r.ContainerType()
		if yyct2062 == codecSelferValueTypeMap1234 {
			yyl2062 := r.ReadMapStart()
			if yyl2062 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2062, d)
			}
		} else if yyct2062 == codecSelferValueTypeArray1234 {
			yyl2062 := r.ReadArrayStart()
			if yyl2062 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2062, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2063Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2063Slc
	var yyhl2063 bool = l >= 0
	for yyj2063 := 0; ; yyj2063++ {
		if yyhl2063 {
			if yyj2063 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2063Slc = r.DecodeBytes(yys2063Slc, true, true)
		yys2063 := string(yys2063Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2063 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym2065 := z.DecBinary()
				_ = yym2065
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv2066 := &x.Namespaces
				yym2067 := z.DecBinary()
				_ = yym2067
				if false {
				} else {
					z.F.DecSliceStringX(yyv2066, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2063)
		} // end switch yys2063
	} // end for yyj2063
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2069 int
	var yyb2069 bool
	var yyhl2069 bool = l >= 0
	yyj2069++
	if yyhl2069 {
		yyb2069 = yyj2069 > l
	} else {
		yyb2069 = r.CheckBreak()
	}
	if yyb2069 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym2071 := z.DecBinary()
		_ = yym2071
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj2069++
	if yyhl2069 {
		yyb2069 = yyj2069 > l
	} else {
		yyb2069 = r.CheckBreak()
	}
	if yyb2069 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv2072 := &x.Namespaces
		yym2073 := z.DecBinary()
		_ = yym2073
		if false {
		} else {
			z.F.DecSliceStringX(yyv2072, false, d)
		}
	}
	yyj2069++
	if yyhl2069 {
		yyb2069 = yyj2069 > l
	} else {
		yyb2069 = r.CheckBreak()
	}
	if yyb2069 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj2069++
		if yyhl2069 {
			yyb2069 = yyj2069 > l
		} else {
			yyb2069 = r.CheckBreak()
		}
		if yyb2069 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2069-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2075 := z.EncBinary()
		_ = yym2075
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2076 := !z.EncBinary()
			yy2arr2076 := z.EncBasicHandle().StructToArray
			var yyq2076 [2]bool
			_, _, _ = yysep2076, yyq2076, yy2arr2076
			const yyr2076 bool = false
			yyq2076[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq2076[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn2076 int
			if yyr2076 || yy2arr2076 {
				r.EncodeArrayStart(2)
			} else {
				yynn2076 = 0
				for _, b := range yyq2076 {
					if b {
						yynn2076++
					}
				}
				r.EncodeMapStart(yynn2076)
				yynn2076 = 0
			}
			if yyr2076 || yy2arr2076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2076[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2076[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2076 || yy2arr2076 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2076[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2079 := z.EncBinary()
						_ = yym2079
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2076[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2080 := z.EncBinary()
						_ = yym2080
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr2076 || yy2arr2076 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2081 := z.DecBinary()
	_ = yym2081
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2082 := r.ContainerType()
		if yyct2082 == codecSelferValueTypeMap1234 {
			yyl2082 := r.ReadMapStart()
			if yyl2082 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2082, d)
			}
		} else if yyct2082 == codecSelferValueTypeArray1234 {
			yyl2082 := r.ReadArrayStart()
			if yyl2082 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2082, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2083Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2083Slc
	var yyhl2083 bool = l >= 0
	for yyj2083 := 0; ; yyj2083++ {
		if yyhl2083 {
			if yyj2083 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2083Slc = r.DecodeBytes(yys2083Slc, true, true)
		yys2083 := string(yys2083Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2083 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv2085 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym2086 := z.DecBinary()
				_ = yym2086
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv2085), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2083)
		} // end switch yys2083
	} // end for yyj2083
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2087 int
	var yyb2087 bool
	var yyhl2087 bool = l >= 0
	yyj2087++
	if yyhl2087 {
		yyb2087 = yyj2087 > l
	} else {
		yyb2087 = r.CheckBreak()
	}
	if yyb2087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj2087++
	if yyhl2087 {
		yyb2087 = yyj2087 > l
	} else {
		yyb2087 = r.CheckBreak()
	}
	if yyb2087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv2089 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym2090 := z.DecBinary()
		_ = yym2090
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv2089), d)
		}
	}
	for {
		yyj2087++
		if yyhl2087 {
			yyb2087 = yyj2087 > l
		} else {
			yyb2087 = r.CheckBreak()
		}
		if yyb2087 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2087-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2091 := z.EncBinary()
		_ = yym2091
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2092 := !z.EncBinary()
			yy2arr2092 := z.EncBasicHandle().StructToArray
			var yyq2092 [2]bool
			_, _, _ = yysep2092, yyq2092, yy2arr2092
			const yyr2092 bool = false
			var yynn2092 int
			if yyr2092 || yy2arr2092 {
				r.EncodeArrayStart(2)
			} else {
				yynn2092 = 2
				for _, b := range yyq2092 {
					if b {
						yynn2092++
					}
				}
				r.EncodeMapStart(yynn2092)
				yynn2092 = 0
			}
			if yyr2092 || yy2arr2092 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2094 := z.EncBinary()
				_ = yym2094
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2095 := z.EncBinary()
				_ = yym2095
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr2092 || yy2arr2092 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2097 := &x.Preference
				yy2097.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2098 := &x.Preference
				yy2098.CodecEncodeSelf(e)
			}
			if yyr2092 || yy2arr2092 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2099 := z.DecBinary()
	_ = yym2099
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2100 := r.ContainerType()
		if yyct2100 == codecSelferValueTypeMap1234 {
			yyl2100 := r.ReadMapStart()
			if yyl2100 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2100, d)
			}
		} else if yyct2100 == codecSelferValueTypeArray1234 {
			yyl2100 := r.ReadArrayStart()
			if yyl2100 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2100, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2101Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2101Slc
	var yyhl2101 bool = l >= 0
	for yyj2101 := 0; ; yyj2101++ {
		if yyhl2101 {
			if yyj2101 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2101Slc = r.DecodeBytes(yys2101Slc, true, true)
		yys2101 := string(yys2101Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2101 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv2103 := &x.Preference
				yyv2103.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2101)
		} // end switch yys2101
	} // end for yyj2101
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2104 int
	var yyb2104 bool
	var yyhl2104 bool = l >= 0
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj2104++
	if yyhl2104 {
		yyb2104 = yyj2104 > l
	} else {
		yyb2104 = r.CheckBreak()
	}
	if yyb2104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv2106 := &x.Preference
		yyv2106.CodecDecodeSelf(d)
	}
	for {
		yyj2104++
		if yyhl2104 {
			yyb2104 = yyj2104 > l
		} else {
			yyb2104 = r.CheckBreak()
		}
		if yyb2104 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2104-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2107 := z.EncBinary()
		_ = yym2107
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2108 := !z.EncBinary()
			yy2arr2108 := z.EncBasicHandle().StructToArray
			var yyq2108 [3]bool
			_, _, _ = yysep2108, yyq2108, yy2arr2108
			const yyr2108 bool = false
			yyq2108[1] = x.Value != ""
			var yynn2108 int
			if yyr2108 || yy2arr2108 {
				r.EncodeArrayStart(3)
			} else {
				yynn2108 = 2
				for _, b := range yyq2108 {
					if b {
						yynn2108++
					}
				}
				r.EncodeMapStart(yynn2108)
				yynn2108 = 0
			}
			if yyr2108 || yy2arr2108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2110 := z.EncBinary()
				_ = yym2110
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2111 := z.EncBinary()
				_ = yym2111
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr2108 || yy2arr2108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2108[1] {
					yym2113 := z.EncBinary()
					_ = yym2113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2108[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2114 := z.EncBinary()
					_ = yym2114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2108 || yy2arr2108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr2108 || yy2arr2108 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2116 := z.DecBinary()
	_ = yym2116
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2117 := r.ContainerType()
		if yyct2117 == codecSelferValueTypeMap1234 {
			yyl2117 := r.ReadMapStart()
			if yyl2117 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2117, d)
			}
		} else if yyct2117 == codecSelferValueTypeArray1234 {
			yyl2117 := r.ReadArrayStart()
			if yyl2117 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2117, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2118Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2118Slc
	var yyhl2118 bool = l >= 0
	for yyj2118 := 0; ; yyj2118++ {
		if yyhl2118 {
			if yyj2118 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2118Slc = r.DecodeBytes(yys2118Slc, true, true)
		yys2118 := string(yys2118Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2118 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2118)
		} // end switch yys2118
	} // end for yyj2118
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2122 int
	var yyb2122 bool
	var yyhl2122 bool = l >= 0
	yyj2122++
	if yyhl2122 {
		yyb2122 = yyj2122 > l
	} else {
		yyb2122 = r.CheckBreak()
	}
	if yyb2122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2122++
	if yyhl2122 {
		yyb2122 = yyj2122 > l
	} else {
		yyb2122 = r.CheckBreak()
	}
	if yyb2122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2122++
	if yyhl2122 {
		yyb2122 = yyj2122 > l
	} else {
		yyb2122 = r.CheckBreak()
	}
	if yyb2122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2122++
		if yyhl2122 {
			yyb2122 = yyj2122 > l
		} else {
			yyb2122 = r.CheckBreak()
		}
		if yyb2122 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2122-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2126 := z.EncBinary()
	_ = yym2126
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2127 := z.DecBinary()
	_ = yym2127
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2128 := z.EncBinary()
		_ = yym2128
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2129 := !z.EncBinary()
			yy2arr2129 := z.EncBasicHandle().StructToArray
			var yyq2129 [4]bool
			_, _, _ = yysep2129, yyq2129, yy2arr2129
			const yyr2129 bool = false
			yyq2129[0] = x.Key != ""
			yyq2129[1] = x.Operator != ""
			yyq2129[2] = x.Value != ""
			yyq2129[3] = x.Effect != ""
			var yynn2129 int
			if yyr2129 || yy2arr2129 {
				r.EncodeArrayStart(4)
			} else {
				yynn2129 = 0
				for _, b := range yyq2129 {
					if b {
						yynn2129++
					}
				}
				r.EncodeMapStart(yynn2129)
				yynn2129 = 0
			}
			if yyr2129 || yy2arr2129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2129[0] {
					yym2131 := z.EncBinary()
					_ = yym2131
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2129[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2132 := z.EncBinary()
					_ = yym2132
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr2129 || yy2arr2129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2129[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2129[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr2129 || yy2arr2129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2129[2] {
					yym2135 := z.EncBinary()
					_ = yym2135
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2129[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2136 := z.EncBinary()
					_ = yym2136
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2129 || yy2arr2129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2129[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2129[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr2129 || yy2arr2129 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2138 := z.DecBinary()
	_ = yym2138
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2139 := r.ContainerType()
		if yyct2139 == codecSelferValueTypeMap1234 {
			yyl2139 := r.ReadMapStart()
			if yyl2139 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2139, d)
			}
		} else if yyct2139 == codecSelferValueTypeArray1234 {
			yyl2139 := r.ReadArrayStart()
			if yyl2139 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2139, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2140Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2140Slc
	var yyhl2140 bool = l >= 0
	for yyj2140 := 0; ; yyj2140++ {
		if yyhl2140 {
			if yyj2140 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2140Slc = r.DecodeBytes(yys2140Slc, true, true)
		yys2140 := string(yys2140Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2140 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2140)
		} // end switch yys2140
	} // end for yyj2140
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2145 int
	var yyb2145 bool
	var yyhl2145 bool = l >= 0
	yyj2145++
	if yyhl2145 {
		yyb2145 = yyj2145 > l
	} else {
		yyb2145 = r.CheckBreak()
	}
	if yyb2145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2145++
	if yyhl2145 {
		yyb2145 = yyj2145 > l
	} else {
		yyb2145 = r.CheckBreak()
	}
	if yyb2145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj2145++
	if yyhl2145 {
		yyb2145 = yyj2145 > l
	} else {
		yyb2145 = r.CheckBreak()
	}
	if yyb2145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2145++
	if yyhl2145 {
		yyb2145 = yyj2145 > l
	} else {
		yyb2145 = r.CheckBreak()
	}
	if yyb2145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2145++
		if yyhl2145 {
			yyb2145 = yyj2145 > l
		} else {
			yyb2145 = r.CheckBreak()
		}
		if yyb2145 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2145-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2150 := z.EncBinary()
	_ = yym2150
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2151 := z.DecBinary()
	_ = yym2151
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2152 := z.EncBinary()
		_ = yym2152
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2153 := !z.EncBinary()
			yy2arr2153 := z.EncBasicHandle().StructToArray
			var yyq2153 [13]bool
			_, _, _ = yysep2153, yyq2153, yy2arr2153
			const yyr2153 bool = false
			yyq2153[2] = x.RestartPolicy != ""
			yyq2153[3] = x.TerminationGracePeriodSeconds != nil
			yyq2153[4] = x.ActiveDeadlineSeconds != nil
			yyq2153[5] = x.DNSPolicy != ""
			yyq2153[6] = len(x.NodeSelector) != 0
			yyq2153[8] = x.NodeName != ""
			yyq2153[9] = x.SecurityContext != nil
			yyq2153[10] = len(x.ImagePullSecrets) != 0
			yyq2153[11] = x.Hostname != ""
			yyq2153[12] = x.Subdomain != ""
			var yynn2153 int
			if yyr2153 || yy2arr2153 {
				r.EncodeArrayStart(13)
			} else {
				yynn2153 = 3
				for _, b := range yyq2153 {
					if b {
						yynn2153++
					}
				}
				r.EncodeMapStart(yynn2153)
				yynn2153 = 0
			}
			if yyr2153 || yy2arr2153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym2155 := z.EncBinary()
					_ = yym2155
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym2156 := z.EncBinary()
					_ = yym2156
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr2153 || yy2arr2153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2158 := z.EncBinary()
					_ = yym2158
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2159 := z.EncBinary()
					_ = yym2159
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr2153 || yy2arr2153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2153[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2153[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2153 || yy2arr2153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2153[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2162 := *x.TerminationGracePeriodSeconds
						yym2163 := z.EncBinary()
						_ = yym2163
						if false {
						} else {
							r.EncodeInt(int64(yy2162))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2153[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2164 := *x.TerminationGracePeriodSeconds
						yym2165 := z.EncBinary()
						_ = yym2165
						if false {
						} else {
							r.EncodeInt(int64(yy2164))
						}
					}
				}
			}
			if yyr2153 || yy2arr2153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2153[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2167 := *x.ActiveDeadlineSeconds
						yym2168 := z.EncBinary()
						_ = yym2168
						if false {
						} else {
							r.EncodeInt(int64(yy2167))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2153[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2169 := *x.ActiveDeadlineSeconds
						yym2170 := z.EncBinary()
						_ = yym2170
						if false {
						} else {
							r.EncodeInt(int64(yy2169))
						}
					}
				}
			}
			if yyr2153 || yy2arr2153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2153[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2153[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2153 || yy2arr2153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2153[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2173 := z.EncBinary()
						_ = yym2173
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2153[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2174 := z.EncBinary()
						_ = yym2174
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr2153 || yy2arr2153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2176 := z.EncBinary()
				_ = yym2176
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2177 := z.EncBinary()
				_ = yym2177
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr2153 || yy2arr2153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2153[8] {
					yym2179 := z.EncBinary()
					_ = yym2179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2153[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2180 := z.EncBinary()
					_ = yym2180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr2153 || yy2arr2153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2153[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2153[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2153 || yy2arr2153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2153[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2183 := z.EncBinary()
						_ = yym2183
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2153[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2184 := z.EncBinary()
						_ = yym2184
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2153 || yy2arr2153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2153[11] {
					yym2186 := z.EncBinary()
					_ = yym2186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2153[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2187 := z.EncBinary()
					_ = yym2187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2153 || yy2arr2153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2153[12] {
					yym2189 := z.EncBinary()
					_ = yym2189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2153[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2190 := z.EncBinary()
					_ = yym2190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr2153 || yy2arr2153 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2191 := z.DecBinary()
	_ = yym2191
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2192 := r.ContainerType()
		if yyct2192 == codecSelferValueTypeMap1234 {
			yyl2192 := r.ReadMapStart()
			if yyl2192 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2192, d)
			}
		} else if yyct2192 == codecSelferValueTypeArray1234 {
			yyl2192 := r.ReadArrayStart()
			if yyl2192 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2192, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2193Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2193Slc
	var yyhl2193 bool = l >= 0
	for yyj2193 := 0; ; yyj2193++ {
		if yyhl2193 {
			if yyj2193 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2193Slc = r.DecodeBytes(yys2193Slc, true, true)
		yys2193 := string(yys2193Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2193 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv2194 := &x.Volumes
				yym2195 := z.DecBinary()
				_ = yym2195
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv2194), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv2196 := &x.Containers
				yym2197 := z.DecBinary()
				_ = yym2197
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv2196), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym2200 := z.DecBinary()
				_ = yym2200
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym2202 := z.DecBinary()
				_ = yym2202
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv2204 := &x.NodeSelector
				yym2205 := z.DecBinary()
				_ = yym2205
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2204, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2209 := &x.ImagePullSecrets
				yym2210 := z.DecBinary()
				_ = yym2210
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2209), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2193)
		} // end switch yys2193
	} // end for yyj2193
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2213 int
	var yyb2213 bool
	var yyhl2213 bool = l >= 0
	yyj2213++
	if yyhl2213 {
		yyb2213 = yyj2213 > l
	} else {
		yyb2213 = r.CheckBreak()
	}
	if yyb2213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2214 := &x.Volumes
		yym2215 := z.DecBinary()
		_ = yym2215
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2214), d)
		}
	}
	yyj2213++
	if yyhl2213 {
		yyb2213 = yyj2213 > l
	} else {
		yyb2213 = r.CheckBreak()
	}
	if yyb2213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2216 := &x.Containers
		yym2217 := z.DecBinary()
		_ = yym2217
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2216), d)
		}
	}
	yyj2213++
	if yyhl2213 {
		yyb2213 = yyj2213 > l
	} else {
		yyb2213 = r.CheckBreak()
	}
	if yyb2213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2213++
	if yyhl2213 {
		yyb2213 = yyj2213 > l
	} else {
		yyb2213 = r.CheckBreak()
	}
	if yyb2213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2220 := z.DecBinary()
		_ = yym2220
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2213++
	if yyhl2213 {
		yyb2213 = yyj2213 > l
	} else {
		yyb2213 = r.CheckBreak()
	}
	if yyb2213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2222 := z.DecBinary()
		_ = yym2222
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2213++
	if yyhl2213 {
		yyb2213 = yyj2213 > l
	} else {
		yyb2213 = r.CheckBreak()
	}
	if yyb2213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2213++
	if yyhl2213 {
		yyb2213 = yyj2213 > l
	} else {
		yyb2213 = r.CheckBreak()
	}
	if yyb2213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2224 := &x.NodeSelector
		yym2225 := z.DecBinary()
		_ = yym2225
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2224, false, d)
		}
	}
	yyj2213++
	if yyhl2213 {
		yyb2213 = yyj2213 > l
	} else {
		yyb2213 = r.CheckBreak()
	}
	if yyb2213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2213++
	if yyhl2213 {
		yyb2213 = yyj2213 > l
	} else {
		yyb2213 = r.CheckBreak()
	}
	if yyb2213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2213++
	if yyhl2213 {
		yyb2213 = yyj2213 > l
	} else {
		yyb2213 = r.CheckBreak()
	}
	if yyb2213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2213++
	if yyhl2213 {
		yyb2213 = yyj2213 > l
	} else {
		yyb2213 = r.CheckBreak()
	}
	if yyb2213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2229 := &x.ImagePullSecrets
		yym2230 := z.DecBinary()
		_ = yym2230
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2229), d)
		}
	}
	yyj2213++
	if yyhl2213 {
		yyb2213 = yyj2213 > l
	} else {
		yyb2213 = r.CheckBreak()
	}
	if yyb2213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2213++
	if yyhl2213 {
		yyb2213 = yyj2213 > l
	} else {
		yyb2213 = r.CheckBreak()
	}
	if yyb2213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj2213++
		if yyhl2213 {
			yyb2213 = yyj2213 > l
		} else {
			yyb2213 = r.CheckBreak()
		}
		if yyb2213 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2213-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Sysctl) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2233 := z.EncBinary()
		_ = yym2233
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2234 := !z.EncBinary()
			yy2arr2234 := z.EncBasicHandle().StructToArray
			var yyq2234 [2]bool
			_, _, _ = yysep2234, yyq2234, yy2arr2234
			const yyr2234 bool = false
			var yynn2234 int
			if yyr2234 || yy2arr2234 {
				r.EncodeArrayStart(2)
			} else {
				yynn2234 = 2
				for _, b := range yyq2234 {
					if b {
						yynn2234++
					}
				}
				r.EncodeMapStart(yynn2234)
				yynn2234 = 0
			}
			if yyr2234 || yy2arr2234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2236 := z.EncBinary()
				_ = yym2236
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2237 := z.EncBinary()
				_ = yym2237
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2234 || yy2arr2234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2239 := z.EncBinary()
				_ = yym2239
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2240 := z.EncBinary()
				_ = yym2240
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr2234 || yy2arr2234 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Sysctl) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2241 := z.DecBinary()
	_ = yym2241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2242 := r.ContainerType()
		if yyct2242 == codecSelferValueTypeMap1234 {
			yyl2242 := r.ReadMapStart()
			if yyl2242 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2242, d)
			}
		} else if yyct2242 == codecSelferValueTypeArray1234 {
			yyl2242 := r.ReadArrayStart()
			if yyl2242 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Sysctl) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2243Slc
	var yyhl2243 bool = l >= 0
	for yyj2243 := 0; ; yyj2243++ {
		if yyhl2243 {
			if yyj2243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2243Slc = r.DecodeBytes(yys2243Slc, true, true)
		yys2243 := string(yys2243Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2243 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2243)
		} // end switch yys2243
	} // end for yyj2243
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Sysctl) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2246 int
	var yyb2246 bool
	var yyhl2246 bool = l >= 0
	yyj2246++
	if yyhl2246 {
		yyb2246 = yyj2246 > l
	} else {
		yyb2246 = r.CheckBreak()
	}
	if yyb2246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2246++
	if yyhl2246 {
		yyb2246 = yyj2246 > l
	} else {
		yyb2246 = r.CheckBreak()
	}
	if yyb2246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj2246++
		if yyhl2246 {
			yyb2246 = yyj2246 > l
		} else {
			yyb2246 = r.CheckBreak()
		}
		if yyb2246 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2246-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2249 := z.EncBinary()
		_ = yym2249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2250 := !z.EncBinary()
			yy2arr2250 := z.EncBasicHandle().StructToArray
			var yyq2250 [8]bool
			_, _, _ = yysep2250, yyq2250, yy2arr2250
			const yyr2250 bool = false
			yyq2250[0] = x.HostNetwork != false
			yyq2250[1] = x.HostPID != false
			yyq2250[2] = x.HostIPC != false
			yyq2250[3] = x.SELinuxOptions != nil
			yyq2250[4] = x.RunAsUser != nil
			yyq2250[5] = x.RunAsNonRoot != nil
			yyq2250[6] = len(x.SupplementalGroups) != 0
			yyq2250[7] = x.FSGroup != nil
			var yynn2250 int
			if yyr2250 || yy2arr2250 {
				r.EncodeArrayStart(8)
			} else {
				yynn2250 = 0
				for _, b := range yyq2250 {
					if b {
						yynn2250++
					}
				}
				r.EncodeMapStart(yynn2250)
				yynn2250 = 0
			}
			if yyr2250 || yy2arr2250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2250[0] {
					yym2252 := z.EncBinary()
					_ = yym2252
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2250[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2253 := z.EncBinary()
					_ = yym2253
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2250 || yy2arr2250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2250[1] {
					yym2255 := z.EncBinary()
					_ = yym2255
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2250[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2256 := z.EncBinary()
					_ = yym2256
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2250 || yy2arr2250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2250[2] {
					yym2258 := z.EncBinary()
					_ = yym2258
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2250[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2259 := z.EncBinary()
					_ = yym2259
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2250 || yy2arr2250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2250[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2250[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2250 || yy2arr2250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2250[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2262 := *x.RunAsUser
						yym2263 := z.EncBinary()
						_ = yym2263
						if false {
						} else {
							r.EncodeInt(int64(yy2262))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2250[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2264 := *x.RunAsUser
						yym2265 := z.EncBinary()
						_ = yym2265
						if false {
						} else {
							r.EncodeInt(int64(yy2264))
						}
					}
				}
			}
			if yyr2250 || yy2arr2250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2250[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2267 := *x.RunAsNonRoot
						yym2268 := z.EncBinary()
						_ = yym2268
						if false {
						} else {
							r.EncodeBool(bool(yy2267))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2250[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2269 := *x.RunAsNonRoot
						yym2270 := z.EncBinary()
						_ = yym2270
						if false {
						} else {
							r.EncodeBool(bool(yy2269))
						}
					}
				}
			}
			if yyr2250 || yy2arr2250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2250[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2272 := z.EncBinary()
						_ = yym2272
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2250[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2273 := z.EncBinary()
						_ = yym2273
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2250 || yy2arr2250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2250[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2275 := *x.FSGroup
						yym2276 := z.EncBinary()
						_ = yym2276
						if false {
						} else {
							r.EncodeInt(int64(yy2275))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2250[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2277 := *x.FSGroup
						yym2278 := z.EncBinary()
						_ = yym2278
						if false {
						} else {
							r.EncodeInt(int64(yy2277))
						}
					}
				}
			}
			if yyr2250 || yy2arr2250 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2279 := z.DecBinary()
	_ = yym2279
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2280 := r.ContainerType()
		if yyct2280 == codecSelferValueTypeMap1234 {
			yyl2280 := r.ReadMapStart()
			if yyl2280 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2280, d)
			}
		} else if yyct2280 == codecSelferValueTypeArray1234 {
			yyl2280 := r.ReadArrayStart()
			if yyl2280 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2280, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2281Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2281Slc
	var yyhl2281 bool = l >= 0
	for yyj2281 := 0; ; yyj2281++ {
		if yyhl2281 {
			if yyj2281 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2281Slc = r.DecodeBytes(yys2281Slc, true, true)
		yys2281 := string(yys2281Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2281 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2287 := z.DecBinary()
				_ = yym2287
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2289 := z.DecBinary()
				_ = yym2289
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2290 := &x.SupplementalGroups
				yym2291 := z.DecBinary()
				_ = yym2291
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2290, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2293 := z.DecBinary()
				_ = yym2293
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2281)
		} // end switch yys2281
	} // end for yyj2281
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2294 int
	var yyb2294 bool
	var yyhl2294 bool = l >= 0
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2300 := z.DecBinary()
		_ = yym2300
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2302 := z.DecBinary()
		_ = yym2302
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2303 := &x.SupplementalGroups
		yym2304 := z.DecBinary()
		_ = yym2304
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2303, false, d)
		}
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2306 := z.DecBinary()
		_ = yym2306
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2294++
		if yyhl2294 {
			yyb2294 = yyj2294 > l
		} else {
			yyb2294 = r.CheckBreak()
		}
		if yyb2294 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2294-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2307 := z.EncBinary()
		_ = yym2307
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2308 := !z.EncBinary()
			yy2arr2308 := z.EncBasicHandle().StructToArray
			var yyq2308 [8]bool
			_, _, _ = yysep2308, yyq2308, yy2arr2308
			const yyr2308 bool = false
			yyq2308[0] = x.Phase != ""
			yyq2308[1] = len(x.Conditions) != 0
			yyq2308[2] = x.Message != ""
			yyq2308[3] = x.Reason != ""
			yyq2308[4] = x.HostIP != ""
			yyq2308[5] = x.PodIP != ""
			yyq2308[6] = x.StartTime != nil
			yyq2308[7] = len(x.ContainerStatuses) != 0
			var yynn2308 int
			if yyr2308 || yy2arr2308 {
				r.EncodeArrayStart(8)
			} else {
				yynn2308 = 0
				for _, b := range yyq2308 {
					if b {
						yynn2308++
					}
				}
				r.EncodeMapStart(yynn2308)
				yynn2308 = 0
			}
			if yyr2308 || yy2arr2308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2308[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2308[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2308 || yy2arr2308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2308[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2311 := z.EncBinary()
						_ = yym2311
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2308[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2312 := z.EncBinary()
						_ = yym2312
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2308 || yy2arr2308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2308[2] {
					yym2314 := z.EncBinary()
					_ = yym2314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2308[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2315 := z.EncBinary()
					_ = yym2315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2308 || yy2arr2308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2308[3] {
					yym2317 := z.EncBinary()
					_ = yym2317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2308[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2318 := z.EncBinary()
					_ = yym2318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2308 || yy2arr2308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2308[4] {
					yym2320 := z.EncBinary()
					_ = yym2320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2308[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2321 := z.EncBinary()
					_ = yym2321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2308 || yy2arr2308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2308[5] {
					yym2323 := z.EncBinary()
					_ = yym2323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2308[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2324 := z.EncBinary()
					_ = yym2324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2308 || yy2arr2308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2308[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2326 := z.EncBinary()
						_ = yym2326
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2326 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2326 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2308[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2327 := z.EncBinary()
						_ = yym2327
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2327 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2327 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2308 || yy2arr2308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2308[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2329 := z.EncBinary()
						_ = yym2329
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2308[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2330 := z.EncBinary()
						_ = yym2330
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2308 || yy2arr2308 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2331 := z.DecBinary()
	_ = yym2331
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2332 := r.ContainerType()
		if yyct2332 == codecSelferValueTypeMap1234 {
			yyl2332 := r.ReadMapStart()
			if yyl2332 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2332, d)
			}
		} else if yyct2332 == codecSelferValueTypeArray1234 {
			yyl2332 := r.ReadArrayStart()
			if yyl2332 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2332, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2333Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2333Slc
	var yyhl2333 bool = l >= 0
	for yyj2333 := 0; ; yyj2333++ {
		if yyhl2333 {
			if yyj2333 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2333Slc = r.DecodeBytes(yys2333Slc, true, true)
		yys2333 := string(yys2333Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2333 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2335 := &x.Conditions
				yym2336 := z.DecBinary()
				_ = yym2336
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2335), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2342 := z.DecBinary()
				_ = yym2342
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2342 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2342 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2343 := &x.ContainerStatuses
				yym2344 := z.DecBinary()
				_ = yym2344
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2343), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2333)
		} // end switch yys2333
	} // end for yyj2333
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2345 int
	var yyb2345 bool
	var yyhl2345 bool = l >= 0
	yyj2345++
	if yyhl2345 {
		yyb2345 = yyj2345 > l
	} else {
		yyb2345 = r.CheckBreak()
	}
	if yyb2345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2345++
	if yyhl2345 {
		yyb2345 = yyj2345 > l
	} else {
		yyb2345 = r.CheckBreak()
	}
	if yyb2345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2347 := &x.Conditions
		yym2348 := z.DecBinary()
		_ = yym2348
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2347), d)
		}
	}
	yyj2345++
	if yyhl2345 {
		yyb2345 = yyj2345 > l
	} else {
		yyb2345 = r.CheckBreak()
	}
	if yyb2345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2345++
	if yyhl2345 {
		yyb2345 = yyj2345 > l
	} else {
		yyb2345 = r.CheckBreak()
	}
	if yyb2345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2345++
	if yyhl2345 {
		yyb2345 = yyj2345 > l
	} else {
		yyb2345 = r.CheckBreak()
	}
	if yyb2345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2345++
	if yyhl2345 {
		yyb2345 = yyj2345 > l
	} else {
		yyb2345 = r.CheckBreak()
	}
	if yyb2345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2345++
	if yyhl2345 {
		yyb2345 = yyj2345 > l
	} else {
		yyb2345 = r.CheckBreak()
	}
	if yyb2345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2354 := z.DecBinary()
		_ = yym2354
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2354 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2354 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2345++
	if yyhl2345 {
		yyb2345 = yyj2345 > l
	} else {
		yyb2345 = r.CheckBreak()
	}
	if yyb2345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2355 := &x.ContainerStatuses
		yym2356 := z.DecBinary()
		_ = yym2356
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2355), d)
		}
	}
	for {
		yyj2345++
		if yyhl2345 {
			yyb2345 = yyj2345 > l
		} else {
			yyb2345 = r.CheckBreak()
		}
		if yyb2345 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2345-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2357 := z.EncBinary()
		_ = yym2357
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2358 := !z.EncBinary()
			yy2arr2358 := z.EncBasicHandle().StructToArray
			var yyq2358 [4]bool
			_, _, _ = yysep2358, yyq2358, yy2arr2358
			const yyr2358 bool = false
			yyq2358[0] = x.Kind != ""
			yyq2358[1] = x.APIVersion != ""
			yyq2358[2] = true
			yyq2358[3] = true
			var yynn2358 int
			if yyr2358 || yy2arr2358 {
				r.EncodeArrayStart(4)
			} else {
				yynn2358 = 0
				for _, b := range yyq2358 {
					if b {
						yynn2358++
					}
				}
				r.EncodeMapStart(yynn2358)
				yynn2358 = 0
			}
			if yyr2358 || yy2arr2358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2358[0] {
					yym2360 := z.EncBinary()
					_ = yym2360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2358[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2361 := z.EncBinary()
					_ = yym2361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2358 || yy2arr2358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2358[1] {
					yym2363 := z.EncBinary()
					_ = yym2363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2358[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2364 := z.EncBinary()
					_ = yym2364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2358 || yy2arr2358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2358[2] {
					yy2366 := &x.ObjectMeta
					yy2366.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2358[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2367 := &x.ObjectMeta
					yy2367.CodecEncodeSelf(e)
				}
			}
			if yyr2358 || yy2arr2358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2358[3] {
					yy2369 := &x.Status
					yy2369.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2358[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2370 := &x.Status
					yy2370.CodecEncodeSelf(e)
				}
			}
			if yyr2358 || yy2arr2358 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2371 := z.DecBinary()
	_ = yym2371
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2372 := r.ContainerType()
		if yyct2372 == codecSelferValueTypeMap1234 {
			yyl2372 := r.ReadMapStart()
			if yyl2372 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2372, d)
			}
		} else if yyct2372 == codecSelferValueTypeArray1234 {
			yyl2372 := r.ReadArrayStart()
			if yyl2372 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2372, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2373Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2373Slc
	var yyhl2373 bool = l >= 0
	for yyj2373 := 0; ; yyj2373++ {
		if yyhl2373 {
			if yyj2373 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2373Slc = r.DecodeBytes(yys2373Slc, true, true)
		yys2373 := string(yys2373Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2373 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2376 := &x.ObjectMeta
				yyv2376.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2377 := &x.Status
				yyv2377.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2373)
		} // end switch yys2373
	} // end for yyj2373
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2378 int
	var yyb2378 bool
	var yyhl2378 bool = l >= 0
	yyj2378++
	if yyhl2378 {
		yyb2378 = yyj2378 > l
	} else {
		yyb2378 = r.CheckBreak()
	}
	if yyb2378 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2378++
	if yyhl2378 {
		yyb2378 = yyj2378 > l
	} else {
		yyb2378 = r.CheckBreak()
	}
	if yyb2378 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2378++
	if yyhl2378 {
		yyb2378 = yyj2378 > l
	} else {
		yyb2378 = r.CheckBreak()
	}
	if yyb2378 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2381 := &x.ObjectMeta
		yyv2381.CodecDecodeSelf(d)
	}
	yyj2378++
	if yyhl2378 {
		yyb2378 = yyj2378 > l
	} else {
		yyb2378 = r.CheckBreak()
	}
	if yyb2378 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2382 := &x.Status
		yyv2382.CodecDecodeSelf(d)
	}
	for {
		yyj2378++
		if yyhl2378 {
			yyb2378 = yyj2378 > l
		} else {
			yyb2378 = r.CheckBreak()
		}
		if yyb2378 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2378-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2383 := z.EncBinary()
		_ = yym2383
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2384 := !z.EncBinary()
			yy2arr2384 := z.EncBasicHandle().StructToArray
			var yyq2384 [5]bool
			_, _, _ = yysep2384, yyq2384, yy2arr2384
			const yyr2384 bool = false
			yyq2384[0] = x.Kind != ""
			yyq2384[1] = x.APIVersion != ""
			yyq2384[2] = true
			yyq2384[3] = true
			yyq2384[4] = true
			var yynn2384 int
			if yyr2384 || yy2arr2384 {
				r.EncodeArrayStart(5)
			} else {
				yynn2384 = 0
				for _, b := range yyq2384 {
					if b {
						yynn2384++
					}
				}
				r.EncodeMapStart(yynn2384)
				yynn2384 = 0
			}
			if yyr2384 || yy2arr2384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2384[0] {
					yym2386 := z.EncBinary()
					_ = yym2386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2384[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2387 := z.EncBinary()
					_ = yym2387
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2384 || yy2arr2384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2384[1] {
					yym2389 := z.EncBinary()
					_ = yym2389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2384[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2390 := z.EncBinary()
					_ = yym2390
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2384 || yy2arr2384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2384[2] {
					yy2392 := &x.ObjectMeta
					yy2392.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2384[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2393 := &x.ObjectMeta
					yy2393.CodecEncodeSelf(e)
				}
			}
			if yyr2384 || yy2arr2384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2384[3] {
					yy2395 := &x.Spec
					yy2395.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2384[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2396 := &x.Spec
					yy2396.CodecEncodeSelf(e)
				}
			}
			if yyr2384 || yy2arr2384 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2384[4] {
					yy2398 := &x.Status
					yy2398.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2384[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2399 := &x.Status
					yy2399.CodecEncodeSelf(e)
				}
			}
			if yyr2384 || yy2arr2384 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2400 := z.DecBinary()
	_ = yym2400
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2401 := r.ContainerType()
		if yyct2401 == codecSelferValueTypeMap1234 {
			yyl2401 := r.ReadMapStart()
			if yyl2401 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2401, d)
			}
		} else if yyct2401 == codecSelferValueTypeArray1234 {
			yyl2401 := r.ReadArrayStart()
			if yyl2401 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2401, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2402Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2402Slc
	var yyhl2402 bool = l >= 0
	for yyj2402 := 0; ; yyj2402++ {
		if yyhl2402 {
			if yyj2402 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2402Slc = r.DecodeBytes(yys2402Slc, true, true)
		yys2402 := string(yys2402Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2402 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2405 := &x.ObjectMeta
				yyv2405.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2406 := &x.Spec
				yyv2406.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2407 := &x.Status
				yyv2407.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2402)
		} // end switch yys2402
	} // end for yyj2402
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2408 int
	var yyb2408 bool
	var yyhl2408 bool = l >= 0
	yyj2408++
	if yyhl2408 {
		yyb2408 = yyj2408 > l
	} else {
		yyb2408 = r.CheckBreak()
	}
	if yyb2408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2408++
	if yyhl2408 {
		yyb2408 = yyj2408 > l
	} else {
		yyb2408 = r.CheckBreak()
	}
	if yyb2408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2408++
	if yyhl2408 {
		yyb2408 = yyj2408 > l
	} else {
		yyb2408 = r.CheckBreak()
	}
	if yyb2408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2411 := &x.ObjectMeta
		yyv2411.CodecDecodeSelf(d)
	}
	yyj2408++
	if yyhl2408 {
		yyb2408 = yyj2408 > l
	} else {
		yyb2408 = r.CheckBreak()
	}
	if yyb2408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2412 := &x.Spec
		yyv2412.CodecDecodeSelf(d)
	}
	yyj2408++
	if yyhl2408 {
		yyb2408 = yyj2408 > l
	} else {
		yyb2408 = r.CheckBreak()
	}
	if yyb2408 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2413 := &x.Status
		yyv2413.CodecDecodeSelf(d)
	}
	for {
		yyj2408++
		if yyhl2408 {
			yyb2408 = yyj2408 > l
		} else {
			yyb2408 = r.CheckBreak()
		}
		if yyb2408 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2408-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2414 := z.EncBinary()
		_ = yym2414
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2415 := !z.EncBinary()
			yy2arr2415 := z.EncBasicHandle().StructToArray
			var yyq2415 [2]bool
			_, _, _ = yysep2415, yyq2415, yy2arr2415
			const yyr2415 bool = false
			yyq2415[0] = true
			yyq2415[1] = true
			var yynn2415 int
			if yyr2415 || yy2arr2415 {
				r.EncodeArrayStart(2)
			} else {
				yynn2415 = 0
				for _, b := range yyq2415 {
					if b {
						yynn2415++
					}
				}
				r.EncodeMapStart(yynn2415)
				yynn2415 = 0
			}
			if yyr2415 || yy2arr2415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2415[0] {
					yy2417 := &x.ObjectMeta
					yy2417.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2415[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2418 := &x.ObjectMeta
					yy2418.CodecEncodeSelf(e)
				}
			}
			if yyr2415 || yy2arr2415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2415[1] {
					yy2420 := &x.Spec
					yy2420.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2415[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2421 := &x.Spec
					yy2421.CodecEncodeSelf(e)
				}
			}
			if yyr2415 || yy2arr2415 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2422 := z.DecBinary()
	_ = yym2422
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2423 := r.ContainerType()
		if yyct2423 == codecSelferValueTypeMap1234 {
			yyl2423 := r.ReadMapStart()
			if yyl2423 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2423, d)
			}
		} else if yyct2423 == codecSelferValueTypeArray1234 {
			yyl2423 := r.ReadArrayStart()
			if yyl2423 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2423, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2424Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2424Slc
	var yyhl2424 bool = l >= 0
	for yyj2424 := 0; ; yyj2424++ {
		if yyhl2424 {
			if yyj2424 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2424Slc = r.DecodeBytes(yys2424Slc, true, true)
		yys2424 := string(yys2424Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2424 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2425 := &x.ObjectMeta
				yyv2425.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2426 := &x.Spec
				yyv2426.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2424)
		} // end switch yys2424
	} // end for yyj2424
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2427 int
	var yyb2427 bool
	var yyhl2427 bool = l >= 0
	yyj2427++
	if yyhl2427 {
		yyb2427 = yyj2427 > l
	} else {
		yyb2427 = r.CheckBreak()
	}
	if yyb2427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2428 := &x.ObjectMeta
		yyv2428.CodecDecodeSelf(d)
	}
	yyj2427++
	if yyhl2427 {
		yyb2427 = yyj2427 > l
	} else {
		yyb2427 = r.CheckBreak()
	}
	if yyb2427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2429 := &x.Spec
		yyv2429.CodecDecodeSelf(d)
	}
	for {
		yyj2427++
		if yyhl2427 {
			yyb2427 = yyj2427 > l
		} else {
			yyb2427 = r.CheckBreak()
		}
		if yyb2427 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2427-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2430 := z.EncBinary()
		_ = yym2430
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2431 := !z.EncBinary()
			yy2arr2431 := z.EncBasicHandle().StructToArray
			var yyq2431 [4]bool
			_, _, _ = yysep2431, yyq2431, yy2arr2431
			const yyr2431 bool = false
			yyq2431[0] = x.Kind != ""
			yyq2431[1] = x.APIVersion != ""
			yyq2431[2] = true
			yyq2431[3] = true
			var yynn2431 int
			if yyr2431 || yy2arr2431 {
				r.EncodeArrayStart(4)
			} else {
				yynn2431 = 0
				for _, b := range yyq2431 {
					if b {
						yynn2431++
					}
				}
				r.EncodeMapStart(yynn2431)
				yynn2431 = 0
			}
			if yyr2431 || yy2arr2431 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2431[0] {
					yym2433 := z.EncBinary()
					_ = yym2433
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2431[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2434 := z.EncBinary()
					_ = yym2434
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2431 || yy2arr2431 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2431[1] {
					yym2436 := z.EncBinary()
					_ = yym2436
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2431[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2437 := z.EncBinary()
					_ = yym2437
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2431 || yy2arr2431 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2431[2] {
					yy2439 := &x.ObjectMeta
					yy2439.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2431[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2440 := &x.ObjectMeta
					yy2440.CodecEncodeSelf(e)
				}
			}
			if yyr2431 || yy2arr2431 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2431[3] {
					yy2442 := &x.Template
					yy2442.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2431[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2443 := &x.Template
					yy2443.CodecEncodeSelf(e)
				}
			}
			if yyr2431 || yy2arr2431 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2444 := z.DecBinary()
	_ = yym2444
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2445 := r.ContainerType()
		if yyct2445 == codecSelferValueTypeMap1234 {
			yyl2445 := r.ReadMapStart()
			if yyl2445 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2445, d)
			}
		} else if yyct2445 == codecSelferValueTypeArray1234 {
			yyl2445 := r.ReadArrayStart()
			if yyl2445 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2445, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2446Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2446Slc
	var yyhl2446 bool = l >= 0
	for yyj2446 := 0; ; yyj2446++ {
		if yyhl2446 {
			if yyj2446 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2446Slc = r.DecodeBytes(yys2446Slc, true, true)
		yys2446 := string(yys2446Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2446 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2449 := &x.ObjectMeta
				yyv2449.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2450 := &x.Template
				yyv2450.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2446)
		} // end switch yys2446
	} // end for yyj2446
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2451 int
	var yyb2451 bool
	var yyhl2451 bool = l >= 0
	yyj2451++
	if yyhl2451 {
		yyb2451 = yyj2451 > l
	} else {
		yyb2451 = r.CheckBreak()
	}
	if yyb2451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2451++
	if yyhl2451 {
		yyb2451 = yyj2451 > l
	} else {
		yyb2451 = r.CheckBreak()
	}
	if yyb2451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2451++
	if yyhl2451 {
		yyb2451 = yyj2451 > l
	} else {
		yyb2451 = r.CheckBreak()
	}
	if yyb2451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2454 := &x.ObjectMeta
		yyv2454.CodecDecodeSelf(d)
	}
	yyj2451++
	if yyhl2451 {
		yyb2451 = yyj2451 > l
	} else {
		yyb2451 = r.CheckBreak()
	}
	if yyb2451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2455 := &x.Template
		yyv2455.CodecDecodeSelf(d)
	}
	for {
		yyj2451++
		if yyhl2451 {
			yyb2451 = yyj2451 > l
		} else {
			yyb2451 = r.CheckBreak()
		}
		if yyb2451 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2451-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2456 := z.EncBinary()
		_ = yym2456
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2457 := !z.EncBinary()
			yy2arr2457 := z.EncBasicHandle().StructToArray
			var yyq2457 [4]bool
			_, _, _ = yysep2457, yyq2457, yy2arr2457
			const yyr2457 bool = false
			yyq2457[0] = x.Kind != ""
			yyq2457[1] = x.APIVersion != ""
			yyq2457[2] = true
			var yynn2457 int
			if yyr2457 || yy2arr2457 {
				r.EncodeArrayStart(4)
			} else {
				yynn2457 = 1
				for _, b := range yyq2457 {
					if b {
						yynn2457++
					}
				}
				r.EncodeMapStart(yynn2457)
				yynn2457 = 0
			}
			if yyr2457 || yy2arr2457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2457[0] {
					yym2459 := z.EncBinary()
					_ = yym2459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2457[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2460 := z.EncBinary()
					_ = yym2460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2457 || yy2arr2457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2457[1] {
					yym2462 := z.EncBinary()
					_ = yym2462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2457[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2463 := z.EncBinary()
					_ = yym2463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2457 || yy2arr2457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2457[2] {
					yy2465 := &x.ListMeta
					yym2466 := z.EncBinary()
					_ = yym2466
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2465) {
					} else {
						z.EncFallback(yy2465)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2457[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2467 := &x.ListMeta
					yym2468 := z.EncBinary()
					_ = yym2468
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2467) {
					} else {
						z.EncFallback(yy2467)
					}
				}
			}
			if yyr2457 || yy2arr2457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2470 := z.EncBinary()
					_ = yym2470
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2471 := z.EncBinary()
					_ = yym2471
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2457 || yy2arr2457 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2472 := z.DecBinary()
	_ = yym2472
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2473 := r.ContainerType()
		if yyct2473 == codecSelferValueTypeMap1234 {
			yyl2473 := r.ReadMapStart()
			if yyl2473 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2473, d)
			}
		} else if yyct2473 == codecSelferValueTypeArray1234 {
			yyl2473 := r.ReadArrayStart()
			if yyl2473 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2473, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2474Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2474Slc
	var yyhl2474 bool = l >= 0
	for yyj2474 := 0; ; yyj2474++ {
		if yyhl2474 {
			if yyj2474 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2474Slc = r.DecodeBytes(yys2474Slc, true, true)
		yys2474 := string(yys2474Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2474 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2477 := &x.ListMeta
				yym2478 := z.DecBinary()
				_ = yym2478
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2477) {
				} else {
					z.DecFallback(yyv2477, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2479 := &x.Items
				yym2480 := z.DecBinary()
				_ = yym2480
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2479), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2474)
		} // end switch yys2474
	} // end for yyj2474
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2481 int
	var yyb2481 bool
	var yyhl2481 bool = l >= 0
	yyj2481++
	if yyhl2481 {
		yyb2481 = yyj2481 > l
	} else {
		yyb2481 = r.CheckBreak()
	}
	if yyb2481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2481++
	if yyhl2481 {
		yyb2481 = yyj2481 > l
	} else {
		yyb2481 = r.CheckBreak()
	}
	if yyb2481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2481++
	if yyhl2481 {
		yyb2481 = yyj2481 > l
	} else {
		yyb2481 = r.CheckBreak()
	}
	if yyb2481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2484 := &x.ListMeta
		yym2485 := z.DecBinary()
		_ = yym2485
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2484) {
		} else {
			z.DecFallback(yyv2484, false)
		}
	}
	yyj2481++
	if yyhl2481 {
		yyb2481 = yyj2481 > l
	} else {
		yyb2481 = r.CheckBreak()
	}
	if yyb2481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2486 := &x.Items
		yym2487 := z.DecBinary()
		_ = yym2487
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2486), d)
		}
	}
	for {
		yyj2481++
		if yyhl2481 {
			yyb2481 = yyj2481 > l
		} else {
			yyb2481 = r.CheckBreak()
		}
		if yyb2481 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2481-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2488 := z.EncBinary()
		_ = yym2488
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2489 := !z.EncBinary()
			yy2arr2489 := z.EncBasicHandle().StructToArray
			var yyq2489 [4]bool
			_, _, _ = yysep2489, yyq2489, yy2arr2489
			const yyr2489 bool = false
			yyq2489[1] = x.MinReadySeconds != 0
			yyq2489[3] = x.Template != nil
			var yynn2489 int
			if yyr2489 || yy2arr2489 {
				r.EncodeArrayStart(4)
			} else {
				yynn2489 = 2
				for _, b := range yyq2489 {
					if b {
						yynn2489++
					}
				}
				r.EncodeMapStart(yynn2489)
				yynn2489 = 0
			}
			if yyr2489 || yy2arr2489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2491 := z.EncBinary()
				_ = yym2491
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2492 := z.EncBinary()
				_ = yym2492
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2489 || yy2arr2489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2489[1] {
					yym2494 := z.EncBinary()
					_ = yym2494
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2489[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2495 := z.EncBinary()
					_ = yym2495
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr2489 || yy2arr2489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2497 := z.EncBinary()
					_ = yym2497
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2498 := z.EncBinary()
					_ = yym2498
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2489 || yy2arr2489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2489[3] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2489[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2489 || yy2arr2489 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2500 := z.DecBinary()
	_ = yym2500
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2501 := r.ContainerType()
		if yyct2501 == codecSelferValueTypeMap1234 {
			yyl2501 := r.ReadMapStart()
			if yyl2501 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2501, d)
			}
		} else if yyct2501 == codecSelferValueTypeArray1234 {
			yyl2501 := r.ReadArrayStart()
			if yyl2501 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2501, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2502Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2502Slc
	var yyhl2502 bool = l >= 0
	for yyj2502 := 0; ; yyj2502++ {
		if yyhl2502 {
			if yyj2502 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2502Slc = r.DecodeBytes(yys2502Slc, true, true)
		yys2502 := string(yys2502Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2502 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2505 := &x.Selector
				yym2506 := z.DecBinary()
				_ = yym2506
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2505, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2502)
		} // end switch yys2502
	} // end for yyj2502
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2508 int
	var yyb2508 bool
	var yyhl2508 bool = l >= 0
	yyj2508++
	if yyhl2508 {
		yyb2508 = yyj2508 > l
	} else {
		yyb2508 = r.CheckBreak()
	}
	if yyb2508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2508++
	if yyhl2508 {
		yyb2508 = yyj2508 > l
	} else {
		yyb2508 = r.CheckBreak()
	}
	if yyb2508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj2508++
	if yyhl2508 {
		yyb2508 = yyj2508 > l
	} else {
		yyb2508 = r.CheckBreak()
	}
	if yyb2508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2511 := &x.Selector
		yym2512 := z.DecBinary()
		_ = yym2512
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2511, false, d)
		}
	}
	yyj2508++
	if yyhl2508 {
		yyb2508 = yyj2508 > l
	} else {
		yyb2508 = r.CheckBreak()
	}
	if yyb2508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2508++
		if yyhl2508 {
			yyb2508 = yyj2508 > l
		} else {
			yyb2508 = r.CheckBreak()
		}
		if yyb2508 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2508-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2514 := z.EncBinary()
		_ = yym2514
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2515 := !z.EncBinary()
			yy2arr2515 := z.EncBasicHandle().StructToArray
			var yyq2515 [6]bool
			_, _, _ = yysep2515, yyq2515, yy2arr2515
			const yyr2515 bool = false
			yyq2515[1] = x.FullyLabeledReplicas != 0
			yyq2515[2] = x.ReadyReplicas != 0
			yyq2515[3] = x.AvailableReplicas != 0
			yyq2515[4] = x.ObservedGeneration != 0
			yyq2515[5] = len(x.Conditions) != 0
			var yynn2515 int
			if yyr2515 || yy2arr2515 {
				r.EncodeArrayStart(6)
			} else {
				yynn2515 = 1
				for _, b := range yyq2515 {
					if b {
						yynn2515++
					}
				}
				r.EncodeMapStart(yynn2515)
				yynn2515 = 0
			}
			if yyr2515 || yy2arr2515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2517 := z.EncBinary()
				_ = yym2517
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2518 := z.EncBinary()
				_ = yym2518
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2515 || yy2arr2515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2515[1] {
					yym2520 := z.EncBinary()
					_ = yym2520
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2515[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2521 := z.EncBinary()
					_ = yym2521
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2515 || yy2arr2515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2515[2] {
					yym2523 := z.EncBinary()
					_ = yym2523
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2515[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2524 := z.EncBinary()
					_ = yym2524
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr2515 || yy2arr2515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2515[3] {
					yym2526 := z.EncBinary()
					_ = yym2526
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2515[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2527 := z.EncBinary()
					_ = yym2527
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr2515 || yy2arr2515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2515[4] {
					yym2529 := z.EncBinary()
					_ = yym2529
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2515[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2530 := z.EncBinary()
					_ = yym2530
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2515 || yy2arr2515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2515[5] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2532 := z.EncBinary()
						_ = yym2532
						if false {
						} else {
							h.encSliceReplicationControllerCondition(([]ReplicationControllerCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2515[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2533 := z.EncBinary()
						_ = yym2533
						if false {
						} else {
							h.encSliceReplicationControllerCondition(([]ReplicationControllerCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2515 || yy2arr2515 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2534 := z.DecBinary()
	_ = yym2534
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2535 := r.ContainerType()
		if yyct2535 == codecSelferValueTypeMap1234 {
			yyl2535 := r.ReadMapStart()
			if yyl2535 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2535, d)
			}
		} else if yyct2535 == codecSelferValueTypeArray1234 {
			yyl2535 := r.ReadArrayStart()
			if yyl2535 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2535, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2536Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2536Slc
	var yyhl2536 bool = l >= 0
	for yyj2536 := 0; ; yyj2536++ {
		if yyhl2536 {
			if yyj2536 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2536Slc = r.DecodeBytes(yys2536Slc, true, true)
		yys2536 := string(yys2536Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2536 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2542 := &x.Conditions
				yym2543 := z.DecBinary()
				_ = yym2543
				if false {
				} else {
					h.decSliceReplicationControllerCondition((*[]ReplicationControllerCondition)(yyv2542), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2536)
		} // end switch yys2536
	} // end for yyj2536
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2544 int
	var yyb2544 bool
	var yyhl2544 bool = l >= 0
	yyj2544++
	if yyhl2544 {
		yyb2544 = yyj2544 > l
	} else {
		yyb2544 = r.CheckBreak()
	}
	if yyb2544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2544++
	if yyhl2544 {
		yyb2544 = yyj2544 > l
	} else {
		yyb2544 = r.CheckBreak()
	}
	if yyb2544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2544++
	if yyhl2544 {
		yyb2544 = yyj2544 > l
	} else {
		yyb2544 = r.CheckBreak()
	}
	if yyb2544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj2544++
	if yyhl2544 {
		yyb2544 = yyj2544 > l
	} else {
		yyb2544 = r.CheckBreak()
	}
	if yyb2544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj2544++
	if yyhl2544 {
		yyb2544 = yyj2544 > l
	} else {
		yyb2544 = r.CheckBreak()
	}
	if yyb2544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj2544++
	if yyhl2544 {
		yyb2544 = yyj2544 > l
	} else {
		yyb2544 = r.CheckBreak()
	}
	if yyb2544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2550 := &x.Conditions
		yym2551 := z.DecBinary()
		_ = yym2551
		if false {
		} else {
			h.decSliceReplicationControllerCondition((*[]ReplicationControllerCondition)(yyv2550), d)
		}
	}
	for {
		yyj2544++
		if yyhl2544 {
			yyb2544 = yyj2544 > l
		} else {
			yyb2544 = r.CheckBreak()
		}
		if yyb2544 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2544-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ReplicationControllerConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2552 := z.EncBinary()
	_ = yym2552
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ReplicationControllerConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2553 := z.DecBinary()
	_ = yym2553
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicationControllerCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2554 := z.EncBinary()
		_ = yym2554
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2555 := !z.EncBinary()
			yy2arr2555 := z.EncBasicHandle().StructToArray
			var yyq2555 [5]bool
			_, _, _ = yysep2555, yyq2555, yy2arr2555
			const yyr2555 bool = false
			yyq2555[2] = true
			yyq2555[3] = x.Reason != ""
			yyq2555[4] = x.Message != ""
			var yynn2555 int
			if yyr2555 || yy2arr2555 {
				r.EncodeArrayStart(5)
			} else {
				yynn2555 = 2
				for _, b := range yyq2555 {
					if b {
						yynn2555++
					}
				}
				r.EncodeMapStart(yynn2555)
				yynn2555 = 0
			}
			if yyr2555 || yy2arr2555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2555 || yy2arr2555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2555 || yy2arr2555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2555[2] {
					yy2559 := &x.LastTransitionTime
					yym2560 := z.EncBinary()
					_ = yym2560
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2559) {
					} else if yym2560 {
						z.EncBinaryMarshal(yy2559)
					} else if !yym2560 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2559)
					} else {
						z.EncFallback(yy2559)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2555[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2561 := &x.LastTransitionTime
					yym2562 := z.EncBinary()
					_ = yym2562
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2561) {
					} else if yym2562 {
						z.EncBinaryMarshal(yy2561)
					} else if !yym2562 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2561)
					} else {
						z.EncFallback(yy2561)
					}
				}
			}
			if yyr2555 || yy2arr2555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2555[3] {
					yym2564 := z.EncBinary()
					_ = yym2564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2555[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2565 := z.EncBinary()
					_ = yym2565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2555 || yy2arr2555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2555[4] {
					yym2567 := z.EncBinary()
					_ = yym2567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2555[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2568 := z.EncBinary()
					_ = yym2568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2555 || yy2arr2555 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2569 := z.DecBinary()
	_ = yym2569
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2570 := r.ContainerType()
		if yyct2570 == codecSelferValueTypeMap1234 {
			yyl2570 := r.ReadMapStart()
			if yyl2570 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2570, d)
			}
		} else if yyct2570 == codecSelferValueTypeArray1234 {
			yyl2570 := r.ReadArrayStart()
			if yyl2570 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2570, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2571Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2571Slc
	var yyhl2571 bool = l >= 0
	for yyj2571 := 0; ; yyj2571++ {
		if yyhl2571 {
			if yyj2571 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2571Slc = r.DecodeBytes(yys2571Slc, true, true)
		yys2571 := string(yys2571Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2571 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ReplicationControllerConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2574 := &x.LastTransitionTime
				yym2575 := z.DecBinary()
				_ = yym2575
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2574) {
				} else if yym2575 {
					z.DecBinaryUnmarshal(yyv2574)
				} else if !yym2575 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2574)
				} else {
					z.DecFallback(yyv2574, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2571)
		} // end switch yys2571
	} // end for yyj2571
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2578 int
	var yyb2578 bool
	var yyhl2578 bool = l >= 0
	yyj2578++
	if yyhl2578 {
		yyb2578 = yyj2578 > l
	} else {
		yyb2578 = r.CheckBreak()
	}
	if yyb2578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ReplicationControllerConditionType(r.DecodeString())
	}
	yyj2578++
	if yyhl2578 {
		yyb2578 = yyj2578 > l
	} else {
		yyb2578 = r.CheckBreak()
	}
	if yyb2578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2578++
	if yyhl2578 {
		yyb2578 = yyj2578 > l
	} else {
		yyb2578 = r.CheckBreak()
	}
	if yyb2578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2581 := &x.LastTransitionTime
		yym2582 := z.DecBinary()
		_ = yym2582
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2581) {
		} else if yym2582 {
			z.DecBinaryUnmarshal(yyv2581)
		} else if !yym2582 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2581)
		} else {
			z.DecFallback(yyv2581, false)
		}
	}
	yyj2578++
	if yyhl2578 {
		yyb2578 = yyj2578 > l
	} else {
		yyb2578 = r.CheckBreak()
	}
	if yyb2578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2578++
	if yyhl2578 {
		yyb2578 = yyj2578 > l
	} else {
		yyb2578 = r.CheckBreak()
	}
	if yyb2578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2578++
		if yyhl2578 {
			yyb2578 = yyj2578 > l
		} else {
			yyb2578 = r.CheckBreak()
		}
		if yyb2578 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2578-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2585 := z.EncBinary()
		_ = yym2585
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2586 := !z.EncBinary()
			yy2arr2586 := z.EncBasicHandle().StructToArray
			var yyq2586 [5]bool
			_, _, _ = yysep2586, yyq2586, yy2arr2586
			const yyr2586 bool = false
			yyq2586[0] = x.Kind != ""
			yyq2586[1] = x.APIVersion != ""
			yyq2586[2] = true
			yyq2586[3] = true
			yyq2586[4] = true
			var yynn2586 int
			if yyr2586 || yy2arr2586 {
				r.EncodeArrayStart(5)
			} else {
				yynn2586 = 0
				for _, b := range yyq2586 {
					if b {
						yynn2586++
					}
				}
				r.EncodeMapStart(yynn2586)
				yynn2586 = 0
			}
			if yyr2586 || yy2arr2586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2586[0] {
					yym2588 := z.EncBinary()
					_ = yym2588
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2586[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2589 := z.EncBinary()
					_ = yym2589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2586 || yy2arr2586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2586[1] {
					yym2591 := z.EncBinary()
					_ = yym2591
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2586[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2592 := z.EncBinary()
					_ = yym2592
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2586 || yy2arr2586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2586[2] {
					yy2594 := &x.ObjectMeta
					yy2594.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2586[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2595 := &x.ObjectMeta
					yy2595.CodecEncodeSelf(e)
				}
			}
			if yyr2586 || yy2arr2586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2586[3] {
					yy2597 := &x.Spec
					yy2597.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2586[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2598 := &x.Spec
					yy2598.CodecEncodeSelf(e)
				}
			}
			if yyr2586 || yy2arr2586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2586[4] {
					yy2600 := &x.Status
					yy2600.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2586[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2601 := &x.Status
					yy2601.CodecEncodeSelf(e)
				}
			}
			if yyr2586 || yy2arr2586 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2602 := z.DecBinary()
	_ = yym2602
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2603 := r.ContainerType()
		if yyct2603 == codecSelferValueTypeMap1234 {
			yyl2603 := r.ReadMapStart()
			if yyl2603 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2603, d)
			}
		} else if yyct2603 == codecSelferValueTypeArray1234 {
			yyl2603 := r.ReadArrayStart()
			if yyl2603 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2603, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2604Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2604Slc
	var yyhl2604 bool = l >= 0
	for yyj2604 := 0; ; yyj2604++ {
		if yyhl2604 {
			if yyj2604 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2604Slc = r.DecodeBytes(yys2604Slc, true, true)
		yys2604 := string(yys2604Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2604 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2607 := &x.ObjectMeta
				yyv2607.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2608 := &x.Spec
				yyv2608.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2609 := &x.Status
				yyv2609.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2604)
		} // end switch yys2604
	} // end for yyj2604
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2610 int
	var yyb2610 bool
	var yyhl2610 bool = l >= 0
	yyj2610++
	if yyhl2610 {
		yyb2610 = yyj2610 > l
	} else {
		yyb2610 = r.CheckBreak()
	}
	if yyb2610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2610++
	if yyhl2610 {
		yyb2610 = yyj2610 > l
	} else {
		yyb2610 = r.CheckBreak()
	}
	if yyb2610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2610++
	if yyhl2610 {
		yyb2610 = yyj2610 > l
	} else {
		yyb2610 = r.CheckBreak()
	}
	if yyb2610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2613 := &x.ObjectMeta
		yyv2613.CodecDecodeSelf(d)
	}
	yyj2610++
	if yyhl2610 {
		yyb2610 = yyj2610 > l
	} else {
		yyb2610 = r.CheckBreak()
	}
	if yyb2610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2614 := &x.Spec
		yyv2614.CodecDecodeSelf(d)
	}
	yyj2610++
	if yyhl2610 {
		yyb2610 = yyj2610 > l
	} else {
		yyb2610 = r.CheckBreak()
	}
	if yyb2610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2615 := &x.Status
		yyv2615.CodecDecodeSelf(d)
	}
	for {
		yyj2610++
		if yyhl2610 {
			yyb2610 = yyj2610 > l
		} else {
			yyb2610 = r.CheckBreak()
		}
		if yyb2610 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2610-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2616 := z.EncBinary()
		_ = yym2616
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2617 := !z.EncBinary()
			yy2arr2617 := z.EncBasicHandle().StructToArray
			var yyq2617 [4]bool
			_, _, _ = yysep2617, yyq2617, yy2arr2617
			const yyr2617 bool = false
			yyq2617[0] = x.Kind != ""
			yyq2617[1] = x.APIVersion != ""
			yyq2617[2] = true
			var yynn2617 int
			if yyr2617 || yy2arr2617 {
				r.EncodeArrayStart(4)
			} else {
				yynn2617 = 1
				for _, b := range yyq2617 {
					if b {
						yynn2617++
					}
				}
				r.EncodeMapStart(yynn2617)
				yynn2617 = 0
			}
			if yyr2617 || yy2arr2617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2617[0] {
					yym2619 := z.EncBinary()
					_ = yym2619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2617[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2620 := z.EncBinary()
					_ = yym2620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2617 || yy2arr2617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2617[1] {
					yym2622 := z.EncBinary()
					_ = yym2622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2617[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2623 := z.EncBinary()
					_ = yym2623
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2617 || yy2arr2617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2617[2] {
					yy2625 := &x.ListMeta
					yym2626 := z.EncBinary()
					_ = yym2626
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2625) {
					} else {
						z.EncFallback(yy2625)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2617[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2627 := &x.ListMeta
					yym2628 := z.EncBinary()
					_ = yym2628
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2627) {
					} else {
						z.EncFallback(yy2627)
					}
				}
			}
			if yyr2617 || yy2arr2617 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2630 := z.EncBinary()
					_ = yym2630
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2631 := z.EncBinary()
					_ = yym2631
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2617 || yy2arr2617 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2632 := z.DecBinary()
	_ = yym2632
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2633 := r.ContainerType()
		if yyct2633 == codecSelferValueTypeMap1234 {
			yyl2633 := r.ReadMapStart()
			if yyl2633 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2633, d)
			}
		} else if yyct2633 == codecSelferValueTypeArray1234 {
			yyl2633 := r.ReadArrayStart()
			if yyl2633 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2633, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2634Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2634Slc
	var yyhl2634 bool = l >= 0
	for yyj2634 := 0; ; yyj2634++ {
		if yyhl2634 {
			if yyj2634 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2634Slc = r.DecodeBytes(yys2634Slc, true, true)
		yys2634 := string(yys2634Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2634 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2637 := &x.ListMeta
				yym2638 := z.DecBinary()
				_ = yym2638
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2637) {
				} else {
					z.DecFallback(yyv2637, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2639 := &x.Items
				yym2640 := z.DecBinary()
				_ = yym2640
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2639), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2634)
		} // end switch yys2634
	} // end for yyj2634
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2641 int
	var yyb2641 bool
	var yyhl2641 bool = l >= 0
	yyj2641++
	if yyhl2641 {
		yyb2641 = yyj2641 > l
	} else {
		yyb2641 = r.CheckBreak()
	}
	if yyb2641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2641++
	if yyhl2641 {
		yyb2641 = yyj2641 > l
	} else {
		yyb2641 = r.CheckBreak()
	}
	if yyb2641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2641++
	if yyhl2641 {
		yyb2641 = yyj2641 > l
	} else {
		yyb2641 = r.CheckBreak()
	}
	if yyb2641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2644 := &x.ListMeta
		yym2645 := z.DecBinary()
		_ = yym2645
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2644) {
		} else {
			z.DecFallback(yyv2644, false)
		}
	}
	yyj2641++
	if yyhl2641 {
		yyb2641 = yyj2641 > l
	} else {
		yyb2641 = r.CheckBreak()
	}
	if yyb2641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2646 := &x.Items
		yym2647 := z.DecBinary()
		_ = yym2647
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2646), d)
		}
	}
	for {
		yyj2641++
		if yyhl2641 {
			yyb2641 = yyj2641 > l
		} else {
			yyb2641 = r.CheckBreak()
		}
		if yyb2641 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2641-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2648 := z.EncBinary()
		_ = yym2648
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2649 := !z.EncBinary()
			yy2arr2649 := z.EncBasicHandle().StructToArray
			var yyq2649 [4]bool
			_, _, _ = yysep2649, yyq2649, yy2arr2649
			const yyr2649 bool = false
			yyq2649[0] = x.Kind != ""
			yyq2649[1] = x.APIVersion != ""
			yyq2649[2] = true
			var yynn2649 int
			if yyr2649 || yy2arr2649 {
				r.EncodeArrayStart(4)
			} else {
				yynn2649 = 1
				for _, b := range yyq2649 {
					if b {
						yynn2649++
					}
				}
				r.EncodeMapStart(yynn2649)
				yynn2649 = 0
			}
			if yyr2649 || yy2arr2649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2649[0] {
					yym2651 := z.EncBinary()
					_ = yym2651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2649[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2652 := z.EncBinary()
					_ = yym2652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2649 || yy2arr2649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2649[1] {
					yym2654 := z.EncBinary()
					_ = yym2654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2649[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2655 := z.EncBinary()
					_ = yym2655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2649 || yy2arr2649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2649[2] {
					yy2657 := &x.ListMeta
					yym2658 := z.EncBinary()
					_ = yym2658
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2657) {
					} else {
						z.EncFallback(yy2657)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2649[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2659 := &x.ListMeta
					yym2660 := z.EncBinary()
					_ = yym2660
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2659) {
					} else {
						z.EncFallback(yy2659)
					}
				}
			}
			if yyr2649 || yy2arr2649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2662 := z.EncBinary()
					_ = yym2662
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2663 := z.EncBinary()
					_ = yym2663
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2649 || yy2arr2649 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2664 := z.DecBinary()
	_ = yym2664
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2665 := r.ContainerType()
		if yyct2665 == codecSelferValueTypeMap1234 {
			yyl2665 := r.ReadMapStart()
			if yyl2665 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2665, d)
			}
		} else if yyct2665 == codecSelferValueTypeArray1234 {
			yyl2665 := r.ReadArrayStart()
			if yyl2665 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2665, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2666Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2666Slc
	var yyhl2666 bool = l >= 0
	for yyj2666 := 0; ; yyj2666++ {
		if yyhl2666 {
			if yyj2666 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2666Slc = r.DecodeBytes(yys2666Slc, true, true)
		yys2666 := string(yys2666Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2666 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2669 := &x.ListMeta
				yym2670 := z.DecBinary()
				_ = yym2670
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2669) {
				} else {
					z.DecFallback(yyv2669, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2671 := &x.Items
				yym2672 := z.DecBinary()
				_ = yym2672
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2671), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2666)
		} // end switch yys2666
	} // end for yyj2666
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2673 int
	var yyb2673 bool
	var yyhl2673 bool = l >= 0
	yyj2673++
	if yyhl2673 {
		yyb2673 = yyj2673 > l
	} else {
		yyb2673 = r.CheckBreak()
	}
	if yyb2673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2673++
	if yyhl2673 {
		yyb2673 = yyj2673 > l
	} else {
		yyb2673 = r.CheckBreak()
	}
	if yyb2673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2673++
	if yyhl2673 {
		yyb2673 = yyj2673 > l
	} else {
		yyb2673 = r.CheckBreak()
	}
	if yyb2673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2676 := &x.ListMeta
		yym2677 := z.DecBinary()
		_ = yym2677
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2676) {
		} else {
			z.DecFallback(yyv2676, false)
		}
	}
	yyj2673++
	if yyhl2673 {
		yyb2673 = yyj2673 > l
	} else {
		yyb2673 = r.CheckBreak()
	}
	if yyb2673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2678 := &x.Items
		yym2679 := z.DecBinary()
		_ = yym2679
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2678), d)
		}
	}
	for {
		yyj2673++
		if yyhl2673 {
			yyb2673 = yyj2673 > l
		} else {
			yyb2673 = r.CheckBreak()
		}
		if yyb2673 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2673-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2680 := z.EncBinary()
	_ = yym2680
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2681 := z.DecBinary()
	_ = yym2681
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2682 := z.EncBinary()
	_ = yym2682
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2683 := z.DecBinary()
	_ = yym2683
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2684 := z.EncBinary()
		_ = yym2684
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2685 := !z.EncBinary()
			yy2arr2685 := z.EncBasicHandle().StructToArray
			var yyq2685 [1]bool
			_, _, _ = yysep2685, yyq2685, yy2arr2685
			const yyr2685 bool = false
			yyq2685[0] = true
			var yynn2685 int
			if yyr2685 || yy2arr2685 {
				r.EncodeArrayStart(1)
			} else {
				yynn2685 = 0
				for _, b := range yyq2685 {
					if b {
						yynn2685++
					}
				}
				r.EncodeMapStart(yynn2685)
				yynn2685 = 0
			}
			if yyr2685 || yy2arr2685 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2685[0] {
					yy2687 := &x.LoadBalancer
					yy2687.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2685[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2688 := &x.LoadBalancer
					yy2688.CodecEncodeSelf(e)
				}
			}
			if yyr2685 || yy2arr2685 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2689 := z.DecBinary()
	_ = yym2689
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2690 := r.ContainerType()
		if yyct2690 == codecSelferValueTypeMap1234 {
			yyl2690 := r.ReadMapStart()
			if yyl2690 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2690, d)
			}
		} else if yyct2690 == codecSelferValueTypeArray1234 {
			yyl2690 := r.ReadArrayStart()
			if yyl2690 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2690, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2691Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2691Slc
	var yyhl2691 bool = l >= 0
	for yyj2691 := 0; ; yyj2691++ {
		if yyhl2691 {
			if yyj2691 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2691Slc = r.DecodeBytes(yys2691Slc, true, true)
		yys2691 := string(yys2691Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2691 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2692 := &x.LoadBalancer
				yyv2692.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2691)
		} // end switch yys2691
	} // end for yyj2691
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2693 int
	var yyb2693 bool
	var yyhl2693 bool = l >= 0
	yyj2693++
	if yyhl2693 {
		yyb2693 = yyj2693 > l
	} else {
		yyb2693 = r.CheckBreak()
	}
	if yyb2693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2694 := &x.LoadBalancer
		yyv2694.CodecDecodeSelf(d)
	}
	for {
		yyj2693++
		if yyhl2693 {
			yyb2693 = yyj2693 > l
		} else {
			yyb2693 = r.CheckBreak()
		}
		if yyb2693 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2693-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2695 := z.EncBinary()
		_ = yym2695
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2696 := !z.EncBinary()
			yy2arr2696 := z.EncBasicHandle().StructToArray
			var yyq2696 [1]bool
			_, _, _ = yysep2696, yyq2696, yy2arr2696
			const yyr2696 bool = false
			yyq2696[0] = len(x.Ingress) != 0
			var yynn2696 int
			if yyr2696 || yy2arr2696 {
				r.EncodeArrayStart(1)
			} else {
				yynn2696 = 0
				for _, b := range yyq2696 {
					if b {
						yynn2696++
					}
				}
				r.EncodeMapStart(yynn2696)
				yynn2696 = 0
			}
			if yyr2696 || yy2arr2696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2696[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2698 := z.EncBinary()
						_ = yym2698
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2696[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2699 := z.EncBinary()
						_ = yym2699
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2696 || yy2arr2696 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2700 := z.DecBinary()
	_ = yym2700
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2701 := r.ContainerType()
		if yyct2701 == codecSelferValueTypeMap1234 {
			yyl2701 := r.ReadMapStart()
			if yyl2701 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2701, d)
			}
		} else if yyct2701 == codecSelferValueTypeArray1234 {
			yyl2701 := r.ReadArrayStart()
			if yyl2701 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2701, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2702Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2702Slc
	var yyhl2702 bool = l >= 0
	for yyj2702 := 0; ; yyj2702++ {
		if yyhl2702 {
			if yyj2702 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2702Slc = r.DecodeBytes(yys2702Slc, true, true)
		yys2702 := string(yys2702Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2702 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2703 := &x.Ingress
				yym2704 := z.DecBinary()
				_ = yym2704
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2703), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2702)
		} // end switch yys2702
	} // end for yyj2702
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2705 int
	var yyb2705 bool
	var yyhl2705 bool = l >= 0
	yyj2705++
	if yyhl2705 {
		yyb2705 = yyj2705 > l
	} else {
		yyb2705 = r.CheckBreak()
	}
	if yyb2705 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2706 := &x.Ingress
		yym2707 := z.DecBinary()
		_ = yym2707
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2706), d)
		}
	}
	for {
		yyj2705++
		if yyhl2705 {
			yyb2705 = yyj2705 > l
		} else {
			yyb2705 = r.CheckBreak()
		}
		if yyb2705 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2705-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2708 := z.EncBinary()
		_ = yym2708
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2709 := !z.EncBinary()
			yy2arr2709 := z.EncBasicHandle().StructToArray
			var yyq2709 [2]bool
			_, _, _ = yysep2709, yyq2709, yy2arr2709
			const yyr2709 bool = false
			yyq2709[0] = x.IP != ""
			yyq2709[1] = x.Hostname != ""
			var yynn2709 int
			if yyr2709 || yy2arr2709 {
				r.EncodeArrayStart(2)
			} else {
				yynn2709 = 0
				for _, b := range yyq2709 {
					if b {
						yynn2709++
					}
				}
				r.EncodeMapStart(yynn2709)
				yynn2709 = 0
			}
			if yyr2709 || yy2arr2709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2709[0] {
					yym2711 := z.EncBinary()
					_ = yym2711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2709[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2712 := z.EncBinary()
					_ = yym2712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2709 || yy2arr2709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2709[1] {
					yym2714 := z.EncBinary()
					_ = yym2714
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2709[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2715 := z.EncBinary()
					_ = yym2715
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2709 || yy2arr2709 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2716 := z.DecBinary()
	_ = yym2716
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2717 := r.ContainerType()
		if yyct2717 == codecSelferValueTypeMap1234 {
			yyl2717 := r.ReadMapStart()
			if yyl2717 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2717, d)
			}
		} else if yyct2717 == codecSelferValueTypeArray1234 {
			yyl2717 := r.ReadArrayStart()
			if yyl2717 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2717, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2718Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2718Slc
	var yyhl2718 bool = l >= 0
	for yyj2718 := 0; ; yyj2718++ {
		if yyhl2718 {
			if yyj2718 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2718Slc = r.DecodeBytes(yys2718Slc, true, true)
		yys2718 := string(yys2718Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2718 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2718)
		} // end switch yys2718
	} // end for yyj2718
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2721 int
	var yyb2721 bool
	var yyhl2721 bool = l >= 0
	yyj2721++
	if yyhl2721 {
		yyb2721 = yyj2721 > l
	} else {
		yyb2721 = r.CheckBreak()
	}
	if yyb2721 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2721++
	if yyhl2721 {
		yyb2721 = yyj2721 > l
	} else {
		yyb2721 = r.CheckBreak()
	}
	if yyb2721 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2721++
		if yyhl2721 {
			yyb2721 = yyj2721 > l
		} else {
			yyb2721 = r.CheckBreak()
		}
		if yyb2721 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2721-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2724 := z.EncBinary()
		_ = yym2724
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2725 := !z.EncBinary()
			yy2arr2725 := z.EncBasicHandle().StructToArray
			var yyq2725 [9]bool
			_, _, _ = yysep2725, yyq2725, yy2arr2725
			const yyr2725 bool = false
			yyq2725[0] = x.Type != ""
			yyq2725[3] = x.ClusterIP != ""
			yyq2725[5] = len(x.ExternalIPs) != 0
			yyq2725[6] = x.LoadBalancerIP != ""
			yyq2725[7] = x.SessionAffinity != ""
			yyq2725[8] = len(x.LoadBalancerSourceRanges) != 0
			var yynn2725 int
			if yyr2725 || yy2arr2725 {
				r.EncodeArrayStart(9)
			} else {
				yynn2725 = 3
				for _, b := range yyq2725 {
					if b {
						yynn2725++
					}
				}
				r.EncodeMapStart(yynn2725)
				yynn2725 = 0
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2725[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2725[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2728 := z.EncBinary()
					_ = yym2728
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2729 := z.EncBinary()
					_ = yym2729
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2731 := z.EncBinary()
					_ = yym2731
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2732 := z.EncBinary()
					_ = yym2732
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2725[3] {
					yym2734 := z.EncBinary()
					_ = yym2734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2725[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2735 := z.EncBinary()
					_ = yym2735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2737 := z.EncBinary()
				_ = yym2737
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ExternalName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2738 := z.EncBinary()
				_ = yym2738
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
				}
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2725[5] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2740 := z.EncBinary()
						_ = yym2740
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2725[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2741 := z.EncBinary()
						_ = yym2741
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2725[6] {
					yym2743 := z.EncBinary()
					_ = yym2743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2725[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2744 := z.EncBinary()
					_ = yym2744
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2725[7] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2725[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2725[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2747 := z.EncBinary()
						_ = yym2747
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2725[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2748 := z.EncBinary()
						_ = yym2748
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2725 || yy2arr2725 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2749 := z.DecBinary()
	_ = yym2749
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2750 := r.ContainerType()
		if yyct2750 == codecSelferValueTypeMap1234 {
			yyl2750 := r.ReadMapStart()
			if yyl2750 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2750, d)
			}
		} else if yyct2750 == codecSelferValueTypeArray1234 {
			yyl2750 := r.ReadArrayStart()
			if yyl2750 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2750, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2751Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2751Slc
	var yyhl2751 bool = l >= 0
	for yyj2751 := 0; ; yyj2751++ {
		if yyhl2751 {
			if yyj2751 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2751Slc = r.DecodeBytes(yys2751Slc, true, true)
		yys2751 := string(yys2751Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2751 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2753 := &x.Ports
				yym2754 := z.DecBinary()
				_ = yym2754
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2753), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2755 := &x.Selector
				yym2756 := z.DecBinary()
				_ = yym2756
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2755, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "ExternalName":
			if r.TryDecodeAsNil() {
				x.ExternalName = ""
			} else {
				x.ExternalName = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2759 := &x.ExternalIPs
				yym2760 := z.DecBinary()
				_ = yym2760
				if false {
				} else {
					z.F.DecSliceStringX(yyv2759, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2763 := &x.LoadBalancerSourceRanges
				yym2764 := z.DecBinary()
				_ = yym2764
				if false {
				} else {
					z.F.DecSliceStringX(yyv2763, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2751)
		} // end switch yys2751
	} // end for yyj2751
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2765 int
	var yyb2765 bool
	var yyhl2765 bool = l >= 0
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2767 := &x.Ports
		yym2768 := z.DecBinary()
		_ = yym2768
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2767), d)
		}
	}
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2769 := &x.Selector
		yym2770 := z.DecBinary()
		_ = yym2770
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2769, false, d)
		}
	}
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalName = ""
	} else {
		x.ExternalName = string(r.DecodeString())
	}
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2773 := &x.ExternalIPs
		yym2774 := z.DecBinary()
		_ = yym2774
		if false {
		} else {
			z.F.DecSliceStringX(yyv2773, false, d)
		}
	}
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2777 := &x.LoadBalancerSourceRanges
		yym2778 := z.DecBinary()
		_ = yym2778
		if false {
		} else {
			z.F.DecSliceStringX(yyv2777, false, d)
		}
	}
	for {
		yyj2765++
		if yyhl2765 {
			yyb2765 = yyj2765 > l
		} else {
			yyb2765 = r.CheckBreak()
		}
		if yyb2765 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2765-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2779 := z.EncBinary()
		_ = yym2779
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2780 := !z.EncBinary()
			yy2arr2780 := z.EncBasicHandle().StructToArray
			var yyq2780 [5]bool
			_, _, _ = yysep2780, yyq2780, yy2arr2780
			const yyr2780 bool = false
			var yynn2780 int
			if yyr2780 || yy2arr2780 {
				r.EncodeArrayStart(5)
			} else {
				yynn2780 = 5
				for _, b := range yyq2780 {
					if b {
						yynn2780++
					}
				}
				r.EncodeMapStart(yynn2780)
				yynn2780 = 0
			}
			if yyr2780 || yy2arr2780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2782 := z.EncBinary()
				_ = yym2782
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2783 := z.EncBinary()
				_ = yym2783
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2780 || yy2arr2780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2780 || yy2arr2780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2786 := z.EncBinary()
				_ = yym2786
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2787 := z.EncBinary()
				_ = yym2787
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2780 || yy2arr2780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2789 := &x.TargetPort
				yym2790 := z.EncBinary()
				_ = yym2790
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2789) {
				} else if !yym2790 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2789)
				} else {
					z.EncFallback(yy2789)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2791 := &x.TargetPort
				yym2792 := z.EncBinary()
				_ = yym2792
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2791) {
				} else if !yym2792 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2791)
				} else {
					z.EncFallback(yy2791)
				}
			}
			if yyr2780 || yy2arr2780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2794 := z.EncBinary()
				_ = yym2794
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2795 := z.EncBinary()
				_ = yym2795
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr2780 || yy2arr2780 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2796 := z.DecBinary()
	_ = yym2796
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2797 := r.ContainerType()
		if yyct2797 == codecSelferValueTypeMap1234 {
			yyl2797 := r.ReadMapStart()
			if yyl2797 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2797, d)
			}
		} else if yyct2797 == codecSelferValueTypeArray1234 {
			yyl2797 := r.ReadArrayStart()
			if yyl2797 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2797, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2798Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2798Slc
	var yyhl2798 bool = l >= 0
	for yyj2798 := 0; ; yyj2798++ {
		if yyhl2798 {
			if yyj2798 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2798Slc = r.DecodeBytes(yys2798Slc, true, true)
		yys2798 := string(yys2798Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2798 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2802 := &x.TargetPort
				yym2803 := z.DecBinary()
				_ = yym2803
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2802) {
				} else if !yym2803 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2802)
				} else {
					z.DecFallback(yyv2802, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2798)
		} // end switch yys2798
	} // end for yyj2798
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2805 int
	var yyb2805 bool
	var yyhl2805 bool = l >= 0
	yyj2805++
	if yyhl2805 {
		yyb2805 = yyj2805 > l
	} else {
		yyb2805 = r.CheckBreak()
	}
	if yyb2805 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2805++
	if yyhl2805 {
		yyb2805 = yyj2805 > l
	} else {
		yyb2805 = r.CheckBreak()
	}
	if yyb2805 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2805++
	if yyhl2805 {
		yyb2805 = yyj2805 > l
	} else {
		yyb2805 = r.CheckBreak()
	}
	if yyb2805 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2805++
	if yyhl2805 {
		yyb2805 = yyj2805 > l
	} else {
		yyb2805 = r.CheckBreak()
	}
	if yyb2805 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2809 := &x.TargetPort
		yym2810 := z.DecBinary()
		_ = yym2810
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2809) {
		} else if !yym2810 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2809)
		} else {
			z.DecFallback(yyv2809, false)
		}
	}
	yyj2805++
	if yyhl2805 {
		yyb2805 = yyj2805 > l
	} else {
		yyb2805 = r.CheckBreak()
	}
	if yyb2805 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2805++
		if yyhl2805 {
			yyb2805 = yyj2805 > l
		} else {
			yyb2805 = r.CheckBreak()
		}
		if yyb2805 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2805-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2812 := z.EncBinary()
		_ = yym2812
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2813 := !z.EncBinary()
			yy2arr2813 := z.EncBasicHandle().StructToArray
			var yyq2813 [5]bool
			_, _, _ = yysep2813, yyq2813, yy2arr2813
			const yyr2813 bool = false
			yyq2813[0] = x.Kind != ""
			yyq2813[1] = x.APIVersion != ""
			yyq2813[2] = true
			yyq2813[3] = true
			yyq2813[4] = true
			var yynn2813 int
			if yyr2813 || yy2arr2813 {
				r.EncodeArrayStart(5)
			} else {
				yynn2813 = 0
				for _, b := range yyq2813 {
					if b {
						yynn2813++
					}
				}
				r.EncodeMapStart(yynn2813)
				yynn2813 = 0
			}
			if yyr2813 || yy2arr2813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2813[0] {
					yym2815 := z.EncBinary()
					_ = yym2815
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2813[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2816 := z.EncBinary()
					_ = yym2816
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2813 || yy2arr2813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2813[1] {
					yym2818 := z.EncBinary()
					_ = yym2818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2813[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2819 := z.EncBinary()
					_ = yym2819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2813 || yy2arr2813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2813[2] {
					yy2821 := &x.ObjectMeta
					yy2821.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2813[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2822 := &x.ObjectMeta
					yy2822.CodecEncodeSelf(e)
				}
			}
			if yyr2813 || yy2arr2813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2813[3] {
					yy2824 := &x.Spec
					yy2824.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2813[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2825 := &x.Spec
					yy2825.CodecEncodeSelf(e)
				}
			}
			if yyr2813 || yy2arr2813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2813[4] {
					yy2827 := &x.Status
					yy2827.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2813[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2828 := &x.Status
					yy2828.CodecEncodeSelf(e)
				}
			}
			if yyr2813 || yy2arr2813 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2829 := z.DecBinary()
	_ = yym2829
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2830 := r.ContainerType()
		if yyct2830 == codecSelferValueTypeMap1234 {
			yyl2830 := r.ReadMapStart()
			if yyl2830 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2830, d)
			}
		} else if yyct2830 == codecSelferValueTypeArray1234 {
			yyl2830 := r.ReadArrayStart()
			if yyl2830 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2830, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2831Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2831Slc
	var yyhl2831 bool = l >= 0
	for yyj2831 := 0; ; yyj2831++ {
		if yyhl2831 {
			if yyj2831 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2831Slc = r.DecodeBytes(yys2831Slc, true, true)
		yys2831 := string(yys2831Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2831 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2834 := &x.ObjectMeta
				yyv2834.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2835 := &x.Spec
				yyv2835.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2836 := &x.Status
				yyv2836.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2831)
		} // end switch yys2831
	} // end for yyj2831
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2837 int
	var yyb2837 bool
	var yyhl2837 bool = l >= 0
	yyj2837++
	if yyhl2837 {
		yyb2837 = yyj2837 > l
	} else {
		yyb2837 = r.CheckBreak()
	}
	if yyb2837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2837++
	if yyhl2837 {
		yyb2837 = yyj2837 > l
	} else {
		yyb2837 = r.CheckBreak()
	}
	if yyb2837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2837++
	if yyhl2837 {
		yyb2837 = yyj2837 > l
	} else {
		yyb2837 = r.CheckBreak()
	}
	if yyb2837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2840 := &x.ObjectMeta
		yyv2840.CodecDecodeSelf(d)
	}
	yyj2837++
	if yyhl2837 {
		yyb2837 = yyj2837 > l
	} else {
		yyb2837 = r.CheckBreak()
	}
	if yyb2837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2841 := &x.Spec
		yyv2841.CodecDecodeSelf(d)
	}
	yyj2837++
	if yyhl2837 {
		yyb2837 = yyj2837 > l
	} else {
		yyb2837 = r.CheckBreak()
	}
	if yyb2837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2842 := &x.Status
		yyv2842.CodecDecodeSelf(d)
	}
	for {
		yyj2837++
		if yyhl2837 {
			yyb2837 = yyj2837 > l
		} else {
			yyb2837 = r.CheckBreak()
		}
		if yyb2837 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2837-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2843 := z.EncBinary()
		_ = yym2843
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2844 := !z.EncBinary()
			yy2arr2844 := z.EncBasicHandle().StructToArray
			var yyq2844 [5]bool
			_, _, _ = yysep2844, yyq2844, yy2arr2844
			const yyr2844 bool = false
			yyq2844[0] = x.Kind != ""
			yyq2844[1] = x.APIVersion != ""
			yyq2844[2] = true
			yyq2844[4] = len(x.ImagePullSecrets) != 0
			var yynn2844 int
			if yyr2844 || yy2arr2844 {
				r.EncodeArrayStart(5)
			} else {
				yynn2844 = 1
				for _, b := range yyq2844 {
					if b {
						yynn2844++
					}
				}
				r.EncodeMapStart(yynn2844)
				yynn2844 = 0
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[0] {
					yym2846 := z.EncBinary()
					_ = yym2846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2844[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2847 := z.EncBinary()
					_ = yym2847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[1] {
					yym2849 := z.EncBinary()
					_ = yym2849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2844[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2850 := z.EncBinary()
					_ = yym2850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[2] {
					yy2852 := &x.ObjectMeta
					yy2852.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2853 := &x.ObjectMeta
					yy2853.CodecEncodeSelf(e)
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2855 := z.EncBinary()
					_ = yym2855
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2856 := z.EncBinary()
					_ = yym2856
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2844[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2858 := z.EncBinary()
						_ = yym2858
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2844[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2859 := z.EncBinary()
						_ = yym2859
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2844 || yy2arr2844 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2860 := z.DecBinary()
	_ = yym2860
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2861 := r.ContainerType()
		if yyct2861 == codecSelferValueTypeMap1234 {
			yyl2861 := r.ReadMapStart()
			if yyl2861 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2861, d)
			}
		} else if yyct2861 == codecSelferValueTypeArray1234 {
			yyl2861 := r.ReadArrayStart()
			if yyl2861 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2861, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2862Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2862Slc
	var yyhl2862 bool = l >= 0
	for yyj2862 := 0; ; yyj2862++ {
		if yyhl2862 {
			if yyj2862 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2862Slc = r.DecodeBytes(yys2862Slc, true, true)
		yys2862 := string(yys2862Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2862 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2865 := &x.ObjectMeta
				yyv2865.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2866 := &x.Secrets
				yym2867 := z.DecBinary()
				_ = yym2867
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2866), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2868 := &x.ImagePullSecrets
				yym2869 := z.DecBinary()
				_ = yym2869
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2868), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2862)
		} // end switch yys2862
	} // end for yyj2862
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2870 int
	var yyb2870 bool
	var yyhl2870 bool = l >= 0
	yyj2870++
	if yyhl2870 {
		yyb2870 = yyj2870 > l
	} else {
		yyb2870 = r.CheckBreak()
	}
	if yyb2870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2870++
	if yyhl2870 {
		yyb2870 = yyj2870 > l
	} else {
		yyb2870 = r.CheckBreak()
	}
	if yyb2870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2870++
	if yyhl2870 {
		yyb2870 = yyj2870 > l
	} else {
		yyb2870 = r.CheckBreak()
	}
	if yyb2870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2873 := &x.ObjectMeta
		yyv2873.CodecDecodeSelf(d)
	}
	yyj2870++
	if yyhl2870 {
		yyb2870 = yyj2870 > l
	} else {
		yyb2870 = r.CheckBreak()
	}
	if yyb2870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2874 := &x.Secrets
		yym2875 := z.DecBinary()
		_ = yym2875
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2874), d)
		}
	}
	yyj2870++
	if yyhl2870 {
		yyb2870 = yyj2870 > l
	} else {
		yyb2870 = r.CheckBreak()
	}
	if yyb2870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2876 := &x.ImagePullSecrets
		yym2877 := z.DecBinary()
		_ = yym2877
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2876), d)
		}
	}
	for {
		yyj2870++
		if yyhl2870 {
			yyb2870 = yyj2870 > l
		} else {
			yyb2870 = r.CheckBreak()
		}
		if yyb2870 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2870-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2878 := z.EncBinary()
		_ = yym2878
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2879 := !z.EncBinary()
			yy2arr2879 := z.EncBasicHandle().StructToArray
			var yyq2879 [4]bool
			_, _, _ = yysep2879, yyq2879, yy2arr2879
			const yyr2879 bool = false
			yyq2879[0] = x.Kind != ""
			yyq2879[1] = x.APIVersion != ""
			yyq2879[2] = true
			var yynn2879 int
			if yyr2879 || yy2arr2879 {
				r.EncodeArrayStart(4)
			} else {
				yynn2879 = 1
				for _, b := range yyq2879 {
					if b {
						yynn2879++
					}
				}
				r.EncodeMapStart(yynn2879)
				yynn2879 = 0
			}
			if yyr2879 || yy2arr2879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2879[0] {
					yym2881 := z.EncBinary()
					_ = yym2881
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2879[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2882 := z.EncBinary()
					_ = yym2882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2879 || yy2arr2879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2879[1] {
					yym2884 := z.EncBinary()
					_ = yym2884
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2879[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2885 := z.EncBinary()
					_ = yym2885
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2879 || yy2arr2879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2879[2] {
					yy2887 := &x.ListMeta
					yym2888 := z.EncBinary()
					_ = yym2888
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2887) {
					} else {
						z.EncFallback(yy2887)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2879[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2889 := &x.ListMeta
					yym2890 := z.EncBinary()
					_ = yym2890
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2889) {
					} else {
						z.EncFallback(yy2889)
					}
				}
			}
			if yyr2879 || yy2arr2879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2892 := z.EncBinary()
					_ = yym2892
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2893 := z.EncBinary()
					_ = yym2893
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2879 || yy2arr2879 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2894 := z.DecBinary()
	_ = yym2894
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2895 := r.ContainerType()
		if yyct2895 == codecSelferValueTypeMap1234 {
			yyl2895 := r.ReadMapStart()
			if yyl2895 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2895, d)
			}
		} else if yyct2895 == codecSelferValueTypeArray1234 {
			yyl2895 := r.ReadArrayStart()
			if yyl2895 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2895, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2896Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2896Slc
	var yyhl2896 bool = l >= 0
	for yyj2896 := 0; ; yyj2896++ {
		if yyhl2896 {
			if yyj2896 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2896Slc = r.DecodeBytes(yys2896Slc, true, true)
		yys2896 := string(yys2896Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2896 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2899 := &x.ListMeta
				yym2900 := z.DecBinary()
				_ = yym2900
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2899) {
				} else {
					z.DecFallback(yyv2899, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2901 := &x.Items
				yym2902 := z.DecBinary()
				_ = yym2902
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2901), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2896)
		} // end switch yys2896
	} // end for yyj2896
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2903 int
	var yyb2903 bool
	var yyhl2903 bool = l >= 0
	yyj2903++
	if yyhl2903 {
		yyb2903 = yyj2903 > l
	} else {
		yyb2903 = r.CheckBreak()
	}
	if yyb2903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2903++
	if yyhl2903 {
		yyb2903 = yyj2903 > l
	} else {
		yyb2903 = r.CheckBreak()
	}
	if yyb2903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2903++
	if yyhl2903 {
		yyb2903 = yyj2903 > l
	} else {
		yyb2903 = r.CheckBreak()
	}
	if yyb2903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2906 := &x.ListMeta
		yym2907 := z.DecBinary()
		_ = yym2907
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2906) {
		} else {
			z.DecFallback(yyv2906, false)
		}
	}
	yyj2903++
	if yyhl2903 {
		yyb2903 = yyj2903 > l
	} else {
		yyb2903 = r.CheckBreak()
	}
	if yyb2903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2908 := &x.Items
		yym2909 := z.DecBinary()
		_ = yym2909
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2908), d)
		}
	}
	for {
		yyj2903++
		if yyhl2903 {
			yyb2903 = yyj2903 > l
		} else {
			yyb2903 = r.CheckBreak()
		}
		if yyb2903 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2903-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2910 := z.EncBinary()
		_ = yym2910
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2911 := !z.EncBinary()
			yy2arr2911 := z.EncBasicHandle().StructToArray
			var yyq2911 [4]bool
			_, _, _ = yysep2911, yyq2911, yy2arr2911
			const yyr2911 bool = false
			yyq2911[0] = x.Kind != ""
			yyq2911[1] = x.APIVersion != ""
			yyq2911[2] = true
			var yynn2911 int
			if yyr2911 || yy2arr2911 {
				r.EncodeArrayStart(4)
			} else {
				yynn2911 = 1
				for _, b := range yyq2911 {
					if b {
						yynn2911++
					}
				}
				r.EncodeMapStart(yynn2911)
				yynn2911 = 0
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2911[0] {
					yym2913 := z.EncBinary()
					_ = yym2913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2911[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2914 := z.EncBinary()
					_ = yym2914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2911[1] {
					yym2916 := z.EncBinary()
					_ = yym2916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2911[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2917 := z.EncBinary()
					_ = yym2917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2911[2] {
					yy2919 := &x.ObjectMeta
					yy2919.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2911[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2920 := &x.ObjectMeta
					yy2920.CodecEncodeSelf(e)
				}
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2922 := z.EncBinary()
					_ = yym2922
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2923 := z.EncBinary()
					_ = yym2923
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2924 := z.DecBinary()
	_ = yym2924
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2925 := r.ContainerType()
		if yyct2925 == codecSelferValueTypeMap1234 {
			yyl2925 := r.ReadMapStart()
			if yyl2925 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2925, d)
			}
		} else if yyct2925 == codecSelferValueTypeArray1234 {
			yyl2925 := r.ReadArrayStart()
			if yyl2925 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2925, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2926Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2926Slc
	var yyhl2926 bool = l >= 0
	for yyj2926 := 0; ; yyj2926++ {
		if yyhl2926 {
			if yyj2926 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2926Slc = r.DecodeBytes(yys2926Slc, true, true)
		yys2926 := string(yys2926Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2926 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2929 := &x.ObjectMeta
				yyv2929.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2930 := &x.Subsets
				yym2931 := z.DecBinary()
				_ = yym2931
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2930), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2926)
		} // end switch yys2926
	} // end for yyj2926
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2932 int
	var yyb2932 bool
	var yyhl2932 bool = l >= 0
	yyj2932++
	if yyhl2932 {
		yyb2932 = yyj2932 > l
	} else {
		yyb2932 = r.CheckBreak()
	}
	if yyb2932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2932++
	if yyhl2932 {
		yyb2932 = yyj2932 > l
	} else {
		yyb2932 = r.CheckBreak()
	}
	if yyb2932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2932++
	if yyhl2932 {
		yyb2932 = yyj2932 > l
	} else {
		yyb2932 = r.CheckBreak()
	}
	if yyb2932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2935 := &x.ObjectMeta
		yyv2935.CodecDecodeSelf(d)
	}
	yyj2932++
	if yyhl2932 {
		yyb2932 = yyj2932 > l
	} else {
		yyb2932 = r.CheckBreak()
	}
	if yyb2932 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2936 := &x.Subsets
		yym2937 := z.DecBinary()
		_ = yym2937
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2936), d)
		}
	}
	for {
		yyj2932++
		if yyhl2932 {
			yyb2932 = yyj2932 > l
		} else {
			yyb2932 = r.CheckBreak()
		}
		if yyb2932 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2932-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2938 := z.EncBinary()
		_ = yym2938
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2939 := !z.EncBinary()
			yy2arr2939 := z.EncBasicHandle().StructToArray
			var yyq2939 [3]bool
			_, _, _ = yysep2939, yyq2939, yy2arr2939
			const yyr2939 bool = false
			var yynn2939 int
			if yyr2939 || yy2arr2939 {
				r.EncodeArrayStart(3)
			} else {
				yynn2939 = 3
				for _, b := range yyq2939 {
					if b {
						yynn2939++
					}
				}
				r.EncodeMapStart(yynn2939)
				yynn2939 = 0
			}
			if yyr2939 || yy2arr2939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2941 := z.EncBinary()
					_ = yym2941
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2942 := z.EncBinary()
					_ = yym2942
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2939 || yy2arr2939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2944 := z.EncBinary()
					_ = yym2944
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2945 := z.EncBinary()
					_ = yym2945
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2939 || yy2arr2939 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2947 := z.EncBinary()
					_ = yym2947
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2948 := z.EncBinary()
					_ = yym2948
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2939 || yy2arr2939 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2949 := z.DecBinary()
	_ = yym2949
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2950 := r.ContainerType()
		if yyct2950 == codecSelferValueTypeMap1234 {
			yyl2950 := r.ReadMapStart()
			if yyl2950 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2950, d)
			}
		} else if yyct2950 == codecSelferValueTypeArray1234 {
			yyl2950 := r.ReadArrayStart()
			if yyl2950 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2950, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2951Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2951Slc
	var yyhl2951 bool = l >= 0
	for yyj2951 := 0; ; yyj2951++ {
		if yyhl2951 {
			if yyj2951 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2951Slc = r.DecodeBytes(yys2951Slc, true, true)
		yys2951 := string(yys2951Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2951 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2952 := &x.Addresses
				yym2953 := z.DecBinary()
				_ = yym2953
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2952), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2954 := &x.NotReadyAddresses
				yym2955 := z.DecBinary()
				_ = yym2955
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2954), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2956 := &x.Ports
				yym2957 := z.DecBinary()
				_ = yym2957
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2956), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2951)
		} // end switch yys2951
	} // end for yyj2951
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2958 int
	var yyb2958 bool
	var yyhl2958 bool = l >= 0
	yyj2958++
	if yyhl2958 {
		yyb2958 = yyj2958 > l
	} else {
		yyb2958 = r.CheckBreak()
	}
	if yyb2958 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2959 := &x.Addresses
		yym2960 := z.DecBinary()
		_ = yym2960
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2959), d)
		}
	}
	yyj2958++
	if yyhl2958 {
		yyb2958 = yyj2958 > l
	} else {
		yyb2958 = r.CheckBreak()
	}
	if yyb2958 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2961 := &x.NotReadyAddresses
		yym2962 := z.DecBinary()
		_ = yym2962
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2961), d)
		}
	}
	yyj2958++
	if yyhl2958 {
		yyb2958 = yyj2958 > l
	} else {
		yyb2958 = r.CheckBreak()
	}
	if yyb2958 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2963 := &x.Ports
		yym2964 := z.DecBinary()
		_ = yym2964
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2963), d)
		}
	}
	for {
		yyj2958++
		if yyhl2958 {
			yyb2958 = yyj2958 > l
		} else {
			yyb2958 = r.CheckBreak()
		}
		if yyb2958 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2958-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2965 := z.EncBinary()
		_ = yym2965
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2966 := !z.EncBinary()
			yy2arr2966 := z.EncBasicHandle().StructToArray
			var yyq2966 [4]bool
			_, _, _ = yysep2966, yyq2966, yy2arr2966
			const yyr2966 bool = false
			yyq2966[1] = x.Hostname != ""
			yyq2966[2] = x.NodeName != nil
			var yynn2966 int
			if yyr2966 || yy2arr2966 {
				r.EncodeArrayStart(4)
			} else {
				yynn2966 = 2
				for _, b := range yyq2966 {
					if b {
						yynn2966++
					}
				}
				r.EncodeMapStart(yynn2966)
				yynn2966 = 0
			}
			if yyr2966 || yy2arr2966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2968 := z.EncBinary()
				_ = yym2968
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2969 := z.EncBinary()
				_ = yym2969
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2966 || yy2arr2966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2966[1] {
					yym2971 := z.EncBinary()
					_ = yym2971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2966[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2972 := z.EncBinary()
					_ = yym2972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2966 || yy2arr2966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2966[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2974 := *x.NodeName
						yym2975 := z.EncBinary()
						_ = yym2975
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2974))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2966[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2976 := *x.NodeName
						yym2977 := z.EncBinary()
						_ = yym2977
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2976))
						}
					}
				}
			}
			if yyr2966 || yy2arr2966 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2966 || yy2arr2966 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2979 := z.DecBinary()
	_ = yym2979
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2980 := r.ContainerType()
		if yyct2980 == codecSelferValueTypeMap1234 {
			yyl2980 := r.ReadMapStart()
			if yyl2980 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2980, d)
			}
		} else if yyct2980 == codecSelferValueTypeArray1234 {
			yyl2980 := r.ReadArrayStart()
			if yyl2980 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2980, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2981Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2981Slc
	var yyhl2981 bool = l >= 0
	for yyj2981 := 0; ; yyj2981++ {
		if yyhl2981 {
			if yyj2981 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2981Slc = r.DecodeBytes(yys2981Slc, true, true)
		yys2981 := string(yys2981Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2981 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2985 := z.DecBinary()
				_ = yym2985
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2981)
		} // end switch yys2981
	} // end for yyj2981
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2987 int
	var yyb2987 bool
	var yyhl2987 bool = l >= 0
	yyj2987++
	if yyhl2987 {
		yyb2987 = yyj2987 > l
	} else {
		yyb2987 = r.CheckBreak()
	}
	if yyb2987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2987++
	if yyhl2987 {
		yyb2987 = yyj2987 > l
	} else {
		yyb2987 = r.CheckBreak()
	}
	if yyb2987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2987++
	if yyhl2987 {
		yyb2987 = yyj2987 > l
	} else {
		yyb2987 = r.CheckBreak()
	}
	if yyb2987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2991 := z.DecBinary()
		_ = yym2991
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2987++
	if yyhl2987 {
		yyb2987 = yyj2987 > l
	} else {
		yyb2987 = r.CheckBreak()
	}
	if yyb2987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2987++
		if yyhl2987 {
			yyb2987 = yyj2987 > l
		} else {
			yyb2987 = r.CheckBreak()
		}
		if yyb2987 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2987-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2993 := z.EncBinary()
		_ = yym2993
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2994 := !z.EncBinary()
			yy2arr2994 := z.EncBasicHandle().StructToArray
			var yyq2994 [3]bool
			_, _, _ = yysep2994, yyq2994, yy2arr2994
			const yyr2994 bool = false
			var yynn2994 int
			if yyr2994 || yy2arr2994 {
				r.EncodeArrayStart(3)
			} else {
				yynn2994 = 3
				for _, b := range yyq2994 {
					if b {
						yynn2994++
					}
				}
				r.EncodeMapStart(yynn2994)
				yynn2994 = 0
			}
			if yyr2994 || yy2arr2994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2996 := z.EncBinary()
				_ = yym2996
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2997 := z.EncBinary()
				_ = yym2997
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2994 || yy2arr2994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2999 := z.EncBinary()
				_ = yym2999
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3000 := z.EncBinary()
				_ = yym3000
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2994 || yy2arr2994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2994 || yy2arr2994 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3002 := z.DecBinary()
	_ = yym3002
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3003 := r.ContainerType()
		if yyct3003 == codecSelferValueTypeMap1234 {
			yyl3003 := r.ReadMapStart()
			if yyl3003 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3003, d)
			}
		} else if yyct3003 == codecSelferValueTypeArray1234 {
			yyl3003 := r.ReadArrayStart()
			if yyl3003 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3003, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3004Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3004Slc
	var yyhl3004 bool = l >= 0
	for yyj3004 := 0; ; yyj3004++ {
		if yyhl3004 {
			if yyj3004 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3004Slc = r.DecodeBytes(yys3004Slc, true, true)
		yys3004 := string(yys3004Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3004 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3004)
		} // end switch yys3004
	} // end for yyj3004
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3008 int
	var yyb3008 bool
	var yyhl3008 bool = l >= 0
	yyj3008++
	if yyhl3008 {
		yyb3008 = yyj3008 > l
	} else {
		yyb3008 = r.CheckBreak()
	}
	if yyb3008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3008++
	if yyhl3008 {
		yyb3008 = yyj3008 > l
	} else {
		yyb3008 = r.CheckBreak()
	}
	if yyb3008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj3008++
	if yyhl3008 {
		yyb3008 = yyj3008 > l
	} else {
		yyb3008 = r.CheckBreak()
	}
	if yyb3008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj3008++
		if yyhl3008 {
			yyb3008 = yyj3008 > l
		} else {
			yyb3008 = r.CheckBreak()
		}
		if yyb3008 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3008-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3012 := z.EncBinary()
		_ = yym3012
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3013 := !z.EncBinary()
			yy2arr3013 := z.EncBasicHandle().StructToArray
			var yyq3013 [4]bool
			_, _, _ = yysep3013, yyq3013, yy2arr3013
			const yyr3013 bool = false
			yyq3013[0] = x.Kind != ""
			yyq3013[1] = x.APIVersion != ""
			yyq3013[2] = true
			var yynn3013 int
			if yyr3013 || yy2arr3013 {
				r.EncodeArrayStart(4)
			} else {
				yynn3013 = 1
				for _, b := range yyq3013 {
					if b {
						yynn3013++
					}
				}
				r.EncodeMapStart(yynn3013)
				yynn3013 = 0
			}
			if yyr3013 || yy2arr3013 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3013[0] {
					yym3015 := z.EncBinary()
					_ = yym3015
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3013[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3016 := z.EncBinary()
					_ = yym3016
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3013 || yy2arr3013 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3013[1] {
					yym3018 := z.EncBinary()
					_ = yym3018
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3013[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3019 := z.EncBinary()
					_ = yym3019
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3013 || yy2arr3013 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3013[2] {
					yy3021 := &x.ListMeta
					yym3022 := z.EncBinary()
					_ = yym3022
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3021) {
					} else {
						z.EncFallback(yy3021)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3013[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3023 := &x.ListMeta
					yym3024 := z.EncBinary()
					_ = yym3024
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3023) {
					} else {
						z.EncFallback(yy3023)
					}
				}
			}
			if yyr3013 || yy2arr3013 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3026 := z.EncBinary()
					_ = yym3026
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3027 := z.EncBinary()
					_ = yym3027
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr3013 || yy2arr3013 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3028 := z.DecBinary()
	_ = yym3028
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3029 := r.ContainerType()
		if yyct3029 == codecSelferValueTypeMap1234 {
			yyl3029 := r.ReadMapStart()
			if yyl3029 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3029, d)
			}
		} else if yyct3029 == codecSelferValueTypeArray1234 {
			yyl3029 := r.ReadArrayStart()
			if yyl3029 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3029, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3030Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3030Slc
	var yyhl3030 bool = l >= 0
	for yyj3030 := 0; ; yyj3030++ {
		if yyhl3030 {
			if yyj3030 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3030Slc = r.DecodeBytes(yys3030Slc, true, true)
		yys3030 := string(yys3030Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3030 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3033 := &x.ListMeta
				yym3034 := z.DecBinary()
				_ = yym3034
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3033) {
				} else {
					z.DecFallback(yyv3033, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3035 := &x.Items
				yym3036 := z.DecBinary()
				_ = yym3036
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv3035), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3030)
		} // end switch yys3030
	} // end for yyj3030
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3037 int
	var yyb3037 bool
	var yyhl3037 bool = l >= 0
	yyj3037++
	if yyhl3037 {
		yyb3037 = yyj3037 > l
	} else {
		yyb3037 = r.CheckBreak()
	}
	if yyb3037 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3037++
	if yyhl3037 {
		yyb3037 = yyj3037 > l
	} else {
		yyb3037 = r.CheckBreak()
	}
	if yyb3037 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3037++
	if yyhl3037 {
		yyb3037 = yyj3037 > l
	} else {
		yyb3037 = r.CheckBreak()
	}
	if yyb3037 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3040 := &x.ListMeta
		yym3041 := z.DecBinary()
		_ = yym3041
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3040) {
		} else {
			z.DecFallback(yyv3040, false)
		}
	}
	yyj3037++
	if yyhl3037 {
		yyb3037 = yyj3037 > l
	} else {
		yyb3037 = r.CheckBreak()
	}
	if yyb3037 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3042 := &x.Items
		yym3043 := z.DecBinary()
		_ = yym3043
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv3042), d)
		}
	}
	for {
		yyj3037++
		if yyhl3037 {
			yyb3037 = yyj3037 > l
		} else {
			yyb3037 = r.CheckBreak()
		}
		if yyb3037 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3037-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3044 := z.EncBinary()
		_ = yym3044
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3045 := !z.EncBinary()
			yy2arr3045 := z.EncBasicHandle().StructToArray
			var yyq3045 [4]bool
			_, _, _ = yysep3045, yyq3045, yy2arr3045
			const yyr3045 bool = false
			yyq3045[0] = x.PodCIDR != ""
			yyq3045[1] = x.ExternalID != ""
			yyq3045[2] = x.ProviderID != ""
			yyq3045[3] = x.Unschedulable != false
			var yynn3045 int
			if yyr3045 || yy2arr3045 {
				r.EncodeArrayStart(4)
			} else {
				yynn3045 = 0
				for _, b := range yyq3045 {
					if b {
						yynn3045++
					}
				}
				r.EncodeMapStart(yynn3045)
				yynn3045 = 0
			}
			if yyr3045 || yy2arr3045 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3045[0] {
					yym3047 := z.EncBinary()
					_ = yym3047
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3045[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3048 := z.EncBinary()
					_ = yym3048
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr3045 || yy2arr3045 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3045[1] {
					yym3050 := z.EncBinary()
					_ = yym3050
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3045[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3051 := z.EncBinary()
					_ = yym3051
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr3045 || yy2arr3045 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3045[2] {
					yym3053 := z.EncBinary()
					_ = yym3053
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3045[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3054 := z.EncBinary()
					_ = yym3054
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr3045 || yy2arr3045 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3045[3] {
					yym3056 := z.EncBinary()
					_ = yym3056
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3045[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3057 := z.EncBinary()
					_ = yym3057
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr3045 || yy2arr3045 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3058 := z.DecBinary()
	_ = yym3058
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3059 := r.ContainerType()
		if yyct3059 == codecSelferValueTypeMap1234 {
			yyl3059 := r.ReadMapStart()
			if yyl3059 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3059, d)
			}
		} else if yyct3059 == codecSelferValueTypeArray1234 {
			yyl3059 := r.ReadArrayStart()
			if yyl3059 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3059, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3060Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3060Slc
	var yyhl3060 bool = l >= 0
	for yyj3060 := 0; ; yyj3060++ {
		if yyhl3060 {
			if yyj3060 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3060Slc = r.DecodeBytes(yys3060Slc, true, true)
		yys3060 := string(yys3060Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3060 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3060)
		} // end switch yys3060
	} // end for yyj3060
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3065 int
	var yyb3065 bool
	var yyhl3065 bool = l >= 0
	yyj3065++
	if yyhl3065 {
		yyb3065 = yyj3065 > l
	} else {
		yyb3065 = r.CheckBreak()
	}
	if yyb3065 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj3065++
	if yyhl3065 {
		yyb3065 = yyj3065 > l
	} else {
		yyb3065 = r.CheckBreak()
	}
	if yyb3065 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj3065++
	if yyhl3065 {
		yyb3065 = yyj3065 > l
	} else {
		yyb3065 = r.CheckBreak()
	}
	if yyb3065 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj3065++
	if yyhl3065 {
		yyb3065 = yyj3065 > l
	} else {
		yyb3065 = r.CheckBreak()
	}
	if yyb3065 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj3065++
		if yyhl3065 {
			yyb3065 = yyj3065 > l
		} else {
			yyb3065 = r.CheckBreak()
		}
		if yyb3065 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3065-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3070 := z.EncBinary()
		_ = yym3070
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3071 := !z.EncBinary()
			yy2arr3071 := z.EncBasicHandle().StructToArray
			var yyq3071 [1]bool
			_, _, _ = yysep3071, yyq3071, yy2arr3071
			const yyr3071 bool = false
			var yynn3071 int
			if yyr3071 || yy2arr3071 {
				r.EncodeArrayStart(1)
			} else {
				yynn3071 = 1
				for _, b := range yyq3071 {
					if b {
						yynn3071++
					}
				}
				r.EncodeMapStart(yynn3071)
				yynn3071 = 0
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3073 := z.EncBinary()
				_ = yym3073
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3074 := z.EncBinary()
				_ = yym3074
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr3071 || yy2arr3071 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3075 := z.DecBinary()
	_ = yym3075
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3076 := r.ContainerType()
		if yyct3076 == codecSelferValueTypeMap1234 {
			yyl3076 := r.ReadMapStart()
			if yyl3076 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3076, d)
			}
		} else if yyct3076 == codecSelferValueTypeArray1234 {
			yyl3076 := r.ReadArrayStart()
			if yyl3076 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3076, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3077Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3077Slc
	var yyhl3077 bool = l >= 0
	for yyj3077 := 0; ; yyj3077++ {
		if yyhl3077 {
			if yyj3077 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3077Slc = r.DecodeBytes(yys3077Slc, true, true)
		yys3077 := string(yys3077Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3077 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3077)
		} // end switch yys3077
	} // end for yyj3077
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3079 int
	var yyb3079 bool
	var yyhl3079 bool = l >= 0
	yyj3079++
	if yyhl3079 {
		yyb3079 = yyj3079 > l
	} else {
		yyb3079 = r.CheckBreak()
	}
	if yyb3079 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj3079++
		if yyhl3079 {
			yyb3079 = yyj3079 > l
		} else {
			yyb3079 = r.CheckBreak()
		}
		if yyb3079 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3079-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3081 := z.EncBinary()
		_ = yym3081
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3082 := !z.EncBinary()
			yy2arr3082 := z.EncBasicHandle().StructToArray
			var yyq3082 [1]bool
			_, _, _ = yysep3082, yyq3082, yy2arr3082
			const yyr3082 bool = false
			yyq3082[0] = true
			var yynn3082 int
			if yyr3082 || yy2arr3082 {
				r.EncodeArrayStart(1)
			} else {
				yynn3082 = 0
				for _, b := range yyq3082 {
					if b {
						yynn3082++
					}
				}
				r.EncodeMapStart(yynn3082)
				yynn3082 = 0
			}
			if yyr3082 || yy2arr3082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3082[0] {
					yy3084 := &x.KubeletEndpoint
					yy3084.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3082[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3085 := &x.KubeletEndpoint
					yy3085.CodecEncodeSelf(e)
				}
			}
			if yyr3082 || yy2arr3082 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3086 := z.DecBinary()
	_ = yym3086
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3087 := r.ContainerType()
		if yyct3087 == codecSelferValueTypeMap1234 {
			yyl3087 := r.ReadMapStart()
			if yyl3087 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3087, d)
			}
		} else if yyct3087 == codecSelferValueTypeArray1234 {
			yyl3087 := r.ReadArrayStart()
			if yyl3087 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3087, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3088Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3088Slc
	var yyhl3088 bool = l >= 0
	for yyj3088 := 0; ; yyj3088++ {
		if yyhl3088 {
			if yyj3088 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3088Slc = r.DecodeBytes(yys3088Slc, true, true)
		yys3088 := string(yys3088Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3088 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv3089 := &x.KubeletEndpoint
				yyv3089.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3088)
		} // end switch yys3088
	} // end for yyj3088
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3090 int
	var yyb3090 bool
	var yyhl3090 bool = l >= 0
	yyj3090++
	if yyhl3090 {
		yyb3090 = yyj3090 > l
	} else {
		yyb3090 = r.CheckBreak()
	}
	if yyb3090 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv3091 := &x.KubeletEndpoint
		yyv3091.CodecDecodeSelf(d)
	}
	for {
		yyj3090++
		if yyhl3090 {
			yyb3090 = yyj3090 > l
		} else {
			yyb3090 = r.CheckBreak()
		}
		if yyb3090 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3090-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3092 := z.EncBinary()
		_ = yym3092
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3093 := !z.EncBinary()
			yy2arr3093 := z.EncBasicHandle().StructToArray
			var yyq3093 [10]bool
			_, _, _ = yysep3093, yyq3093, yy2arr3093
			const yyr3093 bool = false
			var yynn3093 int
			if yyr3093 || yy2arr3093 {
				r.EncodeArrayStart(10)
			} else {
				yynn3093 = 10
				for _, b := range yyq3093 {
					if b {
						yynn3093++
					}
				}
				r.EncodeMapStart(yynn3093)
				yynn3093 = 0
			}
			if yyr3093 || yy2arr3093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3095 := z.EncBinary()
				_ = yym3095
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3096 := z.EncBinary()
				_ = yym3096
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr3093 || yy2arr3093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3098 := z.EncBinary()
				_ = yym3098
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3099 := z.EncBinary()
				_ = yym3099
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr3093 || yy2arr3093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3101 := z.EncBinary()
				_ = yym3101
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3102 := z.EncBinary()
				_ = yym3102
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr3093 || yy2arr3093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3104 := z.EncBinary()
				_ = yym3104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3105 := z.EncBinary()
				_ = yym3105
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr3093 || yy2arr3093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3107 := z.EncBinary()
				_ = yym3107
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3108 := z.EncBinary()
				_ = yym3108
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr3093 || yy2arr3093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3110 := z.EncBinary()
				_ = yym3110
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3111 := z.EncBinary()
				_ = yym3111
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr3093 || yy2arr3093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3113 := z.EncBinary()
				_ = yym3113
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3114 := z.EncBinary()
				_ = yym3114
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr3093 || yy2arr3093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3116 := z.EncBinary()
				_ = yym3116
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3117 := z.EncBinary()
				_ = yym3117
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr3093 || yy2arr3093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3119 := z.EncBinary()
				_ = yym3119
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3120 := z.EncBinary()
				_ = yym3120
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr3093 || yy2arr3093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3122 := z.EncBinary()
				_ = yym3122
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3123 := z.EncBinary()
				_ = yym3123
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr3093 || yy2arr3093 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3124 := z.DecBinary()
	_ = yym3124
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3125 := r.ContainerType()
		if yyct3125 == codecSelferValueTypeMap1234 {
			yyl3125 := r.ReadMapStart()
			if yyl3125 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3125, d)
			}
		} else if yyct3125 == codecSelferValueTypeArray1234 {
			yyl3125 := r.ReadArrayStart()
			if yyl3125 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3125, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3126Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3126Slc
	var yyhl3126 bool = l >= 0
	for yyj3126 := 0; ; yyj3126++ {
		if yyhl3126 {
			if yyj3126 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3126Slc = r.DecodeBytes(yys3126Slc, true, true)
		yys3126 := string(yys3126Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3126 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3126)
		} // end switch yys3126
	} // end for yyj3126
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3137 int
	var yyb3137 bool
	var yyhl3137 bool = l >= 0
	yyj3137++
	if yyhl3137 {
		yyb3137 = yyj3137 > l
	} else {
		yyb3137 = r.CheckBreak()
	}
	if yyb3137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj3137++
	if yyhl3137 {
		yyb3137 = yyj3137 > l
	} else {
		yyb3137 = r.CheckBreak()
	}
	if yyb3137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj3137++
	if yyhl3137 {
		yyb3137 = yyj3137 > l
	} else {
		yyb3137 = r.CheckBreak()
	}
	if yyb3137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj3137++
	if yyhl3137 {
		yyb3137 = yyj3137 > l
	} else {
		yyb3137 = r.CheckBreak()
	}
	if yyb3137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj3137++
	if yyhl3137 {
		yyb3137 = yyj3137 > l
	} else {
		yyb3137 = r.CheckBreak()
	}
	if yyb3137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj3137++
	if yyhl3137 {
		yyb3137 = yyj3137 > l
	} else {
		yyb3137 = r.CheckBreak()
	}
	if yyb3137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj3137++
	if yyhl3137 {
		yyb3137 = yyj3137 > l
	} else {
		yyb3137 = r.CheckBreak()
	}
	if yyb3137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj3137++
	if yyhl3137 {
		yyb3137 = yyj3137 > l
	} else {
		yyb3137 = r.CheckBreak()
	}
	if yyb3137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj3137++
	if yyhl3137 {
		yyb3137 = yyj3137 > l
	} else {
		yyb3137 = r.CheckBreak()
	}
	if yyb3137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj3137++
	if yyhl3137 {
		yyb3137 = yyj3137 > l
	} else {
		yyb3137 = r.CheckBreak()
	}
	if yyb3137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj3137++
		if yyhl3137 {
			yyb3137 = yyj3137 > l
		} else {
			yyb3137 = r.CheckBreak()
		}
		if yyb3137 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3137-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3148 := z.EncBinary()
		_ = yym3148
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3149 := !z.EncBinary()
			yy2arr3149 := z.EncBasicHandle().StructToArray
			var yyq3149 [10]bool
			_, _, _ = yysep3149, yyq3149, yy2arr3149
			const yyr3149 bool = false
			yyq3149[0] = len(x.Capacity) != 0
			yyq3149[1] = len(x.Allocatable) != 0
			yyq3149[2] = x.Phase != ""
			yyq3149[3] = len(x.Conditions) != 0
			yyq3149[4] = len(x.Addresses) != 0
			yyq3149[5] = true
			yyq3149[6] = true
			yyq3149[7] = len(x.Images) != 0
			yyq3149[8] = len(x.VolumesInUse) != 0
			yyq3149[9] = len(x.VolumesAttached) != 0
			var yynn3149 int
			if yyr3149 || yy2arr3149 {
				r.EncodeArrayStart(10)
			} else {
				yynn3149 = 0
				for _, b := range yyq3149 {
					if b {
						yynn3149++
					}
				}
				r.EncodeMapStart(yynn3149)
				yynn3149 = 0
			}
			if yyr3149 || yy2arr3149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3149[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3149[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3149 || yy2arr3149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3149[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3149[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3149 || yy2arr3149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3149[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3149[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3149 || yy2arr3149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3149[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3154 := z.EncBinary()
						_ = yym3154
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3149[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3155 := z.EncBinary()
						_ = yym3155
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3149 || yy2arr3149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3149[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3157 := z.EncBinary()
						_ = yym3157
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3149[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3158 := z.EncBinary()
						_ = yym3158
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr3149 || yy2arr3149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3149[5] {
					yy3160 := &x.DaemonEndpoints
					yy3160.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3149[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3161 := &x.DaemonEndpoints
					yy3161.CodecEncodeSelf(e)
				}
			}
			if yyr3149 || yy2arr3149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3149[6] {
					yy3163 := &x.NodeInfo
					yy3163.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3149[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3164 := &x.NodeInfo
					yy3164.CodecEncodeSelf(e)
				}
			}
			if yyr3149 || yy2arr3149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3149[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3166 := z.EncBinary()
						_ = yym3166
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3149[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3167 := z.EncBinary()
						_ = yym3167
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr3149 || yy2arr3149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3149[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3169 := z.EncBinary()
						_ = yym3169
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3149[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3170 := z.EncBinary()
						_ = yym3170
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr3149 || yy2arr3149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3149[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3172 := z.EncBinary()
						_ = yym3172
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3149[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3173 := z.EncBinary()
						_ = yym3173
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr3149 || yy2arr3149 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3174 := z.DecBinary()
	_ = yym3174
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3175 := r.ContainerType()
		if yyct3175 == codecSelferValueTypeMap1234 {
			yyl3175 := r.ReadMapStart()
			if yyl3175 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3175, d)
			}
		} else if yyct3175 == codecSelferValueTypeArray1234 {
			yyl3175 := r.ReadArrayStart()
			if yyl3175 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3175, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3176Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3176Slc
	var yyhl3176 bool = l >= 0
	for yyj3176 := 0; ; yyj3176++ {
		if yyhl3176 {
			if yyj3176 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3176Slc = r.DecodeBytes(yys3176Slc, true, true)
		yys3176 := string(yys3176Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3176 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3177 := &x.Capacity
				yyv3177.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv3178 := &x.Allocatable
				yyv3178.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3180 := &x.Conditions
				yym3181 := z.DecBinary()
				_ = yym3181
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv3180), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv3182 := &x.Addresses
				yym3183 := z.DecBinary()
				_ = yym3183
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv3182), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv3184 := &x.DaemonEndpoints
				yyv3184.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv3185 := &x.NodeInfo
				yyv3185.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv3186 := &x.Images
				yym3187 := z.DecBinary()
				_ = yym3187
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv3186), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv3188 := &x.VolumesInUse
				yym3189 := z.DecBinary()
				_ = yym3189
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3188), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv3190 := &x.VolumesAttached
				yym3191 := z.DecBinary()
				_ = yym3191
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3190), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3176)
		} // end switch yys3176
	} // end for yyj3176
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3192 int
	var yyb3192 bool
	var yyhl3192 bool = l >= 0
	yyj3192++
	if yyhl3192 {
		yyb3192 = yyj3192 > l
	} else {
		yyb3192 = r.CheckBreak()
	}
	if yyb3192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3193 := &x.Capacity
		yyv3193.CodecDecodeSelf(d)
	}
	yyj3192++
	if yyhl3192 {
		yyb3192 = yyj3192 > l
	} else {
		yyb3192 = r.CheckBreak()
	}
	if yyb3192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv3194 := &x.Allocatable
		yyv3194.CodecDecodeSelf(d)
	}
	yyj3192++
	if yyhl3192 {
		yyb3192 = yyj3192 > l
	} else {
		yyb3192 = r.CheckBreak()
	}
	if yyb3192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj3192++
	if yyhl3192 {
		yyb3192 = yyj3192 > l
	} else {
		yyb3192 = r.CheckBreak()
	}
	if yyb3192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3196 := &x.Conditions
		yym3197 := z.DecBinary()
		_ = yym3197
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv3196), d)
		}
	}
	yyj3192++
	if yyhl3192 {
		yyb3192 = yyj3192 > l
	} else {
		yyb3192 = r.CheckBreak()
	}
	if yyb3192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv3198 := &x.Addresses
		yym3199 := z.DecBinary()
		_ = yym3199
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv3198), d)
		}
	}
	yyj3192++
	if yyhl3192 {
		yyb3192 = yyj3192 > l
	} else {
		yyb3192 = r.CheckBreak()
	}
	if yyb3192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv3200 := &x.DaemonEndpoints
		yyv3200.CodecDecodeSelf(d)
	}
	yyj3192++
	if yyhl3192 {
		yyb3192 = yyj3192 > l
	} else {
		yyb3192 = r.CheckBreak()
	}
	if yyb3192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv3201 := &x.NodeInfo
		yyv3201.CodecDecodeSelf(d)
	}
	yyj3192++
	if yyhl3192 {
		yyb3192 = yyj3192 > l
	} else {
		yyb3192 = r.CheckBreak()
	}
	if yyb3192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv3202 := &x.Images
		yym3203 := z.DecBinary()
		_ = yym3203
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv3202), d)
		}
	}
	yyj3192++
	if yyhl3192 {
		yyb3192 = yyj3192 > l
	} else {
		yyb3192 = r.CheckBreak()
	}
	if yyb3192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv3204 := &x.VolumesInUse
		yym3205 := z.DecBinary()
		_ = yym3205
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3204), d)
		}
	}
	yyj3192++
	if yyhl3192 {
		yyb3192 = yyj3192 > l
	} else {
		yyb3192 = r.CheckBreak()
	}
	if yyb3192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv3206 := &x.VolumesAttached
		yym3207 := z.DecBinary()
		_ = yym3207
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3206), d)
		}
	}
	for {
		yyj3192++
		if yyhl3192 {
			yyb3192 = yyj3192 > l
		} else {
			yyb3192 = r.CheckBreak()
		}
		if yyb3192 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3192-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3208 := z.EncBinary()
	_ = yym3208
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3209 := z.DecBinary()
	_ = yym3209
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3210 := z.EncBinary()
		_ = yym3210
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3211 := !z.EncBinary()
			yy2arr3211 := z.EncBasicHandle().StructToArray
			var yyq3211 [2]bool
			_, _, _ = yysep3211, yyq3211, yy2arr3211
			const yyr3211 bool = false
			var yynn3211 int
			if yyr3211 || yy2arr3211 {
				r.EncodeArrayStart(2)
			} else {
				yynn3211 = 2
				for _, b := range yyq3211 {
					if b {
						yynn3211++
					}
				}
				r.EncodeMapStart(yynn3211)
				yynn3211 = 0
			}
			if yyr3211 || yy2arr3211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr3211 || yy2arr3211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3214 := z.EncBinary()
				_ = yym3214
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3215 := z.EncBinary()
				_ = yym3215
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr3211 || yy2arr3211 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3216 := z.DecBinary()
	_ = yym3216
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3217 := r.ContainerType()
		if yyct3217 == codecSelferValueTypeMap1234 {
			yyl3217 := r.ReadMapStart()
			if yyl3217 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3217, d)
			}
		} else if yyct3217 == codecSelferValueTypeArray1234 {
			yyl3217 := r.ReadArrayStart()
			if yyl3217 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3217, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3218Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3218Slc
	var yyhl3218 bool = l >= 0
	for yyj3218 := 0; ; yyj3218++ {
		if yyhl3218 {
			if yyj3218 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3218Slc = r.DecodeBytes(yys3218Slc, true, true)
		yys3218 := string(yys3218Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3218 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3218)
		} // end switch yys3218
	} // end for yyj3218
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3221 int
	var yyb3221 bool
	var yyhl3221 bool = l >= 0
	yyj3221++
	if yyhl3221 {
		yyb3221 = yyj3221 > l
	} else {
		yyb3221 = r.CheckBreak()
	}
	if yyb3221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj3221++
	if yyhl3221 {
		yyb3221 = yyj3221 > l
	} else {
		yyb3221 = r.CheckBreak()
	}
	if yyb3221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj3221++
		if yyhl3221 {
			yyb3221 = yyj3221 > l
		} else {
			yyb3221 = r.CheckBreak()
		}
		if yyb3221 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3221-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3224 := z.EncBinary()
		_ = yym3224
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3225 := !z.EncBinary()
			yy2arr3225 := z.EncBasicHandle().StructToArray
			var yyq3225 [1]bool
			_, _, _ = yysep3225, yyq3225, yy2arr3225
			const yyr3225 bool = false
			yyq3225[0] = len(x.PreferAvoidPods) != 0
			var yynn3225 int
			if yyr3225 || yy2arr3225 {
				r.EncodeArrayStart(1)
			} else {
				yynn3225 = 0
				for _, b := range yyq3225 {
					if b {
						yynn3225++
					}
				}
				r.EncodeMapStart(yynn3225)
				yynn3225 = 0
			}
			if yyr3225 || yy2arr3225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3225[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3227 := z.EncBinary()
						_ = yym3227
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3225[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3228 := z.EncBinary()
						_ = yym3228
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr3225 || yy2arr3225 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3229 := z.DecBinary()
	_ = yym3229
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3230 := r.ContainerType()
		if yyct3230 == codecSelferValueTypeMap1234 {
			yyl3230 := r.ReadMapStart()
			if yyl3230 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3230, d)
			}
		} else if yyct3230 == codecSelferValueTypeArray1234 {
			yyl3230 := r.ReadArrayStart()
			if yyl3230 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3230, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3231Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3231Slc
	var yyhl3231 bool = l >= 0
	for yyj3231 := 0; ; yyj3231++ {
		if yyhl3231 {
			if yyj3231 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3231Slc = r.DecodeBytes(yys3231Slc, true, true)
		yys3231 := string(yys3231Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3231 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv3232 := &x.PreferAvoidPods
				yym3233 := z.DecBinary()
				_ = yym3233
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3232), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3231)
		} // end switch yys3231
	} // end for yyj3231
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3234 int
	var yyb3234 bool
	var yyhl3234 bool = l >= 0
	yyj3234++
	if yyhl3234 {
		yyb3234 = yyj3234 > l
	} else {
		yyb3234 = r.CheckBreak()
	}
	if yyb3234 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv3235 := &x.PreferAvoidPods
		yym3236 := z.DecBinary()
		_ = yym3236
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3235), d)
		}
	}
	for {
		yyj3234++
		if yyhl3234 {
			yyb3234 = yyj3234 > l
		} else {
			yyb3234 = r.CheckBreak()
		}
		if yyb3234 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3234-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3237 := z.EncBinary()
		_ = yym3237
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3238 := !z.EncBinary()
			yy2arr3238 := z.EncBasicHandle().StructToArray
			var yyq3238 [4]bool
			_, _, _ = yysep3238, yyq3238, yy2arr3238
			const yyr3238 bool = false
			yyq3238[1] = true
			yyq3238[2] = x.Reason != ""
			yyq3238[3] = x.Message != ""
			var yynn3238 int
			if yyr3238 || yy2arr3238 {
				r.EncodeArrayStart(4)
			} else {
				yynn3238 = 1
				for _, b := range yyq3238 {
					if b {
						yynn3238++
					}
				}
				r.EncodeMapStart(yynn3238)
				yynn3238 = 0
			}
			if yyr3238 || yy2arr3238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3240 := &x.PodSignature
				yy3240.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3241 := &x.PodSignature
				yy3241.CodecEncodeSelf(e)
			}
			if yyr3238 || yy2arr3238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3238[1] {
					yy3243 := &x.EvictionTime
					yym3244 := z.EncBinary()
					_ = yym3244
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3243) {
					} else if yym3244 {
						z.EncBinaryMarshal(yy3243)
					} else if !yym3244 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3243)
					} else {
						z.EncFallback(yy3243)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3238[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3245 := &x.EvictionTime
					yym3246 := z.EncBinary()
					_ = yym3246
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3245) {
					} else if yym3246 {
						z.EncBinaryMarshal(yy3245)
					} else if !yym3246 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3245)
					} else {
						z.EncFallback(yy3245)
					}
				}
			}
			if yyr3238 || yy2arr3238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3238[2] {
					yym3248 := z.EncBinary()
					_ = yym3248
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3238[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3249 := z.EncBinary()
					_ = yym3249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3238 || yy2arr3238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3238[3] {
					yym3251 := z.EncBinary()
					_ = yym3251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3238[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3252 := z.EncBinary()
					_ = yym3252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3238 || yy2arr3238 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3253 := z.DecBinary()
	_ = yym3253
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3254 := r.ContainerType()
		if yyct3254 == codecSelferValueTypeMap1234 {
			yyl3254 := r.ReadMapStart()
			if yyl3254 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3254, d)
			}
		} else if yyct3254 == codecSelferValueTypeArray1234 {
			yyl3254 := r.ReadArrayStart()
			if yyl3254 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3254, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3255Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3255Slc
	var yyhl3255 bool = l >= 0
	for yyj3255 := 0; ; yyj3255++ {
		if yyhl3255 {
			if yyj3255 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3255Slc = r.DecodeBytes(yys3255Slc, true, true)
		yys3255 := string(yys3255Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3255 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv3256 := &x.PodSignature
				yyv3256.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv3257 := &x.EvictionTime
				yym3258 := z.DecBinary()
				_ = yym3258
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3257) {
				} else if yym3258 {
					z.DecBinaryUnmarshal(yyv3257)
				} else if !yym3258 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3257)
				} else {
					z.DecFallback(yyv3257, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3255)
		} // end switch yys3255
	} // end for yyj3255
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3261 int
	var yyb3261 bool
	var yyhl3261 bool = l >= 0
	yyj3261++
	if yyhl3261 {
		yyb3261 = yyj3261 > l
	} else {
		yyb3261 = r.CheckBreak()
	}
	if yyb3261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv3262 := &x.PodSignature
		yyv3262.CodecDecodeSelf(d)
	}
	yyj3261++
	if yyhl3261 {
		yyb3261 = yyj3261 > l
	} else {
		yyb3261 = r.CheckBreak()
	}
	if yyb3261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv3263 := &x.EvictionTime
		yym3264 := z.DecBinary()
		_ = yym3264
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3263) {
		} else if yym3264 {
			z.DecBinaryUnmarshal(yyv3263)
		} else if !yym3264 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3263)
		} else {
			z.DecFallback(yyv3263, false)
		}
	}
	yyj3261++
	if yyhl3261 {
		yyb3261 = yyj3261 > l
	} else {
		yyb3261 = r.CheckBreak()
	}
	if yyb3261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3261++
	if yyhl3261 {
		yyb3261 = yyj3261 > l
	} else {
		yyb3261 = r.CheckBreak()
	}
	if yyb3261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3261++
		if yyhl3261 {
			yyb3261 = yyj3261 > l
		} else {
			yyb3261 = r.CheckBreak()
		}
		if yyb3261 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3261-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3267 := z.EncBinary()
		_ = yym3267
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3268 := !z.EncBinary()
			yy2arr3268 := z.EncBasicHandle().StructToArray
			var yyq3268 [1]bool
			_, _, _ = yysep3268, yyq3268, yy2arr3268
			const yyr3268 bool = false
			yyq3268[0] = x.PodController != nil
			var yynn3268 int
			if yyr3268 || yy2arr3268 {
				r.EncodeArrayStart(1)
			} else {
				yynn3268 = 0
				for _, b := range yyq3268 {
					if b {
						yynn3268++
					}
				}
				r.EncodeMapStart(yynn3268)
				yynn3268 = 0
			}
			if yyr3268 || yy2arr3268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3268[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3268[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3268 || yy2arr3268 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3270 := z.DecBinary()
	_ = yym3270
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3271 := r.ContainerType()
		if yyct3271 == codecSelferValueTypeMap1234 {
			yyl3271 := r.ReadMapStart()
			if yyl3271 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3271, d)
			}
		} else if yyct3271 == codecSelferValueTypeArray1234 {
			yyl3271 := r.ReadArrayStart()
			if yyl3271 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3271, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3272Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3272Slc
	var yyhl3272 bool = l >= 0
	for yyj3272 := 0; ; yyj3272++ {
		if yyhl3272 {
			if yyj3272 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3272Slc = r.DecodeBytes(yys3272Slc, true, true)
		yys3272 := string(yys3272Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3272 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3272)
		} // end switch yys3272
	} // end for yyj3272
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3274 int
	var yyb3274 bool
	var yyhl3274 bool = l >= 0
	yyj3274++
	if yyhl3274 {
		yyb3274 = yyj3274 > l
	} else {
		yyb3274 = r.CheckBreak()
	}
	if yyb3274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj3274++
		if yyhl3274 {
			yyb3274 = yyj3274 > l
		} else {
			yyb3274 = r.CheckBreak()
		}
		if yyb3274 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3274-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3276 := z.EncBinary()
		_ = yym3276
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3277 := !z.EncBinary()
			yy2arr3277 := z.EncBasicHandle().StructToArray
			var yyq3277 [2]bool
			_, _, _ = yysep3277, yyq3277, yy2arr3277
			const yyr3277 bool = false
			yyq3277[1] = x.SizeBytes != 0
			var yynn3277 int
			if yyr3277 || yy2arr3277 {
				r.EncodeArrayStart(2)
			} else {
				yynn3277 = 1
				for _, b := range yyq3277 {
					if b {
						yynn3277++
					}
				}
				r.EncodeMapStart(yynn3277)
				yynn3277 = 0
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3279 := z.EncBinary()
					_ = yym3279
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3280 := z.EncBinary()
					_ = yym3280
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3277[1] {
					yym3282 := z.EncBinary()
					_ = yym3282
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3277[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3283 := z.EncBinary()
					_ = yym3283
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3277 || yy2arr3277 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3284 := z.DecBinary()
	_ = yym3284
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3285 := r.ContainerType()
		if yyct3285 == codecSelferValueTypeMap1234 {
			yyl3285 := r.ReadMapStart()
			if yyl3285 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3285, d)
			}
		} else if yyct3285 == codecSelferValueTypeArray1234 {
			yyl3285 := r.ReadArrayStart()
			if yyl3285 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3285, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3286Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3286Slc
	var yyhl3286 bool = l >= 0
	for yyj3286 := 0; ; yyj3286++ {
		if yyhl3286 {
			if yyj3286 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3286Slc = r.DecodeBytes(yys3286Slc, true, true)
		yys3286 := string(yys3286Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3286 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3287 := &x.Names
				yym3288 := z.DecBinary()
				_ = yym3288
				if false {
				} else {
					z.F.DecSliceStringX(yyv3287, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3286)
		} // end switch yys3286
	} // end for yyj3286
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3290 int
	var yyb3290 bool
	var yyhl3290 bool = l >= 0
	yyj3290++
	if yyhl3290 {
		yyb3290 = yyj3290 > l
	} else {
		yyb3290 = r.CheckBreak()
	}
	if yyb3290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3291 := &x.Names
		yym3292 := z.DecBinary()
		_ = yym3292
		if false {
		} else {
			z.F.DecSliceStringX(yyv3291, false, d)
		}
	}
	yyj3290++
	if yyhl3290 {
		yyb3290 = yyj3290 > l
	} else {
		yyb3290 = r.CheckBreak()
	}
	if yyb3290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3290++
		if yyhl3290 {
			yyb3290 = yyj3290 > l
		} else {
			yyb3290 = r.CheckBreak()
		}
		if yyb3290 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3290-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3294 := z.EncBinary()
	_ = yym3294
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3295 := z.DecBinary()
	_ = yym3295
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3296 := z.EncBinary()
	_ = yym3296
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3297 := z.DecBinary()
	_ = yym3297
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3298 := z.EncBinary()
		_ = yym3298
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3299 := !z.EncBinary()
			yy2arr3299 := z.EncBasicHandle().StructToArray
			var yyq3299 [6]bool
			_, _, _ = yysep3299, yyq3299, yy2arr3299
			const yyr3299 bool = false
			yyq3299[2] = true
			yyq3299[3] = true
			yyq3299[4] = x.Reason != ""
			yyq3299[5] = x.Message != ""
			var yynn3299 int
			if yyr3299 || yy2arr3299 {
				r.EncodeArrayStart(6)
			} else {
				yynn3299 = 2
				for _, b := range yyq3299 {
					if b {
						yynn3299++
					}
				}
				r.EncodeMapStart(yynn3299)
				yynn3299 = 0
			}
			if yyr3299 || yy2arr3299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3299 || yy2arr3299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3299 || yy2arr3299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3299[2] {
					yy3303 := &x.LastHeartbeatTime
					yym3304 := z.EncBinary()
					_ = yym3304
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3303) {
					} else if yym3304 {
						z.EncBinaryMarshal(yy3303)
					} else if !yym3304 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3303)
					} else {
						z.EncFallback(yy3303)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3299[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3305 := &x.LastHeartbeatTime
					yym3306 := z.EncBinary()
					_ = yym3306
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3305) {
					} else if yym3306 {
						z.EncBinaryMarshal(yy3305)
					} else if !yym3306 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3305)
					} else {
						z.EncFallback(yy3305)
					}
				}
			}
			if yyr3299 || yy2arr3299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3299[3] {
					yy3308 := &x.LastTransitionTime
					yym3309 := z.EncBinary()
					_ = yym3309
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3308) {
					} else if yym3309 {
						z.EncBinaryMarshal(yy3308)
					} else if !yym3309 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3308)
					} else {
						z.EncFallback(yy3308)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3299[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3310 := &x.LastTransitionTime
					yym3311 := z.EncBinary()
					_ = yym3311
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3310) {
					} else if yym3311 {
						z.EncBinaryMarshal(yy3310)
					} else if !yym3311 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3310)
					} else {
						z.EncFallback(yy3310)
					}
				}
			}
			if yyr3299 || yy2arr3299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3299[4] {
					yym3313 := z.EncBinary()
					_ = yym3313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3299[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3314 := z.EncBinary()
					_ = yym3314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3299 || yy2arr3299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3299[5] {
					yym3316 := z.EncBinary()
					_ = yym3316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3299[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3317 := z.EncBinary()
					_ = yym3317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3299 || yy2arr3299 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3318 := z.DecBinary()
	_ = yym3318
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3319 := r.ContainerType()
		if yyct3319 == codecSelferValueTypeMap1234 {
			yyl3319 := r.ReadMapStart()
			if yyl3319 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3319, d)
			}
		} else if yyct3319 == codecSelferValueTypeArray1234 {
			yyl3319 := r.ReadArrayStart()
			if yyl3319 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3319, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3320Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3320Slc
	var yyhl3320 bool = l >= 0
	for yyj3320 := 0; ; yyj3320++ {
		if yyhl3320 {
			if yyj3320 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3320Slc = r.DecodeBytes(yys3320Slc, true, true)
		yys3320 := string(yys3320Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3320 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3323 := &x.LastHeartbeatTime
				yym3324 := z.DecBinary()
				_ = yym3324
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3323) {
				} else if yym3324 {
					z.DecBinaryUnmarshal(yyv3323)
				} else if !yym3324 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3323)
				} else {
					z.DecFallback(yyv3323, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3325 := &x.LastTransitionTime
				yym3326 := z.DecBinary()
				_ = yym3326
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3325) {
				} else if yym3326 {
					z.DecBinaryUnmarshal(yyv3325)
				} else if !yym3326 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3325)
				} else {
					z.DecFallback(yyv3325, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3320)
		} // end switch yys3320
	} // end for yyj3320
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3329 int
	var yyb3329 bool
	var yyhl3329 bool = l >= 0
	yyj3329++
	if yyhl3329 {
		yyb3329 = yyj3329 > l
	} else {
		yyb3329 = r.CheckBreak()
	}
	if yyb3329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3329++
	if yyhl3329 {
		yyb3329 = yyj3329 > l
	} else {
		yyb3329 = r.CheckBreak()
	}
	if yyb3329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3329++
	if yyhl3329 {
		yyb3329 = yyj3329 > l
	} else {
		yyb3329 = r.CheckBreak()
	}
	if yyb3329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3332 := &x.LastHeartbeatTime
		yym3333 := z.DecBinary()
		_ = yym3333
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3332) {
		} else if yym3333 {
			z.DecBinaryUnmarshal(yyv3332)
		} else if !yym3333 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3332)
		} else {
			z.DecFallback(yyv3332, false)
		}
	}
	yyj3329++
	if yyhl3329 {
		yyb3329 = yyj3329 > l
	} else {
		yyb3329 = r.CheckBreak()
	}
	if yyb3329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3334 := &x.LastTransitionTime
		yym3335 := z.DecBinary()
		_ = yym3335
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3334) {
		} else if yym3335 {
			z.DecBinaryUnmarshal(yyv3334)
		} else if !yym3335 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3334)
		} else {
			z.DecFallback(yyv3334, false)
		}
	}
	yyj3329++
	if yyhl3329 {
		yyb3329 = yyj3329 > l
	} else {
		yyb3329 = r.CheckBreak()
	}
	if yyb3329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3329++
	if yyhl3329 {
		yyb3329 = yyj3329 > l
	} else {
		yyb3329 = r.CheckBreak()
	}
	if yyb3329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3329++
		if yyhl3329 {
			yyb3329 = yyj3329 > l
		} else {
			yyb3329 = r.CheckBreak()
		}
		if yyb3329 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3329-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3338 := z.EncBinary()
	_ = yym3338
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3339 := z.DecBinary()
	_ = yym3339
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3340 := z.EncBinary()
		_ = yym3340
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3341 := !z.EncBinary()
			yy2arr3341 := z.EncBasicHandle().StructToArray
			var yyq3341 [2]bool
			_, _, _ = yysep3341, yyq3341, yy2arr3341
			const yyr3341 bool = false
			var yynn3341 int
			if yyr3341 || yy2arr3341 {
				r.EncodeArrayStart(2)
			} else {
				yynn3341 = 2
				for _, b := range yyq3341 {
					if b {
						yynn3341++
					}
				}
				r.EncodeMapStart(yynn3341)
				yynn3341 = 0
			}
			if yyr3341 || yy2arr3341 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3341 || yy2arr3341 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3344 := z.EncBinary()
				_ = yym3344
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3345 := z.EncBinary()
				_ = yym3345
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3341 || yy2arr3341 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3346 := z.DecBinary()
	_ = yym3346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3347 := r.ContainerType()
		if yyct3347 == codecSelferValueTypeMap1234 {
			yyl3347 := r.ReadMapStart()
			if yyl3347 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3347, d)
			}
		} else if yyct3347 == codecSelferValueTypeArray1234 {
			yyl3347 := r.ReadArrayStart()
			if yyl3347 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3348Slc
	var yyhl3348 bool = l >= 0
	for yyj3348 := 0; ; yyj3348++ {
		if yyhl3348 {
			if yyj3348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3348Slc = r.DecodeBytes(yys3348Slc, true, true)
		yys3348 := string(yys3348Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3348 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3348)
		} // end switch yys3348
	} // end for yyj3348
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3351 int
	var yyb3351 bool
	var yyhl3351 bool = l >= 0
	yyj3351++
	if yyhl3351 {
		yyb3351 = yyj3351 > l
	} else {
		yyb3351 = r.CheckBreak()
	}
	if yyb3351 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3351++
	if yyhl3351 {
		yyb3351 = yyj3351 > l
	} else {
		yyb3351 = r.CheckBreak()
	}
	if yyb3351 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3351++
		if yyhl3351 {
			yyb3351 = yyj3351 > l
		} else {
			yyb3351 = r.CheckBreak()
		}
		if yyb3351 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3351-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3354 := z.EncBinary()
		_ = yym3354
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3355 := !z.EncBinary()
			yy2arr3355 := z.EncBasicHandle().StructToArray
			var yyq3355 [1]bool
			_, _, _ = yysep3355, yyq3355, yy2arr3355
			const yyr3355 bool = false
			yyq3355[0] = len(x.Capacity) != 0
			var yynn3355 int
			if yyr3355 || yy2arr3355 {
				r.EncodeArrayStart(1)
			} else {
				yynn3355 = 0
				for _, b := range yyq3355 {
					if b {
						yynn3355++
					}
				}
				r.EncodeMapStart(yynn3355)
				yynn3355 = 0
			}
			if yyr3355 || yy2arr3355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3355[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3355[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3355 || yy2arr3355 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3357 := z.DecBinary()
	_ = yym3357
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3358 := r.ContainerType()
		if yyct3358 == codecSelferValueTypeMap1234 {
			yyl3358 := r.ReadMapStart()
			if yyl3358 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3358, d)
			}
		} else if yyct3358 == codecSelferValueTypeArray1234 {
			yyl3358 := r.ReadArrayStart()
			if yyl3358 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3358, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3359Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3359Slc
	var yyhl3359 bool = l >= 0
	for yyj3359 := 0; ; yyj3359++ {
		if yyhl3359 {
			if yyj3359 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3359Slc = r.DecodeBytes(yys3359Slc, true, true)
		yys3359 := string(yys3359Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3359 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3360 := &x.Capacity
				yyv3360.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3359)
		} // end switch yys3359
	} // end for yyj3359
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3361 int
	var yyb3361 bool
	var yyhl3361 bool = l >= 0
	yyj3361++
	if yyhl3361 {
		yyb3361 = yyj3361 > l
	} else {
		yyb3361 = r.CheckBreak()
	}
	if yyb3361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3362 := &x.Capacity
		yyv3362.CodecDecodeSelf(d)
	}
	for {
		yyj3361++
		if yyhl3361 {
			yyb3361 = yyj3361 > l
		} else {
			yyb3361 = r.CheckBreak()
		}
		if yyb3361 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3361-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3363 := z.EncBinary()
	_ = yym3363
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3364 := z.DecBinary()
	_ = yym3364
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3365 := z.EncBinary()
		_ = yym3365
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3366 := z.DecBinary()
	_ = yym3366
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3367 := z.EncBinary()
		_ = yym3367
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3368 := !z.EncBinary()
			yy2arr3368 := z.EncBasicHandle().StructToArray
			var yyq3368 [5]bool
			_, _, _ = yysep3368, yyq3368, yy2arr3368
			const yyr3368 bool = false
			yyq3368[0] = x.Kind != ""
			yyq3368[1] = x.APIVersion != ""
			yyq3368[2] = true
			yyq3368[3] = true
			yyq3368[4] = true
			var yynn3368 int
			if yyr3368 || yy2arr3368 {
				r.EncodeArrayStart(5)
			} else {
				yynn3368 = 0
				for _, b := range yyq3368 {
					if b {
						yynn3368++
					}
				}
				r.EncodeMapStart(yynn3368)
				yynn3368 = 0
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3368[0] {
					yym3370 := z.EncBinary()
					_ = yym3370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3368[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3371 := z.EncBinary()
					_ = yym3371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3368[1] {
					yym3373 := z.EncBinary()
					_ = yym3373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3368[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3374 := z.EncBinary()
					_ = yym3374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3368[2] {
					yy3376 := &x.ObjectMeta
					yy3376.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3368[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3377 := &x.ObjectMeta
					yy3377.CodecEncodeSelf(e)
				}
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3368[3] {
					yy3379 := &x.Spec
					yy3379.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3368[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3380 := &x.Spec
					yy3380.CodecEncodeSelf(e)
				}
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3368[4] {
					yy3382 := &x.Status
					yy3382.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3368[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3383 := &x.Status
					yy3383.CodecEncodeSelf(e)
				}
			}
			if yyr3368 || yy2arr3368 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3384 := z.DecBinary()
	_ = yym3384
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3385 := r.ContainerType()
		if yyct3385 == codecSelferValueTypeMap1234 {
			yyl3385 := r.ReadMapStart()
			if yyl3385 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3385, d)
			}
		} else if yyct3385 == codecSelferValueTypeArray1234 {
			yyl3385 := r.ReadArrayStart()
			if yyl3385 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3385, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3386Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3386Slc
	var yyhl3386 bool = l >= 0
	for yyj3386 := 0; ; yyj3386++ {
		if yyhl3386 {
			if yyj3386 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3386Slc = r.DecodeBytes(yys3386Slc, true, true)
		yys3386 := string(yys3386Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3386 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3389 := &x.ObjectMeta
				yyv3389.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3390 := &x.Spec
				yyv3390.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3391 := &x.Status
				yyv3391.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3386)
		} // end switch yys3386
	} // end for yyj3386
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3392 int
	var yyb3392 bool
	var yyhl3392 bool = l >= 0
	yyj3392++
	if yyhl3392 {
		yyb3392 = yyj3392 > l
	} else {
		yyb3392 = r.CheckBreak()
	}
	if yyb3392 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3392++
	if yyhl3392 {
		yyb3392 = yyj3392 > l
	} else {
		yyb3392 = r.CheckBreak()
	}
	if yyb3392 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3392++
	if yyhl3392 {
		yyb3392 = yyj3392 > l
	} else {
		yyb3392 = r.CheckBreak()
	}
	if yyb3392 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3395 := &x.ObjectMeta
		yyv3395.CodecDecodeSelf(d)
	}
	yyj3392++
	if yyhl3392 {
		yyb3392 = yyj3392 > l
	} else {
		yyb3392 = r.CheckBreak()
	}
	if yyb3392 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3396 := &x.Spec
		yyv3396.CodecDecodeSelf(d)
	}
	yyj3392++
	if yyhl3392 {
		yyb3392 = yyj3392 > l
	} else {
		yyb3392 = r.CheckBreak()
	}
	if yyb3392 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3397 := &x.Status
		yyv3397.CodecDecodeSelf(d)
	}
	for {
		yyj3392++
		if yyhl3392 {
			yyb3392 = yyj3392 > l
		} else {
			yyb3392 = r.CheckBreak()
		}
		if yyb3392 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3392-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3398 := z.EncBinary()
		_ = yym3398
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3399 := !z.EncBinary()
			yy2arr3399 := z.EncBasicHandle().StructToArray
			var yyq3399 [4]bool
			_, _, _ = yysep3399, yyq3399, yy2arr3399
			const yyr3399 bool = false
			yyq3399[0] = x.Kind != ""
			yyq3399[1] = x.APIVersion != ""
			yyq3399[2] = true
			var yynn3399 int
			if yyr3399 || yy2arr3399 {
				r.EncodeArrayStart(4)
			} else {
				yynn3399 = 1
				for _, b := range yyq3399 {
					if b {
						yynn3399++
					}
				}
				r.EncodeMapStart(yynn3399)
				yynn3399 = 0
			}
			if yyr3399 || yy2arr3399 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3399[0] {
					yym3401 := z.EncBinary()
					_ = yym3401
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3399[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3402 := z.EncBinary()
					_ = yym3402
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3399 || yy2arr3399 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3399[1] {
					yym3404 := z.EncBinary()
					_ = yym3404
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3399[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3405 := z.EncBinary()
					_ = yym3405
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3399 || yy2arr3399 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3399[2] {
					yy3407 := &x.ListMeta
					yym3408 := z.EncBinary()
					_ = yym3408
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3407) {
					} else {
						z.EncFallback(yy3407)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3399[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3409 := &x.ListMeta
					yym3410 := z.EncBinary()
					_ = yym3410
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3409) {
					} else {
						z.EncFallback(yy3409)
					}
				}
			}
			if yyr3399 || yy2arr3399 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3412 := z.EncBinary()
					_ = yym3412
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3413 := z.EncBinary()
					_ = yym3413
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3399 || yy2arr3399 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3414 := z.DecBinary()
	_ = yym3414
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3415 := r.ContainerType()
		if yyct3415 == codecSelferValueTypeMap1234 {
			yyl3415 := r.ReadMapStart()
			if yyl3415 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3415, d)
			}
		} else if yyct3415 == codecSelferValueTypeArray1234 {
			yyl3415 := r.ReadArrayStart()
			if yyl3415 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3415, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3416Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3416Slc
	var yyhl3416 bool = l >= 0
	for yyj3416 := 0; ; yyj3416++ {
		if yyhl3416 {
			if yyj3416 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3416Slc = r.DecodeBytes(yys3416Slc, true, true)
		yys3416 := string(yys3416Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3416 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3419 := &x.ListMeta
				yym3420 := z.DecBinary()
				_ = yym3420
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3419) {
				} else {
					z.DecFallback(yyv3419, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3421 := &x.Items
				yym3422 := z.DecBinary()
				_ = yym3422
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3421), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3416)
		} // end switch yys3416
	} // end for yyj3416
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3423 int
	var yyb3423 bool
	var yyhl3423 bool = l >= 0
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3426 := &x.ListMeta
		yym3427 := z.DecBinary()
		_ = yym3427
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3426) {
		} else {
			z.DecFallback(yyv3426, false)
		}
	}
	yyj3423++
	if yyhl3423 {
		yyb3423 = yyj3423 > l
	} else {
		yyb3423 = r.CheckBreak()
	}
	if yyb3423 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3428 := &x.Items
		yym3429 := z.DecBinary()
		_ = yym3429
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3428), d)
		}
	}
	for {
		yyj3423++
		if yyhl3423 {
			yyb3423 = yyj3423 > l
		} else {
			yyb3423 = r.CheckBreak()
		}
		if yyb3423 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3423-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3430 := z.EncBinary()
		_ = yym3430
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3431 := !z.EncBinary()
			yy2arr3431 := z.EncBasicHandle().StructToArray
			var yyq3431 [1]bool
			_, _, _ = yysep3431, yyq3431, yy2arr3431
			const yyr3431 bool = false
			var yynn3431 int
			if yyr3431 || yy2arr3431 {
				r.EncodeArrayStart(1)
			} else {
				yynn3431 = 1
				for _, b := range yyq3431 {
					if b {
						yynn3431++
					}
				}
				r.EncodeMapStart(yynn3431)
				yynn3431 = 0
			}
			if yyr3431 || yy2arr3431 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3433 := z.EncBinary()
					_ = yym3433
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3434 := z.EncBinary()
					_ = yym3434
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr3431 || yy2arr3431 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3435 := z.DecBinary()
	_ = yym3435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3436 := r.ContainerType()
		if yyct3436 == codecSelferValueTypeMap1234 {
			yyl3436 := r.ReadMapStart()
			if yyl3436 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3436, d)
			}
		} else if yyct3436 == codecSelferValueTypeArray1234 {
			yyl3436 := r.ReadArrayStart()
			if yyl3436 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3437Slc
	var yyhl3437 bool = l >= 0
	for yyj3437 := 0; ; yyj3437++ {
		if yyhl3437 {
			if yyj3437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3437Slc = r.DecodeBytes(yys3437Slc, true, true)
		yys3437 := string(yys3437Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3437 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3438 := &x.Finalizers
				yym3439 := z.DecBinary()
				_ = yym3439
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3438), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3437)
		} // end switch yys3437
	} // end for yyj3437
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3440 int
	var yyb3440 bool
	var yyhl3440 bool = l >= 0
	yyj3440++
	if yyhl3440 {
		yyb3440 = yyj3440 > l
	} else {
		yyb3440 = r.CheckBreak()
	}
	if yyb3440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3441 := &x.Finalizers
		yym3442 := z.DecBinary()
		_ = yym3442
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3441), d)
		}
	}
	for {
		yyj3440++
		if yyhl3440 {
			yyb3440 = yyj3440 > l
		} else {
			yyb3440 = r.CheckBreak()
		}
		if yyb3440 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3440-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3443 := z.EncBinary()
	_ = yym3443
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3444 := z.DecBinary()
	_ = yym3444
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3445 := z.EncBinary()
		_ = yym3445
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3446 := !z.EncBinary()
			yy2arr3446 := z.EncBasicHandle().StructToArray
			var yyq3446 [1]bool
			_, _, _ = yysep3446, yyq3446, yy2arr3446
			const yyr3446 bool = false
			yyq3446[0] = x.Phase != ""
			var yynn3446 int
			if yyr3446 || yy2arr3446 {
				r.EncodeArrayStart(1)
			} else {
				yynn3446 = 0
				for _, b := range yyq3446 {
					if b {
						yynn3446++
					}
				}
				r.EncodeMapStart(yynn3446)
				yynn3446 = 0
			}
			if yyr3446 || yy2arr3446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3446[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3446[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3446 || yy2arr3446 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3448 := z.DecBinary()
	_ = yym3448
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3449 := r.ContainerType()
		if yyct3449 == codecSelferValueTypeMap1234 {
			yyl3449 := r.ReadMapStart()
			if yyl3449 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3449, d)
			}
		} else if yyct3449 == codecSelferValueTypeArray1234 {
			yyl3449 := r.ReadArrayStart()
			if yyl3449 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3449, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3450Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3450Slc
	var yyhl3450 bool = l >= 0
	for yyj3450 := 0; ; yyj3450++ {
		if yyhl3450 {
			if yyj3450 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3450Slc = r.DecodeBytes(yys3450Slc, true, true)
		yys3450 := string(yys3450Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3450 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3450)
		} // end switch yys3450
	} // end for yyj3450
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3452 int
	var yyb3452 bool
	var yyhl3452 bool = l >= 0
	yyj3452++
	if yyhl3452 {
		yyb3452 = yyj3452 > l
	} else {
		yyb3452 = r.CheckBreak()
	}
	if yyb3452 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3452++
		if yyhl3452 {
			yyb3452 = yyj3452 > l
		} else {
			yyb3452 = r.CheckBreak()
		}
		if yyb3452 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3452-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3454 := z.EncBinary()
	_ = yym3454
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3455 := z.DecBinary()
	_ = yym3455
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3456 := z.EncBinary()
		_ = yym3456
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3457 := !z.EncBinary()
			yy2arr3457 := z.EncBasicHandle().StructToArray
			var yyq3457 [5]bool
			_, _, _ = yysep3457, yyq3457, yy2arr3457
			const yyr3457 bool = false
			yyq3457[0] = x.Kind != ""
			yyq3457[1] = x.APIVersion != ""
			yyq3457[2] = true
			yyq3457[3] = true
			yyq3457[4] = true
			var yynn3457 int
			if yyr3457 || yy2arr3457 {
				r.EncodeArrayStart(5)
			} else {
				yynn3457 = 0
				for _, b := range yyq3457 {
					if b {
						yynn3457++
					}
				}
				r.EncodeMapStart(yynn3457)
				yynn3457 = 0
			}
			if yyr3457 || yy2arr3457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3457[0] {
					yym3459 := z.EncBinary()
					_ = yym3459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3457[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3460 := z.EncBinary()
					_ = yym3460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3457 || yy2arr3457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3457[1] {
					yym3462 := z.EncBinary()
					_ = yym3462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3457[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3463 := z.EncBinary()
					_ = yym3463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3457 || yy2arr3457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3457[2] {
					yy3465 := &x.ObjectMeta
					yy3465.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3457[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3466 := &x.ObjectMeta
					yy3466.CodecEncodeSelf(e)
				}
			}
			if yyr3457 || yy2arr3457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3457[3] {
					yy3468 := &x.Spec
					yy3468.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3457[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3469 := &x.Spec
					yy3469.CodecEncodeSelf(e)
				}
			}
			if yyr3457 || yy2arr3457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3457[4] {
					yy3471 := &x.Status
					yy3471.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3457[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3472 := &x.Status
					yy3472.CodecEncodeSelf(e)
				}
			}
			if yyr3457 || yy2arr3457 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3473 := z.DecBinary()
	_ = yym3473
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3474 := r.ContainerType()
		if yyct3474 == codecSelferValueTypeMap1234 {
			yyl3474 := r.ReadMapStart()
			if yyl3474 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3474, d)
			}
		} else if yyct3474 == codecSelferValueTypeArray1234 {
			yyl3474 := r.ReadArrayStart()
			if yyl3474 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3474, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3475Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3475Slc
	var yyhl3475 bool = l >= 0
	for yyj3475 := 0; ; yyj3475++ {
		if yyhl3475 {
			if yyj3475 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3475Slc = r.DecodeBytes(yys3475Slc, true, true)
		yys3475 := string(yys3475Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3475 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3478 := &x.ObjectMeta
				yyv3478.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3479 := &x.Spec
				yyv3479.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3480 := &x.Status
				yyv3480.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3475)
		} // end switch yys3475
	} // end for yyj3475
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3481 int
	var yyb3481 bool
	var yyhl3481 bool = l >= 0
	yyj3481++
	if yyhl3481 {
		yyb3481 = yyj3481 > l
	} else {
		yyb3481 = r.CheckBreak()
	}
	if yyb3481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3481++
	if yyhl3481 {
		yyb3481 = yyj3481 > l
	} else {
		yyb3481 = r.CheckBreak()
	}
	if yyb3481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3481++
	if yyhl3481 {
		yyb3481 = yyj3481 > l
	} else {
		yyb3481 = r.CheckBreak()
	}
	if yyb3481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3484 := &x.ObjectMeta
		yyv3484.CodecDecodeSelf(d)
	}
	yyj3481++
	if yyhl3481 {
		yyb3481 = yyj3481 > l
	} else {
		yyb3481 = r.CheckBreak()
	}
	if yyb3481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3485 := &x.Spec
		yyv3485.CodecDecodeSelf(d)
	}
	yyj3481++
	if yyhl3481 {
		yyb3481 = yyj3481 > l
	} else {
		yyb3481 = r.CheckBreak()
	}
	if yyb3481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3486 := &x.Status
		yyv3486.CodecDecodeSelf(d)
	}
	for {
		yyj3481++
		if yyhl3481 {
			yyb3481 = yyj3481 > l
		} else {
			yyb3481 = r.CheckBreak()
		}
		if yyb3481 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3481-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3487 := z.EncBinary()
		_ = yym3487
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3488 := !z.EncBinary()
			yy2arr3488 := z.EncBasicHandle().StructToArray
			var yyq3488 [4]bool
			_, _, _ = yysep3488, yyq3488, yy2arr3488
			const yyr3488 bool = false
			yyq3488[0] = x.Kind != ""
			yyq3488[1] = x.APIVersion != ""
			yyq3488[2] = true
			var yynn3488 int
			if yyr3488 || yy2arr3488 {
				r.EncodeArrayStart(4)
			} else {
				yynn3488 = 1
				for _, b := range yyq3488 {
					if b {
						yynn3488++
					}
				}
				r.EncodeMapStart(yynn3488)
				yynn3488 = 0
			}
			if yyr3488 || yy2arr3488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3488[0] {
					yym3490 := z.EncBinary()
					_ = yym3490
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3488[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3491 := z.EncBinary()
					_ = yym3491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3488 || yy2arr3488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3488[1] {
					yym3493 := z.EncBinary()
					_ = yym3493
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3488[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3494 := z.EncBinary()
					_ = yym3494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3488 || yy2arr3488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3488[2] {
					yy3496 := &x.ListMeta
					yym3497 := z.EncBinary()
					_ = yym3497
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3496) {
					} else {
						z.EncFallback(yy3496)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3488[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3498 := &x.ListMeta
					yym3499 := z.EncBinary()
					_ = yym3499
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3498) {
					} else {
						z.EncFallback(yy3498)
					}
				}
			}
			if yyr3488 || yy2arr3488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3501 := z.EncBinary()
					_ = yym3501
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3502 := z.EncBinary()
					_ = yym3502
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3488 || yy2arr3488 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3503 := z.DecBinary()
	_ = yym3503
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3504 := r.ContainerType()
		if yyct3504 == codecSelferValueTypeMap1234 {
			yyl3504 := r.ReadMapStart()
			if yyl3504 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3504, d)
			}
		} else if yyct3504 == codecSelferValueTypeArray1234 {
			yyl3504 := r.ReadArrayStart()
			if yyl3504 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3504, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3505Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3505Slc
	var yyhl3505 bool = l >= 0
	for yyj3505 := 0; ; yyj3505++ {
		if yyhl3505 {
			if yyj3505 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3505Slc = r.DecodeBytes(yys3505Slc, true, true)
		yys3505 := string(yys3505Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3505 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3508 := &x.ListMeta
				yym3509 := z.DecBinary()
				_ = yym3509
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3508) {
				} else {
					z.DecFallback(yyv3508, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3510 := &x.Items
				yym3511 := z.DecBinary()
				_ = yym3511
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3510), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3505)
		} // end switch yys3505
	} // end for yyj3505
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3512 int
	var yyb3512 bool
	var yyhl3512 bool = l >= 0
	yyj3512++
	if yyhl3512 {
		yyb3512 = yyj3512 > l
	} else {
		yyb3512 = r.CheckBreak()
	}
	if yyb3512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3512++
	if yyhl3512 {
		yyb3512 = yyj3512 > l
	} else {
		yyb3512 = r.CheckBreak()
	}
	if yyb3512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3512++
	if yyhl3512 {
		yyb3512 = yyj3512 > l
	} else {
		yyb3512 = r.CheckBreak()
	}
	if yyb3512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3515 := &x.ListMeta
		yym3516 := z.DecBinary()
		_ = yym3516
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3515) {
		} else {
			z.DecFallback(yyv3515, false)
		}
	}
	yyj3512++
	if yyhl3512 {
		yyb3512 = yyj3512 > l
	} else {
		yyb3512 = r.CheckBreak()
	}
	if yyb3512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3517 := &x.Items
		yym3518 := z.DecBinary()
		_ = yym3518
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3517), d)
		}
	}
	for {
		yyj3512++
		if yyhl3512 {
			yyb3512 = yyj3512 > l
		} else {
			yyb3512 = r.CheckBreak()
		}
		if yyb3512 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3512-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3519 := z.EncBinary()
		_ = yym3519
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3520 := !z.EncBinary()
			yy2arr3520 := z.EncBasicHandle().StructToArray
			var yyq3520 [4]bool
			_, _, _ = yysep3520, yyq3520, yy2arr3520
			const yyr3520 bool = false
			yyq3520[0] = x.Kind != ""
			yyq3520[1] = x.APIVersion != ""
			yyq3520[2] = true
			var yynn3520 int
			if yyr3520 || yy2arr3520 {
				r.EncodeArrayStart(4)
			} else {
				yynn3520 = 1
				for _, b := range yyq3520 {
					if b {
						yynn3520++
					}
				}
				r.EncodeMapStart(yynn3520)
				yynn3520 = 0
			}
			if yyr3520 || yy2arr3520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3520[0] {
					yym3522 := z.EncBinary()
					_ = yym3522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3520[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3523 := z.EncBinary()
					_ = yym3523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3520 || yy2arr3520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3520[1] {
					yym3525 := z.EncBinary()
					_ = yym3525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3520[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3526 := z.EncBinary()
					_ = yym3526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3520 || yy2arr3520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3520[2] {
					yy3528 := &x.ObjectMeta
					yy3528.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3520[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3529 := &x.ObjectMeta
					yy3529.CodecEncodeSelf(e)
				}
			}
			if yyr3520 || yy2arr3520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3531 := &x.Target
				yy3531.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3532 := &x.Target
				yy3532.CodecEncodeSelf(e)
			}
			if yyr3520 || yy2arr3520 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3533 := z.DecBinary()
	_ = yym3533
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3534 := r.ContainerType()
		if yyct3534 == codecSelferValueTypeMap1234 {
			yyl3534 := r.ReadMapStart()
			if yyl3534 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3534, d)
			}
		} else if yyct3534 == codecSelferValueTypeArray1234 {
			yyl3534 := r.ReadArrayStart()
			if yyl3534 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3534, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3535Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3535Slc
	var yyhl3535 bool = l >= 0
	for yyj3535 := 0; ; yyj3535++ {
		if yyhl3535 {
			if yyj3535 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3535Slc = r.DecodeBytes(yys3535Slc, true, true)
		yys3535 := string(yys3535Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3535 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3538 := &x.ObjectMeta
				yyv3538.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3539 := &x.Target
				yyv3539.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3535)
		} // end switch yys3535
	} // end for yyj3535
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3540 int
	var yyb3540 bool
	var yyhl3540 bool = l >= 0
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3543 := &x.ObjectMeta
		yyv3543.CodecDecodeSelf(d)
	}
	yyj3540++
	if yyhl3540 {
		yyb3540 = yyj3540 > l
	} else {
		yyb3540 = r.CheckBreak()
	}
	if yyb3540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3544 := &x.Target
		yyv3544.CodecDecodeSelf(d)
	}
	for {
		yyj3540++
		if yyhl3540 {
			yyb3540 = yyj3540 > l
		} else {
			yyb3540 = r.CheckBreak()
		}
		if yyb3540 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3540-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3545 := z.EncBinary()
		_ = yym3545
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3546 := !z.EncBinary()
			yy2arr3546 := z.EncBasicHandle().StructToArray
			var yyq3546 [1]bool
			_, _, _ = yysep3546, yyq3546, yy2arr3546
			const yyr3546 bool = false
			yyq3546[0] = x.UID != nil
			var yynn3546 int
			if yyr3546 || yy2arr3546 {
				r.EncodeArrayStart(1)
			} else {
				yynn3546 = 0
				for _, b := range yyq3546 {
					if b {
						yynn3546++
					}
				}
				r.EncodeMapStart(yynn3546)
				yynn3546 = 0
			}
			if yyr3546 || yy2arr3546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3546[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3548 := *x.UID
						yym3549 := z.EncBinary()
						_ = yym3549
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3548) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3548))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3546[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3550 := *x.UID
						yym3551 := z.EncBinary()
						_ = yym3551
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3550) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3550))
						}
					}
				}
			}
			if yyr3546 || yy2arr3546 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3552 := z.DecBinary()
	_ = yym3552
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3553 := r.ContainerType()
		if yyct3553 == codecSelferValueTypeMap1234 {
			yyl3553 := r.ReadMapStart()
			if yyl3553 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3553, d)
			}
		} else if yyct3553 == codecSelferValueTypeArray1234 {
			yyl3553 := r.ReadArrayStart()
			if yyl3553 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3553, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3554Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3554Slc
	var yyhl3554 bool = l >= 0
	for yyj3554 := 0; ; yyj3554++ {
		if yyhl3554 {
			if yyj3554 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3554Slc = r.DecodeBytes(yys3554Slc, true, true)
		yys3554 := string(yys3554Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3554 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3556 := z.DecBinary()
				_ = yym3556
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3554)
		} // end switch yys3554
	} // end for yyj3554
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3557 int
	var yyb3557 bool
	var yyhl3557 bool = l >= 0
	yyj3557++
	if yyhl3557 {
		yyb3557 = yyj3557 > l
	} else {
		yyb3557 = r.CheckBreak()
	}
	if yyb3557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3559 := z.DecBinary()
		_ = yym3559
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3557++
		if yyhl3557 {
			yyb3557 = yyj3557 > l
		} else {
			yyb3557 = r.CheckBreak()
		}
		if yyb3557 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3557-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3560 := z.EncBinary()
		_ = yym3560
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3561 := !z.EncBinary()
			yy2arr3561 := z.EncBasicHandle().StructToArray
			var yyq3561 [5]bool
			_, _, _ = yysep3561, yyq3561, yy2arr3561
			const yyr3561 bool = false
			yyq3561[0] = x.Kind != ""
			yyq3561[1] = x.APIVersion != ""
			yyq3561[2] = x.GracePeriodSeconds != nil
			yyq3561[3] = x.Preconditions != nil
			yyq3561[4] = x.OrphanDependents != nil
			var yynn3561 int
			if yyr3561 || yy2arr3561 {
				r.EncodeArrayStart(5)
			} else {
				yynn3561 = 0
				for _, b := range yyq3561 {
					if b {
						yynn3561++
					}
				}
				r.EncodeMapStart(yynn3561)
				yynn3561 = 0
			}
			if yyr3561 || yy2arr3561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3561[0] {
					yym3563 := z.EncBinary()
					_ = yym3563
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3561[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3564 := z.EncBinary()
					_ = yym3564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3561 || yy2arr3561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3561[1] {
					yym3566 := z.EncBinary()
					_ = yym3566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3561[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3567 := z.EncBinary()
					_ = yym3567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3561 || yy2arr3561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3561[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3569 := *x.GracePeriodSeconds
						yym3570 := z.EncBinary()
						_ = yym3570
						if false {
						} else {
							r.EncodeInt(int64(yy3569))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3561[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3571 := *x.GracePeriodSeconds
						yym3572 := z.EncBinary()
						_ = yym3572
						if false {
						} else {
							r.EncodeInt(int64(yy3571))
						}
					}
				}
			}
			if yyr3561 || yy2arr3561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3561[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3561[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3561 || yy2arr3561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3561[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3575 := *x.OrphanDependents
						yym3576 := z.EncBinary()
						_ = yym3576
						if false {
						} else {
							r.EncodeBool(bool(yy3575))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3561[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3577 := *x.OrphanDependents
						yym3578 := z.EncBinary()
						_ = yym3578
						if false {
						} else {
							r.EncodeBool(bool(yy3577))
						}
					}
				}
			}
			if yyr3561 || yy2arr3561 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3579 := z.DecBinary()
	_ = yym3579
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3580 := r.ContainerType()
		if yyct3580 == codecSelferValueTypeMap1234 {
			yyl3580 := r.ReadMapStart()
			if yyl3580 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3580, d)
			}
		} else if yyct3580 == codecSelferValueTypeArray1234 {
			yyl3580 := r.ReadArrayStart()
			if yyl3580 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3580, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3581Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3581Slc
	var yyhl3581 bool = l >= 0
	for yyj3581 := 0; ; yyj3581++ {
		if yyhl3581 {
			if yyj3581 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3581Slc = r.DecodeBytes(yys3581Slc, true, true)
		yys3581 := string(yys3581Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3581 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3585 := z.DecBinary()
				_ = yym3585
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3588 := z.DecBinary()
				_ = yym3588
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3581)
		} // end switch yys3581
	} // end for yyj3581
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3589 int
	var yyb3589 bool
	var yyhl3589 bool = l >= 0
	yyj3589++
	if yyhl3589 {
		yyb3589 = yyj3589 > l
	} else {
		yyb3589 = r.CheckBreak()
	}
	if yyb3589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3589++
	if yyhl3589 {
		yyb3589 = yyj3589 > l
	} else {
		yyb3589 = r.CheckBreak()
	}
	if yyb3589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3589++
	if yyhl3589 {
		yyb3589 = yyj3589 > l
	} else {
		yyb3589 = r.CheckBreak()
	}
	if yyb3589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3593 := z.DecBinary()
		_ = yym3593
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3589++
	if yyhl3589 {
		yyb3589 = yyj3589 > l
	} else {
		yyb3589 = r.CheckBreak()
	}
	if yyb3589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3589++
	if yyhl3589 {
		yyb3589 = yyj3589 > l
	} else {
		yyb3589 = r.CheckBreak()
	}
	if yyb3589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3596 := z.DecBinary()
		_ = yym3596
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3589++
		if yyhl3589 {
			yyb3589 = yyj3589 > l
		} else {
			yyb3589 = r.CheckBreak()
		}
		if yyb3589 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3589-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3597 := z.EncBinary()
		_ = yym3597
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3598 := !z.EncBinary()
			yy2arr3598 := z.EncBasicHandle().StructToArray
			var yyq3598 [4]bool
			_, _, _ = yysep3598, yyq3598, yy2arr3598
			const yyr3598 bool = false
			yyq3598[0] = x.Kind != ""
			yyq3598[1] = x.APIVersion != ""
			var yynn3598 int
			if yyr3598 || yy2arr3598 {
				r.EncodeArrayStart(4)
			} else {
				yynn3598 = 2
				for _, b := range yyq3598 {
					if b {
						yynn3598++
					}
				}
				r.EncodeMapStart(yynn3598)
				yynn3598 = 0
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3598[0] {
					yym3600 := z.EncBinary()
					_ = yym3600
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3598[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3601 := z.EncBinary()
					_ = yym3601
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3598[1] {
					yym3603 := z.EncBinary()
					_ = yym3603
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3598[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3604 := z.EncBinary()
					_ = yym3604
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3606 := z.EncBinary()
				_ = yym3606
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3607 := z.EncBinary()
				_ = yym3607
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3609 := z.EncBinary()
				_ = yym3609
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3610 := z.EncBinary()
				_ = yym3610
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3598 || yy2arr3598 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3611 := z.DecBinary()
	_ = yym3611
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3612 := r.ContainerType()
		if yyct3612 == codecSelferValueTypeMap1234 {
			yyl3612 := r.ReadMapStart()
			if yyl3612 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3612, d)
			}
		} else if yyct3612 == codecSelferValueTypeArray1234 {
			yyl3612 := r.ReadArrayStart()
			if yyl3612 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3612, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3613Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3613Slc
	var yyhl3613 bool = l >= 0
	for yyj3613 := 0; ; yyj3613++ {
		if yyhl3613 {
			if yyj3613 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3613Slc = r.DecodeBytes(yys3613Slc, true, true)
		yys3613 := string(yys3613Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3613 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3613)
		} // end switch yys3613
	} // end for yyj3613
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3618 int
	var yyb3618 bool
	var yyhl3618 bool = l >= 0
	yyj3618++
	if yyhl3618 {
		yyb3618 = yyj3618 > l
	} else {
		yyb3618 = r.CheckBreak()
	}
	if yyb3618 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3618++
	if yyhl3618 {
		yyb3618 = yyj3618 > l
	} else {
		yyb3618 = r.CheckBreak()
	}
	if yyb3618 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3618++
	if yyhl3618 {
		yyb3618 = yyj3618 > l
	} else {
		yyb3618 = r.CheckBreak()
	}
	if yyb3618 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3618++
	if yyhl3618 {
		yyb3618 = yyj3618 > l
	} else {
		yyb3618 = r.CheckBreak()
	}
	if yyb3618 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3618++
		if yyhl3618 {
			yyb3618 = yyj3618 > l
		} else {
			yyb3618 = r.CheckBreak()
		}
		if yyb3618 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3618-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3623 := z.EncBinary()
		_ = yym3623
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3624 := !z.EncBinary()
			yy2arr3624 := z.EncBasicHandle().StructToArray
			var yyq3624 [7]bool
			_, _, _ = yysep3624, yyq3624, yy2arr3624
			const yyr3624 bool = false
			yyq3624[0] = x.Kind != ""
			yyq3624[1] = x.APIVersion != ""
			var yynn3624 int
			if yyr3624 || yy2arr3624 {
				r.EncodeArrayStart(7)
			} else {
				yynn3624 = 5
				for _, b := range yyq3624 {
					if b {
						yynn3624++
					}
				}
				r.EncodeMapStart(yynn3624)
				yynn3624 = 0
			}
			if yyr3624 || yy2arr3624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3624[0] {
					yym3626 := z.EncBinary()
					_ = yym3626
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3624[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3627 := z.EncBinary()
					_ = yym3627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3624 || yy2arr3624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3624[1] {
					yym3629 := z.EncBinary()
					_ = yym3629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3624[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3630 := z.EncBinary()
					_ = yym3630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3624 || yy2arr3624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3632 := z.EncBinary()
					_ = yym3632
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3633 := z.EncBinary()
					_ = yym3633
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr3624 || yy2arr3624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3635 := z.EncBinary()
					_ = yym3635
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3636 := z.EncBinary()
					_ = yym3636
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr3624 || yy2arr3624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3638 := z.EncBinary()
				_ = yym3638
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3639 := z.EncBinary()
				_ = yym3639
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr3624 || yy2arr3624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3641 := z.EncBinary()
				_ = yym3641
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3642 := z.EncBinary()
				_ = yym3642
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr3624 || yy2arr3624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3644 := *x.TimeoutSeconds
					yym3645 := z.EncBinary()
					_ = yym3645
					if false {
					} else {
						r.EncodeInt(int64(yy3644))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3646 := *x.TimeoutSeconds
					yym3647 := z.EncBinary()
					_ = yym3647
					if false {
					} else {
						r.EncodeInt(int64(yy3646))
					}
				}
			}
			if yyr3624 || yy2arr3624 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3648 := z.DecBinary()
	_ = yym3648
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3649 := r.ContainerType()
		if yyct3649 == codecSelferValueTypeMap1234 {
			yyl3649 := r.ReadMapStart()
			if yyl3649 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3649, d)
			}
		} else if yyct3649 == codecSelferValueTypeArray1234 {
			yyl3649 := r.ReadArrayStart()
			if yyl3649 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3649, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3650Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3650Slc
	var yyhl3650 bool = l >= 0
	for yyj3650 := 0; ; yyj3650++ {
		if yyhl3650 {
			if yyj3650 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3650Slc = r.DecodeBytes(yys3650Slc, true, true)
		yys3650 := string(yys3650Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3650 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv3653 := &x.LabelSelector
				yym3654 := z.DecBinary()
				_ = yym3654
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3653) {
				} else {
					z.DecFallback(yyv3653, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv3655 := &x.FieldSelector
				yym3656 := z.DecBinary()
				_ = yym3656
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3655) {
				} else {
					z.DecFallback(yyv3655, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3660 := z.DecBinary()
				_ = yym3660
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3650)
		} // end switch yys3650
	} // end for yyj3650
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3661 int
	var yyb3661 bool
	var yyhl3661 bool = l >= 0
	yyj3661++
	if yyhl3661 {
		yyb3661 = yyj3661 > l
	} else {
		yyb3661 = r.CheckBreak()
	}
	if yyb3661 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3661++
	if yyhl3661 {
		yyb3661 = yyj3661 > l
	} else {
		yyb3661 = r.CheckBreak()
	}
	if yyb3661 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3661++
	if yyhl3661 {
		yyb3661 = yyj3661 > l
	} else {
		yyb3661 = r.CheckBreak()
	}
	if yyb3661 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv3664 := &x.LabelSelector
		yym3665 := z.DecBinary()
		_ = yym3665
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3664) {
		} else {
			z.DecFallback(yyv3664, true)
		}
	}
	yyj3661++
	if yyhl3661 {
		yyb3661 = yyj3661 > l
	} else {
		yyb3661 = r.CheckBreak()
	}
	if yyb3661 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv3666 := &x.FieldSelector
		yym3667 := z.DecBinary()
		_ = yym3667
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3666) {
		} else {
			z.DecFallback(yyv3666, true)
		}
	}
	yyj3661++
	if yyhl3661 {
		yyb3661 = yyj3661 > l
	} else {
		yyb3661 = r.CheckBreak()
	}
	if yyb3661 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3661++
	if yyhl3661 {
		yyb3661 = yyj3661 > l
	} else {
		yyb3661 = r.CheckBreak()
	}
	if yyb3661 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3661++
	if yyhl3661 {
		yyb3661 = yyj3661 > l
	} else {
		yyb3661 = r.CheckBreak()
	}
	if yyb3661 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3671 := z.DecBinary()
		_ = yym3671
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3661++
		if yyhl3661 {
			yyb3661 = yyj3661 > l
		} else {
			yyb3661 = r.CheckBreak()
		}
		if yyb3661 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3661-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3672 := z.EncBinary()
		_ = yym3672
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3673 := !z.EncBinary()
			yy2arr3673 := z.EncBasicHandle().StructToArray
			var yyq3673 [10]bool
			_, _, _ = yysep3673, yyq3673, yy2arr3673
			const yyr3673 bool = false
			yyq3673[0] = x.Kind != ""
			yyq3673[1] = x.APIVersion != ""
			var yynn3673 int
			if yyr3673 || yy2arr3673 {
				r.EncodeArrayStart(10)
			} else {
				yynn3673 = 8
				for _, b := range yyq3673 {
					if b {
						yynn3673++
					}
				}
				r.EncodeMapStart(yynn3673)
				yynn3673 = 0
			}
			if yyr3673 || yy2arr3673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3673[0] {
					yym3675 := z.EncBinary()
					_ = yym3675
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3673[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3676 := z.EncBinary()
					_ = yym3676
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3673 || yy2arr3673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3673[1] {
					yym3678 := z.EncBinary()
					_ = yym3678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3673[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3679 := z.EncBinary()
					_ = yym3679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3673 || yy2arr3673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3681 := z.EncBinary()
				_ = yym3681
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3682 := z.EncBinary()
				_ = yym3682
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3673 || yy2arr3673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3684 := z.EncBinary()
				_ = yym3684
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3685 := z.EncBinary()
				_ = yym3685
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr3673 || yy2arr3673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3687 := z.EncBinary()
				_ = yym3687
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3688 := z.EncBinary()
				_ = yym3688
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr3673 || yy2arr3673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3690 := *x.SinceSeconds
					yym3691 := z.EncBinary()
					_ = yym3691
					if false {
					} else {
						r.EncodeInt(int64(yy3690))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3692 := *x.SinceSeconds
					yym3693 := z.EncBinary()
					_ = yym3693
					if false {
					} else {
						r.EncodeInt(int64(yy3692))
					}
				}
			}
			if yyr3673 || yy2arr3673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3695 := z.EncBinary()
					_ = yym3695
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3695 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3695 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3696 := z.EncBinary()
					_ = yym3696
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3696 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3696 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr3673 || yy2arr3673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3698 := z.EncBinary()
				_ = yym3698
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3699 := z.EncBinary()
				_ = yym3699
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr3673 || yy2arr3673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3701 := *x.TailLines
					yym3702 := z.EncBinary()
					_ = yym3702
					if false {
					} else {
						r.EncodeInt(int64(yy3701))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3703 := *x.TailLines
					yym3704 := z.EncBinary()
					_ = yym3704
					if false {
					} else {
						r.EncodeInt(int64(yy3703))
					}
				}
			}
			if yyr3673 || yy2arr3673 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3706 := *x.LimitBytes
					yym3707 := z.EncBinary()
					_ = yym3707
					if false {
					} else {
						r.EncodeInt(int64(yy3706))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3708 := *x.LimitBytes
					yym3709 := z.EncBinary()
					_ = yym3709
					if false {
					} else {
						r.EncodeInt(int64(yy3708))
					}
				}
			}
			if yyr3673 || yy2arr3673 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3710 := z.DecBinary()
	_ = yym3710
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3711 := r.ContainerType()
		if yyct3711 == codecSelferValueTypeMap1234 {
			yyl3711 := r.ReadMapStart()
			if yyl3711 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3711, d)
			}
		} else if yyct3711 == codecSelferValueTypeArray1234 {
			yyl3711 := r.ReadArrayStart()
			if yyl3711 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3711, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3712Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3712Slc
	var yyhl3712 bool = l >= 0
	for yyj3712 := 0; ; yyj3712++ {
		if yyhl3712 {
			if yyj3712 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3712Slc = r.DecodeBytes(yys3712Slc, true, true)
		yys3712 := string(yys3712Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3712 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3719 := z.DecBinary()
				_ = yym3719
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3721 := z.DecBinary()
				_ = yym3721
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3721 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3721 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3724 := z.DecBinary()
				_ = yym3724
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3726 := z.DecBinary()
				_ = yym3726
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3712)
		} // end switch yys3712
	} // end for yyj3712
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3727 int
	var yyb3727 bool
	var yyhl3727 bool = l >= 0
	yyj3727++
	if yyhl3727 {
		yyb3727 = yyj3727 > l
	} else {
		yyb3727 = r.CheckBreak()
	}
	if yyb3727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3727++
	if yyhl3727 {
		yyb3727 = yyj3727 > l
	} else {
		yyb3727 = r.CheckBreak()
	}
	if yyb3727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3727++
	if yyhl3727 {
		yyb3727 = yyj3727 > l
	} else {
		yyb3727 = r.CheckBreak()
	}
	if yyb3727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3727++
	if yyhl3727 {
		yyb3727 = yyj3727 > l
	} else {
		yyb3727 = r.CheckBreak()
	}
	if yyb3727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3727++
	if yyhl3727 {
		yyb3727 = yyj3727 > l
	} else {
		yyb3727 = r.CheckBreak()
	}
	if yyb3727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3727++
	if yyhl3727 {
		yyb3727 = yyj3727 > l
	} else {
		yyb3727 = r.CheckBreak()
	}
	if yyb3727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3734 := z.DecBinary()
		_ = yym3734
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3727++
	if yyhl3727 {
		yyb3727 = yyj3727 > l
	} else {
		yyb3727 = r.CheckBreak()
	}
	if yyb3727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3736 := z.DecBinary()
		_ = yym3736
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3736 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3736 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3727++
	if yyhl3727 {
		yyb3727 = yyj3727 > l
	} else {
		yyb3727 = r.CheckBreak()
	}
	if yyb3727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3727++
	if yyhl3727 {
		yyb3727 = yyj3727 > l
	} else {
		yyb3727 = r.CheckBreak()
	}
	if yyb3727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3739 := z.DecBinary()
		_ = yym3739
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3727++
	if yyhl3727 {
		yyb3727 = yyj3727 > l
	} else {
		yyb3727 = r.CheckBreak()
	}
	if yyb3727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3741 := z.DecBinary()
		_ = yym3741
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3727++
		if yyhl3727 {
			yyb3727 = yyj3727 > l
		} else {
			yyb3727 = r.CheckBreak()
		}
		if yyb3727 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3727-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3742 := z.EncBinary()
		_ = yym3742
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3743 := !z.EncBinary()
			yy2arr3743 := z.EncBasicHandle().StructToArray
			var yyq3743 [7]bool
			_, _, _ = yysep3743, yyq3743, yy2arr3743
			const yyr3743 bool = false
			yyq3743[0] = x.Kind != ""
			yyq3743[1] = x.APIVersion != ""
			yyq3743[2] = x.Stdin != false
			yyq3743[3] = x.Stdout != false
			yyq3743[4] = x.Stderr != false
			yyq3743[5] = x.TTY != false
			yyq3743[6] = x.Container != ""
			var yynn3743 int
			if yyr3743 || yy2arr3743 {
				r.EncodeArrayStart(7)
			} else {
				yynn3743 = 0
				for _, b := range yyq3743 {
					if b {
						yynn3743++
					}
				}
				r.EncodeMapStart(yynn3743)
				yynn3743 = 0
			}
			if yyr3743 || yy2arr3743 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3743[0] {
					yym3745 := z.EncBinary()
					_ = yym3745
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3743[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3746 := z.EncBinary()
					_ = yym3746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3743 || yy2arr3743 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3743[1] {
					yym3748 := z.EncBinary()
					_ = yym3748
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3743[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3749 := z.EncBinary()
					_ = yym3749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3743 || yy2arr3743 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3743[2] {
					yym3751 := z.EncBinary()
					_ = yym3751
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3743[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3752 := z.EncBinary()
					_ = yym3752
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3743 || yy2arr3743 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3743[3] {
					yym3754 := z.EncBinary()
					_ = yym3754
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3743[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3755 := z.EncBinary()
					_ = yym3755
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3743 || yy2arr3743 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3743[4] {
					yym3757 := z.EncBinary()
					_ = yym3757
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3743[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3758 := z.EncBinary()
					_ = yym3758
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3743 || yy2arr3743 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3743[5] {
					yym3760 := z.EncBinary()
					_ = yym3760
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3743[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3761 := z.EncBinary()
					_ = yym3761
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3743 || yy2arr3743 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3743[6] {
					yym3763 := z.EncBinary()
					_ = yym3763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3743[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3764 := z.EncBinary()
					_ = yym3764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3743 || yy2arr3743 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3765 := z.DecBinary()
	_ = yym3765
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3766 := r.ContainerType()
		if yyct3766 == codecSelferValueTypeMap1234 {
			yyl3766 := r.ReadMapStart()
			if yyl3766 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3766, d)
			}
		} else if yyct3766 == codecSelferValueTypeArray1234 {
			yyl3766 := r.ReadArrayStart()
			if yyl3766 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3766, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3767Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3767Slc
	var yyhl3767 bool = l >= 0
	for yyj3767 := 0; ; yyj3767++ {
		if yyhl3767 {
			if yyj3767 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3767Slc = r.DecodeBytes(yys3767Slc, true, true)
		yys3767 := string(yys3767Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3767 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3767)
		} // end switch yys3767
	} // end for yyj3767
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3775 int
	var yyb3775 bool
	var yyhl3775 bool = l >= 0
	yyj3775++
	if yyhl3775 {
		yyb3775 = yyj3775 > l
	} else {
		yyb3775 = r.CheckBreak()
	}
	if yyb3775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3775++
	if yyhl3775 {
		yyb3775 = yyj3775 > l
	} else {
		yyb3775 = r.CheckBreak()
	}
	if yyb3775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3775++
	if yyhl3775 {
		yyb3775 = yyj3775 > l
	} else {
		yyb3775 = r.CheckBreak()
	}
	if yyb3775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3775++
	if yyhl3775 {
		yyb3775 = yyj3775 > l
	} else {
		yyb3775 = r.CheckBreak()
	}
	if yyb3775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3775++
	if yyhl3775 {
		yyb3775 = yyj3775 > l
	} else {
		yyb3775 = r.CheckBreak()
	}
	if yyb3775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3775++
	if yyhl3775 {
		yyb3775 = yyj3775 > l
	} else {
		yyb3775 = r.CheckBreak()
	}
	if yyb3775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3775++
	if yyhl3775 {
		yyb3775 = yyj3775 > l
	} else {
		yyb3775 = r.CheckBreak()
	}
	if yyb3775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3775++
		if yyhl3775 {
			yyb3775 = yyj3775 > l
		} else {
			yyb3775 = r.CheckBreak()
		}
		if yyb3775 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3775-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3783 := z.EncBinary()
		_ = yym3783
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3784 := !z.EncBinary()
			yy2arr3784 := z.EncBasicHandle().StructToArray
			var yyq3784 [8]bool
			_, _, _ = yysep3784, yyq3784, yy2arr3784
			const yyr3784 bool = false
			yyq3784[0] = x.Kind != ""
			yyq3784[1] = x.APIVersion != ""
			var yynn3784 int
			if yyr3784 || yy2arr3784 {
				r.EncodeArrayStart(8)
			} else {
				yynn3784 = 6
				for _, b := range yyq3784 {
					if b {
						yynn3784++
					}
				}
				r.EncodeMapStart(yynn3784)
				yynn3784 = 0
			}
			if yyr3784 || yy2arr3784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3784[0] {
					yym3786 := z.EncBinary()
					_ = yym3786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3784[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3787 := z.EncBinary()
					_ = yym3787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3784 || yy2arr3784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3784[1] {
					yym3789 := z.EncBinary()
					_ = yym3789
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3784[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3790 := z.EncBinary()
					_ = yym3790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3784 || yy2arr3784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3792 := z.EncBinary()
				_ = yym3792
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3793 := z.EncBinary()
				_ = yym3793
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr3784 || yy2arr3784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3795 := z.EncBinary()
				_ = yym3795
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3796 := z.EncBinary()
				_ = yym3796
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr3784 || yy2arr3784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3798 := z.EncBinary()
				_ = yym3798
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3799 := z.EncBinary()
				_ = yym3799
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr3784 || yy2arr3784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3801 := z.EncBinary()
				_ = yym3801
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3802 := z.EncBinary()
				_ = yym3802
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr3784 || yy2arr3784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3804 := z.EncBinary()
				_ = yym3804
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3805 := z.EncBinary()
				_ = yym3805
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3784 || yy2arr3784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3807 := z.EncBinary()
					_ = yym3807
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3808 := z.EncBinary()
					_ = yym3808
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3784 || yy2arr3784 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3809 := z.DecBinary()
	_ = yym3809
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3810 := r.ContainerType()
		if yyct3810 == codecSelferValueTypeMap1234 {
			yyl3810 := r.ReadMapStart()
			if yyl3810 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3810, d)
			}
		} else if yyct3810 == codecSelferValueTypeArray1234 {
			yyl3810 := r.ReadArrayStart()
			if yyl3810 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3810, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3811Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3811Slc
	var yyhl3811 bool = l >= 0
	for yyj3811 := 0; ; yyj3811++ {
		if yyhl3811 {
			if yyj3811 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3811Slc = r.DecodeBytes(yys3811Slc, true, true)
		yys3811 := string(yys3811Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3811 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3819 := &x.Command
				yym3820 := z.DecBinary()
				_ = yym3820
				if false {
				} else {
					z.F.DecSliceStringX(yyv3819, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3811)
		} // end switch yys3811
	} // end for yyj3811
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3821 int
	var yyb3821 bool
	var yyhl3821 bool = l >= 0
	yyj3821++
	if yyhl3821 {
		yyb3821 = yyj3821 > l
	} else {
		yyb3821 = r.CheckBreak()
	}
	if yyb3821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3821++
	if yyhl3821 {
		yyb3821 = yyj3821 > l
	} else {
		yyb3821 = r.CheckBreak()
	}
	if yyb3821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3821++
	if yyhl3821 {
		yyb3821 = yyj3821 > l
	} else {
		yyb3821 = r.CheckBreak()
	}
	if yyb3821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3821++
	if yyhl3821 {
		yyb3821 = yyj3821 > l
	} else {
		yyb3821 = r.CheckBreak()
	}
	if yyb3821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3821++
	if yyhl3821 {
		yyb3821 = yyj3821 > l
	} else {
		yyb3821 = r.CheckBreak()
	}
	if yyb3821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3821++
	if yyhl3821 {
		yyb3821 = yyj3821 > l
	} else {
		yyb3821 = r.CheckBreak()
	}
	if yyb3821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3821++
	if yyhl3821 {
		yyb3821 = yyj3821 > l
	} else {
		yyb3821 = r.CheckBreak()
	}
	if yyb3821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3821++
	if yyhl3821 {
		yyb3821 = yyj3821 > l
	} else {
		yyb3821 = r.CheckBreak()
	}
	if yyb3821 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3829 := &x.Command
		yym3830 := z.DecBinary()
		_ = yym3830
		if false {
		} else {
			z.F.DecSliceStringX(yyv3829, false, d)
		}
	}
	for {
		yyj3821++
		if yyhl3821 {
			yyb3821 = yyj3821 > l
		} else {
			yyb3821 = r.CheckBreak()
		}
		if yyb3821 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3821-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3831 := z.EncBinary()
		_ = yym3831
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3832 := !z.EncBinary()
			yy2arr3832 := z.EncBasicHandle().StructToArray
			var yyq3832 [3]bool
			_, _, _ = yysep3832, yyq3832, yy2arr3832
			const yyr3832 bool = false
			yyq3832[0] = x.Kind != ""
			yyq3832[1] = x.APIVersion != ""
			var yynn3832 int
			if yyr3832 || yy2arr3832 {
				r.EncodeArrayStart(3)
			} else {
				yynn3832 = 1
				for _, b := range yyq3832 {
					if b {
						yynn3832++
					}
				}
				r.EncodeMapStart(yynn3832)
				yynn3832 = 0
			}
			if yyr3832 || yy2arr3832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3832[0] {
					yym3834 := z.EncBinary()
					_ = yym3834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3832[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3835 := z.EncBinary()
					_ = yym3835
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3832 || yy2arr3832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3832[1] {
					yym3837 := z.EncBinary()
					_ = yym3837
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3832[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3838 := z.EncBinary()
					_ = yym3838
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3832 || yy2arr3832 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3840 := z.EncBinary()
				_ = yym3840
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3841 := z.EncBinary()
				_ = yym3841
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3832 || yy2arr3832 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3842 := z.DecBinary()
	_ = yym3842
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3843 := r.ContainerType()
		if yyct3843 == codecSelferValueTypeMap1234 {
			yyl3843 := r.ReadMapStart()
			if yyl3843 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3843, d)
			}
		} else if yyct3843 == codecSelferValueTypeArray1234 {
			yyl3843 := r.ReadArrayStart()
			if yyl3843 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3843, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3844Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3844Slc
	var yyhl3844 bool = l >= 0
	for yyj3844 := 0; ; yyj3844++ {
		if yyhl3844 {
			if yyj3844 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3844Slc = r.DecodeBytes(yys3844Slc, true, true)
		yys3844 := string(yys3844Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3844 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3844)
		} // end switch yys3844
	} // end for yyj3844
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3848 int
	var yyb3848 bool
	var yyhl3848 bool = l >= 0
	yyj3848++
	if yyhl3848 {
		yyb3848 = yyj3848 > l
	} else {
		yyb3848 = r.CheckBreak()
	}
	if yyb3848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3848++
	if yyhl3848 {
		yyb3848 = yyj3848 > l
	} else {
		yyb3848 = r.CheckBreak()
	}
	if yyb3848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3848++
	if yyhl3848 {
		yyb3848 = yyj3848 > l
	} else {
		yyb3848 = r.CheckBreak()
	}
	if yyb3848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3848++
		if yyhl3848 {
			yyb3848 = yyj3848 > l
		} else {
			yyb3848 = r.CheckBreak()
		}
		if yyb3848 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3848-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3852 := z.EncBinary()
		_ = yym3852
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3853 := !z.EncBinary()
			yy2arr3853 := z.EncBasicHandle().StructToArray
			var yyq3853 [3]bool
			_, _, _ = yysep3853, yyq3853, yy2arr3853
			const yyr3853 bool = false
			yyq3853[0] = x.Kind != ""
			yyq3853[1] = x.APIVersion != ""
			var yynn3853 int
			if yyr3853 || yy2arr3853 {
				r.EncodeArrayStart(3)
			} else {
				yynn3853 = 1
				for _, b := range yyq3853 {
					if b {
						yynn3853++
					}
				}
				r.EncodeMapStart(yynn3853)
				yynn3853 = 0
			}
			if yyr3853 || yy2arr3853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3853[0] {
					yym3855 := z.EncBinary()
					_ = yym3855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3853[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3856 := z.EncBinary()
					_ = yym3856
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3853 || yy2arr3853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3853[1] {
					yym3858 := z.EncBinary()
					_ = yym3858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3853[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3859 := z.EncBinary()
					_ = yym3859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3853 || yy2arr3853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3861 := z.EncBinary()
				_ = yym3861
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3862 := z.EncBinary()
				_ = yym3862
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3853 || yy2arr3853 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3863 := z.DecBinary()
	_ = yym3863
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3864 := r.ContainerType()
		if yyct3864 == codecSelferValueTypeMap1234 {
			yyl3864 := r.ReadMapStart()
			if yyl3864 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3864, d)
			}
		} else if yyct3864 == codecSelferValueTypeArray1234 {
			yyl3864 := r.ReadArrayStart()
			if yyl3864 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3864, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3865Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3865Slc
	var yyhl3865 bool = l >= 0
	for yyj3865 := 0; ; yyj3865++ {
		if yyhl3865 {
			if yyj3865 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3865Slc = r.DecodeBytes(yys3865Slc, true, true)
		yys3865 := string(yys3865Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3865 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3865)
		} // end switch yys3865
	} // end for yyj3865
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3869 int
	var yyb3869 bool
	var yyhl3869 bool = l >= 0
	yyj3869++
	if yyhl3869 {
		yyb3869 = yyj3869 > l
	} else {
		yyb3869 = r.CheckBreak()
	}
	if yyb3869 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3869++
	if yyhl3869 {
		yyb3869 = yyj3869 > l
	} else {
		yyb3869 = r.CheckBreak()
	}
	if yyb3869 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3869++
	if yyhl3869 {
		yyb3869 = yyj3869 > l
	} else {
		yyb3869 = r.CheckBreak()
	}
	if yyb3869 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3869++
		if yyhl3869 {
			yyb3869 = yyj3869 > l
		} else {
			yyb3869 = r.CheckBreak()
		}
		if yyb3869 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3869-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3873 := z.EncBinary()
		_ = yym3873
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3874 := !z.EncBinary()
			yy2arr3874 := z.EncBasicHandle().StructToArray
			var yyq3874 [3]bool
			_, _, _ = yysep3874, yyq3874, yy2arr3874
			const yyr3874 bool = false
			yyq3874[0] = x.Kind != ""
			yyq3874[1] = x.APIVersion != ""
			var yynn3874 int
			if yyr3874 || yy2arr3874 {
				r.EncodeArrayStart(3)
			} else {
				yynn3874 = 1
				for _, b := range yyq3874 {
					if b {
						yynn3874++
					}
				}
				r.EncodeMapStart(yynn3874)
				yynn3874 = 0
			}
			if yyr3874 || yy2arr3874 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3874[0] {
					yym3876 := z.EncBinary()
					_ = yym3876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3874[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3877 := z.EncBinary()
					_ = yym3877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3874 || yy2arr3874 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3874[1] {
					yym3879 := z.EncBinary()
					_ = yym3879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3874[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3880 := z.EncBinary()
					_ = yym3880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3874 || yy2arr3874 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3882 := z.EncBinary()
				_ = yym3882
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3883 := z.EncBinary()
				_ = yym3883
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3874 || yy2arr3874 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3884 := z.DecBinary()
	_ = yym3884
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3885 := r.ContainerType()
		if yyct3885 == codecSelferValueTypeMap1234 {
			yyl3885 := r.ReadMapStart()
			if yyl3885 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3885, d)
			}
		} else if yyct3885 == codecSelferValueTypeArray1234 {
			yyl3885 := r.ReadArrayStart()
			if yyl3885 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3885, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3886Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3886Slc
	var yyhl3886 bool = l >= 0
	for yyj3886 := 0; ; yyj3886++ {
		if yyhl3886 {
			if yyj3886 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3886Slc = r.DecodeBytes(yys3886Slc, true, true)
		yys3886 := string(yys3886Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3886 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3886)
		} // end switch yys3886
	} // end for yyj3886
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3890 int
	var yyb3890 bool
	var yyhl3890 bool = l >= 0
	yyj3890++
	if yyhl3890 {
		yyb3890 = yyj3890 > l
	} else {
		yyb3890 = r.CheckBreak()
	}
	if yyb3890 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3890++
	if yyhl3890 {
		yyb3890 = yyj3890 > l
	} else {
		yyb3890 = r.CheckBreak()
	}
	if yyb3890 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3890++
	if yyhl3890 {
		yyb3890 = yyj3890 > l
	} else {
		yyb3890 = r.CheckBreak()
	}
	if yyb3890 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3890++
		if yyhl3890 {
			yyb3890 = yyj3890 > l
		} else {
			yyb3890 = r.CheckBreak()
		}
		if yyb3890 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3890-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3894 := z.EncBinary()
		_ = yym3894
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3895 := !z.EncBinary()
			yy2arr3895 := z.EncBasicHandle().StructToArray
			var yyq3895 [5]bool
			_, _, _ = yysep3895, yyq3895, yy2arr3895
			const yyr3895 bool = false
			yyq3895[4] = x.Controller != nil
			var yynn3895 int
			if yyr3895 || yy2arr3895 {
				r.EncodeArrayStart(5)
			} else {
				yynn3895 = 4
				for _, b := range yyq3895 {
					if b {
						yynn3895++
					}
				}
				r.EncodeMapStart(yynn3895)
				yynn3895 = 0
			}
			if yyr3895 || yy2arr3895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3897 := z.EncBinary()
				_ = yym3897
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3898 := z.EncBinary()
				_ = yym3898
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3895 || yy2arr3895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3900 := z.EncBinary()
				_ = yym3900
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3901 := z.EncBinary()
				_ = yym3901
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3895 || yy2arr3895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3903 := z.EncBinary()
				_ = yym3903
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3904 := z.EncBinary()
				_ = yym3904
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3895 || yy2arr3895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3906 := z.EncBinary()
				_ = yym3906
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3907 := z.EncBinary()
				_ = yym3907
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3895 || yy2arr3895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3895[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3909 := *x.Controller
						yym3910 := z.EncBinary()
						_ = yym3910
						if false {
						} else {
							r.EncodeBool(bool(yy3909))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3895[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3911 := *x.Controller
						yym3912 := z.EncBinary()
						_ = yym3912
						if false {
						} else {
							r.EncodeBool(bool(yy3911))
						}
					}
				}
			}
			if yyr3895 || yy2arr3895 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3913 := z.DecBinary()
	_ = yym3913
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3914 := r.ContainerType()
		if yyct3914 == codecSelferValueTypeMap1234 {
			yyl3914 := r.ReadMapStart()
			if yyl3914 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3914, d)
			}
		} else if yyct3914 == codecSelferValueTypeArray1234 {
			yyl3914 := r.ReadArrayStart()
			if yyl3914 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3914, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3915Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3915Slc
	var yyhl3915 bool = l >= 0
	for yyj3915 := 0; ; yyj3915++ {
		if yyhl3915 {
			if yyj3915 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3915Slc = r.DecodeBytes(yys3915Slc, true, true)
		yys3915 := string(yys3915Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3915 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3921 := z.DecBinary()
				_ = yym3921
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3915)
		} // end switch yys3915
	} // end for yyj3915
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3922 int
	var yyb3922 bool
	var yyhl3922 bool = l >= 0
	yyj3922++
	if yyhl3922 {
		yyb3922 = yyj3922 > l
	} else {
		yyb3922 = r.CheckBreak()
	}
	if yyb3922 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3922++
	if yyhl3922 {
		yyb3922 = yyj3922 > l
	} else {
		yyb3922 = r.CheckBreak()
	}
	if yyb3922 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3922++
	if yyhl3922 {
		yyb3922 = yyj3922 > l
	} else {
		yyb3922 = r.CheckBreak()
	}
	if yyb3922 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3922++
	if yyhl3922 {
		yyb3922 = yyj3922 > l
	} else {
		yyb3922 = r.CheckBreak()
	}
	if yyb3922 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3922++
	if yyhl3922 {
		yyb3922 = yyj3922 > l
	} else {
		yyb3922 = r.CheckBreak()
	}
	if yyb3922 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3928 := z.DecBinary()
		_ = yym3928
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3922++
		if yyhl3922 {
			yyb3922 = yyj3922 > l
		} else {
			yyb3922 = r.CheckBreak()
		}
		if yyb3922 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3922-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3929 := z.EncBinary()
		_ = yym3929
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3930 := !z.EncBinary()
			yy2arr3930 := z.EncBasicHandle().StructToArray
			var yyq3930 [7]bool
			_, _, _ = yysep3930, yyq3930, yy2arr3930
			const yyr3930 bool = false
			yyq3930[0] = x.Kind != ""
			yyq3930[1] = x.Namespace != ""
			yyq3930[2] = x.Name != ""
			yyq3930[3] = x.UID != ""
			yyq3930[4] = x.APIVersion != ""
			yyq3930[5] = x.ResourceVersion != ""
			yyq3930[6] = x.FieldPath != ""
			var yynn3930 int
			if yyr3930 || yy2arr3930 {
				r.EncodeArrayStart(7)
			} else {
				yynn3930 = 0
				for _, b := range yyq3930 {
					if b {
						yynn3930++
					}
				}
				r.EncodeMapStart(yynn3930)
				yynn3930 = 0
			}
			if yyr3930 || yy2arr3930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3930[0] {
					yym3932 := z.EncBinary()
					_ = yym3932
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3930[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3933 := z.EncBinary()
					_ = yym3933
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3930 || yy2arr3930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3930[1] {
					yym3935 := z.EncBinary()
					_ = yym3935
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3930[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3936 := z.EncBinary()
					_ = yym3936
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3930 || yy2arr3930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3930[2] {
					yym3938 := z.EncBinary()
					_ = yym3938
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3930[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3939 := z.EncBinary()
					_ = yym3939
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3930 || yy2arr3930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3930[3] {
					yym3941 := z.EncBinary()
					_ = yym3941
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3930[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3942 := z.EncBinary()
					_ = yym3942
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3930 || yy2arr3930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3930[4] {
					yym3944 := z.EncBinary()
					_ = yym3944
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3930[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3945 := z.EncBinary()
					_ = yym3945
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3930 || yy2arr3930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3930[5] {
					yym3947 := z.EncBinary()
					_ = yym3947
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3930[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3948 := z.EncBinary()
					_ = yym3948
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3930 || yy2arr3930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3930[6] {
					yym3950 := z.EncBinary()
					_ = yym3950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3930[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3951 := z.EncBinary()
					_ = yym3951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3930 || yy2arr3930 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3952 := z.DecBinary()
	_ = yym3952
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3953 := r.ContainerType()
		if yyct3953 == codecSelferValueTypeMap1234 {
			yyl3953 := r.ReadMapStart()
			if yyl3953 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3953, d)
			}
		} else if yyct3953 == codecSelferValueTypeArray1234 {
			yyl3953 := r.ReadArrayStart()
			if yyl3953 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3953, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3954Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3954Slc
	var yyhl3954 bool = l >= 0
	for yyj3954 := 0; ; yyj3954++ {
		if yyhl3954 {
			if yyj3954 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3954Slc = r.DecodeBytes(yys3954Slc, true, true)
		yys3954 := string(yys3954Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3954 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3954)
		} // end switch yys3954
	} // end for yyj3954
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3962 int
	var yyb3962 bool
	var yyhl3962 bool = l >= 0
	yyj3962++
	if yyhl3962 {
		yyb3962 = yyj3962 > l
	} else {
		yyb3962 = r.CheckBreak()
	}
	if yyb3962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3962++
	if yyhl3962 {
		yyb3962 = yyj3962 > l
	} else {
		yyb3962 = r.CheckBreak()
	}
	if yyb3962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3962++
	if yyhl3962 {
		yyb3962 = yyj3962 > l
	} else {
		yyb3962 = r.CheckBreak()
	}
	if yyb3962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3962++
	if yyhl3962 {
		yyb3962 = yyj3962 > l
	} else {
		yyb3962 = r.CheckBreak()
	}
	if yyb3962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3962++
	if yyhl3962 {
		yyb3962 = yyj3962 > l
	} else {
		yyb3962 = r.CheckBreak()
	}
	if yyb3962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3962++
	if yyhl3962 {
		yyb3962 = yyj3962 > l
	} else {
		yyb3962 = r.CheckBreak()
	}
	if yyb3962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3962++
	if yyhl3962 {
		yyb3962 = yyj3962 > l
	} else {
		yyb3962 = r.CheckBreak()
	}
	if yyb3962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3962++
		if yyhl3962 {
			yyb3962 = yyj3962 > l
		} else {
			yyb3962 = r.CheckBreak()
		}
		if yyb3962 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3962-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3970 := z.EncBinary()
		_ = yym3970
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3971 := !z.EncBinary()
			yy2arr3971 := z.EncBasicHandle().StructToArray
			var yyq3971 [1]bool
			_, _, _ = yysep3971, yyq3971, yy2arr3971
			const yyr3971 bool = false
			var yynn3971 int
			if yyr3971 || yy2arr3971 {
				r.EncodeArrayStart(1)
			} else {
				yynn3971 = 1
				for _, b := range yyq3971 {
					if b {
						yynn3971++
					}
				}
				r.EncodeMapStart(yynn3971)
				yynn3971 = 0
			}
			if yyr3971 || yy2arr3971 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3973 := z.EncBinary()
				_ = yym3973
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3974 := z.EncBinary()
				_ = yym3974
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3971 || yy2arr3971 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3975 := z.DecBinary()
	_ = yym3975
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3976 := r.ContainerType()
		if yyct3976 == codecSelferValueTypeMap1234 {
			yyl3976 := r.ReadMapStart()
			if yyl3976 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3976, d)
			}
		} else if yyct3976 == codecSelferValueTypeArray1234 {
			yyl3976 := r.ReadArrayStart()
			if yyl3976 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3976, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3977Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3977Slc
	var yyhl3977 bool = l >= 0
	for yyj3977 := 0; ; yyj3977++ {
		if yyhl3977 {
			if yyj3977 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3977Slc = r.DecodeBytes(yys3977Slc, true, true)
		yys3977 := string(yys3977Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3977 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3977)
		} // end switch yys3977
	} // end for yyj3977
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3979 int
	var yyb3979 bool
	var yyhl3979 bool = l >= 0
	yyj3979++
	if yyhl3979 {
		yyb3979 = yyj3979 > l
	} else {
		yyb3979 = r.CheckBreak()
	}
	if yyb3979 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3979++
		if yyhl3979 {
			yyb3979 = yyj3979 > l
		} else {
			yyb3979 = r.CheckBreak()
		}
		if yyb3979 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3979-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3981 := z.EncBinary()
		_ = yym3981
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3982 := !z.EncBinary()
			yy2arr3982 := z.EncBasicHandle().StructToArray
			var yyq3982 [3]bool
			_, _, _ = yysep3982, yyq3982, yy2arr3982
			const yyr3982 bool = false
			yyq3982[0] = x.Kind != ""
			yyq3982[1] = x.APIVersion != ""
			yyq3982[2] = true
			var yynn3982 int
			if yyr3982 || yy2arr3982 {
				r.EncodeArrayStart(3)
			} else {
				yynn3982 = 0
				for _, b := range yyq3982 {
					if b {
						yynn3982++
					}
				}
				r.EncodeMapStart(yynn3982)
				yynn3982 = 0
			}
			if yyr3982 || yy2arr3982 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3982[0] {
					yym3984 := z.EncBinary()
					_ = yym3984
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3982[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3985 := z.EncBinary()
					_ = yym3985
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3982 || yy2arr3982 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3982[1] {
					yym3987 := z.EncBinary()
					_ = yym3987
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3982[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3988 := z.EncBinary()
					_ = yym3988
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3982 || yy2arr3982 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3982[2] {
					yy3990 := &x.Reference
					yy3990.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3982[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3991 := &x.Reference
					yy3991.CodecEncodeSelf(e)
				}
			}
			if yyr3982 || yy2arr3982 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3992 := z.DecBinary()
	_ = yym3992
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3993 := r.ContainerType()
		if yyct3993 == codecSelferValueTypeMap1234 {
			yyl3993 := r.ReadMapStart()
			if yyl3993 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3993, d)
			}
		} else if yyct3993 == codecSelferValueTypeArray1234 {
			yyl3993 := r.ReadArrayStart()
			if yyl3993 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3993, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3994Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3994Slc
	var yyhl3994 bool = l >= 0
	for yyj3994 := 0; ; yyj3994++ {
		if yyhl3994 {
			if yyj3994 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3994Slc = r.DecodeBytes(yys3994Slc, true, true)
		yys3994 := string(yys3994Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3994 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3997 := &x.Reference
				yyv3997.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3994)
		} // end switch yys3994
	} // end for yyj3994
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3998 int
	var yyb3998 bool
	var yyhl3998 bool = l >= 0
	yyj3998++
	if yyhl3998 {
		yyb3998 = yyj3998 > l
	} else {
		yyb3998 = r.CheckBreak()
	}
	if yyb3998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3998++
	if yyhl3998 {
		yyb3998 = yyj3998 > l
	} else {
		yyb3998 = r.CheckBreak()
	}
	if yyb3998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3998++
	if yyhl3998 {
		yyb3998 = yyj3998 > l
	} else {
		yyb3998 = r.CheckBreak()
	}
	if yyb3998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv4001 := &x.Reference
		yyv4001.CodecDecodeSelf(d)
	}
	for {
		yyj3998++
		if yyhl3998 {
			yyb3998 = yyj3998 > l
		} else {
			yyb3998 = r.CheckBreak()
		}
		if yyb3998 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3998-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4002 := z.EncBinary()
		_ = yym4002
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4003 := !z.EncBinary()
			yy2arr4003 := z.EncBasicHandle().StructToArray
			var yyq4003 [2]bool
			_, _, _ = yysep4003, yyq4003, yy2arr4003
			const yyr4003 bool = false
			yyq4003[0] = x.Component != ""
			yyq4003[1] = x.Host != ""
			var yynn4003 int
			if yyr4003 || yy2arr4003 {
				r.EncodeArrayStart(2)
			} else {
				yynn4003 = 0
				for _, b := range yyq4003 {
					if b {
						yynn4003++
					}
				}
				r.EncodeMapStart(yynn4003)
				yynn4003 = 0
			}
			if yyr4003 || yy2arr4003 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4003[0] {
					yym4005 := z.EncBinary()
					_ = yym4005
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4003[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4006 := z.EncBinary()
					_ = yym4006
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr4003 || yy2arr4003 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4003[1] {
					yym4008 := z.EncBinary()
					_ = yym4008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4003[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4009 := z.EncBinary()
					_ = yym4009
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr4003 || yy2arr4003 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4010 := z.DecBinary()
	_ = yym4010
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4011 := r.ContainerType()
		if yyct4011 == codecSelferValueTypeMap1234 {
			yyl4011 := r.ReadMapStart()
			if yyl4011 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4011, d)
			}
		} else if yyct4011 == codecSelferValueTypeArray1234 {
			yyl4011 := r.ReadArrayStart()
			if yyl4011 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4011, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4012Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4012Slc
	var yyhl4012 bool = l >= 0
	for yyj4012 := 0; ; yyj4012++ {
		if yyhl4012 {
			if yyj4012 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4012Slc = r.DecodeBytes(yys4012Slc, true, true)
		yys4012 := string(yys4012Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4012 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4012)
		} // end switch yys4012
	} // end for yyj4012
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4015 int
	var yyb4015 bool
	var yyhl4015 bool = l >= 0
	yyj4015++
	if yyhl4015 {
		yyb4015 = yyj4015 > l
	} else {
		yyb4015 = r.CheckBreak()
	}
	if yyb4015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj4015++
	if yyhl4015 {
		yyb4015 = yyj4015 > l
	} else {
		yyb4015 = r.CheckBreak()
	}
	if yyb4015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj4015++
		if yyhl4015 {
			yyb4015 = yyj4015 > l
		} else {
			yyb4015 = r.CheckBreak()
		}
		if yyb4015 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4015-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4018 := z.EncBinary()
		_ = yym4018
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4019 := !z.EncBinary()
			yy2arr4019 := z.EncBasicHandle().StructToArray
			var yyq4019 [11]bool
			_, _, _ = yysep4019, yyq4019, yy2arr4019
			const yyr4019 bool = false
			yyq4019[0] = x.Kind != ""
			yyq4019[1] = x.APIVersion != ""
			yyq4019[2] = true
			yyq4019[3] = true
			yyq4019[4] = x.Reason != ""
			yyq4019[5] = x.Message != ""
			yyq4019[6] = true
			yyq4019[7] = true
			yyq4019[8] = true
			yyq4019[9] = x.Count != 0
			yyq4019[10] = x.Type != ""
			var yynn4019 int
			if yyr4019 || yy2arr4019 {
				r.EncodeArrayStart(11)
			} else {
				yynn4019 = 0
				for _, b := range yyq4019 {
					if b {
						yynn4019++
					}
				}
				r.EncodeMapStart(yynn4019)
				yynn4019 = 0
			}
			if yyr4019 || yy2arr4019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4019[0] {
					yym4021 := z.EncBinary()
					_ = yym4021
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4019[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4022 := z.EncBinary()
					_ = yym4022
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4019 || yy2arr4019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4019[1] {
					yym4024 := z.EncBinary()
					_ = yym4024
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4019[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4025 := z.EncBinary()
					_ = yym4025
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4019 || yy2arr4019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4019[2] {
					yy4027 := &x.ObjectMeta
					yy4027.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4019[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4028 := &x.ObjectMeta
					yy4028.CodecEncodeSelf(e)
				}
			}
			if yyr4019 || yy2arr4019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4019[3] {
					yy4030 := &x.InvolvedObject
					yy4030.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4019[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4031 := &x.InvolvedObject
					yy4031.CodecEncodeSelf(e)
				}
			}
			if yyr4019 || yy2arr4019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4019[4] {
					yym4033 := z.EncBinary()
					_ = yym4033
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4019[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4034 := z.EncBinary()
					_ = yym4034
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr4019 || yy2arr4019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4019[5] {
					yym4036 := z.EncBinary()
					_ = yym4036
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4019[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4037 := z.EncBinary()
					_ = yym4037
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4019 || yy2arr4019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4019[6] {
					yy4039 := &x.Source
					yy4039.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4019[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4040 := &x.Source
					yy4040.CodecEncodeSelf(e)
				}
			}
			if yyr4019 || yy2arr4019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4019[7] {
					yy4042 := &x.FirstTimestamp
					yym4043 := z.EncBinary()
					_ = yym4043
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4042) {
					} else if yym4043 {
						z.EncBinaryMarshal(yy4042)
					} else if !yym4043 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy4042)
					} else {
						z.EncFallback(yy4042)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4019[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4044 := &x.FirstTimestamp
					yym4045 := z.EncBinary()
					_ = yym4045
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4044) {
					} else if yym4045 {
						z.EncBinaryMarshal(yy4044)
					} else if !yym4045 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy4044)
					} else {
						z.EncFallback(yy4044)
					}
				}
			}
			if yyr4019 || yy2arr4019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4019[8] {
					yy4047 := &x.LastTimestamp
					yym4048 := z.EncBinary()
					_ = yym4048
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4047) {
					} else if yym4048 {
						z.EncBinaryMarshal(yy4047)
					} else if !yym4048 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy4047)
					} else {
						z.EncFallback(yy4047)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4019[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4049 := &x.LastTimestamp
					yym4050 := z.EncBinary()
					_ = yym4050
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4049) {
					} else if yym4050 {
						z.EncBinaryMarshal(yy4049)
					} else if !yym4050 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy4049)
					} else {
						z.EncFallback(yy4049)
					}
				}
			}
			if yyr4019 || yy2arr4019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4019[9] {
					yym4052 := z.EncBinary()
					_ = yym4052
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq4019[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4053 := z.EncBinary()
					_ = yym4053
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr4019 || yy2arr4019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4019[10] {
					yym4055 := z.EncBinary()
					_ = yym4055
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4019[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4056 := z.EncBinary()
					_ = yym4056
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4019 || yy2arr4019 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4057 := z.DecBinary()
	_ = yym4057
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4058 := r.ContainerType()
		if yyct4058 == codecSelferValueTypeMap1234 {
			yyl4058 := r.ReadMapStart()
			if yyl4058 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4058, d)
			}
		} else if yyct4058 == codecSelferValueTypeArray1234 {
			yyl4058 := r.ReadArrayStart()
			if yyl4058 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4058, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4059Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4059Slc
	var yyhl4059 bool = l >= 0
	for yyj4059 := 0; ; yyj4059++ {
		if yyhl4059 {
			if yyj4059 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4059Slc = r.DecodeBytes(yys4059Slc, true, true)
		yys4059 := string(yys4059Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4059 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4062 := &x.ObjectMeta
				yyv4062.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv4063 := &x.InvolvedObject
				yyv4063.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv4066 := &x.Source
				yyv4066.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv4067 := &x.FirstTimestamp
				yym4068 := z.DecBinary()
				_ = yym4068
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4067) {
				} else if yym4068 {
					z.DecBinaryUnmarshal(yyv4067)
				} else if !yym4068 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4067)
				} else {
					z.DecFallback(yyv4067, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv4069 := &x.LastTimestamp
				yym4070 := z.DecBinary()
				_ = yym4070
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4069) {
				} else if yym4070 {
					z.DecBinaryUnmarshal(yyv4069)
				} else if !yym4070 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4069)
				} else {
					z.DecFallback(yyv4069, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4059)
		} // end switch yys4059
	} // end for yyj4059
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4073 int
	var yyb4073 bool
	var yyhl4073 bool = l >= 0
	yyj4073++
	if yyhl4073 {
		yyb4073 = yyj4073 > l
	} else {
		yyb4073 = r.CheckBreak()
	}
	if yyb4073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4073++
	if yyhl4073 {
		yyb4073 = yyj4073 > l
	} else {
		yyb4073 = r.CheckBreak()
	}
	if yyb4073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4073++
	if yyhl4073 {
		yyb4073 = yyj4073 > l
	} else {
		yyb4073 = r.CheckBreak()
	}
	if yyb4073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4076 := &x.ObjectMeta
		yyv4076.CodecDecodeSelf(d)
	}
	yyj4073++
	if yyhl4073 {
		yyb4073 = yyj4073 > l
	} else {
		yyb4073 = r.CheckBreak()
	}
	if yyb4073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv4077 := &x.InvolvedObject
		yyv4077.CodecDecodeSelf(d)
	}
	yyj4073++
	if yyhl4073 {
		yyb4073 = yyj4073 > l
	} else {
		yyb4073 = r.CheckBreak()
	}
	if yyb4073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj4073++
	if yyhl4073 {
		yyb4073 = yyj4073 > l
	} else {
		yyb4073 = r.CheckBreak()
	}
	if yyb4073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4073++
	if yyhl4073 {
		yyb4073 = yyj4073 > l
	} else {
		yyb4073 = r.CheckBreak()
	}
	if yyb4073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv4080 := &x.Source
		yyv4080.CodecDecodeSelf(d)
	}
	yyj4073++
	if yyhl4073 {
		yyb4073 = yyj4073 > l
	} else {
		yyb4073 = r.CheckBreak()
	}
	if yyb4073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv4081 := &x.FirstTimestamp
		yym4082 := z.DecBinary()
		_ = yym4082
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4081) {
		} else if yym4082 {
			z.DecBinaryUnmarshal(yyv4081)
		} else if !yym4082 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv4081)
		} else {
			z.DecFallback(yyv4081, false)
		}
	}
	yyj4073++
	if yyhl4073 {
		yyb4073 = yyj4073 > l
	} else {
		yyb4073 = r.CheckBreak()
	}
	if yyb4073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv4083 := &x.LastTimestamp
		yym4084 := z.DecBinary()
		_ = yym4084
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4083) {
		} else if yym4084 {
			z.DecBinaryUnmarshal(yyv4083)
		} else if !yym4084 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv4083)
		} else {
			z.DecFallback(yyv4083, false)
		}
	}
	yyj4073++
	if yyhl4073 {
		yyb4073 = yyj4073 > l
	} else {
		yyb4073 = r.CheckBreak()
	}
	if yyb4073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj4073++
	if yyhl4073 {
		yyb4073 = yyj4073 > l
	} else {
		yyb4073 = r.CheckBreak()
	}
	if yyb4073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj4073++
		if yyhl4073 {
			yyb4073 = yyj4073 > l
		} else {
			yyb4073 = r.CheckBreak()
		}
		if yyb4073 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4073-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4087 := z.EncBinary()
		_ = yym4087
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4088 := !z.EncBinary()
			yy2arr4088 := z.EncBasicHandle().StructToArray
			var yyq4088 [4]bool
			_, _, _ = yysep4088, yyq4088, yy2arr4088
			const yyr4088 bool = false
			yyq4088[0] = x.Kind != ""
			yyq4088[1] = x.APIVersion != ""
			yyq4088[2] = true
			var yynn4088 int
			if yyr4088 || yy2arr4088 {
				r.EncodeArrayStart(4)
			} else {
				yynn4088 = 1
				for _, b := range yyq4088 {
					if b {
						yynn4088++
					}
				}
				r.EncodeMapStart(yynn4088)
				yynn4088 = 0
			}
			if yyr4088 || yy2arr4088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4088[0] {
					yym4090 := z.EncBinary()
					_ = yym4090
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4088[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4091 := z.EncBinary()
					_ = yym4091
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4088 || yy2arr4088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4088[1] {
					yym4093 := z.EncBinary()
					_ = yym4093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4088[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4094 := z.EncBinary()
					_ = yym4094
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4088 || yy2arr4088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4088[2] {
					yy4096 := &x.ListMeta
					yym4097 := z.EncBinary()
					_ = yym4097
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4096) {
					} else {
						z.EncFallback(yy4096)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4088[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4098 := &x.ListMeta
					yym4099 := z.EncBinary()
					_ = yym4099
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4098) {
					} else {
						z.EncFallback(yy4098)
					}
				}
			}
			if yyr4088 || yy2arr4088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4101 := z.EncBinary()
					_ = yym4101
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4102 := z.EncBinary()
					_ = yym4102
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr4088 || yy2arr4088 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4103 := z.DecBinary()
	_ = yym4103
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4104 := r.ContainerType()
		if yyct4104 == codecSelferValueTypeMap1234 {
			yyl4104 := r.ReadMapStart()
			if yyl4104 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4104, d)
			}
		} else if yyct4104 == codecSelferValueTypeArray1234 {
			yyl4104 := r.ReadArrayStart()
			if yyl4104 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4104, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4105Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4105Slc
	var yyhl4105 bool = l >= 0
	for yyj4105 := 0; ; yyj4105++ {
		if yyhl4105 {
			if yyj4105 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4105Slc = r.DecodeBytes(yys4105Slc, true, true)
		yys4105 := string(yys4105Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4105 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4108 := &x.ListMeta
				yym4109 := z.DecBinary()
				_ = yym4109
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4108) {
				} else {
					z.DecFallback(yyv4108, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4110 := &x.Items
				yym4111 := z.DecBinary()
				_ = yym4111
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv4110), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4105)
		} // end switch yys4105
	} // end for yyj4105
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4112 int
	var yyb4112 bool
	var yyhl4112 bool = l >= 0
	yyj4112++
	if yyhl4112 {
		yyb4112 = yyj4112 > l
	} else {
		yyb4112 = r.CheckBreak()
	}
	if yyb4112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4112++
	if yyhl4112 {
		yyb4112 = yyj4112 > l
	} else {
		yyb4112 = r.CheckBreak()
	}
	if yyb4112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4112++
	if yyhl4112 {
		yyb4112 = yyj4112 > l
	} else {
		yyb4112 = r.CheckBreak()
	}
	if yyb4112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4115 := &x.ListMeta
		yym4116 := z.DecBinary()
		_ = yym4116
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4115) {
		} else {
			z.DecFallback(yyv4115, false)
		}
	}
	yyj4112++
	if yyhl4112 {
		yyb4112 = yyj4112 > l
	} else {
		yyb4112 = r.CheckBreak()
	}
	if yyb4112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4117 := &x.Items
		yym4118 := z.DecBinary()
		_ = yym4118
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv4117), d)
		}
	}
	for {
		yyj4112++
		if yyhl4112 {
			yyb4112 = yyj4112 > l
		} else {
			yyb4112 = r.CheckBreak()
		}
		if yyb4112 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4112-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4119 := z.EncBinary()
		_ = yym4119
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4120 := !z.EncBinary()
			yy2arr4120 := z.EncBasicHandle().StructToArray
			var yyq4120 [4]bool
			_, _, _ = yysep4120, yyq4120, yy2arr4120
			const yyr4120 bool = false
			yyq4120[0] = x.Kind != ""
			yyq4120[1] = x.APIVersion != ""
			yyq4120[2] = true
			var yynn4120 int
			if yyr4120 || yy2arr4120 {
				r.EncodeArrayStart(4)
			} else {
				yynn4120 = 1
				for _, b := range yyq4120 {
					if b {
						yynn4120++
					}
				}
				r.EncodeMapStart(yynn4120)
				yynn4120 = 0
			}
			if yyr4120 || yy2arr4120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4120[0] {
					yym4122 := z.EncBinary()
					_ = yym4122
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4120[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4123 := z.EncBinary()
					_ = yym4123
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4120 || yy2arr4120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4120[1] {
					yym4125 := z.EncBinary()
					_ = yym4125
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4120[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4126 := z.EncBinary()
					_ = yym4126
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4120 || yy2arr4120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4120[2] {
					yy4128 := &x.ListMeta
					yym4129 := z.EncBinary()
					_ = yym4129
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4128) {
					} else {
						z.EncFallback(yy4128)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4120[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4130 := &x.ListMeta
					yym4131 := z.EncBinary()
					_ = yym4131
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4130) {
					} else {
						z.EncFallback(yy4130)
					}
				}
			}
			if yyr4120 || yy2arr4120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4133 := z.EncBinary()
					_ = yym4133
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4134 := z.EncBinary()
					_ = yym4134
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr4120 || yy2arr4120 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4135 := z.DecBinary()
	_ = yym4135
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4136 := r.ContainerType()
		if yyct4136 == codecSelferValueTypeMap1234 {
			yyl4136 := r.ReadMapStart()
			if yyl4136 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4136, d)
			}
		} else if yyct4136 == codecSelferValueTypeArray1234 {
			yyl4136 := r.ReadArrayStart()
			if yyl4136 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4136, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4137Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4137Slc
	var yyhl4137 bool = l >= 0
	for yyj4137 := 0; ; yyj4137++ {
		if yyhl4137 {
			if yyj4137 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4137Slc = r.DecodeBytes(yys4137Slc, true, true)
		yys4137 := string(yys4137Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4137 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4140 := &x.ListMeta
				yym4141 := z.DecBinary()
				_ = yym4141
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4140) {
				} else {
					z.DecFallback(yyv4140, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4142 := &x.Items
				yym4143 := z.DecBinary()
				_ = yym4143
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv4142), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4137)
		} // end switch yys4137
	} // end for yyj4137
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4144 int
	var yyb4144 bool
	var yyhl4144 bool = l >= 0
	yyj4144++
	if yyhl4144 {
		yyb4144 = yyj4144 > l
	} else {
		yyb4144 = r.CheckBreak()
	}
	if yyb4144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4144++
	if yyhl4144 {
		yyb4144 = yyj4144 > l
	} else {
		yyb4144 = r.CheckBreak()
	}
	if yyb4144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4144++
	if yyhl4144 {
		yyb4144 = yyj4144 > l
	} else {
		yyb4144 = r.CheckBreak()
	}
	if yyb4144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4147 := &x.ListMeta
		yym4148 := z.DecBinary()
		_ = yym4148
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4147) {
		} else {
			z.DecFallback(yyv4147, false)
		}
	}
	yyj4144++
	if yyhl4144 {
		yyb4144 = yyj4144 > l
	} else {
		yyb4144 = r.CheckBreak()
	}
	if yyb4144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4149 := &x.Items
		yym4150 := z.DecBinary()
		_ = yym4150
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv4149), d)
		}
	}
	for {
		yyj4144++
		if yyhl4144 {
			yyb4144 = yyj4144 > l
		} else {
			yyb4144 = r.CheckBreak()
		}
		if yyb4144 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4144-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4151 := z.EncBinary()
	_ = yym4151
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4152 := z.DecBinary()
	_ = yym4152
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4153 := z.EncBinary()
		_ = yym4153
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4154 := !z.EncBinary()
			yy2arr4154 := z.EncBasicHandle().StructToArray
			var yyq4154 [6]bool
			_, _, _ = yysep4154, yyq4154, yy2arr4154
			const yyr4154 bool = false
			yyq4154[0] = x.Type != ""
			yyq4154[1] = len(x.Max) != 0
			yyq4154[2] = len(x.Min) != 0
			yyq4154[3] = len(x.Default) != 0
			yyq4154[4] = len(x.DefaultRequest) != 0
			yyq4154[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn4154 int
			if yyr4154 || yy2arr4154 {
				r.EncodeArrayStart(6)
			} else {
				yynn4154 = 0
				for _, b := range yyq4154 {
					if b {
						yynn4154++
					}
				}
				r.EncodeMapStart(yynn4154)
				yynn4154 = 0
			}
			if yyr4154 || yy2arr4154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4154[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4154[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4154 || yy2arr4154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4154[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4154[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4154 || yy2arr4154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4154[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4154[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4154 || yy2arr4154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4154[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4154[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4154 || yy2arr4154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4154[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4154[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4154 || yy2arr4154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4154[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4154[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4154 || yy2arr4154 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4161 := z.DecBinary()
	_ = yym4161
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4162 := r.ContainerType()
		if yyct4162 == codecSelferValueTypeMap1234 {
			yyl4162 := r.ReadMapStart()
			if yyl4162 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4162, d)
			}
		} else if yyct4162 == codecSelferValueTypeArray1234 {
			yyl4162 := r.ReadArrayStart()
			if yyl4162 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4162, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4163Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4163Slc
	var yyhl4163 bool = l >= 0
	for yyj4163 := 0; ; yyj4163++ {
		if yyhl4163 {
			if yyj4163 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4163Slc = r.DecodeBytes(yys4163Slc, true, true)
		yys4163 := string(yys4163Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4163 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv4165 := &x.Max
				yyv4165.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv4166 := &x.Min
				yyv4166.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv4167 := &x.Default
				yyv4167.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv4168 := &x.DefaultRequest
				yyv4168.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv4169 := &x.MaxLimitRequestRatio
				yyv4169.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4163)
		} // end switch yys4163
	} // end for yyj4163
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4170 int
	var yyb4170 bool
	var yyhl4170 bool = l >= 0
	yyj4170++
	if yyhl4170 {
		yyb4170 = yyj4170 > l
	} else {
		yyb4170 = r.CheckBreak()
	}
	if yyb4170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj4170++
	if yyhl4170 {
		yyb4170 = yyj4170 > l
	} else {
		yyb4170 = r.CheckBreak()
	}
	if yyb4170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv4172 := &x.Max
		yyv4172.CodecDecodeSelf(d)
	}
	yyj4170++
	if yyhl4170 {
		yyb4170 = yyj4170 > l
	} else {
		yyb4170 = r.CheckBreak()
	}
	if yyb4170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv4173 := &x.Min
		yyv4173.CodecDecodeSelf(d)
	}
	yyj4170++
	if yyhl4170 {
		yyb4170 = yyj4170 > l
	} else {
		yyb4170 = r.CheckBreak()
	}
	if yyb4170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv4174 := &x.Default
		yyv4174.CodecDecodeSelf(d)
	}
	yyj4170++
	if yyhl4170 {
		yyb4170 = yyj4170 > l
	} else {
		yyb4170 = r.CheckBreak()
	}
	if yyb4170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv4175 := &x.DefaultRequest
		yyv4175.CodecDecodeSelf(d)
	}
	yyj4170++
	if yyhl4170 {
		yyb4170 = yyj4170 > l
	} else {
		yyb4170 = r.CheckBreak()
	}
	if yyb4170 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv4176 := &x.MaxLimitRequestRatio
		yyv4176.CodecDecodeSelf(d)
	}
	for {
		yyj4170++
		if yyhl4170 {
			yyb4170 = yyj4170 > l
		} else {
			yyb4170 = r.CheckBreak()
		}
		if yyb4170 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4170-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4177 := z.EncBinary()
		_ = yym4177
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4178 := !z.EncBinary()
			yy2arr4178 := z.EncBasicHandle().StructToArray
			var yyq4178 [1]bool
			_, _, _ = yysep4178, yyq4178, yy2arr4178
			const yyr4178 bool = false
			var yynn4178 int
			if yyr4178 || yy2arr4178 {
				r.EncodeArrayStart(1)
			} else {
				yynn4178 = 1
				for _, b := range yyq4178 {
					if b {
						yynn4178++
					}
				}
				r.EncodeMapStart(yynn4178)
				yynn4178 = 0
			}
			if yyr4178 || yy2arr4178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4180 := z.EncBinary()
					_ = yym4180
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4181 := z.EncBinary()
					_ = yym4181
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr4178 || yy2arr4178 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4182 := z.DecBinary()
	_ = yym4182
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4183 := r.ContainerType()
		if yyct4183 == codecSelferValueTypeMap1234 {
			yyl4183 := r.ReadMapStart()
			if yyl4183 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4183, d)
			}
		} else if yyct4183 == codecSelferValueTypeArray1234 {
			yyl4183 := r.ReadArrayStart()
			if yyl4183 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4183, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4184Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4184Slc
	var yyhl4184 bool = l >= 0
	for yyj4184 := 0; ; yyj4184++ {
		if yyhl4184 {
			if yyj4184 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4184Slc = r.DecodeBytes(yys4184Slc, true, true)
		yys4184 := string(yys4184Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4184 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv4185 := &x.Limits
				yym4186 := z.DecBinary()
				_ = yym4186
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4185), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4184)
		} // end switch yys4184
	} // end for yyj4184
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4187 int
	var yyb4187 bool
	var yyhl4187 bool = l >= 0
	yyj4187++
	if yyhl4187 {
		yyb4187 = yyj4187 > l
	} else {
		yyb4187 = r.CheckBreak()
	}
	if yyb4187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv4188 := &x.Limits
		yym4189 := z.DecBinary()
		_ = yym4189
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4188), d)
		}
	}
	for {
		yyj4187++
		if yyhl4187 {
			yyb4187 = yyj4187 > l
		} else {
			yyb4187 = r.CheckBreak()
		}
		if yyb4187 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4187-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4190 := z.EncBinary()
		_ = yym4190
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4191 := !z.EncBinary()
			yy2arr4191 := z.EncBasicHandle().StructToArray
			var yyq4191 [4]bool
			_, _, _ = yysep4191, yyq4191, yy2arr4191
			const yyr4191 bool = false
			yyq4191[0] = x.Kind != ""
			yyq4191[1] = x.APIVersion != ""
			yyq4191[2] = true
			yyq4191[3] = true
			var yynn4191 int
			if yyr4191 || yy2arr4191 {
				r.EncodeArrayStart(4)
			} else {
				yynn4191 = 0
				for _, b := range yyq4191 {
					if b {
						yynn4191++
					}
				}
				r.EncodeMapStart(yynn4191)
				yynn4191 = 0
			}
			if yyr4191 || yy2arr4191 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4191[0] {
					yym4193 := z.EncBinary()
					_ = yym4193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4191[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4194 := z.EncBinary()
					_ = yym4194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4191 || yy2arr4191 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4191[1] {
					yym4196 := z.EncBinary()
					_ = yym4196
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4191[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4197 := z.EncBinary()
					_ = yym4197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4191 || yy2arr4191 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4191[2] {
					yy4199 := &x.ObjectMeta
					yy4199.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4191[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4200 := &x.ObjectMeta
					yy4200.CodecEncodeSelf(e)
				}
			}
			if yyr4191 || yy2arr4191 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4191[3] {
					yy4202 := &x.Spec
					yy4202.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4191[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4203 := &x.Spec
					yy4203.CodecEncodeSelf(e)
				}
			}
			if yyr4191 || yy2arr4191 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4204 := z.DecBinary()
	_ = yym4204
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4205 := r.ContainerType()
		if yyct4205 == codecSelferValueTypeMap1234 {
			yyl4205 := r.ReadMapStart()
			if yyl4205 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4205, d)
			}
		} else if yyct4205 == codecSelferValueTypeArray1234 {
			yyl4205 := r.ReadArrayStart()
			if yyl4205 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4205, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4206Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4206Slc
	var yyhl4206 bool = l >= 0
	for yyj4206 := 0; ; yyj4206++ {
		if yyhl4206 {
			if yyj4206 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4206Slc = r.DecodeBytes(yys4206Slc, true, true)
		yys4206 := string(yys4206Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4206 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4209 := &x.ObjectMeta
				yyv4209.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv4210 := &x.Spec
				yyv4210.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4206)
		} // end switch yys4206
	} // end for yyj4206
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4211 int
	var yyb4211 bool
	var yyhl4211 bool = l >= 0
	yyj4211++
	if yyhl4211 {
		yyb4211 = yyj4211 > l
	} else {
		yyb4211 = r.CheckBreak()
	}
	if yyb4211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4211++
	if yyhl4211 {
		yyb4211 = yyj4211 > l
	} else {
		yyb4211 = r.CheckBreak()
	}
	if yyb4211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4211++
	if yyhl4211 {
		yyb4211 = yyj4211 > l
	} else {
		yyb4211 = r.CheckBreak()
	}
	if yyb4211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4214 := &x.ObjectMeta
		yyv4214.CodecDecodeSelf(d)
	}
	yyj4211++
	if yyhl4211 {
		yyb4211 = yyj4211 > l
	} else {
		yyb4211 = r.CheckBreak()
	}
	if yyb4211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv4215 := &x.Spec
		yyv4215.CodecDecodeSelf(d)
	}
	for {
		yyj4211++
		if yyhl4211 {
			yyb4211 = yyj4211 > l
		} else {
			yyb4211 = r.CheckBreak()
		}
		if yyb4211 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4211-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4216 := z.EncBinary()
		_ = yym4216
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4217 := !z.EncBinary()
			yy2arr4217 := z.EncBasicHandle().StructToArray
			var yyq4217 [4]bool
			_, _, _ = yysep4217, yyq4217, yy2arr4217
			const yyr4217 bool = false
			yyq4217[0] = x.Kind != ""
			yyq4217[1] = x.APIVersion != ""
			yyq4217[2] = true
			var yynn4217 int
			if yyr4217 || yy2arr4217 {
				r.EncodeArrayStart(4)
			} else {
				yynn4217 = 1
				for _, b := range yyq4217 {
					if b {
						yynn4217++
					}
				}
				r.EncodeMapStart(yynn4217)
				yynn4217 = 0
			}
			if yyr4217 || yy2arr4217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4217[0] {
					yym4219 := z.EncBinary()
					_ = yym4219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4217[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4220 := z.EncBinary()
					_ = yym4220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4217 || yy2arr4217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4217[1] {
					yym4222 := z.EncBinary()
					_ = yym4222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4217[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4223 := z.EncBinary()
					_ = yym4223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4217 || yy2arr4217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4217[2] {
					yy4225 := &x.ListMeta
					yym4226 := z.EncBinary()
					_ = yym4226
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4225) {
					} else {
						z.EncFallback(yy4225)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4217[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4227 := &x.ListMeta
					yym4228 := z.EncBinary()
					_ = yym4228
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4227) {
					} else {
						z.EncFallback(yy4227)
					}
				}
			}
			if yyr4217 || yy2arr4217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4230 := z.EncBinary()
					_ = yym4230
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4231 := z.EncBinary()
					_ = yym4231
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr4217 || yy2arr4217 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4232 := z.DecBinary()
	_ = yym4232
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4233 := r.ContainerType()
		if yyct4233 == codecSelferValueTypeMap1234 {
			yyl4233 := r.ReadMapStart()
			if yyl4233 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4233, d)
			}
		} else if yyct4233 == codecSelferValueTypeArray1234 {
			yyl4233 := r.ReadArrayStart()
			if yyl4233 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4233, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4234Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4234Slc
	var yyhl4234 bool = l >= 0
	for yyj4234 := 0; ; yyj4234++ {
		if yyhl4234 {
			if yyj4234 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4234Slc = r.DecodeBytes(yys4234Slc, true, true)
		yys4234 := string(yys4234Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4234 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4237 := &x.ListMeta
				yym4238 := z.DecBinary()
				_ = yym4238
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4237) {
				} else {
					z.DecFallback(yyv4237, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4239 := &x.Items
				yym4240 := z.DecBinary()
				_ = yym4240
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv4239), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4234)
		} // end switch yys4234
	} // end for yyj4234
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4241 int
	var yyb4241 bool
	var yyhl4241 bool = l >= 0
	yyj4241++
	if yyhl4241 {
		yyb4241 = yyj4241 > l
	} else {
		yyb4241 = r.CheckBreak()
	}
	if yyb4241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4241++
	if yyhl4241 {
		yyb4241 = yyj4241 > l
	} else {
		yyb4241 = r.CheckBreak()
	}
	if yyb4241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4241++
	if yyhl4241 {
		yyb4241 = yyj4241 > l
	} else {
		yyb4241 = r.CheckBreak()
	}
	if yyb4241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4244 := &x.ListMeta
		yym4245 := z.DecBinary()
		_ = yym4245
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4244) {
		} else {
			z.DecFallback(yyv4244, false)
		}
	}
	yyj4241++
	if yyhl4241 {
		yyb4241 = yyj4241 > l
	} else {
		yyb4241 = r.CheckBreak()
	}
	if yyb4241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4246 := &x.Items
		yym4247 := z.DecBinary()
		_ = yym4247
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv4246), d)
		}
	}
	for {
		yyj4241++
		if yyhl4241 {
			yyb4241 = yyj4241 > l
		} else {
			yyb4241 = r.CheckBreak()
		}
		if yyb4241 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4241-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4248 := z.EncBinary()
	_ = yym4248
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4249 := z.DecBinary()
	_ = yym4249
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4250 := z.EncBinary()
		_ = yym4250
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4251 := !z.EncBinary()
			yy2arr4251 := z.EncBasicHandle().StructToArray
			var yyq4251 [2]bool
			_, _, _ = yysep4251, yyq4251, yy2arr4251
			const yyr4251 bool = false
			yyq4251[0] = len(x.Hard) != 0
			yyq4251[1] = len(x.Scopes) != 0
			var yynn4251 int
			if yyr4251 || yy2arr4251 {
				r.EncodeArrayStart(2)
			} else {
				yynn4251 = 0
				for _, b := range yyq4251 {
					if b {
						yynn4251++
					}
				}
				r.EncodeMapStart(yynn4251)
				yynn4251 = 0
			}
			if yyr4251 || yy2arr4251 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4251[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4251[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4251 || yy2arr4251 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4251[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4254 := z.EncBinary()
						_ = yym4254
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4251[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4255 := z.EncBinary()
						_ = yym4255
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr4251 || yy2arr4251 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4256 := z.DecBinary()
	_ = yym4256
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4257 := r.ContainerType()
		if yyct4257 == codecSelferValueTypeMap1234 {
			yyl4257 := r.ReadMapStart()
			if yyl4257 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4257, d)
			}
		} else if yyct4257 == codecSelferValueTypeArray1234 {
			yyl4257 := r.ReadArrayStart()
			if yyl4257 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4257, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4258Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4258Slc
	var yyhl4258 bool = l >= 0
	for yyj4258 := 0; ; yyj4258++ {
		if yyhl4258 {
			if yyj4258 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4258Slc = r.DecodeBytes(yys4258Slc, true, true)
		yys4258 := string(yys4258Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4258 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4259 := &x.Hard
				yyv4259.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv4260 := &x.Scopes
				yym4261 := z.DecBinary()
				_ = yym4261
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4260), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4258)
		} // end switch yys4258
	} // end for yyj4258
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4262 int
	var yyb4262 bool
	var yyhl4262 bool = l >= 0
	yyj4262++
	if yyhl4262 {
		yyb4262 = yyj4262 > l
	} else {
		yyb4262 = r.CheckBreak()
	}
	if yyb4262 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4263 := &x.Hard
		yyv4263.CodecDecodeSelf(d)
	}
	yyj4262++
	if yyhl4262 {
		yyb4262 = yyj4262 > l
	} else {
		yyb4262 = r.CheckBreak()
	}
	if yyb4262 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv4264 := &x.Scopes
		yym4265 := z.DecBinary()
		_ = yym4265
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4264), d)
		}
	}
	for {
		yyj4262++
		if yyhl4262 {
			yyb4262 = yyj4262 > l
		} else {
			yyb4262 = r.CheckBreak()
		}
		if yyb4262 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4262-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4266 := z.EncBinary()
		_ = yym4266
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4267 := !z.EncBinary()
			yy2arr4267 := z.EncBasicHandle().StructToArray
			var yyq4267 [2]bool
			_, _, _ = yysep4267, yyq4267, yy2arr4267
			const yyr4267 bool = false
			yyq4267[0] = len(x.Hard) != 0
			yyq4267[1] = len(x.Used) != 0
			var yynn4267 int
			if yyr4267 || yy2arr4267 {
				r.EncodeArrayStart(2)
			} else {
				yynn4267 = 0
				for _, b := range yyq4267 {
					if b {
						yynn4267++
					}
				}
				r.EncodeMapStart(yynn4267)
				yynn4267 = 0
			}
			if yyr4267 || yy2arr4267 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4267[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4267[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4267 || yy2arr4267 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4267[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4267[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4267 || yy2arr4267 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4270 := z.DecBinary()
	_ = yym4270
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4271 := r.ContainerType()
		if yyct4271 == codecSelferValueTypeMap1234 {
			yyl4271 := r.ReadMapStart()
			if yyl4271 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4271, d)
			}
		} else if yyct4271 == codecSelferValueTypeArray1234 {
			yyl4271 := r.ReadArrayStart()
			if yyl4271 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4271, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4272Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4272Slc
	var yyhl4272 bool = l >= 0
	for yyj4272 := 0; ; yyj4272++ {
		if yyhl4272 {
			if yyj4272 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4272Slc = r.DecodeBytes(yys4272Slc, true, true)
		yys4272 := string(yys4272Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4272 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4273 := &x.Hard
				yyv4273.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv4274 := &x.Used
				yyv4274.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4272)
		} // end switch yys4272
	} // end for yyj4272
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4275 int
	var yyb4275 bool
	var yyhl4275 bool = l >= 0
	yyj4275++
	if yyhl4275 {
		yyb4275 = yyj4275 > l
	} else {
		yyb4275 = r.CheckBreak()
	}
	if yyb4275 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4276 := &x.Hard
		yyv4276.CodecDecodeSelf(d)
	}
	yyj4275++
	if yyhl4275 {
		yyb4275 = yyj4275 > l
	} else {
		yyb4275 = r.CheckBreak()
	}
	if yyb4275 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv4277 := &x.Used
		yyv4277.CodecDecodeSelf(d)
	}
	for {
		yyj4275++
		if yyhl4275 {
			yyb4275 = yyj4275 > l
		} else {
			yyb4275 = r.CheckBreak()
		}
		if yyb4275 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4275-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4278 := z.EncBinary()
		_ = yym4278
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4279 := !z.EncBinary()
			yy2arr4279 := z.EncBasicHandle().StructToArray
			var yyq4279 [5]bool
			_, _, _ = yysep4279, yyq4279, yy2arr4279
			const yyr4279 bool = false
			yyq4279[0] = x.Kind != ""
			yyq4279[1] = x.APIVersion != ""
			yyq4279[2] = true
			yyq4279[3] = true
			yyq4279[4] = true
			var yynn4279 int
			if yyr4279 || yy2arr4279 {
				r.EncodeArrayStart(5)
			} else {
				yynn4279 = 0
				for _, b := range yyq4279 {
					if b {
						yynn4279++
					}
				}
				r.EncodeMapStart(yynn4279)
				yynn4279 = 0
			}
			if yyr4279 || yy2arr4279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4279[0] {
					yym4281 := z.EncBinary()
					_ = yym4281
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4279[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4282 := z.EncBinary()
					_ = yym4282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4279 || yy2arr4279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4279[1] {
					yym4284 := z.EncBinary()
					_ = yym4284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4279[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4285 := z.EncBinary()
					_ = yym4285
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4279 || yy2arr4279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4279[2] {
					yy4287 := &x.ObjectMeta
					yy4287.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4279[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4288 := &x.ObjectMeta
					yy4288.CodecEncodeSelf(e)
				}
			}
			if yyr4279 || yy2arr4279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4279[3] {
					yy4290 := &x.Spec
					yy4290.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4279[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4291 := &x.Spec
					yy4291.CodecEncodeSelf(e)
				}
			}
			if yyr4279 || yy2arr4279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4279[4] {
					yy4293 := &x.Status
					yy4293.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4279[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4294 := &x.Status
					yy4294.CodecEncodeSelf(e)
				}
			}
			if yyr4279 || yy2arr4279 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4295 := z.DecBinary()
	_ = yym4295
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4296 := r.ContainerType()
		if yyct4296 == codecSelferValueTypeMap1234 {
			yyl4296 := r.ReadMapStart()
			if yyl4296 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4296, d)
			}
		} else if yyct4296 == codecSelferValueTypeArray1234 {
			yyl4296 := r.ReadArrayStart()
			if yyl4296 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4296, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4297Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4297Slc
	var yyhl4297 bool = l >= 0
	for yyj4297 := 0; ; yyj4297++ {
		if yyhl4297 {
			if yyj4297 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4297Slc = r.DecodeBytes(yys4297Slc, true, true)
		yys4297 := string(yys4297Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4297 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4300 := &x.ObjectMeta
				yyv4300.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4301 := &x.Spec
				yyv4301.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4302 := &x.Status
				yyv4302.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4297)
		} // end switch yys4297
	} // end for yyj4297
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4303 int
	var yyb4303 bool
	var yyhl4303 bool = l >= 0
	yyj4303++
	if yyhl4303 {
		yyb4303 = yyj4303 > l
	} else {
		yyb4303 = r.CheckBreak()
	}
	if yyb4303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4303++
	if yyhl4303 {
		yyb4303 = yyj4303 > l
	} else {
		yyb4303 = r.CheckBreak()
	}
	if yyb4303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4303++
	if yyhl4303 {
		yyb4303 = yyj4303 > l
	} else {
		yyb4303 = r.CheckBreak()
	}
	if yyb4303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4306 := &x.ObjectMeta
		yyv4306.CodecDecodeSelf(d)
	}
	yyj4303++
	if yyhl4303 {
		yyb4303 = yyj4303 > l
	} else {
		yyb4303 = r.CheckBreak()
	}
	if yyb4303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4307 := &x.Spec
		yyv4307.CodecDecodeSelf(d)
	}
	yyj4303++
	if yyhl4303 {
		yyb4303 = yyj4303 > l
	} else {
		yyb4303 = r.CheckBreak()
	}
	if yyb4303 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4308 := &x.Status
		yyv4308.CodecDecodeSelf(d)
	}
	for {
		yyj4303++
		if yyhl4303 {
			yyb4303 = yyj4303 > l
		} else {
			yyb4303 = r.CheckBreak()
		}
		if yyb4303 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4303-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4309 := z.EncBinary()
		_ = yym4309
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4310 := !z.EncBinary()
			yy2arr4310 := z.EncBasicHandle().StructToArray
			var yyq4310 [4]bool
			_, _, _ = yysep4310, yyq4310, yy2arr4310
			const yyr4310 bool = false
			yyq4310[0] = x.Kind != ""
			yyq4310[1] = x.APIVersion != ""
			yyq4310[2] = true
			var yynn4310 int
			if yyr4310 || yy2arr4310 {
				r.EncodeArrayStart(4)
			} else {
				yynn4310 = 1
				for _, b := range yyq4310 {
					if b {
						yynn4310++
					}
				}
				r.EncodeMapStart(yynn4310)
				yynn4310 = 0
			}
			if yyr4310 || yy2arr4310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4310[0] {
					yym4312 := z.EncBinary()
					_ = yym4312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4310[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4313 := z.EncBinary()
					_ = yym4313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4310 || yy2arr4310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4310[1] {
					yym4315 := z.EncBinary()
					_ = yym4315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4310[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4316 := z.EncBinary()
					_ = yym4316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4310 || yy2arr4310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4310[2] {
					yy4318 := &x.ListMeta
					yym4319 := z.EncBinary()
					_ = yym4319
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4318) {
					} else {
						z.EncFallback(yy4318)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4310[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4320 := &x.ListMeta
					yym4321 := z.EncBinary()
					_ = yym4321
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4320) {
					} else {
						z.EncFallback(yy4320)
					}
				}
			}
			if yyr4310 || yy2arr4310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4323 := z.EncBinary()
					_ = yym4323
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4324 := z.EncBinary()
					_ = yym4324
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4310 || yy2arr4310 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4325 := z.DecBinary()
	_ = yym4325
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4326 := r.ContainerType()
		if yyct4326 == codecSelferValueTypeMap1234 {
			yyl4326 := r.ReadMapStart()
			if yyl4326 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4326, d)
			}
		} else if yyct4326 == codecSelferValueTypeArray1234 {
			yyl4326 := r.ReadArrayStart()
			if yyl4326 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4326, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4327Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4327Slc
	var yyhl4327 bool = l >= 0
	for yyj4327 := 0; ; yyj4327++ {
		if yyhl4327 {
			if yyj4327 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4327Slc = r.DecodeBytes(yys4327Slc, true, true)
		yys4327 := string(yys4327Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4327 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4330 := &x.ListMeta
				yym4331 := z.DecBinary()
				_ = yym4331
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4330) {
				} else {
					z.DecFallback(yyv4330, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4332 := &x.Items
				yym4333 := z.DecBinary()
				_ = yym4333
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4332), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4327)
		} // end switch yys4327
	} // end for yyj4327
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4334 int
	var yyb4334 bool
	var yyhl4334 bool = l >= 0
	yyj4334++
	if yyhl4334 {
		yyb4334 = yyj4334 > l
	} else {
		yyb4334 = r.CheckBreak()
	}
	if yyb4334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4334++
	if yyhl4334 {
		yyb4334 = yyj4334 > l
	} else {
		yyb4334 = r.CheckBreak()
	}
	if yyb4334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4334++
	if yyhl4334 {
		yyb4334 = yyj4334 > l
	} else {
		yyb4334 = r.CheckBreak()
	}
	if yyb4334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4337 := &x.ListMeta
		yym4338 := z.DecBinary()
		_ = yym4338
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4337) {
		} else {
			z.DecFallback(yyv4337, false)
		}
	}
	yyj4334++
	if yyhl4334 {
		yyb4334 = yyj4334 > l
	} else {
		yyb4334 = r.CheckBreak()
	}
	if yyb4334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4339 := &x.Items
		yym4340 := z.DecBinary()
		_ = yym4340
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4339), d)
		}
	}
	for {
		yyj4334++
		if yyhl4334 {
			yyb4334 = yyj4334 > l
		} else {
			yyb4334 = r.CheckBreak()
		}
		if yyb4334 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4334-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4341 := z.EncBinary()
		_ = yym4341
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4342 := !z.EncBinary()
			yy2arr4342 := z.EncBasicHandle().StructToArray
			var yyq4342 [5]bool
			_, _, _ = yysep4342, yyq4342, yy2arr4342
			const yyr4342 bool = false
			yyq4342[0] = x.Kind != ""
			yyq4342[1] = x.APIVersion != ""
			yyq4342[2] = true
			yyq4342[3] = len(x.Data) != 0
			yyq4342[4] = x.Type != ""
			var yynn4342 int
			if yyr4342 || yy2arr4342 {
				r.EncodeArrayStart(5)
			} else {
				yynn4342 = 0
				for _, b := range yyq4342 {
					if b {
						yynn4342++
					}
				}
				r.EncodeMapStart(yynn4342)
				yynn4342 = 0
			}
			if yyr4342 || yy2arr4342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4342[0] {
					yym4344 := z.EncBinary()
					_ = yym4344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4342[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4345 := z.EncBinary()
					_ = yym4345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4342 || yy2arr4342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4342[1] {
					yym4347 := z.EncBinary()
					_ = yym4347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4342[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4348 := z.EncBinary()
					_ = yym4348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4342 || yy2arr4342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4342[2] {
					yy4350 := &x.ObjectMeta
					yy4350.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4342[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4351 := &x.ObjectMeta
					yy4351.CodecEncodeSelf(e)
				}
			}
			if yyr4342 || yy2arr4342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4342[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4353 := z.EncBinary()
						_ = yym4353
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4342[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4354 := z.EncBinary()
						_ = yym4354
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4342 || yy2arr4342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4342[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4342[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4342 || yy2arr4342 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4356 := z.DecBinary()
	_ = yym4356
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4357 := r.ContainerType()
		if yyct4357 == codecSelferValueTypeMap1234 {
			yyl4357 := r.ReadMapStart()
			if yyl4357 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4357, d)
			}
		} else if yyct4357 == codecSelferValueTypeArray1234 {
			yyl4357 := r.ReadArrayStart()
			if yyl4357 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4357, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4358Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4358Slc
	var yyhl4358 bool = l >= 0
	for yyj4358 := 0; ; yyj4358++ {
		if yyhl4358 {
			if yyj4358 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4358Slc = r.DecodeBytes(yys4358Slc, true, true)
		yys4358 := string(yys4358Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4358 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4361 := &x.ObjectMeta
				yyv4361.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4362 := &x.Data
				yym4363 := z.DecBinary()
				_ = yym4363
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4362), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4358)
		} // end switch yys4358
	} // end for yyj4358
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4365 int
	var yyb4365 bool
	var yyhl4365 bool = l >= 0
	yyj4365++
	if yyhl4365 {
		yyb4365 = yyj4365 > l
	} else {
		yyb4365 = r.CheckBreak()
	}
	if yyb4365 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4365++
	if yyhl4365 {
		yyb4365 = yyj4365 > l
	} else {
		yyb4365 = r.CheckBreak()
	}
	if yyb4365 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4365++
	if yyhl4365 {
		yyb4365 = yyj4365 > l
	} else {
		yyb4365 = r.CheckBreak()
	}
	if yyb4365 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4368 := &x.ObjectMeta
		yyv4368.CodecDecodeSelf(d)
	}
	yyj4365++
	if yyhl4365 {
		yyb4365 = yyj4365 > l
	} else {
		yyb4365 = r.CheckBreak()
	}
	if yyb4365 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4369 := &x.Data
		yym4370 := z.DecBinary()
		_ = yym4370
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4369), d)
		}
	}
	yyj4365++
	if yyhl4365 {
		yyb4365 = yyj4365 > l
	} else {
		yyb4365 = r.CheckBreak()
	}
	if yyb4365 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4365++
		if yyhl4365 {
			yyb4365 = yyj4365 > l
		} else {
			yyb4365 = r.CheckBreak()
		}
		if yyb4365 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4365-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4372 := z.EncBinary()
	_ = yym4372
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4373 := z.DecBinary()
	_ = yym4373
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4374 := z.EncBinary()
		_ = yym4374
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4375 := !z.EncBinary()
			yy2arr4375 := z.EncBasicHandle().StructToArray
			var yyq4375 [4]bool
			_, _, _ = yysep4375, yyq4375, yy2arr4375
			const yyr4375 bool = false
			yyq4375[0] = x.Kind != ""
			yyq4375[1] = x.APIVersion != ""
			yyq4375[2] = true
			var yynn4375 int
			if yyr4375 || yy2arr4375 {
				r.EncodeArrayStart(4)
			} else {
				yynn4375 = 1
				for _, b := range yyq4375 {
					if b {
						yynn4375++
					}
				}
				r.EncodeMapStart(yynn4375)
				yynn4375 = 0
			}
			if yyr4375 || yy2arr4375 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4375[0] {
					yym4377 := z.EncBinary()
					_ = yym4377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4375[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4378 := z.EncBinary()
					_ = yym4378
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4375 || yy2arr4375 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4375[1] {
					yym4380 := z.EncBinary()
					_ = yym4380
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4375[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4381 := z.EncBinary()
					_ = yym4381
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4375 || yy2arr4375 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4375[2] {
					yy4383 := &x.ListMeta
					yym4384 := z.EncBinary()
					_ = yym4384
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4383) {
					} else {
						z.EncFallback(yy4383)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4375[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4385 := &x.ListMeta
					yym4386 := z.EncBinary()
					_ = yym4386
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4385) {
					} else {
						z.EncFallback(yy4385)
					}
				}
			}
			if yyr4375 || yy2arr4375 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4388 := z.EncBinary()
					_ = yym4388
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4389 := z.EncBinary()
					_ = yym4389
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4375 || yy2arr4375 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4390 := z.DecBinary()
	_ = yym4390
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4391 := r.ContainerType()
		if yyct4391 == codecSelferValueTypeMap1234 {
			yyl4391 := r.ReadMapStart()
			if yyl4391 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4391, d)
			}
		} else if yyct4391 == codecSelferValueTypeArray1234 {
			yyl4391 := r.ReadArrayStart()
			if yyl4391 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4391, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4392Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4392Slc
	var yyhl4392 bool = l >= 0
	for yyj4392 := 0; ; yyj4392++ {
		if yyhl4392 {
			if yyj4392 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4392Slc = r.DecodeBytes(yys4392Slc, true, true)
		yys4392 := string(yys4392Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4392 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4395 := &x.ListMeta
				yym4396 := z.DecBinary()
				_ = yym4396
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4395) {
				} else {
					z.DecFallback(yyv4395, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4397 := &x.Items
				yym4398 := z.DecBinary()
				_ = yym4398
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4397), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4392)
		} // end switch yys4392
	} // end for yyj4392
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4399 int
	var yyb4399 bool
	var yyhl4399 bool = l >= 0
	yyj4399++
	if yyhl4399 {
		yyb4399 = yyj4399 > l
	} else {
		yyb4399 = r.CheckBreak()
	}
	if yyb4399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4399++
	if yyhl4399 {
		yyb4399 = yyj4399 > l
	} else {
		yyb4399 = r.CheckBreak()
	}
	if yyb4399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4399++
	if yyhl4399 {
		yyb4399 = yyj4399 > l
	} else {
		yyb4399 = r.CheckBreak()
	}
	if yyb4399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4402 := &x.ListMeta
		yym4403 := z.DecBinary()
		_ = yym4403
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4402) {
		} else {
			z.DecFallback(yyv4402, false)
		}
	}
	yyj4399++
	if yyhl4399 {
		yyb4399 = yyj4399 > l
	} else {
		yyb4399 = r.CheckBreak()
	}
	if yyb4399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4404 := &x.Items
		yym4405 := z.DecBinary()
		_ = yym4405
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4404), d)
		}
	}
	for {
		yyj4399++
		if yyhl4399 {
			yyb4399 = yyj4399 > l
		} else {
			yyb4399 = r.CheckBreak()
		}
		if yyb4399 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4399-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4406 := z.EncBinary()
		_ = yym4406
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4407 := !z.EncBinary()
			yy2arr4407 := z.EncBasicHandle().StructToArray
			var yyq4407 [4]bool
			_, _, _ = yysep4407, yyq4407, yy2arr4407
			const yyr4407 bool = false
			yyq4407[0] = x.Kind != ""
			yyq4407[1] = x.APIVersion != ""
			yyq4407[2] = true
			yyq4407[3] = len(x.Data) != 0
			var yynn4407 int
			if yyr4407 || yy2arr4407 {
				r.EncodeArrayStart(4)
			} else {
				yynn4407 = 0
				for _, b := range yyq4407 {
					if b {
						yynn4407++
					}
				}
				r.EncodeMapStart(yynn4407)
				yynn4407 = 0
			}
			if yyr4407 || yy2arr4407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4407[0] {
					yym4409 := z.EncBinary()
					_ = yym4409
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4407[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4410 := z.EncBinary()
					_ = yym4410
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4407 || yy2arr4407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4407[1] {
					yym4412 := z.EncBinary()
					_ = yym4412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4407[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4413 := z.EncBinary()
					_ = yym4413
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4407 || yy2arr4407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4407[2] {
					yy4415 := &x.ObjectMeta
					yy4415.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4407[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4416 := &x.ObjectMeta
					yy4416.CodecEncodeSelf(e)
				}
			}
			if yyr4407 || yy2arr4407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4407[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4418 := z.EncBinary()
						_ = yym4418
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4407[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4419 := z.EncBinary()
						_ = yym4419
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4407 || yy2arr4407 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4420 := z.DecBinary()
	_ = yym4420
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4421 := r.ContainerType()
		if yyct4421 == codecSelferValueTypeMap1234 {
			yyl4421 := r.ReadMapStart()
			if yyl4421 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4421, d)
			}
		} else if yyct4421 == codecSelferValueTypeArray1234 {
			yyl4421 := r.ReadArrayStart()
			if yyl4421 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4421, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4422Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4422Slc
	var yyhl4422 bool = l >= 0
	for yyj4422 := 0; ; yyj4422++ {
		if yyhl4422 {
			if yyj4422 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4422Slc = r.DecodeBytes(yys4422Slc, true, true)
		yys4422 := string(yys4422Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4422 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4425 := &x.ObjectMeta
				yyv4425.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4426 := &x.Data
				yym4427 := z.DecBinary()
				_ = yym4427
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4426, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4422)
		} // end switch yys4422
	} // end for yyj4422
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4428 int
	var yyb4428 bool
	var yyhl4428 bool = l >= 0
	yyj4428++
	if yyhl4428 {
		yyb4428 = yyj4428 > l
	} else {
		yyb4428 = r.CheckBreak()
	}
	if yyb4428 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4428++
	if yyhl4428 {
		yyb4428 = yyj4428 > l
	} else {
		yyb4428 = r.CheckBreak()
	}
	if yyb4428 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4428++
	if yyhl4428 {
		yyb4428 = yyj4428 > l
	} else {
		yyb4428 = r.CheckBreak()
	}
	if yyb4428 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4431 := &x.ObjectMeta
		yyv4431.CodecDecodeSelf(d)
	}
	yyj4428++
	if yyhl4428 {
		yyb4428 = yyj4428 > l
	} else {
		yyb4428 = r.CheckBreak()
	}
	if yyb4428 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4432 := &x.Data
		yym4433 := z.DecBinary()
		_ = yym4433
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4432, false, d)
		}
	}
	for {
		yyj4428++
		if yyhl4428 {
			yyb4428 = yyj4428 > l
		} else {
			yyb4428 = r.CheckBreak()
		}
		if yyb4428 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4428-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4434 := z.EncBinary()
		_ = yym4434
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4435 := !z.EncBinary()
			yy2arr4435 := z.EncBasicHandle().StructToArray
			var yyq4435 [4]bool
			_, _, _ = yysep4435, yyq4435, yy2arr4435
			const yyr4435 bool = false
			yyq4435[0] = x.Kind != ""
			yyq4435[1] = x.APIVersion != ""
			yyq4435[2] = true
			var yynn4435 int
			if yyr4435 || yy2arr4435 {
				r.EncodeArrayStart(4)
			} else {
				yynn4435 = 1
				for _, b := range yyq4435 {
					if b {
						yynn4435++
					}
				}
				r.EncodeMapStart(yynn4435)
				yynn4435 = 0
			}
			if yyr4435 || yy2arr4435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4435[0] {
					yym4437 := z.EncBinary()
					_ = yym4437
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4435[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4438 := z.EncBinary()
					_ = yym4438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4435 || yy2arr4435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4435[1] {
					yym4440 := z.EncBinary()
					_ = yym4440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4435[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4441 := z.EncBinary()
					_ = yym4441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4435 || yy2arr4435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4435[2] {
					yy4443 := &x.ListMeta
					yym4444 := z.EncBinary()
					_ = yym4444
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4443) {
					} else {
						z.EncFallback(yy4443)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4435[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4445 := &x.ListMeta
					yym4446 := z.EncBinary()
					_ = yym4446
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4445) {
					} else {
						z.EncFallback(yy4445)
					}
				}
			}
			if yyr4435 || yy2arr4435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4448 := z.EncBinary()
					_ = yym4448
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4449 := z.EncBinary()
					_ = yym4449
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4435 || yy2arr4435 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4450 := z.DecBinary()
	_ = yym4450
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4451 := r.ContainerType()
		if yyct4451 == codecSelferValueTypeMap1234 {
			yyl4451 := r.ReadMapStart()
			if yyl4451 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4451, d)
			}
		} else if yyct4451 == codecSelferValueTypeArray1234 {
			yyl4451 := r.ReadArrayStart()
			if yyl4451 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4451, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4452Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4452Slc
	var yyhl4452 bool = l >= 0
	for yyj4452 := 0; ; yyj4452++ {
		if yyhl4452 {
			if yyj4452 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4452Slc = r.DecodeBytes(yys4452Slc, true, true)
		yys4452 := string(yys4452Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4452 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4455 := &x.ListMeta
				yym4456 := z.DecBinary()
				_ = yym4456
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4455) {
				} else {
					z.DecFallback(yyv4455, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4457 := &x.Items
				yym4458 := z.DecBinary()
				_ = yym4458
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4457), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4452)
		} // end switch yys4452
	} // end for yyj4452
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4459 int
	var yyb4459 bool
	var yyhl4459 bool = l >= 0
	yyj4459++
	if yyhl4459 {
		yyb4459 = yyj4459 > l
	} else {
		yyb4459 = r.CheckBreak()
	}
	if yyb4459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4459++
	if yyhl4459 {
		yyb4459 = yyj4459 > l
	} else {
		yyb4459 = r.CheckBreak()
	}
	if yyb4459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4459++
	if yyhl4459 {
		yyb4459 = yyj4459 > l
	} else {
		yyb4459 = r.CheckBreak()
	}
	if yyb4459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4462 := &x.ListMeta
		yym4463 := z.DecBinary()
		_ = yym4463
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4462) {
		} else {
			z.DecFallback(yyv4462, false)
		}
	}
	yyj4459++
	if yyhl4459 {
		yyb4459 = yyj4459 > l
	} else {
		yyb4459 = r.CheckBreak()
	}
	if yyb4459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4464 := &x.Items
		yym4465 := z.DecBinary()
		_ = yym4465
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4464), d)
		}
	}
	for {
		yyj4459++
		if yyhl4459 {
			yyb4459 = yyj4459 > l
		} else {
			yyb4459 = r.CheckBreak()
		}
		if yyb4459 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4459-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4466 := z.EncBinary()
	_ = yym4466
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4467 := z.DecBinary()
	_ = yym4467
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4468 := z.EncBinary()
	_ = yym4468
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4469 := z.DecBinary()
	_ = yym4469
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4470 := z.EncBinary()
		_ = yym4470
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4471 := !z.EncBinary()
			yy2arr4471 := z.EncBasicHandle().StructToArray
			var yyq4471 [4]bool
			_, _, _ = yysep4471, yyq4471, yy2arr4471
			const yyr4471 bool = false
			yyq4471[2] = x.Message != ""
			yyq4471[3] = x.Error != ""
			var yynn4471 int
			if yyr4471 || yy2arr4471 {
				r.EncodeArrayStart(4)
			} else {
				yynn4471 = 2
				for _, b := range yyq4471 {
					if b {
						yynn4471++
					}
				}
				r.EncodeMapStart(yynn4471)
				yynn4471 = 0
			}
			if yyr4471 || yy2arr4471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4471 || yy2arr4471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4471 || yy2arr4471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4471[2] {
					yym4475 := z.EncBinary()
					_ = yym4475
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4471[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4476 := z.EncBinary()
					_ = yym4476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4471 || yy2arr4471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4471[3] {
					yym4478 := z.EncBinary()
					_ = yym4478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4471[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4479 := z.EncBinary()
					_ = yym4479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4471 || yy2arr4471 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4480 := z.DecBinary()
	_ = yym4480
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4481 := r.ContainerType()
		if yyct4481 == codecSelferValueTypeMap1234 {
			yyl4481 := r.ReadMapStart()
			if yyl4481 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4481, d)
			}
		} else if yyct4481 == codecSelferValueTypeArray1234 {
			yyl4481 := r.ReadArrayStart()
			if yyl4481 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4481, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4482Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4482Slc
	var yyhl4482 bool = l >= 0
	for yyj4482 := 0; ; yyj4482++ {
		if yyhl4482 {
			if yyj4482 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4482Slc = r.DecodeBytes(yys4482Slc, true, true)
		yys4482 := string(yys4482Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4482 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4482)
		} // end switch yys4482
	} // end for yyj4482
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4487 int
	var yyb4487 bool
	var yyhl4487 bool = l >= 0
	yyj4487++
	if yyhl4487 {
		yyb4487 = yyj4487 > l
	} else {
		yyb4487 = r.CheckBreak()
	}
	if yyb4487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4487++
	if yyhl4487 {
		yyb4487 = yyj4487 > l
	} else {
		yyb4487 = r.CheckBreak()
	}
	if yyb4487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4487++
	if yyhl4487 {
		yyb4487 = yyj4487 > l
	} else {
		yyb4487 = r.CheckBreak()
	}
	if yyb4487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4487++
	if yyhl4487 {
		yyb4487 = yyj4487 > l
	} else {
		yyb4487 = r.CheckBreak()
	}
	if yyb4487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4487++
		if yyhl4487 {
			yyb4487 = yyj4487 > l
		} else {
			yyb4487 = r.CheckBreak()
		}
		if yyb4487 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4487-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4492 := z.EncBinary()
		_ = yym4492
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4493 := !z.EncBinary()
			yy2arr4493 := z.EncBasicHandle().StructToArray
			var yyq4493 [4]bool
			_, _, _ = yysep4493, yyq4493, yy2arr4493
			const yyr4493 bool = false
			yyq4493[0] = x.Kind != ""
			yyq4493[1] = x.APIVersion != ""
			yyq4493[2] = true
			yyq4493[3] = len(x.Conditions) != 0
			var yynn4493 int
			if yyr4493 || yy2arr4493 {
				r.EncodeArrayStart(4)
			} else {
				yynn4493 = 0
				for _, b := range yyq4493 {
					if b {
						yynn4493++
					}
				}
				r.EncodeMapStart(yynn4493)
				yynn4493 = 0
			}
			if yyr4493 || yy2arr4493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4493[0] {
					yym4495 := z.EncBinary()
					_ = yym4495
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4493[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4496 := z.EncBinary()
					_ = yym4496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4493 || yy2arr4493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4493[1] {
					yym4498 := z.EncBinary()
					_ = yym4498
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4493[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4499 := z.EncBinary()
					_ = yym4499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4493 || yy2arr4493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4493[2] {
					yy4501 := &x.ObjectMeta
					yy4501.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4493[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4502 := &x.ObjectMeta
					yy4502.CodecEncodeSelf(e)
				}
			}
			if yyr4493 || yy2arr4493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4493[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4504 := z.EncBinary()
						_ = yym4504
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4493[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4505 := z.EncBinary()
						_ = yym4505
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4493 || yy2arr4493 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4506 := z.DecBinary()
	_ = yym4506
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4507 := r.ContainerType()
		if yyct4507 == codecSelferValueTypeMap1234 {
			yyl4507 := r.ReadMapStart()
			if yyl4507 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4507, d)
			}
		} else if yyct4507 == codecSelferValueTypeArray1234 {
			yyl4507 := r.ReadArrayStart()
			if yyl4507 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4507, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4508Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4508Slc
	var yyhl4508 bool = l >= 0
	for yyj4508 := 0; ; yyj4508++ {
		if yyhl4508 {
			if yyj4508 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4508Slc = r.DecodeBytes(yys4508Slc, true, true)
		yys4508 := string(yys4508Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4508 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4511 := &x.ObjectMeta
				yyv4511.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4512 := &x.Conditions
				yym4513 := z.DecBinary()
				_ = yym4513
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4512), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4508)
		} // end switch yys4508
	} // end for yyj4508
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4514 int
	var yyb4514 bool
	var yyhl4514 bool = l >= 0
	yyj4514++
	if yyhl4514 {
		yyb4514 = yyj4514 > l
	} else {
		yyb4514 = r.CheckBreak()
	}
	if yyb4514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4514++
	if yyhl4514 {
		yyb4514 = yyj4514 > l
	} else {
		yyb4514 = r.CheckBreak()
	}
	if yyb4514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4514++
	if yyhl4514 {
		yyb4514 = yyj4514 > l
	} else {
		yyb4514 = r.CheckBreak()
	}
	if yyb4514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4517 := &x.ObjectMeta
		yyv4517.CodecDecodeSelf(d)
	}
	yyj4514++
	if yyhl4514 {
		yyb4514 = yyj4514 > l
	} else {
		yyb4514 = r.CheckBreak()
	}
	if yyb4514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4518 := &x.Conditions
		yym4519 := z.DecBinary()
		_ = yym4519
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4518), d)
		}
	}
	for {
		yyj4514++
		if yyhl4514 {
			yyb4514 = yyj4514 > l
		} else {
			yyb4514 = r.CheckBreak()
		}
		if yyb4514 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4514-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4520 := z.EncBinary()
		_ = yym4520
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4521 := !z.EncBinary()
			yy2arr4521 := z.EncBasicHandle().StructToArray
			var yyq4521 [4]bool
			_, _, _ = yysep4521, yyq4521, yy2arr4521
			const yyr4521 bool = false
			yyq4521[0] = x.Kind != ""
			yyq4521[1] = x.APIVersion != ""
			yyq4521[2] = true
			var yynn4521 int
			if yyr4521 || yy2arr4521 {
				r.EncodeArrayStart(4)
			} else {
				yynn4521 = 1
				for _, b := range yyq4521 {
					if b {
						yynn4521++
					}
				}
				r.EncodeMapStart(yynn4521)
				yynn4521 = 0
			}
			if yyr4521 || yy2arr4521 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4521[0] {
					yym4523 := z.EncBinary()
					_ = yym4523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4521[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4524 := z.EncBinary()
					_ = yym4524
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4521 || yy2arr4521 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4521[1] {
					yym4526 := z.EncBinary()
					_ = yym4526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4521[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4527 := z.EncBinary()
					_ = yym4527
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4521 || yy2arr4521 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4521[2] {
					yy4529 := &x.ListMeta
					yym4530 := z.EncBinary()
					_ = yym4530
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4529) {
					} else {
						z.EncFallback(yy4529)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4521[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4531 := &x.ListMeta
					yym4532 := z.EncBinary()
					_ = yym4532
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4531) {
					} else {
						z.EncFallback(yy4531)
					}
				}
			}
			if yyr4521 || yy2arr4521 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4534 := z.EncBinary()
					_ = yym4534
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4535 := z.EncBinary()
					_ = yym4535
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4521 || yy2arr4521 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4536 := z.DecBinary()
	_ = yym4536
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4537 := r.ContainerType()
		if yyct4537 == codecSelferValueTypeMap1234 {
			yyl4537 := r.ReadMapStart()
			if yyl4537 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4537, d)
			}
		} else if yyct4537 == codecSelferValueTypeArray1234 {
			yyl4537 := r.ReadArrayStart()
			if yyl4537 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4537, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4538Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4538Slc
	var yyhl4538 bool = l >= 0
	for yyj4538 := 0; ; yyj4538++ {
		if yyhl4538 {
			if yyj4538 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4538Slc = r.DecodeBytes(yys4538Slc, true, true)
		yys4538 := string(yys4538Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4538 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4541 := &x.ListMeta
				yym4542 := z.DecBinary()
				_ = yym4542
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4541) {
				} else {
					z.DecFallback(yyv4541, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4543 := &x.Items
				yym4544 := z.DecBinary()
				_ = yym4544
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4543), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4538)
		} // end switch yys4538
	} // end for yyj4538
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4545 int
	var yyb4545 bool
	var yyhl4545 bool = l >= 0
	yyj4545++
	if yyhl4545 {
		yyb4545 = yyj4545 > l
	} else {
		yyb4545 = r.CheckBreak()
	}
	if yyb4545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4545++
	if yyhl4545 {
		yyb4545 = yyj4545 > l
	} else {
		yyb4545 = r.CheckBreak()
	}
	if yyb4545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4545++
	if yyhl4545 {
		yyb4545 = yyj4545 > l
	} else {
		yyb4545 = r.CheckBreak()
	}
	if yyb4545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4548 := &x.ListMeta
		yym4549 := z.DecBinary()
		_ = yym4549
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4548) {
		} else {
			z.DecFallback(yyv4548, false)
		}
	}
	yyj4545++
	if yyhl4545 {
		yyb4545 = yyj4545 > l
	} else {
		yyb4545 = r.CheckBreak()
	}
	if yyb4545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4550 := &x.Items
		yym4551 := z.DecBinary()
		_ = yym4551
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4550), d)
		}
	}
	for {
		yyj4545++
		if yyhl4545 {
			yyb4545 = yyj4545 > l
		} else {
			yyb4545 = r.CheckBreak()
		}
		if yyb4545 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4545-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4552 := z.EncBinary()
		_ = yym4552
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4553 := !z.EncBinary()
			yy2arr4553 := z.EncBasicHandle().StructToArray
			var yyq4553 [6]bool
			_, _, _ = yysep4553, yyq4553, yy2arr4553
			const yyr4553 bool = false
			yyq4553[0] = x.Capabilities != nil
			yyq4553[1] = x.Privileged != nil
			yyq4553[2] = x.SELinuxOptions != nil
			yyq4553[3] = x.RunAsUser != nil
			yyq4553[4] = x.RunAsNonRoot != nil
			yyq4553[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4553 int
			if yyr4553 || yy2arr4553 {
				r.EncodeArrayStart(6)
			} else {
				yynn4553 = 0
				for _, b := range yyq4553 {
					if b {
						yynn4553++
					}
				}
				r.EncodeMapStart(yynn4553)
				yynn4553 = 0
			}
			if yyr4553 || yy2arr4553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4553[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4553[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4553 || yy2arr4553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4553[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4556 := *x.Privileged
						yym4557 := z.EncBinary()
						_ = yym4557
						if false {
						} else {
							r.EncodeBool(bool(yy4556))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4553[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4558 := *x.Privileged
						yym4559 := z.EncBinary()
						_ = yym4559
						if false {
						} else {
							r.EncodeBool(bool(yy4558))
						}
					}
				}
			}
			if yyr4553 || yy2arr4553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4553[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4553[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4553 || yy2arr4553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4553[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4562 := *x.RunAsUser
						yym4563 := z.EncBinary()
						_ = yym4563
						if false {
						} else {
							r.EncodeInt(int64(yy4562))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4553[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4564 := *x.RunAsUser
						yym4565 := z.EncBinary()
						_ = yym4565
						if false {
						} else {
							r.EncodeInt(int64(yy4564))
						}
					}
				}
			}
			if yyr4553 || yy2arr4553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4553[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4567 := *x.RunAsNonRoot
						yym4568 := z.EncBinary()
						_ = yym4568
						if false {
						} else {
							r.EncodeBool(bool(yy4567))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4553[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4569 := *x.RunAsNonRoot
						yym4570 := z.EncBinary()
						_ = yym4570
						if false {
						} else {
							r.EncodeBool(bool(yy4569))
						}
					}
				}
			}
			if yyr4553 || yy2arr4553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4553[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4572 := *x.ReadOnlyRootFilesystem
						yym4573 := z.EncBinary()
						_ = yym4573
						if false {
						} else {
							r.EncodeBool(bool(yy4572))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4553[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4574 := *x.ReadOnlyRootFilesystem
						yym4575 := z.EncBinary()
						_ = yym4575
						if false {
						} else {
							r.EncodeBool(bool(yy4574))
						}
					}
				}
			}
			if yyr4553 || yy2arr4553 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4576 := z.DecBinary()
	_ = yym4576
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4577 := r.ContainerType()
		if yyct4577 == codecSelferValueTypeMap1234 {
			yyl4577 := r.ReadMapStart()
			if yyl4577 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4577, d)
			}
		} else if yyct4577 == codecSelferValueTypeArray1234 {
			yyl4577 := r.ReadArrayStart()
			if yyl4577 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4577, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4578Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4578Slc
	var yyhl4578 bool = l >= 0
	for yyj4578 := 0; ; yyj4578++ {
		if yyhl4578 {
			if yyj4578 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4578Slc = r.DecodeBytes(yys4578Slc, true, true)
		yys4578 := string(yys4578Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4578 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4581 := z.DecBinary()
				_ = yym4581
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4584 := z.DecBinary()
				_ = yym4584
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4586 := z.DecBinary()
				_ = yym4586
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4588 := z.DecBinary()
				_ = yym4588
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4578)
		} // end switch yys4578
	} // end for yyj4578
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4589 int
	var yyb4589 bool
	var yyhl4589 bool = l >= 0
	yyj4589++
	if yyhl4589 {
		yyb4589 = yyj4589 > l
	} else {
		yyb4589 = r.CheckBreak()
	}
	if yyb4589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4589++
	if yyhl4589 {
		yyb4589 = yyj4589 > l
	} else {
		yyb4589 = r.CheckBreak()
	}
	if yyb4589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4592 := z.DecBinary()
		_ = yym4592
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4589++
	if yyhl4589 {
		yyb4589 = yyj4589 > l
	} else {
		yyb4589 = r.CheckBreak()
	}
	if yyb4589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4589++
	if yyhl4589 {
		yyb4589 = yyj4589 > l
	} else {
		yyb4589 = r.CheckBreak()
	}
	if yyb4589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4595 := z.DecBinary()
		_ = yym4595
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4589++
	if yyhl4589 {
		yyb4589 = yyj4589 > l
	} else {
		yyb4589 = r.CheckBreak()
	}
	if yyb4589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4597 := z.DecBinary()
		_ = yym4597
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4589++
	if yyhl4589 {
		yyb4589 = yyj4589 > l
	} else {
		yyb4589 = r.CheckBreak()
	}
	if yyb4589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4599 := z.DecBinary()
		_ = yym4599
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4589++
		if yyhl4589 {
			yyb4589 = yyj4589 > l
		} else {
			yyb4589 = r.CheckBreak()
		}
		if yyb4589 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4589-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4600 := z.EncBinary()
		_ = yym4600
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4601 := !z.EncBinary()
			yy2arr4601 := z.EncBasicHandle().StructToArray
			var yyq4601 [4]bool
			_, _, _ = yysep4601, yyq4601, yy2arr4601
			const yyr4601 bool = false
			yyq4601[0] = x.User != ""
			yyq4601[1] = x.Role != ""
			yyq4601[2] = x.Type != ""
			yyq4601[3] = x.Level != ""
			var yynn4601 int
			if yyr4601 || yy2arr4601 {
				r.EncodeArrayStart(4)
			} else {
				yynn4601 = 0
				for _, b := range yyq4601 {
					if b {
						yynn4601++
					}
				}
				r.EncodeMapStart(yynn4601)
				yynn4601 = 0
			}
			if yyr4601 || yy2arr4601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4601[0] {
					yym4603 := z.EncBinary()
					_ = yym4603
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4601[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4604 := z.EncBinary()
					_ = yym4604
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4601 || yy2arr4601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4601[1] {
					yym4606 := z.EncBinary()
					_ = yym4606
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4601[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4607 := z.EncBinary()
					_ = yym4607
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4601 || yy2arr4601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4601[2] {
					yym4609 := z.EncBinary()
					_ = yym4609
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4601[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4610 := z.EncBinary()
					_ = yym4610
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4601 || yy2arr4601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4601[3] {
					yym4612 := z.EncBinary()
					_ = yym4612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4601[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4613 := z.EncBinary()
					_ = yym4613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4601 || yy2arr4601 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4614 := z.DecBinary()
	_ = yym4614
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4615 := r.ContainerType()
		if yyct4615 == codecSelferValueTypeMap1234 {
			yyl4615 := r.ReadMapStart()
			if yyl4615 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4615, d)
			}
		} else if yyct4615 == codecSelferValueTypeArray1234 {
			yyl4615 := r.ReadArrayStart()
			if yyl4615 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4615, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4616Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4616Slc
	var yyhl4616 bool = l >= 0
	for yyj4616 := 0; ; yyj4616++ {
		if yyhl4616 {
			if yyj4616 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4616Slc = r.DecodeBytes(yys4616Slc, true, true)
		yys4616 := string(yys4616Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4616 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4616)
		} // end switch yys4616
	} // end for yyj4616
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4621 int
	var yyb4621 bool
	var yyhl4621 bool = l >= 0
	yyj4621++
	if yyhl4621 {
		yyb4621 = yyj4621 > l
	} else {
		yyb4621 = r.CheckBreak()
	}
	if yyb4621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4621++
	if yyhl4621 {
		yyb4621 = yyj4621 > l
	} else {
		yyb4621 = r.CheckBreak()
	}
	if yyb4621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4621++
	if yyhl4621 {
		yyb4621 = yyj4621 > l
	} else {
		yyb4621 = r.CheckBreak()
	}
	if yyb4621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4621++
	if yyhl4621 {
		yyb4621 = yyj4621 > l
	} else {
		yyb4621 = r.CheckBreak()
	}
	if yyb4621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4621++
		if yyhl4621 {
			yyb4621 = yyj4621 > l
		} else {
			yyb4621 = r.CheckBreak()
		}
		if yyb4621 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4621-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4626 := z.EncBinary()
		_ = yym4626
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4627 := !z.EncBinary()
			yy2arr4627 := z.EncBasicHandle().StructToArray
			var yyq4627 [5]bool
			_, _, _ = yysep4627, yyq4627, yy2arr4627
			const yyr4627 bool = false
			yyq4627[0] = x.Kind != ""
			yyq4627[1] = x.APIVersion != ""
			yyq4627[2] = true
			var yynn4627 int
			if yyr4627 || yy2arr4627 {
				r.EncodeArrayStart(5)
			} else {
				yynn4627 = 2
				for _, b := range yyq4627 {
					if b {
						yynn4627++
					}
				}
				r.EncodeMapStart(yynn4627)
				yynn4627 = 0
			}
			if yyr4627 || yy2arr4627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4627[0] {
					yym4629 := z.EncBinary()
					_ = yym4629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4627[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4630 := z.EncBinary()
					_ = yym4630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4627 || yy2arr4627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4627[1] {
					yym4632 := z.EncBinary()
					_ = yym4632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4627[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4633 := z.EncBinary()
					_ = yym4633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4627 || yy2arr4627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4627[2] {
					yy4635 := &x.ObjectMeta
					yy4635.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4627[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4636 := &x.ObjectMeta
					yy4636.CodecEncodeSelf(e)
				}
			}
			if yyr4627 || yy2arr4627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4638 := z.EncBinary()
				_ = yym4638
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4639 := z.EncBinary()
				_ = yym4639
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4627 || yy2arr4627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4641 := z.EncBinary()
					_ = yym4641
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4642 := z.EncBinary()
					_ = yym4642
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4627 || yy2arr4627 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4643 := z.DecBinary()
	_ = yym4643
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4644 := r.ContainerType()
		if yyct4644 == codecSelferValueTypeMap1234 {
			yyl4644 := r.ReadMapStart()
			if yyl4644 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4644, d)
			}
		} else if yyct4644 == codecSelferValueTypeArray1234 {
			yyl4644 := r.ReadArrayStart()
			if yyl4644 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4644, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4645Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4645Slc
	var yyhl4645 bool = l >= 0
	for yyj4645 := 0; ; yyj4645++ {
		if yyhl4645 {
			if yyj4645 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4645Slc = r.DecodeBytes(yys4645Slc, true, true)
		yys4645 := string(yys4645Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4645 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4648 := &x.ObjectMeta
				yyv4648.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4650 := &x.Data
				yym4651 := z.DecBinary()
				_ = yym4651
				if false {
				} else {
					*yyv4650 = r.DecodeBytes(*(*[]byte)(yyv4650), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4645)
		} // end switch yys4645
	} // end for yyj4645
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4652 int
	var yyb4652 bool
	var yyhl4652 bool = l >= 0
	yyj4652++
	if yyhl4652 {
		yyb4652 = yyj4652 > l
	} else {
		yyb4652 = r.CheckBreak()
	}
	if yyb4652 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4652++
	if yyhl4652 {
		yyb4652 = yyj4652 > l
	} else {
		yyb4652 = r.CheckBreak()
	}
	if yyb4652 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4652++
	if yyhl4652 {
		yyb4652 = yyj4652 > l
	} else {
		yyb4652 = r.CheckBreak()
	}
	if yyb4652 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4655 := &x.ObjectMeta
		yyv4655.CodecDecodeSelf(d)
	}
	yyj4652++
	if yyhl4652 {
		yyb4652 = yyj4652 > l
	} else {
		yyb4652 = r.CheckBreak()
	}
	if yyb4652 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4652++
	if yyhl4652 {
		yyb4652 = yyj4652 > l
	} else {
		yyb4652 = r.CheckBreak()
	}
	if yyb4652 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4657 := &x.Data
		yym4658 := z.DecBinary()
		_ = yym4658
		if false {
		} else {
			*yyv4657 = r.DecodeBytes(*(*[]byte)(yyv4657), false, false)
		}
	}
	for {
		yyj4652++
		if yyhl4652 {
			yyb4652 = yyj4652 > l
		} else {
			yyb4652 = r.CheckBreak()
		}
		if yyb4652 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4652-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4659 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4660 := &yyv4659
		yy4660.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4661 := *v
	yyh4661, yyl4661 := z.DecSliceHelperStart()
	var yyc4661 bool
	if yyl4661 == 0 {
		if yyv4661 == nil {
			yyv4661 = []OwnerReference{}
			yyc4661 = true
		} else if len(yyv4661) != 0 {
			yyv4661 = yyv4661[:0]
			yyc4661 = true
		}
	} else if yyl4661 > 0 {
		var yyrr4661, yyrl4661 int
		var yyrt4661 bool
		if yyl4661 > cap(yyv4661) {

			yyrg4661 := len(yyv4661) > 0
			yyv24661 := yyv4661
			yyrl4661, yyrt4661 = z.DecInferLen(yyl4661, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4661 {
				if yyrl4661 <= cap(yyv4661) {
					yyv4661 = yyv4661[:yyrl4661]
				} else {
					yyv4661 = make([]OwnerReference, yyrl4661)
				}
			} else {
				yyv4661 = make([]OwnerReference, yyrl4661)
			}
			yyc4661 = true
			yyrr4661 = len(yyv4661)
			if yyrg4661 {
				copy(yyv4661, yyv24661)
			}
		} else if yyl4661 != len(yyv4661) {
			yyv4661 = yyv4661[:yyl4661]
			yyc4661 = true
		}
		yyj4661 := 0
		for ; yyj4661 < yyrr4661; yyj4661++ {
			yyh4661.ElemContainerState(yyj4661)
			if r.TryDecodeAsNil() {
				yyv4661[yyj4661] = OwnerReference{}
			} else {
				yyv4662 := &yyv4661[yyj4661]
				yyv4662.CodecDecodeSelf(d)
			}

		}
		if yyrt4661 {
			for ; yyj4661 < yyl4661; yyj4661++ {
				yyv4661 = append(yyv4661, OwnerReference{})
				yyh4661.ElemContainerState(yyj4661)
				if r.TryDecodeAsNil() {
					yyv4661[yyj4661] = OwnerReference{}
				} else {
					yyv4663 := &yyv4661[yyj4661]
					yyv4663.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4661 := 0
		for ; !r.CheckBreak(); yyj4661++ {

			if yyj4661 >= len(yyv4661) {
				yyv4661 = append(yyv4661, OwnerReference{}) // var yyz4661 OwnerReference
				yyc4661 = true
			}
			yyh4661.ElemContainerState(yyj4661)
			if yyj4661 < len(yyv4661) {
				if r.TryDecodeAsNil() {
					yyv4661[yyj4661] = OwnerReference{}
				} else {
					yyv4664 := &yyv4661[yyj4661]
					yyv4664.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4661 < len(yyv4661) {
			yyv4661 = yyv4661[:yyj4661]
			yyc4661 = true
		} else if yyj4661 == 0 && yyv4661 == nil {
			yyv4661 = []OwnerReference{}
			yyc4661 = true
		}
	}
	yyh4661.End()
	if yyc4661 {
		*v = yyv4661
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4665 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4665.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4666 := *v
	yyh4666, yyl4666 := z.DecSliceHelperStart()
	var yyc4666 bool
	if yyl4666 == 0 {
		if yyv4666 == nil {
			yyv4666 = []PersistentVolumeAccessMode{}
			yyc4666 = true
		} else if len(yyv4666) != 0 {
			yyv4666 = yyv4666[:0]
			yyc4666 = true
		}
	} else if yyl4666 > 0 {
		var yyrr4666, yyrl4666 int
		var yyrt4666 bool
		if yyl4666 > cap(yyv4666) {

			yyrl4666, yyrt4666 = z.DecInferLen(yyl4666, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4666 {
				if yyrl4666 <= cap(yyv4666) {
					yyv4666 = yyv4666[:yyrl4666]
				} else {
					yyv4666 = make([]PersistentVolumeAccessMode, yyrl4666)
				}
			} else {
				yyv4666 = make([]PersistentVolumeAccessMode, yyrl4666)
			}
			yyc4666 = true
			yyrr4666 = len(yyv4666)
		} else if yyl4666 != len(yyv4666) {
			yyv4666 = yyv4666[:yyl4666]
			yyc4666 = true
		}
		yyj4666 := 0
		for ; yyj4666 < yyrr4666; yyj4666++ {
			yyh4666.ElemContainerState(yyj4666)
			if r.TryDecodeAsNil() {
				yyv4666[yyj4666] = ""
			} else {
				yyv4666[yyj4666] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4666 {
			for ; yyj4666 < yyl4666; yyj4666++ {
				yyv4666 = append(yyv4666, "")
				yyh4666.ElemContainerState(yyj4666)
				if r.TryDecodeAsNil() {
					yyv4666[yyj4666] = ""
				} else {
					yyv4666[yyj4666] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4666 := 0
		for ; !r.CheckBreak(); yyj4666++ {

			if yyj4666 >= len(yyv4666) {
				yyv4666 = append(yyv4666, "") // var yyz4666 PersistentVolumeAccessMode
				yyc4666 = true
			}
			yyh4666.ElemContainerState(yyj4666)
			if yyj4666 < len(yyv4666) {
				if r.TryDecodeAsNil() {
					yyv4666[yyj4666] = ""
				} else {
					yyv4666[yyj4666] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4666 < len(yyv4666) {
			yyv4666 = yyv4666[:yyj4666]
			yyc4666 = true
		} else if yyj4666 == 0 && yyv4666 == nil {
			yyv4666 = []PersistentVolumeAccessMode{}
			yyc4666 = true
		}
	}
	yyh4666.End()
	if yyc4666 {
		*v = yyv4666
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4670 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4671 := &yyv4670
		yy4671.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4672 := *v
	yyh4672, yyl4672 := z.DecSliceHelperStart()
	var yyc4672 bool
	if yyl4672 == 0 {
		if yyv4672 == nil {
			yyv4672 = []PersistentVolume{}
			yyc4672 = true
		} else if len(yyv4672) != 0 {
			yyv4672 = yyv4672[:0]
			yyc4672 = true
		}
	} else if yyl4672 > 0 {
		var yyrr4672, yyrl4672 int
		var yyrt4672 bool
		if yyl4672 > cap(yyv4672) {

			yyrg4672 := len(yyv4672) > 0
			yyv24672 := yyv4672
			yyrl4672, yyrt4672 = z.DecInferLen(yyl4672, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4672 {
				if yyrl4672 <= cap(yyv4672) {
					yyv4672 = yyv4672[:yyrl4672]
				} else {
					yyv4672 = make([]PersistentVolume, yyrl4672)
				}
			} else {
				yyv4672 = make([]PersistentVolume, yyrl4672)
			}
			yyc4672 = true
			yyrr4672 = len(yyv4672)
			if yyrg4672 {
				copy(yyv4672, yyv24672)
			}
		} else if yyl4672 != len(yyv4672) {
			yyv4672 = yyv4672[:yyl4672]
			yyc4672 = true
		}
		yyj4672 := 0
		for ; yyj4672 < yyrr4672; yyj4672++ {
			yyh4672.ElemContainerState(yyj4672)
			if r.TryDecodeAsNil() {
				yyv4672[yyj4672] = PersistentVolume{}
			} else {
				yyv4673 := &yyv4672[yyj4672]
				yyv4673.CodecDecodeSelf(d)
			}

		}
		if yyrt4672 {
			for ; yyj4672 < yyl4672; yyj4672++ {
				yyv4672 = append(yyv4672, PersistentVolume{})
				yyh4672.ElemContainerState(yyj4672)
				if r.TryDecodeAsNil() {
					yyv4672[yyj4672] = PersistentVolume{}
				} else {
					yyv4674 := &yyv4672[yyj4672]
					yyv4674.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4672 := 0
		for ; !r.CheckBreak(); yyj4672++ {

			if yyj4672 >= len(yyv4672) {
				yyv4672 = append(yyv4672, PersistentVolume{}) // var yyz4672 PersistentVolume
				yyc4672 = true
			}
			yyh4672.ElemContainerState(yyj4672)
			if yyj4672 < len(yyv4672) {
				if r.TryDecodeAsNil() {
					yyv4672[yyj4672] = PersistentVolume{}
				} else {
					yyv4675 := &yyv4672[yyj4672]
					yyv4675.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4672 < len(yyv4672) {
			yyv4672 = yyv4672[:yyj4672]
			yyc4672 = true
		} else if yyj4672 == 0 && yyv4672 == nil {
			yyv4672 = []PersistentVolume{}
			yyc4672 = true
		}
	}
	yyh4672.End()
	if yyc4672 {
		*v = yyv4672
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4676 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4677 := &yyv4676
		yy4677.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4678 := *v
	yyh4678, yyl4678 := z.DecSliceHelperStart()
	var yyc4678 bool
	if yyl4678 == 0 {
		if yyv4678 == nil {
			yyv4678 = []PersistentVolumeClaim{}
			yyc4678 = true
		} else if len(yyv4678) != 0 {
			yyv4678 = yyv4678[:0]
			yyc4678 = true
		}
	} else if yyl4678 > 0 {
		var yyrr4678, yyrl4678 int
		var yyrt4678 bool
		if yyl4678 > cap(yyv4678) {

			yyrg4678 := len(yyv4678) > 0
			yyv24678 := yyv4678
			yyrl4678, yyrt4678 = z.DecInferLen(yyl4678, z.DecBasicHandle().MaxInitLen, 368)
			if yyrt4678 {
				if yyrl4678 <= cap(yyv4678) {
					yyv4678 = yyv4678[:yyrl4678]
				} else {
					yyv4678 = make([]PersistentVolumeClaim, yyrl4678)
				}
			} else {
				yyv4678 = make([]PersistentVolumeClaim, yyrl4678)
			}
			yyc4678 = true
			yyrr4678 = len(yyv4678)
			if yyrg4678 {
				copy(yyv4678, yyv24678)
			}
		} else if yyl4678 != len(yyv4678) {
			yyv4678 = yyv4678[:yyl4678]
			yyc4678 = true
		}
		yyj4678 := 0
		for ; yyj4678 < yyrr4678; yyj4678++ {
			yyh4678.ElemContainerState(yyj4678)
			if r.TryDecodeAsNil() {
				yyv4678[yyj4678] = PersistentVolumeClaim{}
			} else {
				yyv4679 := &yyv4678[yyj4678]
				yyv4679.CodecDecodeSelf(d)
			}

		}
		if yyrt4678 {
			for ; yyj4678 < yyl4678; yyj4678++ {
				yyv4678 = append(yyv4678, PersistentVolumeClaim{})
				yyh4678.ElemContainerState(yyj4678)
				if r.TryDecodeAsNil() {
					yyv4678[yyj4678] = PersistentVolumeClaim{}
				} else {
					yyv4680 := &yyv4678[yyj4678]
					yyv4680.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4678 := 0
		for ; !r.CheckBreak(); yyj4678++ {

			if yyj4678 >= len(yyv4678) {
				yyv4678 = append(yyv4678, PersistentVolumeClaim{}) // var yyz4678 PersistentVolumeClaim
				yyc4678 = true
			}
			yyh4678.ElemContainerState(yyj4678)
			if yyj4678 < len(yyv4678) {
				if r.TryDecodeAsNil() {
					yyv4678[yyj4678] = PersistentVolumeClaim{}
				} else {
					yyv4681 := &yyv4678[yyj4678]
					yyv4681.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4678 < len(yyv4678) {
			yyv4678 = yyv4678[:yyj4678]
			yyc4678 = true
		} else if yyj4678 == 0 && yyv4678 == nil {
			yyv4678 = []PersistentVolumeClaim{}
			yyc4678 = true
		}
	}
	yyh4678.End()
	if yyc4678 {
		*v = yyv4678
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4682 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4683 := &yyv4682
		yy4683.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4684 := *v
	yyh4684, yyl4684 := z.DecSliceHelperStart()
	var yyc4684 bool
	if yyl4684 == 0 {
		if yyv4684 == nil {
			yyv4684 = []KeyToPath{}
			yyc4684 = true
		} else if len(yyv4684) != 0 {
			yyv4684 = yyv4684[:0]
			yyc4684 = true
		}
	} else if yyl4684 > 0 {
		var yyrr4684, yyrl4684 int
		var yyrt4684 bool
		if yyl4684 > cap(yyv4684) {

			yyrg4684 := len(yyv4684) > 0
			yyv24684 := yyv4684
			yyrl4684, yyrt4684 = z.DecInferLen(yyl4684, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4684 {
				if yyrl4684 <= cap(yyv4684) {
					yyv4684 = yyv4684[:yyrl4684]
				} else {
					yyv4684 = make([]KeyToPath, yyrl4684)
				}
			} else {
				yyv4684 = make([]KeyToPath, yyrl4684)
			}
			yyc4684 = true
			yyrr4684 = len(yyv4684)
			if yyrg4684 {
				copy(yyv4684, yyv24684)
			}
		} else if yyl4684 != len(yyv4684) {
			yyv4684 = yyv4684[:yyl4684]
			yyc4684 = true
		}
		yyj4684 := 0
		for ; yyj4684 < yyrr4684; yyj4684++ {
			yyh4684.ElemContainerState(yyj4684)
			if r.TryDecodeAsNil() {
				yyv4684[yyj4684] = KeyToPath{}
			} else {
				yyv4685 := &yyv4684[yyj4684]
				yyv4685.CodecDecodeSelf(d)
			}

		}
		if yyrt4684 {
			for ; yyj4684 < yyl4684; yyj4684++ {
				yyv4684 = append(yyv4684, KeyToPath{})
				yyh4684.ElemContainerState(yyj4684)
				if r.TryDecodeAsNil() {
					yyv4684[yyj4684] = KeyToPath{}
				} else {
					yyv4686 := &yyv4684[yyj4684]
					yyv4686.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4684 := 0
		for ; !r.CheckBreak(); yyj4684++ {

			if yyj4684 >= len(yyv4684) {
				yyv4684 = append(yyv4684, KeyToPath{}) // var yyz4684 KeyToPath
				yyc4684 = true
			}
			yyh4684.ElemContainerState(yyj4684)
			if yyj4684 < len(yyv4684) {
				if r.TryDecodeAsNil() {
					yyv4684[yyj4684] = KeyToPath{}
				} else {
					yyv4687 := &yyv4684[yyj4684]
					yyv4687.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4684 < len(yyv4684) {
			yyv4684 = yyv4684[:yyj4684]
			yyc4684 = true
		} else if yyj4684 == 0 && yyv4684 == nil {
			yyv4684 = []KeyToPath{}
			yyc4684 = true
		}
	}
	yyh4684.End()
	if yyc4684 {
		*v = yyv4684
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4688 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4689 := &yyv4688
		yy4689.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4690 := *v
	yyh4690, yyl4690 := z.DecSliceHelperStart()
	var yyc4690 bool
	if yyl4690 == 0 {
		if yyv4690 == nil {
			yyv4690 = []DownwardAPIVolumeFile{}
			yyc4690 = true
		} else if len(yyv4690) != 0 {
			yyv4690 = yyv4690[:0]
			yyc4690 = true
		}
	} else if yyl4690 > 0 {
		var yyrr4690, yyrl4690 int
		var yyrt4690 bool
		if yyl4690 > cap(yyv4690) {

			yyrg4690 := len(yyv4690) > 0
			yyv24690 := yyv4690
			yyrl4690, yyrt4690 = z.DecInferLen(yyl4690, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4690 {
				if yyrl4690 <= cap(yyv4690) {
					yyv4690 = yyv4690[:yyrl4690]
				} else {
					yyv4690 = make([]DownwardAPIVolumeFile, yyrl4690)
				}
			} else {
				yyv4690 = make([]DownwardAPIVolumeFile, yyrl4690)
			}
			yyc4690 = true
			yyrr4690 = len(yyv4690)
			if yyrg4690 {
				copy(yyv4690, yyv24690)
			}
		} else if yyl4690 != len(yyv4690) {
			yyv4690 = yyv4690[:yyl4690]
			yyc4690 = true
		}
		yyj4690 := 0
		for ; yyj4690 < yyrr4690; yyj4690++ {
			yyh4690.ElemContainerState(yyj4690)
			if r.TryDecodeAsNil() {
				yyv4690[yyj4690] = DownwardAPIVolumeFile{}
			} else {
				yyv4691 := &yyv4690[yyj4690]
				yyv4691.CodecDecodeSelf(d)
			}

		}
		if yyrt4690 {
			for ; yyj4690 < yyl4690; yyj4690++ {
				yyv4690 = append(yyv4690, DownwardAPIVolumeFile{})
				yyh4690.ElemContainerState(yyj4690)
				if r.TryDecodeAsNil() {
					yyv4690[yyj4690] = DownwardAPIVolumeFile{}
				} else {
					yyv4692 := &yyv4690[yyj4690]
					yyv4692.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4690 := 0
		for ; !r.CheckBreak(); yyj4690++ {

			if yyj4690 >= len(yyv4690) {
				yyv4690 = append(yyv4690, DownwardAPIVolumeFile{}) // var yyz4690 DownwardAPIVolumeFile
				yyc4690 = true
			}
			yyh4690.ElemContainerState(yyj4690)
			if yyj4690 < len(yyv4690) {
				if r.TryDecodeAsNil() {
					yyv4690[yyj4690] = DownwardAPIVolumeFile{}
				} else {
					yyv4693 := &yyv4690[yyj4690]
					yyv4693.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4690 < len(yyv4690) {
			yyv4690 = yyv4690[:yyj4690]
			yyc4690 = true
		} else if yyj4690 == 0 && yyv4690 == nil {
			yyv4690 = []DownwardAPIVolumeFile{}
			yyc4690 = true
		}
	}
	yyh4690.End()
	if yyc4690 {
		*v = yyv4690
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4694 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4695 := &yyv4694
		yy4695.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4696 := *v
	yyh4696, yyl4696 := z.DecSliceHelperStart()
	var yyc4696 bool
	if yyl4696 == 0 {
		if yyv4696 == nil {
			yyv4696 = []HTTPHeader{}
			yyc4696 = true
		} else if len(yyv4696) != 0 {
			yyv4696 = yyv4696[:0]
			yyc4696 = true
		}
	} else if yyl4696 > 0 {
		var yyrr4696, yyrl4696 int
		var yyrt4696 bool
		if yyl4696 > cap(yyv4696) {

			yyrg4696 := len(yyv4696) > 0
			yyv24696 := yyv4696
			yyrl4696, yyrt4696 = z.DecInferLen(yyl4696, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4696 {
				if yyrl4696 <= cap(yyv4696) {
					yyv4696 = yyv4696[:yyrl4696]
				} else {
					yyv4696 = make([]HTTPHeader, yyrl4696)
				}
			} else {
				yyv4696 = make([]HTTPHeader, yyrl4696)
			}
			yyc4696 = true
			yyrr4696 = len(yyv4696)
			if yyrg4696 {
				copy(yyv4696, yyv24696)
			}
		} else if yyl4696 != len(yyv4696) {
			yyv4696 = yyv4696[:yyl4696]
			yyc4696 = true
		}
		yyj4696 := 0
		for ; yyj4696 < yyrr4696; yyj4696++ {
			yyh4696.ElemContainerState(yyj4696)
			if r.TryDecodeAsNil() {
				yyv4696[yyj4696] = HTTPHeader{}
			} else {
				yyv4697 := &yyv4696[yyj4696]
				yyv4697.CodecDecodeSelf(d)
			}

		}
		if yyrt4696 {
			for ; yyj4696 < yyl4696; yyj4696++ {
				yyv4696 = append(yyv4696, HTTPHeader{})
				yyh4696.ElemContainerState(yyj4696)
				if r.TryDecodeAsNil() {
					yyv4696[yyj4696] = HTTPHeader{}
				} else {
					yyv4698 := &yyv4696[yyj4696]
					yyv4698.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4696 := 0
		for ; !r.CheckBreak(); yyj4696++ {

			if yyj4696 >= len(yyv4696) {
				yyv4696 = append(yyv4696, HTTPHeader{}) // var yyz4696 HTTPHeader
				yyc4696 = true
			}
			yyh4696.ElemContainerState(yyj4696)
			if yyj4696 < len(yyv4696) {
				if r.TryDecodeAsNil() {
					yyv4696[yyj4696] = HTTPHeader{}
				} else {
					yyv4699 := &yyv4696[yyj4696]
					yyv4699.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4696 < len(yyv4696) {
			yyv4696 = yyv4696[:yyj4696]
			yyc4696 = true
		} else if yyj4696 == 0 && yyv4696 == nil {
			yyv4696 = []HTTPHeader{}
			yyc4696 = true
		}
	}
	yyh4696.End()
	if yyc4696 {
		*v = yyv4696
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4700 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4700.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4701 := *v
	yyh4701, yyl4701 := z.DecSliceHelperStart()
	var yyc4701 bool
	if yyl4701 == 0 {
		if yyv4701 == nil {
			yyv4701 = []Capability{}
			yyc4701 = true
		} else if len(yyv4701) != 0 {
			yyv4701 = yyv4701[:0]
			yyc4701 = true
		}
	} else if yyl4701 > 0 {
		var yyrr4701, yyrl4701 int
		var yyrt4701 bool
		if yyl4701 > cap(yyv4701) {

			yyrl4701, yyrt4701 = z.DecInferLen(yyl4701, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4701 {
				if yyrl4701 <= cap(yyv4701) {
					yyv4701 = yyv4701[:yyrl4701]
				} else {
					yyv4701 = make([]Capability, yyrl4701)
				}
			} else {
				yyv4701 = make([]Capability, yyrl4701)
			}
			yyc4701 = true
			yyrr4701 = len(yyv4701)
		} else if yyl4701 != len(yyv4701) {
			yyv4701 = yyv4701[:yyl4701]
			yyc4701 = true
		}
		yyj4701 := 0
		for ; yyj4701 < yyrr4701; yyj4701++ {
			yyh4701.ElemContainerState(yyj4701)
			if r.TryDecodeAsNil() {
				yyv4701[yyj4701] = ""
			} else {
				yyv4701[yyj4701] = Capability(r.DecodeString())
			}

		}
		if yyrt4701 {
			for ; yyj4701 < yyl4701; yyj4701++ {
				yyv4701 = append(yyv4701, "")
				yyh4701.ElemContainerState(yyj4701)
				if r.TryDecodeAsNil() {
					yyv4701[yyj4701] = ""
				} else {
					yyv4701[yyj4701] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4701 := 0
		for ; !r.CheckBreak(); yyj4701++ {

			if yyj4701 >= len(yyv4701) {
				yyv4701 = append(yyv4701, "") // var yyz4701 Capability
				yyc4701 = true
			}
			yyh4701.ElemContainerState(yyj4701)
			if yyj4701 < len(yyv4701) {
				if r.TryDecodeAsNil() {
					yyv4701[yyj4701] = ""
				} else {
					yyv4701[yyj4701] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4701 < len(yyv4701) {
			yyv4701 = yyv4701[:yyj4701]
			yyc4701 = true
		} else if yyj4701 == 0 && yyv4701 == nil {
			yyv4701 = []Capability{}
			yyc4701 = true
		}
	}
	yyh4701.End()
	if yyc4701 {
		*v = yyv4701
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4705 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4706 := &yyv4705
		yy4706.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4707 := *v
	yyh4707, yyl4707 := z.DecSliceHelperStart()
	var yyc4707 bool
	if yyl4707 == 0 {
		if yyv4707 == nil {
			yyv4707 = []ContainerPort{}
			yyc4707 = true
		} else if len(yyv4707) != 0 {
			yyv4707 = yyv4707[:0]
			yyc4707 = true
		}
	} else if yyl4707 > 0 {
		var yyrr4707, yyrl4707 int
		var yyrt4707 bool
		if yyl4707 > cap(yyv4707) {

			yyrg4707 := len(yyv4707) > 0
			yyv24707 := yyv4707
			yyrl4707, yyrt4707 = z.DecInferLen(yyl4707, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4707 {
				if yyrl4707 <= cap(yyv4707) {
					yyv4707 = yyv4707[:yyrl4707]
				} else {
					yyv4707 = make([]ContainerPort, yyrl4707)
				}
			} else {
				yyv4707 = make([]ContainerPort, yyrl4707)
			}
			yyc4707 = true
			yyrr4707 = len(yyv4707)
			if yyrg4707 {
				copy(yyv4707, yyv24707)
			}
		} else if yyl4707 != len(yyv4707) {
			yyv4707 = yyv4707[:yyl4707]
			yyc4707 = true
		}
		yyj4707 := 0
		for ; yyj4707 < yyrr4707; yyj4707++ {
			yyh4707.ElemContainerState(yyj4707)
			if r.TryDecodeAsNil() {
				yyv4707[yyj4707] = ContainerPort{}
			} else {
				yyv4708 := &yyv4707[yyj4707]
				yyv4708.CodecDecodeSelf(d)
			}

		}
		if yyrt4707 {
			for ; yyj4707 < yyl4707; yyj4707++ {
				yyv4707 = append(yyv4707, ContainerPort{})
				yyh4707.ElemContainerState(yyj4707)
				if r.TryDecodeAsNil() {
					yyv4707[yyj4707] = ContainerPort{}
				} else {
					yyv4709 := &yyv4707[yyj4707]
					yyv4709.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4707 := 0
		for ; !r.CheckBreak(); yyj4707++ {

			if yyj4707 >= len(yyv4707) {
				yyv4707 = append(yyv4707, ContainerPort{}) // var yyz4707 ContainerPort
				yyc4707 = true
			}
			yyh4707.ElemContainerState(yyj4707)
			if yyj4707 < len(yyv4707) {
				if r.TryDecodeAsNil() {
					yyv4707[yyj4707] = ContainerPort{}
				} else {
					yyv4710 := &yyv4707[yyj4707]
					yyv4710.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4707 < len(yyv4707) {
			yyv4707 = yyv4707[:yyj4707]
			yyc4707 = true
		} else if yyj4707 == 0 && yyv4707 == nil {
			yyv4707 = []ContainerPort{}
			yyc4707 = true
		}
	}
	yyh4707.End()
	if yyc4707 {
		*v = yyv4707
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4711 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4712 := &yyv4711
		yy4712.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4713 := *v
	yyh4713, yyl4713 := z.DecSliceHelperStart()
	var yyc4713 bool
	if yyl4713 == 0 {
		if yyv4713 == nil {
			yyv4713 = []EnvVar{}
			yyc4713 = true
		} else if len(yyv4713) != 0 {
			yyv4713 = yyv4713[:0]
			yyc4713 = true
		}
	} else if yyl4713 > 0 {
		var yyrr4713, yyrl4713 int
		var yyrt4713 bool
		if yyl4713 > cap(yyv4713) {

			yyrg4713 := len(yyv4713) > 0
			yyv24713 := yyv4713
			yyrl4713, yyrt4713 = z.DecInferLen(yyl4713, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4713 {
				if yyrl4713 <= cap(yyv4713) {
					yyv4713 = yyv4713[:yyrl4713]
				} else {
					yyv4713 = make([]EnvVar, yyrl4713)
				}
			} else {
				yyv4713 = make([]EnvVar, yyrl4713)
			}
			yyc4713 = true
			yyrr4713 = len(yyv4713)
			if yyrg4713 {
				copy(yyv4713, yyv24713)
			}
		} else if yyl4713 != len(yyv4713) {
			yyv4713 = yyv4713[:yyl4713]
			yyc4713 = true
		}
		yyj4713 := 0
		for ; yyj4713 < yyrr4713; yyj4713++ {
			yyh4713.ElemContainerState(yyj4713)
			if r.TryDecodeAsNil() {
				yyv4713[yyj4713] = EnvVar{}
			} else {
				yyv4714 := &yyv4713[yyj4713]
				yyv4714.CodecDecodeSelf(d)
			}

		}
		if yyrt4713 {
			for ; yyj4713 < yyl4713; yyj4713++ {
				yyv4713 = append(yyv4713, EnvVar{})
				yyh4713.ElemContainerState(yyj4713)
				if r.TryDecodeAsNil() {
					yyv4713[yyj4713] = EnvVar{}
				} else {
					yyv4715 := &yyv4713[yyj4713]
					yyv4715.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4713 := 0
		for ; !r.CheckBreak(); yyj4713++ {

			if yyj4713 >= len(yyv4713) {
				yyv4713 = append(yyv4713, EnvVar{}) // var yyz4713 EnvVar
				yyc4713 = true
			}
			yyh4713.ElemContainerState(yyj4713)
			if yyj4713 < len(yyv4713) {
				if r.TryDecodeAsNil() {
					yyv4713[yyj4713] = EnvVar{}
				} else {
					yyv4716 := &yyv4713[yyj4713]
					yyv4716.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4713 < len(yyv4713) {
			yyv4713 = yyv4713[:yyj4713]
			yyc4713 = true
		} else if yyj4713 == 0 && yyv4713 == nil {
			yyv4713 = []EnvVar{}
			yyc4713 = true
		}
	}
	yyh4713.End()
	if yyc4713 {
		*v = yyv4713
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4717 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4718 := &yyv4717
		yy4718.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4719 := *v
	yyh4719, yyl4719 := z.DecSliceHelperStart()
	var yyc4719 bool
	if yyl4719 == 0 {
		if yyv4719 == nil {
			yyv4719 = []VolumeMount{}
			yyc4719 = true
		} else if len(yyv4719) != 0 {
			yyv4719 = yyv4719[:0]
			yyc4719 = true
		}
	} else if yyl4719 > 0 {
		var yyrr4719, yyrl4719 int
		var yyrt4719 bool
		if yyl4719 > cap(yyv4719) {

			yyrg4719 := len(yyv4719) > 0
			yyv24719 := yyv4719
			yyrl4719, yyrt4719 = z.DecInferLen(yyl4719, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4719 {
				if yyrl4719 <= cap(yyv4719) {
					yyv4719 = yyv4719[:yyrl4719]
				} else {
					yyv4719 = make([]VolumeMount, yyrl4719)
				}
			} else {
				yyv4719 = make([]VolumeMount, yyrl4719)
			}
			yyc4719 = true
			yyrr4719 = len(yyv4719)
			if yyrg4719 {
				copy(yyv4719, yyv24719)
			}
		} else if yyl4719 != len(yyv4719) {
			yyv4719 = yyv4719[:yyl4719]
			yyc4719 = true
		}
		yyj4719 := 0
		for ; yyj4719 < yyrr4719; yyj4719++ {
			yyh4719.ElemContainerState(yyj4719)
			if r.TryDecodeAsNil() {
				yyv4719[yyj4719] = VolumeMount{}
			} else {
				yyv4720 := &yyv4719[yyj4719]
				yyv4720.CodecDecodeSelf(d)
			}

		}
		if yyrt4719 {
			for ; yyj4719 < yyl4719; yyj4719++ {
				yyv4719 = append(yyv4719, VolumeMount{})
				yyh4719.ElemContainerState(yyj4719)
				if r.TryDecodeAsNil() {
					yyv4719[yyj4719] = VolumeMount{}
				} else {
					yyv4721 := &yyv4719[yyj4719]
					yyv4721.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4719 := 0
		for ; !r.CheckBreak(); yyj4719++ {

			if yyj4719 >= len(yyv4719) {
				yyv4719 = append(yyv4719, VolumeMount{}) // var yyz4719 VolumeMount
				yyc4719 = true
			}
			yyh4719.ElemContainerState(yyj4719)
			if yyj4719 < len(yyv4719) {
				if r.TryDecodeAsNil() {
					yyv4719[yyj4719] = VolumeMount{}
				} else {
					yyv4722 := &yyv4719[yyj4719]
					yyv4722.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4719 < len(yyv4719) {
			yyv4719 = yyv4719[:yyj4719]
			yyc4719 = true
		} else if yyj4719 == 0 && yyv4719 == nil {
			yyv4719 = []VolumeMount{}
			yyc4719 = true
		}
	}
	yyh4719.End()
	if yyc4719 {
		*v = yyv4719
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4723 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4724 := &yyv4723
		yy4724.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4725 := *v
	yyh4725, yyl4725 := z.DecSliceHelperStart()
	var yyc4725 bool
	if yyl4725 == 0 {
		if yyv4725 == nil {
			yyv4725 = []Pod{}
			yyc4725 = true
		} else if len(yyv4725) != 0 {
			yyv4725 = yyv4725[:0]
			yyc4725 = true
		}
	} else if yyl4725 > 0 {
		var yyrr4725, yyrl4725 int
		var yyrt4725 bool
		if yyl4725 > cap(yyv4725) {

			yyrg4725 := len(yyv4725) > 0
			yyv24725 := yyv4725
			yyrl4725, yyrt4725 = z.DecInferLen(yyl4725, z.DecBasicHandle().MaxInitLen, 640)
			if yyrt4725 {
				if yyrl4725 <= cap(yyv4725) {
					yyv4725 = yyv4725[:yyrl4725]
				} else {
					yyv4725 = make([]Pod, yyrl4725)
				}
			} else {
				yyv4725 = make([]Pod, yyrl4725)
			}
			yyc4725 = true
			yyrr4725 = len(yyv4725)
			if yyrg4725 {
				copy(yyv4725, yyv24725)
			}
		} else if yyl4725 != len(yyv4725) {
			yyv4725 = yyv4725[:yyl4725]
			yyc4725 = true
		}
		yyj4725 := 0
		for ; yyj4725 < yyrr4725; yyj4725++ {
			yyh4725.ElemContainerState(yyj4725)
			if r.TryDecodeAsNil() {
				yyv4725[yyj4725] = Pod{}
			} else {
				yyv4726 := &yyv4725[yyj4725]
				yyv4726.CodecDecodeSelf(d)
			}

		}
		if yyrt4725 {
			for ; yyj4725 < yyl4725; yyj4725++ {
				yyv4725 = append(yyv4725, Pod{})
				yyh4725.ElemContainerState(yyj4725)
				if r.TryDecodeAsNil() {
					yyv4725[yyj4725] = Pod{}
				} else {
					yyv4727 := &yyv4725[yyj4725]
					yyv4727.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4725 := 0
		for ; !r.CheckBreak(); yyj4725++ {

			if yyj4725 >= len(yyv4725) {
				yyv4725 = append(yyv4725, Pod{}) // var yyz4725 Pod
				yyc4725 = true
			}
			yyh4725.ElemContainerState(yyj4725)
			if yyj4725 < len(yyv4725) {
				if r.TryDecodeAsNil() {
					yyv4725[yyj4725] = Pod{}
				} else {
					yyv4728 := &yyv4725[yyj4725]
					yyv4728.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4725 < len(yyv4725) {
			yyv4725 = yyv4725[:yyj4725]
			yyc4725 = true
		} else if yyj4725 == 0 && yyv4725 == nil {
			yyv4725 = []Pod{}
			yyc4725 = true
		}
	}
	yyh4725.End()
	if yyc4725 {
		*v = yyv4725
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4729 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4730 := &yyv4729
		yy4730.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4731 := *v
	yyh4731, yyl4731 := z.DecSliceHelperStart()
	var yyc4731 bool
	if yyl4731 == 0 {
		if yyv4731 == nil {
			yyv4731 = []NodeSelectorTerm{}
			yyc4731 = true
		} else if len(yyv4731) != 0 {
			yyv4731 = yyv4731[:0]
			yyc4731 = true
		}
	} else if yyl4731 > 0 {
		var yyrr4731, yyrl4731 int
		var yyrt4731 bool
		if yyl4731 > cap(yyv4731) {

			yyrg4731 := len(yyv4731) > 0
			yyv24731 := yyv4731
			yyrl4731, yyrt4731 = z.DecInferLen(yyl4731, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4731 {
				if yyrl4731 <= cap(yyv4731) {
					yyv4731 = yyv4731[:yyrl4731]
				} else {
					yyv4731 = make([]NodeSelectorTerm, yyrl4731)
				}
			} else {
				yyv4731 = make([]NodeSelectorTerm, yyrl4731)
			}
			yyc4731 = true
			yyrr4731 = len(yyv4731)
			if yyrg4731 {
				copy(yyv4731, yyv24731)
			}
		} else if yyl4731 != len(yyv4731) {
			yyv4731 = yyv4731[:yyl4731]
			yyc4731 = true
		}
		yyj4731 := 0
		for ; yyj4731 < yyrr4731; yyj4731++ {
			yyh4731.ElemContainerState(yyj4731)
			if r.TryDecodeAsNil() {
				yyv4731[yyj4731] = NodeSelectorTerm{}
			} else {
				yyv4732 := &yyv4731[yyj4731]
				yyv4732.CodecDecodeSelf(d)
			}

		}
		if yyrt4731 {
			for ; yyj4731 < yyl4731; yyj4731++ {
				yyv4731 = append(yyv4731, NodeSelectorTerm{})
				yyh4731.ElemContainerState(yyj4731)
				if r.TryDecodeAsNil() {
					yyv4731[yyj4731] = NodeSelectorTerm{}
				} else {
					yyv4733 := &yyv4731[yyj4731]
					yyv4733.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4731 := 0
		for ; !r.CheckBreak(); yyj4731++ {

			if yyj4731 >= len(yyv4731) {
				yyv4731 = append(yyv4731, NodeSelectorTerm{}) // var yyz4731 NodeSelectorTerm
				yyc4731 = true
			}
			yyh4731.ElemContainerState(yyj4731)
			if yyj4731 < len(yyv4731) {
				if r.TryDecodeAsNil() {
					yyv4731[yyj4731] = NodeSelectorTerm{}
				} else {
					yyv4734 := &yyv4731[yyj4731]
					yyv4734.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4731 < len(yyv4731) {
			yyv4731 = yyv4731[:yyj4731]
			yyc4731 = true
		} else if yyj4731 == 0 && yyv4731 == nil {
			yyv4731 = []NodeSelectorTerm{}
			yyc4731 = true
		}
	}
	yyh4731.End()
	if yyc4731 {
		*v = yyv4731
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4735 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4736 := &yyv4735
		yy4736.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4737 := *v
	yyh4737, yyl4737 := z.DecSliceHelperStart()
	var yyc4737 bool
	if yyl4737 == 0 {
		if yyv4737 == nil {
			yyv4737 = []NodeSelectorRequirement{}
			yyc4737 = true
		} else if len(yyv4737) != 0 {
			yyv4737 = yyv4737[:0]
			yyc4737 = true
		}
	} else if yyl4737 > 0 {
		var yyrr4737, yyrl4737 int
		var yyrt4737 bool
		if yyl4737 > cap(yyv4737) {

			yyrg4737 := len(yyv4737) > 0
			yyv24737 := yyv4737
			yyrl4737, yyrt4737 = z.DecInferLen(yyl4737, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4737 {
				if yyrl4737 <= cap(yyv4737) {
					yyv4737 = yyv4737[:yyrl4737]
				} else {
					yyv4737 = make([]NodeSelectorRequirement, yyrl4737)
				}
			} else {
				yyv4737 = make([]NodeSelectorRequirement, yyrl4737)
			}
			yyc4737 = true
			yyrr4737 = len(yyv4737)
			if yyrg4737 {
				copy(yyv4737, yyv24737)
			}
		} else if yyl4737 != len(yyv4737) {
			yyv4737 = yyv4737[:yyl4737]
			yyc4737 = true
		}
		yyj4737 := 0
		for ; yyj4737 < yyrr4737; yyj4737++ {
			yyh4737.ElemContainerState(yyj4737)
			if r.TryDecodeAsNil() {
				yyv4737[yyj4737] = NodeSelectorRequirement{}
			} else {
				yyv4738 := &yyv4737[yyj4737]
				yyv4738.CodecDecodeSelf(d)
			}

		}
		if yyrt4737 {
			for ; yyj4737 < yyl4737; yyj4737++ {
				yyv4737 = append(yyv4737, NodeSelectorRequirement{})
				yyh4737.ElemContainerState(yyj4737)
				if r.TryDecodeAsNil() {
					yyv4737[yyj4737] = NodeSelectorRequirement{}
				} else {
					yyv4739 := &yyv4737[yyj4737]
					yyv4739.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4737 := 0
		for ; !r.CheckBreak(); yyj4737++ {

			if yyj4737 >= len(yyv4737) {
				yyv4737 = append(yyv4737, NodeSelectorRequirement{}) // var yyz4737 NodeSelectorRequirement
				yyc4737 = true
			}
			yyh4737.ElemContainerState(yyj4737)
			if yyj4737 < len(yyv4737) {
				if r.TryDecodeAsNil() {
					yyv4737[yyj4737] = NodeSelectorRequirement{}
				} else {
					yyv4740 := &yyv4737[yyj4737]
					yyv4740.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4737 < len(yyv4737) {
			yyv4737 = yyv4737[:yyj4737]
			yyc4737 = true
		} else if yyj4737 == 0 && yyv4737 == nil {
			yyv4737 = []NodeSelectorRequirement{}
			yyc4737 = true
		}
	}
	yyh4737.End()
	if yyc4737 {
		*v = yyv4737
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4741 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4742 := &yyv4741
		yy4742.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4743 := *v
	yyh4743, yyl4743 := z.DecSliceHelperStart()
	var yyc4743 bool
	if yyl4743 == 0 {
		if yyv4743 == nil {
			yyv4743 = []PodAffinityTerm{}
			yyc4743 = true
		} else if len(yyv4743) != 0 {
			yyv4743 = yyv4743[:0]
			yyc4743 = true
		}
	} else if yyl4743 > 0 {
		var yyrr4743, yyrl4743 int
		var yyrt4743 bool
		if yyl4743 > cap(yyv4743) {

			yyrg4743 := len(yyv4743) > 0
			yyv24743 := yyv4743
			yyrl4743, yyrt4743 = z.DecInferLen(yyl4743, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4743 {
				if yyrl4743 <= cap(yyv4743) {
					yyv4743 = yyv4743[:yyrl4743]
				} else {
					yyv4743 = make([]PodAffinityTerm, yyrl4743)
				}
			} else {
				yyv4743 = make([]PodAffinityTerm, yyrl4743)
			}
			yyc4743 = true
			yyrr4743 = len(yyv4743)
			if yyrg4743 {
				copy(yyv4743, yyv24743)
			}
		} else if yyl4743 != len(yyv4743) {
			yyv4743 = yyv4743[:yyl4743]
			yyc4743 = true
		}
		yyj4743 := 0
		for ; yyj4743 < yyrr4743; yyj4743++ {
			yyh4743.ElemContainerState(yyj4743)
			if r.TryDecodeAsNil() {
				yyv4743[yyj4743] = PodAffinityTerm{}
			} else {
				yyv4744 := &yyv4743[yyj4743]
				yyv4744.CodecDecodeSelf(d)
			}

		}
		if yyrt4743 {
			for ; yyj4743 < yyl4743; yyj4743++ {
				yyv4743 = append(yyv4743, PodAffinityTerm{})
				yyh4743.ElemContainerState(yyj4743)
				if r.TryDecodeAsNil() {
					yyv4743[yyj4743] = PodAffinityTerm{}
				} else {
					yyv4745 := &yyv4743[yyj4743]
					yyv4745.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4743 := 0
		for ; !r.CheckBreak(); yyj4743++ {

			if yyj4743 >= len(yyv4743) {
				yyv4743 = append(yyv4743, PodAffinityTerm{}) // var yyz4743 PodAffinityTerm
				yyc4743 = true
			}
			yyh4743.ElemContainerState(yyj4743)
			if yyj4743 < len(yyv4743) {
				if r.TryDecodeAsNil() {
					yyv4743[yyj4743] = PodAffinityTerm{}
				} else {
					yyv4746 := &yyv4743[yyj4743]
					yyv4746.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4743 < len(yyv4743) {
			yyv4743 = yyv4743[:yyj4743]
			yyc4743 = true
		} else if yyj4743 == 0 && yyv4743 == nil {
			yyv4743 = []PodAffinityTerm{}
			yyc4743 = true
		}
	}
	yyh4743.End()
	if yyc4743 {
		*v = yyv4743
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4747 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4748 := &yyv4747
		yy4748.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4749 := *v
	yyh4749, yyl4749 := z.DecSliceHelperStart()
	var yyc4749 bool
	if yyl4749 == 0 {
		if yyv4749 == nil {
			yyv4749 = []WeightedPodAffinityTerm{}
			yyc4749 = true
		} else if len(yyv4749) != 0 {
			yyv4749 = yyv4749[:0]
			yyc4749 = true
		}
	} else if yyl4749 > 0 {
		var yyrr4749, yyrl4749 int
		var yyrt4749 bool
		if yyl4749 > cap(yyv4749) {

			yyrg4749 := len(yyv4749) > 0
			yyv24749 := yyv4749
			yyrl4749, yyrt4749 = z.DecInferLen(yyl4749, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4749 {
				if yyrl4749 <= cap(yyv4749) {
					yyv4749 = yyv4749[:yyrl4749]
				} else {
					yyv4749 = make([]WeightedPodAffinityTerm, yyrl4749)
				}
			} else {
				yyv4749 = make([]WeightedPodAffinityTerm, yyrl4749)
			}
			yyc4749 = true
			yyrr4749 = len(yyv4749)
			if yyrg4749 {
				copy(yyv4749, yyv24749)
			}
		} else if yyl4749 != len(yyv4749) {
			yyv4749 = yyv4749[:yyl4749]
			yyc4749 = true
		}
		yyj4749 := 0
		for ; yyj4749 < yyrr4749; yyj4749++ {
			yyh4749.ElemContainerState(yyj4749)
			if r.TryDecodeAsNil() {
				yyv4749[yyj4749] = WeightedPodAffinityTerm{}
			} else {
				yyv4750 := &yyv4749[yyj4749]
				yyv4750.CodecDecodeSelf(d)
			}

		}
		if yyrt4749 {
			for ; yyj4749 < yyl4749; yyj4749++ {
				yyv4749 = append(yyv4749, WeightedPodAffinityTerm{})
				yyh4749.ElemContainerState(yyj4749)
				if r.TryDecodeAsNil() {
					yyv4749[yyj4749] = WeightedPodAffinityTerm{}
				} else {
					yyv4751 := &yyv4749[yyj4749]
					yyv4751.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4749 := 0
		for ; !r.CheckBreak(); yyj4749++ {

			if yyj4749 >= len(yyv4749) {
				yyv4749 = append(yyv4749, WeightedPodAffinityTerm{}) // var yyz4749 WeightedPodAffinityTerm
				yyc4749 = true
			}
			yyh4749.ElemContainerState(yyj4749)
			if yyj4749 < len(yyv4749) {
				if r.TryDecodeAsNil() {
					yyv4749[yyj4749] = WeightedPodAffinityTerm{}
				} else {
					yyv4752 := &yyv4749[yyj4749]
					yyv4752.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4749 < len(yyv4749) {
			yyv4749 = yyv4749[:yyj4749]
			yyc4749 = true
		} else if yyj4749 == 0 && yyv4749 == nil {
			yyv4749 = []WeightedPodAffinityTerm{}
			yyc4749 = true
		}
	}
	yyh4749.End()
	if yyc4749 {
		*v = yyv4749
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4753 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4754 := &yyv4753
		yy4754.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4755 := *v
	yyh4755, yyl4755 := z.DecSliceHelperStart()
	var yyc4755 bool
	if yyl4755 == 0 {
		if yyv4755 == nil {
			yyv4755 = []PreferredSchedulingTerm{}
			yyc4755 = true
		} else if len(yyv4755) != 0 {
			yyv4755 = yyv4755[:0]
			yyc4755 = true
		}
	} else if yyl4755 > 0 {
		var yyrr4755, yyrl4755 int
		var yyrt4755 bool
		if yyl4755 > cap(yyv4755) {

			yyrg4755 := len(yyv4755) > 0
			yyv24755 := yyv4755
			yyrl4755, yyrt4755 = z.DecInferLen(yyl4755, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4755 {
				if yyrl4755 <= cap(yyv4755) {
					yyv4755 = yyv4755[:yyrl4755]
				} else {
					yyv4755 = make([]PreferredSchedulingTerm, yyrl4755)
				}
			} else {
				yyv4755 = make([]PreferredSchedulingTerm, yyrl4755)
			}
			yyc4755 = true
			yyrr4755 = len(yyv4755)
			if yyrg4755 {
				copy(yyv4755, yyv24755)
			}
		} else if yyl4755 != len(yyv4755) {
			yyv4755 = yyv4755[:yyl4755]
			yyc4755 = true
		}
		yyj4755 := 0
		for ; yyj4755 < yyrr4755; yyj4755++ {
			yyh4755.ElemContainerState(yyj4755)
			if r.TryDecodeAsNil() {
				yyv4755[yyj4755] = PreferredSchedulingTerm{}
			} else {
				yyv4756 := &yyv4755[yyj4755]
				yyv4756.CodecDecodeSelf(d)
			}

		}
		if yyrt4755 {
			for ; yyj4755 < yyl4755; yyj4755++ {
				yyv4755 = append(yyv4755, PreferredSchedulingTerm{})
				yyh4755.ElemContainerState(yyj4755)
				if r.TryDecodeAsNil() {
					yyv4755[yyj4755] = PreferredSchedulingTerm{}
				} else {
					yyv4757 := &yyv4755[yyj4755]
					yyv4757.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4755 := 0
		for ; !r.CheckBreak(); yyj4755++ {

			if yyj4755 >= len(yyv4755) {
				yyv4755 = append(yyv4755, PreferredSchedulingTerm{}) // var yyz4755 PreferredSchedulingTerm
				yyc4755 = true
			}
			yyh4755.ElemContainerState(yyj4755)
			if yyj4755 < len(yyv4755) {
				if r.TryDecodeAsNil() {
					yyv4755[yyj4755] = PreferredSchedulingTerm{}
				} else {
					yyv4758 := &yyv4755[yyj4755]
					yyv4758.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4755 < len(yyv4755) {
			yyv4755 = yyv4755[:yyj4755]
			yyc4755 = true
		} else if yyj4755 == 0 && yyv4755 == nil {
			yyv4755 = []PreferredSchedulingTerm{}
			yyc4755 = true
		}
	}
	yyh4755.End()
	if yyc4755 {
		*v = yyv4755
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4759 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4760 := &yyv4759
		yy4760.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4761 := *v
	yyh4761, yyl4761 := z.DecSliceHelperStart()
	var yyc4761 bool
	if yyl4761 == 0 {
		if yyv4761 == nil {
			yyv4761 = []Volume{}
			yyc4761 = true
		} else if len(yyv4761) != 0 {
			yyv4761 = yyv4761[:0]
			yyc4761 = true
		}
	} else if yyl4761 > 0 {
		var yyrr4761, yyrl4761 int
		var yyrt4761 bool
		if yyl4761 > cap(yyv4761) {

			yyrg4761 := len(yyv4761) > 0
			yyv24761 := yyv4761
			yyrl4761, yyrt4761 = z.DecInferLen(yyl4761, z.DecBasicHandle().MaxInitLen, 208)
			if yyrt4761 {
				if yyrl4761 <= cap(yyv4761) {
					yyv4761 = yyv4761[:yyrl4761]
				} else {
					yyv4761 = make([]Volume, yyrl4761)
				}
			} else {
				yyv4761 = make([]Volume, yyrl4761)
			}
			yyc4761 = true
			yyrr4761 = len(yyv4761)
			if yyrg4761 {
				copy(yyv4761, yyv24761)
			}
		} else if yyl4761 != len(yyv4761) {
			yyv4761 = yyv4761[:yyl4761]
			yyc4761 = true
		}
		yyj4761 := 0
		for ; yyj4761 < yyrr4761; yyj4761++ {
			yyh4761.ElemContainerState(yyj4761)
			if r.TryDecodeAsNil() {
				yyv4761[yyj4761] = Volume{}
			} else {
				yyv4762 := &yyv4761[yyj4761]
				yyv4762.CodecDecodeSelf(d)
			}

		}
		if yyrt4761 {
			for ; yyj4761 < yyl4761; yyj4761++ {
				yyv4761 = append(yyv4761, Volume{})
				yyh4761.ElemContainerState(yyj4761)
				if r.TryDecodeAsNil() {
					yyv4761[yyj4761] = Volume{}
				} else {
					yyv4763 := &yyv4761[yyj4761]
					yyv4763.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4761 := 0
		for ; !r.CheckBreak(); yyj4761++ {

			if yyj4761 >= len(yyv4761) {
				yyv4761 = append(yyv4761, Volume{}) // var yyz4761 Volume
				yyc4761 = true
			}
			yyh4761.ElemContainerState(yyj4761)
			if yyj4761 < len(yyv4761) {
				if r.TryDecodeAsNil() {
					yyv4761[yyj4761] = Volume{}
				} else {
					yyv4764 := &yyv4761[yyj4761]
					yyv4764.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4761 < len(yyv4761) {
			yyv4761 = yyv4761[:yyj4761]
			yyc4761 = true
		} else if yyj4761 == 0 && yyv4761 == nil {
			yyv4761 = []Volume{}
			yyc4761 = true
		}
	}
	yyh4761.End()
	if yyc4761 {
		*v = yyv4761
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4765 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4766 := &yyv4765
		yy4766.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4767 := *v
	yyh4767, yyl4767 := z.DecSliceHelperStart()
	var yyc4767 bool
	if yyl4767 == 0 {
		if yyv4767 == nil {
			yyv4767 = []Container{}
			yyc4767 = true
		} else if len(yyv4767) != 0 {
			yyv4767 = yyv4767[:0]
			yyc4767 = true
		}
	} else if yyl4767 > 0 {
		var yyrr4767, yyrl4767 int
		var yyrt4767 bool
		if yyl4767 > cap(yyv4767) {

			yyrg4767 := len(yyv4767) > 0
			yyv24767 := yyv4767
			yyrl4767, yyrt4767 = z.DecInferLen(yyl4767, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4767 {
				if yyrl4767 <= cap(yyv4767) {
					yyv4767 = yyv4767[:yyrl4767]
				} else {
					yyv4767 = make([]Container, yyrl4767)
				}
			} else {
				yyv4767 = make([]Container, yyrl4767)
			}
			yyc4767 = true
			yyrr4767 = len(yyv4767)
			if yyrg4767 {
				copy(yyv4767, yyv24767)
			}
		} else if yyl4767 != len(yyv4767) {
			yyv4767 = yyv4767[:yyl4767]
			yyc4767 = true
		}
		yyj4767 := 0
		for ; yyj4767 < yyrr4767; yyj4767++ {
			yyh4767.ElemContainerState(yyj4767)
			if r.TryDecodeAsNil() {
				yyv4767[yyj4767] = Container{}
			} else {
				yyv4768 := &yyv4767[yyj4767]
				yyv4768.CodecDecodeSelf(d)
			}

		}
		if yyrt4767 {
			for ; yyj4767 < yyl4767; yyj4767++ {
				yyv4767 = append(yyv4767, Container{})
				yyh4767.ElemContainerState(yyj4767)
				if r.TryDecodeAsNil() {
					yyv4767[yyj4767] = Container{}
				} else {
					yyv4769 := &yyv4767[yyj4767]
					yyv4769.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4767 := 0
		for ; !r.CheckBreak(); yyj4767++ {

			if yyj4767 >= len(yyv4767) {
				yyv4767 = append(yyv4767, Container{}) // var yyz4767 Container
				yyc4767 = true
			}
			yyh4767.ElemContainerState(yyj4767)
			if yyj4767 < len(yyv4767) {
				if r.TryDecodeAsNil() {
					yyv4767[yyj4767] = Container{}
				} else {
					yyv4770 := &yyv4767[yyj4767]
					yyv4770.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4767 < len(yyv4767) {
			yyv4767 = yyv4767[:yyj4767]
			yyc4767 = true
		} else if yyj4767 == 0 && yyv4767 == nil {
			yyv4767 = []Container{}
			yyc4767 = true
		}
	}
	yyh4767.End()
	if yyc4767 {
		*v = yyv4767
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4771 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4772 := &yyv4771
		yy4772.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4773 := *v
	yyh4773, yyl4773 := z.DecSliceHelperStart()
	var yyc4773 bool
	if yyl4773 == 0 {
		if yyv4773 == nil {
			yyv4773 = []LocalObjectReference{}
			yyc4773 = true
		} else if len(yyv4773) != 0 {
			yyv4773 = yyv4773[:0]
			yyc4773 = true
		}
	} else if yyl4773 > 0 {
		var yyrr4773, yyrl4773 int
		var yyrt4773 bool
		if yyl4773 > cap(yyv4773) {

			yyrg4773 := len(yyv4773) > 0
			yyv24773 := yyv4773
			yyrl4773, yyrt4773 = z.DecInferLen(yyl4773, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4773 {
				if yyrl4773 <= cap(yyv4773) {
					yyv4773 = yyv4773[:yyrl4773]
				} else {
					yyv4773 = make([]LocalObjectReference, yyrl4773)
				}
			} else {
				yyv4773 = make([]LocalObjectReference, yyrl4773)
			}
			yyc4773 = true
			yyrr4773 = len(yyv4773)
			if yyrg4773 {
				copy(yyv4773, yyv24773)
			}
		} else if yyl4773 != len(yyv4773) {
			yyv4773 = yyv4773[:yyl4773]
			yyc4773 = true
		}
		yyj4773 := 0
		for ; yyj4773 < yyrr4773; yyj4773++ {
			yyh4773.ElemContainerState(yyj4773)
			if r.TryDecodeAsNil() {
				yyv4773[yyj4773] = LocalObjectReference{}
			} else {
				yyv4774 := &yyv4773[yyj4773]
				yyv4774.CodecDecodeSelf(d)
			}

		}
		if yyrt4773 {
			for ; yyj4773 < yyl4773; yyj4773++ {
				yyv4773 = append(yyv4773, LocalObjectReference{})
				yyh4773.ElemContainerState(yyj4773)
				if r.TryDecodeAsNil() {
					yyv4773[yyj4773] = LocalObjectReference{}
				} else {
					yyv4775 := &yyv4773[yyj4773]
					yyv4775.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4773 := 0
		for ; !r.CheckBreak(); yyj4773++ {

			if yyj4773 >= len(yyv4773) {
				yyv4773 = append(yyv4773, LocalObjectReference{}) // var yyz4773 LocalObjectReference
				yyc4773 = true
			}
			yyh4773.ElemContainerState(yyj4773)
			if yyj4773 < len(yyv4773) {
				if r.TryDecodeAsNil() {
					yyv4773[yyj4773] = LocalObjectReference{}
				} else {
					yyv4776 := &yyv4773[yyj4773]
					yyv4776.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4773 < len(yyv4773) {
			yyv4773 = yyv4773[:yyj4773]
			yyc4773 = true
		} else if yyj4773 == 0 && yyv4773 == nil {
			yyv4773 = []LocalObjectReference{}
			yyc4773 = true
		}
	}
	yyh4773.End()
	if yyc4773 {
		*v = yyv4773
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4777 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4778 := &yyv4777
		yy4778.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4779 := *v
	yyh4779, yyl4779 := z.DecSliceHelperStart()
	var yyc4779 bool
	if yyl4779 == 0 {
		if yyv4779 == nil {
			yyv4779 = []PodCondition{}
			yyc4779 = true
		} else if len(yyv4779) != 0 {
			yyv4779 = yyv4779[:0]
			yyc4779 = true
		}
	} else if yyl4779 > 0 {
		var yyrr4779, yyrl4779 int
		var yyrt4779 bool
		if yyl4779 > cap(yyv4779) {

			yyrg4779 := len(yyv4779) > 0
			yyv24779 := yyv4779
			yyrl4779, yyrt4779 = z.DecInferLen(yyl4779, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4779 {
				if yyrl4779 <= cap(yyv4779) {
					yyv4779 = yyv4779[:yyrl4779]
				} else {
					yyv4779 = make([]PodCondition, yyrl4779)
				}
			} else {
				yyv4779 = make([]PodCondition, yyrl4779)
			}
			yyc4779 = true
			yyrr4779 = len(yyv4779)
			if yyrg4779 {
				copy(yyv4779, yyv24779)
			}
		} else if yyl4779 != len(yyv4779) {
			yyv4779 = yyv4779[:yyl4779]
			yyc4779 = true
		}
		yyj4779 := 0
		for ; yyj4779 < yyrr4779; yyj4779++ {
			yyh4779.ElemContainerState(yyj4779)
			if r.TryDecodeAsNil() {
				yyv4779[yyj4779] = PodCondition{}
			} else {
				yyv4780 := &yyv4779[yyj4779]
				yyv4780.CodecDecodeSelf(d)
			}

		}
		if yyrt4779 {
			for ; yyj4779 < yyl4779; yyj4779++ {
				yyv4779 = append(yyv4779, PodCondition{})
				yyh4779.ElemContainerState(yyj4779)
				if r.TryDecodeAsNil() {
					yyv4779[yyj4779] = PodCondition{}
				} else {
					yyv4781 := &yyv4779[yyj4779]
					yyv4781.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4779 := 0
		for ; !r.CheckBreak(); yyj4779++ {

			if yyj4779 >= len(yyv4779) {
				yyv4779 = append(yyv4779, PodCondition{}) // var yyz4779 PodCondition
				yyc4779 = true
			}
			yyh4779.ElemContainerState(yyj4779)
			if yyj4779 < len(yyv4779) {
				if r.TryDecodeAsNil() {
					yyv4779[yyj4779] = PodCondition{}
				} else {
					yyv4782 := &yyv4779[yyj4779]
					yyv4782.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4779 < len(yyv4779) {
			yyv4779 = yyv4779[:yyj4779]
			yyc4779 = true
		} else if yyj4779 == 0 && yyv4779 == nil {
			yyv4779 = []PodCondition{}
			yyc4779 = true
		}
	}
	yyh4779.End()
	if yyc4779 {
		*v = yyv4779
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4783 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4784 := &yyv4783
		yy4784.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4785 := *v
	yyh4785, yyl4785 := z.DecSliceHelperStart()
	var yyc4785 bool
	if yyl4785 == 0 {
		if yyv4785 == nil {
			yyv4785 = []ContainerStatus{}
			yyc4785 = true
		} else if len(yyv4785) != 0 {
			yyv4785 = yyv4785[:0]
			yyc4785 = true
		}
	} else if yyl4785 > 0 {
		var yyrr4785, yyrl4785 int
		var yyrt4785 bool
		if yyl4785 > cap(yyv4785) {

			yyrg4785 := len(yyv4785) > 0
			yyv24785 := yyv4785
			yyrl4785, yyrt4785 = z.DecInferLen(yyl4785, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4785 {
				if yyrl4785 <= cap(yyv4785) {
					yyv4785 = yyv4785[:yyrl4785]
				} else {
					yyv4785 = make([]ContainerStatus, yyrl4785)
				}
			} else {
				yyv4785 = make([]ContainerStatus, yyrl4785)
			}
			yyc4785 = true
			yyrr4785 = len(yyv4785)
			if yyrg4785 {
				copy(yyv4785, yyv24785)
			}
		} else if yyl4785 != len(yyv4785) {
			yyv4785 = yyv4785[:yyl4785]
			yyc4785 = true
		}
		yyj4785 := 0
		for ; yyj4785 < yyrr4785; yyj4785++ {
			yyh4785.ElemContainerState(yyj4785)
			if r.TryDecodeAsNil() {
				yyv4785[yyj4785] = ContainerStatus{}
			} else {
				yyv4786 := &yyv4785[yyj4785]
				yyv4786.CodecDecodeSelf(d)
			}

		}
		if yyrt4785 {
			for ; yyj4785 < yyl4785; yyj4785++ {
				yyv4785 = append(yyv4785, ContainerStatus{})
				yyh4785.ElemContainerState(yyj4785)
				if r.TryDecodeAsNil() {
					yyv4785[yyj4785] = ContainerStatus{}
				} else {
					yyv4787 := &yyv4785[yyj4785]
					yyv4787.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4785 := 0
		for ; !r.CheckBreak(); yyj4785++ {

			if yyj4785 >= len(yyv4785) {
				yyv4785 = append(yyv4785, ContainerStatus{}) // var yyz4785 ContainerStatus
				yyc4785 = true
			}
			yyh4785.ElemContainerState(yyj4785)
			if yyj4785 < len(yyv4785) {
				if r.TryDecodeAsNil() {
					yyv4785[yyj4785] = ContainerStatus{}
				} else {
					yyv4788 := &yyv4785[yyj4785]
					yyv4788.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4785 < len(yyv4785) {
			yyv4785 = yyv4785[:yyj4785]
			yyc4785 = true
		} else if yyj4785 == 0 && yyv4785 == nil {
			yyv4785 = []ContainerStatus{}
			yyc4785 = true
		}
	}
	yyh4785.End()
	if yyc4785 {
		*v = yyv4785
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4789 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4790 := &yyv4789
		yy4790.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4791 := *v
	yyh4791, yyl4791 := z.DecSliceHelperStart()
	var yyc4791 bool
	if yyl4791 == 0 {
		if yyv4791 == nil {
			yyv4791 = []PodTemplate{}
			yyc4791 = true
		} else if len(yyv4791) != 0 {
			yyv4791 = yyv4791[:0]
			yyc4791 = true
		}
	} else if yyl4791 > 0 {
		var yyrr4791, yyrl4791 int
		var yyrt4791 bool
		if yyl4791 > cap(yyv4791) {

			yyrg4791 := len(yyv4791) > 0
			yyv24791 := yyv4791
			yyrl4791, yyrt4791 = z.DecInferLen(yyl4791, z.DecBasicHandle().MaxInitLen, 704)
			if yyrt4791 {
				if yyrl4791 <= cap(yyv4791) {
					yyv4791 = yyv4791[:yyrl4791]
				} else {
					yyv4791 = make([]PodTemplate, yyrl4791)
				}
			} else {
				yyv4791 = make([]PodTemplate, yyrl4791)
			}
			yyc4791 = true
			yyrr4791 = len(yyv4791)
			if yyrg4791 {
				copy(yyv4791, yyv24791)
			}
		} else if yyl4791 != len(yyv4791) {
			yyv4791 = yyv4791[:yyl4791]
			yyc4791 = true
		}
		yyj4791 := 0
		for ; yyj4791 < yyrr4791; yyj4791++ {
			yyh4791.ElemContainerState(yyj4791)
			if r.TryDecodeAsNil() {
				yyv4791[yyj4791] = PodTemplate{}
			} else {
				yyv4792 := &yyv4791[yyj4791]
				yyv4792.CodecDecodeSelf(d)
			}

		}
		if yyrt4791 {
			for ; yyj4791 < yyl4791; yyj4791++ {
				yyv4791 = append(yyv4791, PodTemplate{})
				yyh4791.ElemContainerState(yyj4791)
				if r.TryDecodeAsNil() {
					yyv4791[yyj4791] = PodTemplate{}
				} else {
					yyv4793 := &yyv4791[yyj4791]
					yyv4793.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4791 := 0
		for ; !r.CheckBreak(); yyj4791++ {

			if yyj4791 >= len(yyv4791) {
				yyv4791 = append(yyv4791, PodTemplate{}) // var yyz4791 PodTemplate
				yyc4791 = true
			}
			yyh4791.ElemContainerState(yyj4791)
			if yyj4791 < len(yyv4791) {
				if r.TryDecodeAsNil() {
					yyv4791[yyj4791] = PodTemplate{}
				} else {
					yyv4794 := &yyv4791[yyj4791]
					yyv4794.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4791 < len(yyv4791) {
			yyv4791 = yyv4791[:yyj4791]
			yyc4791 = true
		} else if yyj4791 == 0 && yyv4791 == nil {
			yyv4791 = []PodTemplate{}
			yyc4791 = true
		}
	}
	yyh4791.End()
	if yyc4791 {
		*v = yyv4791
	}
}

func (x codecSelfer1234) encSliceReplicationControllerCondition(v []ReplicationControllerCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4795 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4796 := &yyv4795
		yy4796.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationControllerCondition(v *[]ReplicationControllerCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4797 := *v
	yyh4797, yyl4797 := z.DecSliceHelperStart()
	var yyc4797 bool
	if yyl4797 == 0 {
		if yyv4797 == nil {
			yyv4797 = []ReplicationControllerCondition{}
			yyc4797 = true
		} else if len(yyv4797) != 0 {
			yyv4797 = yyv4797[:0]
			yyc4797 = true
		}
	} else if yyl4797 > 0 {
		var yyrr4797, yyrl4797 int
		var yyrt4797 bool
		if yyl4797 > cap(yyv4797) {

			yyrg4797 := len(yyv4797) > 0
			yyv24797 := yyv4797
			yyrl4797, yyrt4797 = z.DecInferLen(yyl4797, z.DecBasicHandle().MaxInitLen, 88)
			if yyrt4797 {
				if yyrl4797 <= cap(yyv4797) {
					yyv4797 = yyv4797[:yyrl4797]
				} else {
					yyv4797 = make([]ReplicationControllerCondition, yyrl4797)
				}
			} else {
				yyv4797 = make([]ReplicationControllerCondition, yyrl4797)
			}
			yyc4797 = true
			yyrr4797 = len(yyv4797)
			if yyrg4797 {
				copy(yyv4797, yyv24797)
			}
		} else if yyl4797 != len(yyv4797) {
			yyv4797 = yyv4797[:yyl4797]
			yyc4797 = true
		}
		yyj4797 := 0
		for ; yyj4797 < yyrr4797; yyj4797++ {
			yyh4797.ElemContainerState(yyj4797)
			if r.TryDecodeAsNil() {
				yyv4797[yyj4797] = ReplicationControllerCondition{}
			} else {
				yyv4798 := &yyv4797[yyj4797]
				yyv4798.CodecDecodeSelf(d)
			}

		}
		if yyrt4797 {
			for ; yyj4797 < yyl4797; yyj4797++ {
				yyv4797 = append(yyv4797, ReplicationControllerCondition{})
				yyh4797.ElemContainerState(yyj4797)
				if r.TryDecodeAsNil() {
					yyv4797[yyj4797] = ReplicationControllerCondition{}
				} else {
					yyv4799 := &yyv4797[yyj4797]
					yyv4799.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4797 := 0
		for ; !r.CheckBreak(); yyj4797++ {

			if yyj4797 >= len(yyv4797) {
				yyv4797 = append(yyv4797, ReplicationControllerCondition{}) // var yyz4797 ReplicationControllerCondition
				yyc4797 = true
			}
			yyh4797.ElemContainerState(yyj4797)
			if yyj4797 < len(yyv4797) {
				if r.TryDecodeAsNil() {
					yyv4797[yyj4797] = ReplicationControllerCondition{}
				} else {
					yyv4800 := &yyv4797[yyj4797]
					yyv4800.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4797 < len(yyv4797) {
			yyv4797 = yyv4797[:yyj4797]
			yyc4797 = true
		} else if yyj4797 == 0 && yyv4797 == nil {
			yyv4797 = []ReplicationControllerCondition{}
			yyc4797 = true
		}
	}
	yyh4797.End()
	if yyc4797 {
		*v = yyv4797
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4801 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4802 := &yyv4801
		yy4802.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4803 := *v
	yyh4803, yyl4803 := z.DecSliceHelperStart()
	var yyc4803 bool
	if yyl4803 == 0 {
		if yyv4803 == nil {
			yyv4803 = []ReplicationController{}
			yyc4803 = true
		} else if len(yyv4803) != 0 {
			yyv4803 = yyv4803[:0]
			yyc4803 = true
		}
	} else if yyl4803 > 0 {
		var yyrr4803, yyrl4803 int
		var yyrt4803 bool
		if yyl4803 > cap(yyv4803) {

			yyrg4803 := len(yyv4803) > 0
			yyv24803 := yyv4803
			yyrl4803, yyrt4803 = z.DecInferLen(yyl4803, z.DecBasicHandle().MaxInitLen, 328)
			if yyrt4803 {
				if yyrl4803 <= cap(yyv4803) {
					yyv4803 = yyv4803[:yyrl4803]
				} else {
					yyv4803 = make([]ReplicationController, yyrl4803)
				}
			} else {
				yyv4803 = make([]ReplicationController, yyrl4803)
			}
			yyc4803 = true
			yyrr4803 = len(yyv4803)
			if yyrg4803 {
				copy(yyv4803, yyv24803)
			}
		} else if yyl4803 != len(yyv4803) {
			yyv4803 = yyv4803[:yyl4803]
			yyc4803 = true
		}
		yyj4803 := 0
		for ; yyj4803 < yyrr4803; yyj4803++ {
			yyh4803.ElemContainerState(yyj4803)
			if r.TryDecodeAsNil() {
				yyv4803[yyj4803] = ReplicationController{}
			} else {
				yyv4804 := &yyv4803[yyj4803]
				yyv4804.CodecDecodeSelf(d)
			}

		}
		if yyrt4803 {
			for ; yyj4803 < yyl4803; yyj4803++ {
				yyv4803 = append(yyv4803, ReplicationController{})
				yyh4803.ElemContainerState(yyj4803)
				if r.TryDecodeAsNil() {
					yyv4803[yyj4803] = ReplicationController{}
				} else {
					yyv4805 := &yyv4803[yyj4803]
					yyv4805.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4803 := 0
		for ; !r.CheckBreak(); yyj4803++ {

			if yyj4803 >= len(yyv4803) {
				yyv4803 = append(yyv4803, ReplicationController{}) // var yyz4803 ReplicationController
				yyc4803 = true
			}
			yyh4803.ElemContainerState(yyj4803)
			if yyj4803 < len(yyv4803) {
				if r.TryDecodeAsNil() {
					yyv4803[yyj4803] = ReplicationController{}
				} else {
					yyv4806 := &yyv4803[yyj4803]
					yyv4806.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4803 < len(yyv4803) {
			yyv4803 = yyv4803[:yyj4803]
			yyc4803 = true
		} else if yyj4803 == 0 && yyv4803 == nil {
			yyv4803 = []ReplicationController{}
			yyc4803 = true
		}
	}
	yyh4803.End()
	if yyc4803 {
		*v = yyv4803
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4807 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4808 := &yyv4807
		yy4808.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4809 := *v
	yyh4809, yyl4809 := z.DecSliceHelperStart()
	var yyc4809 bool
	if yyl4809 == 0 {
		if yyv4809 == nil {
			yyv4809 = []Service{}
			yyc4809 = true
		} else if len(yyv4809) != 0 {
			yyv4809 = yyv4809[:0]
			yyc4809 = true
		}
	} else if yyl4809 > 0 {
		var yyrr4809, yyrl4809 int
		var yyrt4809 bool
		if yyl4809 > cap(yyv4809) {

			yyrg4809 := len(yyv4809) > 0
			yyv24809 := yyv4809
			yyrl4809, yyrt4809 = z.DecInferLen(yyl4809, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt4809 {
				if yyrl4809 <= cap(yyv4809) {
					yyv4809 = yyv4809[:yyrl4809]
				} else {
					yyv4809 = make([]Service, yyrl4809)
				}
			} else {
				yyv4809 = make([]Service, yyrl4809)
			}
			yyc4809 = true
			yyrr4809 = len(yyv4809)
			if yyrg4809 {
				copy(yyv4809, yyv24809)
			}
		} else if yyl4809 != len(yyv4809) {
			yyv4809 = yyv4809[:yyl4809]
			yyc4809 = true
		}
		yyj4809 := 0
		for ; yyj4809 < yyrr4809; yyj4809++ {
			yyh4809.ElemContainerState(yyj4809)
			if r.TryDecodeAsNil() {
				yyv4809[yyj4809] = Service{}
			} else {
				yyv4810 := &yyv4809[yyj4809]
				yyv4810.CodecDecodeSelf(d)
			}

		}
		if yyrt4809 {
			for ; yyj4809 < yyl4809; yyj4809++ {
				yyv4809 = append(yyv4809, Service{})
				yyh4809.ElemContainerState(yyj4809)
				if r.TryDecodeAsNil() {
					yyv4809[yyj4809] = Service{}
				} else {
					yyv4811 := &yyv4809[yyj4809]
					yyv4811.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4809 := 0
		for ; !r.CheckBreak(); yyj4809++ {

			if yyj4809 >= len(yyv4809) {
				yyv4809 = append(yyv4809, Service{}) // var yyz4809 Service
				yyc4809 = true
			}
			yyh4809.ElemContainerState(yyj4809)
			if yyj4809 < len(yyv4809) {
				if r.TryDecodeAsNil() {
					yyv4809[yyj4809] = Service{}
				} else {
					yyv4812 := &yyv4809[yyj4809]
					yyv4812.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4809 < len(yyv4809) {
			yyv4809 = yyv4809[:yyj4809]
			yyc4809 = true
		} else if yyj4809 == 0 && yyv4809 == nil {
			yyv4809 = []Service{}
			yyc4809 = true
		}
	}
	yyh4809.End()
	if yyc4809 {
		*v = yyv4809
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4813 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4814 := &yyv4813
		yy4814.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4815 := *v
	yyh4815, yyl4815 := z.DecSliceHelperStart()
	var yyc4815 bool
	if yyl4815 == 0 {
		if yyv4815 == nil {
			yyv4815 = []LoadBalancerIngress{}
			yyc4815 = true
		} else if len(yyv4815) != 0 {
			yyv4815 = yyv4815[:0]
			yyc4815 = true
		}
	} else if yyl4815 > 0 {
		var yyrr4815, yyrl4815 int
		var yyrt4815 bool
		if yyl4815 > cap(yyv4815) {

			yyrg4815 := len(yyv4815) > 0
			yyv24815 := yyv4815
			yyrl4815, yyrt4815 = z.DecInferLen(yyl4815, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4815 {
				if yyrl4815 <= cap(yyv4815) {
					yyv4815 = yyv4815[:yyrl4815]
				} else {
					yyv4815 = make([]LoadBalancerIngress, yyrl4815)
				}
			} else {
				yyv4815 = make([]LoadBalancerIngress, yyrl4815)
			}
			yyc4815 = true
			yyrr4815 = len(yyv4815)
			if yyrg4815 {
				copy(yyv4815, yyv24815)
			}
		} else if yyl4815 != len(yyv4815) {
			yyv4815 = yyv4815[:yyl4815]
			yyc4815 = true
		}
		yyj4815 := 0
		for ; yyj4815 < yyrr4815; yyj4815++ {
			yyh4815.ElemContainerState(yyj4815)
			if r.TryDecodeAsNil() {
				yyv4815[yyj4815] = LoadBalancerIngress{}
			} else {
				yyv4816 := &yyv4815[yyj4815]
				yyv4816.CodecDecodeSelf(d)
			}

		}
		if yyrt4815 {
			for ; yyj4815 < yyl4815; yyj4815++ {
				yyv4815 = append(yyv4815, LoadBalancerIngress{})
				yyh4815.ElemContainerState(yyj4815)
				if r.TryDecodeAsNil() {
					yyv4815[yyj4815] = LoadBalancerIngress{}
				} else {
					yyv4817 := &yyv4815[yyj4815]
					yyv4817.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4815 := 0
		for ; !r.CheckBreak(); yyj4815++ {

			if yyj4815 >= len(yyv4815) {
				yyv4815 = append(yyv4815, LoadBalancerIngress{}) // var yyz4815 LoadBalancerIngress
				yyc4815 = true
			}
			yyh4815.ElemContainerState(yyj4815)
			if yyj4815 < len(yyv4815) {
				if r.TryDecodeAsNil() {
					yyv4815[yyj4815] = LoadBalancerIngress{}
				} else {
					yyv4818 := &yyv4815[yyj4815]
					yyv4818.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4815 < len(yyv4815) {
			yyv4815 = yyv4815[:yyj4815]
			yyc4815 = true
		} else if yyj4815 == 0 && yyv4815 == nil {
			yyv4815 = []LoadBalancerIngress{}
			yyc4815 = true
		}
	}
	yyh4815.End()
	if yyc4815 {
		*v = yyv4815
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4819 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4820 := &yyv4819
		yy4820.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4821 := *v
	yyh4821, yyl4821 := z.DecSliceHelperStart()
	var yyc4821 bool
	if yyl4821 == 0 {
		if yyv4821 == nil {
			yyv4821 = []ServicePort{}
			yyc4821 = true
		} else if len(yyv4821) != 0 {
			yyv4821 = yyv4821[:0]
			yyc4821 = true
		}
	} else if yyl4821 > 0 {
		var yyrr4821, yyrl4821 int
		var yyrt4821 bool
		if yyl4821 > cap(yyv4821) {

			yyrg4821 := len(yyv4821) > 0
			yyv24821 := yyv4821
			yyrl4821, yyrt4821 = z.DecInferLen(yyl4821, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4821 {
				if yyrl4821 <= cap(yyv4821) {
					yyv4821 = yyv4821[:yyrl4821]
				} else {
					yyv4821 = make([]ServicePort, yyrl4821)
				}
			} else {
				yyv4821 = make([]ServicePort, yyrl4821)
			}
			yyc4821 = true
			yyrr4821 = len(yyv4821)
			if yyrg4821 {
				copy(yyv4821, yyv24821)
			}
		} else if yyl4821 != len(yyv4821) {
			yyv4821 = yyv4821[:yyl4821]
			yyc4821 = true
		}
		yyj4821 := 0
		for ; yyj4821 < yyrr4821; yyj4821++ {
			yyh4821.ElemContainerState(yyj4821)
			if r.TryDecodeAsNil() {
				yyv4821[yyj4821] = ServicePort{}
			} else {
				yyv4822 := &yyv4821[yyj4821]
				yyv4822.CodecDecodeSelf(d)
			}

		}
		if yyrt4821 {
			for ; yyj4821 < yyl4821; yyj4821++ {
				yyv4821 = append(yyv4821, ServicePort{})
				yyh4821.ElemContainerState(yyj4821)
				if r.TryDecodeAsNil() {
					yyv4821[yyj4821] = ServicePort{}
				} else {
					yyv4823 := &yyv4821[yyj4821]
					yyv4823.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4821 := 0
		for ; !r.CheckBreak(); yyj4821++ {

			if yyj4821 >= len(yyv4821) {
				yyv4821 = append(yyv4821, ServicePort{}) // var yyz4821 ServicePort
				yyc4821 = true
			}
			yyh4821.ElemContainerState(yyj4821)
			if yyj4821 < len(yyv4821) {
				if r.TryDecodeAsNil() {
					yyv4821[yyj4821] = ServicePort{}
				} else {
					yyv4824 := &yyv4821[yyj4821]
					yyv4824.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4821 < len(yyv4821) {
			yyv4821 = yyv4821[:yyj4821]
			yyc4821 = true
		} else if yyj4821 == 0 && yyv4821 == nil {
			yyv4821 = []ServicePort{}
			yyc4821 = true
		}
	}
	yyh4821.End()
	if yyc4821 {
		*v = yyv4821
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4825 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4826 := &yyv4825
		yy4826.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4827 := *v
	yyh4827, yyl4827 := z.DecSliceHelperStart()
	var yyc4827 bool
	if yyl4827 == 0 {
		if yyv4827 == nil {
			yyv4827 = []ObjectReference{}
			yyc4827 = true
		} else if len(yyv4827) != 0 {
			yyv4827 = yyv4827[:0]
			yyc4827 = true
		}
	} else if yyl4827 > 0 {
		var yyrr4827, yyrl4827 int
		var yyrt4827 bool
		if yyl4827 > cap(yyv4827) {

			yyrg4827 := len(yyv4827) > 0
			yyv24827 := yyv4827
			yyrl4827, yyrt4827 = z.DecInferLen(yyl4827, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4827 {
				if yyrl4827 <= cap(yyv4827) {
					yyv4827 = yyv4827[:yyrl4827]
				} else {
					yyv4827 = make([]ObjectReference, yyrl4827)
				}
			} else {
				yyv4827 = make([]ObjectReference, yyrl4827)
			}
			yyc4827 = true
			yyrr4827 = len(yyv4827)
			if yyrg4827 {
				copy(yyv4827, yyv24827)
			}
		} else if yyl4827 != len(yyv4827) {
			yyv4827 = yyv4827[:yyl4827]
			yyc4827 = true
		}
		yyj4827 := 0
		for ; yyj4827 < yyrr4827; yyj4827++ {
			yyh4827.ElemContainerState(yyj4827)
			if r.TryDecodeAsNil() {
				yyv4827[yyj4827] = ObjectReference{}
			} else {
				yyv4828 := &yyv4827[yyj4827]
				yyv4828.CodecDecodeSelf(d)
			}

		}
		if yyrt4827 {
			for ; yyj4827 < yyl4827; yyj4827++ {
				yyv4827 = append(yyv4827, ObjectReference{})
				yyh4827.ElemContainerState(yyj4827)
				if r.TryDecodeAsNil() {
					yyv4827[yyj4827] = ObjectReference{}
				} else {
					yyv4829 := &yyv4827[yyj4827]
					yyv4829.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4827 := 0
		for ; !r.CheckBreak(); yyj4827++ {

			if yyj4827 >= len(yyv4827) {
				yyv4827 = append(yyv4827, ObjectReference{}) // var yyz4827 ObjectReference
				yyc4827 = true
			}
			yyh4827.ElemContainerState(yyj4827)
			if yyj4827 < len(yyv4827) {
				if r.TryDecodeAsNil() {
					yyv4827[yyj4827] = ObjectReference{}
				} else {
					yyv4830 := &yyv4827[yyj4827]
					yyv4830.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4827 < len(yyv4827) {
			yyv4827 = yyv4827[:yyj4827]
			yyc4827 = true
		} else if yyj4827 == 0 && yyv4827 == nil {
			yyv4827 = []ObjectReference{}
			yyc4827 = true
		}
	}
	yyh4827.End()
	if yyc4827 {
		*v = yyv4827
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4831 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4832 := &yyv4831
		yy4832.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4833 := *v
	yyh4833, yyl4833 := z.DecSliceHelperStart()
	var yyc4833 bool
	if yyl4833 == 0 {
		if yyv4833 == nil {
			yyv4833 = []ServiceAccount{}
			yyc4833 = true
		} else if len(yyv4833) != 0 {
			yyv4833 = yyv4833[:0]
			yyc4833 = true
		}
	} else if yyl4833 > 0 {
		var yyrr4833, yyrl4833 int
		var yyrt4833 bool
		if yyl4833 > cap(yyv4833) {

			yyrg4833 := len(yyv4833) > 0
			yyv24833 := yyv4833
			yyrl4833, yyrt4833 = z.DecInferLen(yyl4833, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4833 {
				if yyrl4833 <= cap(yyv4833) {
					yyv4833 = yyv4833[:yyrl4833]
				} else {
					yyv4833 = make([]ServiceAccount, yyrl4833)
				}
			} else {
				yyv4833 = make([]ServiceAccount, yyrl4833)
			}
			yyc4833 = true
			yyrr4833 = len(yyv4833)
			if yyrg4833 {
				copy(yyv4833, yyv24833)
			}
		} else if yyl4833 != len(yyv4833) {
			yyv4833 = yyv4833[:yyl4833]
			yyc4833 = true
		}
		yyj4833 := 0
		for ; yyj4833 < yyrr4833; yyj4833++ {
			yyh4833.ElemContainerState(yyj4833)
			if r.TryDecodeAsNil() {
				yyv4833[yyj4833] = ServiceAccount{}
			} else {
				yyv4834 := &yyv4833[yyj4833]
				yyv4834.CodecDecodeSelf(d)
			}

		}
		if yyrt4833 {
			for ; yyj4833 < yyl4833; yyj4833++ {
				yyv4833 = append(yyv4833, ServiceAccount{})
				yyh4833.ElemContainerState(yyj4833)
				if r.TryDecodeAsNil() {
					yyv4833[yyj4833] = ServiceAccount{}
				} else {
					yyv4835 := &yyv4833[yyj4833]
					yyv4835.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4833 := 0
		for ; !r.CheckBreak(); yyj4833++ {

			if yyj4833 >= len(yyv4833) {
				yyv4833 = append(yyv4833, ServiceAccount{}) // var yyz4833 ServiceAccount
				yyc4833 = true
			}
			yyh4833.ElemContainerState(yyj4833)
			if yyj4833 < len(yyv4833) {
				if r.TryDecodeAsNil() {
					yyv4833[yyj4833] = ServiceAccount{}
				} else {
					yyv4836 := &yyv4833[yyj4833]
					yyv4836.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4833 < len(yyv4833) {
			yyv4833 = yyv4833[:yyj4833]
			yyc4833 = true
		} else if yyj4833 == 0 && yyv4833 == nil {
			yyv4833 = []ServiceAccount{}
			yyc4833 = true
		}
	}
	yyh4833.End()
	if yyc4833 {
		*v = yyv4833
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4837 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4838 := &yyv4837
		yy4838.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4839 := *v
	yyh4839, yyl4839 := z.DecSliceHelperStart()
	var yyc4839 bool
	if yyl4839 == 0 {
		if yyv4839 == nil {
			yyv4839 = []EndpointSubset{}
			yyc4839 = true
		} else if len(yyv4839) != 0 {
			yyv4839 = yyv4839[:0]
			yyc4839 = true
		}
	} else if yyl4839 > 0 {
		var yyrr4839, yyrl4839 int
		var yyrt4839 bool
		if yyl4839 > cap(yyv4839) {

			yyrg4839 := len(yyv4839) > 0
			yyv24839 := yyv4839
			yyrl4839, yyrt4839 = z.DecInferLen(yyl4839, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4839 {
				if yyrl4839 <= cap(yyv4839) {
					yyv4839 = yyv4839[:yyrl4839]
				} else {
					yyv4839 = make([]EndpointSubset, yyrl4839)
				}
			} else {
				yyv4839 = make([]EndpointSubset, yyrl4839)
			}
			yyc4839 = true
			yyrr4839 = len(yyv4839)
			if yyrg4839 {
				copy(yyv4839, yyv24839)
			}
		} else if yyl4839 != len(yyv4839) {
			yyv4839 = yyv4839[:yyl4839]
			yyc4839 = true
		}
		yyj4839 := 0
		for ; yyj4839 < yyrr4839; yyj4839++ {
			yyh4839.ElemContainerState(yyj4839)
			if r.TryDecodeAsNil() {
				yyv4839[yyj4839] = EndpointSubset{}
			} else {
				yyv4840 := &yyv4839[yyj4839]
				yyv4840.CodecDecodeSelf(d)
			}

		}
		if yyrt4839 {
			for ; yyj4839 < yyl4839; yyj4839++ {
				yyv4839 = append(yyv4839, EndpointSubset{})
				yyh4839.ElemContainerState(yyj4839)
				if r.TryDecodeAsNil() {
					yyv4839[yyj4839] = EndpointSubset{}
				} else {
					yyv4841 := &yyv4839[yyj4839]
					yyv4841.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4839 := 0
		for ; !r.CheckBreak(); yyj4839++ {

			if yyj4839 >= len(yyv4839) {
				yyv4839 = append(yyv4839, EndpointSubset{}) // var yyz4839 EndpointSubset
				yyc4839 = true
			}
			yyh4839.ElemContainerState(yyj4839)
			if yyj4839 < len(yyv4839) {
				if r.TryDecodeAsNil() {
					yyv4839[yyj4839] = EndpointSubset{}
				} else {
					yyv4842 := &yyv4839[yyj4839]
					yyv4842.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4839 < len(yyv4839) {
			yyv4839 = yyv4839[:yyj4839]
			yyc4839 = true
		} else if yyj4839 == 0 && yyv4839 == nil {
			yyv4839 = []EndpointSubset{}
			yyc4839 = true
		}
	}
	yyh4839.End()
	if yyc4839 {
		*v = yyv4839
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4843 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4844 := &yyv4843
		yy4844.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4845 := *v
	yyh4845, yyl4845 := z.DecSliceHelperStart()
	var yyc4845 bool
	if yyl4845 == 0 {
		if yyv4845 == nil {
			yyv4845 = []EndpointAddress{}
			yyc4845 = true
		} else if len(yyv4845) != 0 {
			yyv4845 = yyv4845[:0]
			yyc4845 = true
		}
	} else if yyl4845 > 0 {
		var yyrr4845, yyrl4845 int
		var yyrt4845 bool
		if yyl4845 > cap(yyv4845) {

			yyrg4845 := len(yyv4845) > 0
			yyv24845 := yyv4845
			yyrl4845, yyrt4845 = z.DecInferLen(yyl4845, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4845 {
				if yyrl4845 <= cap(yyv4845) {
					yyv4845 = yyv4845[:yyrl4845]
				} else {
					yyv4845 = make([]EndpointAddress, yyrl4845)
				}
			} else {
				yyv4845 = make([]EndpointAddress, yyrl4845)
			}
			yyc4845 = true
			yyrr4845 = len(yyv4845)
			if yyrg4845 {
				copy(yyv4845, yyv24845)
			}
		} else if yyl4845 != len(yyv4845) {
			yyv4845 = yyv4845[:yyl4845]
			yyc4845 = true
		}
		yyj4845 := 0
		for ; yyj4845 < yyrr4845; yyj4845++ {
			yyh4845.ElemContainerState(yyj4845)
			if r.TryDecodeAsNil() {
				yyv4845[yyj4845] = EndpointAddress{}
			} else {
				yyv4846 := &yyv4845[yyj4845]
				yyv4846.CodecDecodeSelf(d)
			}

		}
		if yyrt4845 {
			for ; yyj4845 < yyl4845; yyj4845++ {
				yyv4845 = append(yyv4845, EndpointAddress{})
				yyh4845.ElemContainerState(yyj4845)
				if r.TryDecodeAsNil() {
					yyv4845[yyj4845] = EndpointAddress{}
				} else {
					yyv4847 := &yyv4845[yyj4845]
					yyv4847.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4845 := 0
		for ; !r.CheckBreak(); yyj4845++ {

			if yyj4845 >= len(yyv4845) {
				yyv4845 = append(yyv4845, EndpointAddress{}) // var yyz4845 EndpointAddress
				yyc4845 = true
			}
			yyh4845.ElemContainerState(yyj4845)
			if yyj4845 < len(yyv4845) {
				if r.TryDecodeAsNil() {
					yyv4845[yyj4845] = EndpointAddress{}
				} else {
					yyv4848 := &yyv4845[yyj4845]
					yyv4848.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4845 < len(yyv4845) {
			yyv4845 = yyv4845[:yyj4845]
			yyc4845 = true
		} else if yyj4845 == 0 && yyv4845 == nil {
			yyv4845 = []EndpointAddress{}
			yyc4845 = true
		}
	}
	yyh4845.End()
	if yyc4845 {
		*v = yyv4845
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4849 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4850 := &yyv4849
		yy4850.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4851 := *v
	yyh4851, yyl4851 := z.DecSliceHelperStart()
	var yyc4851 bool
	if yyl4851 == 0 {
		if yyv4851 == nil {
			yyv4851 = []EndpointPort{}
			yyc4851 = true
		} else if len(yyv4851) != 0 {
			yyv4851 = yyv4851[:0]
			yyc4851 = true
		}
	} else if yyl4851 > 0 {
		var yyrr4851, yyrl4851 int
		var yyrt4851 bool
		if yyl4851 > cap(yyv4851) {

			yyrg4851 := len(yyv4851) > 0
			yyv24851 := yyv4851
			yyrl4851, yyrt4851 = z.DecInferLen(yyl4851, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4851 {
				if yyrl4851 <= cap(yyv4851) {
					yyv4851 = yyv4851[:yyrl4851]
				} else {
					yyv4851 = make([]EndpointPort, yyrl4851)
				}
			} else {
				yyv4851 = make([]EndpointPort, yyrl4851)
			}
			yyc4851 = true
			yyrr4851 = len(yyv4851)
			if yyrg4851 {
				copy(yyv4851, yyv24851)
			}
		} else if yyl4851 != len(yyv4851) {
			yyv4851 = yyv4851[:yyl4851]
			yyc4851 = true
		}
		yyj4851 := 0
		for ; yyj4851 < yyrr4851; yyj4851++ {
			yyh4851.ElemContainerState(yyj4851)
			if r.TryDecodeAsNil() {
				yyv4851[yyj4851] = EndpointPort{}
			} else {
				yyv4852 := &yyv4851[yyj4851]
				yyv4852.CodecDecodeSelf(d)
			}

		}
		if yyrt4851 {
			for ; yyj4851 < yyl4851; yyj4851++ {
				yyv4851 = append(yyv4851, EndpointPort{})
				yyh4851.ElemContainerState(yyj4851)
				if r.TryDecodeAsNil() {
					yyv4851[yyj4851] = EndpointPort{}
				} else {
					yyv4853 := &yyv4851[yyj4851]
					yyv4853.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4851 := 0
		for ; !r.CheckBreak(); yyj4851++ {

			if yyj4851 >= len(yyv4851) {
				yyv4851 = append(yyv4851, EndpointPort{}) // var yyz4851 EndpointPort
				yyc4851 = true
			}
			yyh4851.ElemContainerState(yyj4851)
			if yyj4851 < len(yyv4851) {
				if r.TryDecodeAsNil() {
					yyv4851[yyj4851] = EndpointPort{}
				} else {
					yyv4854 := &yyv4851[yyj4851]
					yyv4854.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4851 < len(yyv4851) {
			yyv4851 = yyv4851[:yyj4851]
			yyc4851 = true
		} else if yyj4851 == 0 && yyv4851 == nil {
			yyv4851 = []EndpointPort{}
			yyc4851 = true
		}
	}
	yyh4851.End()
	if yyc4851 {
		*v = yyv4851
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4855 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4856 := &yyv4855
		yy4856.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4857 := *v
	yyh4857, yyl4857 := z.DecSliceHelperStart()
	var yyc4857 bool
	if yyl4857 == 0 {
		if yyv4857 == nil {
			yyv4857 = []Endpoints{}
			yyc4857 = true
		} else if len(yyv4857) != 0 {
			yyv4857 = yyv4857[:0]
			yyc4857 = true
		}
	} else if yyl4857 > 0 {
		var yyrr4857, yyrl4857 int
		var yyrt4857 bool
		if yyl4857 > cap(yyv4857) {

			yyrg4857 := len(yyv4857) > 0
			yyv24857 := yyv4857
			yyrl4857, yyrt4857 = z.DecInferLen(yyl4857, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4857 {
				if yyrl4857 <= cap(yyv4857) {
					yyv4857 = yyv4857[:yyrl4857]
				} else {
					yyv4857 = make([]Endpoints, yyrl4857)
				}
			} else {
				yyv4857 = make([]Endpoints, yyrl4857)
			}
			yyc4857 = true
			yyrr4857 = len(yyv4857)
			if yyrg4857 {
				copy(yyv4857, yyv24857)
			}
		} else if yyl4857 != len(yyv4857) {
			yyv4857 = yyv4857[:yyl4857]
			yyc4857 = true
		}
		yyj4857 := 0
		for ; yyj4857 < yyrr4857; yyj4857++ {
			yyh4857.ElemContainerState(yyj4857)
			if r.TryDecodeAsNil() {
				yyv4857[yyj4857] = Endpoints{}
			} else {
				yyv4858 := &yyv4857[yyj4857]
				yyv4858.CodecDecodeSelf(d)
			}

		}
		if yyrt4857 {
			for ; yyj4857 < yyl4857; yyj4857++ {
				yyv4857 = append(yyv4857, Endpoints{})
				yyh4857.ElemContainerState(yyj4857)
				if r.TryDecodeAsNil() {
					yyv4857[yyj4857] = Endpoints{}
				} else {
					yyv4859 := &yyv4857[yyj4857]
					yyv4859.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4857 := 0
		for ; !r.CheckBreak(); yyj4857++ {

			if yyj4857 >= len(yyv4857) {
				yyv4857 = append(yyv4857, Endpoints{}) // var yyz4857 Endpoints
				yyc4857 = true
			}
			yyh4857.ElemContainerState(yyj4857)
			if yyj4857 < len(yyv4857) {
				if r.TryDecodeAsNil() {
					yyv4857[yyj4857] = Endpoints{}
				} else {
					yyv4860 := &yyv4857[yyj4857]
					yyv4860.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4857 < len(yyv4857) {
			yyv4857 = yyv4857[:yyj4857]
			yyc4857 = true
		} else if yyj4857 == 0 && yyv4857 == nil {
			yyv4857 = []Endpoints{}
			yyc4857 = true
		}
	}
	yyh4857.End()
	if yyc4857 {
		*v = yyv4857
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4861 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4862 := &yyv4861
		yy4862.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4863 := *v
	yyh4863, yyl4863 := z.DecSliceHelperStart()
	var yyc4863 bool
	if yyl4863 == 0 {
		if yyv4863 == nil {
			yyv4863 = []NodeCondition{}
			yyc4863 = true
		} else if len(yyv4863) != 0 {
			yyv4863 = yyv4863[:0]
			yyc4863 = true
		}
	} else if yyl4863 > 0 {
		var yyrr4863, yyrl4863 int
		var yyrt4863 bool
		if yyl4863 > cap(yyv4863) {

			yyrg4863 := len(yyv4863) > 0
			yyv24863 := yyv4863
			yyrl4863, yyrt4863 = z.DecInferLen(yyl4863, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4863 {
				if yyrl4863 <= cap(yyv4863) {
					yyv4863 = yyv4863[:yyrl4863]
				} else {
					yyv4863 = make([]NodeCondition, yyrl4863)
				}
			} else {
				yyv4863 = make([]NodeCondition, yyrl4863)
			}
			yyc4863 = true
			yyrr4863 = len(yyv4863)
			if yyrg4863 {
				copy(yyv4863, yyv24863)
			}
		} else if yyl4863 != len(yyv4863) {
			yyv4863 = yyv4863[:yyl4863]
			yyc4863 = true
		}
		yyj4863 := 0
		for ; yyj4863 < yyrr4863; yyj4863++ {
			yyh4863.ElemContainerState(yyj4863)
			if r.TryDecodeAsNil() {
				yyv4863[yyj4863] = NodeCondition{}
			} else {
				yyv4864 := &yyv4863[yyj4863]
				yyv4864.CodecDecodeSelf(d)
			}

		}
		if yyrt4863 {
			for ; yyj4863 < yyl4863; yyj4863++ {
				yyv4863 = append(yyv4863, NodeCondition{})
				yyh4863.ElemContainerState(yyj4863)
				if r.TryDecodeAsNil() {
					yyv4863[yyj4863] = NodeCondition{}
				} else {
					yyv4865 := &yyv4863[yyj4863]
					yyv4865.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4863 := 0
		for ; !r.CheckBreak(); yyj4863++ {

			if yyj4863 >= len(yyv4863) {
				yyv4863 = append(yyv4863, NodeCondition{}) // var yyz4863 NodeCondition
				yyc4863 = true
			}
			yyh4863.ElemContainerState(yyj4863)
			if yyj4863 < len(yyv4863) {
				if r.TryDecodeAsNil() {
					yyv4863[yyj4863] = NodeCondition{}
				} else {
					yyv4866 := &yyv4863[yyj4863]
					yyv4866.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4863 < len(yyv4863) {
			yyv4863 = yyv4863[:yyj4863]
			yyc4863 = true
		} else if yyj4863 == 0 && yyv4863 == nil {
			yyv4863 = []NodeCondition{}
			yyc4863 = true
		}
	}
	yyh4863.End()
	if yyc4863 {
		*v = yyv4863
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4867 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4868 := &yyv4867
		yy4868.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4869 := *v
	yyh4869, yyl4869 := z.DecSliceHelperStart()
	var yyc4869 bool
	if yyl4869 == 0 {
		if yyv4869 == nil {
			yyv4869 = []NodeAddress{}
			yyc4869 = true
		} else if len(yyv4869) != 0 {
			yyv4869 = yyv4869[:0]
			yyc4869 = true
		}
	} else if yyl4869 > 0 {
		var yyrr4869, yyrl4869 int
		var yyrt4869 bool
		if yyl4869 > cap(yyv4869) {

			yyrg4869 := len(yyv4869) > 0
			yyv24869 := yyv4869
			yyrl4869, yyrt4869 = z.DecInferLen(yyl4869, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4869 {
				if yyrl4869 <= cap(yyv4869) {
					yyv4869 = yyv4869[:yyrl4869]
				} else {
					yyv4869 = make([]NodeAddress, yyrl4869)
				}
			} else {
				yyv4869 = make([]NodeAddress, yyrl4869)
			}
			yyc4869 = true
			yyrr4869 = len(yyv4869)
			if yyrg4869 {
				copy(yyv4869, yyv24869)
			}
		} else if yyl4869 != len(yyv4869) {
			yyv4869 = yyv4869[:yyl4869]
			yyc4869 = true
		}
		yyj4869 := 0
		for ; yyj4869 < yyrr4869; yyj4869++ {
			yyh4869.ElemContainerState(yyj4869)
			if r.TryDecodeAsNil() {
				yyv4869[yyj4869] = NodeAddress{}
			} else {
				yyv4870 := &yyv4869[yyj4869]
				yyv4870.CodecDecodeSelf(d)
			}

		}
		if yyrt4869 {
			for ; yyj4869 < yyl4869; yyj4869++ {
				yyv4869 = append(yyv4869, NodeAddress{})
				yyh4869.ElemContainerState(yyj4869)
				if r.TryDecodeAsNil() {
					yyv4869[yyj4869] = NodeAddress{}
				} else {
					yyv4871 := &yyv4869[yyj4869]
					yyv4871.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4869 := 0
		for ; !r.CheckBreak(); yyj4869++ {

			if yyj4869 >= len(yyv4869) {
				yyv4869 = append(yyv4869, NodeAddress{}) // var yyz4869 NodeAddress
				yyc4869 = true
			}
			yyh4869.ElemContainerState(yyj4869)
			if yyj4869 < len(yyv4869) {
				if r.TryDecodeAsNil() {
					yyv4869[yyj4869] = NodeAddress{}
				} else {
					yyv4872 := &yyv4869[yyj4869]
					yyv4872.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4869 < len(yyv4869) {
			yyv4869 = yyv4869[:yyj4869]
			yyc4869 = true
		} else if yyj4869 == 0 && yyv4869 == nil {
			yyv4869 = []NodeAddress{}
			yyc4869 = true
		}
	}
	yyh4869.End()
	if yyc4869 {
		*v = yyv4869
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4873 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4874 := &yyv4873
		yy4874.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4875 := *v
	yyh4875, yyl4875 := z.DecSliceHelperStart()
	var yyc4875 bool
	if yyl4875 == 0 {
		if yyv4875 == nil {
			yyv4875 = []ContainerImage{}
			yyc4875 = true
		} else if len(yyv4875) != 0 {
			yyv4875 = yyv4875[:0]
			yyc4875 = true
		}
	} else if yyl4875 > 0 {
		var yyrr4875, yyrl4875 int
		var yyrt4875 bool
		if yyl4875 > cap(yyv4875) {

			yyrg4875 := len(yyv4875) > 0
			yyv24875 := yyv4875
			yyrl4875, yyrt4875 = z.DecInferLen(yyl4875, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4875 {
				if yyrl4875 <= cap(yyv4875) {
					yyv4875 = yyv4875[:yyrl4875]
				} else {
					yyv4875 = make([]ContainerImage, yyrl4875)
				}
			} else {
				yyv4875 = make([]ContainerImage, yyrl4875)
			}
			yyc4875 = true
			yyrr4875 = len(yyv4875)
			if yyrg4875 {
				copy(yyv4875, yyv24875)
			}
		} else if yyl4875 != len(yyv4875) {
			yyv4875 = yyv4875[:yyl4875]
			yyc4875 = true
		}
		yyj4875 := 0
		for ; yyj4875 < yyrr4875; yyj4875++ {
			yyh4875.ElemContainerState(yyj4875)
			if r.TryDecodeAsNil() {
				yyv4875[yyj4875] = ContainerImage{}
			} else {
				yyv4876 := &yyv4875[yyj4875]
				yyv4876.CodecDecodeSelf(d)
			}

		}
		if yyrt4875 {
			for ; yyj4875 < yyl4875; yyj4875++ {
				yyv4875 = append(yyv4875, ContainerImage{})
				yyh4875.ElemContainerState(yyj4875)
				if r.TryDecodeAsNil() {
					yyv4875[yyj4875] = ContainerImage{}
				} else {
					yyv4877 := &yyv4875[yyj4875]
					yyv4877.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4875 := 0
		for ; !r.CheckBreak(); yyj4875++ {

			if yyj4875 >= len(yyv4875) {
				yyv4875 = append(yyv4875, ContainerImage{}) // var yyz4875 ContainerImage
				yyc4875 = true
			}
			yyh4875.ElemContainerState(yyj4875)
			if yyj4875 < len(yyv4875) {
				if r.TryDecodeAsNil() {
					yyv4875[yyj4875] = ContainerImage{}
				} else {
					yyv4878 := &yyv4875[yyj4875]
					yyv4878.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4875 < len(yyv4875) {
			yyv4875 = yyv4875[:yyj4875]
			yyc4875 = true
		} else if yyj4875 == 0 && yyv4875 == nil {
			yyv4875 = []ContainerImage{}
			yyc4875 = true
		}
	}
	yyh4875.End()
	if yyc4875 {
		*v = yyv4875
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4879 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4879.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4880 := *v
	yyh4880, yyl4880 := z.DecSliceHelperStart()
	var yyc4880 bool
	if yyl4880 == 0 {
		if yyv4880 == nil {
			yyv4880 = []UniqueVolumeName{}
			yyc4880 = true
		} else if len(yyv4880) != 0 {
			yyv4880 = yyv4880[:0]
			yyc4880 = true
		}
	} else if yyl4880 > 0 {
		var yyrr4880, yyrl4880 int
		var yyrt4880 bool
		if yyl4880 > cap(yyv4880) {

			yyrl4880, yyrt4880 = z.DecInferLen(yyl4880, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4880 {
				if yyrl4880 <= cap(yyv4880) {
					yyv4880 = yyv4880[:yyrl4880]
				} else {
					yyv4880 = make([]UniqueVolumeName, yyrl4880)
				}
			} else {
				yyv4880 = make([]UniqueVolumeName, yyrl4880)
			}
			yyc4880 = true
			yyrr4880 = len(yyv4880)
		} else if yyl4880 != len(yyv4880) {
			yyv4880 = yyv4880[:yyl4880]
			yyc4880 = true
		}
		yyj4880 := 0
		for ; yyj4880 < yyrr4880; yyj4880++ {
			yyh4880.ElemContainerState(yyj4880)
			if r.TryDecodeAsNil() {
				yyv4880[yyj4880] = ""
			} else {
				yyv4880[yyj4880] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4880 {
			for ; yyj4880 < yyl4880; yyj4880++ {
				yyv4880 = append(yyv4880, "")
				yyh4880.ElemContainerState(yyj4880)
				if r.TryDecodeAsNil() {
					yyv4880[yyj4880] = ""
				} else {
					yyv4880[yyj4880] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4880 := 0
		for ; !r.CheckBreak(); yyj4880++ {

			if yyj4880 >= len(yyv4880) {
				yyv4880 = append(yyv4880, "") // var yyz4880 UniqueVolumeName
				yyc4880 = true
			}
			yyh4880.ElemContainerState(yyj4880)
			if yyj4880 < len(yyv4880) {
				if r.TryDecodeAsNil() {
					yyv4880[yyj4880] = ""
				} else {
					yyv4880[yyj4880] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4880 < len(yyv4880) {
			yyv4880 = yyv4880[:yyj4880]
			yyc4880 = true
		} else if yyj4880 == 0 && yyv4880 == nil {
			yyv4880 = []UniqueVolumeName{}
			yyc4880 = true
		}
	}
	yyh4880.End()
	if yyc4880 {
		*v = yyv4880
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4884 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4885 := &yyv4884
		yy4885.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4886 := *v
	yyh4886, yyl4886 := z.DecSliceHelperStart()
	var yyc4886 bool
	if yyl4886 == 0 {
		if yyv4886 == nil {
			yyv4886 = []AttachedVolume{}
			yyc4886 = true
		} else if len(yyv4886) != 0 {
			yyv4886 = yyv4886[:0]
			yyc4886 = true
		}
	} else if yyl4886 > 0 {
		var yyrr4886, yyrl4886 int
		var yyrt4886 bool
		if yyl4886 > cap(yyv4886) {

			yyrg4886 := len(yyv4886) > 0
			yyv24886 := yyv4886
			yyrl4886, yyrt4886 = z.DecInferLen(yyl4886, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4886 {
				if yyrl4886 <= cap(yyv4886) {
					yyv4886 = yyv4886[:yyrl4886]
				} else {
					yyv4886 = make([]AttachedVolume, yyrl4886)
				}
			} else {
				yyv4886 = make([]AttachedVolume, yyrl4886)
			}
			yyc4886 = true
			yyrr4886 = len(yyv4886)
			if yyrg4886 {
				copy(yyv4886, yyv24886)
			}
		} else if yyl4886 != len(yyv4886) {
			yyv4886 = yyv4886[:yyl4886]
			yyc4886 = true
		}
		yyj4886 := 0
		for ; yyj4886 < yyrr4886; yyj4886++ {
			yyh4886.ElemContainerState(yyj4886)
			if r.TryDecodeAsNil() {
				yyv4886[yyj4886] = AttachedVolume{}
			} else {
				yyv4887 := &yyv4886[yyj4886]
				yyv4887.CodecDecodeSelf(d)
			}

		}
		if yyrt4886 {
			for ; yyj4886 < yyl4886; yyj4886++ {
				yyv4886 = append(yyv4886, AttachedVolume{})
				yyh4886.ElemContainerState(yyj4886)
				if r.TryDecodeAsNil() {
					yyv4886[yyj4886] = AttachedVolume{}
				} else {
					yyv4888 := &yyv4886[yyj4886]
					yyv4888.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4886 := 0
		for ; !r.CheckBreak(); yyj4886++ {

			if yyj4886 >= len(yyv4886) {
				yyv4886 = append(yyv4886, AttachedVolume{}) // var yyz4886 AttachedVolume
				yyc4886 = true
			}
			yyh4886.ElemContainerState(yyj4886)
			if yyj4886 < len(yyv4886) {
				if r.TryDecodeAsNil() {
					yyv4886[yyj4886] = AttachedVolume{}
				} else {
					yyv4889 := &yyv4886[yyj4886]
					yyv4889.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4886 < len(yyv4886) {
			yyv4886 = yyv4886[:yyj4886]
			yyc4886 = true
		} else if yyj4886 == 0 && yyv4886 == nil {
			yyv4886 = []AttachedVolume{}
			yyc4886 = true
		}
	}
	yyh4886.End()
	if yyc4886 {
		*v = yyv4886
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4890 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4891 := &yyv4890
		yy4891.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4892 := *v
	yyh4892, yyl4892 := z.DecSliceHelperStart()
	var yyc4892 bool
	if yyl4892 == 0 {
		if yyv4892 == nil {
			yyv4892 = []PreferAvoidPodsEntry{}
			yyc4892 = true
		} else if len(yyv4892) != 0 {
			yyv4892 = yyv4892[:0]
			yyc4892 = true
		}
	} else if yyl4892 > 0 {
		var yyrr4892, yyrl4892 int
		var yyrt4892 bool
		if yyl4892 > cap(yyv4892) {

			yyrg4892 := len(yyv4892) > 0
			yyv24892 := yyv4892
			yyrl4892, yyrt4892 = z.DecInferLen(yyl4892, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4892 {
				if yyrl4892 <= cap(yyv4892) {
					yyv4892 = yyv4892[:yyrl4892]
				} else {
					yyv4892 = make([]PreferAvoidPodsEntry, yyrl4892)
				}
			} else {
				yyv4892 = make([]PreferAvoidPodsEntry, yyrl4892)
			}
			yyc4892 = true
			yyrr4892 = len(yyv4892)
			if yyrg4892 {
				copy(yyv4892, yyv24892)
			}
		} else if yyl4892 != len(yyv4892) {
			yyv4892 = yyv4892[:yyl4892]
			yyc4892 = true
		}
		yyj4892 := 0
		for ; yyj4892 < yyrr4892; yyj4892++ {
			yyh4892.ElemContainerState(yyj4892)
			if r.TryDecodeAsNil() {
				yyv4892[yyj4892] = PreferAvoidPodsEntry{}
			} else {
				yyv4893 := &yyv4892[yyj4892]
				yyv4893.CodecDecodeSelf(d)
			}

		}
		if yyrt4892 {
			for ; yyj4892 < yyl4892; yyj4892++ {
				yyv4892 = append(yyv4892, PreferAvoidPodsEntry{})
				yyh4892.ElemContainerState(yyj4892)
				if r.TryDecodeAsNil() {
					yyv4892[yyj4892] = PreferAvoidPodsEntry{}
				} else {
					yyv4894 := &yyv4892[yyj4892]
					yyv4894.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4892 := 0
		for ; !r.CheckBreak(); yyj4892++ {

			if yyj4892 >= len(yyv4892) {
				yyv4892 = append(yyv4892, PreferAvoidPodsEntry{}) // var yyz4892 PreferAvoidPodsEntry
				yyc4892 = true
			}
			yyh4892.ElemContainerState(yyj4892)
			if yyj4892 < len(yyv4892) {
				if r.TryDecodeAsNil() {
					yyv4892[yyj4892] = PreferAvoidPodsEntry{}
				} else {
					yyv4895 := &yyv4892[yyj4892]
					yyv4895.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4892 < len(yyv4892) {
			yyv4892 = yyv4892[:yyj4892]
			yyc4892 = true
		} else if yyj4892 == 0 && yyv4892 == nil {
			yyv4892 = []PreferAvoidPodsEntry{}
			yyc4892 = true
		}
	}
	yyh4892.End()
	if yyc4892 {
		*v = yyv4892
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4896, yyv4896 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4896.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4897 := &yyv4896
		yym4898 := z.EncBinary()
		_ = yym4898
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4897) {
		} else if !yym4898 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4897)
		} else {
			z.EncFallback(yy4897)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4899 := *v
	yyl4899 := r.ReadMapStart()
	yybh4899 := z.DecBasicHandle()
	if yyv4899 == nil {
		yyrl4899, _ := z.DecInferLen(yyl4899, yybh4899.MaxInitLen, 72)
		yyv4899 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4899)
		*v = yyv4899
	}
	var yymk4899 ResourceName
	var yymv4899 pkg3_resource.Quantity
	var yymg4899 bool
	if yybh4899.MapValueReset {
		yymg4899 = true
	}
	if yyl4899 > 0 {
		for yyj4899 := 0; yyj4899 < yyl4899; yyj4899++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4899 = ""
			} else {
				yymk4899 = ResourceName(r.DecodeString())
			}

			if yymg4899 {
				yymv4899 = yyv4899[yymk4899]
			} else {
				yymv4899 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4899 = pkg3_resource.Quantity{}
			} else {
				yyv4901 := &yymv4899
				yym4902 := z.DecBinary()
				_ = yym4902
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4901) {
				} else if !yym4902 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4901)
				} else {
					z.DecFallback(yyv4901, false)
				}
			}

			if yyv4899 != nil {
				yyv4899[yymk4899] = yymv4899
			}
		}
	} else if yyl4899 < 0 {
		for yyj4899 := 0; !r.CheckBreak(); yyj4899++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4899 = ""
			} else {
				yymk4899 = ResourceName(r.DecodeString())
			}

			if yymg4899 {
				yymv4899 = yyv4899[yymk4899]
			} else {
				yymv4899 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4899 = pkg3_resource.Quantity{}
			} else {
				yyv4904 := &yymv4899
				yym4905 := z.DecBinary()
				_ = yym4905
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4904) {
				} else if !yym4905 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4904)
				} else {
					z.DecFallback(yyv4904, false)
				}
			}

			if yyv4899 != nil {
				yyv4899[yymk4899] = yymv4899
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4906 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4907 := &yyv4906
		yy4907.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4908 := *v
	yyh4908, yyl4908 := z.DecSliceHelperStart()
	var yyc4908 bool
	if yyl4908 == 0 {
		if yyv4908 == nil {
			yyv4908 = []Node{}
			yyc4908 = true
		} else if len(yyv4908) != 0 {
			yyv4908 = yyv4908[:0]
			yyc4908 = true
		}
	} else if yyl4908 > 0 {
		var yyrr4908, yyrl4908 int
		var yyrt4908 bool
		if yyl4908 > cap(yyv4908) {

			yyrg4908 := len(yyv4908) > 0
			yyv24908 := yyv4908
			yyrl4908, yyrt4908 = z.DecInferLen(yyl4908, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt4908 {
				if yyrl4908 <= cap(yyv4908) {
					yyv4908 = yyv4908[:yyrl4908]
				} else {
					yyv4908 = make([]Node, yyrl4908)
				}
			} else {
				yyv4908 = make([]Node, yyrl4908)
			}
			yyc4908 = true
			yyrr4908 = len(yyv4908)
			if yyrg4908 {
				copy(yyv4908, yyv24908)
			}
		} else if yyl4908 != len(yyv4908) {
			yyv4908 = yyv4908[:yyl4908]
			yyc4908 = true
		}
		yyj4908 := 0
		for ; yyj4908 < yyrr4908; yyj4908++ {
			yyh4908.ElemContainerState(yyj4908)
			if r.TryDecodeAsNil() {
				yyv4908[yyj4908] = Node{}
			} else {
				yyv4909 := &yyv4908[yyj4908]
				yyv4909.CodecDecodeSelf(d)
			}

		}
		if yyrt4908 {
			for ; yyj4908 < yyl4908; yyj4908++ {
				yyv4908 = append(yyv4908, Node{})
				yyh4908.ElemContainerState(yyj4908)
				if r.TryDecodeAsNil() {
					yyv4908[yyj4908] = Node{}
				} else {
					yyv4910 := &yyv4908[yyj4908]
					yyv4910.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4908 := 0
		for ; !r.CheckBreak(); yyj4908++ {

			if yyj4908 >= len(yyv4908) {
				yyv4908 = append(yyv4908, Node{}) // var yyz4908 Node
				yyc4908 = true
			}
			yyh4908.ElemContainerState(yyj4908)
			if yyj4908 < len(yyv4908) {
				if r.TryDecodeAsNil() {
					yyv4908[yyj4908] = Node{}
				} else {
					yyv4911 := &yyv4908[yyj4908]
					yyv4911.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4908 < len(yyv4908) {
			yyv4908 = yyv4908[:yyj4908]
			yyc4908 = true
		} else if yyj4908 == 0 && yyv4908 == nil {
			yyv4908 = []Node{}
			yyc4908 = true
		}
	}
	yyh4908.End()
	if yyc4908 {
		*v = yyv4908
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4912 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4912.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4913 := *v
	yyh4913, yyl4913 := z.DecSliceHelperStart()
	var yyc4913 bool
	if yyl4913 == 0 {
		if yyv4913 == nil {
			yyv4913 = []FinalizerName{}
			yyc4913 = true
		} else if len(yyv4913) != 0 {
			yyv4913 = yyv4913[:0]
			yyc4913 = true
		}
	} else if yyl4913 > 0 {
		var yyrr4913, yyrl4913 int
		var yyrt4913 bool
		if yyl4913 > cap(yyv4913) {

			yyrl4913, yyrt4913 = z.DecInferLen(yyl4913, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4913 {
				if yyrl4913 <= cap(yyv4913) {
					yyv4913 = yyv4913[:yyrl4913]
				} else {
					yyv4913 = make([]FinalizerName, yyrl4913)
				}
			} else {
				yyv4913 = make([]FinalizerName, yyrl4913)
			}
			yyc4913 = true
			yyrr4913 = len(yyv4913)
		} else if yyl4913 != len(yyv4913) {
			yyv4913 = yyv4913[:yyl4913]
			yyc4913 = true
		}
		yyj4913 := 0
		for ; yyj4913 < yyrr4913; yyj4913++ {
			yyh4913.ElemContainerState(yyj4913)
			if r.TryDecodeAsNil() {
				yyv4913[yyj4913] = ""
			} else {
				yyv4913[yyj4913] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4913 {
			for ; yyj4913 < yyl4913; yyj4913++ {
				yyv4913 = append(yyv4913, "")
				yyh4913.ElemContainerState(yyj4913)
				if r.TryDecodeAsNil() {
					yyv4913[yyj4913] = ""
				} else {
					yyv4913[yyj4913] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4913 := 0
		for ; !r.CheckBreak(); yyj4913++ {

			if yyj4913 >= len(yyv4913) {
				yyv4913 = append(yyv4913, "") // var yyz4913 FinalizerName
				yyc4913 = true
			}
			yyh4913.ElemContainerState(yyj4913)
			if yyj4913 < len(yyv4913) {
				if r.TryDecodeAsNil() {
					yyv4913[yyj4913] = ""
				} else {
					yyv4913[yyj4913] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4913 < len(yyv4913) {
			yyv4913 = yyv4913[:yyj4913]
			yyc4913 = true
		} else if yyj4913 == 0 && yyv4913 == nil {
			yyv4913 = []FinalizerName{}
			yyc4913 = true
		}
	}
	yyh4913.End()
	if yyc4913 {
		*v = yyv4913
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4917 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4918 := &yyv4917
		yy4918.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4919 := *v
	yyh4919, yyl4919 := z.DecSliceHelperStart()
	var yyc4919 bool
	if yyl4919 == 0 {
		if yyv4919 == nil {
			yyv4919 = []Namespace{}
			yyc4919 = true
		} else if len(yyv4919) != 0 {
			yyv4919 = yyv4919[:0]
			yyc4919 = true
		}
	} else if yyl4919 > 0 {
		var yyrr4919, yyrl4919 int
		var yyrt4919 bool
		if yyl4919 > cap(yyv4919) {

			yyrg4919 := len(yyv4919) > 0
			yyv24919 := yyv4919
			yyrl4919, yyrt4919 = z.DecInferLen(yyl4919, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4919 {
				if yyrl4919 <= cap(yyv4919) {
					yyv4919 = yyv4919[:yyrl4919]
				} else {
					yyv4919 = make([]Namespace, yyrl4919)
				}
			} else {
				yyv4919 = make([]Namespace, yyrl4919)
			}
			yyc4919 = true
			yyrr4919 = len(yyv4919)
			if yyrg4919 {
				copy(yyv4919, yyv24919)
			}
		} else if yyl4919 != len(yyv4919) {
			yyv4919 = yyv4919[:yyl4919]
			yyc4919 = true
		}
		yyj4919 := 0
		for ; yyj4919 < yyrr4919; yyj4919++ {
			yyh4919.ElemContainerState(yyj4919)
			if r.TryDecodeAsNil() {
				yyv4919[yyj4919] = Namespace{}
			} else {
				yyv4920 := &yyv4919[yyj4919]
				yyv4920.CodecDecodeSelf(d)
			}

		}
		if yyrt4919 {
			for ; yyj4919 < yyl4919; yyj4919++ {
				yyv4919 = append(yyv4919, Namespace{})
				yyh4919.ElemContainerState(yyj4919)
				if r.TryDecodeAsNil() {
					yyv4919[yyj4919] = Namespace{}
				} else {
					yyv4921 := &yyv4919[yyj4919]
					yyv4921.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4919 := 0
		for ; !r.CheckBreak(); yyj4919++ {

			if yyj4919 >= len(yyv4919) {
				yyv4919 = append(yyv4919, Namespace{}) // var yyz4919 Namespace
				yyc4919 = true
			}
			yyh4919.ElemContainerState(yyj4919)
			if yyj4919 < len(yyv4919) {
				if r.TryDecodeAsNil() {
					yyv4919[yyj4919] = Namespace{}
				} else {
					yyv4922 := &yyv4919[yyj4919]
					yyv4922.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4919 < len(yyv4919) {
			yyv4919 = yyv4919[:yyj4919]
			yyc4919 = true
		} else if yyj4919 == 0 && yyv4919 == nil {
			yyv4919 = []Namespace{}
			yyc4919 = true
		}
	}
	yyh4919.End()
	if yyc4919 {
		*v = yyv4919
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4923 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4924 := &yyv4923
		yy4924.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4925 := *v
	yyh4925, yyl4925 := z.DecSliceHelperStart()
	var yyc4925 bool
	if yyl4925 == 0 {
		if yyv4925 == nil {
			yyv4925 = []Event{}
			yyc4925 = true
		} else if len(yyv4925) != 0 {
			yyv4925 = yyv4925[:0]
			yyc4925 = true
		}
	} else if yyl4925 > 0 {
		var yyrr4925, yyrl4925 int
		var yyrt4925 bool
		if yyl4925 > cap(yyv4925) {

			yyrg4925 := len(yyv4925) > 0
			yyv24925 := yyv4925
			yyrl4925, yyrt4925 = z.DecInferLen(yyl4925, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4925 {
				if yyrl4925 <= cap(yyv4925) {
					yyv4925 = yyv4925[:yyrl4925]
				} else {
					yyv4925 = make([]Event, yyrl4925)
				}
			} else {
				yyv4925 = make([]Event, yyrl4925)
			}
			yyc4925 = true
			yyrr4925 = len(yyv4925)
			if yyrg4925 {
				copy(yyv4925, yyv24925)
			}
		} else if yyl4925 != len(yyv4925) {
			yyv4925 = yyv4925[:yyl4925]
			yyc4925 = true
		}
		yyj4925 := 0
		for ; yyj4925 < yyrr4925; yyj4925++ {
			yyh4925.ElemContainerState(yyj4925)
			if r.TryDecodeAsNil() {
				yyv4925[yyj4925] = Event{}
			} else {
				yyv4926 := &yyv4925[yyj4925]
				yyv4926.CodecDecodeSelf(d)
			}

		}
		if yyrt4925 {
			for ; yyj4925 < yyl4925; yyj4925++ {
				yyv4925 = append(yyv4925, Event{})
				yyh4925.ElemContainerState(yyj4925)
				if r.TryDecodeAsNil() {
					yyv4925[yyj4925] = Event{}
				} else {
					yyv4927 := &yyv4925[yyj4925]
					yyv4927.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4925 := 0
		for ; !r.CheckBreak(); yyj4925++ {

			if yyj4925 >= len(yyv4925) {
				yyv4925 = append(yyv4925, Event{}) // var yyz4925 Event
				yyc4925 = true
			}
			yyh4925.ElemContainerState(yyj4925)
			if yyj4925 < len(yyv4925) {
				if r.TryDecodeAsNil() {
					yyv4925[yyj4925] = Event{}
				} else {
					yyv4928 := &yyv4925[yyj4925]
					yyv4928.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4925 < len(yyv4925) {
			yyv4925 = yyv4925[:yyj4925]
			yyc4925 = true
		} else if yyj4925 == 0 && yyv4925 == nil {
			yyv4925 = []Event{}
			yyc4925 = true
		}
	}
	yyh4925.End()
	if yyc4925 {
		*v = yyv4925
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg7_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4929 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv4929 == nil {
			r.EncodeNil()
		} else {
			yym4930 := z.EncBinary()
			_ = yym4930
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv4929) {
			} else {
				z.EncFallback(yyv4929)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg7_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4931 := *v
	yyh4931, yyl4931 := z.DecSliceHelperStart()
	var yyc4931 bool
	if yyl4931 == 0 {
		if yyv4931 == nil {
			yyv4931 = []pkg7_runtime.Object{}
			yyc4931 = true
		} else if len(yyv4931) != 0 {
			yyv4931 = yyv4931[:0]
			yyc4931 = true
		}
	} else if yyl4931 > 0 {
		var yyrr4931, yyrl4931 int
		var yyrt4931 bool
		if yyl4931 > cap(yyv4931) {

			yyrg4931 := len(yyv4931) > 0
			yyv24931 := yyv4931
			yyrl4931, yyrt4931 = z.DecInferLen(yyl4931, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4931 {
				if yyrl4931 <= cap(yyv4931) {
					yyv4931 = yyv4931[:yyrl4931]
				} else {
					yyv4931 = make([]pkg7_runtime.Object, yyrl4931)
				}
			} else {
				yyv4931 = make([]pkg7_runtime.Object, yyrl4931)
			}
			yyc4931 = true
			yyrr4931 = len(yyv4931)
			if yyrg4931 {
				copy(yyv4931, yyv24931)
			}
		} else if yyl4931 != len(yyv4931) {
			yyv4931 = yyv4931[:yyl4931]
			yyc4931 = true
		}
		yyj4931 := 0
		for ; yyj4931 < yyrr4931; yyj4931++ {
			yyh4931.ElemContainerState(yyj4931)
			if r.TryDecodeAsNil() {
				yyv4931[yyj4931] = nil
			} else {
				yyv4932 := &yyv4931[yyj4931]
				yym4933 := z.DecBinary()
				_ = yym4933
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4932) {
				} else {
					z.DecFallback(yyv4932, true)
				}
			}

		}
		if yyrt4931 {
			for ; yyj4931 < yyl4931; yyj4931++ {
				yyv4931 = append(yyv4931, nil)
				yyh4931.ElemContainerState(yyj4931)
				if r.TryDecodeAsNil() {
					yyv4931[yyj4931] = nil
				} else {
					yyv4934 := &yyv4931[yyj4931]
					yym4935 := z.DecBinary()
					_ = yym4935
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4934) {
					} else {
						z.DecFallback(yyv4934, true)
					}
				}

			}
		}

	} else {
		yyj4931 := 0
		for ; !r.CheckBreak(); yyj4931++ {

			if yyj4931 >= len(yyv4931) {
				yyv4931 = append(yyv4931, nil) // var yyz4931 pkg7_runtime.Object
				yyc4931 = true
			}
			yyh4931.ElemContainerState(yyj4931)
			if yyj4931 < len(yyv4931) {
				if r.TryDecodeAsNil() {
					yyv4931[yyj4931] = nil
				} else {
					yyv4936 := &yyv4931[yyj4931]
					yym4937 := z.DecBinary()
					_ = yym4937
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4936) {
					} else {
						z.DecFallback(yyv4936, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4931 < len(yyv4931) {
			yyv4931 = yyv4931[:yyj4931]
			yyc4931 = true
		} else if yyj4931 == 0 && yyv4931 == nil {
			yyv4931 = []pkg7_runtime.Object{}
			yyc4931 = true
		}
	}
	yyh4931.End()
	if yyc4931 {
		*v = yyv4931
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4938 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4939 := &yyv4938
		yy4939.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4940 := *v
	yyh4940, yyl4940 := z.DecSliceHelperStart()
	var yyc4940 bool
	if yyl4940 == 0 {
		if yyv4940 == nil {
			yyv4940 = []LimitRangeItem{}
			yyc4940 = true
		} else if len(yyv4940) != 0 {
			yyv4940 = yyv4940[:0]
			yyc4940 = true
		}
	} else if yyl4940 > 0 {
		var yyrr4940, yyrl4940 int
		var yyrt4940 bool
		if yyl4940 > cap(yyv4940) {

			yyrg4940 := len(yyv4940) > 0
			yyv24940 := yyv4940
			yyrl4940, yyrt4940 = z.DecInferLen(yyl4940, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4940 {
				if yyrl4940 <= cap(yyv4940) {
					yyv4940 = yyv4940[:yyrl4940]
				} else {
					yyv4940 = make([]LimitRangeItem, yyrl4940)
				}
			} else {
				yyv4940 = make([]LimitRangeItem, yyrl4940)
			}
			yyc4940 = true
			yyrr4940 = len(yyv4940)
			if yyrg4940 {
				copy(yyv4940, yyv24940)
			}
		} else if yyl4940 != len(yyv4940) {
			yyv4940 = yyv4940[:yyl4940]
			yyc4940 = true
		}
		yyj4940 := 0
		for ; yyj4940 < yyrr4940; yyj4940++ {
			yyh4940.ElemContainerState(yyj4940)
			if r.TryDecodeAsNil() {
				yyv4940[yyj4940] = LimitRangeItem{}
			} else {
				yyv4941 := &yyv4940[yyj4940]
				yyv4941.CodecDecodeSelf(d)
			}

		}
		if yyrt4940 {
			for ; yyj4940 < yyl4940; yyj4940++ {
				yyv4940 = append(yyv4940, LimitRangeItem{})
				yyh4940.ElemContainerState(yyj4940)
				if r.TryDecodeAsNil() {
					yyv4940[yyj4940] = LimitRangeItem{}
				} else {
					yyv4942 := &yyv4940[yyj4940]
					yyv4942.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4940 := 0
		for ; !r.CheckBreak(); yyj4940++ {

			if yyj4940 >= len(yyv4940) {
				yyv4940 = append(yyv4940, LimitRangeItem{}) // var yyz4940 LimitRangeItem
				yyc4940 = true
			}
			yyh4940.ElemContainerState(yyj4940)
			if yyj4940 < len(yyv4940) {
				if r.TryDecodeAsNil() {
					yyv4940[yyj4940] = LimitRangeItem{}
				} else {
					yyv4943 := &yyv4940[yyj4940]
					yyv4943.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4940 < len(yyv4940) {
			yyv4940 = yyv4940[:yyj4940]
			yyc4940 = true
		} else if yyj4940 == 0 && yyv4940 == nil {
			yyv4940 = []LimitRangeItem{}
			yyc4940 = true
		}
	}
	yyh4940.End()
	if yyc4940 {
		*v = yyv4940
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4944 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4945 := &yyv4944
		yy4945.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4946 := *v
	yyh4946, yyl4946 := z.DecSliceHelperStart()
	var yyc4946 bool
	if yyl4946 == 0 {
		if yyv4946 == nil {
			yyv4946 = []LimitRange{}
			yyc4946 = true
		} else if len(yyv4946) != 0 {
			yyv4946 = yyv4946[:0]
			yyc4946 = true
		}
	} else if yyl4946 > 0 {
		var yyrr4946, yyrl4946 int
		var yyrt4946 bool
		if yyl4946 > cap(yyv4946) {

			yyrg4946 := len(yyv4946) > 0
			yyv24946 := yyv4946
			yyrl4946, yyrt4946 = z.DecInferLen(yyl4946, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4946 {
				if yyrl4946 <= cap(yyv4946) {
					yyv4946 = yyv4946[:yyrl4946]
				} else {
					yyv4946 = make([]LimitRange, yyrl4946)
				}
			} else {
				yyv4946 = make([]LimitRange, yyrl4946)
			}
			yyc4946 = true
			yyrr4946 = len(yyv4946)
			if yyrg4946 {
				copy(yyv4946, yyv24946)
			}
		} else if yyl4946 != len(yyv4946) {
			yyv4946 = yyv4946[:yyl4946]
			yyc4946 = true
		}
		yyj4946 := 0
		for ; yyj4946 < yyrr4946; yyj4946++ {
			yyh4946.ElemContainerState(yyj4946)
			if r.TryDecodeAsNil() {
				yyv4946[yyj4946] = LimitRange{}
			} else {
				yyv4947 := &yyv4946[yyj4946]
				yyv4947.CodecDecodeSelf(d)
			}

		}
		if yyrt4946 {
			for ; yyj4946 < yyl4946; yyj4946++ {
				yyv4946 = append(yyv4946, LimitRange{})
				yyh4946.ElemContainerState(yyj4946)
				if r.TryDecodeAsNil() {
					yyv4946[yyj4946] = LimitRange{}
				} else {
					yyv4948 := &yyv4946[yyj4946]
					yyv4948.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4946 := 0
		for ; !r.CheckBreak(); yyj4946++ {

			if yyj4946 >= len(yyv4946) {
				yyv4946 = append(yyv4946, LimitRange{}) // var yyz4946 LimitRange
				yyc4946 = true
			}
			yyh4946.ElemContainerState(yyj4946)
			if yyj4946 < len(yyv4946) {
				if r.TryDecodeAsNil() {
					yyv4946[yyj4946] = LimitRange{}
				} else {
					yyv4949 := &yyv4946[yyj4946]
					yyv4949.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4946 < len(yyv4946) {
			yyv4946 = yyv4946[:yyj4946]
			yyc4946 = true
		} else if yyj4946 == 0 && yyv4946 == nil {
			yyv4946 = []LimitRange{}
			yyc4946 = true
		}
	}
	yyh4946.End()
	if yyc4946 {
		*v = yyv4946
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4950 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4950.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4951 := *v
	yyh4951, yyl4951 := z.DecSliceHelperStart()
	var yyc4951 bool
	if yyl4951 == 0 {
		if yyv4951 == nil {
			yyv4951 = []ResourceQuotaScope{}
			yyc4951 = true
		} else if len(yyv4951) != 0 {
			yyv4951 = yyv4951[:0]
			yyc4951 = true
		}
	} else if yyl4951 > 0 {
		var yyrr4951, yyrl4951 int
		var yyrt4951 bool
		if yyl4951 > cap(yyv4951) {

			yyrl4951, yyrt4951 = z.DecInferLen(yyl4951, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4951 {
				if yyrl4951 <= cap(yyv4951) {
					yyv4951 = yyv4951[:yyrl4951]
				} else {
					yyv4951 = make([]ResourceQuotaScope, yyrl4951)
				}
			} else {
				yyv4951 = make([]ResourceQuotaScope, yyrl4951)
			}
			yyc4951 = true
			yyrr4951 = len(yyv4951)
		} else if yyl4951 != len(yyv4951) {
			yyv4951 = yyv4951[:yyl4951]
			yyc4951 = true
		}
		yyj4951 := 0
		for ; yyj4951 < yyrr4951; yyj4951++ {
			yyh4951.ElemContainerState(yyj4951)
			if r.TryDecodeAsNil() {
				yyv4951[yyj4951] = ""
			} else {
				yyv4951[yyj4951] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4951 {
			for ; yyj4951 < yyl4951; yyj4951++ {
				yyv4951 = append(yyv4951, "")
				yyh4951.ElemContainerState(yyj4951)
				if r.TryDecodeAsNil() {
					yyv4951[yyj4951] = ""
				} else {
					yyv4951[yyj4951] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4951 := 0
		for ; !r.CheckBreak(); yyj4951++ {

			if yyj4951 >= len(yyv4951) {
				yyv4951 = append(yyv4951, "") // var yyz4951 ResourceQuotaScope
				yyc4951 = true
			}
			yyh4951.ElemContainerState(yyj4951)
			if yyj4951 < len(yyv4951) {
				if r.TryDecodeAsNil() {
					yyv4951[yyj4951] = ""
				} else {
					yyv4951[yyj4951] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4951 < len(yyv4951) {
			yyv4951 = yyv4951[:yyj4951]
			yyc4951 = true
		} else if yyj4951 == 0 && yyv4951 == nil {
			yyv4951 = []ResourceQuotaScope{}
			yyc4951 = true
		}
	}
	yyh4951.End()
	if yyc4951 {
		*v = yyv4951
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4955 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4956 := &yyv4955
		yy4956.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4957 := *v
	yyh4957, yyl4957 := z.DecSliceHelperStart()
	var yyc4957 bool
	if yyl4957 == 0 {
		if yyv4957 == nil {
			yyv4957 = []ResourceQuota{}
			yyc4957 = true
		} else if len(yyv4957) != 0 {
			yyv4957 = yyv4957[:0]
			yyc4957 = true
		}
	} else if yyl4957 > 0 {
		var yyrr4957, yyrl4957 int
		var yyrt4957 bool
		if yyl4957 > cap(yyv4957) {

			yyrg4957 := len(yyv4957) > 0
			yyv24957 := yyv4957
			yyrl4957, yyrt4957 = z.DecInferLen(yyl4957, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4957 {
				if yyrl4957 <= cap(yyv4957) {
					yyv4957 = yyv4957[:yyrl4957]
				} else {
					yyv4957 = make([]ResourceQuota, yyrl4957)
				}
			} else {
				yyv4957 = make([]ResourceQuota, yyrl4957)
			}
			yyc4957 = true
			yyrr4957 = len(yyv4957)
			if yyrg4957 {
				copy(yyv4957, yyv24957)
			}
		} else if yyl4957 != len(yyv4957) {
			yyv4957 = yyv4957[:yyl4957]
			yyc4957 = true
		}
		yyj4957 := 0
		for ; yyj4957 < yyrr4957; yyj4957++ {
			yyh4957.ElemContainerState(yyj4957)
			if r.TryDecodeAsNil() {
				yyv4957[yyj4957] = ResourceQuota{}
			} else {
				yyv4958 := &yyv4957[yyj4957]
				yyv4958.CodecDecodeSelf(d)
			}

		}
		if yyrt4957 {
			for ; yyj4957 < yyl4957; yyj4957++ {
				yyv4957 = append(yyv4957, ResourceQuota{})
				yyh4957.ElemContainerState(yyj4957)
				if r.TryDecodeAsNil() {
					yyv4957[yyj4957] = ResourceQuota{}
				} else {
					yyv4959 := &yyv4957[yyj4957]
					yyv4959.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4957 := 0
		for ; !r.CheckBreak(); yyj4957++ {

			if yyj4957 >= len(yyv4957) {
				yyv4957 = append(yyv4957, ResourceQuota{}) // var yyz4957 ResourceQuota
				yyc4957 = true
			}
			yyh4957.ElemContainerState(yyj4957)
			if yyj4957 < len(yyv4957) {
				if r.TryDecodeAsNil() {
					yyv4957[yyj4957] = ResourceQuota{}
				} else {
					yyv4960 := &yyv4957[yyj4957]
					yyv4960.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4957 < len(yyv4957) {
			yyv4957 = yyv4957[:yyj4957]
			yyc4957 = true
		} else if yyj4957 == 0 && yyv4957 == nil {
			yyv4957 = []ResourceQuota{}
			yyc4957 = true
		}
	}
	yyh4957.End()
	if yyc4957 {
		*v = yyv4957
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4961, yyv4961 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4962 := z.EncBinary()
		_ = yym4962
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4961))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4961 == nil {
			r.EncodeNil()
		} else {
			yym4963 := z.EncBinary()
			_ = yym4963
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4961))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4964 := *v
	yyl4964 := r.ReadMapStart()
	yybh4964 := z.DecBasicHandle()
	if yyv4964 == nil {
		yyrl4964, _ := z.DecInferLen(yyl4964, yybh4964.MaxInitLen, 40)
		yyv4964 = make(map[string][]uint8, yyrl4964)
		*v = yyv4964
	}
	var yymk4964 string
	var yymv4964 []uint8
	var yymg4964 bool
	if yybh4964.MapValueReset {
		yymg4964 = true
	}
	if yyl4964 > 0 {
		for yyj4964 := 0; yyj4964 < yyl4964; yyj4964++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4964 = ""
			} else {
				yymk4964 = string(r.DecodeString())
			}

			if yymg4964 {
				yymv4964 = yyv4964[yymk4964]
			} else {
				yymv4964 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4964 = nil
			} else {
				yyv4966 := &yymv4964
				yym4967 := z.DecBinary()
				_ = yym4967
				if false {
				} else {
					*yyv4966 = r.DecodeBytes(*(*[]byte)(yyv4966), false, false)
				}
			}

			if yyv4964 != nil {
				yyv4964[yymk4964] = yymv4964
			}
		}
	} else if yyl4964 < 0 {
		for yyj4964 := 0; !r.CheckBreak(); yyj4964++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4964 = ""
			} else {
				yymk4964 = string(r.DecodeString())
			}

			if yymg4964 {
				yymv4964 = yyv4964[yymk4964]
			} else {
				yymv4964 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4964 = nil
			} else {
				yyv4969 := &yymv4964
				yym4970 := z.DecBinary()
				_ = yym4970
				if false {
				} else {
					*yyv4969 = r.DecodeBytes(*(*[]byte)(yyv4969), false, false)
				}
			}

			if yyv4964 != nil {
				yyv4964[yymk4964] = yymv4964
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4971 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4972 := &yyv4971
		yy4972.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4973 := *v
	yyh4973, yyl4973 := z.DecSliceHelperStart()
	var yyc4973 bool
	if yyl4973 == 0 {
		if yyv4973 == nil {
			yyv4973 = []Secret{}
			yyc4973 = true
		} else if len(yyv4973) != 0 {
			yyv4973 = yyv4973[:0]
			yyc4973 = true
		}
	} else if yyl4973 > 0 {
		var yyrr4973, yyrl4973 int
		var yyrt4973 bool
		if yyl4973 > cap(yyv4973) {

			yyrg4973 := len(yyv4973) > 0
			yyv24973 := yyv4973
			yyrl4973, yyrt4973 = z.DecInferLen(yyl4973, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4973 {
				if yyrl4973 <= cap(yyv4973) {
					yyv4973 = yyv4973[:yyrl4973]
				} else {
					yyv4973 = make([]Secret, yyrl4973)
				}
			} else {
				yyv4973 = make([]Secret, yyrl4973)
			}
			yyc4973 = true
			yyrr4973 = len(yyv4973)
			if yyrg4973 {
				copy(yyv4973, yyv24973)
			}
		} else if yyl4973 != len(yyv4973) {
			yyv4973 = yyv4973[:yyl4973]
			yyc4973 = true
		}
		yyj4973 := 0
		for ; yyj4973 < yyrr4973; yyj4973++ {
			yyh4973.ElemContainerState(yyj4973)
			if r.TryDecodeAsNil() {
				yyv4973[yyj4973] = Secret{}
			} else {
				yyv4974 := &yyv4973[yyj4973]
				yyv4974.CodecDecodeSelf(d)
			}

		}
		if yyrt4973 {
			for ; yyj4973 < yyl4973; yyj4973++ {
				yyv4973 = append(yyv4973, Secret{})
				yyh4973.ElemContainerState(yyj4973)
				if r.TryDecodeAsNil() {
					yyv4973[yyj4973] = Secret{}
				} else {
					yyv4975 := &yyv4973[yyj4973]
					yyv4975.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4973 := 0
		for ; !r.CheckBreak(); yyj4973++ {

			if yyj4973 >= len(yyv4973) {
				yyv4973 = append(yyv4973, Secret{}) // var yyz4973 Secret
				yyc4973 = true
			}
			yyh4973.ElemContainerState(yyj4973)
			if yyj4973 < len(yyv4973) {
				if r.TryDecodeAsNil() {
					yyv4973[yyj4973] = Secret{}
				} else {
					yyv4976 := &yyv4973[yyj4973]
					yyv4976.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4973 < len(yyv4973) {
			yyv4973 = yyv4973[:yyj4973]
			yyc4973 = true
		} else if yyj4973 == 0 && yyv4973 == nil {
			yyv4973 = []Secret{}
			yyc4973 = true
		}
	}
	yyh4973.End()
	if yyc4973 {
		*v = yyv4973
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4977 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4978 := &yyv4977
		yy4978.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4979 := *v
	yyh4979, yyl4979 := z.DecSliceHelperStart()
	var yyc4979 bool
	if yyl4979 == 0 {
		if yyv4979 == nil {
			yyv4979 = []ConfigMap{}
			yyc4979 = true
		} else if len(yyv4979) != 0 {
			yyv4979 = yyv4979[:0]
			yyc4979 = true
		}
	} else if yyl4979 > 0 {
		var yyrr4979, yyrl4979 int
		var yyrt4979 bool
		if yyl4979 > cap(yyv4979) {

			yyrg4979 := len(yyv4979) > 0
			yyv24979 := yyv4979
			yyrl4979, yyrt4979 = z.DecInferLen(yyl4979, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4979 {
				if yyrl4979 <= cap(yyv4979) {
					yyv4979 = yyv4979[:yyrl4979]
				} else {
					yyv4979 = make([]ConfigMap, yyrl4979)
				}
			} else {
				yyv4979 = make([]ConfigMap, yyrl4979)
			}
			yyc4979 = true
			yyrr4979 = len(yyv4979)
			if yyrg4979 {
				copy(yyv4979, yyv24979)
			}
		} else if yyl4979 != len(yyv4979) {
			yyv4979 = yyv4979[:yyl4979]
			yyc4979 = true
		}
		yyj4979 := 0
		for ; yyj4979 < yyrr4979; yyj4979++ {
			yyh4979.ElemContainerState(yyj4979)
			if r.TryDecodeAsNil() {
				yyv4979[yyj4979] = ConfigMap{}
			} else {
				yyv4980 := &yyv4979[yyj4979]
				yyv4980.CodecDecodeSelf(d)
			}

		}
		if yyrt4979 {
			for ; yyj4979 < yyl4979; yyj4979++ {
				yyv4979 = append(yyv4979, ConfigMap{})
				yyh4979.ElemContainerState(yyj4979)
				if r.TryDecodeAsNil() {
					yyv4979[yyj4979] = ConfigMap{}
				} else {
					yyv4981 := &yyv4979[yyj4979]
					yyv4981.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4979 := 0
		for ; !r.CheckBreak(); yyj4979++ {

			if yyj4979 >= len(yyv4979) {
				yyv4979 = append(yyv4979, ConfigMap{}) // var yyz4979 ConfigMap
				yyc4979 = true
			}
			yyh4979.ElemContainerState(yyj4979)
			if yyj4979 < len(yyv4979) {
				if r.TryDecodeAsNil() {
					yyv4979[yyj4979] = ConfigMap{}
				} else {
					yyv4982 := &yyv4979[yyj4979]
					yyv4982.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4979 < len(yyv4979) {
			yyv4979 = yyv4979[:yyj4979]
			yyc4979 = true
		} else if yyj4979 == 0 && yyv4979 == nil {
			yyv4979 = []ConfigMap{}
			yyc4979 = true
		}
	}
	yyh4979.End()
	if yyc4979 {
		*v = yyv4979
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4983 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4984 := &yyv4983
		yy4984.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4985 := *v
	yyh4985, yyl4985 := z.DecSliceHelperStart()
	var yyc4985 bool
	if yyl4985 == 0 {
		if yyv4985 == nil {
			yyv4985 = []ComponentCondition{}
			yyc4985 = true
		} else if len(yyv4985) != 0 {
			yyv4985 = yyv4985[:0]
			yyc4985 = true
		}
	} else if yyl4985 > 0 {
		var yyrr4985, yyrl4985 int
		var yyrt4985 bool
		if yyl4985 > cap(yyv4985) {

			yyrg4985 := len(yyv4985) > 0
			yyv24985 := yyv4985
			yyrl4985, yyrt4985 = z.DecInferLen(yyl4985, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4985 {
				if yyrl4985 <= cap(yyv4985) {
					yyv4985 = yyv4985[:yyrl4985]
				} else {
					yyv4985 = make([]ComponentCondition, yyrl4985)
				}
			} else {
				yyv4985 = make([]ComponentCondition, yyrl4985)
			}
			yyc4985 = true
			yyrr4985 = len(yyv4985)
			if yyrg4985 {
				copy(yyv4985, yyv24985)
			}
		} else if yyl4985 != len(yyv4985) {
			yyv4985 = yyv4985[:yyl4985]
			yyc4985 = true
		}
		yyj4985 := 0
		for ; yyj4985 < yyrr4985; yyj4985++ {
			yyh4985.ElemContainerState(yyj4985)
			if r.TryDecodeAsNil() {
				yyv4985[yyj4985] = ComponentCondition{}
			} else {
				yyv4986 := &yyv4985[yyj4985]
				yyv4986.CodecDecodeSelf(d)
			}

		}
		if yyrt4985 {
			for ; yyj4985 < yyl4985; yyj4985++ {
				yyv4985 = append(yyv4985, ComponentCondition{})
				yyh4985.ElemContainerState(yyj4985)
				if r.TryDecodeAsNil() {
					yyv4985[yyj4985] = ComponentCondition{}
				} else {
					yyv4987 := &yyv4985[yyj4985]
					yyv4987.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4985 := 0
		for ; !r.CheckBreak(); yyj4985++ {

			if yyj4985 >= len(yyv4985) {
				yyv4985 = append(yyv4985, ComponentCondition{}) // var yyz4985 ComponentCondition
				yyc4985 = true
			}
			yyh4985.ElemContainerState(yyj4985)
			if yyj4985 < len(yyv4985) {
				if r.TryDecodeAsNil() {
					yyv4985[yyj4985] = ComponentCondition{}
				} else {
					yyv4988 := &yyv4985[yyj4985]
					yyv4988.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4985 < len(yyv4985) {
			yyv4985 = yyv4985[:yyj4985]
			yyc4985 = true
		} else if yyj4985 == 0 && yyv4985 == nil {
			yyv4985 = []ComponentCondition{}
			yyc4985 = true
		}
	}
	yyh4985.End()
	if yyc4985 {
		*v = yyv4985
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4989 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4990 := &yyv4989
		yy4990.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4991 := *v
	yyh4991, yyl4991 := z.DecSliceHelperStart()
	var yyc4991 bool
	if yyl4991 == 0 {
		if yyv4991 == nil {
			yyv4991 = []ComponentStatus{}
			yyc4991 = true
		} else if len(yyv4991) != 0 {
			yyv4991 = yyv4991[:0]
			yyc4991 = true
		}
	} else if yyl4991 > 0 {
		var yyrr4991, yyrl4991 int
		var yyrt4991 bool
		if yyl4991 > cap(yyv4991) {

			yyrg4991 := len(yyv4991) > 0
			yyv24991 := yyv4991
			yyrl4991, yyrt4991 = z.DecInferLen(yyl4991, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4991 {
				if yyrl4991 <= cap(yyv4991) {
					yyv4991 = yyv4991[:yyrl4991]
				} else {
					yyv4991 = make([]ComponentStatus, yyrl4991)
				}
			} else {
				yyv4991 = make([]ComponentStatus, yyrl4991)
			}
			yyc4991 = true
			yyrr4991 = len(yyv4991)
			if yyrg4991 {
				copy(yyv4991, yyv24991)
			}
		} else if yyl4991 != len(yyv4991) {
			yyv4991 = yyv4991[:yyl4991]
			yyc4991 = true
		}
		yyj4991 := 0
		for ; yyj4991 < yyrr4991; yyj4991++ {
			yyh4991.ElemContainerState(yyj4991)
			if r.TryDecodeAsNil() {
				yyv4991[yyj4991] = ComponentStatus{}
			} else {
				yyv4992 := &yyv4991[yyj4991]
				yyv4992.CodecDecodeSelf(d)
			}

		}
		if yyrt4991 {
			for ; yyj4991 < yyl4991; yyj4991++ {
				yyv4991 = append(yyv4991, ComponentStatus{})
				yyh4991.ElemContainerState(yyj4991)
				if r.TryDecodeAsNil() {
					yyv4991[yyj4991] = ComponentStatus{}
				} else {
					yyv4993 := &yyv4991[yyj4991]
					yyv4993.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4991 := 0
		for ; !r.CheckBreak(); yyj4991++ {

			if yyj4991 >= len(yyv4991) {
				yyv4991 = append(yyv4991, ComponentStatus{}) // var yyz4991 ComponentStatus
				yyc4991 = true
			}
			yyh4991.ElemContainerState(yyj4991)
			if yyj4991 < len(yyv4991) {
				if r.TryDecodeAsNil() {
					yyv4991[yyj4991] = ComponentStatus{}
				} else {
					yyv4994 := &yyv4991[yyj4991]
					yyv4994.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4991 < len(yyv4991) {
			yyv4991 = yyv4991[:yyj4991]
			yyc4991 = true
		} else if yyj4991 == 0 && yyv4991 == nil {
			yyv4991 = []ComponentStatus{}
			yyc4991 = true
		}
	}
	yyh4991.End()
	if yyc4991 {
		*v = yyv4991
	}
}
